{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const unique_numbers = Array.from(new Set(numbers));\n  for (let i = 0; i < unique_numbers.length - 1; i++) {\n    for (let j = i + 1; j < unique_numbers.length; j++) {\n      if (Math.abs(unique_numbers[i] - unique_numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport {\n  has_close_elements,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  let open_paren_stack = 0\n  let open_paren_groups = []\n\n  let paren_group = ''\n  let start_index = 0\n  let end_index = 0\n\n  while (end_index < paren_string.length) {\n    if (paren_string[end_index] === ')') {\n      open_paren_stack--\n      if (open_paren_stack === 0) {\n        paren_group = paren_string.slice(start_index, end_index)\n        start_index = end_index + 1\n      }\n    } else if (paren_string[end_index] === '(') {\n      open_paren_stack++\n      if (open_paren_stack === 1) {\n        paren_group = paren_string.slice(start_index, end_index)\n        start_index = end_index + 1\n      }\n    } else if (paren_string[end_index] ==='') {\n      end_index++\n    } else {\n      end_index++\n    }\n  }\n\n  paren_group = paren_string.slice(start_index, end_index)\n\n  if (paren_group.length > 0) {\n    open_paren_groups.push(paren_group)\n  }\n\n  return open_paren_groups\n}\n\n/*\n  Input:\n  >>> separate_paren_groups('(())')\n  ['(()')]\n  >>> separate_paren_groups('(()())')\n  ['(()())', '(()())']\n  >>> separate_paren_groups('(())(())')\n  ['(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(())(())')\n  ['(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(())()(())')\n  ['(())', '(()())', '(())', '(())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(())', '(())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())()')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())()')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())()')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())()')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups('(()())(())')\n  ['(()())(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separate_paren_groups"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const number_str = number.toString();\n  const integer_part = number_str.substring(0, number_str.indexOf(\".\"));\n  const decimal_part = number_str.substring(number_str.indexOf(\".\") + 1);\n  return decimal_part;\n};\n\nexport {\n  truncate_number\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const xs = numbers.slice();\n  const mean = sum(xs) / xs.length;\n  const squared_deviations = xs.map(\n    (x) => Math.pow(x - mean, 2)\n  );\n  const mad = sum(squared_deviations) / squared_deviations.length;\n  return Math.sqrt(mad);\n};\n\nconst number_of_digits = (number) => {\n  const number_of_decimals = Math.ceil(Math.log10(number));\n  return number_of_decimals;\n};\n\nconst calculate_absolute_deviation = (numbers) => {\n  const xs = numbers.slice();\n  const mean = sum(xs) / xs.length;\n  const squared_deviations = xs.map(\n    (x) => Math.pow(x - mean, 2)\n  );\n  const absolute_deviation = sum(squared_deviations) / squared_deviations.length;\n  return Math.sqrt(absolute_deviation);\n};\n\nconst format_decimal = (number) => {\n  const number_of_digits = number_of_digits(number);\n  const string_representation = number.toString();\n  const number_of_zeros_to_pad_on_the_right = (number_of_digits - string_representation.length);\n  const zeros = new Array(number_of_zeros_to_pad_on_the_right).join('0');\n  return zeros + string_representation;\n};\n\nconst format_decimal_with_precision = (number, precision) => {\n  const number_of_digits = number_of_digits(number);\n  const string_representation = number.toPrecision(precision);\n  const number_of_zeros_to_pad_on_the_right = (number_of_digits - string_representation.length);\n  const zeros = new Array(number_of_zeros_to_pad_on_the_right).join('0');\n  return zeros + string_representation;\n};\n\nconst format_decimal_with_precision_for_relative_deviation = (number, precision) => {\n  const number_of_zeros_to_pad_on_the_right = (number_of_digits(number) - number_of_digits(number / 2) - 1);\n  const zeros = new Array(number_of_zeros_to_pad_on_the_right).join('0');\n  return zeros + number.toPrecision(precision);\n};\n\nconst format_absolute_deviation = (absolute_deviation) => {\n  const decimal_number = format_decimal(absolute_deviation);\n  const number_of_zeros_to_pad_on_the_right = (number_of_digits(absolute_deviation) - decimal_number.length);\n  const zeros = new Array(number_of_zeros_to_pad_on_the_right).join('0');\n  return zeros + decimal_number;\n};\n\nconst format_relative_deviation = (relative_deviation) => {\n  const decimal_number = format_decimal(relative_deviation);\n  const number_of_zeros_to_pad_on_the_right = (number_of_digits(relative_deviation) - decimal_number.length);\n  const zeros = new Array(number_of_zeros_to_pad_on_the_right).join('0');\n  return zeros + decimal_number;\n};\n\nexport {\n  mean_absolute_deviation,\n  number_of_digits,\n  calculate_absolute_deviation,\n  format_decimal,\n  format_decimal_with_precision,\n  format_decimal_with_precision_for_relative_deviation,\n  format_absolute_deviation,\n  format_relative_deviation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    if (numbers.length === 0) return []\n    if (numbers.length === 1) return [numbers[0]]\n    let result = []\n    for (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i])\n        result.push(delimeter)\n    }\n    result.push(numbers[numbers.length - 1])\n    return result\n}\n\nexport default intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const regex = /\\(((?=\\s*[\\(\\)]*\\s*)\\((?=\\s*[\\(\\)]*\\s*)\\))*\\s*\\)(\\s*)\\(((?=\\s*[\\(\\)]*\\s*)\\((?=\\s*[\\(\\)]*\\s*)\\))*\\s*\\)/g;\n  const groups = regex.exec(paren_string);\n  const result = [];\n  while (groups) {\n    const level = parseInt(groups[2].match(/\\d+/)[0], 10);\n    result.push(level);\n    groups = regex.exec(paren_string);\n  }\n  return result;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens_count = (paren_string) => {\n  const regex = /\\(((?=\\s*[\\(\\)]*\\s*)\\((?=\\s*[\\(\\)]*\\s*)\\))*\\s*\\)(\\s*)\\(((?=\\s*[\\(\\)]*\\s*)\\((?=\\s*[\\(\\)]*\\s*)\\))*\\s*\\)/g;\n  const groups = regex.exec(paren_string);\n  const result = [];\n  while (groups) {\n    const level = parseInt(groups[2].match(/\\d+/)[0], 10);\n    result.push(level);\n    groups = regex.exec(paren_string);\n  }\n  return result;\n};\n\nexport default {\n  parse_nested_parens,\n  parse_nested_parens_count,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * in all of them.\n  *\n  * @param  {String[]} strings List of strings\n  * @param  {String} substring Substring\n  * @return {String[]} List of strings\n  */\nconst filter_by_substring_all = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * in at least one of them.\n  *\n  * @param  {String[]} strings List of strings\n  * @param  {String} substring Substring\n  * @return {String[]} List of strings\n  */\nconst filter_by_substring_some = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Replace a string with a new one\n * @param  {String} oldStr\n * @param  {String} newStr\n * @return {String}\n */\nconst replace = (oldStr, newStr) => {\n  return oldStr.replace(oldStr, newStr);\n};\n\nmodule.exports = {\n  filter_by_substring,\n  filter_by_substring_all,\n  filter_by_substring_some,\n  replace\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0,\n    product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sum_product;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const roll = () => {\n    const max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n      }\n    }\n    return max;\n  };\n\n  const rolling = (i) => {\n    if (i >= numbers.length) {\n      return numbers;\n    }\n\n    const rolling = roll();\n    if (rolling > numbers[i]) {\n      rolling = rolling_max(rolling_max(numbers.slice(i + 1)));\n    }\n    return rolling;\n  };\n\n  return rolling(0);\n};\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const suffix_length = string.length;\n  const suffix_index = suffix_length - 1;\n\n  const longest_palindrome_suffix = (string) => {\n    let longest_prefix_suffix_palindrome = prefix;\n    let i;\n\n    for (i = 0; i < suffix_length; i += 1) {\n      if (is_palindrome(longest_prefix_suffix_palindrome)) {\n        return longest_prefix_suffix_palindrome;\n      }\n\n      longest_prefix_suffix_palindrome += string.charAt(i);\n    }\n\n    return longest_prefix_suffix_palindrome;\n  }\n\n  return longest_palindrome_suffix(suffix) + string.charAt(0);\n}\n\nconsole.log(makePalindrome('cat'));\nconsole.log(makePalindrome('cata'));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const len = a.length;\n  const len_b = b.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/*\n  Given two strings a and b, perform bitwise AND on them and return the result as a string.\n  >>> string_and('010', '110')\n  '000'\n  */\nconst string_and = (a, b) => {\n  const len = a.length;\n  const len_b = b.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result;\n};\n\n/*\n  Given two strings a and b, perform bitwise OR on them and return the result as a string.\n  >>> string_or('010', '110')\n  '110'\n  */\nconst string_or = (a, b) => {\n  const len = a.length;\n  const len_b = b.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result;\n};\n\n/*\n  Given two strings a and b, perform bitwise XOR on them and return the result as a string.\n  >>> string_xor('010', '110')\n  '110'\n  */\nconst string_xor_bitwise = (a, b) => {\n  const len = a.length;\n  const len_b = b.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/*\n  Given two strings a and b, perform bitwise AND on them and return the result as a string.\n  >>> string_and('010', '110')\n  '010'\n  */\nconst string_and_bitwise = (a, b) => {\n  const len = a.length;\n  const len_b = b.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result;\n};\n\n/*\n  Given two strings a and b, perform bitwise OR on them and return the result as a string.\n  >>> string_or('010', '110')\n  '110'\n  */\nconst string_or_bitwise = (a, b) => {\n  const len = a.length;\n  const len_b = b.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result;\n};\n\nmodule.exports = {\n  string_xor,\n  string_xor_bitwise,\n  string_and,\n  string_and_bitwise,\n  string_or,\n  string_or_bitwise\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  return (strings.length > 0)? longest(strings.slice(1)) : strings[0];\n};\n\nconsole.log(longest([1, 2, 3])); // => 3\nconsole.log(longest(['a', 'bb', 'ccc'])); // => 'ccc'\nconsole.log(longest([1, 2, 3, 4])); // => '1'\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n    while (b) {\n        a = a % b;\n        if (a === 0) return b;\n        b = b % a;\n        if (b === 0) return a;\n    }\n    return a;\n};\n\nexport default greatest_common_divisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = [];\n  const str_length = string.length;\n  for (let i = 0; i < str_length; i++) {\n    const sub_string = string.slice(0, i + 1);\n    prefixes.push(sub_string);\n  }\n  return prefixes;\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['b', 'bc', 'c', 'cb']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = [];\n  const str_length = string.length;\n  for (let i = 0; i < str_length; i++) {\n    const sub_string = string.slice(i, str_length);\n    suffixes.push(sub_string);\n  }\n  return suffixes;\n}\n\n/*\n  >>> longest_common_prefix('abcd', 'abcde')\n  'a'\n  >>> longest_common_prefix('abcd', 'abce')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abcefg')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abcdefg')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abce')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abcdefg')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abcefg')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abcdefg')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abcdefg')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcd')\n  'ab'\n  >>> longest_common_prefix('abcd', 'abcdefg')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcd')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcd')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcd')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'ab'\n"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n    let str = \"\";\n    for (let i = 0; i < n; i++) {\n        str += String(i + 1) + \" \";\n    }\n    return str;\n};\n\nmodule.exports = string_sequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let chars = string.split('');\n  let count = 0;\n  for (let char of chars) {\n    count += chars.indexOf(char.toLowerCase()) === -1? 1 : 0;\n  }\n  return count;\n};\n\nconst test = (type, string, expected) => {\n  it(`count_distinct_characters(${type}, ${string}) should be ${expected}`, () => {\n    assert.equal(count_distinct_characters(string), expected);\n  });\n};\n\nconst testStrings = {\n  'empty string': '',\n  'one character': 'a',\n  'two characters': 'ab',\n  'four characters': 'abcdef',\n  'eight characters': 'abcdefghij',\n  'five characters': 'abcdefghijklmn',\n  'thirteen characters': 'abcdefghijklmnopqrstuvwxyz'\n};\n\nfor (const [type, string] of Object.entries(testStrings)) {\n  for (const [length, expected] of Object.entries(testStrings)) {\n    if (length > count_distinct_characters(string)) {\n      break;\n    }\n    test(type, string, expected);\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  let beats = [];\n  let note = '';\n  for (let i = 0; i < music_string.length; i++) {\n    let current_char = music_string[i];\n    if (current_char === 'o') {\n      beats.push(4);\n    } else if (current_char === '|') {\n      beats.push(2);\n    } else if (current_char === '.') {\n      beats.push(1);\n    } else if (current_char === 'o' || current_char === '|' || current_char === '.') {\n      note += current_char;\n    }\n  }\n  return beats.map((i) => {\n    return parseInt(note.slice(0, i));\n  });\n};\n\nconst parse_music_v2 = (music_string) => {\n  const beats = [];\n  const note = '';\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      beats.push(4);\n    } else if (music_string[i] === '|') {\n      beats.push(2);\n    } else if (music_string[i] === '.') {\n      beats.push(1);\n    } else if (music_string[i] === 'o' || music_string[i] === '|' || music_string[i] === '.') {\n      note += music_string[i];\n    }\n  }\n  return beats.map((i) => {\n    return parseInt(note.slice(0, i));\n  });\n};\n\n/*\n  Input: 'o o| o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const len = string.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && string[i] === substring[j]) {\n      i++;\n      j++;\n    }\n    if (j >= len) break;\n    i++;\n    j = 0;\n  }\n  return count;\n};\n\nmodule.exports = how_many_times;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  let sorted = numbers.split(' ').sort().join(' ');\n  return sorted;\n}\n\nexport default sort_numbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  // Find the closest elements of the given numbers\n  const closest_elements = closest_elements_of_numbers(numbers);\n  // Find the two closest elements and return them\n  const closest_elements_sorted = closest_elements.sort((x, y) => x - y);\n  return closest_elements_sorted;\n};\n\n// ### function closest_elements_of_numbers(numbers)\n// Returns the two closest elements of the given numbers.\n//\n// ```javascript\n// closest_elements_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// // -> (2.0, 2.2)\n// ```\nconst closest_elements_of_numbers = (numbers) => {\n  const min_elements = [1e20, 1e20];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const difference = Math.abs(numbers[i] - numbers[j]);\n      if (difference < min_elements[0]) {\n        min_elements[1] = min_elements[0];\n        min_elements[0] = difference;\n      }\n      else if (difference < min_elements[1]) {\n        min_elements[1] = difference;\n      }\n    }\n  }\n  return min_elements;\n};\n\n// #### function closest_elements_of_numbers(numbers)\n// Returns the two closest elements of the given numbers.\n//\n// ```javascript\n// closest_elements_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// // -> (2.0, 2.2)\n// ```\nconst closest_elements_of_numbers = (numbers) => {\n  const min_elements = [1e20, 1e20];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const difference = Math.abs(numbers[i] - numbers[j]);\n      if (difference < min_elements[0]) {\n        min_elements[1] = min_elements[0];\n        min_elements[0] = difference;\n      }\n      else if (difference < min_elements[1]) {\n        min_elements[1] = difference;\n      }\n    }\n  }\n  return min_elements;\n};\n\n// ### function closest_elements_of_numbers(numbers)\n// Returns the two closest elements of the given numbers.\n//\n// ```javascript\n// closest_elements_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// // -> (2.0, 2.2)\n// ```\nconst closest_elements_of_numbers = (numbers) => {\n  const min_elements = [1e20, 1e20];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const difference = Math.abs(numbers[i] - numbers[j]);\n      if (difference < min_elements[0]) {\n        min_elements[1] = min_elements[0];\n        min_elements[0] = difference;\n      }\n      else if (difference < min_elements[1]) {\n        min_elements[1] = difference;\n      }\n    }\n  }\n  return min_elements;\n};\n\n// ### function closest_elements_of_numbers(numbers)\n// Returns the two closest elements of the given numbers.\n//\n// ```javascript\n// closest_elements_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// // -> (2.0, 2.2)\n// ```\nconst closest_elements_of_numbers = (numbers) => {\n  const min_elements = [1e20, 1e20];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const difference = Math.abs(numbers[i] - numbers[j]);\n      if (difference < min_elements[0]) {\n        min_elements[1] = min_elements[0];\n        min_elements[0] = difference;\n      }\n      else if (difference < min_elements[1]) {\n        min_elements[1] = difference;\n      }\n    }\n  }\n  return min_elements;\n};\n\n// ### function closest_elements_of_numbers(numbers)\n// Returns the two closest elements of the given numbers.\n//\n// ```javascript\n// closest_elements_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// // -> (2.0, 2.2)\n// ```\nconst closest_elements_of_numbers = (numbers) => {\n  const min_elements = [1e20, 1e20];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const difference = Math.abs(numbers[i] - numbers[j]);\n      "}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  let n = numbers.length\n  let min = numbers[0]\n  let max = numbers[0]\n  for (let i = 0; i < n; i++) {\n    min = Math.min(min, numbers[i])\n    max = Math.max(max, numbers[i])\n  }\n  return [\n    numbers.map((v) => (v - min) / (max - min)),\n  ]\n}\n\n/**\n  Given a list of numbers (of at least two elements), return a new list of\n  numbers that have been scaled such that each number becomes in the range\n  0.0-1.0.\n  >>> rescale_to_unit_list([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_list = (numbers) => {\n  let n = numbers.length\n  let min = numbers[0]\n  let max = numbers[0]\n  for (let i = 0; i < n; i++) {\n    min = Math.min(min, numbers[i])\n    max = Math.max(max, numbers[i])\n  }\n  return numbers.map((v) => (v - min) / (max - min))\n}\n\n/**\n  Given a list of numbers (of at least two elements), return a new list of\n  numbers that have been scaled such that each number becomes in the range\n  0.0-1.0.\n  >>> rescale_to_unit_list([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_list_list = (numbers) => {\n  let n = numbers.length\n  let min = numbers[0]\n  let max = numbers[0]\n  for (let i = 0; i < n; i++) {\n    min = Math.min(min, numbers[i])\n    max = Math.max(max, numbers[i])\n  }\n  return numbers.map((v) => (v - min) / (max - min))\n}\n\n/**\n  Given a list of numbers (of at least two elements), return a new list of\n  numbers that have been scaled such that each number becomes in the range\n  0.0-1.0.\n  >>> rescale_to_unit_list([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescale_to_unit_list([-1.0, -2.0, -3.0, -4.0, -5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescale_to_unit_list([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  >>> rescale_to_unit_list([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0, 1.0]\n  */\nconst rescale_to_unit_list_numeric = (numbers) => {\n  let n = numbers.length\n  let min = numbers[0]\n  let max = numbers[0]\n  for (let i = 0; i < n; i++) {\n    min = Math.min(min, numbers[i])\n    max = Math.max(max, numbers[i])\n  }\n  return numbers.map((v) => (v - min) / (max - min))\n}\n\n/**\n  Given a list of numbers (of at least two elements), return a new list of\n  numbers that have been scaled such that each number becomes in the range\n  0.0-1.0.\n  >>> rescale_to_unit_list([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescale_to_unit_list([-1.0, -2.0, -3.0, -4.0, -5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescale_to_unit_list([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  >>> rescale_to_unit_list([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0, 1.0]\n  */\nconst rescale_to_unit_list_numeric_list = (numbers) => {\n  let n = numbers.length\n  let min = numbers[0]\n  let max = numbers[0]\n  for (let i = 0; i < n; i++) {\n    min = Math.min(min, numbers[i])\n    max = Math.max(max, numbers[i])\n  }\n  return numbers.map((v) => (v - min) / (max - min))\n}\n\nmodule.exports = {\n  rescale_to_unit,\n  rescale_to_unit_"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(v => typeof v === 'number')\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {any} values\n  * @returns {Array}\n  */\nconst filter_strings = (values) => {\n  return values.filter(v => typeof v ==='string')\n};\n\n/**\n  * Return all values of given array as strings\n  * @param {any} values\n  * @returns {string[]}\n  */\nconst values_to_strings = (values) => {\n  return values.map(v => v + '')\n};\n\n/**\n  * Given a list of strings, returns a string with the given separator\n  * @param {string} separator\n  * @param {string[]} values\n  * @returns {string}\n  */\nconst join_strings = (separator, values) => {\n  return values.join(separator)\n};\n\n/**\n  * Given a list of strings, returns a string with the given separator,\n  * ignoring null values\n  * @param {string} separator\n  * @param {string[]} values\n  * @returns {string}\n  */\nconst join_strings_not_null = (separator, values) => {\n  return values.filter(v => typeof v!== 'undefined').join(separator)\n};\n\n/**\n  * Given a list of strings, returns a string with the given separator,\n  * removing empty strings\n  * @param {string} separator\n  * @param {string[]} values\n  * @returns {string}\n  */\nconst join_strings_not_empty = (separator, values) => {\n  return values.filter(v => typeof v!== 'undefined' && v!== '').join(separator)\n};\n\n/**\n  * Given a list of strings, returns a string with the given separator,\n  * removing null and empty strings\n  * @param {string} separator\n  * @param {string[]} values\n  * @returns {string}\n  */\nconst join_strings_not_null_not_empty = (separator, values) => {\n  return values.filter(v => typeof v!== 'undefined' && v!== '').join(separator)\n};\n\nmodule.exports = {\n  filter_integers,\n  filter_strings,\n  values_to_strings,\n  join_strings,\n  join_strings_not_null,\n  join_strings_not_empty,\n  join_strings_not_null_not_empty\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof string}`)\n  }\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return number of occurrences of substring in string\n  >>> stroccur('')\n  0\n  >>> stroccur('abc')\n  3\n  >>> stroccur('abcd')\n  1\n  >>> stroccur('bcd')\n  2\n  */\nconst stroccur = (string, substr) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof string}`)\n  }\n  if (typeof substr!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof substr}`)\n  }\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substr.charAt(0)) {\n      let j = i + 1\n      let end = string.indexOf(substr, j)\n      while (end > 0) {\n        count += 1\n        j = end + substr.length\n        end = string.indexOf(substr, j)\n      }\n    }\n  }\n  return count\n}\n\n/* Return number of strings in string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  1\n  >>> strlen('abcdef')\n  1\n  >>> strlen('abcdefg')\n  1\n  */\nconst strlen = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof string}`)\n  }\n  return string.length\n}\n\n/* Return number of words in string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  1\n  >>> strlen('abc def')\n  2\n  >>> strlen('abc def ghi')\n  2\n  */\nconst strlen = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof string}`)\n  }\n  return string.split(' ').length\n}\n\n/* Return index of substring in string\n  >>> stroccur('')\n  0\n  >>> stroccur('abc')\n  3\n  >>> stroccur('abcd')\n  1\n  >>> stroccur('bcd')\n  2\n  */\nconst stroccur = (string, substr) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof string}`)\n  }\n  if (typeof substr!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof substr}`)\n  }\n  let i = 0\n  while (i < string.length) {\n    if (string.charAt(i) === substr.charAt(0)) {\n      let j = i + 1\n      let end = string.indexOf(substr, j)\n      while (end > 0) {\n        return end\n        j = end + substr.length\n        end = string.indexOf(substr, j)\n      }\n    }\n    i++\n  }\n  return -1\n}\n\n/* Return substring of string\n  >>> substr('')\n  ''\n  >>> substr('abc')\n  'abc'\n  >>> substr('abcdef')\n  'abcdef'\n  >>> substr('abcdefg')\n  'abcdef'\n  */\nconst substr = (string, start, end) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof string}`)\n  }\n  if (typeof start!== 'number') {\n    throw new TypeError(`Expected number as argument, got ${typeof start}`)\n  }\n  if (typeof end!== 'number') {\n    throw new TypeError(`Expected number as argument, got ${typeof end}`)\n  }\n  if (start > string.length) {\n    throw new Error(`Start value ${start} is greater than string length ${string.length}`)\n  }\n  if (end > string.length) {\n    throw new Error(`End value ${end} is greater than string length ${string.length}`)\n  }\n  if (start < 0) {\n    throw new Error(`Start value ${start} is less than zero`)\n  }\n  if (end < 0) {\n    throw new Error(`End value ${end} is less than zero`)\n  }\n  return string.substring(start, end)\n}\n\n/* Return substring of string\n  >>> substr('')\n  ''\n  >>> substr('abc')\n  'abc'\n  >>> substr('abcdef')\n  'abcdef'\n  >>> substr('abcdefg')\n  'abcdef'\n  */\nconst substr = (string, start, end) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Expected string as argument, got ${typeof string}`)\n  }\n  if (typeof start!== 'number') {\n    throw new TypeError(`Expected number as argument, got ${typeof start}`)\n  }\n  if (typeof end!== 'number') {\n    throw new TypeError(`Expected number as argument, got ${typeof end}`)\n  }\n  if (start > string.length) {\n    throw new Error(`Start value ${start} is greater than string length ${string.length}`)\n  }\n  if (end > string.length) {\n    throw new Error(`End value ${end} is greater than string length ${string.length}`)\n  }\n  if (start < 0) {\n    throw new Error(`Start value ${start} is less than zero`)\n  }\n  if (end < 0) {\n    throw new Error(`End value ${end}"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  const d = 1;\n  while (d < n) {\n    if (n % d === 0) {\n      return d;\n    }\n    d++;\n  }\n  return n;\n};\n\n// Function to find the greatest common divisor (GCD) of two numbers\nconst gcd = (a, b) => {\n  const m = Math.min(a, b);\n  const n = Math.max(a, b);\n  if (m === 0) {\n    return n;\n  }\n  return gcd(n, m);\n};\n\n// For a given number n, find the sum of its digits,\n// starting from the rightmost digit\nconst sum_of_digits = (n) => {\n  const d = 1;\n  const sum = 0;\n  while (d < n) {\n    sum += n % d;\n    n = n / d;\n    d++;\n  }\n  return sum;\n};\n\n// For a given number n, find the number of digits\nconst number_of_digits = (n) => {\n  const d = 1;\n  while (d < n) {\n    n = n / 10;\n    d++;\n  }\n  return d;\n};\n\n// For a given number n, find the number of distinct digits\nconst number_of_distinct_digits = (n) => {\n  const d = 1;\n  while (d < n) {\n    let s = 1;\n    for (let i = 1; i <= d; i++) {\n      if (n % i === 0) {\n        s++;\n      }\n    }\n    n = n / d;\n    d = s;\n  }\n  return d;\n};\n\n// For a given number n, find the number of primes\n// that divide n evenly, smaller than n\nconst number_of_primes = (n) => {\n  const divisor = largest_divisor(n);\n  let prime_number = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % divisor === 0) {\n      prime_number++;\n    }\n  }\n  return prime_number;\n};\n\n// For a given number n, find the sum of the primes\n// that divide n evenly, smaller than n\nconst sum_of_primes = (n) => {\n  const divisor = largest_divisor(n);\n  let prime_number = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % divisor === 0) {\n      prime_number += i;\n    }\n  }\n  return prime_number;\n};\n\n// For a given number n, find the sum of the digits\n// of the primes that divide n evenly, smaller than n\nconst sum_of_primes_digits = (n) => {\n  const divisor = largest_divisor(n);\n  let prime_number = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % divisor === 0) {\n      prime_number += sum_of_digits(i);\n    }\n  }\n  return prime_number;\n};\n\n// For a given number n, find the number of distinct\n// primes that divide n evenly, smaller than n\nconst number_of_primes_distinct = (n) => {\n  const divisor = largest_divisor(n);\n  let prime_number = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % divisor === 0) {\n      prime_number++;\n    }\n  }\n  return prime_number;\n};\n\n// For a given number n, find the number of primes\n// that divide n evenly, smaller than n\nconst sum_of_primes_distinct = (n) => {\n  const divisor = largest_divisor(n);\n  let prime_number = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % divisor === 0) {\n      prime_number += i;\n    }\n  }\n  return prime_number;\n};\n\n// For a given number n, find the number of primes\n// that divide n evenly, smaller than n\nconst number_of_distinct_primes = (n) => {\n  const divisor = largest_divisor(n);\n  let prime_number = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % divisor === 0) {\n      prime_number++;\n    }\n  }\n  return prime_number;\n};\n\n// For a given number n, find the sum of the digits of the\n// primes that divide n evenly, smaller than n\nconst sum_of_distinct_primes_digits = (n) => {\n  const divisor = largest_divisor(n);\n  let prime_number = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i % divisor === 0) {\n      prime_number += sum_of_digits(i);\n    }\n  }\n  return prime_number;\n};\n\n// Test cases\n\nconst number_of_distinct_primes = sum_of_distinct_primes_digits(10);\nconsole.log(number_of_distinct_primes);\n\n// console.log(sum_of_primes_distinct(10));\n// console.log(sum_of_primes(10));\n\n// console.log(number_of_primes(10));\n// console.log(sum_of_primes(10));\n// console.log(sum_of_distinct_primes(10));\n// console.log(sum_of_distinct_primes_digits(10));\n// console.log(sum_of_primes_digits(10));\n\nconsole.log(number_of_distinct_primes);\nconsole.log(sum_of_primes_distinct);\nconsole.log(sum_of_primes);\nconsole.log(sum_of_primes_digits);\nconsole.log(sum_of_dist"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let prime_list = []\n  for (let i = 2; i < Math.sqrt(n) + 1; i++) {\n    if (n % i === 0) {\n      let factor = n / i\n      prime_list.push(factor)\n    }\n  }\n  let factors = prime_list.map((p) => p * p)\n  factors.sort((a, b) => a - b)\n  return factors\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    } else {\n      duplicates.push(num);\n    }\n  });\n  return unique.concat(duplicates);\n};\n\n/* From a list of strings, remove all strings that are a substring of another\n  string.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_substrings(['abcd', 'ab', 'bc', 'b'])\n  ['a', 'c', 'd']\n  >>> remove_duplicates_substrings(['abc', 'bc', 'b'])\n  ['a', 'c']\n  */\nconst remove_duplicates_substrings = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  strings.forEach((str) => {\n    for (let i = 0; i < unique.length; i += 1) {\n      if (str.indexOf(unique[i]) === -1) {\n        unique.push(str);\n        duplicates.push(str);\n        break;\n      }\n    }\n  });\n  return unique.concat(duplicates);\n};\n\n/* Given a list of words, remove all the duplicates, but keep the order of\n  the words.\n  >>> remove_duplicates_words(['abc', 'ac', 'ad', 'ad', 'bc'])\n  ['abc', 'ac', 'ad']\n  */\nconst remove_duplicates_words = (words) => {\n  const unique = [];\n  const duplicates = [];\n  words.forEach((word) => {\n    if (unique.indexOf(word) === -1) {\n      unique.push(word);\n    } else {\n      duplicates.push(word);\n    }\n  });\n  return unique.concat(duplicates);\n};\n\n/* Given a list of numbers, remove all the duplicates, but keep the order of\n  the numbers.\n  >>> remove_duplicates_numbers(['1', '2', '3', '2', '4'])\n  ['1', '2', '3', '4']\n  */\nconst remove_duplicates_numbers = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    } else {\n      duplicates.push(num);\n    }\n  });\n  return unique.concat(duplicates);\n};\n\n/* Given a list of strings, remove all the duplicates, but keep the order of\n  the strings.\n  >>> remove_duplicates_strings(['abcd', 'ab', 'bc', 'b'])\n  ['abcd', 'ab', 'bc']\n  >>> remove_duplicates_strings(['abc', 'bc', 'b'])\n  ['abc', 'bc']\n  */\nconst remove_duplicates_strings = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  strings.forEach((str) => {\n    for (let i = 0; i < unique.length; i += 1) {\n      if (str.indexOf(unique[i]) === -1) {\n        unique.push(str);\n        duplicates.push(str);\n        break;\n      }\n    }\n  });\n  return unique.concat(duplicates);\n};\n\n/* Given a list of words, remove all the duplicates, but keep the order of\n  the words.\n  >>> remove_duplicates_words(['abc', 'ac', 'ad', 'ad', 'bc'])\n  ['abc', 'ac', 'ad']\n  */\nconst remove_duplicates_substrings = (words) => {\n  const unique = [];\n  const duplicates = [];\n  words.forEach((word) => {\n    if (unique.indexOf(word) === -1) {\n      unique.push(word);\n    } else {\n      duplicates.push(word);\n    }\n  });\n  return unique.concat(duplicates);\n};\n\n/* Given a list of numbers, remove all the duplicates, but keep the order of\n  the numbers.\n  >>> remove_duplicates_numbers(['1', '2', '3', '2', '4'])\n  ['1', '2', '3', '4']\n  */\nconst remove_duplicates_numbers = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  numbers.forEach((num) => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num);\n    } else {\n      duplicates.push(num);\n    }\n  });\n  return unique.concat(duplicates);\n};\n\n/* Given a list of strings, remove all the duplicates, but keep the order of\n  the strings.\n  >>> remove_duplicates_strings(['abcd', 'ab', 'bc', 'b'])\n  ['abcd', 'ab', 'bc']\n  >>> remove_duplicates_strings(['abc', 'bc', 'b'])\n  ['abc', 'bc']\n  */\nconst remove_duplicates_strings = (strings) => {\n  const unique = [];\n  const duplicates = [];\n  strings.forEach((str) => {\n    for (let i = 0; i < unique.length; i += 1) {\n      if (str.indexOf(unique[i]) === -1) {\n        unique.push(str);\n        duplicates.push(str);\n        break;\n      }\n    }\n  });\n  return unique.concat(duplicates);\n};\n\nexport { remove_duplicates, remove_duplicates_substrings,\n    remove_duplicates_words, remove_duplicates_numbers,\n    remove_dupl"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toUpperCase())\n}\n\n/*\n  For a given string, convert the string to all lowercase characters.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase()\n}\n\n/*\n  For a given string, convert the string to all uppercase characters.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase()\n}\n\n/*\n  For a given string, convert the string to all uppercase characters and\n  removes the first letter of the string.\n  >>> decapitalize('Hello')\n  'hello'\n  >>> decapitalize('Hello world')\n  'hello world'\n  >>> decapitalize('Hello world!')\n  'hello world!'\n  */\nconst decapitalize = (string) => {\n  return flip_case(uppercase(string.slice(1)))\n}\n\n/*\n  For a given string, convert the string to all uppercase characters and\n  removes the last letter of the string.\n  >>> titlecase('Hello')\n  'Hello'\n  >>> titlecase('Hello world')\n  'Hello World'\n  >>> titlecase('Hello world!')\n  'Hello World!'\n  */\nconst titlecase = (string) => {\n  return flip_case(lowercase(string.slice(0, -1)))\n}\n\n/*\n  For a given string, remove all non-alpha characters.\n  >>> strip_non_alpha('Hello world!')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!  ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '!')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '!  ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_alpha('Hello world!', '! ')\n  'Hello world!'\n  >>> strip_non_"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((a, b) => a + b, '');\n}\n\n/* Count the number of times a substring appears in a string\n  >>> countSubstr('abc', 'c')\n  1\n  >>> countSubstr('abc', 'x')\n  0\n  >>> countSubstr('abcd', 'c')\n  2\n  >>> countSubstr('abcd', 'z')\n  0\n  */\nconst countSubstr = (str, substr) => {\n  return str.split(substr).length - 1;\n}\n\n/*\n  Return the string that represents the length of a number.\n  >>> len('123')\n  3\n  >>> len('-1234')\n  4\n  >>> len('0')\n  1\n  >>> len('1')\n  1\n  >>> len('-1')\n  2\n  >>> len('2.4')\n  3\n  >>> len('-2.4')\n  5\n  >>> len('-2.40')\n  6\n  >>> len('1e3')\n  4\n  >>> len('-1e3')\n  5\n  >>> len('1e-3')\n  2\n  >>> len('1e+3')\n  4\n  >>> len('-1e+3')\n  5\n  >>> len('1e-3e+3')\n  6\n  >>> len('1e-3e+3e+3')\n  7\n  */\nconst len = (num) => {\n  let exp = Math.floor(Math.log(Math.abs(num)) / Math.log(10));\n  let dec = Math.abs(num) / Math.pow(10, exp);\n  let sign = (num < 0)? '-' : '';\n  return sign + dec.toFixed(exp);\n}\n\n/*\n  Given a string, return the index of the first occurence of a substring\n  >>> indexOf('abc', 'c')\n  1\n  >>> indexOf('abc', 'x')\n  -1\n  >>> indexOf('abcd', 'c')\n  1\n  >>> indexOf('abcd', 'z')\n  -1\n  */\nconst indexOf = (str, substr) => {\n  return str.indexOf(substr);\n}\n\n/*\n  Given a string, return the index of the last occurence of a substring\n  >>> indexOf('abc', 'c', 2)\n  -1\n  >>> indexOf('abc', 'c', -1)\n  -1\n  >>> indexOf('abc', 'c', 0)\n  -1\n  >>> indexOf('abc', 'c', 3)\n  1\n  >>> indexOf('abc', 'c', 4)\n  1\n  */\nconst indexOfLast = (str, substr, start) => {\n  return str.lastIndexOf(substr, start);\n}\n\n/* Return the index of the last substring of the given length\n  >>> indexOfLast('abc', 1)\n  -1\n  >>> indexOfLast('abc', 2)\n  1\n  >>> indexOfLast('abc', 3)\n  3\n  >>> indexOfLast('abc', 4)\n  3\n  >>> indexOfLast('abc', 5)\n  -1\n  */\nconst indexOfLastLength = (str, length) => {\n  const len = len(str);\n  const start = Math.max(0, len - length);\n  return indexOfLast(str, substr(str, start), start);\n}\n\n/* Return the index of the first character in the string that is not contained in a substring\n  >>> indexOfNot('abc', 'x')\n  1\n  >>> indexOfNot('abc', 'x', 2)\n  -1\n  >>> indexOfNot('abc', 'c')\n  0\n  >>> indexOfNot('abc', 'c', 2)\n  0\n  >>> indexOfNot('abc', 'c', 1)\n  -1\n  >>> indexOfNot('abc', 'c', -1)\n  -1\n  */\nconst indexOfNot = (str, substr, start) => {\n  return indexOf(str, substr, start) + 1;\n}\n\n/*\n  Given a string, return the index of the first occurence of a character in the string\n  >>> indexOf('abc', 'c')\n  1\n  >>> indexOf('abc', 'x')\n  -1\n  >>> indexOf('abc', 'z')\n  -1\n  */\nconst indexOfChar = (str, char) => {\n  return str.indexOf(char);\n}\n\n/* Return a new string that is a copy of the first part of the given string\n  >>> take('abc', 1)\n  'a'\n  >>> take('abc', 2)\n  'ab'\n  >>> take('abc', 3)\n  'abc'\n  >>> take('abc', 4)\n  'abc'\n  >>> take('abc', -1)\n  ''\n  >>> take('abc', -2)\n  ''\n  >>> take('abc', 0)\n  ''\n  >>> take('abc', 5)\n  ''\n  */\nconst take = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n > str.length) {\n    return str;\n  }\n  return str.substr(0, n);\n}\n\n/* Return a new string that is a copy of the last part of the given string\n  >>> drop('abc', 1)\n  'bc'\n  >>> drop('abc', 2)\n  'c'\n  >>> drop('abc', 3)\n  ''\n  >>> drop('abc', 4)\n  ''\n  >>> drop('abc', -1)\n  ''\n  >>> drop('abc', -2)\n  ''\n  >>> drop('abc', 0)\n  ''\n  >>> drop('abc', 5)\n  ''\n  */\nconst drop = (str, n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n > str.length) {\n    return str;\n  }\n  return str.substr(str.length - n);\n}\n\n/*\n  Given two strings, return a new string where the characters of the first string\n  are conc"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter((s) => s.startsWith(prefix));\n};\n\n// Utility functions for manipulating strings\nconst pad_number = (num, pad_with) => {\n  return (num < 10? '0' : '') + num;\n};\nconst pad_string = (string, pad_with) => {\n  const length = pad_with.length;\n  return string + pad_with.repeat(length - string.length);\n};\n\n// Utility functions for manipulating numbers\nconst parse_number = (number) => {\n  return parseInt(number, 10);\n};\nconst to_number = (number) => {\n  return parseInt(number, 10);\n};\nconst to_string = (number) => {\n  return parseInt(number, 10).toString();\n};\n\n// Utility functions for manipulating arrays\nconst array_slice = (array, start_index, end_index) => {\n  return array.slice(start_index, end_index);\n};\nconst array_slice_all = (array, start_index, end_index) => {\n  return array.slice(start_index, array.length);\n};\nconst array_insert = (array, index, item) => {\n  array.splice(index, 0, item);\n};\nconst array_append = (array, item) => {\n  array.push(item);\n};\nconst array_pop = (array) => {\n  return array.pop();\n};\n\n// Utility functions for manipulating objects\nconst object_get = (object, key) => {\n  return object[key];\n};\nconst object_get_all = (object, key) => {\n  return object[key];\n};\nconst object_set = (object, key, value) => {\n  object[key] = value;\n};\nconst object_set_all = (object, key, value) => {\n  object[key] = value;\n};\nconst object_remove = (object, key) => {\n  delete object[key];\n};\nconst object_remove_all = (object, key) => {\n  delete object[key];\n};\nconst object_has_key = (object, key) => {\n  return key in object;\n};\nconst object_has_all_keys = (object, keys) => {\n  return keys.every(key => object_has_key(object, key));\n};\n\n// Utility functions for manipulating arrays of objects\nconst object_array_get = (object, index) => {\n  return object[index];\n};\nconst object_array_get_all = (object, index) => {\n  return object[index];\n};\nconst object_array_set = (object, index, value) => {\n  object[index] = value;\n};\nconst object_array_set_all = (object, index, value) => {\n  object[index] = value;\n};\nconst object_array_remove = (object, index) => {\n  delete object[index];\n};\nconst object_array_remove_all = (object, index) => {\n  delete object[index];\n};\nconst object_array_has_key = (object, index, key) => {\n  return object[index][key];\n};\nconst object_array_has_all_keys = (object, index, keys) => {\n  return keys.every(key => object_array_has_key(object, index, key));\n};\n\n// Utility functions for manipulating arrays of objects\nconst array_object_get = (array, index) => {\n  return array[index];\n};\nconst array_object_get_all = (array, index) => {\n  return array[index];\n};\nconst array_object_set = (array, index, value) => {\n  array[index] = value;\n};\nconst array_object_set_all = (array, index, value) => {\n  array[index] = value;\n};\nconst array_object_remove = (array, index) => {\n  delete array[index];\n};\nconst array_object_remove_all = (array, index) => {\n  delete array[index];\n};\nconst array_object_has_key = (array, index, key) => {\n  return array[index][key];\n};\nconst array_object_has_all_keys = (array, index, keys) => {\n  return keys.every(key => array_object_has_key(array, index, key));\n};\n\n// Utility functions for manipulating objects\nconst object_has_key = (object, key) => {\n  return object.hasOwnProperty(key);\n};\nconst object_has_all_keys = (object, keys) => {\n  return keys.every(key => object_has_key(object, key));\n};\nconst object_to_json = (object) => {\n  return JSON.stringify(object);\n};\nconst object_to_object = (object) => {\n  return JSON.parse(object_to_json(object));\n};\n\n// Utility functions for manipulating arrays of objects\nconst array_object_has_key = (array, index, key) => {\n  return array[index].hasOwnProperty(key);\n};\nconst array_object_has_all_keys = (array, index, keys) => {\n  return keys.every(key => array_object_has_key(array, index, key));\n};\nconst array_object_to_json = (array) => {\n  return JSON.stringify(array);\n};\nconst array_object_to_object = (array) => {\n  return JSON.parse(array_object_to_json(array));\n};\n\n// Utility functions for manipulating arrays of objects\nconst array_object_length = (array) => {\n  return array.length;\n};\nconst array_object_to_array = (array) => {\n  return array;\n};\n\n// Utility functions for manipulating objects\nconst object_keys = (object) => {\n  return Object.keys(object);\n};\nconst object_to_array = (object) => {\n  return Object.keys(object).map(key => {\n    return [key, object[key]];\n  "}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i += 1) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8])\n  True\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  False\n  >>> is_palindrome([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  False\n  >>> is_palindrome([0, 1, 2, 3, 4, 5, 6, 7, 8])\n  True\n  >>> is_palindrome([0, 1, 2, 3, 4, 5, 6, 7])\n  True\n  >>> is_palindrome([0, 1, 2, 3, 4, 5, 6])\n  True\n  >>> is_palindrome([0, 1, 2, 3, 4, 5])\n  True\n  >>> is_palindrome([0, 1, 2, 3, 4])\n  True\n  >>> is_palindrome([0, 1, 2, 3])\n  True\n  >>> is_palindrome([0, 1, 2])\n  True\n  >>> is_palindrome([0, 1])\n  True\n  >>> is_palindrome([0])\n  True\n  >>> is_palindrome([])\n  True\n  >>> is_palindrome([-1, 2, -4, 5, 6])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  False\n  >>> is_palindrome([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  False\n  >>> is_palindrome([0, 1, 2, 3, 4, 5, 6, 7, 8])\n  False\n  >>> is_palindrome([0, 1, 2, 3, 4, 5, 6, 7])\n  False\n  >>> is_palindrome([0, 1, 2, 3, 4, 5, 6])\n  False\n  >>> is_palindrome([0, 1, 2, 3, 4, 5])\n  False\n  >>> is_palindrome([0, 1, 2, 3, 4])\n  False\n  >>> is_palindrome([0, 1, 2, 3])\n  False\n  >>> is_palindrome([0, 1, 2])\n  False\n  >>> is_palindrome([0, 1])\n  False\n  >>> is_palindrome([0])\n  False\n  >>> is_palindrome([])\n  False\n  >>> is_palindrome([-1, 2, -4, 5, 6])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  False\n  >>> is_palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n === 1 || n === 0) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n === 4) return true\n  if (n % 7 === 0) return false\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return false\n  if (n % 17 === 0) return false\n  if (n % 19 === 0) return false\n  if (n % 23 === 0) return false\n  if (n % 29 === 0) return false\n  if (n % 31 === 0) return false\n  if (n % 37 === 0) return false\n  if (n % 41 === 0) return false\n  if (n % 43 === 0) return false\n  if (n % 47 === 0) return false\n  if (n % 53 === 0) return false\n  if (n % 59 === 0) return false\n  if (n % 61 === 0) return false\n  if (n % 67 === 0) return false\n  if (n % 71 === 0) return false\n  if (n % 73 === 0) return false\n  if (n % 79 === 0) return false\n  if (n % 83 === 0) return false\n  if (n % 89 === 0) return false\n  if (n % 97 === 0) return false\n  if (n % 101 === 0) return false\n  if (n % 103 === 0) return false\n  if (n % 107 === 0) return false\n  if (n % 109 === 0) return false\n  if (n % 113 === 0) return false\n  if (n % 127 === 0) return false\n  if (n % 131 === 0) return false\n  if (n % 137 === 0) return false\n  if (n % 139 === 0) return false\n  if (n % 143 === 0) return false\n  if (n % 149 === 0) return false\n  if (n % 157 === 0) return false\n  if (n % 163 === 0) return false\n  if (n % 167 === 0) return false\n  if (n % 173 === 0) return false\n  if (n % 179 === 0) return false\n  if (n % 181 === 0) return false\n  if (n % 187 === 0) return false\n  if (n % 191 === 0) return false\n  if (n % 193 === 0) return false\n  if (n % 197 === 0) return false\n  if (n % 199 === 0) return false\n  if (n % 211 === 0) return false\n  if (n % 227 === 0) return false\n  if (n % 229 === 0) return false\n  if (n % 233 === 0) return false\n  if (n % 239 === 0) return false\n  if (n % 241 === 0) return false\n  if (n % 251 === 0) return false\n  if (n % 257 === 0) return false\n  if (n % 263 === 0) return false\n  if (n % 269 === 0) return false\n  if (n % 271 === 0) return false\n  if (n % 277 === 0) return false\n  if (n % 281 === 0) return false\n  if (n % 283 === 0) return false\n  if (n % 289 === 0) return false\n  if (n % 293 === 0) return false\n  if (n % 307 === 0) return false\n  if (n % 311 === 0) return false\n  if (n % 313 === 0) return false\n  if (n % 317 === 0) return false\n  if (n % 331 === 0) return false\n  if (n % 337 === 0) return false\n  if (n % 347 === 0) return false\n  if (n % 349 === 0) return false\n  if (n % 353 === 0) return false\n  if (n % 359 === 0) return false\n  if (n % 367 === 0) return false\n  if (n % 373 === 0) return false\n  if (n % 379 === 0) return false\n  if (n % 383 === 0) return false\n  if (n % 397 === 0) return false\n  if (n % 401 === 0) return false\n  if (n % 409 === 0) return false\n  if (n % 419 === 0) return false\n  if (n % 437 === 0) return false\n  if (n % 459 === 0) return false\n  if (n % 467 === 0) return false\n  if (n % 481 === 0) return false\n  if (n % 487 === 0) return false\n  if (n % 491 === 0) return false\n  if (n % 499 === 0) return false\n  if (n % 503 === 0) return false\n  if (n % 509 === 0) return false\n  if (n % 521 === 0) return false\n  if (n % 523 === 0) return false\n  if (n % 541 === 0) return false\n  if (n % 547 === 0) return false\n  if (n % 557 === 0) return false\n  if (n % 563 === 0) return false\n  if (n % 571 === 0) return false\n  if (n % 577 === 0) return false\n  if (n % 587 === 0) return false\n  if (n % 599 === 0) return false\n  if (n % 607 === 0) return false\n  if (n % 613 === 0) return false\n  if (n % 617 === 0) return false\n  if (n % 619 === 0) return false\n  if (n % 631 === 0) return false\n  if (n % 641 === 0) return false\n  if (n % 653 === 0) return false\n  if (n % 659 === 0) return false\n  if (n % 661 === 0) return false\n  if (n % 673 === 0) return false\n  if (n % 677 === 0) return false\n  if (n % 683 === 0) return false\n  if (n % 691 === 0) return false\n  if ("}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2!== 0) return null;\n  const x = -Math.pow(xs[n - 1], 1 / n);\n  for (let i = n - 2; i >= 0; i--) {\n    if (xs[i] === 0) return x;\n    x -= xs[i] / n;\n  }\n  return null;\n}\n\n/*\n  This is another implementation of findZero.\n  It uses Newton method to find x.\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroNewton = (xs) => {\n  let x = -Math.pow(xs[xs.length - 1], 1 / xs.length);\n  for (let i = xs.length - 2; i >= 0; i--) {\n    if (xs[i] === 0) return x;\n    x -= xs[i] / xs.length;\n  }\n  return null;\n}\n\n/*\n  This is another implementation of findZero.\n  It uses Newton method to find x.\n  It takes list xs having odd number of coefficients.\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroNewton([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZeroNewton(["}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const sorted_list = sort_by_val(l);\n  const third_list = [...sorted_list,...sorted_list,...sorted_list];\n  const sorted_list_sorted = sort_by_val(sorted_list);\n  const list_of_lists = map(x => x, sorted_list_sorted);\n  const list_of_lists_sorted = map(x => x, list_of_lists);\n  const final_list = map(x => list_of_lists_sorted[x], third_list);\n  return final_list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const d = {}\n  let p = null\n  for (let e of l) {\n    if (!d[e]) {\n      d[e] = true\n      p = e\n    }\n  }\n  return l.slice().sort((a, b) => a - b).filter(e => e!== p)\n}\n\n/**\n * Return a list of items in an array where the given predicate returns true\n * @param  {Array} arr\n * @param  {Function} predicate\n * @return {Array}\n */\nconst filter = (arr, predicate) => {\n  const res = []\n  for (let i = 0; i < arr.length; i++) {\n    if (predicate(arr[i])) {\n      res.push(arr[i])\n    }\n  }\n  return res\n}\n\n/**\n * Create a list of items in an array where the given predicate returns true\n * @param  {Array} arr\n * @param  {Function} predicate\n * @return {Array}\n */\nconst filterArray = (arr, predicate) => {\n  return arr.filter((e) => predicate(e))\n}\n\n/**\n * Return the length of the given array\n * @param  {Array} arr\n * @return {Number}\n */\nconst arrayLength = (arr) => {\n  return arr.length\n}\n\n/**\n * Return the length of the given array\n * @param  {Array} arr\n * @return {Number}\n */\nconst arrayLengthUnsafe = (arr) => {\n  return arr.length\n}\n\n/**\n * Return the index of the first occurence of the given element in the given array\n * @param  {Array} arr\n * @param  {Number} e\n * @return {Number}\n */\nconst indexOf = (arr, e) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === e) {\n      return i\n    }\n  }\n  return -1\n}\n\n/**\n * Return the index of the first occurence of the given element in the given array\n * @param  {Array} arr\n * @param  {Number} e\n * @return {Number}\n */\nconst indexOfUnsafe = (arr, e) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === e) {\n      return i\n    }\n  }\n  return -1\n}\n\n/**\n * Return the index of the last occurence of the given element in the given array\n * @param  {Array} arr\n * @param  {Number} e\n * @return {Number}\n */\nconst lastIndexOf = (arr, e) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === e) {\n      return i\n    }\n  }\n  return -1\n}\n\n/**\n * Return the index of the last occurence of the given element in the given array\n * @param  {Array} arr\n * @param  {Number} e\n * @return {Number}\n */\nconst lastIndexOfUnsafe = (arr, e) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === e) {\n      return i\n    }\n  }\n  return -1\n}\n\n/**\n * Return a list of the first n elements in the given array\n * @param  {Array} arr\n * @param  {Number} n\n * @return {Array}\n */\nconst take = (arr, n) => {\n  return arr.slice(0, n)\n}\n\n/**\n * Return a list of the last n elements in the given array\n * @param  {Array} arr\n * @param  {Number} n\n * @return {Array}\n */\nconst drop = (arr, n) => {\n  return arr.slice(n)\n}\n\n/**\n * Return a list of the first n elements in the given array\n * @param  {Array} arr\n * @param  {Number} n\n * @return {Array}\n */\nconst takeUnsafe = (arr, n) => {\n  return arr.slice(0, n)\n}\n\n/**\n * Return a list of the last n elements in the given array\n * @param  {Array} arr\n * @param  {Number} n\n * @return {Array}\n */\nconst dropUnsafe = (arr, n) => {\n  return arr.slice(n)\n}\n\n/**\n * Return a list of the first n elements in the given array\n * @param  {Array} arr\n * @param  {Number} n\n * @return {Array}\n */\nconst takeWhile = (arr, predicate) => {\n  const res = []\n  let i = 0\n  while (i < arr.length && predicate(arr[i])) {\n    res.push(arr[i])\n    i++\n  }\n  return res\n}\n\n/**\n * Return a list of the last n elements in the given array\n * @param  {Array} arr\n * @param  {Number} n\n * @return {Array}\n */\nconst dropWhile = (arr, predicate) => {\n  const res = []\n  let i = 0\n  while (i < arr.length &&!predicate(arr[i])) {\n    res.push(arr[i])\n    i++\n  }\n  return res\n}\n\n/**\n * Return a list of the first n elements in the given array\n * @param  {Array} arr\n * @param  {Number} n\n * @return {Array}\n */\nconst takeLast = (arr, n) => {\n  const res = arr.slice(arr.length - n)\n  return res\n}\n\n/**\n * Return a list of the first n elements in the given array\n * @param  {Array} arr\n * @param  {Number} n\n * @return {Array}\n */\nconst dropLast = (arr, n) => {\n  return arr.slice(0, arr.length - n)\n}\n\n/**\n * Return a list of the first n elements in the given array\n * @param  {Array}"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  const {\n    length\n  } = l;\n  let max = l[0];\n  for (let i = 1; i < length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n  * @param {Array} arr - Array.\n  * @param {Number} [start] - Start index.\n  * @param {Number} [end] - End index.\n  * @return {Array} - Subset of array.\n  * @example\n  * max_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n  * // => [95, 96, 97, 98, 99, 100]\n  * max_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n  * // => [95, 96, 97, 98, 99, 100]\n  * max_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n  * // => [95, 96, 97, 98, 99, 100]\n  */\nconst max_subset = (arr, start, end) => {\n  const subset = [];\n  if (end === undefined) {\n    end = arr.length;\n  }\n  for (let i = start; i < end; i++) {\n    subset.push(arr[i]);\n  }\n  return subset;\n};\n\n/**\n  * @param {Number} [n] - Number.\n  * @param {Number} [k] - Start index.\n  * @param {Number} [l] - End index.\n  * @return {Number} - Count of permutations.\n  * @example\n  * count_permutation([1, 2, 3])\n  * // => 0\n  * count_permutation([1, 2, 3], 2)\n  * // => 0\n  * count_permutation([1, 2, 3], 2, 3)\n  * // => 0\n  * count_permutation([1, 2, 3], 1, 2)\n  * // => 1\n  * count_permutation([1, 2, 3], 1, 3)\n  * // => 2\n  * count_permutation([1, 2, 3], 0, 2)\n  * // => 2\n  */\nconst count_permutation = (n, k, l) => {\n  if (k === undefined) {\n    k = 0;\n  }\n  if (l === undefined) {\n    l = n.length;\n  }\n  if (l < k) {\n    return 0;\n  }\n  if (l === k) {\n    return 1;\n  }\n  let result = 0;\n  const arr = [];\n  const n_copy = n.slice();\n  for (let i = k; i < l; i++) {\n    const p = n_copy.splice(k, 1)[0];\n    arr.push(p);\n    const new_permutation = count_permutation(n_copy, k + 1, l);\n    result += new_permutation;\n    n_copy.splice(k, 1);\n  }\n  return result;\n};\n\nmodule.exports = {\n  max_element,\n  max_subset,\n  count_permutation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if ((i % 3 === 0) && (i % 5 === 0)) {\n      res.push(3);\n    }\n    if ((i % 3 === 0)) {\n      res.push(5);\n    }\n    if ((i % 5 === 0)) {\n      res.push(7);\n    }\n  }\n  return res;\n};\n\nmodule.exports = fizz_buzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  const arr = Array.from(l)\n  const n = arr.length\n  const sorted = []\n  for (let i = 0; i < n; i += 2) {\n    sorted.push(arr[i])\n  }\n  for (let i = 1; i < n; i += 2) {\n    sorted.push(arr[i])\n  }\n  return sorted\n}\n\nmodule.exports = sort_even\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decode = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_hex = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(hex(group.slice(1, 1) + group[2]) + hex(group.slice(0, 1) + group[0]));\n    else\n      groups2.push(hex(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_hex function. Returns decoded string.\n  */\nconst decodeCyclicHex = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 6)\n      groups2.push(decodeHex(group.slice(1, 1) + group[2]) + decodeHex(group.slice(0, 1) + group[0]));\n    else\n      groups2.push(decodeHex(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_hex_2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(hex(group.slice(1, 1) + group[2]) + hex(group.slice(0, 1) + group[0]));\n    else\n      groups2.push(hex(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_hex_2 function. Returns decoded string.\n  */\nconst decodeCyclicHex2 = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 6)\n      groups2.push(decodeHex(group.slice(1, 1) + group[2]) + decodeHex(group.slice(0, 1) + group[0]));\n    else\n      groups2.push(decodeHex(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_hex_3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(hex(group.slice(1, 1) + group[2]) + hex(group.slice(0, 1) + group[0]) + hex(group[1] + group[2]));\n    else\n      groups2.push(hex(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_hex_3 function. Returns decoded string.\n  */\nconst decodeCyclicHex3 = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n === 1 || n === 2) return n;\n  return (Math.pow(prime_fib(n - 1), 2) + Math.pow(prime_fib(n - 2), 2)) % prime_fib(n - 1)\n}\n\n/*\n  prime_fib2 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib2(1)\n  2\n  >>> prime_fib2(2)\n  3\n  >>> prime_fib2(3)\n  5\n  >>> prime_fib2(4)\n  13\n  >>> prime_fib2(5)\n  89\n  */\nconst prime_fib2 = (n) => {\n  if (n === 1 || n === 2) return n;\n  const n_minus_1 = (Math.pow(prime_fib2(n - 1), 2) + Math.pow(prime_fib2(n - 2), 2)) % prime_fib2(n - 1)\n  const n_minus_2 = (Math.pow(prime_fib2(n - 3), 2) + Math.pow(prime_fib2(n - 4), 2)) % prime_fib2(n - 3)\n  return ((Math.pow(n_minus_1, 2) + Math.pow(n_minus_2, 2)) % n_minus_1)\n}\n\n/*\n  prime_fib3 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib3(1)\n  2\n  >>> prime_fib3(2)\n  3\n  >>> prime_fib3(3)\n  5\n  >>> prime_fib3(4)\n  13\n  >>> prime_fib3(5)\n  89\n  */\nconst prime_fib3 = (n) => {\n  if (n === 1 || n === 2) return n;\n  const n_minus_1 = (Math.pow(prime_fib3(n - 1), 2) + Math.pow(prime_fib3(n - 2), 2)) % prime_fib3(n - 1)\n  const n_minus_2 = (Math.pow(prime_fib3(n - 3), 2) + Math.pow(prime_fib3(n - 4), 2)) % prime_fib3(n - 3)\n  return ((Math.pow(n_minus_1, 2) + Math.pow(n_minus_2, 2)) % n_minus_1)\n}\n\n/*\n  prime_fib4 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib4(1)\n  2\n  >>> prime_fib4(2)\n  3\n  >>> prime_fib4(3)\n  5\n  >>> prime_fib4(4)\n  13\n  >>> prime_fib4(5)\n  89\n  */\nconst prime_fib4 = (n) => {\n  if (n === 1 || n === 2) return n;\n  const n_minus_1 = (Math.pow(prime_fib4(n - 1), 2) + Math.pow(prime_fib4(n - 2), 2)) % prime_fib4(n - 1)\n  const n_minus_2 = (Math.pow(prime_fib4(n - 3), 2) + Math.pow(prime_fib4(n - 4), 2)) % prime_fib4(n - 3)\n  return ((Math.pow(n_minus_1, 2) + Math.pow(n_minus_2, 2)) % n_minus_1)\n}\n\n/*\n  prime_fib5 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib5(1)\n  2\n  >>> prime_fib5(2)\n  3\n  >>> prime_fib5(3)\n  5\n  >>> prime_fib5(4)\n  13\n  >>> prime_fib5(5)\n  89\n  */\nconst prime_fib5 = (n) => {\n  if (n === 1 || n === 2) return n;\n  const n_minus_1 = (Math.pow(prime_fib5(n - 1), 2) + Math.pow(prime_fib5(n - 2), 2)) % prime_fib5(n - 1)\n  const n_minus_2 = (Math.pow(prime_fib5(n - 3), 2) + Math.pow(prime_fib5(n - 4), 2)) % prime_fib5(n - 3)\n  return ((Math.pow(n_minus_1, 2) + Math.pow(n_minus_2, 2)) % n_minus_1)\n}\n\n/*\n  prime_fib6 returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib6(1)\n  2\n  >>> prime_fib6(2)\n  3\n  >>> prime_fib6(3)\n  5\n  >>> prime_fib6(4)\n  13\n  >>> prime_fib6(5)\n  89\n  */\nconst prime_fib6 = (n) => {\n  if (n === 1 || n === 2) return n;\n  const n_minus_1 = (Math.pow(prime_fib6(n - 1), 2) + Math.pow(prime_fib6(n - 2), 2)) % prime_fib6(n - 1)\n  const n_minus_2 = (Math.pow(prime_fib6(n - 3), 2) + Math.pow(prime_fib6(n - 4), 2)) % prime_fib6(n - 3)\n  "}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n    const unique = l.reduce((acc, v, i) => {\n        if (acc.includes(v) === false) {\n            acc.push(v);\n        }\n        return acc;\n    }, []);\n    const unique_sorted = unique.sort();\n    const unique_sorted_length = unique_sorted.length;\n    for (let i = 0; i < unique_sorted_length - 2; i += 1) {\n        if (unique_sorted[i] + unique_sorted[i + 1] + unique_sorted[i + 2] === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  var cars = [\n    [0, 1],\n    [0, n - 1],\n    [n - 1, n - 2],\n    [n - 1, 0],\n    [n - 2, n - 3],\n    [n - 2, n - 1],\n    [n - 3, n - 4],\n    [n - 3, n - 2],\n    [n - 4, n - 5],\n    [n - 4, n - 3],\n    [n - 5, n - 6],\n    [n - 5, n - 4],\n    [n - 6, n - 7],\n    [n - 6, n - 5],\n    [n - 7, n - 8],\n    [n - 7, n - 6],\n    [n - 8, n - 9],\n    [n - 8, n - 7],\n    [n - 9, n - 10],\n    [n - 9, n - 8],\n    [n - 10, n - 11],\n    [n - 10, n - 9],\n    [n - 11, n - 12],\n    [n - 11, n - 10],\n    [n - 12, n - 13],\n    [n - 12, n - 11],\n    [n - 13, n - 14],\n    [n - 13, n - 12],\n    [n - 14, n - 15],\n    [n - 14, n - 13],\n    [n - 15, n - 16],\n    [n - 15, n - 14],\n    [n - 16, n - 17],\n    [n - 16, n - 15],\n    [n - 17, n - 18],\n    [n - 17, n - 16],\n    [n - 18, n - 19],\n    [n - 18, n - 17],\n    [n - 19, n - 20],\n    [n - 19, n - 18],\n    [n - 20, n - 21],\n    [n - 20, n - 19],\n    [n - 21, n - 22],\n    [n - 21, n - 20],\n    [n - 22, n - 23],\n    [n - 22, n - 21],\n    [n - 23, n - 24],\n    [n - 23, n - 22],\n    [n - 24, n - 25],\n    [n - 24, n - 23],\n    [n - 25, n - 26],\n    [n - 25, n - 24],\n    [n - 26, n - 27],\n    [n - 26, n - 25],\n    [n - 27, n - 28],\n    [n - 27, n - 26],\n    [n - 28, n - 29],\n    [n - 28, n - 27],\n    [n - 29, n - 30],\n    [n - 29, n - 28],\n    [n - 30, n - 31],\n    [n - 30, n - 29],\n    [n - 31, n - 32],\n    [n - 31, n - 30],\n    [n - 32, n - 33],\n    [n - 32, n - 31],\n    [n - 33, n - 34],\n    [n - 33, n - 32],\n    [n - 34, n - 35],\n    [n - 34, n - 33],\n    [n - 35, n - 36],\n    [n - 35, n - 34],\n    [n - 36, n - 37],\n    [n - 36, n - 35],\n    [n - 37, n - 38],\n    [n - 37, n - 36],\n    [n - 38, n - 39],\n    [n - 38, n - 37],\n    [n - 39, n - 40],\n    [n - 39, n - 38],\n    [n - 40, n - 41],\n    [n - 40, n - 39],\n    [n - 41, n - 42],\n    [n - 41, n - 40],\n    [n - 42, n - 43],\n    [n - 42, n - 41],\n    [n - 43, n - 44],\n    [n - 43, n - 42],\n    [n - 44, n - 45],\n    [n - 44, n - 43],\n    [n - 45, n - 46],\n    [n - 45, n - 44],\n    [n - 46, n - 47],\n    [n - 46, n - 45],\n    [n - 47, n - 48],\n    [n - 47, n - 46],\n    [n - 48, n - 49],\n    [n - 48, n - 47],\n    [n - 49, n - 50],\n    [n - 49, n - 48],\n    [n - 50, n - 51],\n    [n - 50, n - 49],\n    [n - 51, n - 52],\n    [n - 51, n - 50],\n    [n - 52, n - 53],\n    [n - 52, n - 51],\n    [n - 53, n - 54],\n    [n - 53, n - 52],\n    [n - 54, n - 55],\n    [n - 54, n - 53],\n    [n - 55, n - 56],\n    [n - 55, n - 54],\n    [n - 56, n - 57],\n    [n - 56, n - 55],\n    [n - 57, n - 58],\n    [n - 57, n - 56],\n    [n - 58, n - 59],\n    [n - 58, n - 57],\n    [n - 59, n - 60],\n    [n - 59, n - 58],\n    [n - 60, n - 61],\n    [n - 60, n - 59],\n    [n - 61, n - 62],\n    [n - 61, n - 60],\n    [n - 62, n - 63],\n    [n - 62"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  const l1 = [...l];\n  for (let i = 0; i < l1.length; i++) {\n    l1[i] = l1[i] + 1;\n  }\n  return l1;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list(['foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  >>> incr_list(['foo', 'bar', 'baz', 'foobar', 'baz', 'baz', 'bar'])\n  ['foo', 'bar', 'baz', 'foobar', 'baz', 'baz', 'bar', 'foobar', 'baz']\n  >>> incr_list(['foo', 'bar', 'baz', 'foobar', 'baz', 'baz', 'bar', 'foobar', 'baz'])\n  ['foo', 'bar', 'baz', 'foobar', 'baz', 'baz', 'bar', 'foobar', 'baz', 'foo', 'bar', 'baz', 'foobar', 'baz', 'baz', 'bar', 'foobar', 'baz']\n  */\nconst incr_list = (l) => {\n  const l1 = [...l];\n  for (let i = 0; i < l1.length; i++) {\n    l1[i] = l1[i] + 1;\n  }\n  return l1;\n};\n\nconst add = (x, y) => x + y;\n\nconst l = [1, 2, 3];\n\nconst l1 = add(l, [4, 5]);\n\nconst l2 = add(l, [4, 5, 6]);\n\nconst l3 = add(l, [4, 5, 6, 7]);\n\nconst l4 = add(l, [4, 5, 6, 7, 8]);\n\nconst l5 = add(l, [4, 5, 6, 7, 8, 9]);\n\nconst l6 = add(l, [4, 5, 6, 7, 8, 9, 10]);\n\nconst l7 = add(l, [4, 5, 6, 7, 8, 9, 10, 11]);\n\nconst l8 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12]);\n\nconst l9 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\n\nconst l10 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\n\nconst l11 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n\nconst l12 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n\nconst l13 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\n\nconst l14 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\n\nconst l15 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\n\nconst l16 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n\nconst l17 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]);\n\nconst l18 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\n\nconst l19 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\n\nconst l20 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\n\nconst l21 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);\n\nconst l22 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]);\n\nconst l23 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]);\n\nconst l24 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]);\n\nconst l25 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);\n\nconst l26 = add(l, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]);\n\nconst l27"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  const {\n    sum\n  } = l;\n  const {\n    length\n  } = l;\n  return length >= 2 && sum < 0? true : false;\n};\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n\nodd = [\n  1,\n  3,\n  5,\n  7,\n  9,\n  11,\n  13,\n  15,\n  17,\n  19,\n  21,\n  23,\n  25,\n  27,\n  29,\n  31,\n  33,\n  35,\n  37,\n  39,\n  41,\n  43,\n  45,\n  47,\n  49,\n  51,\n  53,\n  55,\n  57,\n  59,\n  61,\n  63,\n  65,\n  67,\n  69,\n  71,\n  73,\n  75,\n  77,\n  79,\n  81,\n  83,\n  85,\n  87,\n  89,\n  91,\n  93,\n  95,\n  97,\n  99,\n  101,\n  103,\n  105,\n  107,\n  109,\n  111,\n  113,\n  115,\n  117,\n  119,\n  121,\n  123,\n  125,\n  127,\n  129,\n  131,\n  133,\n  135,\n  137,\n  139,\n  141,\n  143,\n  145,\n  147,\n  149,\n  151,\n  153,\n  155,\n  157,\n  159,\n  161,\n  163,\n  165,\n  167,\n  169,\n  171,\n  173,\n  175,\n  177,\n  179,\n  181,\n  183,\n  185,\n  187,\n  189,\n  191,\n  193,\n  195,\n  197,\n  199,\n  201,\n  203,\n  205,\n  207,\n  209,\n  211,\n  213,\n  215,\n  217,\n  219,\n  221,\n  223,\n  225,\n  227,\n  229,\n  231,\n  233,\n  235,\n  237,\n  239,\n  241,\n  243,\n  245,\n  247,\n  249,\n  251,\n  253,\n  255\n];\n\neven = [\n  2,\n  4,\n  6,\n  8,\n  10,\n  12,\n  14,\n  16,\n  18,\n  20,\n  22,\n  24,\n  26,\n  28,\n  30,\n  32,\n  34,\n  36,\n  38,\n  40,\n  42,\n  44,\n  46,\n  48,\n  50,\n  52,\n  54,\n  56,\n  58,\n  60,\n  62,\n  64,\n  66,\n  68,\n  70,\n  72,\n  74,\n  76,\n  78,\n  80,\n  82,\n  84,\n  86,\n  88,\n  90,\n  92,\n  94,\n  96,\n  98,\n  100,\n  102,\n  104,\n  106,\n  108,\n  110,\n  112,\n  114,\n  116,\n  118,\n  120,\n  122,\n  124,\n  126,\n  128,\n  130,\n  132,\n  134,\n  136,\n  138,\n  140,\n  142,\n  144,\n  146,\n  148,\n  150,\n  152,\n  154,\n  156,\n  158,\n  160,\n  162,\n  164,\n  166,\n  168,\n  170,\n  172,\n  174,\n  176,\n  178,\n  180,\n  182,\n  184,\n  186,\n  188,\n  190,\n  192,\n  194,\n  196,\n  198,\n  200,\n  202,\n  204,\n  206,\n  208,\n  210,\n  212,\n  214,\n  216,\n  218,\n  220,\n  222,\n  224,\n  226,\n  228,\n  230,\n  232,\n  234,\n  236,\n  238,\n  240,\n  242,\n  244,\n  246,\n  248,\n  250,\n  252\n];\n\nlet i;\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(`${message} (${test_number})`);\n  }\n}\n\nfunction sum_to_zero(n) {\n  return (n < 0)? n + n : 0;\n}\n\nfunction check_sum_to_zero(l) {\n  let i;\n  assert(pairs_sum_to_zero(l), `pairs_sum_to_zero(${l})`, `${l}`);\n  assert(sum_to_zero(l) === 0, `sum_to_zero(${l})`, `${l}`);\n  for (i = 0; i < odd.length; i += 1) {\n    assert(sum_to_zero(odd[i] + even[i]) === 0, `sum_to_zero(odd[${i}] + even[${i}])`, `${odd[i] + even[i]}`);\n  }\n}\n\nfor (i = 0; i < odd.length; i += 1) {\n  check_sum_to_"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  x = parseInt(x, 10);\n  base = parseInt(base, 10);\n  const result = x;\n  if (x > 0) {\n    while (x > 0) {\n      result = (x % base) + result;\n      x = Math.floor(x / base);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a number in base 10\n  >>> get_base(12345, 5)\n  '12345'\n  >>> get_base(12345, 2)\n  '11000'\n  >>> get_base(12345, 7)\n  '12345'\n  */\nconst get_base = (x, base) => {\n  const result = change_base(x, base);\n  return result;\n};\n\n/**\n * Return the number of digits in a number\n  >>> get_num_digits(12345)\n  5\n  >>> get_num_digits(12345, 2)\n  2\n  >>> get_num_digits(12345, 7)\n  4\n  >>> get_num_digits(12345, 8)\n  5\n  */\nconst get_num_digits = (x, base) => {\n  const result = get_base(x, base);\n  return result.length;\n};\n\n/**\n * Return the sum of the digits in a number\n  >>> sum_digits(12345)\n  9\n  >>> sum_digits(12345, 2)\n  8\n  >>> sum_digits(12345, 7)\n  15\n  >>> sum_digits(12345, 8)\n  10\n  >>> sum_digits(12345, 9)\n  9\n  */\nconst sum_digits = (x, base) => {\n  const result = get_base(x, base);\n  return result.match(/\\d+/g).reduce((sum, num) => {\n    return sum + parseInt(num, 10);\n  }, 0);\n};\n\n/**\n * Return the product of the digits in a number\n  >>> product_digits(12345)\n  15\n  >>> product_digits(12345, 2)\n  12\n  >>> product_digits(12345, 7)\n  42\n  >>> product_digits(12345, 8)\n  120\n  >>> product_digits(12345, 9)\n  90\n  */\nconst product_digits = (x, base) => {\n  const result = get_base(x, base);\n  return result.match(/\\d+/g).reduce((product, num) => {\n    return product * parseInt(num, 10);\n  }, 1);\n};\n\n/**\n * Return the sum of the digits in a number\n  >>> sum_digits_str(12345)\n  '9'\n  >>> sum_digits_str(12345, 2)\n  '8'\n  >>> sum_digits_str(12345, 7)\n  '15'\n  >>> sum_digits_str(12345, 8)\n  '10'\n  >>> sum_digits_str(12345, 9)\n  '9'\n  */\nconst sum_digits_str = (x, base) => {\n  const result = get_base(x, base);\n  return result.match(/\\d+/g).reduce((sum, num) => {\n    return sum + parseInt(num, 10);\n  }, 0).toString();\n};\n\n/**\n * Return the product of the digits in a number\n  >>> product_digits_str(12345)\n  '15'\n  >>> product_digits_str(12345, 2)\n  '12'\n  >>> product_digits_str(12345, 7)\n  '42'\n  >>> product_digits_str(12345, 8)\n  '120'\n  >>> product_digits_str(12345, 9)\n  '90'\n  */\nconst product_digits_str = (x, base) => {\n  const result = get_base(x, base);\n  return result.match(/\\d+/g).reduce((product, num) => {\n    return product * parseInt(num, 10);\n  }, 1).toString();\n};\n\n/**\n * Return the number of digits in a number\n  >>> num_digits_str(12345)\n  '5'\n  >>> num_digits_str(12345, 2)\n  '2'\n  >>> num_digits_str(12345, 7)\n  '4'\n  >>> num_digits_str(12345, 8)\n  '5'\n  >>> num_digits_str(12345, 9)\n  '4'\n  */\nconst num_digits_str = (x, base) => {\n  const result = get_base(x, base);\n  return result.toString();\n};\n\n/**\n * Return the number of digits in a number\n  >>> num_digits(12345)\n  5\n  >>> num_digits(12345, 2)\n  2\n  >>> num_digits(12345, 7)\n  4\n  >>> num_digits(12345, 8)\n  5\n  >>> num_digits(12345, 9)\n  4\n  */\nconst num_digits = (x, base) => {\n  const result = change_base(x, base);\n  return result.length;\n};\n\n/**\n * Return the number of digits in a number\n  >>> num_digits_str(12345)\n  '5'\n  >>> num_digits_str(12345, 2)\n  '2'\n  >>> num_digits_str(12345, 7)\n  '4'\n  >>> num_digits_str(12345, 8)\n  '5'\n  >>> num_digits_str(12345, 9)\n  '4'\n  */\nconst num_digits_str = (x, base) => {\n  const result = change_base(x, base);\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area2 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area4 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area6 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area8 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area10 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area12 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area14 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area16 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area18 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area20 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area22 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area24 = (a, h) => {\n  return (a * (h - 1)) / 2;\n};\n\n/*Given length of a side and high return area"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n - 5)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 2) + fib(n - 1)\n}\n\nconst fib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\nconst fib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3)\n}\n\nconst fib1 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib1(n - 1) + fib1(n - 2)\n}\n\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconst fib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\nconst fib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3)\n}\n\nconst fib1 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib1(n - 1) + fib1(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l1 = l.slice(0, l.length / 2);\n  let l2 = l.slice(l.length / 2, l.length);\n  return (l1.length === 0 || l2.length === 0)\n   ? undefined\n    : l1.length === 0? l2[0] : (l1.length === l2.length)\n     ? (l1[l1.length / 2] + l2[l2.length / 2]) / 2\n      : l1[l1.length / 2];\n};\n\n/*Return the arithmetic mean of the values in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  2.5\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  11.0\n  */\nconst mean = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0) / l.length;\n};\n\n/*Return the geometric mean of the values in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  2.8\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  12.0\n  */\nconst geomean = (l) => {\n  return Math.pow(l.reduce((acc, val) => {\n    return acc * val;\n  }, 1) / l.length, 1);\n};\n\n/*Return the harmonic mean of the values in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  1.7\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  0.9\n  */\nconst harmonicmean = (l) => {\n  return (l.reduce((acc, val) => {\n    return acc + 1 / val;\n  }, 0) / l.length);\n};\n\n/*Return the harmonic mean of the values in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  1.7\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  0.9\n  */\nconst median = (l) => {\n  let l1 = l.slice(0, l.length / 2);\n  let l2 = l.slice(l.length / 2, l.length);\n  return (l1.length === 0 || l2.length === 0)\n   ? undefined\n    : l1.length === 0? l2[0] : (l1.length === l2.length)\n     ? (l1[l1.length / 2] + l2[l2.length / 2]) / 2\n      : l1[l1.length / 2];\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n};\n\n/*Return the sum of the values in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  75\n  */\nconst sum = (l) => {\n  return l.reduce((acc, val) => {"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    const reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\nexport default is_palindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const b = n % p\n  if (b == 0) {\n    return p\n  }\n  return b\n}\n\n/* Return n^2 modulo p (be aware of numerics).\n  >>> modp2(3, 5)\n  3\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  const n2 = n * n\n  const b = n2 % p\n  if (b == 0) {\n    return p\n  }\n  return b\n}\n\n/* Return (n^2 - 1) modulo p.\n  >>> modp2m1(3, 5)\n  1\n  >>> modp2m1(1101, 101)\n  1\n  >>> modp2m1(0, 101)\n  1\n  >>> modp2m1(3, 11)\n  2\n  >>> modp2m1(100, 101)\n  1\n  */\nconst modp2m1 = (n, p) => {\n  const n2 = n * n - 1\n  const b = n2 % p\n  if (b == 0) {\n    return p\n  }\n  return b\n}\n\n/* Return n^3 modulo p (be aware of numerics).\n  >>> modp3(3, 5)\n  3\n  >>> modp3(1101, 101)\n  1\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  const n3 = n * n * n\n  const b = n3 % p\n  if (b == 0) {\n    return p\n  }\n  return b\n}\n\n/* Return n^4 modulo p (be aware of numerics).\n  >>> modp4(3, 5)\n  3\n  >>> modp4(1101, 101)\n  1\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  const n4 = n * n * n * n\n  const b = n4 % p\n  if (b == 0) {\n    return p\n  }\n  return b\n}\n\n/* Return n^5 modulo p (be aware of numerics).\n  >>> modp5(3, 5)\n  3\n  >>> modp5(1101, 101)\n  1\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  const n5 = n * n * n * n * n\n  const b = n5 % p\n  if (b == 0) {\n    return p\n  }\n  return b\n}\n\nmodule.exports = {\n  modp, modp2, modp2m1, modp3, modp4, modp5\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  const ret = encode_shift(s);\n  const ret_s = [];\n  for (let i = 0; i < ret.length; i++) {\n    ret_s.push(String.fromCharCode((ret.charCodeAt(i) - \"a\".charCodeAt(0)) % 26));\n  }\n  return ret_s.join(\"\");\n}\n\nconst encode = (s) => {\n  const ret = s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n  return ret;\n}\n\nconst decode = (s) => {\n  const ret = encode(s);\n  const ret_s = [];\n  for (let i = 0; i < ret.length; i++) {\n    ret_s.push(String.fromCharCode((ret.charCodeAt(i) - \"a\".charCodeAt(0)) % 26));\n  }\n  return ret_s.join(\"\");\n}\n\n/*\n  Encodes a string.\n  */\nconst encode_str = (s) => {\n  const ret = encode(s);\n  return ret;\n}\n\n/*\n  Decodes a string.\n  */\nconst decode_str = (s) => {\n  const ret = decode(s);\n  return ret;\n}\n\n/*\n  Encode string with alphabet shift.\n  */\nconst encode_shift_str = (s) => {\n  const ret = encode_shift(s);\n  return ret;\n}\n\n/*\n  Decode string with alphabet shift.\n  */\nconst decode_shift_str = (s) => {\n  const ret = decodeShift(s);\n  return ret;\n}\n\n/*\n  Decodes string with alphabet shift.\n  */\nconst decode_shift_str_reverse = (s) => {\n  const ret = decodeShift(s);\n  return ret;\n}\n\n/*\n  Decodes string with alphabet shift.\n  */\nconst encode_shift_str_reverse = (s) => {\n  const ret = encode_shift(s);\n  return ret;\n}\n\n/*\n  Decodes string with alphabet shift.\n  */\nconst decode_shift_str_reverse_reverse = (s) => {\n  const ret = decodeShift(s);\n  return ret;\n}\n\n/*\n  Decodes string with alphabet shift.\n  */\nconst encode_shift_str_reverse_reverse = (s) => {\n  const ret = encode_shift(s);\n  return ret;\n}\n\n/*\n  Decodes string with alphabet shift.\n  */\nconst decode_shift_str_reverse_reverse_reverse = (s) => {\n  const ret = decodeShift(s);\n  return ret;\n}\n\nconst alphabet = {\n  \"a\": 0,\n  \"b\": 1,\n  \"c\": 2,\n  \"d\": 3,\n  \"e\": 4,\n  \"f\": 5,\n  \"g\": 6,\n  \"h\": 7,\n  \"i\": 8,\n  \"j\": 9,\n  \"k\": 10,\n  \"l\": 11,\n  \"m\": 12,\n  \"n\": 13,\n  \"o\": 14,\n  \"p\": 15,\n  \"q\": 16,\n  \"r\": 17,\n  \"s\": 18,\n  \"t\": 19,\n  \"u\": 20,\n  \"v\": 21,\n  \"w\": 22,\n  \"x\": 23,\n  \"y\": 24,\n  \"z\": 25\n}\n\nconst shift_table = {\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: \"d\",\n  4: \"e\",\n  5: \"f\",\n  6: \"g\",\n  7: \"h\",\n  8: \"i\",\n  9: \"j\",\n  10: \"k\",\n  11: \"l\",\n  12: \"m\",\n  13: \"n\",\n  14: \"o\",\n  15: \"p\",\n  16: \"q\",\n  17: \"r\",\n  18: \"s\",\n  19: \"t\",\n  20: \"u\",\n  21: \"v\",\n  22: \"w\",\n  23: \"x\",\n  24: \"y\",\n  25: \"z\"\n}\n\nconst shift_table_reverse = {\n  0: \"z\",\n  1: \"y\",\n  2: \"x\",\n  3: \"w\",\n  4: \"v\",\n  5: \"u\",\n  6: \"t\",\n  7: \"s\",\n  8: \"r\",\n  9: \"q\",\n  10: \"p\",\n  11: \"o\",\n  12: \"n\",\n  13: \"m\",\n  14: \"l\",\n  15: \"k\",\n  16: \"j\",\n  17: \"i\",\n  18: \"h\",\n  19: \"g\",\n  20: \"f\",\n  21: \"e\",\n  22: \"d\",\n  23: \"c\",\n  24: \"b\",\n  25: \"a\"\n}\n\n/*\n  Shifts string by one character.\n  */\nconst shift = (s) => {\n  const ret = encode_shift(s);\n  return ret;\n}\n\n/*\n  Shifts string by one character in reverse order.\n  */\nconst shift_reverse = (s) => {\n  const ret = encode_shift(s);\n  return ret;\n}\n\n/*\n  Returns string encoded with alphabet shift.\n  */\nconst encode_str = (s) => {\n  const ret = encode(s);\n  return ret;\n}\n\n/*\n  Returns string decoded with alphabet shift.\n  */\nconst decode_str = (s) => {"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  if (!text) return ''\n  const vowels = 'aeiouAEIOU'\n  return text.replace(/[^A-Z]/g, a => vowels.indexOf(a) < 0)\n}\n\n/*\n  remove_accents is a function that takes string and returns string without accents.\n  >>> remove_accents(\"This is a string\")\n  'This is a string'\n  >>> remove_accents(\"This is a string\")\n  'This is a string'\n  >>> remove_accents(\"This is a string\")\n  'This is a string'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n  'Theest Ast'\n  >>> remove_accents(\"Thést æst\")\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default below_threshold;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  return isNaN(result)? NaN : result;\n};\n\n/*\n  Returns the absolute value of a number.\n  >>> abs(10)\n  10\n  >>> abs(-10)\n  10\n  >>> abs(0)\n  0\n  */\nconst abs = x => Math.abs(x);\n\n/*\n  Returns the sum of the squares of the numbers from 1 to n.\n  >>> sumSquare(5)\n  15\n  >>> sumSquare(5)\n  15\n  >>> sumSquare(10)\n  500\n  >>> sumSquare(100)\n  4500\n  >>> sumSquare(999)\n  99900\n  >>> sumSquare(1000)\n  999900000\n  >>> sumSquare(999)\n  999000000\n  */\nconst sumSquare = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*\n  Returns the sum of the numbers from 1 to n.\n  >>> sum(5)\n  5\n  >>> sum(5)\n  5\n  >>> sum(10)\n  15\n  >>> sum(100)\n  4500\n  >>> sum(999)\n  99900\n  >>> sum(1000)\n  999900000\n  >>> sum(999)\n  999000000\n  */\nconst sum = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Returns the product of the numbers from 1 to n.\n  >>> product(5)\n  25\n  >>> product(5)\n  25\n  >>> product(10)\n  1000\n  >>> product(100)\n  100000\n  >>> product(999)\n  999000000\n  >>> product(1000)\n  999900000\n  >>> product(999)\n  999000000\n  */\nconst product = (n) => {\n  const product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*\n  Returns the average of the numbers from 1 to n.\n  >>> average(5)\n  3.5\n  >>> average(5)\n  3.5\n  >>> average(10)\n  7.5\n  >>> average(100)\n  97.5\n  >>> average(999)\n  997.5\n  >>> average(1000)\n  999.5\n  >>> average(999)\n  999.5\n  */\nconst average = (n) => {\n  const sum = sum(n);\n  return sum / n;\n};\n\n/*\n  Returns the median of the numbers from 1 to n.\n  >>> median(5)\n  3\n  >>> median(5)\n  3\n  >>> median(10)\n  5\n  >>> median(100)\n  50\n  >>> median(999)\n  499\n  >>> median(1000)\n  500\n  >>> median(999)\n  499\n  */\nconst median = (n) => {\n  const nums = [...Array(n)].sort((x, y) => x - y);\n  if (nums.length % 2 === 0) {\n    return (nums[nums.length / 2 - 1] + nums[nums.length / 2]) / 2;\n  } else {\n    return nums[nums.length / 2];\n  }\n};\n\n/*\n  Returns the mode of the numbers from 1 to n.\n  >>> mode(5)\n  1\n  >>> mode(5)\n  1\n  >>> mode(10)\n  5\n  >>> mode(100)\n  50\n  >>> mode(999)\n  499\n  >>> mode(1000)\n  500\n  >>> mode(999)\n  499\n  */\nconst mode = (n) => {\n  const nums = [...Array(n)].sort((x, y) => x - y);\n  let maxCount = 1;\n  let maxCountIdx = 0;\n  for (let i = 1; i < n; i++) {\n    if (nums[i] === nums[i - 1]) {\n      maxCount++;\n      maxCountIdx = i;\n    }\n  }\n  return nums[maxCountIdx];\n};\n\n/*\n  Returns the median of the numbers from 1 to n.\n  >>> median(5)\n  3\n  >>> median(5)\n  3\n  >>> median(10)\n  5\n  >>> median(100)\n  50\n  >>> median(999)\n  499\n  >>> median(1000)\n  500\n  >>> median(999)\n  499\n  */\nconst median2 = (n) => {\n  const nums = [...Array(n)].sort((x, y) => x - y);\n  if (nums.length % 2 === 0) {\n    return (nums[nums.length / 2 - 1] + nums[nums.length / 2]) / 2;\n  } else {\n    return nums[nums.length / 2];\n  }\n};\n\nexport {\n  add,\n  abs,\n  sumSquare,\n  sum,\n  product,\n  average,\n  median,\n  mode,\n  median2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = same_chars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst n = input.length;\nlet sum = 0;\n\nfor (let i = 0; i < n; i++) {\n  sum += fib(input[i]);\n}\n\nconsole.log(sum);\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = [...brackets]\n  let brackets_left = brackets.length\n  while (stack.length > 0) {\n    const opening = stack.shift()\n    if (opening === \">\") {\n      brackets_left--\n    } else if (opening === \"<\") {\n      brackets_left++\n    } else {\n      return false\n    }\n  }\n  return brackets_left === 0\n}\n\nmodule.exports = {\n  correct_bracketing,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = sortedArray(l);\n  const prev = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] < prev) return false;\n    prev = sorted[i];\n  }\n  return true;\n};\n\n/*\n  Returns a function that returns the median of a list of numbers.\n  >>> median([1, 2, 4, 20])\n  3\n  >>> median([1, 2, 4, 20, -1])\n  3\n  >>> median([1, 2, 4, 20, -1, -100])\n  -100\n  */\nconst median = (l) => {\n  const sorted = sortedArray(l);\n  if (sorted.length % 2 === 1) {\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n  const mid = Math.floor(sorted.length / 2);\n  const left = sorted[mid - 1];\n  const right = sorted[mid];\n  return (left + right) / 2;\n};\n\n/*\n  Returns a function that returns the mode of a list of numbers.\n  >>> mode([1, 2, 4, 20])\n  20\n  >>> mode([1, 2, 4, 20, -1])\n  20\n  >>> mode([1, 2, 4, 20, -1, -100])\n  -100\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  let count = 1;\n  let result = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== result) {\n      result = sorted[i];\n      count++;\n    }\n  }\n  return result;\n};\n\n/*\n  Returns a function that returns the range of a list of numbers.\n  >>> range([1, 2, 4, 20])\n  [1, 2, 4]\n  >>> range([1, 2, 4, 20, -1])\n  [1, 2, 4]\n  >>> range([1, 2, 4, 20, -1, -100])\n  [-100, -100]\n  */\nconst range = (l) => {\n  const sorted = sortedArray(l);\n  const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n  return [min, max];\n};\n\n/*\n  Returns a function that returns the arithmetic mean of a list of numbers.\n  >>> mean([1, 2, 4, 20])\n  3.5\n  >>> mean([1, 2, 4, 20, -1])\n  3.5\n  >>> mean([1, 2, 4, 20, -1, -100])\n  -100\n  */\nconst mean = (l) => {\n  const sorted = sortedArray(l);\n  const sum = sumArray(sorted);\n  return sum / sorted.length;\n};\n\n/*\n  Returns a function that returns the sum of a list of numbers.\n  >>> sum([1, 2, 4, 20])\n  25\n  >>> sum([1, 2, 4, 20, -1])\n  25\n  >>> sum([1, 2, 4, 20, -1, -100])\n  -100\n  */\nconst sum = (l) => {\n  const sorted = sortedArray(l);\n  const sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i];\n  }\n  return sum;\n};\n\n/*\n  Returns a function that returns the standard deviation of a list of numbers.\n  >>> standardDeviation([1, 2, 4, 20])\n  1.25\n  >>> standardDeviation([1, 2, 4, 20, -1])\n  1.25\n  >>> standardDeviation([1, 2, 4, 20, -1, -100])\n  -100\n  */\nconst standardDeviation = (l) => {\n  const mean = mean(l);\n  const sum = sum(l);\n  const squareSum = sumArray(sortedArray(l).map(x => x * x));\n  return Math.sqrt(squareSum - sum * mean * mean);\n};\n\n/*\n  Returns a function that returns the standard error of a list of numbers.\n  >>> standardError([1, 2, 4, 20])\n  1.5\n  >>> standardError([1, 2, 4, 20, -1])\n  1.5\n  >>> standardError([1, 2, 4, 20, -1, -100])\n  -100\n  */\nconst standardError = (l) => {\n  return standardDeviation(l) / Math.sqrt(l.length);\n};\n\n/*\n  Returns a function that returns the variance of a list of numbers.\n  >>> variance([1, 2, 4, 20])\n  2.25\n  >>> variance([1, 2, 4, 20, -1])\n  2.25\n  >>> variance([1, 2, 4, 20, -1, -100])\n  -100\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  const sum = sum(l);\n  const squareSum = sumArray(sortedArray(l).map(x => x * x));\n  return (squareSum - sum * mean * mean) / l.length;\n};\n\n/*\n  Returns a function that returns the variance of a list of numbers.\n  >>> variance([1, 2, 4, 20])\n  2.25\n  >>> variance([1, 2, 4, 20, -1])\n  2.25\n  >>> variance([1, 2, 4, 20, -1, -100])\n  -100\n  */\nconst std = (l) => {\n  return Math.sqrt(variance(l));\n};\n\nmodule.exports = {\n  median,\n  mode,\n  range,\n  mean,\n  sum,\n  standardDeviation,\n  standardError,\n  variance\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if(l1.length === 0 || l2.length === 0) return [];\n  const map = new Map();\n  for(let i = 0; i < l1.length; i++) {\n    if(map.has(l1[i])) {\n      map.set(l1[i], l1[i] + l2[i]);\n    } else {\n      map.set(l1[i], l2[i]);\n    }\n  }\n  return [...map.keys()];\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let is_prime = (n) => {\n    if(n == 2) return true\n    if(n < 2) return false\n    if(n % 2 == 0) return false\n    return (n == 1)? true : largest_prime_factor(n-1)\n  }\n  return largest_prime_factor_loop(n, is_prime)\n}\n\nconst largest_prime_factor_loop = (n, is_prime) => {\n  while(!is_prime(n)) n = n-1\n  return n\n}\n\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(20)\n  * //=> 3640\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(10)\n  * //=> 15\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(3)\n  * //=> 6\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(1)\n  * //=> 1\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(5)\n  * //=> 15\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(4)\n  * //=> 16\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(2)\n  * //=> 4\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(3)\n  * //=> 9\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(5)\n  * //=> 25\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(6)\n  * //=> 36\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(7)\n  * //=> 49\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(8)\n  * //=> 56\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(9)\n  * //=> 81\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n(10)\n  * //=> 100\n  */\nconst sum_to_n = (n) => {\n    let sum = 1;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * sum_to_n("}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i]\n    if (char === '(') {\n      stack.push(char)\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      const popped = stack.pop()\n      if (popped!== '(') {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n\nmodule.exports = correct_bracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    const d = [];\n    let sum = 0;\n    for (let i = xs.length - 1; i >= 0; i--) {\n        sum = xs[i];\n        for (let j = i; j < xs.length; j++) {\n            sum += xs[j] * (j + 1);\n        }\n        d.unshift(sum);\n    }\n    return d;\n};\n\n/**\n  * This is an implementation of a recursive solution of the quadratic equation.\n  * We need to add two variables x and y, and solve for these two variables.\n  * The quadratic formula is ax^2 + bx + c, where a = 1, b = -2, and c = 0.\n  * So our solution is x = +/- sqrt(b/a).\n  *\n  * Return the two solution values for x and y.\n  *\n  * >>> quadratic([1, -2, 0])\n  * [0, 0]\n  * >>> quadratic([1, -2, 4])\n  * [-1, 1]\n  * >>> quadratic([1, -2, 8])\n  * [-1, 1]\n  * >>> quadratic([1, -2, 16])\n  * [-1, 1]\n  * >>> quadratic([1, -2, 32])\n  * [-1, 1]\n  * >>> quadratic([1, -2, 64])\n  * [-1, 1]\n  * >>> quadratic([1, -2, 128])\n  * [-1, 1]\n  * >>> quadratic([1, -2, 256])\n  * [-1, 1]\n  *\n  * Note:\n  * The quadratic formula is not a polynomial in the form a*x^2 + b*x + c.\n  *\n  * Return the coefficients for a polynomial of the form:\n  * a*x^2 + b*x + c\n  *\n  * >>> quadratic([1, -2, 0])\n  * [1, -2, 0]\n  * >>> quadratic([1, -2, 4])\n  * [1, -4, 4]\n  * >>> quadratic([1, -2, 8])\n  * [1, -8, 8]\n  * >>> quadratic([1, -2, 16])\n  * [1, -16, 16]\n  * >>> quadratic([1, -2, 32])\n  * [1, -32, 32]\n  * >>> quadratic([1, -2, 64])\n  * [1, -64, 64]\n  * >>> quadratic([1, -2, 128])\n  * [1, -128, 128]\n  * >>> quadratic([1, -2, 256])\n  * [1, -256, 256]\n  *\n  * Note:\n  * For simplicity, the quadratic equation is given for x, not y.\n  *\n  * @param {Array} coeffs\n  *\n  * @return {Array}\n  */\nconst quadratic = (coeffs) => {\n    if (coeffs.length === 2) {\n        return [-1, 1];\n    } else {\n        const d = coeffs[2] / coeffs[1];\n        const a = coeffs[0] - 2 * coeffs[1] + d * d;\n        const b = 2 * coeffs[1] - 2 * d;\n        return [\n            Math.sqrt(b / a),\n            Math.sqrt(d / a)\n        ];\n    }\n};\n\nmodule.exports = {\n    quadratic,\n    derivative\n};<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  Question:\n  Given a positive integer n, write a function to return the nth root of the number.\n  nth root is defined as:\n    nth root of x is the number x with the nth power.\n  Examples:\n    root(3) == 1.0\n    root(4) == 1.0\n    root(5) == 1.259921049894873\n    root(6) == 1.45943137490196\n    root(7) == 1.681792830507429\n    root(8) == 1.818893914002665\n    root(9) == 1.9183673469387755\n    root(10) == 2.0\n    root(11) == 2.0\n    root(12) == 2.0\n    root(13) == 2.0\n    root(14) == 2.0\n    root(15) == 2.0\n    root(16) == 2.0\n    root(17) == 2.0\n    root(18) == 2.0\n    root(19) == 2.0\n    root(20) == 2.0\n  Hints:\n    1. For positive integer n, find the number with the nth power is easy.\n    2. For negative integer n, try the square root of the number.\n    3. If the result is too large, then try the fractional part of the number.\n    4. If the result is too small, then try the nth root of the fractional part of the number.\n  */\nconst root = (n) => {\n  if (n > 0) {\n    return Math.pow(n, 1.0 / n);\n  }\n  return Math.sqrt(n);\n};\n\n/*\n  Question:\n  Given two non-negative integers a and b, return the product of a and b.\n  You may assume that a and b are both less than 231 - 1.\n  Note:\n  1 <= a, b <= 231 - 1.\n  a and b are non-negative.\n  Examples:\n    product(2, 4) == 2 * 4 == 8\n    product(2, 3) == 6\n    product(5, 10) == 50\n    product(5, -5) == 0\n    product(0, 0) == 0\n  */\nconst product = (a, b) => {\n  let s = 0;\n  while (a > 0) {\n    s = s + a * b;\n    a = a - 1;\n  }\n  return s;\n};\n\n/*\n  Question:\n  Given two non-negative integers a and b, return the sum of a and b.\n  You may assume that a and b are less than 231 - 1.\n  Note:\n  1 <= a, b <= 231 - 1.\n  a and b are non-negative.\n  Examples:\n    sum(2, 4) == 2 + 4 == 6\n    sum(2, 3) == 5\n    sum(5, 10) == 15\n    sum(5, -5) == 0\n    sum(0, 0) == 0\n  */\nconst sum = (a, b) => {\n  let s = 0;\n  while (a > 0) {\n    s = s + a;\n    a = a - 1;\n  }\n  while (b > 0) {\n    s = s + b;\n    b = b - 1;\n  }\n  return s;\n};\n\nconst solution = (a, b) => {\n  let p = 0;\n  while (a > 0) {\n    p = p + a;\n    a = a - 1;\n  }\n  while (b > 0) {\n    p = p + b;\n    b = b - 1;\n  }\n  return p;\n};\n\nconst test = () => {\n  const { product, sum } = solution;\n  const p = product(2, 4);\n  console.log(p);\n  const s = sum(2, 4);\n  console.log(s);\n  const p2 = product(2, 3);\n  console.log(p2);\n  const s2 = sum(2, 3);\n  console.log(s2);\n  const p5 = product(5, 10);\n  console.log(p5);\n  const s5 = sum(5, 10);\n  console.log(s5);\n  const p0 = product(0, 0);\n  console.log(p0);\n  const s0 = sum(0, 0);\n  console.log(s0);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  const v = {\n    'a': 1,\n    'e': 1,\n    'i': 1,\n    'o': 1,\n    'u': 1,\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    const c = s[i + 1]\n    if (v[c] > 0) {\n      v[c]++\n    }\n  }\n  return v.a + v.e + v.i + v.o + v.u\n}\n\nexport default vowels_count\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const n = x.toString();\n  const m = n.length - shift;\n  const s = n.substring(m, n.length);\n  return s + n.substring(0, m);\n};\n\n/*\n  Remove the last k digits from the number n.\n  If k is greater than the number of digits, return n.\n  >>> remove_digits(12, 1)\n  11\n  >>> remove_digits(12, 2)\n  10\n  >>> remove_digits(12, 3)\n  9\n  >>> remove_digits(12, 4)\n  8\n  >>> remove_digits(12, 5)\n  7\n  >>> remove_digits(12, 6)\n  6\n  >>> remove_digits(12, 7)\n  5\n  >>> remove_digits(12, 8)\n  4\n  >>> remove_digits(12, 9)\n  3\n  >>> remove_digits(12, 10)\n  2\n  >>> remove_digits(12, 11)\n  1\n  >>> remove_digits(12, 12)\n  12\n  */\nconst remove_digits = (n, k) => {\n  const n = parseInt(n);\n  const m = n - k;\n  return m > 0? m : n;\n};\n\n/*\n  Given two non-negative integers a and b,\n  return the sum of a and b.\n  >>> add(1, 2)\n  3\n  >>> add(10, -2)\n  8\n  >>> add(-1, 5)\n  4\n  >>> add(-1, -1)\n  0\n  >>> add(-1, 0)\n  -1\n  >>> add(-1, 1)\n  -1\n  >>> add(0, 1)\n  1\n  >>> add(0, 2)\n  2\n  >>> add(1, 2)\n  3\n  >>> add(12, 12)\n  24\n  >>> add(12, -12)\n  24\n  >>> add(2, -2)\n  -4\n  >>> add(2, 3)\n  -1\n  >>> add(9, 9)\n  18\n  */\nconst add = (a, b) => {\n  const r = a + b;\n  return r > 0? r : 0;\n};\n\n/*\n  Given a non-negative integer n,\n  return the sum of all the multiples of n in the range [0, n).\n  >>> multiples_sum(1)\n  1\n  >>> multiples_sum(2)\n  3\n  >>> multiples_sum(3)\n  6\n  >>> multiples_sum(4)\n  10\n  >>> multiples_sum(5)\n  15\n  >>> multiples_sum(6)\n  21\n  >>> multiples_sum(7)\n  28\n  >>> multiples_sum(8)\n  36\n  >>> multiples_sum(9)\n  45\n  >>> multiples_sum(10)\n  55\n  */\nconst multiples_sum = (n) => {\n  const r = 1;\n  for (let i = n; i <= n + 1; i++) {\n    r += multiples(i);\n  }\n  return r;\n};\n\n/*\n  Given two non-negative integers n and k,\n  return the sum of all the multiples of n in the range [0, k).\n  >>> multiples_sum(1, 2)\n  2\n  >>> multiples_sum(1, 3)\n  6\n  >>> multiples_sum(1, 4)\n  10\n  >>> multiples_sum(1, 5)\n  15\n  >>> multiples_sum(1, 6)\n  21\n  >>> multiples_sum(1, 7)\n  28\n  >>> multiples_sum(1, 8)\n  36\n  >>> multiples_sum(1, 9)\n  45\n  >>> multiples_sum(1, 10)\n  55\n  >>> multiples_sum(1, 12)\n  66\n  >>> multiples_sum(1, 20)\n  80\n  >>> multiples_sum(1, 30)\n  105\n  >>> multiples_sum(1, 40)\n  120\n  >>> multiples_sum(1, 60)\n  165\n  >>> multiples_sum(1, 80)\n  200\n  >>> multiples_sum(1, 90)\n  225\n  >>> multiples_sum(1, 100)\n  270\n  >>> multiples_sum(1, 120)\n  315\n  >>> multiples_sum(1, 140)\n  330\n  >>> multiples_sum(1, 180)\n  360\n  >>> multiples_sum(1, 200)\n  405\n  >>> multiples_sum(1, 210)\n  420\n  >>> multiples_sum(1, 240)\n  525\n  >>> multiples_sum(1, 270)\n  630\n  >>> multiples_sum(1, 300)\n  675\n  >>> multiples_sum(1, 360)\n  810\n  >>> multiples_sum(1, 400)\n  855\n  >>> multiples_sum(1, 450)\n  900\n  >>> multiples_sum(1, 540)\n  1035\n  >>> multiples_sum(1, 600)\n  1170\n  >>> multiples_sum(1, 720)\n  1245\n  >>> multiples_sum(1, 780)\n  1310\n  >>> multiples_sum(1, 840)\n  1385\n  >>> multiples_sum(1, 900)\n  1450\n  >>> multiples_sum(1, 960)\n  1515\n  >>> multiples_sum(1, 1050)\n  1590\n  >>> multiples_sum(1, 1200)\n  1665\n  >>> multiples_sum(1, 1320)\n  1710\n  >>> multiples_sum(1, 1350)\n  1745\n  >>> multiples_sum(1, 1400)\n  1770\n  >>> multiples_sum(1, 1450)\n  1795\n  >>> multiples_sum(1, 1500"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  const len = s.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\nconsole.log(digit_sum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const count = n;\n  const string = s;\n  const arr = string.split(' ');\n  const fruits = arr.filter((fruit) => {\n    return fruit.match(/orange|apple/);\n  });\n  const mango_fruits = fruits.filter((fruit) => {\n    return fruit.match(/mango/);\n  });\n  return count - mango_fruits.length;\n};\n\nconst test = [\n  [\"5 apples and 6 oranges\", 19],\n  [\"0 apples and 1 oranges\", 3],\n  [\"2 apples and 3 oranges\", 100],\n  [\"100 apples and 1 oranges\", 120]\n];\n\nconst n = test.length;\nconst test_cases = test.map((fruit_distribution) => {\n  return {\n    fruit_distribution: fruit_distribution,\n    expected: fruit_distribution(fruit_distribution.fruit_distribution, fruit_distribution.expected)\n  };\n});\n\ntest_cases.forEach((test_case) => {\n  console.log(\"fruit_distribution(\" + test_case.fruit_distribution + \", \" + test_case.expected + \") == \" + test_case.expected);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrLength = arr.length\n  let min = arr[0]\n  let index = 0\n\n  for (let i = 1; i < arrLength; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min === undefined || arr[i] < min) {\n        min = arr[i]\n        index = i\n      }\n    }\n  }\n\n  return [min, index]\n}\n\n// const pluck = (arr) => {\n//   return arr.sort((a, b) => {\n//     return b - a\n//   })[0]\n// }\n\n// const pluck = (arr) => {\n//   if (arr.length === 0) return []\n//   if (arr.length === 1) return [arr[0], 0]\n//   let mid = arr[arr.length / 2]\n//   let left = pluck(arr.slice(0, arr.length / 2))\n//   let right = pluck(arr.slice(arr.length / 2 + 1))\n//   if (left[1] > right[1]) return [left[0], left[1]]\n//   if (left[1] < right[1]) return [right[0], right[1]]\n//   return [mid, arr.length / 2]\n// }\n\n// const pluck = (arr) => {\n//   if (arr.length === 0) return []\n//   let first = 0\n//   let second = 0\n//   for (let i = 0; i < arr.length; i++) {\n//     if (arr[i] < arr[first]) {\n//       first = i\n//     } else if (arr[i] > arr[second]) {\n//       second = i\n//     }\n//   }\n//   return [arr[first], second]\n// }\n\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  if (arr.length === 1) return [arr[0], 0]\n  const middle = arr[Math.floor(arr.length / 2)]\n  const left = pluck(arr.slice(0, arr.length / 2))\n  const right = pluck(arr.slice(arr.length / 2 + 1))\n  if (left[1] > right[1]) return [left[0], left[1]]\n  if (left[1] < right[1]) return [right[0], right[1]]\n  return [middle, Math.floor(arr.length / 2)]\n}\n\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  if (arr.length === 1) return [arr[0], 0]\n  const middle = arr[Math.floor(arr.length / 2)]\n  const left = pluck(arr.slice(0, Math.floor(arr.length / 2)))\n  const right = pluck(arr.slice(Math.floor(arr.length / 2) + 1))\n  if (left[1] > right[1]) return [left[0], left[1]]\n  if (left[1] < right[1]) return [right[0], right[1]]\n  return [middle, Math.floor(arr.length / 2)]\n}\n\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  if (arr.length === 1) return [arr[0], 0]\n  const middle = arr[Math.floor(arr.length / 2)]\n  const left = pluck(arr.slice(0, Math.floor(arr.length / 2)))\n  const right = pluck(arr.slice(Math.floor(arr.length / 2) + 1))\n  if (left[1] > right[1]) return [left[0], left[1]]\n  if (left[1] < right[1]) return [right[0], right[1]]\n  return [middle, Math.floor(arr.length / 2)]\n}\n\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  if (arr.length === 1) return [arr[0], 0]\n  const middle = arr[Math.floor(arr.length / 2)]\n  const left = pluck(arr.slice(0, Math.floor(arr.length / 2)))\n  const right = pluck(arr.slice(Math.floor(arr.length / 2) + 1))\n  if (left[1] > right[1]) return [left[0], left[1]]\n  if (left[1] < right[1]) return [right[0], right[1]]\n  return [middle, Math.floor(arr.length / 2)]\n}\n\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  if (arr.length === 1) return [arr[0], 0]\n  const middle = arr[Math.floor(arr.length / 2)]\n  const left = pluck(arr.slice(0, Math.floor(arr.length / 2)))\n  const right = pluck(arr.slice(Math.floor(arr.length / 2)"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  if (max < 1) {\n    return -1;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      return max;\n    }\n  }\n  return -1;\n}\n\n// eslint-disable-next-line max-len\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const list = lst.slice(0);\n  const len = list.length;\n  const odd_length = (len % 2 === 1);\n\n  const sort = (a, b) => {\n    const x = a + b;\n    if (odd_length && x > a) {\n      return b;\n    } else if (odd_length && x < b) {\n      return a;\n    } else if (a < b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  return list.sort(sort);\n};\n\nmodule.exports = strange_sort_list;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b + c) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\nconst test = {\n  triangle_area(1, 2, 10)\n}\n\nconst result = {\n  triangle_area(3, 4, 5)\n}\n\nconsole.log(test)\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const list = q.slice()\n  const total = sum(list)\n  if (total <= w) {\n    return true\n  }\n  if (is_balanced(list) === false) {\n    return false\n  }\n  const left = sum(list.slice(0, list.length / 2))\n  const right = sum(list.slice(list.length / 2))\n  if (total > w) {\n    return (left <= w && right <= w)\n  }\n  return false\n}\n\n// Sum the elements of an array.\nconst sum = (list) => {\n  return list.reduce((acc, curr) => acc + curr, 0)\n}\n\n// Check if an array is balanced.\nconst is_balanced = (list) => {\n  const length = list.length\n  if (length === 0) {\n    return true\n  }\n  const last = list[length - 1]\n  const sum = sum(list.slice(0, length - 1))\n  if (sum === last) {\n    return is_balanced(list.slice(0, length - 1))\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let mid = Math.floor((left + right) / 2);\n    let is_palindrome = true;\n    let smallest_change = Infinity;\n\n    while (left < right) {\n        if (arr[mid] > arr[right]) {\n            is_palindrome = false;\n            break;\n        }\n\n        if (arr[mid] < arr[right]) {\n            right--;\n        }\n\n        if (arr[mid] === arr[right]) {\n            right--;\n        }\n\n        mid = Math.floor((left + right) / 2);\n    }\n\n    if (is_palindrome) {\n        smallest_change = 0;\n    }\n\n    if (smallest_change === Infinity) {\n        smallest_change = Math.abs(left - right);\n    }\n\n    return smallest_change;\n};\n\nconst small_test = (arr) => {\n    console.log(smallest_change(arr));\n};\n\nsmall_test([1, 2, 3, 4, 3, 2, 2]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2, 3, 2, 1]);\nsmall_test([1, 2,"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n\n  if (len1 === len2) return lst1\n\n  const diff = len1 - len2\n  if (diff < 0) return lst1\n\n  let diff2 = 0\n  for (let i = 0; i < len1; i++) {\n    const val = lst1[i]\n    const in2 = lst2.indexOf(val)\n\n    if (in2 < 0) {\n      diff2 += 1\n    } else if (diff2 === 0) {\n      return lst1\n    } else {\n      diff2 = 0\n    }\n  }\n\n  return lst1\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a % 2 === 0) { return false }\n  let i = 3\n  let j = a\n  while (i <= j) {\n    if (a % i === 0) {\n      j = j - a / i\n      if (j === 1) { return true }\n    }\n    i += 2\n  }\n  return false\n}\n\n// const is_multiply_prime = (a) => {\n//   if(a % 2 === 0) { return false }\n//   let i = 3\n//   let j = a\n//   while (i <= j) {\n//     if (a % i === 0) {\n//       j = j - a / i\n//       if (j === 1) { return true }\n//     }\n//     i += 2\n//   }\n//   return false\n// }\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a % 2 === 0) { return false }\n  let i = 3\n  let j = a\n  while (i <= j) {\n    if (a % i === 0) {\n      j = j - a / i\n      if (j === 1) { return true }\n    }\n    i += 2\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a % 2 === 0) { return false }\n  let i = 3\n  let j = a\n  while (i <= j) {\n    if (a % i === 0) {\n      j = j - a / i\n      if (j === 1) { return true }\n    }\n    i += 2\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a % 2 === 0) { return false }\n  let i = 3\n  let j = a\n  while (i <= j) {\n    if (a % i === 0) {\n      j = j - a / i\n      if (j === 1) { return true }\n    }\n    i += 2\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a % 2 === 0) { return false }\n  let i = 3\n  let j = a\n  while (i <= j) {\n    if (a % i === 0) {\n      j = j - a / i\n      if (j === 1) { return true }\n    }\n    i += 2\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a % 2 === 0) { return false }\n  let i = 3\n  let j = a\n  while (i <= j) {\n    if (a % i === 0) {\n      j = j - a / i\n      if (j === 1) { return true }\n    }\n    i += 2\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a % 2 === 0) { return false }\n  let i = 3\n  let j = a\n  while (i <= j) {\n    if (a % i === 0) {\n      j = j - a / i\n      if (j === 1) { return true }\n    }\n    i += 2\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a % 2 === 0) { return false }\n  let i = 3\n  let j = a\n  while (i <= j) {\n    if (a % i === 0) {\n      j = j - a / i\n      if (j === 1) { return true }\n    }\n    i += 2\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if(a %"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (x % n === 0) {\n    return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)))\n  }\n  return false\n}\n\n/*\nWrite a function that checks if a string is a palindrome. A palindrome is a string that is\nread the same backwards as it is read forwards.\n\nExamples:\n\"A man, a plan, a canal-Panama\" is a palindrome.\n\"race a car\" is not a palindrome.\n\"A man, a plan, a canal-Panama\" is a palindrome.\n\"race a car\" is not a palindrome.\n\"A man, a plan, a canal-Panama\" is a palindrome.\n\"race a car\" is not a palindrome.\n*/\nconst is_palindrome = (str) => {\n  let rev = str.split('').reverse().join('')\n  return str === rev\n}\n\n/*\nWrite a function that takes two strings and returns their intersection. The string should\nonly contain characters which can be found in both strings.\n\nExamples:\nintersection('abracadabra', 'bacd') => 'abra'\nintersection('abracadabra', 'cadab') => 'abracad'\nintersection('abracadabra', 'bac') => 'abracad'\n*/\nconst intersection = (s1, s2) => {\n  let a = s1.split('')\n  let b = s2.split('')\n  let i = 0\n  let result = ''\n  while (i < a.length && i < b.length) {\n    if (a[i] === b[i]) {\n      result += a[i]\n    }\n    i++\n  }\n  return result\n}\n\n/*\nWrite a function that takes two strings and returns their union. The string should\nonly contain characters which are found in either string.\n\nExamples:\nunion('abracadabra', 'bacd') => 'abracadabra'\nunion('abracadabra', 'cadab') => 'abracadabra'\nunion('abracadabra', 'bac') => 'abracadabra'\nunion('abracadabra', 'abracad') => 'abracadabra'\nunion('abracadabra', 'abracadabra') => 'abracadabra'\n*/\nconst union = (s1, s2) => {\n  let a = s1.split('')\n  let b = s2.split('')\n  let i = 0\n  let result = ''\n  while (i < a.length) {\n    result += a[i]\n    i++\n  }\n  while (i < b.length) {\n    result += b[i]\n    i++\n  }\n  return result\n}\n\n/*\nWrite a function that takes two strings and returns their symmetric difference. The string\nshould only contain characters which are found in both strings.\n\nExamples:\nsymmetric_difference('abracadabra', 'bacd') => 'racd'\nsymmetric_difference('abracadabra', 'cadab') => 'racadabra'\nsymmetric_difference('abracadabra', 'bac') => 'racadabra'\nsymmetric_difference('abracadabra', 'abracad') => 'racadabra'\nsymmetric_difference('abracadabra', 'abracadabra') => 'racadabra'\n*/\nconst symmetric_difference = (s1, s2) => {\n  let a = s1.split('')\n  let b = s2.split('')\n  let i = 0\n  let result = ''\n  while (i < a.length) {\n    result += a[i]\n    i++\n  }\n  while (i < b.length) {\n    result += b[i]\n    i++\n  }\n  while (i < a.length) {\n    result += b[i]\n    i++\n  }\n  return result\n}\n\n/*\nWrite a function that takes two strings and returns their difference. The string should\nonly contain characters which are found in both strings.\n\nExamples:\ndifference('abracadabra', 'bacd') => 'abracad'\ndifference('abracadabra', 'cadab') => 'abracadabra'\ndifference('abracadabra', 'bac') => 'abracadabra'\ndifference('abracadabra', 'abracad') => 'abracadabra'\ndifference('abracadabra', 'abracadabra') => 'abracadabra'\n*/\nconst difference = (s1, s2) => {\n  let a = s1.split('')\n  let b = s2.split('')\n  let i = 0\n  let result = ''\n  while (i < a.length) {\n    result += a[i]\n    i++\n  }\n  while (i < b.length) {\n    if (result.indexOf(b[i]) === -1) {\n      result += b[i]\n    }\n    i++\n  }\n  return result\n}\n\n/*\nWrite a function that takes two strings and returns their product. The string should only\ncontain digits.\n\nExamples:\nproduct('3', '2') => 6\nproduct('4', '2') => 8\nproduct('3', '2', '5') => 15\n*/\nconst product = (s1, s2) => {\n  let a = s1.split('')\n  let b = s2.split('')\n  let result = 1\n  for (let i = 0; i"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return Math.pow(a, 3) === a\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectcube(1) ==> true\n  perfectcube(4) ==> true\n  perfectcube(8) ==> true\n  perfectcube(81) ==> false\n  perfectcube(16) ==> false\n  perfectcube(81) ==> false\n  perfectcube(10) ==> false\n  perfectcube(25) ==> false\n  */\nconst perfectcube = (a) => {\n  return iscube(a) && Math.pow(a, 3) === a\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectcubefrom(1) ==> true\n  perfectcubefrom(4) ==> true\n  perfectcubefrom(8) ==> true\n  perfectcubefrom(81) ==> true\n  perfectcubefrom(16) ==> true\n  perfectcubefrom(81) ==> false\n  perfectcubefrom(10) ==> false\n  perfectcubefrom(25) ==> false\n  */\nconst perfectcubefrom = (a) => {\n  return iscube(a) && perfectcube(a)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectcubeto(1) ==> true\n  perfectcubeto(4) ==> true\n  perfectcubeto(8) ==> true\n  perfectcubeto(81) ==> true\n  perfectcubeto(16) ==> true\n  perfectcubeto(81) ==> true\n  perfectcubeto(10) ==> true\n  perfectcubeto(25) ==> true\n  */\nconst perfectcubeto = (a) => {\n  return iscube(a) &&!perfectcube(a)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectcubebt(1) ==> true\n  perfectcubebt(4) ==> true\n  perfectcubebt(8) ==> true\n  perfectcubebt(81) ==> true\n  perfectcubebt(16) ==> true\n  perfectcubebt(81) ==> true\n  perfectcubebt(10) ==> true\n  perfectcubebt(25) ==> true\n  */\nconst perfectcubebt = (a) => {\n  return iscube(a) &&!perfectcube(a) &&!perfectcubefrom(a) &&!perfectcubeto(a)\n}\n\nexport const answer = (a) => {\n  if (perfectcube(a)) {\n    return 'perfect cube'\n  }\n  if (perfectcubefrom(a)) {\n    return 'perfect cube from'\n  }\n  if (perfectcubebt(a)) {\n    return 'perfect cube to'\n  }\n  return 'not a perfect cube'\n}\n\nexport const output = () => {\n  return answer(10)\n}\n\nexport const run = () => {\n  return console.log(output())\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  const result = new Set();\n  const num_str = num.toString().toUpperCase();\n  const num_len = num_str.length;\n\n  // check all chars in the string\n  for (let i = 0; i < num_len; i++) {\n    const current_char = num_str[i];\n    // add all the chars from the string to the set\n    if (i === 0) {\n      result.add(current_char);\n    } else if (current_char === num_str[i - 1]) {\n      result.add(current_char);\n    }\n  }\n\n  // check if the set contains 2, 3 and 5\n  const set_size = result.size;\n  if (set_size === 3) {\n    return 1;\n  }\n\n  const is_prime = (num) => {\n    if (num === 2 || num === 3) {\n      return true;\n    }\n\n    let i = 5;\n    while (i < Math.sqrt(num)) {\n      if (num % i === 0) {\n        return false;\n      }\n      i += 4;\n    }\n    return true;\n  };\n\n  // check if the set contains 11, 13, 17,...\n  const prime_num = set_size;\n  let num_from_set = 0;\n  for (const i in result) {\n    num_from_set = parseInt(i);\n    if (is_prime(num_from_set)) {\n      prime_num--;\n    }\n  }\n\n  return prime_num;\n};\n\nconst test_cases = [\n  [\"AB\", 1],\n  [\"1077E\", 2],\n  [\"ABED1A33\", 4],\n  [\"123456789ABCDEF0\", 6],\n  [\"2020\", 2]\n];\n\ntest_cases.forEach(([num, expected_output]) => {\n  const actual_output = hex_key(num);\n  console.log(`The number of primes in ${num} is ${expected_output}`);\n  console.log(`The number of primes in ${num} is ${actual_output}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = ''\n  let binary_val = 0\n\n  while (decimal > 0) {\n    binary_val = decimal % 2\n    binary += `db${binary_val}`\n    decimal = Math.floor(decimal / 2)\n  }\n\n  return `db${binary}` + `db`\n}\n\n/*\n  Your task is to convert a decimal number into a binary number.\n\n  Your code should return a number of bits. For example, if your number is 12, you should return a value of 4.\n\n  There will be an extra couple of bits 'db' at the beginning and at the end of the number. The extra\n  bits are there to help with the format.\n\n  Example:\n  decimal_to_binary(12)   # returns 4\n\n  */\nconst decimal_to_binary_bits = (decimal) => {\n  let binary = 0\n\n  while (decimal > 0) {\n    binary = binary << 1\n    binary = binary | (decimal % 2)\n    decimal = Math.floor(decimal / 2)\n  }\n\n  return binary\n}\n\n/*\n  Write a function that takes a number and returns a string with the binary representation of the number.\n  Your code should also include the extra 'db' at the beginning and at the end of the string.\n  Example:\n  binary_to_decimal(4)   # returns 12\n\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = 0\n\n  for (let i = 0; i < binary.length; i++) {\n    decimal += binary[i] * Math.pow(2, i)\n  }\n\n  return decimal\n}\n\nconst binary_to_decimal_bits = (binary) => {\n  let decimal = 0\n  let decimal_bits = 0\n\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal_bits = decimal_bits << 1\n    decimal_bits = decimal_bits | binary[i]\n    decimal += decimal_bits\n  }\n\n  return decimal\n}\n\n// console.log(decimal_to_binary(12))\n// console.log(decimal_to_binary_bits(12))\n// console.log(binary_to_decimal(4))\n// console.log(binary_to_decimal_bits(4))\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n    let i = 0, len = s.length\n    let is_happy = true\n    while (i < len) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            i += 3\n            continue\n        }\n        if (s[i]!= s[i + 1] || s[i]!= s[i + 2]) {\n            is_happy = false\n        }\n        i++\n    }\n    return is_happy\n}\n\nconsole.log(is_happy('a'))\nconsole.log(is_happy('aa'))\nconsole.log(is_happy('abcd'))\nconsole.log(is_happy('aabb'))\nconsole.log(is_happy('adb'))\nconsole.log(is_happy('xyy'))\nconsole.log(is_happy('ac'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grade_table = {\n    A: ['A+', 'A', 'A-'],\n    B: ['B+', 'B', 'B-'],\n    C: ['C+', 'C', 'C-'],\n    D: ['D+', 'D', 'D-'],\n    E: ['E', 'E']\n  }\n\n  return Object.keys(grade_table).map(grade => {\n    const grade_values = grade_table[grade]\n    return grade_values.filter(value => grades[value])\n  })\n}\n\nexport default numerical_letter_grade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  const regex = /^[0-9]*$/\n  const regex2 = /^[0-9]+$/\n  const regex3 = /^[0-9]{2,}$/\n\n  if (string.length === 0) return false\n\n  if (regex.test(string) && regex2.test(string)) {\n    let number = parseInt(string)\n    if (number % 1 === 0) {\n      number = number + 1\n    }\n    while (number % 2 === 0) {\n      number = number + 1\n    }\n    return number > 1\n  }\n  if (regex3.test(string)) {\n    let number = parseInt(string)\n    if (number % 2 === 0) {\n      return false\n    }\n    while (number % 3 === 0) {\n      number = number + 1\n    }\n    return number > 1\n  }\n  return false\n}\n\n/*\nWrite a function that takes a number n and returns a string\ncontaining the sum of its factors\nExamples\nfactors(7) == '7'\nfactors(7) == '21'\nfactors(20) == '280'\nfactors(120) == '1440'\n*/\nconst factors = (n) => {\n  if (n < 1) return '0'\n  let sum = ''\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i\n      n = n / i\n    }\n  }\n  if (n > 1) sum += n\n  return sum\n}\n\n/*\nWrite a function that takes a string and returns a string with all of the\ncharacters in the string lowercased\nExamples\nlowercase('HELLO') == 'hello'\nlowercase('Hello') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase('HELLO') == 'hello'\nlowercase"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  const starts = (x) => x % 10 === 1;\n  const ends = (x) => x % 10 === 9;\n  const starts_ends = (x) => starts(x) || ends(x);\n  const count = starts_ends(n)? 1 : 0;\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = []\n  for (let i = N; i > 0; i /= 10) {\n    digits.push(i % 2)\n  }\n  let i = 0\n  const output = ''\n  while (i < digits.length) {\n    output += digits[i]\n    i++\n  }\n  return output\n}\n\nexport { solve }<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n\n/*\n  Given a non-empty list of integers lst. remove the element at index i\n  If it is not present, do nothing\n\n  Examples:\n      remove([4, 2, 6, 7, 1, 2, 3], 1) ==> [4, 2, 6, 7, 3]\n  */\nconst remove = (lst, index) => {\n  if (index < 0 || index >= lst.length) {\n    return lst;\n  }\n  let newLst = lst.slice(0);\n  newLst.splice(index, 1);\n  return newLst;\n}\n\nconst multiply = (lst) => {\n  let result = 1;\n  for (let i = 0; i < lst.length; i++) {\n    result *= lst[i];\n  }\n  return result;\n}\n\nconst isEven = (num) => {\n  return (num % 2 === 0);\n}\n\nconst removeOdds = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (!isEven(newLst[i])) {\n      newLst.splice(i, 1);\n      newLstLen--;\n    }\n  }\n  return newLst;\n}\n\nconst sum = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n}\n\nconst listEquals = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  let i = 0;\n  for (; i < lst1.length; i++) {\n    if (lst1[i]!== lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst product = (lst) => {\n  let result = 1;\n  for (let i = 0; i < lst.length; i++) {\n    result *= lst[i];\n  }\n  return result;\n}\n\nconst removeIfOdd = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (isEven(newLst[i])) {\n      newLst.splice(i, 1);\n      newLstLen--;\n    }\n  }\n  return newLst;\n}\n\nconst removeOdd = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (isEven(newLst[i])) {\n      newLst.splice(i, 1);\n      newLstLen--;\n    }\n  }\n  return newLst;\n}\n\nconst removeOdd = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (isEven(newLst[i])) {\n      newLst.splice(i, 1);\n      newLstLen--;\n    }\n  }\n  return newLst;\n}\n\nconst removeIfOdd = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (isEven(newLst[i])) {\n      newLst.splice(i, 1);\n      newLstLen--;\n    }\n  }\n  return newLst;\n}\n\nconst removeIfOdd = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (isEven(newLst[i])) {\n      newLst.splice(i, 1);\n      newLstLen--;\n    }\n  }\n  return newLst;\n}\n\nconst removeOdd = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (isEven(newLst[i])) {\n      newLst.splice(i, 1);\n      newLstLen--;\n    }\n  }\n  return newLst;\n}\n\nconst removeOdd = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (isEven(newLst[i])) {\n      newLst.splice(i, 1);\n      newLstLen--;\n    }\n  }\n  return newLst;\n}\n\nconst removeOdd = (lst) => {\n  let newLst = lst.slice(0);\n  let newLstLen = newLst.length;\n  for (let i = 0; i < newLstLen; i++) {\n    if (isEven(newLst[i])) {\n      newLst.splice(i, 1);"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let last_char, next_char, arr, res = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char ==='') {\n      res +='';\n    } else {\n      if (i === 0) {\n        last_char = char;\n      } else {\n        if (char < last_char) {\n          next_char = char;\n          last_char = char;\n          arr = [];\n          arr.push(last_char);\n          arr.push(next_char);\n          arr.sort();\n          res += arr.join(' ');\n          last_char = char;\n        } else {\n          last_char = char;\n        }\n      }\n    }\n  }\n  return res;\n};\n\nconsole.log(anti_shuffle('Hi'));\nconsole.log(anti_shuffle('hello'));\nconsole.log(anti_shuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  if(lst.length === 0) return []\n  let lst_new = lst.slice();\n  lst_new.sort((a, b) => {\n    if(a[0] === x) return 1\n    if(b[0] === x) return -1\n    return 0\n  });\n  let row = [];\n  for(let i = 0; i < lst_new.length; i++) {\n    row.push([x, i])\n  }\n  row.sort((a, b) => {\n    if(a[1] > b[1]) return 1\n    if(a[1] < b[1]) return -1\n    return 0\n  });\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  get_col([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 5), (1, 0), (2, 1), (2, 3)]\n  get_col([], 1) == []\n  get_col([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_col = (lst, x) => {\n  if(lst.length === 0) return []\n  let lst_new = lst.slice();\n  lst_new.sort((a, b) => {\n    if(a[1] === x) return 1\n    if(b[1] === x) return -1\n    return 0\n  });\n  let col = [];\n  for(let i = 0; i < lst_new.length; i++) {\n    col.push([i, x])\n  }\n  col.sort((a, b) => {\n    if(a[0] > b[0]) return 1\n    if(a[0] < b[0]) return -1\n    return 0\n  });\n  return col\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3), (4, 4)]\n  */\nconst get_diag = (lst, x) => {\n  if(lst.length === 0) return []\n  let lst_new = lst.slice();\n  lst_new.sort((a, b) => {\n    if(a[1] === x) return 1\n    if(b[1] === x) return -1\n    return 0\n  });\n  let diag = [];\n  for(let i = 0; i < lst_new.length; i++) {\n    diag.push([i, x])\n  }\n  diag.sort((a, b) => {\n    if(a[0] > b[0]) return 1\n    if(a[0] < b[0]) return -1\n    return 0\n  });\n  return diag\n}\n\nconst get_row_col_diag = (lst, x) => {\n  return [get_row(lst, x), get_col(lst, x), get_diag(lst, x)]\n}\n\nmodule.exports = get_row_col_diag<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const len = array.length\n  if (len === 0) {\n    return []\n  }\n  const sum = sum_array(array)\n  if (sum % 2 === 1) {\n    return sort_array_in_ascending(array)\n  } else {\n    return sort_array_in_descending(array)\n  }\n}\n\nfunction sum_array(array) {\n  return array.reduce((acc, elem, index) => acc + elem, 0)\n}\n\nfunction sort_array_in_ascending(array) {\n  const len = array.length\n  let current_value = array[0]\n  let previous_value = array[0]\n  let prev_sum = 0\n  for (let i = 1; i < len; i++) {\n    previous_value = current_value\n    current_value = array[i]\n    prev_sum = sum_array([previous_value, current_value])\n    if (prev_sum === 0) {\n      continue\n    }\n    const index = binary_search(prev_sum, array)\n    if (index === -1) {\n      throw new Error('should not happen')\n    }\n    array.splice(index, 0, current_value)\n  }\n  return array\n}\n\nfunction sort_array_in_descending(array) {\n  const len = array.length\n  let current_value = array[0]\n  let previous_value = array[0]\n  let prev_sum = 0\n  for (let i = 1; i < len; i++) {\n    previous_value = current_value\n    current_value = array[i]\n    prev_sum = sum_array([previous_value, current_value])\n    if (prev_sum === 0) {\n      continue\n    }\n    const index = binary_search(prev_sum, array)\n    if (index === -1) {\n      throw new Error('should not happen')\n    }\n    array.splice(index, 0, current_value)\n  }\n  return array\n}\n\nfunction binary_search(sum, array) {\n  let left = 0\n  let right = array.length - 1\n  let middle = 0\n  while (left <= right) {\n    middle = (left + right) / 2\n    if (sum_array(array.slice(0, middle)) > sum) {\n      right = middle - 1\n    } else {\n      left = middle + 1\n    }\n  }\n  return left\n}\n\nconst arr = [4, 3, 5, 1, 2, 6, 0]\nconsole.log(sort_array(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyz';\n  let key = chars.split('');\n  let encrypted = '';\n  let i = 0;\n  let j = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    key[j] = chars[i];\n    j = (j + 1) % key.length;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    encrypted += key[i];\n  }\n  return encrypted;\n};\n\nconst decrypt = (s) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyz';\n  let key = chars.split('');\n  let decrypted = '';\n  let i = 0;\n  let j = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    key[j] = chars[i];\n    j = (j + 1) % key.length;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += key[i];\n  }\n  return decrypted;\n};\n\n/*\n  This function takes a string as an argument and returns\n  the next letter of the alphabet after rotating by one.\n  It also checks if the letter has already been used.\n  For example:\n  letter('a') returns 'b'\n  letter('l') returns 'k'\n  letter('q') returns 't'\n  letter('x') returns 'y'\n  letter('z') returns 'a'\n  */\nconst letter = (s) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyz';\n  let key = chars.split('');\n  let letter = '';\n  let i = 0;\n  let j = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    key[j] = chars[i];\n    j = (j + 1) % key.length;\n  }\n  j = (j + 1) % key.length;\n  for (let i = 0; i < s.length; i += 1) {\n    letter += key[j];\n    j = (j + 1) % key.length;\n  }\n  if (letter.length === 1) {\n    return letter;\n  }\n  return letter;\n};\n\nmodule.exports = { encrypt, decrypt, letter };\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  const head = lst[0]\n  const last = lst[lst.length - 1]\n\n  if (head === last) {\n    return null\n  }\n\n  for (let i = 1; i < lst.length; i += 1) {\n    const element = lst[i]\n\n    if (element < head) {\n      return element\n    }\n  }\n\n  return last\n}\n\nexport { next_smallest }<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  const regexp = /^I/\n  const length = S.length\n  let start = 0\n  let end = length\n  let counter = 0\n  let count = 0\n  while (start < length) {\n    if (regexp.test(S[start])) {\n      counter += 1\n      start += 1\n    } else if (start === length - 1) {\n      count += counter\n    } else if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      if (regexp.test(S[start + 1])) {\n        counter += 1\n        start += 1\n      } else {\n        counter = 0\n        end = start\n      }\n    } else {\n      end = start\n    }\n  }\n  return count\n}\n\nconst is_bored_slow = (S) => {\n  const regexp = /^I/\n  let start = 0\n  let end = S.length\n  let counter = 0\n  while (start < S.length) {\n    if (regexp.test(S[start])) {\n      counter += 1\n      start += 1\n    } else if (start === S.length - 1) {\n      return counter\n    } else if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      if (regexp.test(S[start + 1])) {\n        counter += 1\n        start += 1\n      } else {\n        return counter\n      }\n    } else {\n      end = start\n    }\n  }\n  return counter\n}\n\nconst is_bored_fast = (S) => {\n  const regexp = /^I/\n  let counter = 0\n  for (let i = 0; i < S.length; i++) {\n    if (regexp.test(S[i])) {\n      counter += 1\n    } else if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (regexp.test(S[i + 1])) {\n        counter += 1\n      } else {\n        return counter\n      }\n    }\n  }\n  return counter\n}\n\nconst is_bored_2 = (S) => {\n  const regexp = /^I/\n  let counter = 0\n  let start = 0\n  let end = S.length\n  while (start < S.length) {\n    if (regexp.test(S[start])) {\n      counter += 1\n      start += 1\n    } else if (start === S.length - 1) {\n      return counter\n    } else if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      if (regexp.test(S[start + 1])) {\n        counter += 1\n        start += 1\n      } else {\n        return counter\n      }\n    } else {\n      end = start\n    }\n  }\n  return counter\n}\n\nconst is_bored_3 = (S) => {\n  const regexp = /^I/\n  let counter = 0\n  for (let i = 0; i < S.length; i++) {\n    if (regexp.test(S[i])) {\n      counter += 1\n    } else if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (regexp.test(S[i + 1])) {\n        counter += 1\n      } else {\n        return counter\n      }\n    }\n  }\n  return counter\n}\n\nconst is_bored_4 = (S) => {\n  const regexp = /^I/\n  let counter = 0\n  let start = 0\n  let end = S.length\n  while (start < S.length) {\n    if (regexp.test(S[start])) {\n      counter += 1\n      start += 1\n    } else if (start === S.length - 1) {\n      return counter\n    } else if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      if (regexp.test(S[start + 1])) {\n        counter += 1\n        start += 1\n      } else {\n        return counter\n      }\n    } else {\n      end = start\n    }\n  }\n  return counter\n}\n\nconst is_bored_5 = (S) => {\n  const regexp = /^I/\n  let counter = 0\n  let start = 0\n  let end = S.length\n  while (start < S.length) {\n    if (regexp.test(S[start])) {\n      counter += 1\n      start += 1\n    } else if (start === S.length - 1) {\n      return counter\n    } else if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      if (regexp.test(S[start + 1])) {\n        counter += 1\n        start += 1\n      } else {\n        return counter\n      }\n    } else {\n      end = start\n    }\n  }\n  return counter\n}\n\nconst is_bored_6 = (S) => {\n  const regexp = /^I/\n  let counter = 0\n  let start = 0\n  let end = S.length\n  while (start < S.length) {\n    if (regexp.test(S[start])) {\n      counter += 1\n      start += 1\n    } else if (start === S.length - 1) {\n      return counter\n    } else if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      if (regexp.test(S[start + 1])) {\n        "}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return (x + y + z) % 1 === 0 && (x === y || x === z || y === z);\n};\n\n/* Create a function that takes 4 numbers.\n  Returns true if one of the numbers is equal to the sum of the other three, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7, 2) ➞ true\n  any_int(5, -2, 2, -2) ➞ false\n  any_int(3, 2, 2, 2) ➞ true\n  any_int(3, -2, 1, 2) ➞ false\n  */\nconst any_int = (x, y, z, a) => {\n  return (x + y + z + a) % 1 === 0 && (x === y || x === z || x === a || y === z || y === a || z === a);\n};\n\n/* Create a function that takes 5 numbers.\n  Returns true if one of the numbers is equal to the sum of the other four, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7, 2, 2) ➞ true\n  any_int(5, -2, 2, -2, 2) ➞ false\n  any_int(3, 2, 2, 2, 2) ➞ true\n  any_int(3, -2, 1, 2, 2) ➞ false\n  */\nconst any_int = (x, y, z, a, b) => {\n  return (x + y + z + a + b) % 1 === 0 && (x === y || x === z || x === a || x === b || y === z || y === a || y === b || z === a || z === b);\n};\n\n/* Create a function that takes 6 numbers.\n  Returns true if one of the numbers is equal to the sum of the other five, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7, 2, 2, 2) ➞ true\n  any_int(5, -2, 2, -2, 2, 2) ➞ false\n  any_int(3, 2, 2, 2, 2, 2) ➞ true\n  any_int(3, -2, 1, 2, 2, 2) ➞ false\n  */\nconst any_int = (x, y, z, a, b, c) => {\n  return (x + y + z + a + b + c) % 1 === 0 && (x === y || x === z || x === a || x === b || x === c || y === z || y === a || y === b || y === c || z === a || z === b || z === c);\n};\n\n/* Create a function that takes 7 numbers.\n  Returns true if one of the numbers is equal to the sum of the other six, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7, 2, 2, 2, 2) ➞ true\n  any_int(5, -2, 2, -2, 2, 2, 2) ➞ false\n  any_int(3, 2, 2, 2, 2, 2, 2) ➞ true\n  any_int(3, -2, 1, 2, 2, 2, 2) ➞ false\n  */\nconst any_int = (x, y, z, a, b, c, d) => {\n  return (x + y + z + a + b + c + d) % 1 === 0 && (x === y || x === z || x === a || x === b || x === c || x === d || y === z || y === a || y === b || y === c || y === d || z === a || z === b || z === c || z === d);\n};\n\n/* Create a function that takes 8 numbers.\n  Returns true if one of the numbers is equal to the sum of the other seven, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7, 2, 2, 2, 2, 2) ➞ true\n  any_int(5, -2, 2, -2, 2, 2, 2, 2) ➞ false\n  any_int(3, 2, 2, 2, 2, 2, 2, 2) ➞ true\n  any_int(3, -2, 1, 2, 2, 2, 2, 2) ➞ false\n  */\nconst any_int = (x, y, z, a, b, c, d, e) => {\n  return (x + y + z + a + b + c + d + e) % 1 === 0 && (x === y || x === z || x === a || x === b || x === c || x === d || x === e || y === z || y === a || y === b || y === c || y === d || y === e || z === a || z === b || z === c || z === d || z === e);\n};\n\n/* Create a function that takes 9 numbers.\n  Returns true if one of the numbers is equal to the sum of the other eight, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7, 2, 2, 2, 2, 2, 2) ➞ true\n  any_int(5, -2, 2, -2, 2, 2, 2, 2, 2) ➞ false\n  any_int(3, 2, 2, 2, 2, 2, 2, 2, 2) ➞ true\n  any_int(3, -2, 1, 2, 2, 2, 2, 2, 2) ➞ false\n  */\nconst any_int = (x, y, z, a, b, c, d, e, f) => {\n  return ("}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/[A-Z]/g, (match) => {\n    let index = message.indexOf(match);\n    return message.substring(index + 2, index + 2 + 1) +\n    message.substring(index + 1, index + 2);\n  });\n};\n\nconst decode = (message) => {\n  return message.replace(/[a-z]/g, (match) => {\n    let index = message.indexOf(match);\n    return message.substring(index, index + 1);\n  });\n};\n\nexport { encode, decode };\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largest = 0,\n    sum = 0,\n    primes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (primes.indexOf(lst[i]) === -1) {\n      let temp = lst[i]\n      while (temp > 0) {\n        primes.push(temp % 10)\n        temp = temp / 10\n      }\n    }\n  }\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] > largest) {\n      largest = primes[i]\n    }\n  }\n  for (let i = largest; i > 0; i--) {\n    sum += largest % 10\n    largest = largest / 10\n  }\n  return sum\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\n\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\n\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\n\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\n\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\n\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  const keys = Object.keys(dict)\n  let is_all_lower = true\n  let is_all_upper = true\n\n  keys.forEach(key => {\n    if (key.length > 1) {\n      if (key.toUpperCase() === key) {\n        is_all_upper = false\n      } else if (key.toLowerCase() === key) {\n        is_all_lower = false\n      }\n    }\n  })\n  return is_all_upper && is_all_lower\n}\n\n// Given an array, return true if all elements are strings in lower \n// case or all elements are strings in upper case, else return false.\nconst check_array_case = (arr) => {\n  const is_all_lower = true\n  const is_all_upper = true\n\n  arr.forEach(element => {\n    if (element.length > 1) {\n      if (element.toUpperCase() === element) {\n        is_all_upper = false\n      } else if (element.toLowerCase() === element) {\n        is_all_lower = false\n      }\n    }\n  })\n  return is_all_upper && is_all_lower\n}\n\n/*\n  Given an array, return true if all elements are strings in lower \n  case or all elements are strings in upper case, else return false.\n  The function should return false is the given array is empty.\n  Examples:\n  check_array_case([\"a\",\"b\",\"c\"]) should return true.\n  check_array_case([\"a\",\"b\",\"c\",\"d\"]) should return false.\n  check_array_case([]) should return true.\n  check_array_case([1,2,3,4]) should return false.\n  check_array_case([1,2,\"3\",\"4\"]) should return false.\n  */\nconst check_array_case = (arr) => {\n  const is_all_lower = true\n  const is_all_upper = true\n\n  arr.forEach(element => {\n    if (element.length > 1) {\n      if (element.toUpperCase() === element) {\n        is_all_upper = false\n      } else if (element.toLowerCase() === element) {\n        is_all_lower = false\n      }\n    }\n  })\n  return is_all_upper && is_all_lower\n}\n\nconst check_dict = (dict) => {\n  if (!check_dict_case(dict)) {\n    return false\n  }\n  return check_array_case(Object.keys(dict).map(key => dict[key]))\n}\n\nexport {\n  check_dict\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  if (n === 0) return [];\n  const arr = [2];\n  for (let i = 3; i <= n; i += 2) {\n    const j = i;\n    while (j < n) {\n      if (j % i === 0) {\n        break;\n      }\n      j += 2;\n    }\n    if (j === n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst prime_count = (n) => {\n  const count = count_up_to(n);\n  return count.reduce((previous, current) => {\n    return previous + (current === n? 1 : 0);\n  }, 0);\n};\n\n// console.log(prime_count(10));\n// console.log(prime_count(11));\n// console.log(prime_count(12));\n// console.log(prime_count(0));\n// console.log(prime_count(20));\n// console.log(prime_count(1));\n// console.log(prime_count(18));\n// console.log(prime_count(19));\nconsole.log(prime_count(1000000));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const aSign = a.sign;\n  const bSign = b.sign;\n  let aInt = a.value.abs;\n  let bInt = b.value.abs;\n  let res = aSign === bSign? 0 : -1;\n  while (aInt >= 10 || bInt >= 10) {\n    let sum = aInt + bInt;\n    if (sum >= 10) {\n      aInt -= sum / 10;\n      bInt -= sum % 10;\n      if (bSign === -1) {\n        bInt = -bInt;\n      }\n      sum = sum % 10;\n    } else {\n      aInt = sum;\n    }\n    res = sum + res * 10;\n  }\n  return aSign === bSign? res : -res;\n};\n\n// console.log(multiply(5, -1));\n// console.log(multiply(-5, -1));\n// console.log(multiply(15, 3));\n// console.log(multiply(1, -1));\n// console.log(multiply(2, -1));\n// console.log(multiply(0, -1));\n// console.log(multiply(2, -2));\n// console.log(multiply(9, -9));\n// console.log(multiply(10, -1));\n// console.log(multiply(1, -10));\n// console.log(multiply(1, -10));\n// console.log(multiply(100, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -10));\n// console.log(multiply(10, -"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  const upper = s.toUpperCase();\n  let num = 0;\n  for (let i = 0; i < upper.length; i += 2) {\n    num += upper[i] === upper[i + 1]? 1 : 0;\n  }\n  return num;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const parts = value.split('.');\n  const integer = parseInt(parts[0]);\n  const decimal = parseInt(parts[1]);\n\n  if (integer + 0.5 === decimal) {\n    return integer + 1;\n  } else if (integer - 0.5 === decimal) {\n    return integer - 1;\n  } else {\n    return integer;\n  }\n};\n\nexport default closest_integer;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n    let res = [];\n    for (let i = 1; i <= n; i++) {\n        res[i - 1] = (i % 2 === 0)? i : i + 1;\n    }\n    return res;\n}\n\nconst level_one = make_a_pile(3);\nconsole.log(level_one);\n\n/*\n  Input:\n  1\n  Output:\n  [1, 3, 5, 7]\n  */\nconst level_two = make_a_pile(1);\nconsole.log(level_two);\n\n/*\n  Input:\n  5\n  Output:\n  [1, 3, 5, 7, 9]\n  */\nconst level_three = make_a_pile(5);\nconsole.log(level_three);\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(/[\\s,]+/g);\n  return words;\n}\n\n/*\n  Given a string, return a string with all the letters\n  in lowercase\n  \n  For example:\n  lowercase(\"ABC\") == \"abc\"\n  lowercase(\"HI\") == \"hi\"\n  lowercase(\"One, two, three\") == \"one,two,three\"\n  */\nconst lowercase = (s) => {\n  const words = s.toLowerCase();\n  return words;\n}\n\n/*\n  Given a string, return a string with all the letters\n  in uppercase\n  \n  For example:\n  uppercase(\"ABC\") == \"ABC\"\n  uppercase(\"HI\") == \"HI\"\n  uppercase(\"One, two, three\") == \"ONE,TWO,THREE\"\n  */\nconst uppercase = (s) => {\n  const words = s.toUpperCase();\n  return words;\n}\n\n/*\n  Given a string, return a string with all the letters\n  in reverse order\n  \n  For example:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"One, two, three\") == \"thre, two, one\"\n  */\nconst reverse = (s) => {\n  const words = s.split('').reverse().join('');\n  return words;\n}\n\n/*\n  Given a string, return a string with the first letter in\n  uppercase\n  \n  For example:\n  first(\"abc\") == \"Abc\"\n  first(\"One, two, three\") == \"One, Two, Three\"\n  */\nconst first = (s) => {\n  const words = s.split('').join(s[0].toUpperCase());\n  return words;\n}\n\n/*\n  Given a string, return a string with the last letter in\n  uppercase\n  \n  For example:\n  last(\"abc\") == \"abc\"\n  last(\"One, two, three\") == \"Three, Two, One\"\n  */\nconst last = (s) => {\n  const words = s.split('').join(s[s.length-1].toUpperCase());\n  return words;\n}\n\n/*\n  Given a string, return a string with all the words in\n  lowercase\n  \n  For example:\n  all(\"Hi, my name is John\") == \"hi, my, name, is, john\"\n  all(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst all = (s) => {\n  const words = s.split(/[\\s,]+/g);\n  const words_lowercase = words.map(x => x.toLowerCase());\n  const words_joined = words_lowercase.join('');\n  return words_joined;\n}\n\n/*\n  Given a string, return a string with all the words in\n  uppercase\n  \n  For example:\n  all(\"hi, my, name, is, john\") == \"HI, MY, NAME, IS, JOHN\"\n  all(\"One, two, three, four, five, six\") == \"ONE, TWO, THREE, FOUR, FIVE, SIX\"\n  */\nconst all_upper = (s) => {\n  const words = s.split(/[\\s,]+/g);\n  const words_upper = words.map(x => x.toUpperCase());\n  const words_joined = words_upper.join('');\n  return words_joined;\n}\n\n/*\n  Given a string, return a string with all the words in\n  reversed order\n  \n  For example:\n  reverse(\"hi, my, name, is, john\") == \"john, is, my, hi\"\n  reverse(\"One, two, three, four, five, six\") == \"six, five, four, three, two, one\"\n  */\nconst all_reverse = (s) => {\n  const words = s.split(/[\\s,]+/g);\n  const words_reverse = words.reverse();\n  const words_joined = words_reverse.join('');\n  return words_joined;\n}\n\n/*\n  Given a string, return a string with the first letter in\n  uppercase\n  \n  For example:\n  first(\"hi, my, name, is, john\") == \"HIJ, MY, NAME, IS, JONE\"\n  first(\"One, two, three, four, five, six\") == \"O, T, W, E, F, S\"\n  */\nconst first_upper = (s) => {\n  const words = s.split(/[\\s,]+/g);\n  const words_first = words.map(x => x.substring(0,1).toUpperCase() + x.substring(1));\n  const words_joined = words_first.join('');\n  return words_joined;\n}\n\n/*\n  Given a string, return a string with the last letter in\n  uppercase\n  \n  For example:\n  last(\"hi, my, name, is, john\") == \"JONE, IS, MY, HI\"\n  last(\"One, two, three, four, five, six\") == \"SIX, FIVE, FOUR, THREE, TWO, ONE\"\n  */\nconst last_upper = (s) => {\n  const words = s.split(/[\\s,]+/g);\n  const words_last = words.map(x => x.substring(x.length-1,x.length));\n  const words_joined = words_last.join('');\n  return words_joined;\n}\n\n/*\n  Given a string, return a string with all the words in\n  uppercase\n  \n  For example:\n  all(\"hi, my, name, is, john\") == \"HI, MY, NAME, IS, JONE\"\n  all(\"One, two"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  const m = x - y;\n  const n = y - x;\n  if (m === 0) {\n    return x;\n  }\n  if (n === 0) {\n    return y;\n  }\n  return Math.min(Math.min(x, y), m) * 2;\n}\n\nconsole.log(choose_num(12, 15)); // 14\nconsole.log(choose_num(13, 12)); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let n_rounded = Math.round(n);\n  let m_rounded = Math.round(m);\n  \n  // The average of n through m, rounded to nearest integer\n  let avg = ((n_rounded + m_rounded) / 2).toString(2);\n  \n  // If the average is greater than 0, add one to the rounded value.\n  if (avg.length > 1 && avg[0] === '0') {\n    avg = '1' + avg;\n  }\n  \n  // If the average is less than 0, subtract one from the rounded value.\n  if (avg.length > 1 && avg[0] === '1') {\n    avg = '0' + avg;\n  }\n  \n  return avg;\n};\n\nconsole.log(rounded_avg(1, 5)); // \"0b11\"\nconsole.log(rounded_avg(7, 5)); // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // \"0b11010\"\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let digits = [];\n  for (let i = x; i > 0; i--) {\n    let num = parseInt(i);\n    if (num % 2 === 0) {\n      continue;\n    }\n    digits.push(num);\n  }\n  digits.sort();\n  return digits;\n};\n\n// console.log(unique_digits(15));\n// console.log(unique_digits(33));\n// console.log(unique_digits(1422));\n// console.log(unique_digits(10));\n\n// Test\n// console.log(unique_digits(15));\n// console.log(unique_digits(33));\n// console.log(unique_digits(1422));\n// console.log(unique_digits(10));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return a - b;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return a - b;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_length_reverse = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return a - b;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length_length_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length_length_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length_length_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length_length_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr.reverse()\n  return arr.map((x) => {\n    return (x + 1).toString()\n  })\n}\n\nconst by_digit_reverse_desc_length_length_length_length_length = (arr) => {\n  if (arr.length === 0) return [];\n  arr.sort((a, b) => {\n    return b - a;\n  })\n  arr."}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factors = []\n  const total = 1\n  for (let i = 1; i <= n; i += 2) {\n    total *= i\n  }\n  for (let i = 1; i <= n; i += 2) {\n    if (i % 2 === 0) {\n      factors.push(total)\n    } else {\n      factors.push(i)\n    }\n  }\n  return factors\n}\n\nconsole.log(f(3))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n    let ret = [];\n    let counter = 1;\n\n    while (counter < n) {\n        let odd = counter * 2 - 1;\n        let even = counter * 2;\n\n        if (odd >= n) break;\n\n        if (is_palindrome(odd) && is_palindrome(even)) {\n            ret.push(counter);\n            counter += 2;\n        }\n\n        counter += 2;\n    }\n\n    return ret;\n};\n\nconst is_palindrome = (n) => {\n    let reversed = reverse(n);\n\n    return (n === reversed);\n};\n\nconst reverse = (n) => {\n    let s = \"\";\n    while (n > 0) {\n        s += n % 10;\n        n = Math.floor(n / 10);\n    }\n\n    return parseInt(s);\n};\n\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  return arr.filter(n => n > 0).reduce((a, b) => a + b, 0)\n}\n\nexport default count_nums\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n    const sorted = arr.slice(0);\n    sorted.sort((a, b) => a - b);\n    return sorted.every(x => x < arr.length - 1);\n}\n\nmove_one_ball([3, 4, 5, 1, 2]);\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  const len2 = lst2.length;\n  if (len === 0 || len2 === 0) return 'NO';\n  let result = 0;\n  let flag = 0;\n  for (let i = 0; i < len2; i++) {\n    const v = lst2[i];\n    if (lst1.indexOf(v) > -1) {\n      lst1.splice(lst1.indexOf(v), 1);\n      lst2.splice(i, 1);\n      result++;\n    }\n    flag = flag | lst1.length % 2;\n    if (flag === 0) break;\n  }\n  if (result === 0) return 'NO';\n  return 'YES';\n};\n\nmodule.exports = exchange;<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const maxCount = {}\n  let max = 0\n  for(let i = 0; i < letters.length; i++) {\n    if(letters[i].length === 1) {\n      const count = maxCount[letters[i]]\n      if(count === undefined || count < max) {\n        max = count\n        maxCount[letters[i]] = 1\n      } else {\n        maxCount[letters[i]] += 1\n      }\n    } else {\n      maxCount[letters[i]] = 1\n    }\n  }\n  return maxCount\n}\n\nconsole.log(histogram('a b c a b a b'))\nconsole.log(histogram('a b c a b a b'))\nconsole.log(histogram('a b c a b a b'))\nconsole.log(histogram('b b b b a'))\nconsole.log(histogram('a b c a b a b'))\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  if (c.length === 0) {\n    return [s, false];\n  }\n\n  let start = 0;\n  let end = s.length - 1;\n\n  while (end > -1 && s[end] === c[end]) {\n    end--;\n  }\n\n  while (start <= end) {\n    if (s[start] === c[start]) {\n      s = s.slice(0, start) + s.slice(start + 1);\n    }\n\n    start++;\n  }\n\n  return [s, true];\n};\n\n// Test\n\nconst test_cases = [\n  [\"abcde\", \"ae\"],\n  [\"abcdef\", \"b\"],\n  [\"abcdedcba\", \"ab\"],\n  [\"bab\", \"b\"]\n];\n\ntest_cases.forEach(x => {\n  const [s, c] = x;\n  console.log(`Given s = ${s}, c = ${c}, the result should be ${reverse_delete(s, c)[0]}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  return lst.reduce((acc, curr) => {\n    if (!curr.match(/^[0-9]*$/)) {\n      acc.push(`the number of odd elements ${curr} of the ${curr}`)\n    } else {\n      const count = curr.split('').filter(digit => {\n        return!digit.match(/^[0-9]/)\n      }).reduce((acc, curr) => {\n        if (curr.match(/^[0-9]$/)) {\n          acc += 1\n        }\n        return acc\n      }, 0)\n      acc.push(`the number of odd elements ${count} of the ${curr}`)\n    }\n    return acc\n  }, [])\n}\n\nmodule.exports = odd_count\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let cur_sum = 0;\n  let i = 0;\n  let min_sum = -1;\n  let len = nums.length;\n\n  while (i < len) {\n    cur_sum += nums[i];\n    if (cur_sum < min_sum || min_sum === -1) {\n      min_sum = cur_sum;\n    }\n    i++;\n  }\n\n  return min_sum;\n};\n\nmodule.exports = min_sub_array_sum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  let visited = [...new Array(n)].fill(false).map(() => new Array(m).fill(false));\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1 &&!visited[i][j]) {\n        result++;\n        const cur_fill = find_bucket(grid, j, i, visited, capacity);\n        result -= cur_fill;\n      }\n    }\n  }\n  return result;\n};\n\nconst find_bucket = (grid, j, i, visited, capacity) => {\n  let result = 0;\n  if (grid[i][j] === 1) {\n    result++;\n    visited[i][j] = true;\n    const row = grid[i];\n    for (let k = j+1; k < grid[i].length; k++) {\n      if (row[k] === 0) {\n        result += find_bucket(grid, k, i, visited, capacity);\n      }\n    }\n  }\n  return result;\n};\n\nconst test = (grid, capacity) => {\n  console.log(`grid: ${JSON.stringify(grid)}`);\n  console.log(`capacity: ${capacity}`);\n  const result = max_fill(grid, capacity);\n  console.log(`max_fill: ${result}`);\n  console.log(`----------------------------------`);\n};\n\ntest([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\ntest([[0,0,0], [0,0,0]], 5);\ntest([[0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0]], 10);\ntest([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\ntest([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted = [...arr];\n\n  const sort_helper = (arr, index, compare) => {\n    const i = index;\n    const j = index + 1;\n    const next_index = j < sorted.length? j : i;\n\n    if (compare(sorted[i], sorted[j])) {\n      const tmp = sorted[i];\n      sorted[i] = sorted[j];\n      sorted[j] = tmp;\n    }\n\n    if (index === sorted.length - 1) {\n      return sorted;\n    }\n\n    return sort_helper(sorted, next_index, compare);\n  };\n\n  return sort_helper(sorted, 0, arr[0] > arr[1]);\n};\n\nmodule.exports = sort_array;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const length = s.length\n  const consonants = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  const consonant_map = {}\n  for(let i = 0; i < consonants.length; i++) {\n    consonant_map[consonants[i]] = 1\n  }\n  const chars = s.split('')\n  const res = []\n  for(let i = 0; i < length; i++) {\n    if(consonant_map[chars[i]] === n) {\n      res.push(chars.slice(i, i + n).join(''))\n    }\n  }\n  return res\n}\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function\nthat returns a list of all strings from string s that contain exactly n \nconsonants, in order these strings appear in the string s.\n\nIf the string s is empty then the function should return an empty list.\n\nExample:\nselect_strings(\"Mary had a little lamb\", 4) ==> [\"Mary had a little lamb\"]\nselect_strings(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\", \"a little lamb\"]\nselect_strings(\"simple white space\", 2) ==> []\nselect_strings(\"Hello world\", 4) ==> [\"Hello world\"]\nselect_strings(\"Uncle sam\", 3) ==> [\"Uncle sam\"]\n*/\nconst select_strings = (s, n) => {\n  const length = s.length\n  const consonants = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  const consonant_map = {}\n  for(let i = 0; i < consonants.length; i++) {\n    consonant_map[consonants[i]] = 1\n  }\n  const res = []\n  for(let i = 0; i < length; i++) {\n    if(consonant_map[s[i]] === n) {\n      res.push(s.slice(i, i + n).join(''))\n    }\n  }\n  return res\n}\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function\nthat returns a list of all strings from string s that contain exactly n \nconsonants, in order these strings appear in the string s.\n\nIf the string s is empty then the function should return an empty list.\n\nExample:\nselect_strings(\"Mary had a little lamb\", 4) ==> [\"Mary had a little lamb\"]\nselect_strings(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\", \"a little lamb\"]\nselect_strings(\"simple white space\", 2) ==> []\nselect_strings(\"Hello world\", 4) ==> [\"Hello world\"]\nselect_strings(\"Uncle sam\", 3) ==> [\"Uncle sam\"]\n*/\nconst select_strings = (s, n) => {\n  const length = s.length\n  const consonants = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  const consonant_map = {}\n  for(let i = 0; i < consonants.length; i++) {\n    consonant_map[consonants[i]] = 1\n  }\n  const res = []\n  for(let i = 0; i < length; i++) {\n    if(consonant_map[s[i]] === n) {\n      res.push(s.slice(i, i + n).join(''))\n    }\n  }\n  return res\n}\n\nconst length = select_strings(\"Hello world\", 4).length\nconsole.log(length)\n\nconst length = select_strings(\"Mary had a little lamb\", 4).length\nconsole.log(length)\n\nconst length = select_strings(\"Hello world\", 4).length\nconsole.log(length)\n\nconst length = select_words(\"Mary had a little lamb\", 4).length\nconsole.log(length)\n\nconst length = select_words(\"Hello world\", 4).length\nconsole.log(length)\n\nconst length = select_words(\"Hello world\", 4).length\nconsole.log(length)\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  if(word.length === 0) {\n    return '';\n  }\n  const vowels = ['a','e','i','o','u'];\n  let closestVowel = '';\n  let closestDiff = Infinity;\n  for(let i = word.length -1 ; i >= 0 ; i--) {\n    const char = word[i];\n    const index = vowels.indexOf(char);\n    if(index!== -1) {\n      const diff = Math.abs(index - i);\n      if(diff < closestDiff) {\n        closestVowel = char;\n        closestDiff = diff;\n      }\n    }\n  }\n  return closestVowel;\n}\n\n// Your function should return the string with only the closest vowel from the\n// word.\nconst get_closest_vowel_2 = (word) => {\n  if(word.length === 0) {\n    return '';\n  }\n  const vowels = ['a','e','i','o','u'];\n  const closestVowel = '';\n  const closestDiff = Infinity;\n  for(let i = word.length -1 ; i >= 0 ; i--) {\n    const char = word[i];\n    const index = vowels.indexOf(char);\n    if(index!== -1) {\n      const diff = Math.abs(index - i);\n      if(diff < closestDiff) {\n        closestVowel = char;\n        closestDiff = diff;\n      }\n    }\n  }\n  return closestVowel;\n}\n\nconst get_closest_vowel_3 = (word) => {\n  if(word.length === 0) {\n    return '';\n  }\n  const vowels = ['a','e','i','o','u'];\n  const closestVowel = '';\n  const closestDiff = Infinity;\n  for(let i = word.length -1 ; i >= 0 ; i--) {\n    const char = word[i];\n    const index = vowels.indexOf(char);\n    if(index!== -1) {\n      const diff = Math.abs(index - i);\n      if(diff < closestDiff) {\n        closestVowel = char;\n        closestDiff = diff;\n      }\n    }\n  }\n  return closestVowel;\n}\n\nconst get_closest_vowel_4 = (word) => {\n  if(word.length === 0) {\n    return '';\n  }\n  const vowels = ['a','e','i','o','u'];\n  const closestVowel = '';\n  const closestDiff = Infinity;\n  for(let i = word.length -1 ; i >= 0 ; i--) {\n    const char = word[i];\n    const index = vowels.indexOf(char);\n    if(index!== -1) {\n      const diff = Math.abs(index - i);\n      if(diff < closestDiff) {\n        closestVowel = char;\n        closestDiff = diff;\n      }\n    }\n  }\n  return closestVowel;\n}\n\nconst get_closest_vowel_5 = (word) => {\n  if(word.length === 0) {\n    return '';\n  }\n  const vowels = ['a','e','i','o','u'];\n  const closestVowel = '';\n  const closestDiff = Infinity;\n  for(let i = word.length -1 ; i >= 0 ; i--) {\n    const char = word[i];\n    const index = vowels.indexOf(char);\n    if(index!== -1) {\n      const diff = Math.abs(index - i);\n      if(diff < closestDiff) {\n        closestVowel = char;\n        closestDiff = diff;\n      }\n    }\n  }\n  return closestVowel;\n}\n\nconst get_closest_vowel_6 = (word) => {\n  if(word.length === 0) {\n    return '';\n  }\n  const vowels = ['a','e','i','o','u'];\n  const closestVowel = '';\n  const closestDiff = Infinity;\n  for(let i = word.length -1 ; i >= 0 ; i--) {\n    const char = word[i];\n    const index = vowels.indexOf(char);\n    if(index!== -1) {\n      const diff = Math.abs(index - i);\n      if(diff < closestDiff) {\n        closestVowel = char;\n        closestDiff = diff;\n      }\n    }\n  }\n  return closestVowel;\n}\n\nconst get_closest_vowel_7 = (word) => {\n  if(word.length === 0) {\n    return '';\n  }\n  const vowels = ['a','e','i','o','u'];\n  const closestVowel = '';\n  const closestDiff = Infinity;\n  for(let i = word.length -1 ; i >= 0 ; i--) {\n    const char = word[i];\n    const index = vowels.indexOf(char);\n    if(index!== -1) {\n      const diff = Math.abs(index - i);\n      if(diff < closestDiff) {\n        closestVowel = char;\n        closestDiff = diff;\n      }\n    }\n  }\n  return closestVowel;\n}\n\nconst get_closest_vowel_8 = (word)"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  let stack = [];\n  let curr_bracket = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    if (item === '(') {\n      stack.push(item);\n    } else if (item === ')') {\n      curr_bracket += 1;\n      if (curr_bracket === stack.length) {\n        curr_bracket -= stack.length;\n        stack.pop();\n      } else {\n        return 'No';\n      }\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nexport { match_parens };\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((previous, current, index) => {\n    if (previous >= current) {\n      return previous\n    }\n    return previous + 1\n  }, -1)\n  if (k > max) {\n    return arr\n  }\n  const result = arr.slice(0, k)\n  return arr.slice(k).sort()\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    return lst.reduce((sum, x) => x % 2? sum + x : sum, 0)\n}\n\nconst even = (lst) => lst.filter((x) => x % 2 == 0)\nconst odd = (lst) => lst.filter((x) => x % 2 == 1)\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\nconsole.log(solution(even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const result = 0;\n  for (let i = 0; i < k; i++) {\n    const num = arr[i];\n    if (num < 10) {\n      result += num;\n    } else {\n      result += num - 10 + arr[i + 1];\n      break;\n    }\n  }\n  return result;\n};\n\nexport default add_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  if (n === 1) return [1]\n  if (n === 2) return [1, 1]\n  if (n === 3) return [1, 3, 1]\n  if (n % 2 === 0) {\n    return get_odd_collatz(n / 2)\n  }\n  const new_list = [1, 3, 1]\n  for (let i = 3; i <= n; i += 2) {\n    new_list.push(1)\n  }\n  return new_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 3, 5, 7, 9, 15, 21, 25, 31, 35, 45, 51, 55, 63, 67, 75, 81, 95, 105, 111, 125, 133, 147, 165, 183, 195, 225, 243, 261, 275, 291, 315, 333, 351, 363, 377, 391, 405, 421, 431, 437, 455, 461, 479, 487, 501, 511, 523, 535, 547, 559, 571, 583, 595, 617, 631, 643, 659, 675, 691, 709, 725, 741, 757, 773, 787, 805, 823, 839, 855, 871, 887, 905, 923, 941, 959, 975, 991, 1019, 1035, 1051, 1067, 1085, 1101, 1117, 1135, 1153, 1171, 1189, 1207, 1225, 1243, 1259, 1275, 1291, 1309, 1327, 1345, 1361, 1379, 1397, 1415, 1433, 1451, 1467, 1485, 1503, 1521, 1539, 1555, 1573, 1591, 1609, 1627, 1645, 1663, 1681, 1699, 1717, 1735, 1753, 1771, 1789, 1807, 1825, 1843, 1861, 1879, 1897, 1915, 1933, 1951, 1969, 1977, 1995, 2003, 2021, 2039, 2057, 2075, 2093, 2111, 2129, 2147, 2165, 2183, 2201, 2219, 2237, 2251, 2267, 2285, 2303, 2321, 2339, 2357, 2375, 2393, 2411, 2429, 2447, 2465, 2483, 2503, 2521, 2539, 2557, 2575, 2593, 2611, 2629, 2647, 2665, 2683, 2703, 2721, 2739, 2757, 2775, 2793, 2811, 2829, 2847, 2865, 2883, 2901, 2919, 2937, 2955, 2973, 2991, 3009, 3027, 3045, 3063, 3081, 3099, 3117, 3135, 3153, 3171, 3189, 3207, 3227, 3245, 3263, 3281, 3299, 3307, 3325, 3343, 3361, 3379, 3397, 3415, 3433, 3451, 3469, 3487, 3505, 3523, 3541, 3559, 3577, 3595, 3613, 3631, 3649, 3667, 3685, 3703, 3721, 3739, 3757, 3776, 3786, 3794, 3812, 3830, 3848, 3866, 3884, 3902, 3920, 3938, 3956, 3974, 3982, 4000, 4008, 4016, 4024, 4032, 4040, 4048, 4056, 4064, 4072, 4080, 4088, 4096, 4104, 4111, 4118, 4126, 4133, 4141, 4148, 4156, 4163, 4171, 4178, 4186, 4193, 4201, 4208, 4216, 4224, 4232, 4240, 4248, 4256, 4264, 4272, 4280, 4288, 4296, 4304, 4312, 4320, 4328, 4336, 4344, 4352, 4360, 4368, 4376, 4384, 4392, 4400, 4408, 4416, 4424, 4432, 4440, 4448, 4465, 4473, 4481, 4489, 4496, 4504, 4512, 4520, 4528, 4536, 4544, 4552, 4560, 4568, 4576, 4584, 4592, 4600, 4608, 4616, 4624, 4632, 4640, 4648, 4656, 4664, 4672, 4680, 4688, 4696, 4704, 4712, 4720, 4728, 4736, 4744, 4752, 4760, 4768, 4776, 4784, 4792, 4800, 4808, 4816, 4824, 4832, 48"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  //console.log(date);\n  //console.log(date.length);\n  //console.log(date[0]);\n  if (date.length === 0) {\n    return false;\n  } else if (date.length === 6) {\n    const month = parseInt(date[0]);\n    const day = parseInt(date[1]);\n    const year = parseInt(date[4]);\n\n    if (month < 1 || month > 12) {\n      return false;\n    } else if (day < 1 || day > 31) {\n      return false;\n    } else if (year < 1900 || year > 2020) {\n      return false;\n    }\n    return true;\n  } else if (date.length === 8) {\n    const month = parseInt(date[0]);\n    const day = parseInt(date[1]);\n    const year = parseInt(date[4]);\n\n    if (month < 1 || month > 12) {\n      return false;\n    } else if (day < 1 || day > 30) {\n      return false;\n    } else if (year < 1900 || year > 2020) {\n      return false;\n    }\n    return true;\n  } else if (date.length === 10) {\n    const month = parseInt(date[0]);\n    const day = parseInt(date[1]);\n    const year = parseInt(date[4]);\n\n    if (month < 1 || month > 12) {\n      return false;\n    } else if (day < 1 || day > 29) {\n      return false;\n    } else if (year < 1900 || year > 2020) {\n      return false;\n    }\n    return true;\n  }\n};\n\nconsole.log(valid_date('03-11-2000'));\nconsole.log(valid_date('15-01-2012'));\nconsole.log(valid_date('04-0-2040'));\nconsole.log(valid_date('06-04-2020'));\nconsole.log(valid_date('06/04/2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n    let list = txt.split(/\\s+/).map(v => v.toLowerCase());\n    return list;\n};\n\n/*\n  Given a list of words, return the list with the words in the given order, e.g. [\"abc\", \"def\", \"ghi\"]\n  to order the words from 0-index to 1-index, e.g. [\"ghi\", \"def\", \"abc\"]\n  Examples\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"ghi\", \"def\", \"abc\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \"ghi\"]\n  order_list([\"abc\", \"def\", \"ghi\"]) == [\"abc\", \"def\", \""}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  let i, j;\n  for (i = 0, j = lst.length - 1; i < j; i++, j--) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(is_sorted([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7]));\nconsole.log(is_sorted([1, 2, 3, 4, 5, 6, 7, 7, 7]));\nconsole.log(is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7]));\nconsole.log(is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7]));\nconsole.log(is_sorted([1, 2, 2, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[1] <= interval2[0] || interval2[1] <= interval1[0]) {\n    return \"NO\";\n  }\n  if (interval1[0] <= interval2[0] && interval2[1] <= interval1[1]) {\n    return \"YES\";\n  }\n  let start = Math.max(interval1[0], interval2[0]),\n      end = Math.min(interval1[1], interval2[1]);\n  for (let i = start; i <= end; i += 1) {\n    if (isPrime(i)) {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n};\n\nconst isPrime = (number) => {\n  if (number <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(number); i += 1) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const len = arr.length\n  if (len === 0) return null\n  let sum = 1\n  let sign = 1\n  let prod = 1\n  for (let i = 0; i < len; i++) {\n    sum *= arr[i]\n    sign *= (arr[i] === -1? 1 : -1)\n    prod *= (arr[i] === -1? -1 : 1)\n  }\n  return sum * sign * prod\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const cells = [];\n  const path = [];\n  for (let r = 0; r < grid.length; r++) {\n    for (let c = 0; c < grid[r].length; c++) {\n      const cell = [r, c];\n      if (cells.indexOf(cell) === -1) {\n        cells.push(cell);\n        path.push(grid[r][c]);\n      }\n    }\n  }\n  const index = path.length - 1;\n  while (index > 0 && path[index] === path[index - 1]) {\n    index--;\n  }\n  return path.slice(index, index + k);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let fib = fib(n), res = [1], curr = 2;\n  for (let i = 2; i <= n; i++) {\n    curr = fib(i);\n    res.push(curr);\n  }\n  return res;\n};\n\n/*\n  This is not a valid fibonacci sequence.\n  So, how can we find the fibonacci sequence that starts with a given number?\n  In the given case, n = 20, then the number of fibonacci sequences will be \n  at least 20 + 21 = 41.\n  We have to find all fibonacci sequences that start with n.\n  We know that fib(n) = fib(n - 1) + fib(n - 2) + fib(n + 1).\n  So, we can find fib(n) by finding fib(n - 1), fib(n - 2) and fib(n + 1).\n  We have the following recurrence:\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 2) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 2) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 2) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 1) + fib(n + 1)\n"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum % 10 === 0? 0 : sum;\n};\n\nexport default digits;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  let stack = []\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char === '[' && stack.length === 0) {\n      stack.push(1)\n    } else if (char === ']' && stack.length > 0 && stack[stack.length - 1] === 1) {\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  return lst.reduce((a, b) => {\n    return a + Math.pow(b, 2)\n  })\n}\n\nexport default sum_squares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt.length === 1)\n    return false;\n\n  if(txt[txt.length - 1].match(/[a-zA-Z]/))\n    return true;\n\n  if(txt.match(/\\b[a-zA-Z]/))\n    return false;\n\n  return true;\n};\n\nconst check_if_last_char_is_an_alpha = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt.length === 1)\n    return false;\n\n  if(txt[txt.length - 1].match(/[a-zA-Z]/))\n    return true;\n\n  if(txt[txt.length - 1].match(/[a-zA-Z]+/))\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_numeric = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt.length === 1)\n    return false;\n\n  if(txt[txt.length - 1].match(/[0-9]/))\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_a_space = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] ==='')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_a_punctuation = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1].match(/[,\\.;?!@#$%^&*()]/))\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_a_whitespace = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] ==='')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_alphanumeric = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1].match(/[a-zA-Z0-9]/))\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_underscore = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '_')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_hyphen = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '-')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_asterisk = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '*')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_bracket = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '(' || txt[txt.length - 1] === ')')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_equal_sign = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '=')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_at = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '@')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_ampersand = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '&')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_quote = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '\"')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_apostrophe = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === \"'\")\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_backslash = (txt) => {\n  if(!txt || txt.length === 0)\n    return false;\n\n  if(txt[txt.length - 1] === '\\\\')\n    return true;\n\n  return false;\n};\n\nconst check_if_last_char_is_an_colon = (txt) => {\n  if(!txt"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let max = -1\n  let max_index = -1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i+1]) {\n      if (max < arr[i]) {\n        max = arr[i]\n        max_index = i\n      }\n    } else {\n      return max_index\n    }\n  }\n  return -1\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 4\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_back = (arr) => {\n  let max = -1\n  let max_index = -1\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] >= arr[i+1]) {\n      if (max < arr[i]) {\n        max = arr[i]\n        max_index = i\n      }\n    } else {\n      return max_index\n    }\n  }\n  return -1\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is less than or equal to the element immediately following it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_front = (arr) => {\n  let max = -1\n  let max_index = -1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i+1]) {\n      if (max < arr[i]) {\n        max = arr[i]\n        max_index = i\n      }\n    } else {\n      return max_index\n    }\n  }\n  return -1\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 1\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_back_front = (arr) => {\n  let max = -1\n  let max_index = -1\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= arr[i+1]) {\n      if (max < arr[i]) {\n        max = arr[i]\n        max_index = i\n      }\n    } else {\n      return max_index\n    }\n  }\n  return -1\n}\n\n/*\n  Create a function which returns the smallest index of an element which\n  is less than or equal to the element immediately following it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 1\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_front_back = (arr) => {\n  let min = -1\n  let min_index = -1\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] <= arr[i+1]) {\n      if (min < arr[i]) {\n        min = arr[i]\n        min_index = i\n      }\n    } else {\n      return min_index\n    }\n  }\n  return -1\n}\n\n/*\n  Create a function which returns the smallest index of an element which\n  is greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_back_front_back = (arr) => {\n  let min = -1\n  let min_index = -1\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] <= arr[i+1]) {\n      if (min < arr[i]) {\n        min = arr[i]\n        min_index = i\n      }\n    } else {\n      return min_index\n    }\n  }\n  return -1\n}\n\n/*\n  Create a function which returns the smallest index of an element which\n  is greater than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 4\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_front_back_back = (arr) => {\n  let min = -1\n  let min_index = -1\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] <= arr[i+1]) {\n      if (min < arr[i]) {\n        min = arr[i]\n        min_index = i\n      }\n    } else {\n      return min_index\n    }\n  }\n  return -1\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is less than or equal"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  if (!lst || lst.length === 0) return null;\n\n  let largest = -Infinity;\n  let smallest = Infinity;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest < lst[i]) largest = lst[i];\n    } else {\n      if (smallest > lst[i]) smallest = lst[i];\n    }\n  }\n\n  if (largest < 0) largest = null;\n  if (smallest > 0) smallest = null;\n\n  return largest === null? [smallest, largest] : [largest, smallest];\n};\n\nmodule.exports = largest_smallest_integers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n\n  if (typeof a === 'number') {\n    a = parseFloat(a);\n  }\n\n  if (typeof b === 'number') {\n    b = parseFloat(b);\n  }\n\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  } else {\n    return null;\n  }\n};\n\nexport { compare_one };\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  if (n < 2) return false;\n  return (Math.floor(n) === n) && n % 2 === 0 && n % 4 === 0;\n};\n\nconst is_equal_to_sum_odd = (n) => {\n  if (n < 2) return false;\n  return (Math.floor(n) === n) && n % 2 === 1;\n};\n\n// TODO: Implement your solution\nconst sum_odd = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n -= 1;\n  }\n  return sum;\n};\n\nconst sum_even = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n -= 2;\n  }\n  return sum;\n};\n\nconst sum_odd_even = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n -= 2;\n  }\n  return sum;\n};\n\nconst is_equal_to_sum = (n) => {\n  if (n < 2) return false;\n  if (is_equal_to_sum_odd(n)) return true;\n  if (is_equal_to_sum_even(n)) return true;\n  return is_equal_to_sum_odd_even(n);\n};\n\nmodule.exports = {\n  is_equal_to_sum,\n  sum_odd,\n  sum_even,\n  sum_odd_even,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  let f = 1\n  for (let i = 2; i <= n; i++) {\n    f *= i\n  }\n  return f\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n + 1 / 2 * (n+1) * (n+2) *... * (n+n-2) / (n+1) * (n+2) *... * (n+n-2)\n\n  For example:\n  >>> special_factorial(4)\n  144\n  >>> special_factorial(15)\n  11862245\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial_catalan = (n) => {\n  let f = 1\n  for (let i = 2; i <= n; i++) {\n    f *= (i + i - 1) / i\n  }\n  return f\n}\n\n/*The Glaisher constant is defined as:\n  glaisher(n) = 2**(n-1) * gamma(n/2 + 1) / gamma(n/2)\n\n  For example:\n  >>> special_factorial(4)\n  288\n  >>> special_factorial(15)\n  7151688\n  >>> special_factorial(30)\n  183577453724.5\n  >>> special_factorial(32)\n  28823037615171391.0\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial_glaisher = (n) => {\n  let f = Math.pow(2, n - 1)\n  for (let i = 2; i <= n; i++) {\n    f *= Math.pow(i + i - 1, 2) / i\n  }\n  return f\n}\n\n/*The prime counting function is defined as:\n  prime_counting(n) = n + 1 - 2 * count(n)\n\n  For example:\n  >>> special_factorial(4)\n  144\n  >>> special_factorial(15)\n  2289\n  >>> special_factorial(30)\n  1469180109\n\n  The function will receive an integer as input and should return the prime\n  counting function of this integer.\n  */\nconst special_factorial_prime_counting = (n) => {\n  let f = n + 1 - 2 * special_factorial(n)\n  return f\n}\n\n/*The prime factorization of an integer is defined as:\n  prime_factorization(n) = [n, 1] + prime_factorization(n/2)\n\n  For example:\n  >>> special_factorial(4)\n  144\n  >>> special_factorial(15)\n  2289\n  >>> special_factorial(30)\n  1469180109\n\n  The function will receive an integer as input and should return the prime\n  factorization of this integer.\n  */\nconst special_factorial_prime_factorization = (n) => {\n  let f = [n, 1]\n  for (let i = 2; i < n; i++) {\n    let factorization = special_factorial_prime_factorization(i)\n    f.push(...factorization)\n  }\n  return f\n}\n\n/*The prime factorization of a square integer is defined as:\n  prime_factorization(n) = [n, 1, 1] + prime_factorization(n/2)\n\n  For example:\n  >>> special_factorial(4)\n  144\n  >>> special_factorial(15)\n  2289\n  >>> special_factorial(30)\n  1469180109\n\n  The function will receive an integer as input and should return the prime\n  factorization of this integer.\n  */\nconst special_factorial_square_prime_factorization = (n) => {\n  let f = [n, 1, 1]\n  for (let i = 2; i < n; i++) {\n    let factorization = special_factorial_square_prime_factorization(i)\n    f.push(...factorization)\n  }\n  return f\n}\n\n/*The number of divisors of an integer is defined as:\n  number_of_divisors(n) = n * (n-1) * (n-2) *... * (n-n+1) / 2\n\n  For example:\n  >>> special_factorial(4)\n  144\n  >>> special_factorial(15)\n  2289\n  >>> special_factorial(30)\n  1469180109\n\n  The function will receive an integer as input and should return the number of\n  divisors of this integer.\n  */\nconst special_factorial_number_of_divisors = (n) => {\n  let f = n * special_factorial_prime_counting(n)\n  return f\n}\n\n/*The number of primes less than n is defined as:\n  number_of_primes(n) = (n*(n+1))/2\n\n  For example:\n  >>> special_factorial(4)\n  144\n  >>> special_factorial(15)\n  2289\n  >>> special_factorial(30)\n  1469180109\n\n  The function will receive an integer as input and should return the number of\n  primes less than n.\n  */\nconst special_factorial_number_of_primes = (n) => {\n  let f = (n * (n + 1)) / 2\n  return f\n}\n\n/*The number of square divisors of an integer is defined as:\n  number_of_square_divisors(n) = n * (n-1) * (n-2) *... * (n-n+1)\n\n  For example:\n  >>> special_factorial(4)\n  144\n  >>> special_factorial(15)\n  2289\n  >>> special_factorial(30)\n  1469180109\n\n  The function will receive an integer as"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  if (text.indexOf(\" \") == -1) {\n    return text\n  }\n  text = text.replace(/ /g, '_');\n  text = text.replace(/-+/g, '-');\n  return text\n}\n\n// given a string, return the number of words in it\n// example: \n//  fix_words(\"Hello World\") == 5\n//  fix_words(\"Hello World\") == 5\nconst fix_words = (text) => {\n  return text.split(\" \").length\n}\n\n// given a string, return the number of sentences in it\n// example: \n//  fix_sentences(\"Hello World\") == 1\n//  fix_sentences(\"Hello World\") == 1\nconst fix_sentences = (text) => {\n  return text.split(\".\").length\n}\n\n// Given a string, return the number of characters in it\n// example: \n//  fix_chars(\"Hello World\") == 12\n//  fix_chars(\"Hello World\") == 12\nconst fix_chars = (text) => {\n  return text.length\n}\n\n// Given a string, return a string with all the spaces in it replaced\n// example: \n//  fix_spaces(\"Hello World\") == \"Hello_World\"\nconst fix_all_spaces = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the spaces in it replaced\n// example: \n//  fix_all_spaces(\"Hello World\") == \"Hello-World\"\nconst fix_all_spaces_and_underscores = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the spaces in it replaced\n// example: \n//  fix_all_spaces(\"Hello World\") == \"HelloWorld\"\nconst fix_all_underscores = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the spaces in it replaced\n// example: \n//  fix_all_underscores(\"Hello World\") == \"HelloWorld\"\nconst fix_all_underscores_and_dashes = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the spaces in it replaced\n// example: \n//  fix_all_dashes(\"Hello World\") == \"HelloWorld\"\nconst fix_all_dashes = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the spaces in it replaced\n// example: \n//  fix_all_dashes(\"Hello World\") == \"HelloWorld\"\nconst fix_all_dashes_and_underscores = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the underscores in it replaced\n// example: \n//  fix_all_underscores(\"Hello World\") == \"HelloWorld\"\nconst fix_all_underscores_and_dashes = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the underscores in it replaced\n// example: \n//  fix_all_dashes(\"Hello World\") == \"HelloWorld\"\nconst fix_all_dashes_and_underscores = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the underscores in it replaced\n// example: \n//  fix_all_dashes_and_underscores(\"Hello World\") == \"HelloWorld\"\nconst fix_all_dashes_and_underscores_and_spaces = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the underscores in it replaced\n// example: \n//  fix_all_dashes_and_underscores(\"Hello World\") == \"HelloWorld\"\nconst fix_all_underscores_and_dashes_and_spaces = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the dashes in it replaced\n// example: \n//  fix_all_dashes(\"Hello World\") == \"HelloWorld\"\nconst fix_all_dashes_and_underscores_and_spaces = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the dashes and spaces in it replaced\n// example: \n//  fix_all_dashes_and_underscores_and_spaces(\"Hello World\") == \"HelloWorld\"\nconst fix_all_dashes_and_underscores_and_spaces_and_underscores = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the dashes, spaces, and underscores in it replaced\n// example: \n//  fix_all_dashes_and_underscores_and_spaces(\"Hello World\") == \"HelloWorld\"\nconst fix_all_dashes_and_underscores_and_spaces_and_underscores = (text) => {\n  return text.replace(/ /g, '_')\n}\n\n// Given a string, return a string with all the dashes, spaces, and underscores in it replaced\n// example: \n//  fix_all_dashes_and_underscores_and_spaces(\"Hello World\") == \"HelloWorld\"\nconst fix_all_dashes_and_underscores_and_spaces_and_underscores_and_spaces = (text) => {\n  return text.replace(/ /"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const invalid_regexp = /^[^\\w\\d.]+$/;\n  if(invalid_regexp.test(file_name)){\n    return 'No';\n  }\n  const valid_regexp = /^[a-zA-Z]*\\.\\w{1,2}\\w{1,2}$/;\n  if(valid_regexp.test(file_name)){\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const invalid_regexp = /^[^\\w\\d.]+$/;\n  if(invalid_regexp.test(file_name)){\n    return 'No';\n  }\n  const valid_regexp = /^[a-zA-Z]*\\.\\w{1,2}\\w{1,2}$/;\n  if(valid_regexp.test(file_name)){\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const invalid_regexp = /^[^\\w\\d.]+$/;\n  if(invalid_regexp.test(file_name)){\n    return 'No';\n  }\n  const valid_regexp = /^[a-zA-Z]*\\.\\w{1,2}\\w{1,2}$/;\n  if(valid_regexp.test(file_name)){\n    return 'Yes';\n  }\n  return 'No';\n};\n\n/* Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const invalid_regexp = /^[^\\w\\d.]+$/;\n  if(invalid_regexp.test(file_name)){\n    return 'No';\n  }\n  const valid_regexp = /^[a-zA-Z]*\\.\\w{1,2}\\w{1,2}$/;\n  if(valid_regexp.test(file_name)){\n    return 'Yes';\n  }\n  return 'No';\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry if its index is a \n  multiple of 3 and subtract the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_cubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i]\n    }\n    if (i % 4 === 0) {\n      sum -= lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the maximum of the integer entry if its index is a \n  multiple of 3 and the minimum of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the maximum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 5\n  */\nconst max_min = (lst) => {\n  let max = 0\n  let min = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      max = lst[i]\n    }\n    if (i % 4 === 0) {\n      min = lst[i]\n    }\n  }\n  return max > min? max : min\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the average of the integer entry if its index is a \n  multiple of 3 and the maximum of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the average of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2.5\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst avg = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i]\n    }\n    if (i % 4 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum / (lst.length / 2)\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the median of the integer entry if its index is a \n  multiple of 3 and the minimum of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the median of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -1\n  */\nconst median = (lst) => {\n  let sorted = sort(lst)\n  let middle = (sorted.length / 2)\n  if (sorted.length % 2 === 0) {\n    return sorted[middle]\n  } else {\n    return sorted[middle + 1]\n  }\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the mode of the integer entry if its index is a \n  multiple of 3 and the maximum of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the mode of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 5\n  */\nconst mode = (lst) => {\n  let max = 0\n  let maxCount = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      if (lst[i] > max) {\n        max = lst[i]\n        maxCount = 1\n      }"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const len = sentence.length\n  const word = (i) => sentence.charAt(i)\n  const is_word_start = (i) => i === 0 || sentence.charAt(i - 1) ===''\n  const is_word_end = (i) => i === len - 1 || sentence.charAt(i + 1) ===''\n  const is_word_in_sentence = (i) => word(i) && is_word_start(i) && is_word_end(i)\n  const is_prime = (n) => n % 1 === 0 && n > 1\n\n  const words = sentence.split('')\n  const is_prime_in_words = (i) => words[i] && is_prime(words[i].length)\n\n  let res = ''\n  for (let i = 0; i < len; i++) {\n    if (is_word_in_sentence(i)) {\n      res += words[i]\n    }\n    if (is_prime_in_words(i)) {\n      res += words[i]\n    }\n  }\n\n  return res\n}\n\nconsole.log(words_in_sentence('This is a test'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xNum = parseInt(x, 10);\n  const nNum = parseInt(n, 10);\n\n  if (xNum === 0) return false;\n  if (nNum === 0) return false;\n\n  if (nNum === xNum) {\n    return true;\n  }\n\n  if (nNum > xNum) {\n    const xRem = xNum % nNum;\n    const nRem = nNum - xRem;\n    if (nRem === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sum = () => {\n    let acc = 0;\n    for (let i = 0; i < nums.length; i++) {\n      acc += nums[i];\n    }\n    return acc;\n  };\n  return nums.sort((a, b) => {\n    if (sum(a) < sum(b)) {\n      return 1;\n    } else if (sum(a) > sum(b)) {\n      return -1;\n    } else {\n      return a > b? 1 : -1;\n    }\n  });\n};\n\nconst order_by_points_faster = (nums) => {\n  const sum = () => {\n    let acc = 0;\n    for (let i = 0; i < nums.length; i++) {\n      acc += nums[i];\n    }\n    return acc;\n  };\n  return nums.sort((a, b) => {\n    if (sum(a) < sum(b)) {\n      return 1;\n    } else if (sum(a) > sum(b)) {\n      return -1;\n    } else {\n      return a > b? 1 : -1;\n    }\n  });\n};\n\nmodule.exports = order_by_points_faster;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  return nums.filter((n) => {\n    return n > 10 && ((n % 10) == 1 || (n % 10) == 3 || (n % 10) == 5 || (n % 10) == 7 || (n % 10) == 9);\n  })\n};\n\nconsole.log(special_filter([15, -73, 14, -15]));\nconsole.log(special_filter([33, -2, -3, 45, 21, 109]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  let arr = Array(n).fill(1);\n  arr.forEach((e, i) => {\n    if (i === n - 1) {\n      return;\n    }\n    let j = i + 1;\n    while (j < n) {\n      arr[j] = arr[j] * 2;\n      j++;\n    }\n  });\n  let count = 0;\n  arr.forEach((e, i) => {\n    if (i === n - 1) {\n      return;\n    }\n    let j = i + 1;\n    while (j < n) {\n      if (e + arr[j] === 3) {\n        count++;\n      }\n      j++;\n    }\n  });\n  return count;\n};\n\nlet total = 0;\n\nfor (let i = 1; i <= 5; i++) {\n  let res = get_max_triples(i);\n  total += res;\n  console.log(res);\n}\n\nconsole.log(total);\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let bf = {};\n  bf[`${planet1}`] = bf[`${planet2}`] = false;\n  let sun = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 6.957e+11\n  };\n  let earth = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 6.371e+06\n  };\n  let jupiter = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.84e+09\n  };\n  let mercury = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 3.303e+07\n  };\n  let venus = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let mars = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 1.737e+09\n  };\n  let earthMoon = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 1.737e+09\n  };\n  let moonEarth = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 1.737e+09\n  };\n  let moonJupiter = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 1.737e+09\n  };\n  let mercuryEarth = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 3.303e+07\n  };\n  let mercuryMoon = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 3.303e+07\n  };\n  let mercuryJupiter = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 3.303e+07\n  };\n  let venusMoon = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let venusJupiter = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let jupiterMoon = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let earthJupiterMoon = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let earthJupiterMoon2 = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let jupiterEarthMoon = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let jupiterEarthMoon2 = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let jupiterMoonEarth = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let jupiterMoonEarth2 = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let mercuryMoonEarth = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 3.303e+07\n  };\n  let mercuryMoonEarth2 = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 3.303e+07\n  };\n  let mercuryJupiterMoon = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 3.303e+07\n  };\n  let mercuryJupiterMoon2 = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 3.303e+07\n  };\n  let venusMoonEarth = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let venusMoonEarth2 = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let venusJupiterMoon = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let venusJupiterMoon2 = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 4.869e+08\n  };\n  let moonJupiterEarth = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 1.737e+09\n  };\n  let moonJupiterEarth2 = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 1.737e+09\n  };\n  let mercuryMoonEarth = {\n    x: 0,\n    y: 0,\n    z: 0,\n    r: 1.737e+09\n  };\n  let mercuryMoon"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  return lst.reduce((acc, x, i) => {\n    const len = x.length\n    if (i > 0 && len!== acc[i - 1].length) {\n      acc.splice(i, 0, x);\n    } else if (i === 0 && len!== acc[0].length) {\n      acc.splice(0, 0, x);\n    } else if (len!== acc[i].length) {\n      acc.splice(i + 1, 0, x);\n    } else {\n      acc.splice(i, 1);\n    }\n    return acc;\n  }, []);\n}\n\nconst list_sort = (lst) => {\n  const sum = sorted_list_sum(lst);\n  return sum.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    } else if (a.length < b.length) {\n      return -1;\n    } else {\n      return a.localeCompare(b);\n    }\n  });\n};\n\nmodule.exports = list_sort;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconsole.log(x_or_y(3, 'a', 'b'));\nconsole.log(x_or_y(5, 'a', 'b'));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  const lst_length = lst.length\n  const sum = 0\n\n  if (lst_length === 0) return 0\n\n  let i = 0\n  let n = 0\n  let temp = 0\n  let is_odd = 0\n\n  for (i = 0; i < lst_length; i++) {\n    n = lst[i]\n    if (isNaN(n)) continue\n    if (n < 0) n = Math.abs(n)\n    if (n % 2) {\n      is_odd = 1\n      temp = n\n      sum += n * n\n    }\n  }\n\n  if (is_odd) sum += temp * temp\n  return sum\n}\n\nconst test_cases = [\n  [[1, 3, 2, 0], 10],\n  [[-1, -2, 0], 0],\n  [[9, -2], 81],\n  [[0], 0],\n  [[], 0],\n]\n\nconst tests = (test_cases) => {\n  const all_odd = (lst) => lst.every(x => x % 2)\n\n  test_cases.forEach(t => {\n    const result = double_the_difference(t[0])\n    if (all_odd(t[0])) {\n      console.log('double_the_difference({}) === {}, sum of squares = {}'.format(t[0], result, result))\n    } else {\n      console.log('double_the_difference({}) === {}, sum of squares = {}'.format(t[0], result, 0))\n    }\n  })\n}\n\ntests(test_cases)\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let [results, guesses] = game;\n  let [resultsLength, guessesLength] = game;\n  let [score, guess] = guesses;\n  let [scoreLength, guessLength] = guesses;\n  let resultsCount = 0;\n  let guessesCount = 0;\n  \n  for (let i = 0; i < resultsLength; i++) {\n    if (results[i] === score[i]) {\n      resultsCount++;\n    }\n  }\n  \n  for (let j = 0; j < guessLength; j++) {\n    if (guess[j] === score[j]) {\n      guessesCount++;\n    }\n  }\n  \n  let difference = 0;\n  for (let k = 0; k < scoreLength; k++) {\n    if (score[k]!== guess[k]) {\n      difference += Math.abs(score[k] - guess[k]);\n    }\n  }\n  \n  return [resultsCount, guessesCount, difference];\n}<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let strength = 0\n  let count = 0\n  let capitalized = 0\n  let lowercase = 0\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i]\n    let ext_strength = extension.length - extension.replace(/[a-z]/g, '').length\n    strength = (strength > ext_strength? strength : ext_strength)\n    capitalized += extension.replace(/[A-Z]/g, '').length\n    lowercase += extension.replace(/[a-z]/g, '').length\n    count += 1\n  }\n  let strength_value = strength - capitalized + lowercase\n  let class_name_length = class_name.length\n  let index = class_name.lastIndexOf('.')\n  let class_name_before = class_name.substr(0, index)\n  let class_name_after = class_name.substr(index + 1)\n  let extension = class_name_after.substr(0, strength_value)\n  return class_name_before + extension\n}\n\nconsole.log(strongest_extension('a.b.c', ['aa', 'be', 'cc']))\n// => a.b.c.aa\n\nconsole.log(strongest_extension('a.b.c', ['AA', 'Be', 'CC']))\n// => a.b.c.AA\n\nconsole.log(strongest_extension('a.b.c', ['aa', 'be', 'cc']))\n// => a.b.c.aa\n\nconsole.log(strongest_extension('a.b.c', ['AA', 'Be', 'CC']))\n// => a.b.c.AA<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const lenA = a.length\n  const lenB = b.length\n  const pat = b\n  const arr = []\n  for (let i = 0; i < lenB; i++) {\n    arr.push(b.charAt(i))\n  }\n  for (let j = lenA - 1; j >= 0; j--) {\n    if (a.charAt(j) === arr[0]) {\n      let str = a.slice(0, j + 1)\n      if (pat.indexOf(str) >= 0) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nconsole.log(cycpattern_check(\"whassup\",\"psus\"))\nconsole.log(cycpattern_check(\"abab\",\"baa\"))\nconsole.log(cycpattern_check(\"abab\",\"baa\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"baa\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))\nconsole.log(cycpattern_check(\"abab\",\"bba\"))"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  const num_str = num.toString();\n  const len = num_str.length;\n  const odd_count = 0;\n  const even_count = 0;\n  for (let i = 0; i < len; i++) {\n    if (num_str[i] % 2 === 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count, odd_count];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const roman = ['i', 'v', 'x', 'l', 'c', 'd','m']\n  let result = 0\n  while (number > 0) {\n    result += roman[number % 10]\n    number = Math.floor(number / 10)\n  }\n  return result.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const a_b = Math.sqrt(a * a + b * b);\n  const c_a = Math.sqrt(c * c + a * a);\n  const c_b = Math.sqrt(c * c + b * b);\n\n  if (a_b === c_a && b_c === c_b) {\n    return true;\n  }\n  if (a_b === c_a && b_c === c_b) {\n    return false;\n  }\n  if (a_b === c_a && b_c === c_b) {\n    return false;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_of_triangle(3, 4, 5) == 6.5\n  area_of_triangle(1, 2, 3) == 0.0\n  */\nconst area_of_triangle = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst is_right_angle_triangle = (a, b, c) => right_angle_triangle(a, b, c);\nconst area_of_triangle = (a, b, c) => area_of_triangle(a, b, c);\n\nmodule.exports = {\n  is_right_angle_triangle,\n  area_of_triangle\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let result = '';\n  let unique_characters = 0;\n  let counter = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > unique_characters) {\n      unique_characters = words[i].length;\n      result = words[i];\n    } else if (words[i].length === unique_characters) {\n      if (result.length < words[i].length) {\n        counter++;\n        result = words[i];\n      }\n    }\n  }\n\n  if (counter > 0) {\n    return result;\n  } else {\n    return '';\n  }\n};\n\n/*\n  Write a function that accepts a list of strings. The list contains different\n  words. Return a list of words with maximum number of unique characters.\n\n  find_max_with_map([\"name\", \"of\", \"string\"]) === [\"string\", \"name\"]\n  find_max_with_map([\"name\", \"enam\", \"game\"]) === [\"enam\", \"name\"]\n  find_max_with_map([\"aaaaaaa\", \"bb\",\"cc\"]) === [\"aaaaaaa\", \"bb\", \"cc\"]\n  */\nconst find_max_with_map = (words) => {\n  let result = [];\n  let max = 0;\n\n  words.forEach(word => {\n    if (word.length > max) {\n      max = word.length;\n      result = [word];\n    } else if (word.length === max) {\n      result.push(word);\n    }\n  });\n\n  return result;\n};\n\n//console.log(find_max([\"aaaaaaa\", \"bb\",\"cc\"]));\n//console.log(find_max_with_map([\"aaaaaaa\", \"bb\",\"cc\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max_with_map([\"name\", \"enam\", \"game\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  return [number + (remaining / number), remaining];\n}\n\nconsole.log(eat(5, 6, 10)); // [11, 4]\nconsole.log(eat(4, 8, 9)); // [12, 1]\nconsole.log(eat(1, 10, 10)); // [11, 0]\nconsole.log(eat(2, 11, 5)); // [7, 0]\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] + operator[i + 1].length - 1)\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_inverse = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] - operator[i + 1].length + 1)\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_inverse_2 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] + operator[i + 1].length - 1)\n  }\n  return result\n}\n\nconst do_algebra_inverse_3 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] - operator[i + 1].length + 1)\n  }\n  return result\n}\n\nconst do_algebra_inverse_4 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] + operator[i + 1].length - 1)\n  }\n  return result\n}\n\nconst do_algebra_inverse_5 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] - operator[i + 1].length + 1)\n  }\n  return result\n}\n\nconst do_algebra_inverse_6 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] + operator[i + 1].length - 1)\n  }\n  return result\n}\n\nconst do_algebra_inverse_7 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] - operator[i + 1].length + 1)\n  }\n  return result\n}\n\nconst do_algebra_inverse_8 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] - operator[i + 1].length + 1)\n  }\n  return result\n}\n\nconst do_algebra_inverse_9 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i = 0; i < length; i++) {\n    result.push(operand[i] + operator[i + 1].length - 1)\n  }\n  return result\n}\n\nconst do_algebra_inverse_10 = (operand, operator) => {\n  const length = operand.length - 1\n  const result = []\n  for (let i"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = [];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (isLower(c)) {\n      c = charCase(c);\n    } else if (isUpper(c)) {\n      c = charCase(c);\n    }\n    result.push(c);\n    if (count === 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return s;\n  } else {\n    return result.join('');\n  }\n};\n\nexport default solve;<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n    if (!text) {\n        return null;\n    }\n\n    return crypto.createHash('md5').update(text, 'utf-8').digest('hex');\n};\n\nmodule.exports = string_to_md5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  if (a === b) {\n    return [a]\n  }\n  const result = []\n  for (let i = a; i <= b; i += 2) {\n    result.push(i)\n  }\n  return result\n}\n\nmodule.exports = generate_integers\n<|endoftext|>"}
