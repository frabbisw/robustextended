{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  return (\n    numbers.reduce((acc, x, i) => {\n      let num2 = numbers[i + 1]\n      if (num2) {\n        return (\n          Math.abs(x - num2) < threshold ||\n          (Math.abs(x - num2) === threshold &&\n            Math.abs(x - acc) < threshold)\n        )\n      }\n    }, false)\n  )\n}\n\n/**\n  * Check if in given list of numbers, are any two numbers closer to each other than\n  * given threshold.\n  * The function is case insensitive.\n  *\n  * @param {Array} numbers\n  * @param {Number} threshold\n  * @returns {boolean}\n  *\n  * @example\n  *\n  *   has_close_elements([\"A\", \"B\", \"C\"], 0.5)\n  *   // => false\n  *\n  *   has_close_elements([\"A\", \"B\", \"C\", \"D\"], 0.5)\n  *   // => true\n  *\n  *   has_close_elements([\"A\", \"B\", \"C\"], 0.3)\n  *   // => false\n  *\n  *   has_close_elements([\"A\", \"B\", \"C\", \"D\"], 0.3)\n  *   // => true\n  */\nconst has_close_elements_case_insensitive = (numbers, threshold) => {\n  return (\n    numbers.reduce((acc, x, i) => {\n      let num2 = numbers[i + 1]\n      if (num2) {\n        return (\n          Math.abs(x.toUpperCase() - num2.toUpperCase()) < threshold ||\n          (Math.abs(x.toUpperCase() - num2.toUpperCase()) === threshold &&\n            Math.abs(x.toUpperCase() - acc.toUpperCase()) < threshold)\n        )\n      }\n    }, false)\n  )\n}\n\n/**\n  * Finds the smallest number in given list of numbers\n  *\n  * @param {Array} numbers\n  * @returns {number}\n  *\n  * @example\n  *\n  *   find_smallest_number([1, 2, 3])\n  *   // => 1\n  *\n  *   find_smallest_number([1, 2, 3, 4])\n  *   // => 1\n  *\n  *   find_smallest_number([1, 2, 3, 4, 5])\n  *   // => 1\n  */\nconst find_smallest_number = (numbers) => {\n  return (\n    numbers.reduce((acc, x) => {\n      if (acc < x) {\n        return x\n      }\n    })\n  )\n}\n\n/**\n  * Finds the largest number in given list of numbers\n  *\n  * @param {Array} numbers\n  * @returns {number}\n  *\n  * @example\n  *\n  *   find_largest_number([1, 2, 3])\n  *   // => 3\n  *\n  *   find_largest_number([1, 2, 3, 4])\n  *   // => 4\n  *\n  *   find_largest_number([1, 2, 3, 4, 5])\n  *   // => 5\n  */\nconst find_largest_number = (numbers) => {\n  return (\n    numbers.reduce((acc, x) => {\n      if (acc > x) {\n        return x\n      }\n    })\n  )\n}\n\n/**\n  * Calculate the sum of all numbers in given array.\n  *\n  * @param {Array} numbers\n  * @returns {number}\n  *\n  * @example\n  *\n  *   sum_of_numbers([1, 2, 3])\n  *   // => 6\n  */\nconst sum_of_numbers = (numbers) => {\n  return (\n    numbers.reduce((acc, x) => acc + x, 0)\n  )\n}\n\n/**\n  * Calculate the mean of all numbers in given array.\n  *\n  * @param {Array} numbers\n  * @returns {number}\n  *\n  * @example\n  *\n  *   mean_of_numbers([1, 2, 3])\n  *   // => 2\n  */\nconst mean_of_numbers = (numbers) => {\n  return (\n    sum_of_numbers(numbers) / numbers.length\n  )\n}\n\nmodule.exports = {\n  has_close_elements,\n  has_close_elements_case_insensitive,\n  find_smallest_number,\n  find_largest_number,\n  sum_of_numbers,\n  mean_of_numbers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  // console.log(paren_string);\n  const paren_stack = [];\n  const result = [];\n  let current_paren_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i];\n    if (c === '(') {\n      paren_stack.push(c);\n    } else if (c === ')') {\n      const current_paren_group_length = paren_stack.length;\n      if (current_paren_group_length > 0) {\n        // console.log(current_paren_group);\n        current_paren_group += paren_stack.pop();\n        if (paren_stack.length === 0) {\n          result.push(current_paren_group);\n          current_paren_group = '';\n        }\n      }\n    }\n  }\n  if (current_paren_group.length > 0) {\n    result.push(current_paren_group);\n  }\n  return result;\n};\n\n// Tests\n\nconst test_paren_groups = (input, expected) => {\n  console.log(`Input: ${input}`);\n  console.log(`Expected: ${expected}`);\n  const actual = separate_paren_groups(input);\n  console.log(`Actual: ${actual}`);\n  const msg = `Expected: ${expected} but got: ${actual}`;\n  assert(actual.length === expected.length, msg);\n  for (let i = 0; i < actual.length; i++) {\n    assert(actual[i] === expected[i], msg);\n  }\n};\n\ntest_paren_groups('( ) (( )) (( )( ))', ['()', '(())', '(()())']);\ntest_paren_groups('( ( )) (( )) (( )( ))', ['()', '(())', '(()())']);\ntest_paren_groups('( ( )) (( )) (( )( ))', ['()', '(())', '(()())']);\ntest_paren_groups('( ( )) (( )( ))', ['()', '(())', '(()())']);\ntest_paren_groups('( ( )( )) (( )) (( )( ))', ['()', '(())', '(()())']);\ntest_paren_groups('( ( )( )) (( )) (( )( ))', ['()', '(())', '(()())']);\ntest_paren_groups}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n    const num = parseFloat(number);\n    const dec = num % 1;\n    return (num - dec).toFixed(0);\n};\n\n/* Given a positive integer, return its decimal part.\n  >>> truncate_number(3)\n  0\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_int = (number) => {\n    return parseInt(number);\n};\n\n/* Given an integer number, return its decimal part and it's whole number.\n  >>> split_number(0)\n  { decimal: 0, whole: 0 }\n  >>> split_number(1)\n  { decimal: 0, whole: 1 }\n  >>> split_number(2)\n  { decimal: 0, whole: 2 }\n  >>> split_number(3)\n  { decimal: 0, whole: 3 }\n  >>> split_number(4)\n  { decimal: 0, whole: 4 }\n  >>> split_number(5)\n  { decimal: 0, whole: 5 }\n  >>> split_number(6)\n  { decimal: 0, whole: 6 }\n  >>> split_number(7)\n  { decimal: 0, whole: 7 }\n  >>> split_number(8)\n  { decimal: 0, whole: 8 }\n  >>> split_number(9)\n  { decimal: 0, whole: 9 }\n  >>> split_number(10)\n  { decimal: 0, whole: 10 }\n  >>> split_number(11)\n  { decimal: 0, whole: 11 }\n  >>> split_number(12)\n  { decimal: 0, whole: 12 }\n  >>> split_number(13)\n  { decimal: 0, whole: 13 }\n  >>> split_number(14)\n  { decimal: 0, whole: 14 }\n  >>> split_number(15)\n  { decimal: 0, whole: 15 }\n  >>> split_number(16)\n  { decimal: 0, whole: 16 }\n  >>> split_number(17)\n  { decimal: 0, whole: 17 }\n  >>> split_number(18)\n  { decimal: 0, whole: 18 }\n  >>> split_number(19)\n  { decimal: 0, whole: 19 }\n  >>> split_number(20)\n  { decimal: 0, whole: 20 }\n  >>> split_number(21)\n  { decimal: 0, whole: 21 }\n  >>> split_number(22)\n  { decimal: 0, whole: 22 }\n  >>> split_number(23)\n  { decimal: 0, whole: 23 }\n  >>> split_number(24)\n  { decimal: 0, whole: 24 }\n  >>> split_number(25)\n  { decimal: 0, whole: 25 }\n  >>> split_number(26)\n  { decimal: 0, whole: 26 }\n  >>> split_number(27)\n  { decimal: 0, whole: 27 }\n  >>> split_number(28)\n  { decimal: 0, whole: 28 }\n  >>> split_number(29)\n  { decimal: 0, whole: 29 }\n  >>> split_number(30)\n  { decimal: 0, whole: 30 }\n  >>> split_number(31)\n  { decimal: 0, whole: 31 }\n  >>> split_number(32)\n  { decimal: 0, whole: 32 }\n  >>> split_number(33)\n  { decimal: 0, whole: 33 }\n  >>> split_number(34)\n  { decimal: 0, whole: 34 }\n  >>> split_number(35)\n  { decimal: 0, whole: 35 }\n  >>> split_number(36)\n  { decimal: 0, whole: 36 }\n  >>> split_number(37)\n  { decimal: 0, whole: 37 }\n  >>> split_number(38)\n  { decimal: 0, whole: 38 }\n  >>> split_number(39)\n  { decimal: 0, whole: 39 }\n  >>> split_number(40)\n  { decimal: 0, whole: 40 }\n  >>> split_number(41)\n  { decimal: 0, whole: 41 }\n  >>> split_number(42)\n  { decimal: 0, whole: 42 }\n  >>> split_number(43)\n  { decimal: 0, whole: 43 }\n  >>> split_number(44)\n  { decimal: 0, whole: 44 }\n  >>> split_number(45)\n  { decimal: 0, whole: 45 }\n  >>> split_number(46)\n  { decimal: 0, whole: 46 }\n  >>> split_number(47)\n  { decimal: 0, whole: 47 }\n  >>> split_number(48)\n  { decimal: 0, whole: 48 }\n  >>> split_number(49)\n  { decimal: 0, whole: 49 }\n  >>> split_number(50)\n  { decimal: 0, whole: 50 }\n  >>> split_number(51)\n  { decimal: 0, whole: 51 }\n  >>> split_number(52)\n  { decimal: 0, whole: 52 }\n  >>> split_number(53)\n  { decimal: 0, whole: 53 }\n  >>> split_number(54)\n  { decimal: 0, whole: 54 }\n  >>> split_number(55)\n  { decimal: 0, whole: 55 }\n  >>> split_number(56)\n  { decimal: 0, whole: 56 }\n  >>> split_number(57)\n  { decimal: 0, whole: 57 }\n  >>> split_number(58)\n  { decimal: 0, whole: 58 }\n  >>> split_number(59)\n  { decimal: 0, whole: 59 }\n  >>> split_number(60)\n  { decimal: 0, whole: 60 }\n  >>> split_number(61)\n  { decimal: 0, whole: 61 }\n  >>> split_number(62)\n  { decimal: 0, whole: 62 }\n  >>> split_number(63)\n  { decimal: 0, whole: 63 }\n  >>> split_number(64)\n  { decimal: 0, whole: 64 }\n  >>> split_number(65)\n  { decimal: 0, whole: 65 }\n  >>> split_number(66)\n  {"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  if (operations.length === 0) {\n    return false;\n  }\n\n  const new_balance = operations.reduce((acc, value) => acc + value, 0);\n\n  if (new_balance < 0) {\n    return true;\n  }\n\n  return below_zero(operations.slice(1));\n};\n\nexport default below_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  // mean_absolute_deviation([]) -> NaN\n  if (!Array.isArray(numbers)) {\n    return NaN\n  }\n  // mean_absolute_deviation([1]) -> 0\n  if (numbers.length === 1) {\n    return 0\n  }\n  const sum = numbers.reduce((a, b) => a + b, 0)\n  const mean = sum / numbers.length\n  return (numbers.reduce((a, b) => Math.abs(a - b), 0) / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the Variance of this dataset.\n  Variance is the average of squared deviations around the mean of this dataset.\n  Variance is also known as the Standard Deviation (the square root of the\n  variance).\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  // variance([]) -> NaN\n  if (!Array.isArray(numbers)) {\n    return NaN\n  }\n  // variance([1]) -> NaN\n  if (numbers.length === 1) {\n    return NaN\n  }\n  const mean = mean_absolute_deviation(numbers)\n  const sum = numbers.reduce((a, b) => a + b, 0)\n  return (sum / numbers.length) - mean\n}\n\n/*\n  For a given list of input numbers, calculate the Standard Deviation of this dataset.\n  Standard Deviation is the square root of the variance.\n  >>> stdev([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst stdev = (numbers) => {\n  return Math.sqrt(variance(numbers))\n}\n\n/*\n  For a given list of input numbers, calculate the Pearson's Correlation Coefficient.\n  Pearson's Correlation Coefficient is a number between -1 and +1, inclusive.\n  This is the correlation of the two datasets.\n  >>> pearson_correlation_coefficient([1.0, 2.0, 3.0, 4.0])\n  0.9881512379141699\n  */\nconst pearson_correlation_coefficient = (numbers) => {\n  // pearson_correlation_coefficient([]) -> NaN\n  if (!Array.isArray(numbers)) {\n    return NaN\n  }\n  // pearson_correlation_coefficient([1]) -> NaN\n  if (numbers.length === 1) {\n    return NaN\n  }\n  const mean_x = mean_absolute_deviation(numbers)\n  const mean_y = mean_absolute_deviation(numbers.concat(numbers))\n  return (numbers.reduce((a, b) => a + b, 0) / (numbers.length * numbers.length)) - (mean_x * mean_y)\n}\n\n/*\n  For a given list of input numbers, calculate the Spearman's Correlation Coefficient.\n  Spearman's Correlation Coefficient is a number between -1 and +1, inclusive.\n  This is the correlation of the two datasets.\n  >>> spearman_correlation_coefficient([1.0, 2.0, 3.0, 4.0])\n  0.9371567916677867\n  */\nconst spearman_correlation_coefficient = (numbers) => {\n  // spearman_correlation_coefficient([]) -> NaN\n  if (!Array.isArray(numbers)) {\n    return NaN\n  }\n  // spearman_correlation_coefficient([1]) -> NaN\n  if (numbers.length === 1) {\n    return NaN\n  }\n  const mean_x = mean_absolute_deviation(numbers)\n  const mean_y = mean_absolute_deviation(numbers.concat(numbers))\n  return (numbers.reduce((a, b) => a + b, 0) / (numbers.length * numbers.length)) - (mean_x * mean_y)\n}\n\nexport default {\n  mean_absolute_deviation,\n  variance,\n  stdev,\n  pearson_correlation_coefficient,\n  spearman_correlation_coefficient\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let array = [],\n    i = 0,\n    num = numbers[0];\n\n  while (numbers.length) {\n    if (i) {\n      array.push(delimeter);\n    }\n    array.push(num);\n    i = 1;\n    num = numbers.shift();\n  }\n\n  return array;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const groups = paren_string.split(' ');\n  const levels = [];\n\n  for (const group of groups) {\n    const curr_level = 1;\n    const parens_count = 0;\n\n    // Go through each level of parentheses.\n    for (let i = 0; i < group.length; i++) {\n      // Check if group has a character matching current level of parentheses.\n      if (group[i] === '(') {\n        parens_count++;\n      } else if (group[i] === ')') {\n        // Decrease the count of current level of parentheses.\n        curr_level--;\n\n        // Check if current level of parentheses is 0.\n        if (curr_level === 0) {\n          // Check if current level of parentheses is less than previous level of parentheses.\n          if (parens_count < levels[i]) {\n            curr_level = levels[i];\n          }\n          parens_count = 0;\n        }\n      }\n    }\n    levels.push(curr_level);\n  }\n  return levels;\n};\n\nmodule.exports = parse_nested_parens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(s => {\n    return s.indexOf(substring)!== -1;\n  });\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring, ignoring case.\n  >>> filter_by_substring_case_insensitive([], 'a')\n  []\n  >>> filter_by_substring_case_insensitive(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filter_by_substring_case_insensitive = (strings, substring) => {\n  return strings.filter(s => {\n    return s.toLowerCase().indexOf(substring.toLowerCase())!== -1;\n  });\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring and ignore case.\n  >>> filter_by_substring_case_insensitive_ignore_case([], 'a')\n  []\n  >>> filter_by_substring_case_insensitive_ignore_case(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filter_by_substring_case_insensitive_ignore_case = (strings, substring) => {\n  return strings.filter(s => {\n    return s.toLowerCase().indexOf(substring.toLowerCase())!== -1;\n  });\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring and ignore case.\n  >>> filter_by_substring_case_insensitive_ignore_case_ignore_case([], 'a')\n  []\n  >>> filter_by_substring_case_insensitive_ignore_case_ignore_case(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filter_by_substring_case_insensitive_ignore_case_ignore_case = (strings, substring) => {\n  return strings.filter(s => {\n    return s.toLowerCase().indexOf(substring.toLowerCase())!== -1;\n  });\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring and ignore case.\n  >>> filter_by_substring_case_insensitive_ignore_case_ignore_case_ignore_case([], 'a')\n  []\n  >>> filter_by_substring_case_insensitive_ignore_case_ignore_case(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filter_by_substring_case_insensitive_ignore_case_ignore_case = (strings, substring) => {\n  return strings.filter(s => {\n    return s.toLowerCase().indexOf(substring.toLowerCase())!== -1;\n  });\n};\n\nmodule.exports = {\n  filter_by_substring,\n  filter_by_substring_case_insensitive,\n  filter_by_substring_case_insensitive_ignore_case,\n  filter_by_substring_case_insensitive_ignore_case_ignore_case\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product2 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product2([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product3 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product3([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product4 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product4([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product5 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product5([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product6 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product6([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product7 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product7([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product8 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product8([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product9 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product9([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product10 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product10([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product11 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product11([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product12 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product12([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product13 = (numbers, int) => {\n  const total = sum = 0\n  const product = 1\n  for (let number of numbers) {\n    const temp = number + total\n    total = temp < 0? temp + sum : temp\n    sum += number\n    product *= number\n  }\n  return (total, product)\n}\n\n/*\n  >>> sum_product13([1, 2"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  let result = [];\n  let max = numbers[0];\n  let i = 0;\n  while (i < numbers.length) {\n    let num = numbers[i];\n    if (num > max) {\n      max = num;\n      result.push(max);\n    } else {\n      if (i < numbers.length - 1) {\n        max = max + numbers[i + 1];\n      }\n    }\n    i++;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (is_palindrome(string)) {\n    return string;\n  }\n\n  const max_index = string.length - 1;\n  for (let i = 0; i < max_index; ++i) {\n    const substr = string.substring(i);\n    if (is_palindrome(substr)) {\n      const rev_substr = substr.split('').reverse().join('');\n      return substr + rev_substr;\n    }\n  }\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (is_palindrome(string)) {\n    return string;\n  }\n\n  const max_index = string.length - 1;\n  for (let i = 0; i < max_index; ++i) {\n    const substr = string.substring(0, i + 1);\n    if (is_palindrome(substr)) {\n      const rev_substr = substr.split('').reverse().join('');\n      return rev_substr + substr;\n    }\n  }\n}\n\n// Test cases\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst string = 'cata';\n\nconsole.log(makePalindrome(string));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let n = a.length < b.length? a.length : b.length;\n  for (let i = 0; i < n; i++) {\n    if (a[i] === b[i]) {\n      continue;\n    } else {\n      return a[i] + b[i];\n    }\n  }\n  return a.length > b.length? a[n] + b[n] : b[n] + a[n];\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_2 = (a, b) => {\n  if (a === b) {\n    return '0';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_3 = (a, b) => {\n  if (a === b) {\n    return '00';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_4 = (a, b) => {\n  if (a === b) {\n    return '0000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_5 = (a, b) => {\n  if (a === b) {\n    return '00000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_6 = (a, b) => {\n  if (a === b) {\n    return '000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_7 = (a, b) => {\n  if (a === b) {\n    return '0000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_8 = (a, b) => {\n  if (a === b) {\n    return '00000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_9 = (a, b) => {\n  if (a === b) {\n    return '000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_10 = (a, b) => {\n  if (a === b) {\n    return '0000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_11 = (a, b) => {\n  if (a === b) {\n    return '00000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_12 = (a, b) => {\n  if (a === b) {\n    return '000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_13 = (a, b) => {\n  if (a === b) {\n    return '0000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_14 = (a, b) => {\n  if (a === b) {\n    return '00000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_15 = (a, b) => {\n  if (a === b) {\n    return '000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_16 = (a, b) => {\n  if (a === b) {\n    return '0000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_17 = (a, b) => {\n  if (a === b) {\n    return '000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_18 = (a, b) => {\n  if (a === b) {\n    return '0000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_19 = (a, b) => {\n  if (a === b) {\n    return '000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_20 = (a, b) => {\n  if (a === b) {\n    return '0000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_21 = (a, b) => {\n  if (a === b) {\n    return '0000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_22 = (a, b) => {\n  if (a === b) {\n    return '0000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_23 = (a, b) => {\n  if (a === b) {\n    return '0000000000000000';\n  }\n  return a.toString(2) + b.toString(2);\n};\n\n//------------------------------------------------------------------------------\n\nconst string_xor_24 = (a, b) => {\n  if (a"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n  let longestLength = strings[0].length;\n\n  strings.forEach(string => {\n    if (string.length > longestLength) {\n      longestString = string;\n      longestLength = string.length;\n    }\n  });\n\n  return longestString;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  let i, j, tmp;\n  if (a < b) {\n    tmp = a;\n    a = b;\n    b = tmp;\n  }\n  for (i = 1; i < b; i++) {\n    if (a % i === 0) {\n      j = 0;\n      while (a % i === 0) {\n        j += 1;\n        a /= i;\n      }\n      return j;\n    }\n  }\n  return b;\n};\n\nconst main = () => {\n  console.log(greatest_common_divisor(5, 7));\n  console.log(greatest_common_divisor(25, 15));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  if (string.length === 1) {\n    return [string]\n  }\n  const prefixes = []\n  for (let i = 1; i < string.length; i++) {\n    for (let j = 0; j < string.length - i; j++) {\n      prefixes.push(string.substr(j, i))\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst all_suffixes = (string) => {\n  if (string.length === 1) {\n    return [string]\n  }\n  const suffixes = []\n  for (let i = 1; i < string.length; i++) {\n    for (let j = 0; j < string.length - i; j++) {\n      suffixes.push(string.substr(j, i))\n    }\n  }\n  return suffixes\n}\n\n/* Return a dictionary of the number of occurrences of each letter\n  >>> letter_count('abc')\n  {'a': 1, 'b': 1, 'c': 1}\n  */\nconst letter_count = (string) => {\n  const letter_counts = {}\n  for (let i = 0; i < string.length; i++) {\n    let letter = string[i]\n    if (letter_counts.hasOwnProperty(letter)) {\n      letter_counts[letter] += 1\n    } else {\n      letter_counts[letter] = 1\n    }\n  }\n  return letter_counts\n}\n\n/* Return a list of the unique letters in the input string\n  >>> letters_in('abc')\n  ['a', 'b', 'c']\n  */\nconst letters_in = (string) => {\n  const letters = []\n  for (let i = 0; i < string.length; i++) {\n    let letter = string[i]\n    if (letters.indexOf(letter) === -1) {\n      letters.push(letter)\n    }\n  }\n  return letters\n}\n\n/* Return a list of the unique words in the input string\n  >>> words_in('abc')\n  ['abc']\n  >>> words_in('abcd')\n  ['abc', 'abcd']\n  */\nconst words_in = (string) => {\n  const words = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substr(i)\n    if (words.indexOf(word) === -1) {\n      words.push(word)\n    }\n  }\n  return words\n}\n\n/* Return a dictionary of the number of occurrences of each word\n  >>> word_count('abc')\n  {'abc': 1}\n  */\nconst word_count = (string) => {\n  const word_counts = {}\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substr(i)\n    if (word_counts.hasOwnProperty(word)) {\n      word_counts[word] += 1\n    } else {\n      word_counts[word] = 1\n    }\n  }\n  return word_counts\n}\n\n/* Return a list of the unique words in the input string\n  >>> words_in('abc')\n  ['abc']\n  >>> words_in('abcd')\n  ['abc', 'abcd']\n  */\nconst words_out = (string) => {\n  const words = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string.substr(i)\n    if (words.indexOf(word) === -1) {\n      words.push(word)\n    }\n  }\n  return words\n}\n\n/* Return the string where each word is capitalized\n  >>> capitalized('this is a sentence')\n  'this IS A SENTENCE'\n  */\nconst capitalized = (string) => {\n  const words = string.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].toUpperCase()\n  }\n  return words.join(' ')\n}\n\n/* Return the string where each word is lower-cased\n  >>> lowercase('THIS IS A SENTENCE')\n  'this is a sentence'\n  */\nconst lowercase = (string) => {\n  const words = string.split(' ')\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].toLowerCase()\n  }\n  return words.join(' ')\n}\n\n/* Return the number of words in the input string\n  >>> word_count('abc')\n  1\n  */\nconst word_count = (string) => {\n  return string.split(' ').length\n}\n\nmodule.exports = {\n  all_prefixes,\n  all_suffixes,\n  letter_count,\n  letters_in,\n  word_count,\n  words_in,\n  words_out,\n  capitalized,\n  lowercase,\n  word_count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const arr = []\n  let i = 0\n  while (i++ < n) {\n    arr.push(String(i))\n  }\n  return arr.join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive,\n  with trailing zeros removed.\n  >>> string_sequence(5, True)\n  '0 1 2 3 4'\n  >>> string_sequence(0, True)\n  '0'\n  */\nconst string_sequence_trim_zeros = (n, trim_zeros = false) => {\n  const arr = []\n  let i = 0\n  while (i++ < n) {\n    arr.push(String(i).replace(/^0*(\\d)/, '$1'))\n  }\n  if (trim_zeros) {\n    return arr.join(' ').replace(/^0*(\\d)/, '$1')\n  } else {\n    return arr.join(' ')\n  }\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive,\n  with trailing zeros added.\n  >>> string_sequence(5, False)\n  '0 1 2 3 4 5'\n  >>> string_sequence(0, False)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_add_zeros = (n, trim_zeros = false) => {\n  const arr = []\n  let i = 0\n  while (i++ < n) {\n    arr.push(String(i) + '0')\n  }\n  if (trim_zeros) {\n    return arr.join(' ').replace(/^0*(\\d)/, '$1')\n  } else {\n    return arr.join(' ')\n  }\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive,\n  with leading zeros removed.\n  >>> string_sequence(5, True)\n  '1 2 3 4 5'\n  >>> string_sequence(0, True)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_remove_zeros = (n, trim_zeros = false) => {\n  const arr = []\n  let i = 0\n  while (i++ < n) {\n    arr.push(String(i).replace(/^0*(\\d)/, '$1'))\n  }\n  if (trim_zeros) {\n    return arr.join(' ').replace(/^0*(\\d)/, '$1')\n  } else {\n    return arr.join(' ')\n  }\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive,\n  with leading and trailing zeros removed.\n  >>> string_sequence(5, True)\n  '1 2 3 4 5'\n  >>> string_sequence(0, True)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_trim = (n, trim_zeros = false) => {\n  const arr = []\n  let i = 0\n  while (i++ < n) {\n    arr.push(String(i).replace(/^0*(\\d)/, '$1'))\n  }\n  if (trim_zeros) {\n    return arr.join(' ').replace(/^0*(\\d)/, '$1')\n  } else {\n    return arr.join(' ')\n  }\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive,\n  with leading and trailing zeros added.\n  >>> string_sequence(5, False)\n  '1 2 3 4 5 1'\n  >>> string_sequence(0, False)\n  '0 1 2 3 4 5 1'\n  */\nconst string_sequence_add = (n, trim_zeros = false) => {\n  const arr = []\n  let i = 0\n  while (i++ < n) {\n    arr.push(String(i) + '0')\n  }\n  if (trim_zeros) {\n    return arr.join(' ').replace(/^0*(\\d)/, '$1')\n  } else {\n    return arr.join(' ')\n  }\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive,\n  with leading zeros removed.\n  >>> string_sequence(5, True)\n  '1 2 3 4 5'\n  >>> string_sequence(0, True)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_remove = (n, trim_zeros = false) => {\n  const arr = []\n  let i = 0\n  while (i++ < n) {\n    arr.push(String(i).replace(/^0*(\\d)/, '$1'))\n  }\n  if (trim_zeros) {\n    return arr.join(' ').replace(/^0*(\\d)/, '$1')\n  } else {\n    return arr.join(' ')\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let counter = 0;\n  string.split('').forEach(char => {\n    counter += (1 + char.toUpperCase() === char.toLowerCase())? 1 : 0;\n  });\n  return counter;\n};\n\n/* Given a string, find out how many times each character occurs in the string\n  >>> count_characters('xyzXYZ')\n  {'x': 3, 'y': 1, 'z': 2}\n  >>> count_characters('Jerry')\n  {'J': 1, 'r': 2, 'e': 1, 'y': 1}\n  */\nconst count_characters = (string) => {\n  let count = {};\n  string.split('').forEach(char => {\n    count[char] = (count[char] || 0) + 1;\n  });\n  return count;\n};\n\n/* Given a string, find out how many times each character occurs in the string\n  >>> count_characters('xyzXYZ')\n  {'x': 3, 'y': 1, 'z': 2}\n  >>> count_characters('Jerry')\n  {'J': 1, 'r': 2, 'e': 1, 'y': 1}\n  */\nconst count_characters_with_duplicates = (string) => {\n  let count = {};\n  string.split('').forEach(char => {\n    count[char] = (count[char] || 0) + 1;\n  });\n  for (let key in count) {\n    if (count[key] > 1) {\n      count[key] = count[key] - 1;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many times each character occurs in the string\n  >>> count_characters('xyzXYZ')\n  {'x': 3, 'y': 1, 'z': 2}\n  >>> count_characters('Jerry')\n  {'J': 1, 'r': 2, 'e': 1, 'y': 1}\n  */\nconst count_characters_with_duplicates_and_repeated_characters = (string) => {\n  let count = {};\n  string.split('').forEach(char => {\n    count[char] = (count[char] || 0) + 1;\n  });\n  for (let key in count) {\n    if (count[key] > 1) {\n      count[key] = count[key] - 1;\n    }\n  }\n  let repeated_characters = {};\n  for (let key in count) {\n    if (count[key] > 1) {\n      repeated_characters[key] = 1;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many times each character occurs in the string\n  >>> count_characters('xyzXYZ')\n  {'x': 3, 'y': 1, 'z': 2}\n  >>> count_characters('Jerry')\n  {'J': 1, 'r': 2, 'e': 1, 'y': 1}\n  */\nconst count_characters_with_duplicates_and_repeated_characters_and_different_case = (string) => {\n  let count = {};\n  string.split('').forEach(char => {\n    count[char] = (count[char] || 0) + 1;\n  });\n  let repeated_characters = {};\n  for (let key in count) {\n    if (count[key] > 1) {\n      repeated_characters[key.toUpperCase()] = 1;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many times each character occurs in the string\n  >>> count_characters('xyzXYZ')\n  {'x': 3, 'y': 1, 'z': 2}\n  >>> count_characters('Jerry')\n  {'J': 1, 'r': 2, 'e': 1, 'y': 1}\n  */\nconst count_characters_with_duplicates_and_repeated_characters_and_different_case_and_first_letter_lowercase = (string) => {\n  let count = {};\n  string.split('').forEach(char => {\n    count[char.toUpperCase()] = (count[char.toUpperCase()] || 0) + 1;\n  });\n  let repeated_characters = {};\n  for (let key in count) {\n    if (count[key] > 1) {\n      repeated_characters[key.toUpperCase()] = 1;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many times each character occurs in the string\n  >>> count_characters('xyzXYZ')\n  {'x': 3, 'y': 1, 'z': 2}\n  >>> count_characters('Jerry')\n  {'J': 1, 'r': 2, 'e': 1, 'y': 1}\n  */\nconst count_characters_with_duplicates_and_repeated_characters_and_different_case_and_first_letter_lowercase = (string) => {\n  let count = {};\n  string.split('').forEach(char => {\n    count[char.toUpperCase()] = (count[char.toUpperCase()] || 0) + 1;\n  });\n  let repeated_characters = {};\n  for (let key in count) {\n    if (count[key] > 1) {\n      repeated_characters[key.toUpperCase()] = 1;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many times each character occurs in the string\n  >>> count_characters('xyzXYZ')\n  {'x': 3, 'y': 1, 'z': 2}\n  >>> count_characters('Jerry')\n  {'J': 1, 'r': 2, 'e': 1, 'y': 1}\n  */\nconst count_characters_with_duplicates_and_repe"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const note_lengths = {\n    'o': 4,\n    'o|': 2,\n    '.': 1\n  };\n  const notes = music_string.split(' ');\n  const parsed_notes = notes.map((note) => {\n    return note.replace('o', 'o|').replace('.', '.'|');\n  });\n  const number_of_notes = parsed_notes.length;\n  const beat_length = (note_lengths[parsed_notes[0]] * 4) + (note_lengths[parsed_notes[1]] * 2) + note_lengths[parsed_notes[2]];\n  const total_beats = number_of_notes / beat_length;\n  const last_note = parsed_notes[number_of_notes - 1];\n  const last_note_length = note_lengths[last_note];\n  const beats_since_last_note = total_beats * last_note_length;\n  return [total_beats, beats_since_last_note];\n};\n\nconst main = parse_music(process.argv[2]);\nconsole.log(`${main[0]} beats since last note.`);\nconsole.log(`${main[1]} beats since last note.`);\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n    const times = 0;\n    for (let i = 0; i <= string.length - substring.length; i++) {\n        if (string.slice(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n};\n\n/* Find the sum of digits of a given number. */\nconst sum_of_digits = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current), 0);\n};\n\n/*\n  >>> sum_of_digits(12)\n  6\n  >>> sum_of_digits(42)\n  21\n  >>> sum_of_digits(1337)\n  17\n  >>> sum_of_digits(42.123)\n  42\n  >>> sum_of_digits(3.14)\n  3\n  */\nconst sum_of_digits = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current), 0);\n};\n\n/* Find the sum of squares of the digits of a given number. */\nconst sum_of_squares = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * parseInt(current), 0);\n};\n\n/*\n  >>> sum_of_squares(12)\n  42\n  >>> sum_of_squares(42)\n  144\n  >>> sum_of_squares(1337)\n  1887\n  >>> sum_of_squares(42.123)\n  1652\n  >>> sum_of_squares(3.14)\n  0\n  */\nconst sum_of_squares = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * parseInt(current), 0);\n};\n\n/* Find the sum of cubes of the digits of a given number. */\nconst sum_of_cubes = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * parseInt(current) * parseInt(current), 0);\n};\n\n/*\n  >>> sum_of_cubes(12)\n  576\n  >>> sum_of_cubes(42)\n  5292\n  >>> sum_of_cubes(1337)\n  37809\n  >>> sum_of_cubes(42.123)\n  34688\n  >>> sum_of_cubes(3.14)\n  0\n  */\nconst sum_of_cubes = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * parseInt(current) * parseInt(current), 0);\n};\n\n/* Find the sum of numbers that are multiples of a given number. */\nconst sum_of_multiples = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * number, 0);\n};\n\n/*\n  >>> sum_of_multiples(12)\n  24\n  >>> sum_of_multiples(42)\n  42\n  >>> sum_of_multiples(1337)\n  3737\n  >>> sum_of_multiples(42.123)\n  3313\n  >>> sum_of_multiples(3.14)\n  0\n  */\nconst sum_of_multiples = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * number, 0);\n};\n\n/*\n  >>> sum_of_multiples(12)\n  24\n  >>> sum_of_multiples(42)\n  42\n  >>> sum_of_multiples(1337)\n  3737\n  >>> sum_of_multiples(42.123)\n  3313\n  >>> sum_of_multiples(3.14)\n  0\n  */\nconst sum_of_multiples = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * number, 0);\n};\n\n/*\n  >>> sum_of_multiples(12)\n  24\n  >>> sum_of_multiples(42)\n  42\n  >>> sum_of_multiples(1337)\n  3737\n  >>> sum_of_multiples(42.123)\n  3313\n  >>> sum_of_multiples(3.14)\n  0\n  */\nconst sum_of_multiples = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * number, 0);\n};\n\n/*\n  >>> sum_of_multiples(12)\n  24\n  >>> sum_of_multiples(42)\n  42\n  >>> sum_of_multiples(1337)\n  3737\n  >>> sum_of_multiples(42.123)\n  3313\n  >>> sum_of_multiples(3.14)\n  0\n  */\nconst sum_of_multiples = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * number, 0);\n};\n\n/*\n  >>> sum_of_multiples(12)\n  24\n  >>> sum_of_multiples(42)\n  42\n  >>> sum_of_multiples(1337)\n  3737\n  >>> sum_of_multiples(42.123)\n  3313\n  >>> sum_of_multiples(3.14)\n  0\n  */\nconst sum_of_multiples = number => {\n    return number.toString().split('').reduce((prev, current) => prev + parseInt(current) * number, 0);\n};\n\n/* Find the largest number that is evenly divisible by all the digits of a given number. */\nconst largest_divisible_by_all_digits = number"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n    return sort(numbers, (n) => parseInt(n, 10));\n}\n\n/*\n  Input is a string of numbers from '0' to '9'.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sort_numbers('0 2 7 8 5 3')\n  '5 3 7 8 0 2'\n  */\nconst sort_numbers_reverse = (numbers) => {\n    return sort(numbers, (n) => parseInt(n, 10))\n       .reverse()\n       .join('');\n}\n\n/*\n  Input is a space-delimited string of numbers from '0' to '9'.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sort_numbers_reverse('7 2 8 5 3 0')\n  '0 3 5 7 8 2'\n  */\nconst sort_numbers_reverse_reverse = (numbers) => {\n    return sort(numbers, (n) => parseInt(n, 10))\n       .reverse()\n       .reverse()\n       .join('');\n}\n\n/*\n  Input is a string of numbers from '0' to '9'.\n  Return the string with the numbers sorted from smallest to largest\n  >>> sort_numbers_reverse_reverse('7 2 8 5 3 0')\n  '2 3 4 5 6 7 8 0'\n  */\nconst sort_numbers_reverse_reverse_reverse = (numbers) => {\n    return sort(numbers, (n) => parseInt(n, 10))\n       .reverse()\n       .reverse()\n       .reverse()\n       .join('');\n}\n\n//console.log(sort_numbers('2 8 7 6 5 3 0 9'))\n//console.log(sort_numbers_reverse('2 8 7 6 5 3 0 9'))\n//console.log(sort_numbers_reverse_reverse('2 8 7 6 5 3 0 9'))\n//console.log(sort_numbers_reverse_reverse_reverse('2 8 7 6 5 3 0 9'))\n\nmodule.exports = {\n    sort_numbers,\n    sort_numbers_reverse,\n    sort_numbers_reverse_reverse,\n    sort_numbers_reverse_reverse_reverse\n}<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const find_two_closest_elements = (array, number) => {\n    const [left, right] = find_two_closest_elements_helper(array, number);\n    return [left, right];\n  };\n\n  return find_two_closest_elements(numbers, numbers[0]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  return numbers.reduce((acc, number) => {\n    acc[0] = acc[0] + (number - acc[acc.length - 1]) / (acc[1] - acc[acc.length - 1])\n    acc[1] = number\n    return acc\n  }, [0, 1])\n}\n\n/*\n  Given a list of numbers, apply a log scale transform to that list,\n  such that the largest number will become 0 and the smallest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log = (numbers) => {\n  return numbers.reduce((acc, number) => {\n    acc[0] = acc[0] + (number - acc[acc.length - 1]) / (Math.log(acc[1] / acc[acc.length - 1]) - Math.log(acc[0] / acc[acc.length - 1]))\n    acc[1] = number\n    return acc\n  }, [0, 1])\n}\n\n/*\n  Given a list of numbers, apply a log scale transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log2 = (numbers) => {\n  return numbers.reduce((acc, number) => {\n    acc[0] = acc[0] + (number - acc[acc.length - 1]) / (Math.log(acc[1] / acc[acc.length - 1]) / Math.log(2) - Math.log(acc[0] / acc[acc.length - 1]))\n    acc[1] = number\n    return acc\n  }, [0, 1])\n}\n\n/*\n  Given a list of numbers, apply a log scale transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_log2([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_log10 = (numbers) => {\n  return numbers.reduce((acc, number) => {\n    acc[0] = acc[0] + (number - acc[acc.length - 1]) / (Math.log(acc[1] / acc[acc.length - 1]) / Math.log(10) - Math.log(acc[0] / acc[acc.length - 1]))\n    acc[1] = number\n    return acc\n  }, [0, 1])\n}\n\n/*\n  Given a list of numbers, apply a log scale transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit_log10([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_log10b = (numbers) => {\n  return numbers.reduce((acc, number) => {\n    acc[0] = acc[0] + (number - acc[acc.length - 1]) / (Math.log(acc[1] / acc[acc.length - 1]) / Math.log(10) - Math.log(acc[0] / acc[acc.length - 1]))\n    acc[1] = number\n    return acc\n  }, [0, 1])\n}\n\nexport {\n  scale_to_unit,\n  scale_to_unit_log,\n  scale_to_unit_log2,\n  scale_to_unit_log10,\n  scale_to_unit_log10b,\n  rescale_to_unit,\n  rescale_to_unit_log,\n  rescale_to_unit_log2,\n  rescale_to_unit_log10,\n  rescale_to_unit_log10b\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n\n/* Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  [3.14, '5']\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filter_strings = (values) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] ==='string') {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n\n/* Filter given list of any python values only for numbers or strings\n  >>> filter_any(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter_any([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_any = (values) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number' || typeof values[i] ==='string') {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n\n/* Filter given list of any python values only for numbers or strings or integers\n  >>> filter_any_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_any_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_any_integers = (values) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number' || typeof values[i] ==='string') {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n\n/* Filter given list of any python values only for numbers or strings or integers or booleans\n  >>> filter_any_booleans(['a', 3.14, 5])\n  [5]\n  >>> filter_any_booleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_any_booleans = (values) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number' || typeof values[i] ==='string' || values[i] === true || values[i] === false) {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [5]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_booleans = (values) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'boolean') {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n\n/* Filter given list of any python values only for lists\n  >>> filter_lists(['a', 3.14, 5])\n  []\n  >>> filter_lists([1, 2, 3, 'abc', {}, []])\n  [[1, 2, 3]]\n  */\nconst filter_lists = (values) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (Array.isArray(values[i])) {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filter_dictionaries(['a', 3.14, 5])\n  []\n  >>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_dictionaries = (values) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'object') {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n\n/* Filter given list of any python values only for the given value\n  >>> filter_value(['a', 3.14, 5], 5)\n  5\n  >>> filter_value([1, 2, 3, 'abc', {}, [], 5], 5)\n  5\n  >>> filter_value([1, 2, 3, 'abc', {}, [], 5.2], 5.2)\n  5.2\n  */\nconst filter_value = (values, value) => {\n  const return_list = [];\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] === value) {\n      return_list.push(values[i]);\n    }\n  }\n  return return_list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    let index = 0\n    while (index < string.length) {\n        if (string.charCodeAt(index) === 0) {\n            break\n        }\n        index++\n    }\n    return index\n}\n\n/**\n  * @param {string} str\n  * @return {number}\n  * Return length of given string\n  * Trims any leading and trailing spaces from the given string\n  * Example:\n  * strlen(' abc ') = 3\n  * strlen('abc ') = 3\n  * strlen('abc') = 3\n  */\nconst strlenTrim = (str) => {\n    return str.replace(/^\\s+|\\s+$/g, '')\n}\n\n/**\n  * @param {string} str\n  * @return {number}\n  * Return length of given string\n  * Converts each char of the given string to its ascii code\n  * Example:\n  * strlenAscii('abc') = 3\n  * strlenAscii('abc ') = 3\n  * strlenAscii('abc ') = 3\n  * strlenAscii(' abc') = 3\n  * strlenAscii('  abc') = 3\n  * strlenAscii(' abc ') = 3\n  */\nconst strlenAscii = (str) => {\n    return str.replace(/[^\\x00-\\x7F]/g, (char) => {\n        return char.charCodeAt(0)\n    })\n}\n\n/**\n  * @param {string} str\n  * @return {number}\n  * Return length of given string\n  * Converts each char of the given string to its decimal value\n  * Example:\n  * strlenDecimal('abc') = 3\n  * strlenDecimal('abc ') = 3\n  * strlenDecimal('abc ') = 3\n  * strlenDecimal(' abc') = 3\n  * strlenDecimal('  abc') = 3\n  * strlenDecimal(' abc ') = 3\n  */\nconst strlenDecimal = (str) => {\n    let index = 0\n    while (index < str.length) {\n        if (str.charCodeAt(index) === 0) {\n            break\n        }\n        index++\n    }\n    return index\n}\n\n/**\n  * @param {string} str\n  * @return {string}\n  * Trim spaces from the given string\n  * Example:\n  * trim(' abc ') = 'abc'\n  * trim('abc ') = 'abc'\n  * trim('abc') = 'abc'\n  */\nconst trim = (str) => {\n    return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nmodule.exports = {\n    strlen,\n    strlenTrim,\n    strlenAscii,\n    strlenDecimal,\n    trim\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n    const divisors = [2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    if (n === 1) return [];\n    return [...new Set(n.toString(2).split('').map(x => parseInt(x, 2))).values()].sort((a, b) => a - b);\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst largest_factor = (n) => {\n    if (n === 1) return [];\n    return [...new Set(n.toString(2).split('').map(x => parseInt(x, 2))).keys().reverse().values()].sort((a, b) => b - a);\n};\n\nconst prime_factors = (n) => {\n    const factors = [];\n    const number = largest_factor(n);\n    for (let i = 0; i < number.length; i++) {\n        const current = number[i];\n        if (isPrime(current)) {\n            factors.push(current);\n        }\n    }\n    return factors;\n};\n\nconst isPrime = (n) => {\n    if (n === 1) return false;\n    if (n < 2) return false;\n    if (n === 2) return true;\n    const divisor = 2;\n    while (divisor * divisor <= n) {\n        if (n % divisor === 0) return false;\n        divisor++;\n    }\n    return true;\n};\n\nconst main = () => {\n    const n = input();\n    const factors = prime_factors(n);\n    print(factors);\n    if (n === 1) {\n        print('There are no prime factors.');\n    }\n    else if (factors.length === 0) {\n        print('There are no prime factors.');\n    }\n    else if (factors.length === 1) {\n        print(n +'has one prime factor:'+ factors[0]);\n    }\n    else {\n        print(n +'has'+ factors.length +'prime factors:'+ factors.join(', '));\n    }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const unique = [];\n  const nums = [];\n  for (const number of numbers) {\n    if (unique.indexOf(number) === -1) {\n      unique.push(number);\n      nums.push(number);\n    }\n  }\n  return nums;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.split('').map( (char) => {\n    if (char.toUpperCase() === char) return char.toLowerCase();\n    return char.toUpperCase();\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst replace = (string, old, new) => {\n  return string.split('').map( (char) => {\n    if (char === old) return new;\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return '';\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_char = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return '';\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst replace_char = (string, old, new) => {\n  return string.split('').map( (char) => {\n    if (char === old) return new;\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_all_char = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return '';\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_last_char = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(0, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst replace_last_char = (string, old, new) => {\n  return string.split('').map( (char) => {\n    if (char === old) return new + char;\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_from_front = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_from_back = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(0, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_last_from_front = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(1, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_last_from_back = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(0, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_char_from_front = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_char_from_back = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(0, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_last_char_from_front = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(1, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_last_char_from_back = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(0, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_char_from_front_and_back = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return '';\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_last_char_from_front_and_back = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(0, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_last_from_front_and_back = (string, char) => {\n  return string.split('').map( (char) => {\n    if (char === char) return string.slice(1, -1);\n    return char;\n  });\n};\n\n// For a given string, replace all instances of a specified character with a new character.\nconst remove_char_from_front_and_back"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return acc + string;\n  }, '');\n};\n\n/* Return index of given string in given list\n  >>> indexOf('a', ['a', 'b', 'c'])\n  0\n  >>> indexOf('b', ['a', 'b', 'c'])\n  1\n  >>> indexOf('c', ['a', 'b', 'c'])\n  2\n  >>> indexOf('z', ['a', 'b', 'c'])\n  -1\n  >>> indexOf('d', ['a', 'b', 'c'])\n  -1\n  */\nconst indexOf = (search, haystack) => {\n  return haystack.indexOf(search);\n};\n\n/* Return the smallest index of given string in given list\n  >>> indexOfSmallest('a', ['a', 'b', 'c'])\n  0\n  >>> indexOfSmallest('b', ['a', 'b', 'c'])\n  1\n  >>> indexOfSmallest('c', ['a', 'b', 'c'])\n  2\n  >>> indexOfSmallest('z', ['a', 'b', 'c'])\n  -1\n  >>> indexOfSmallest('d', ['a', 'b', 'c'])\n  -1\n  */\nconst indexOfSmallest = (search, haystack) => {\n  return haystack.indexOf(search);\n};\n\n/* Return the largest index of given string in given list\n  >>> indexOfLargest('a', ['a', 'b', 'c'])\n  2\n  >>> indexOfLargest('b', ['a', 'b', 'c'])\n  1\n  >>> indexOfLargest('c', ['a', 'b', 'c'])\n  0\n  >>> indexOfLargest('z', ['a', 'b', 'c'])\n  -1\n  >>> indexOfLargest('d', ['a', 'b', 'c'])\n  -1\n  */\nconst indexOfLargest = (search, haystack) => {\n  return haystack.indexOf(search);\n};\n\n/* Return the largest index of given string in given list\n  >>> indexOfLargest('a', ['a', 'b', 'c'])\n  2\n  >>> indexOfLargest('b', ['a', 'b', 'c'])\n  1\n  >>> indexOfLargest('c', ['a', 'b', 'c'])\n  0\n  >>> indexOfLargest('z', ['a', 'b', 'c'])\n  -1\n  >>> indexOfLargest('d', ['a', 'b', 'c'])\n  -1\n  */\nconst indexOfLargest = (search, haystack) => {\n  return haystack.indexOf(search);\n};\n\n/* Converts a string to a list of letters\n  >>> stringToList('a')\n  ['a']\n  >>> stringToList('ab')\n  ['a', 'b']\n  >>> stringToList('abc')\n  ['a', 'b', 'c']\n  >>> stringToList('abcd')\n  ['a', 'b', 'c', 'd']\n  */\nconst stringToList = (string) => {\n  return string.split('').map(letter => {\n    return letter.toUpperCase();\n  });\n};\n\n/* Returns a list of strings made by joining given strings together\n  >>> join('a', ['b', 'c'])\n  ['ab', 'ac']\n  >>> join('ab', ['a', 'b'])\n  ['ab', 'ba']\n  >>> join('abc', ['a', 'b', 'c'])\n  ['abc', 'abc']\n  >>> join('abc', ['a', 'b', 'c'])\n  ['abc', 'abc']\n  >>> join('a', ['a', 'b', 'c'])\n  ['aaa', 'aa', 'bb', 'cc']\n  >>> join('a', ['a', 'b', 'c'])\n  ['aaa', 'aa', 'bb', 'cc']\n  >>> join('abc', ['a', 'b', 'c'])\n  ['abc', 'abc']\n  >>> join('abc', ['a', 'b', 'c'])\n  ['abc', 'abc']\n  */\nconst join = (separator, strings) => {\n  return strings.map((string, i) => {\n    if (i == 0) {\n      return string;\n    }\n    return string + separator;\n  });\n};\n\n/* Returns the last element in the list\n  >>> last(['a', 'b', 'c'])\n  'c'\n  >>> last(['a', 'b', 'c', 'd'])\n  'd'\n  */\nconst last = (list) => {\n  return list[list.length - 1];\n};\n\n/* Returns the second largest element in the list\n  >>> secondLargest('a', ['a', 'b', 'c'])\n  'b'\n  >>> secondLargest('a', ['a', 'b', 'c', 'd'])\n  'c'\n  >>> secondLargest('a', ['a', 'b', 'c'])\n  'b'\n  */\nconst secondLargest = (string, list) => {\n  const indexOfSecondLargest = indexOfLargest(string, list);\n  return list[indexOfSecondLargest];\n};\n\n/* Returns the largest element in the list\n  >>> largest('a', ['a', 'b', 'c'])\n  'a'\n  >>> largest('a', ['a', 'b', 'c', 'd'])\n  'c'\n  */\nconst largest = (string, list) => {\n  return list[indexOfLargest(string, list)];\n};\n\n/* Returns the second smallest element in the list\n  >>> secondSmallest('a', ['a', 'b', 'c'])\n  'b'\n  >>> secondSmallest('a', ['a', 'b', 'c', 'd'])\n  'b'\n  >>> secondSmallest('a', ['a', 'b', 'c'])\n  'b'\n  */\nconst secondSmall"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  const result = []\n  strings.forEach(s => {\n    if (s.startsWith(prefix)) {\n      result.push(s)\n    }\n  })\n  return result\n}\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_substring = (strings, substring, start = 0) => {\n  const result = []\n  strings.forEach(s => {\n    if (s.indexOf(substring, start) >= 0) {\n      result.push(s)\n    }\n  })\n  return result\n}\n\n/* Filter an input list of strings only for ones that are not in a given list.\n  >>> filter_by_exclusion([], [])\n  []\n  >>> filter_by_exclusion([], [1])\n  []\n  >>> filter_by_exclusion([1], [1])\n  []\n  >>> filter_by_exclusion([1], [2])\n  [1]\n  */\nconst filter_by_exclusion = (strings, exclusions) => {\n  const result = []\n  exclusions.forEach(e => {\n    strings.forEach(s => {\n      if (s!== e) {\n        result.push(s)\n      }\n    })\n  })\n  return result\n}\n\n/* Filter an input list of strings only for ones that are not in a given set.\n  >>> filter_by_exclusion_set([], set())\n  []\n  >>> filter_by_exclusion_set([], set([1]))\n  []\n  >>> filter_by_exclusion_set([1], set([1]))\n  []\n  >>> filter_by_exclusion_set([1], set([2]))\n  [1]\n  */\nconst filter_by_exclusion_set = (strings, exclusions) => {\n  const result = []\n  exclusions.forEach(e => {\n    strings.forEach(s => {\n      if (s!== e) {\n        result.push(s)\n      }\n    })\n  })\n  return result\n}\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_substring_no_contains([], 'a')\n  []\n  >>> filter_by_substring_no_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring_no_contains(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_substring_no_contains = (strings, substring, start = 0) => {\n  const result = []\n  strings.forEach(s => {\n    if (s.indexOf(substring, start) < 0) {\n      result.push(s)\n    }\n  })\n  return result\n}\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring_contains([], 'a')\n  []\n  >>> filter_by_substring_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring_contains(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_substring_contains = (strings, substring, start = 0) => {\n  const result = []\n  strings.forEach(s => {\n    if (s.indexOf(substring, start) >= 0) {\n      result.push(s)\n    }\n  })\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  const ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\nmodule.exports = get_positive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n    if(n <= 1) {\n        return false;\n    }\n    for(let i = 2; i <= Math.sqrt(n); i++) {\n        if(n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Returns true if an integer has the form n, n+1, or n-1,\n  where n is an odd number, and false otherwise.\n  >>> is_palindrome(13)\n  true\n  >>> is_palindrome(1341)\n  false\n  >>> is_palindrome(1)\n  false\n  >>> is_palindrome(3)\n  true\n  >>> is_palindrome(2)\n  true\n  */\nconst is_palindrome = (n) => {\n    let x = n;\n    if(x < 0) {\n        return false;\n    }\n    while(x > 1) {\n        x = x - (x % 10);\n        if(x === n) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  Returns true if an integer is a power of two, and false otherwise.\n  >>> is_power_of_two(1)\n  false\n  >>> is_power_of_two(2)\n  true\n  >>> is_power_of_two(3)\n  true\n  >>> is_power_of_two(4)\n  true\n  >>> is_power_of_two(5)\n  true\n  >>> is_power_of_two(6)\n  false\n  >>> is_power_of_two(7)\n  false\n  >>> is_power_of_two(8)\n  false\n  */\nconst is_power_of_two = (n) => {\n    return n === Math.floor(n) &&!(n & (n - 1));\n};\n\n/*\n  Returns true if a given string is an integer, and false otherwise.\n  >>> is_integer(\"1\")\n  true\n  >>> is_integer(\"1.0\")\n  false\n  >>> is_integer(\"0\")\n  false\n  >>> is_integer(\"0.0\")\n  false\n  >>> is_integer(\"1.5\")\n  false\n  >>> is_integer(\"1.2.3\")\n  false\n  >>> is_integer(\"1-1\")\n  false\n  >>> is_integer(\"2^2\")\n  true\n  >>> is_integer(\"0+\")\n  false\n  >>> is_integer(\"\")\n  false\n  */\nconst is_integer = (s) => {\n    return is_power_of_two(s) && s.match(/^\\d+$/);\n};\n\n/*\n  Returns the number of bits in a given integer.\n  >>> bit_count(2)\n  1\n  >>> bit_count(3)\n  2\n  >>> bit_count(2147483647)\n  32\n  >>> bit_count(2147483648)\n  32\n  >>> bit_count(0)\n  0\n  >>> bit_count(-2147483648)\n  32\n  */\nconst bit_count = (n) => {\n    let count = 0;\n    while(n > 0) {\n        count++;\n        n = n >>> 1;\n    }\n    return count;\n};\n\n/*\n  Returns the sum of the digits of a given integer.\n  >>> sum_digits(123)\n  3\n  >>> sum_digits(12345)\n  6\n  >>> sum_digits(1234567)\n  9\n  >>> sum_digits(2147483647)\n  28\n  >>> sum_digits(2147483648)\n  28\n  >>> sum_digits(0)\n  0\n  >>> sum_digits(-2147483648)\n  28\n  */\nconst sum_digits = (n) => {\n    let sum = 0;\n    while(n > 0) {\n        sum += n % 10;\n        n = n / 10;\n    }\n    return sum;\n};\n\n/*\n  Returns the sum of the digits of a given number.\n  >>> sum_of_digits(123)\n  3\n  >>> sum_of_digits(12345)\n  6\n  >>> sum_of_digits(1234567)\n  9\n  >>> sum_of_digits(2147483647)\n  28\n  >>> sum_of_digits(2147483648)\n  28\n  >>> sum_of_digits(0)\n  0\n  >>> sum_of_digits(-2147483648)\n  28\n  */\nconst sum_of_digits = (n) => {\n    let sum = 0;\n    while(n > 0) {\n        sum += n % 10;\n        n = n / 10;\n    }\n    return sum;\n};\n\n/*\n  Returns the largest possible sum of the digits of a given number.\n  >>> largest_sum_of_digits(123)\n  9\n  >>> largest_sum_of_digits(12345)\n  9\n  >>> largest_sum_of_digits(1234567)\n  9\n  >>> largest_sum_of_digits(2147483647)\n  28\n  >>> largest_sum_of_digits(2147483648)\n  28\n  >>> largest_sum_of_digits(0)\n  0\n  >>> largest_sum_of_digits(-2147483648)\n  28\n  */\nconst largest_sum_of_digits = (n) => {\n    let sum = 0;\n    while(n > 0) {\n        sum += n % 10;\n        n = n / 10;\n    }\n    return sum;\n};\n\n/*\n  Returns the smallest possible sum of the digits of a given number.\n  >>> smallest_sum_of_digits(123)\n  3\n  >>> smallest"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let result = [0];\n  let maxX = -1;\n  let max = -1;\n  for (let i = 0; i < n; i += 2) {\n    if (max < Math.abs(xs[i])) {\n      max = Math.abs(xs[i]);\n      maxX = i;\n    }\n  }\n  let x = maxX + 1;\n  while (Math.abs(poly(x)) > 1e-9) {\n    result.push(x);\n    x++;\n  }\n  return result;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst eval = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst evaluate = (xs, xs, x) => {\n  return eval(xs, x) - eval(findZero(xs), x);\n}\n\nconst root = (xs, x) => {\n  let result = [];\n  let prev = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let x = xs[i];\n    let y = eval(xs, x);\n    if (prev * y < 0) {\n      result.push(x);\n    }\n    prev = y;\n  }\n  return result;\n}\n\nconst getMin = (xs) => {\n  return Math.min.apply(Math, xs);\n}\n\nconst getMax = (xs) => {\n  return Math.max.apply(Math, xs);\n}\n\nconst getRange = (xs) => {\n  let max = getMax(xs);\n  let min = getMin(xs);\n  return max - min;\n}\n\nconst getMean = (xs) => {\n  return getSum(xs) / xs.length;\n}\n\nconst getSum = (xs) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item;\n  }, 0);\n}\n\nconst getVariance = (xs) => {\n  let mean = getMean(xs);\n  let sum = getSum(xs);\n  return (sum - mean) / sum;\n}\n\nconst getStandardDeviation = (xs) => {\n  return Math.sqrt(getVariance(xs));\n}\n\nconst getCoef = (xs, x) => {\n  return poly(xs, x);\n}\n\nconst getCoefs = (xs, xs) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst getNthCoef = (xs, n) => {\n  return xs.slice(n - 1).reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst getNthCoefs = (xs, n) => {\n  return xs.slice(n - 1).reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst getSumOfSquares = (xs) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * item;\n  }, 0);\n}\n\nconst getSigma = (xs) => {\n  return getSumOfSquares(xs) / xs.length;\n}\n\nconst getR = (xs, x) => {\n  return xs.length / (getSum(xs) / x);\n}\n\nconst getR2 = (xs, x) => {\n  return (1 - xs.length / (getSum(xs) / x)) / (1 - x);\n}\n\nconst getQ = (xs, x) => {\n  return getSum(xs) / getSumOfSquares(xs);\n}\n\nconst getQ2 = (xs, x) => {\n  return getSumOfSquares(xs) / getSum(xs);\n}\n\nconst getX = (xs, x) => {\n  return xs.length * x;\n}\n\nconst getX2 = (xs, x) => {\n  return x * x;\n}\n\nconst getRp = (xs, x) => {\n  return xs.length / (getSum(xs) / x);\n}\n\nconst getRp2 = (xs, x) => {\n  return (1 - xs.length / (getSum(xs) / x)) / (1 - x);\n}\n\nconst getQp = (xs, x) => {\n  return getSum(xs) / getSumOfSquares(xs);\n}\n\nconst getQp2 = (xs, x) => {\n  return getSumOfSquares(xs) / getSum(xs);\n}\n\nconst get"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const sort = (a, b) => {\n    if (a % 3 === 0) {\n      return a;\n    } else if (b % 3 === 0) {\n      return b;\n    } else if (a < b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n  return l.sort(sort);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sort_fifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 5, 6, 3, 4, 8, 9]\n  */\nconst sort_fifth = (l) => {\n  const sort = (a, b) => {\n    if (a % 5 === 0) {\n      return a;\n    } else if (b % 5 === 0) {\n      return b;\n    } else if (a < b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n  return l.sort(sort);\n};\n\nconst main = () => {\n  const a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const l = sort_second(a);\n  console.log(l);\n  const l2 = sort_third(l);\n  console.log(l2);\n  const l3 = sort_fifth(l2);\n  console.log(l3);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n    const a = []\n    for (let i = 0; i < l.length; i++) {\n        const item = l[i]\n        if (a.indexOf(item) === -1) {\n            a.push(item)\n        }\n    }\n    return a\n}\n\n/* Return a function that, given a list, returns the first item from the list\n   that satisfies the condition.\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 0)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 1)\n   '3'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 3)\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 4)\n   '4'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 5)\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 6)\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 7)\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 8)\n   '1'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 9)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 10)\n   '3'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 11)\n   '4'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 12)\n   '1'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 13)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 14)\n   '3'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 15)\n   '4'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 16)\n   '1'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 17)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 18)\n   '3'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 19)\n   '4'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 20)\n   '1'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 21)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 22)\n   '3'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 23)\n   '4'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 24)\n   '1'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 25)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 26)\n   '3'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 27)\n   '4'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 28)\n   '1'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 29)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 30)\n   '3'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 31)\n   '4'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 32)\n   '1'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 33)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 34)\n   '3'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 35)\n   '4'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 36)\n   '1'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 37)\n   '2'\n   >>> find_by_prop(['1', '2', '3', '4'], (n) => n % 2 === 38)\n   "}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  const max = (a, b) => a > b? a : b;\n  return l.reduce((max, element) => max(max(element, l[0]), l[l.length - 1]), l[0]);\n};\n\n/*Return the sum of elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  42\n  >>> sum([-1, 2, 3, 4, 5, 6, 7, 8])\n  -2\n  >>> sum([])\n  0\n  */\nconst sum = (l) => {\n  const sum = (element) => element > 0? element + sum(l.slice(1)) : 0;\n  return l.reduce(sum, 0);\n};\n\n/*Return the product of elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([1, 2, 3, 4, 5, 6, 7, 8])\n  40320\n  >>> product([])\n  1\n  */\nconst product = (l) => {\n  const product = (element) => element > 0? element * product(l.slice(1)) : 1;\n  return l.reduce(product, 1);\n};\n\n/*Return the maximum number in the list.\n  >>> max([1, 2, 3])\n  3\n  >>> max([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> max([])\n  0\n  */\nconst max = (l) => {\n  const max = (element) => element > l[0]? element : l[0];\n  return l.reduce((max, element) => max(max(element, l[0]), l[0]), l[0]);\n};\n\n/*Return the minimum number in the list.\n  >>> min([1, 2, 3])\n  1\n  >>> min([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  >>> min([])\n  0\n  */\nconst min = (l) => {\n  const min = (element) => element < l[0]? element : l[0];\n  return l.reduce((min, element) => min(min(element, l[0]), l[0]), l[0]);\n};\n\n/*Return the mean of elements in the list.\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8])\n  4.25\n  >>> mean([])\n  0\n  */\nconst mean = (l) => {\n  const mean = (element) => element > 0? element / sum(l.slice(1)) : 0;\n  return l.reduce(mean, 0);\n};\n\n/*Return the median of elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  3.5\n  >>> median([])\n  0\n  */\nconst median = (l) => {\n  const median = (element) => {\n    const half = (l) => l.length % 2 == 0? l.length / 2 : (l.length + 1) / 2;\n    return (l.length % 2 == 0? element : (element + l[half() - 1]) / 2);\n  };\n  return l.reduce(median, 0);\n};\n\n/*Return the mode of elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  4\n  >>> mode([])\n  0\n  */\nconst mode = (l) => {\n  const mode = (element) => {\n    const seen = new Set();\n    const set_add = (element) => {\n      if (seen.has(element)) {\n        return;\n      }\n      seen.add(element);\n      return set_add(l.slice(1).reduce((a, b) => a.concat([b]), [element]));\n    };\n    return set_add(l);\n  };\n  return l.reduce(mode, []);\n};\n\n/*Return the standard deviation of elements in the list.\n  >>> std([1, 2, 3])\n  0\n  >>> std([1, 2, 3, 4, 5, 6, 7, 8])\n  1.5811388300841898\n  >>> std([])\n  0\n  */\nconst std = (l) => {\n  const std = (element) => Math.pow(mean(l.slice(1)) - element, 2);\n  return l.reduce(std, 0);\n};\n\n/*Return the list of all values in the list.\n  >>> values([1, 2, 3])\n  [1, 2, 3]\n  >>> values([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> values([])\n  []\n  */\nconst values = (l) => {\n  const values = (element) => [element];\n  return l.reduce(values, []);\n};\n\n/*Return the list of all unique values in the list.\n  >>> unique([1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> unique([])\n  []\n  */\nconst unique = (l) => {\n  const unique = (element) => [element];\n  return l.reduce(unique, []);\n};\n\nexport {\n  add,\n  all,\n  any,\n  average,\n  contains,\n  count,\n  distinct,\n  empty,\n  endsWith,\n  eq,\n  filter,\n  find,\n  flatten,\n  flip,\n  fold,\n  forEach,\n  forEachWithIndex,\n  "}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n    const fizz_count = 0;\n    const buzz_count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 3 === 0 && i % 5 === 0) {\n            fizz_count += 1;\n        }\n        if (i % 3 === 0) {\n            buzz_count += 1;\n        }\n        if (i % 5 === 0) {\n            fizz_count += 1;\n        }\n    }\n    return fizz_count + buzz_count;\n};\n\nmodule.exports = fizz_buzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [odd, even];\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [2, 3, 1]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\nexport default {\n  sort_even,\n  sort_odd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  return groups.join('');\n}\n\n/*\n  converts string to hexadecimal representation.\n  */\nconst toHex = (s) => {\n  return '0x' + s.match(/\\S+/g).map(x => x.charCodeAt(0).toString(16)).join('');\n}\n\n/*\n  converts string to decimal representation.\n  */\nconst toDec = (s) => {\n  return parseInt(s, 10);\n}\n\n/*\n  checks if string contains decimal number.\n  */\nconst isDec = (s) => {\n  return /\\d/.test(s);\n}\n\n/*\n  checks if string contains hexadecimal number.\n  */\nconst isHex = (s) => {\n  return /0x/.test(s);\n}\n\n/*\n  checks if string contains only upper case letters.\n  */\nconst isUpperCase = (s) => {\n  return s.replace(/[^A-Z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only lower case letters.\n  */\nconst isLowerCase = (s) => {\n  return s.replace(/[^a-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only numbers.\n  */\nconst isNum = (s) => {\n  return s.replace(/[^0-9]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only lower case letters.\n  */\nconst isAlpha = (s) => {\n  return s.replace(/[^a-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isSpecial = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNum = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecial = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialAlpha = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialNum = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialAlphaNum = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialAlphaNumSpecial = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialAlphaNumSpecial = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialAlphaNumSpecialNum = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialAlphaNumSpecialAlphaNum = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialAlphaNumSpecialAlphaNum = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n\n/*\n  checks if string contains only special characters.\n  */\nconst isAlphaNumSpecialAlphaNumSpecialAlphaNum = (s) => {\n  return s.replace(/[^0-9A-Za-z]/g, '').length == 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  const prime = [1, 2];\n\n  const isPrime = (n) => {\n    return prime.find((p) => n % p === 0);\n  };\n\n  const fib = (n) => {\n    if (isPrime(n)) {\n      return n;\n    } else {\n      return fib(n * 2) + fib(n * 2 - 1);\n    }\n  };\n\n  return fib(n);\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst fib = (n) => {\n  if (n <= 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\nmodule.exports = prime_fib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  const result = [...l.filter((x) => x % 3 === 0)];\n  return result.length === 3;\n};\n\n/*\n  triples_sum_to_one takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triples_sum_to_one([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_one([1, 3, -2, 1])\n  false\n  >>> triples_sum_to_one([1, 2, 3, 7])\n  true\n  >>> triples_sum_to_one([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_one([1])\n  false\n  */\nconst triples_sum_to_one = (l) => {\n  const result = [...l.filter((x) => x % 3 === 1)];\n  return result.length === 3;\n};\n\n/*\n  triples_sum_to_two takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to two, and false otherwise.\n\n  >>> triples_sum_to_two([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_two([1, 3, -2, 1])\n  false\n  >>> triples_sum_to_two([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_two([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_two([1])\n  false\n  */\nconst triples_sum_to_two = (l) => {\n  const result = [...l.filter((x) => x % 3 === 2)];\n  return result.length === 3;\n};\n\n/*\n  triples_sum_to_three takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to three, and false otherwise.\n\n  >>> triples_sum_to_three([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_three([1, 3, -2, 1])\n  false\n  >>> triples_sum_to_three([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_three([2, 4, -5, 3, 9, 7])\n  false\n  >>> triples_sum_to_three([1])\n  false\n  */\nconst triples_sum_to_three = (l) => {\n  const result = [...l.filter((x) => x % 3 === 3)];\n  return result.length === 3;\n};\n\nexport {\n  triples_sum_to_zero,\n  triples_sum_to_one,\n  triples_sum_to_two,\n  triples_sum_to_three\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  const road = [\n    [-1, 0, 1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0],\n    [0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1],\n    [1, 0, -1, 0, 1, 0, -1, 0,"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  const result = [...l];\n  for (let i = 0; i < result.length - 1; i++) {\n    result[i] = result[i] + 1;\n  }\n  return result;\n};\n\n/**\n  * @description\n  * Return the index of the first element in a list which matches a predicate.\n  * @param {List} list - the list to search\n  * @param {function} predicate - predicate to test\n  * @returns {number} index - index of first element matching predicate\n  */\nconst find = (list, predicate) => {\n  for (let i = 0; i < list.length; i++) {\n    if (predicate(list[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * @description\n  * Return the index of the first element in a list which does not match a predicate.\n  * @param {List} list - the list to search\n  * @param {function} predicate - predicate to test\n  * @returns {number} index - index of first element not matching predicate\n  */\nconst find_not = (list, predicate) => {\n  for (let i = 0; i < list.length; i++) {\n    if (!predicate(list[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * @description\n  * Return the index of the last element in a list which matches a predicate.\n  * @param {List} list - the list to search\n  * @param {function} predicate - predicate to test\n  * @returns {number} index - index of last element matching predicate\n  */\nconst find_last = (list, predicate) => {\n  for (let i = list.length - 1; i >= 0; i--) {\n    if (predicate(list[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * @description\n  * Return the index of the last element in a list which does not match a predicate.\n  * @param {List} list - the list to search\n  * @param {function} predicate - predicate to test\n  * @returns {number} index - index of last element not matching predicate\n  */\nconst find_last_not = (list, predicate) => {\n  for (let i = list.length - 1; i >= 0; i--) {\n    if (!predicate(list[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * @description\n  * Return a list of tuples of the indices of the elements that match the predicate.\n  * @param {List} list - the list to search\n  * @param {function} predicate - predicate to test\n  * @returns {List} list - list of tuples of indices of elements matching the predicate\n  */\nconst find_all = (list, predicate) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (predicate(list[i])) {\n      result.push([i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * @description\n  * Return a list of tuples of the indices of the elements that do not match the predicate.\n  * @param {List} list - the list to search\n  * @param {function} predicate - predicate to test\n  * @returns {List} list - list of tuples of indices of elements not matching the predicate\n  */\nconst find_all_not = (list, predicate) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (!predicate(list[i])) {\n      result.push([i]);\n    }\n  }\n  return result;\n};\n\n/**\n  * @description\n  * Return a list of the first element of the elements that match the predicate.\n  * @param {List} list - the list to search\n  * @param {function} predicate - predicate to test\n  * @returns {List} list - list of tuples of indices of elements matching the predicate\n  */\nconst find_first = (list, predicate) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (predicate(list[i])) {\n      result.push([i]);\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n  * @description\n  * Return a list of the first element of the elements that do not match the predicate.\n  * @param {List} list - the list to search\n  * @param {function} predicate - predicate to test\n  * @returns {List} list - list of tuples of indices of elements not matching the predicate\n  */\nconst find_first_not = (list, predicate) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (!predicate(list[i])) {\n      result.push([i]);\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  incr_list,\n  find,\n  find_not,\n  find_last,\n  find_last_not,\n  find_all,\n  find_all_not,\n  find_first,\n  find_first_not\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n    const result = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        const a = l[i];\n        const b = l[i + 1];\n        const sum = a + b;\n        if (sum === 0) {\n            result.push([a, b]);\n        } else if (sum === a) {\n            result.push([a, b]);\n        } else if (sum === b) {\n            result.push([a, b]);\n        }\n    }\n    return result.length > 1;\n};\n\n/*\n  binary_search takes a sorted array as an input, and finds the element\n  in the array that matches the input.\n  >>> binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5\n  >>> binary_search([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  0\n  >>> binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, -1])\n  0\n  >>> binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5\n  >>> binary_search([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  8\n  >>> binary_search([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  0\n  >>> binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n  0\n  */\nconst binary_search = (arr) => {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (arr[mid] === arr[mid + 1]) {\n            return mid;\n        }\n        if (arr[mid] < arr[mid + 1]) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n};\n\nmodule.exports = {\n    pairs_sum_to_zero,\n    binary_search\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  return (x % base)? change_base(Math.floor(x / base), base) + (x % base).toString(base) : x.toString(base);\n}\n\n/**\n  * Count the number of trailing zeroes in the number.\n  * For example, count_trailing_zeroes(3) = 2,\n  * count_trailing_zeroes(0) = 0,\n  * count_trailing_zeroes(10) = 0,\n  * count_trailing_zeroes(-3) = 0.\n  * @param {Number} x\n  * @returns {Number}\n  * @example\n  * count_trailing_zeroes(3) = 2\n  * count_trailing_zeroes(0) = 0\n  * count_trailing_zeroes(10) = 0\n  * count_trailing_zeroes(-3) = 0\n  */\nconst count_trailing_zeroes = x => {\n  let count = 0;\n  while (x % 10 === 0) {\n    x = x / 10;\n    count++;\n  }\n  return count;\n}\n\n/**\n  * Given a non-negative number, return its last digits as an array of digits.\n  * For example, last_digit_array(23) = [2, 3].\n  * @param {Number} x\n  * @returns {Array}\n  * @example\n  * last_digit_array(23) = [2, 3]\n  */\nconst last_digit_array = x => {\n  return x.toString().split('').reverse();\n}\n\n/**\n  * Given two non-negative numbers, return their sum as a number.\n  * For example, sum(3, 7) = 14,\n  * sum(3, 3) = 9,\n  * sum(2, 10) = 12.\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * sum(3, 7) = 14\n  * sum(3, 3) = 9\n  * sum(2, 10) = 12\n  */\nconst sum = (x, y) => {\n  return x + y;\n}\n\n/**\n  * Given two non-negative numbers, return their product as a number.\n  * For example, product(3, 7) = 21,\n  * product(3, 3) = 9,\n  * product(2, 10) = 20.\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * product(3, 7) = 21\n  * product(3, 3) = 9\n  * product(2, 10) = 20\n  */\nconst product = (x, y) => {\n  return x * y;\n}\n\n/**\n  * Given two non-negative numbers, return their difference as a number.\n  * For example, difference(3, 7) = 4,\n  * difference(3, 3) = 6,\n  * difference(2, 10) = 8.\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * difference(3, 7) = 4\n  * difference(3, 3) = 6\n  * difference(2, 10) = 8\n  */\nconst difference = (x, y) => {\n  return x - y;\n}\n\n/**\n  * Given two non-negative numbers, return their quotient as a number.\n  * For example, quotient(3, 7) = 1/2,\n  * quotient(3, 3) = 1,\n  * quotient(2, 10) = 2.\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  * @example\n  * quotient(3, 7) = 1/2\n  * quotient(3, 3) = 1\n  * quotient(2, 10) = 2\n  */\nconst quotient = (x, y) => {\n  return x / y;\n}\n\n/**\n  * Given a non-negative number, return its nth term as a number.\n  * For example, nth_term(23, 2) = 11,\n  * nth_term(23, 3) = 10,\n  * nth_term(23, 4) = 9.\n  * @param {Number} x\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * nth_term(23, 2) = 11\n  * nth_term(23, 3) = 10\n  * nth_term(23, 4) = 9\n  */\nconst nth_term = (x, n) => {\n  return x.toString().split('e').slice(-1).shift().slice(0, -n);\n}\n\nexport default {\n  change_base,\n  count_trailing_zeroes,\n  last_digit_array,\n  sum,\n  product,\n  difference,\n  quotient,\n  nth_term\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return Math.pow(h, 2) * Math.pow(1 - (Math.pow(1 - (1 / a), 2)), 2) / 4;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(3, 5)\n  2.0\n  */\nconst triangle_area_1 = (a, h) => {\n  return a * (Math.pow(h, 2) - 1) / 2;\n};\n\nconst triangle_area_2 = (a, h) => {\n  return (Math.pow(h, 2) - 1) * a;\n};\n\nconst triangle_area_3 = (a, h) => {\n  return Math.pow(h, 2) * (1 - Math.pow(1 - (1 / a), 2)) / 2;\n};\n\nconst triangle_area_4 = (a, h) => {\n  return (1 - Math.pow(1 - (1 / a), 2)) * a;\n};\n\nexport {\n  triangle_area,\n  triangle_area_1,\n  triangle_area_2,\n  triangle_area_3,\n  triangle_area_4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let prev = 0;\n  let current = 1;\n  let next = 0;\n\n  for (let i = 0; i <= n - 1; i++) {\n    next = current + prev;\n    prev = current;\n    current = next;\n  }\n  return current;\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let a = l.slice(0, mid);\n  let b = l.slice(mid);\n  if (a.length === 0) {\n    return b[0];\n  }\n  if (b.length === 0) {\n    return a[0];\n  }\n  let p1 = a.reduce((a, b) => a + b);\n  let p2 = b.reduce((a, b) => a + b);\n  return (p1 - p2) / 2;\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let index = text.length - 1;\n  for (let i = 0; i < index; i++) {\n    if (text[i]!== text[index - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = is_palindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let result = 0\n  while (n > 0) {\n    result = (result * p) % n\n    n = n / p\n  }\n  return result\n}\n\nmodule.exports = modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)).join(\"\");\n}\n\nconst encode_shift_to_string = (s) => encodeShift(s);\nconst decode_shift_to_string = (s) => decodeShift(s);\n\nexport { encode_shift_to_string, decode_shift_to_string };\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  const text = text.toUpperCase();\n  return text.replace(/[AEIOU]/g, '');\n}\n\n/*\n  remove_diacritics is a function that takes string and returns string without diacritics.\n  >>> remove_diacritics('Zoœśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zoœśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zoœśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośzła')\n  'zżooszzl'\n  >>> remove_diacritics('Zośzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośzła')\n  'zżooszzl'\n  >>> remove_diacritics('zżośzła')\n  'zżooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('Zośśzła')\n  'Zooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżoooszzl'\n  >>> remove_diacritics('zżośśzła')\n  'zżo"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  const i = l.length - 1\n  const len = l.length\n\n  let j = 0\n\n  while (j <= i) {\n    if (l[j] < t) {\n      return false\n    }\n\n    j++\n  }\n\n  return true\n}\n\n/*\n  Find the element in the list l that is closest to x.\n  >>> find_closest(1, [1, 2, 4, 10])\n  1\n  >>> find_closest(1, [1, 2, 4, 10], 1)\n  2\n  >>> find_closest(1, [1, 2, 4, 10], 3)\n  4\n  >>> find_closest(1, [1, 2, 4, 10], 100)\n  10\n  */\nconst find_closest = (x, l, n) => {\n  const i = l.length - 1\n  const len = l.length\n\n  let j = 0\n\n  while (j <= i) {\n    if (Math.abs(x - l[j]) < Math.abs(x - l[j + 1])) {\n      return l[j]\n    }\n\n    j++\n  }\n\n  if (Math.abs(x - l[i]) < Math.abs(x - l[i - 1])) {\n    return l[i]\n  }\n\n  return n\n}\n\n/*\n  Find the position in the list l that is closest to x.\n  >>> find_closest_position(1, [1, 2, 4, 10])\n  0\n  >>> find_closest_position(1, [1, 2, 4, 10], 1)\n  1\n  >>> find_closest_position(1, [1, 2, 4, 10], 3)\n  1\n  >>> find_closest_position(1, [1, 2, 4, 10], 100)\n  3\n  */\nconst find_closest_position = (x, l) => {\n  const i = l.length - 1\n  const len = l.length\n\n  let j = 0\n\n  while (j <= i) {\n    if (Math.abs(x - l[j]) < Math.abs(x - l[j + 1])) {\n      return j\n    }\n\n    j++\n  }\n\n  return i\n}\n\n/*\n  Find the largest number in the list l.\n  >>> find_max(1, [1, 2, 4, 10])\n  10\n  >>> find_max(1, [1, 2, 4, 10], 1)\n  4\n  >>> find_max(1, [1, 2, 4, 10], 3)\n  4\n  >>> find_max(1, [1, 2, 4, 10], 100)\n  4\n  */\nconst find_max = (x, l) => {\n  let m = l[0]\n\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > m) {\n      m = l[i]\n    }\n  }\n\n  return m\n}\n\n/*\n  Find the smallest number in the list l.\n  >>> find_min(1, [1, 2, 4, 10])\n  1\n  >>> find_min(1, [1, 2, 4, 10], 1)\n  1\n  >>> find_min(1, [1, 2, 4, 10], 3)\n  1\n  >>> find_min(1, [1, 2, 4, 10], 100)\n  1\n  */\nconst find_min = (x, l) => {\n  let m = l[0]\n\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < m) {\n      m = l[i]\n    }\n  }\n\n  return m\n}\n\n/*\n  Find the largest number in the list l that is greater than x.\n  >>> find_max_greater(1, [1, 2, 4, 10])\n  2\n  >>> find_max_greater(1, [1, 2, 4, 10], 1)\n  2\n  >>> find_max_greater(1, [1, 2, 4, 10], 3)\n  4\n  >>> find_max_greater(1, [1, 2, 4, 10], 100)\n  4\n  */\nconst find_max_greater = (x, l) => {\n  let m = l[0]\n\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > m && l[i] > x) {\n      m = l[i]\n    }\n  }\n\n  return m\n}\n\n/*\n  Find the largest number in the list l that is less than x.\n  >>> find_max_less(1, [1, 2, 4, 10])\n  4\n  >>> find_max_less(1, [1, 2, 4, 10], 1)\n  4\n  >>> find_max_less(1, [1, 2, 4, 10], 3)\n  4\n  >>> find_max_less(1, [1, 2, 4, 10], 100)\n  4\n  */\nconst find_max_less = (x, l) => {\n  let m = l[0]\n\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < m && l[i] < x) {\n      m = l[i]\n    }\n  }\n\n  return m\n}\n\n/*\n  Find the position in the list l that is the smallest that is greater than x.\n  >>> find_min_greater_position(1, [1, 2, 4, 10])\n  0\n  >>> find_min_greater_position(1, [1, 2, 4, 10], 1)\n  0\n  >>> find_min_greater_position(1, [1, 2, 4, 10], 3)\n  0\n  >>> find_min_greater_position(1, [1, 2, 4, 10], 100)\n  1\n  */\nconst find_min_greater_position ="}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  let sum = 0\n  for (let i = x; i <= y; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Add a number x to the digits of y.\n  >>> addDigits(10, 3)\n  13\n  >>> addDigits(10, 2)\n  12\n  >>> addDigits(10, 1)\n  11\n  >>> addDigits(10, 0)\n  10\n  >>> addDigits(2, 10)\n  12\n  >>> addDigits(10, 10)\n  20\n  >>> addDigits(10, 11)\n  21\n  >>> addDigits(10, 12)\n  22\n  >>> addDigits(10, 13)\n  23\n  >>> addDigits(10, 14)\n  24\n  >>> addDigits(10, 15)\n  25\n  >>> addDigits(10, 16)\n  26\n  >>> addDigits(10, 17)\n  27\n  >>> addDigits(10, 18)\n  28\n  >>> addDigits(10, 19)\n  29\n  >>> addDigits(10, 20)\n  30\n  >>> addDigits(10, 21)\n  31\n  >>> addDigits(10, 22)\n  32\n  >>> addDigits(10, 23)\n  33\n  >>> addDigits(10, 24)\n  34\n  >>> addDigits(10, 25)\n  35\n  >>> addDigits(10, 26)\n  36\n  >>> addDigits(10, 27)\n  37\n  >>> addDigits(10, 28)\n  38\n  >>> addDigits(10, 29)\n  39\n  >>> addDigits(10, 30)\n  40\n  >>> addDigits(10, 31)\n  41\n  >>> addDigits(10, 32)\n  42\n  >>> addDigits(10, 33)\n  43\n  >>> addDigits(10, 34)\n  44\n  >>> addDigits(10, 35)\n  45\n  >>> addDigits(10, 36)\n  46\n  >>> addDigits(10, 37)\n  47\n  >>> addDigits(10, 38)\n  48\n  >>> addDigits(10, 39)\n  49\n  >>> addDigits(10, 40)\n  50\n  >>> addDigits(10, 41)\n  51\n  >>> addDigits(10, 42)\n  52\n  >>> addDigits(10, 43)\n  53\n  >>> addDigits(10, 44)\n  54\n  >>> addDigits(10, 45)\n  55\n  >>> addDigits(10, 46)\n  56\n  >>> addDigits(10, 47)\n  57\n  >>> addDigits(10, 48)\n  58\n  >>> addDigits(10, 49)\n  59\n  >>> addDigits(10, 50)\n  60\n  >>> addDigits(10, 51)\n  61\n  >>> addDigits(10, 52)\n  62\n  >>> addDigits(10, 53)\n  63\n  >>> addDigits(10, 54)\n  64\n  >>> addDigits(10, 55)\n  65\n  >>> addDigits(10, 56)\n  66\n  >>> addDigits(10, 57)\n  67\n  >>> addDigits(10, 58)\n  68\n  >>> addDigits(10, 59)\n  69\n  >>> addDigits(10, 60)\n  70\n  >>> addDigits(10, 61)\n  71\n  >>> addDigits(10, 62)\n  72\n  >>> addDigits(10, 63)\n  73\n  >>> addDigits(10, 64)\n  74\n  >>> addDigits(10, 65)\n  75\n  >>> addDigits(10, 66)\n  76\n  >>> addDigits(10, 67)\n  77\n  >>> addDigits(10, 68)\n  78\n  >>> addDigits(10, 69)\n  79\n  >>> addDigits(10, 70)\n  80\n  >>> addDigits(10, 71)\n  81\n  >>> addDigits(10, 72)\n  82\n  >>> addDigits(10, 73)\n  83\n  >>> addDigits(10, 74)\n  84\n  >>> addDigits(10, 75)\n  85\n  >>> addDigits(10, 76)\n  86\n  >>> addDigits(10, 77)\n  87\n  >>> addDigits(10, 78)\n  88\n  >>> addDigits(10, 79)\n  89\n  >>> addDigits(10, 80)\n  90\n  >>> addDigits(10, 81)\n  91\n  >>> addDigits(10, 82)\n  92\n  >>> addDigits(10, 83)\n  93\n  >>> addDigits(10, 84)\n  94\n  >>> addDigits(10, 85)\n  95\n  >>> addDigits(10, 86)\n  96\n  >>> addDigits(10, 87)\n  97\n  >>> addDigits(10, 88)\n  98\n  >>> addDigits(10, 89)\n  99\n  >>> addDigits(10, 90)\n  100\n  */\nconst addDigits = (x, y) => {\n  let sum = 0\n  for (let i = x; i <= y; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Add the digits of two numbers.\n  >>> addDigits(10, 3)\n  13\n  >>> addDigits(10, 2)\n  12\n  >>> addDigits(10, 1)\n  11\n  >>> addDigits(10, 0)\n  10\n  >>> addDigits(2, 10)\n  12\n  >>> addDigits(10, 10)\n  20\n  >>> addDigits(10, 11)\n  21\n  >>> addDigits(10, 12)\n  22\n  >>> addDigits(10, 13)\n  23\n  >>> addDigits(10, 14)\n  24\n  >>> addDigits(10, 15)\n  25\n  >>> addDigits(10, 16)\n  26\n  >>> add"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  const str0 = s0.split('')\n  const str1 = s1.split('')\n  const len0 = str0.length\n  const len1 = str1.length\n\n  if (len0!== len1) {\n    return false\n  }\n\n  for (let i = 0; i < len0; i++) {\n    if (str0[i]!== str1[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n-1) + fib(n-2);\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let brackets_map = {'<': '>', '<>': '>', '<<': '>', '<<<': '>', '<=>': '>=', '<>=': '>=', '<=>': '>=', '<>': '>'};\n  let brackets_array = brackets.split(' ');\n  let result = true;\n  for (let i = 0; i < brackets_array.length; i += 1) {\n    if (brackets_array[i].indexOf('<') > -1 && brackets_array[i].indexOf('>') > -1) {\n      if (brackets_map[brackets_array[i].slice(0, 1)] === brackets_array[i].slice(1, brackets_array[i].length - 1)) {\n        brackets_array[i] = brackets_array[i].slice(1, brackets_array[i].length - 1);\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(correct_bracketing(\"<>\"));\nconsole.log(correct_bracketing(\"<<><>\"));\nconsole.log(correct_bracketing(\"<>>\"));\nconsole.log(correct_bracketing(\"<>\"));\nconsole.log(correct_bracketing(\"<><\"));\nconsole.log(correct_bracketing(\"<>>\"));\nconsole.log(correct_bracketing(\"<>\"));\nconsole.log(correct_bracketing(\"<><\"));\nconsole.log(correct_bracketing(\"<><>\"));\nconsole.log(correct_bracketing(\"<><>\"));\nconsole.log(correct_bracketing(\"<><><>\"));\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let index = 0;\n  while (index < l.length) {\n    const v = l[index];\n    if (v >= l[index + 1]) {\n      return true;\n    }\n    index++;\n  }\n  return false;\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const i = 0;\n  const j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  const sqrt_n = Math.sqrt(n);\n  const r = n;\n  let p;\n  do {\n    p = r - 1;\n    if (n % p === 0) {\n      return largest_prime_factor(p);\n    }\n  } while (p < sqrt_n);\n  return n;\n};\n\nconsole.log(largest_prime_factor(2048));\nconsole.log(largest_prime_factor(13195));\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sum_to_n(30));\nconsole.log(sum_to_n(100));\nconsole.log(sum_to_n(5));\nconsole.log(sum_to_n(10));\nconsole.log(sum_to_n(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = [brackets];\n  while (stack.length > 0) {\n    const element = stack.pop();\n    if (element === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    } else if (element === '(') {\n      stack.push(element);\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Return the next permutation of brackets.\n  Brackets are separated by spaces.\n\n  >>> next_permutation(\"()\")\n  ('(', ')')\n  >>> next_permutation(\"() \")\n  ('(', ')')\n  >>> next_permutation(\"()(\")\n  ('(', ')')\n  >>> next_permutation(\"(())\")\n  ('(', ')')\n  >>> next_permutation(\"(()()\")\n  ('(', ')')\n  >>> next_permutation(\"(()())\")\n  ('(', ')')\n  >>> next_permutation(\"(())()\")\n  ('(', ')')\n  >>> next_permutation(\"(()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()\")\n  ('(', ')')\n  >>> next_permutation(\"(())\")\n  ('(', ')')\n  >>> next_permutation(\"(())()\")\n  ('(', ')')\n  >>> next_permutation(\"(())())\")\n  ('(', ')')\n  >>> next_permutation(\"(())()())\")\n  ('(', ')')\n  >>> next_permutation(\"()\")\n  ('(', ')')\n  >>> next_permutation(\"(())\")\n  ('(', ')')\n  >>> next_permutation(\"(())()\")\n  ('(', ')')\n  >>> next_permutation(\"(())())\")\n  ('(', ')')\n  >>> next_permutation(\"(())()())\")\n  ('(', ')')\n  >>> next_permutation(\"())\")\n  ('(', ')')\n  >>> next_permutation(\"(())()\")\n  ('(', ')')\n  >>> next_permutation(\"(())()())\")\n  ('(', ')')\n  >>> next_permutation(\"(())()())\")\n  ('(', ')')\n  >>> next_permutation(\"()(())\")\n  ('(', ')')\n  >>> next_permutation(\"()(())()\")\n  ('(', ')')\n  >>> next_permutation(\"()()()(\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next_permutation(\"()()()()())\")\n  ('(', ')')\n  >>> next"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * (i));\n  }\n  return result;\n};\n\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  while (a > 0) {\n    const tmp = b;\n    b = a;\n    a = tmp;\n  }\n  return b;\n};\n\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\nconst power = (n, x) => {\n  let result = 1;\n  while (n > 0) {\n    if (n & 1) {\n      result = result * x;\n    }\n    n >>= 1;\n    x = x * x;\n  }\n  return result;\n};\n\nconst prime = (x) => {\n  let count = 1;\n  for (let i = 2; i < x; i++) {\n    if (x % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst factorial = (x) => {\n  return x * (x + 1) / 2;\n};\n\nconst generate_primes = (from, to) => {\n  let i = 1;\n  let result = [];\n  for (; i < to; i++) {\n    if (prime(i) === true) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generate_factorials = (from, to) => {\n  let i = 1;\n  let result = [];\n  for (; i < to; i++) {\n    result.push(factorial(i));\n  }\n  return result;\n};\n\nconst generate_nth_prime = (n) => {\n  let from = 1;\n  let to = n;\n  let result = generate_primes(from, to);\n  while (result.length < n) {\n    from++;\n    to++;\n    result = result.concat(generate_primes(from, to));\n  }\n  return result[n - 1];\n};\n\nconst generate_nth_factorial = (n) => {\n  let from = 1;\n  let to = n;\n  let result = generate_factorials(from, to);\n  while (result.length < n) {\n    from++;\n    to++;\n    result = result.concat(generate_factorials(from, to));\n  }\n  return result[n - 1];\n};\n\nconst generate_nth_prime_factorial = (n) => {\n  return generate_nth_prime(n) * generate_nth_factorial(n);\n};\n\nconst generate_all_primes_factorials = () => {\n  let result = [];\n  let n = 1;\n  while (n < 10000000) {\n    result.push(generate_nth_prime_factorial(n));\n    n++;\n  }\n  return result;\n};\n\nconst generate_all_primes = () => {\n  let result = [];\n  let n = 1;\n  while (n < 10000000) {\n    result.push(generate_nth_prime(n));\n    n++;\n  }\n  return result;\n};\n\nconst generate_all_prime_factorials = () => {\n  let result = [];\n  let n = 1;\n  while (n < 10000000) {\n    result.push(generate_nth_prime_factorial(n));\n    n++;\n  }\n  return result;\n};\n\nmodule.exports = {\n  generate_all_primes,\n  generate_all_prime_factorials,\n  generate_primes,\n  generate_factorials,\n  generate_nth_prime,\n  generate_nth_factorial,\n  generate_nth_prime_factorial,\n  generate_all_primes_factorials,\n  derivative,\n  lcm,\n  power,\n  prime,\n  gcd,\n  factorial,\n  generate_all_primes_factorials,\n  generate_all_primes,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  let prev = 1\n  let next = 2\n  let result = prev\n  for (let i = 3; i <= n; i++) {\n    result = prev + next\n    prev = next\n    next = result\n  }\n  return result\n}\n\nconst test = () => {\n  const n = 8\n  console.log(fibfib(n))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let vowel_count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[aeiou]/)) {\n      vowel_count++;\n    }\n  }\n  return vowel_count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const len = x.length;\n  const mod = len % shift;\n  const s = shift % len;\n  const arr = x.split('');\n  const rev = arr.reverse();\n  const rev_arr = rev.join('');\n  if (mod === 0) {\n    return rev_arr;\n  } else {\n    return rev_arr.slice(0, s) + rev_arr.slice(s + mod);\n  }\n};\n\nconsole.log(circular_shift(12, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  const sum = 0;\n  for(let i = 0; i < s.length; i++) {\n    sum += (s.charCodeAt(i) - 64);\n  }\n  return sum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n    let count = 0\n    let index = 0\n    let total_apples = 0\n    let total_oranges = 0\n    let total_mango = 0\n    let total_apples_in_basket = 0\n    let total_oranges_in_basket = 0\n    let total_mango_in_basket = 0\n    let index_of_fruit = 0\n    while (index < s.length) {\n        if (s.charAt(index) == 'a') {\n            count += 1\n            total_apples += 1\n            total_apples_in_basket += 1\n        }\n        if (s.charAt(index) == 'o') {\n            count += 1\n            total_oranges += 1\n            total_oranges_in_basket += 1\n        }\n        if (s.charAt(index) =='m') {\n            count += 1\n            total_mango += 1\n            total_mango_in_basket += 1\n        }\n        index++\n    }\n    return n - count - total_apples - total_oranges - total_mango - total_apples_in_basket - total_oranges_in_basket - total_mango_in_basket\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the apples and oranges and the total number of mango fruits in the basket return the number of\n  the apples and oranges in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution2 = (s, n) => {\n    let count = 0\n    let index = 0\n    let total_apples = 0\n    let total_oranges = 0\n    let total_mango = 0\n    let total_apples_in_basket = 0\n    let total_oranges_in_basket = 0\n    let total_mango_in_basket = 0\n    while (index < s.length) {\n        if (s.charAt(index) == 'a') {\n            count += 1\n            total_apples += 1\n            total_apples_in_basket += 1\n        }\n        if (s.charAt(index) == 'o') {\n            count += 1\n            total_oranges += 1\n            total_oranges_in_basket += 1\n        }\n        if (s.charAt(index) =='m') {\n            count += 1\n            total_mango += 1\n            total_mango_in_basket += 1\n        }\n        index++\n    }\n    return n - count - total_apples - total_oranges - total_mango - total_apples_in_basket - total_oranges_in_basket - total_mango_in_basket\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the apples and oranges and the number of the mango fruits in the basket return the number of\n  the apples and oranges in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution3 = (s, n) => {\n    let count = 0\n    let index = 0\n    let total_apples = 0\n    let total_oranges = 0\n    let total_mango = 0\n    let total_apples_in_basket = 0\n    let total_oranges_in_basket = 0\n    let total_mango_in_basket = 0\n    while (index < s.length) {\n        if (s.charAt(index) == 'a') {\n            count += 1\n            total_apples += 1\n            total_apples_in_basket += 1\n        }\n        if (s.charAt(index) == 'o') {\n            count += 1\n            total_oranges += 1\n            total_oranges_in_basket += 1\n        }\n        if (s.charAt(index) =='m') {\n            count += 1\n            total_mango += 1\n            total_mango_in_basket += 1\n        }\n        index++\n    }\n    return n - count - total_apples - total_oranges - total_mango - total_apples_in_basket - total_oranges_in_basket - total_mango_in_basket\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the apples and oranges and the total number of the mango fruits in the basket return the number\n  of the apples and oranges"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const n = arr.length\n  if (n === 0) return []\n  const min = Math.min(...arr)\n  let left = 0\n  let right = n - 1\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2)\n    if (arr[mid] === min) {\n      return [min, mid]\n    } else if (arr[mid] < min) {\n      left = mid + 1\n    } else {\n      right = mid - 1\n    }\n  }\n  return [min, left]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (!lst ||!lst.length) {\n    return -1;\n  }\n  let sorted = lst.sort((a, b) => a - b);\n  let i = 0, max = sorted[i], cur = max;\n  for (i; i < sorted.length; i++) {\n    if (cur < sorted[i]) {\n      cur = sorted[i];\n      max = cur;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of non-negative integers, every element of the array\n  appears at most once.\n  Return the largest value that has a frequency larger than its own value.\n  Note that the number zero does not have a frequency, and the frequency\n  of the number one is one.\n  Examples:\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n*/\nconst search2 = (lst) => {\n  if (!lst ||!lst.length) {\n    return -1;\n  }\n  let max = 0, maxF = 0, i = 0, curF = 0;\n  for (i; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxF = curF;\n    }\n    curF += lst[i];\n  }\n  return maxF;\n};\n\n/*\n  Given an array of non-negative integers, every element of the array\n  appears at most once.\n  Return the largest value that has a frequency larger than its own value.\n  Note that the number zero does not have a frequency, and the frequency\n  of the number one is one.\n  Examples:\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n*/\nconst search3 = (lst) => {\n  if (!lst ||!lst.length) {\n    return -1;\n  }\n  let max = 0, maxF = 0, i = 0, curF = 0;\n  for (i; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxF = curF;\n    }\n    curF += (lst[i] - lst[i - 1]);\n  }\n  return maxF;\n};\n\n/*\n  Given an array of non-negative integers, every element of the array\n  appears at most once.\n  Return the largest value that has a frequency larger than its own value.\n  Note that the number zero does not have a frequency, and the frequency\n  of the number one is one.\n  Examples:\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n*/\nconst search4 = (lst) => {\n  if (!lst ||!lst.length) {\n    return -1;\n  }\n  let max = 0, maxF = 0, i = 0, curF = 0;\n  for (i; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxF = curF;\n    }\n    curF += lst[i];\n  }\n  return maxF;\n};\n\n/*\n  Given an array of non-negative integers, every element of the array\n  appears at most once.\n  Return the largest value that has a frequency larger than its own value.\n  Note that the number zero does not have a frequency, and the frequency\n  of the number one is one.\n  Examples:\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) == 3\n      search([3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0])) =="}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  if (!lst.length) return lst\n  lst.sort((a, b) => a - b)\n  const size = lst.length\n  let min = lst[0]\n  let max = lst[size - 1]\n  for (let i = 0; i < size; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  let arr = []\n  for (let i = size - 1; i >= 0; i--) {\n    arr.push(lst[i])\n  }\n  return arr\n}\n\nexport default strange_sort_list\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const sides = [a, b, c];\n  sides.forEach((side) => {\n    if (side % 2!== 0) {\n      return false;\n    }\n  });\n  if (sides[0] + sides[1] < sides[2]) {\n    return -1;\n  }\n  const sum = sides.reduce((a, b) => a + b);\n  return (Math.pow(sum, 0.5) * 2).toFixed(2);\n};\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const result = []\n  while (q.length) {\n    result.push(q.pop())\n    if (q.length === 0) {\n      break\n    }\n  }\n  return (\n    result.every(n => n < w) &&\n    result.every(n => n > 0) &&\n    result.every(n => n % 2 === 0) &&\n    result.every(n => n <= w)\n  )\n}\n\n// console.log(will_it_fly([1, 2, 3, 2, 3], 5))\n// console.log(will_it_fly([3, 2, 3, 2, 3], 9))\n// console.log(will_it_fly([3], 5))\n// console.log(will_it_fly([3, 2, 3, 2, 3], 0))\n// console.log(will_it_fly([1, 2, 3], -5))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min_change = arr.length;\n\n  let i = 0;\n  while (i < arr.length - 1) {\n    let j = arr.length - 1;\n    while (j >= i) {\n      if (arr[i]!== arr[j]) {\n        min_change = Math.min(min_change, j - i);\n      }\n      j--;\n    }\n    i++;\n  }\n\n  return min_change;\n}\n\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2])); // 1\nconsole.log(smallest_change([1, 2, 3, 2, 1])); // 0\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2, 1, 1])); // 1\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length === 0) return lst2\n  if (lst2.length === 0) return lst1\n  if (lst1.length!== lst2.length) return []\n  let result = []\n  lst1.forEach((str) => {\n    lst2.forEach((match) => {\n      if (str === match) {\n        result.push(str)\n      }\n    })\n  })\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let prime_sum = 0;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      prime_sum += i;\n    }\n  }\n  return prime_sum === a;\n}\n\nconsole.log(is_multiply_prime(30));\nconsole.log(is_multiply_prime(300));\nconsole.log(is_multiply_prime(3000));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if(n === 1) {\n    return x === 1;\n  }\n\n  let result = false;\n  for(let i = 1; i <= Math.log(x); i++) {\n    if(x % n === 0) {\n      result = true;\n      break;\n    }\n  }\n\n  return result;\n};\n\nconsole.log(is_simple_power(4, 2)); // true\nconsole.log(is_simple_power(2, 2)); // true\nconsole.log(is_simple_power(8, 2)); // true\nconsole.log(is_simple_power(3, 2)); // false\nconsole.log(is_simple_power(3, 1)); // false\nconsole.log(is_simple_power(5, 3)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 1) return false;\n  let is = (a / Math.pow(a, 1.0 / 3)) % 1 == 0;\n  return is;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  const dec_num = num.toString(16);\n  const prime_num = getPrimeNumbers(dec_num);\n  const result = prime_num.length;\n  return result;\n};\n\nfunction getPrimeNumbers(dec_num) {\n  let num = parseInt(dec_num, 16);\n  let prime_num = [];\n  let prime_num_length = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      prime_num.push(num);\n      num = num / 2;\n      prime_num_length++;\n    } else {\n      num = num * 3 + 1;\n    }\n  }\n  return prime_num;\n}\n\nexport { hex_key };\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  const binary = []\n  for (let i = 0; i < decimal.length; i++) {\n    binary.push(decimal[decimal.length - i - 1] % 2)\n    decimal[decimal.length - i - 1] = Math.floor(decimal[decimal.length - i - 1] / 2)\n  }\n  binary.push('db')\n  return binary.reverse().join('')\n}\n\n/*\n  Converts a binary number to decimal.\n  The function should return a string, with each character representing a decimal number.\n\n  Examples:\n  binary_to_decimal('db1111db')   # returns \"15\"\n  binary_to_decimal('db100000db') # returns \"32\"\n  */\nconst binary_to_decimal = (binary) => {\n  const decimal = []\n  for (let i = 0; i < binary.length - 1; i++) {\n    decimal.push(parseInt(binary[i] + binary[i + 1], 2))\n  }\n  decimal.push(parseInt(binary[0] + binary[binary.length - 1], 2))\n  return decimal.join('')\n}\n\nexport {\n  decimal_to_binary,\n  binary_to_decimal\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  const len = s.length\n  if (len < 3) {\n    return false\n  }\n  let count = 0\n  let prev = s[0]\n  for (let i = 1; i < len - 1; i++) {\n    if (s[i] === prev) {\n      count++\n    } else {\n      if (count === 3) {\n        return false\n      }\n      count = 1\n    }\n    prev = s[i]\n  }\n  return count === 3\n}\n\nconst is_happy_2 = (s) => {\n  if (s.length < 3) {\n    return false\n  }\n  let count = 0\n  for (let i = 1; i < s.length - 1; i++) {\n    if (s[i] === s[i - 1] && s[i] === s[i + 1]) {\n      count++\n    }\n    if (count === 3) {\n      return false\n    }\n  }\n  return count === 3\n}\n\n/*\n  Write a function:\n  is_happy_3(s)\n  that takes a string s and returns True if the string is happy or False otherwise.\n  A happy string has at least 3 consecutive letters that are distinct.\n  For example:\n  is_happy_3(a) => false\n  is_happy_3(aa) => false\n  is_happy_3(abcd) => true\n  is_happy_3(aabb) => false\n  is_happy_3(adb) => true\n  is_happy_3(xyy) => false\n  Your function will be called like this:\n  is_happy_3('aab')\n*/\nconst is_happy_3 = (s) => {\n  const len = s.length\n  if (len < 3) {\n    return false\n  }\n  let count = 0\n  let prev = s[0]\n  for (let i = 1; i < len - 1; i++) {\n    if (s[i] === prev) {\n      count++\n    } else {\n      if (count === 3) {\n        return false\n      }\n      count = 1\n    }\n    prev = s[i]\n  }\n  return count === 3\n}\n\nconst is_happy_4 = (s) => {\n  if (s.length < 3) {\n    return false\n  }\n  let count = 0\n  let prev = s[0]\n  let curr = s[1]\n  for (let i = 2; i < s.length - 1; i++) {\n    if (s[i] === prev && s[i] === curr) {\n      count++\n    } else {\n      if (count === 3) {\n        return false\n      }\n      count = 1\n      prev = curr\n      curr = s[i]\n    }\n  }\n  return count === 3\n}\n\nconst is_happy_5 = (s) => {\n  if (s.length < 3) {\n    return false\n  }\n  let count = 0\n  let prev = s[0]\n  let curr = s[1]\n  let next = s[2]\n  for (let i = 3; i < s.length - 2; i++) {\n    if (s[i] === prev && s[i] === curr && s[i + 1] === next) {\n      count++\n    } else {\n      if (count === 3) {\n        return false\n      }\n      count = 1\n      prev = curr\n      curr = next\n      next = s[i + 1]\n    }\n  }\n  return count === 3\n}\n\nconst is_happy_6 = (s) => {\n  if (s.length < 3) {\n    return false\n  }\n  let count = 0\n  let prev = s[0]\n  let curr = s[1]\n  let next = s[2]\n  let prev2 = s[3]\n  for (let i = 4; i < s.length - 2; i++) {\n    if (s[i] === prev && s[i] === curr && s[i + 1] === next && s[i + 2] === prev2) {\n      count++\n    } else {\n      if (count === 3) {\n        return false\n      }\n      count = 1\n      prev = curr\n      curr = next\n      next = s[i + 1]\n      prev2 = s[i + 2]\n    }\n  }\n  return count === 3\n}\n\nconst is_happy_7 = (s) => {\n  if (s.length < 3) {\n    return false\n  }\n  let count = 0\n  let prev = s[0]\n  let curr = s[1]\n  let next = s[2]\n  let prev2 = s[3]\n  let next2 = s[4]\n  for (let i = 5; i < s.length - 3; i++) {\n    if (s[i] === prev && s[i] === curr && s[i + 1] === next && s[i + 2] === prev2 && s[i + 3] === next2) {\n      count++\n    } else {\n      if (count === 3) {\n        return false\n      }\n      count = 1\n      prev = curr\n      curr = next\n      next = s[i + 1]\n      prev2 = s[i + 2]\n      next2 = s[i + 3]\n    }\n  }\n  return count === 3\n}\n\nconst is_happy_8 = (s) => {\n  if (s.length < 3) {\n    return false\n  }\n  let count = 0\n  let prev = s[0]\n  let curr = s[1]\n  let next = s[2]\n  let prev2 = s[3]\n  let next2 = s[4]"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const sum = grades.reduce((a, b) => a + b, 0)\n  const max_sum = Math.max(sum, 0)\n  const max_grade = max_sum.toString()\n  const min_grade = max_sum.toString()\n\n  const diff = sum - max_sum\n  if (diff === 0) {\n    return [max_grade, min_grade]\n  }\n\n  if (diff > 0) {\n    return [max_grade, min_grade]\n  }\n\n  if (diff < 0) {\n    const diff_abs = Math.abs(diff)\n    let diff_percent = (diff_abs / sum) * 100\n\n    if (diff_percent < 3) {\n      return [max_grade, min_grade]\n    }\n\n    if (diff_percent < 7) {\n      return ['A+', 'A']\n    }\n\n    if (diff_percent < 11) {\n      return ['A', 'A-']\n    }\n\n    if (diff_percent < 15) {\n      return ['B+', 'B']\n    }\n\n    if (diff_percent < 19) {\n      return ['B', 'B-']\n    }\n\n    if (diff_percent < 23) {\n      return ['C+', 'C']\n    }\n\n    if (diff_percent < 27) {\n      return ['C', 'C-']\n    }\n\n    return ['D+', 'D']\n  }\n}\n\nexport default numerical_letter_grade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n    return string.length > 1 && string.match(/[0-9]+/g).every(\n        n => n > 1 && n % 1 === 0\n    )\n}\n\nexport default prime_length\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  return new Array(10).fill().map((x) => n.toString().split('').reduce((acc, x) => {\n    if (acc.length === 9) {\n      return acc;\n    }\n\n    if (acc.length === 10) {\n      acc[10] = x;\n    } else {\n      acc[acc.length + 1] = x;\n    }\n\n    return acc;\n  }, []))\n   .filter((x) => x.length === n)\n   .filter((x) => x.indexOf(1) === 0 || x.slice(1).indexOf(1) === 0);\n};\n\nconsole.log(starts_one_ends(1)); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(starts_one_ends(10)); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(starts_one_ends(11)); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nconsole.log(starts_one_ends(19)); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0\n  for (let i = 0; i < N; i++) {\n    sum += N % 2\n    N /= 2\n  }\n  return sum\n}\n\nconst output = solve(1000)\nconsole.log(output)\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that are at even indices.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst remove = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the first element, if it is even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst removeFirst = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the last element, if it is even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst removeLast = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the first two elements, if they are even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst removeFirstTwo = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the last two elements, if they are even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst removeLastTwo = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the first element, if it is even, and then the last element, if it is even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst removeFirstLast = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the first element, if it is even, and then the last element, if it is even, and then the second element, if it is even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst removeFirstLastTwo = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the first three elements, if they are even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst removeFirstThree = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the last three elements, if they are even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst removeLastThree = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the first element, if it is even, and then the second element, if it is even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6]\n  */\nconst removeFirstTwo = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n/*Given a non-empty list of integers lst. remove the last element, if it is even, and then the first element, if it is even.\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst removeLastTwo = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const s = s.replace(/\\s+/g,'');\n  const arr = s.split(' ');\n  let i, j;\n  for (i = arr.length - 1; i > 0; i--) {\n    let temp = arr[i];\n    for (j = i - 1; j >= 0; j--) {\n      if (arr[j].length < temp.length) {\n        temp = arr[j];\n      }\n    }\n    arr[i] = temp;\n  }\n  return arr.join(' ');\n};\n\nmodule.exports = anti_shuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  row = row.reverse();\n  return row;\n}\n\nconst get_row_2 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_3 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_4 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_5 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_6 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_7 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_8 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_9 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_10 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_11 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_12 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_13 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_14 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_15 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_16 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_17 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_18 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_19 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);\n  return row;\n}\n\nconst get_row_20 = (lst, x) => {\n  const arr = lst.map(item => item.map(number => number));\n  let row = arr.slice(x*x, (x+1)*x);"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  if (!Array.isArray(array)) {\n    throw new Error(`Input is not a valid array`)\n  }\n  if (array.length === 0) {\n    return array\n  }\n\n  // Use an array for the sort to reduce the complexity of the loop.\n  const sortedArray = array.slice()\n\n  // Sort in ascending order.\n  sortedArray.sort((a, b) => a - b)\n\n  const evenSum = sum(0, sortedArray.length - 1)\n  const oddSum = sum(0, sortedArray.length - 1)\n\n  if (evenSum % 2 === 0) {\n    sortedArray.reverse()\n  }\n\n  return sortedArray\n}\n\nexport default sort_array\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  if (typeof s!=='string') {\n    throw new TypeError('Parameter must be of type string');\n  }\n  \n  let s_arr = s.split('');\n  let s_arr_len = s_arr.length;\n  let s_arr_new = [];\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let result = '';\n  \n  for (i = 0; i < s_arr_len; i++) {\n    for (j = 0; j < s_arr_len; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (i > j) {\n        temp = s_arr[j] + s_arr[i];\n        s_arr[j] = s_arr[i];\n        s_arr[i] = temp;\n      }\n    }\n    s_arr_new.push(s_arr[i]);\n    temp = '';\n  }\n  result = s_arr_new.join('');\n  return result;\n};\n\nconsole.log(encrypt('hi'));\nconsole.log(encrypt('asdfghjkl'));\nconsole.log(encrypt('gf'));\nconsole.log(encrypt('et'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  if (lst.length <= 1) return null\n  return lst[1]\n}\n\nmodule.exports = next_smallest\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n    const is_bored_str = /^(.*?)\\.(.*?)\\.(.*)$/\n    const start = S.match(is_bored_str)\n    const start_str = start[1].split(' ').join(' ')\n    if (start_str === 'I') {\n        return 1\n    }\n    return 0\n}\n\nmodule.exports = is_bored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  const [num1, num2, num3] = [x, y, z];\n\n  if (isNaN(num1) || isNaN(num2) || isNaN(num3)) {\n    return false;\n  }\n\n  return (num1 + num2) === num3 || (num1 + num3) === num2 || (num2 + num3) === num1;\n};\n\nconst main = () => {\n  //  const [num1, num2, num3] = [5, 2, 7];\n  const [num1, num2, num3] = [3.6, -2.2, 2];\n\n  console.log(any_int(num1, num2, num3));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encoded += char.toLowerCase();\n    } else if (char === char.toLowerCase()) {\n      encoded += char.toUpperCase();\n    } else if (char === 't' || char === 'T') {\n      encoded += 'g';\n    } else if (char === 'h' || char === 'H') {\n      encoded += 'k';\n    } else if (char ==='s' || char === 'S') {\n      encoded += 'c';\n    } else if (char === 'c' || char === 'C') {\n      encoded += 'g';\n    } else if (char ==='m' || char === 'M') {\n      encoded += 'g';\n    } else if (char === 'g' || char === 'G') {\n      encoded +='s';\n    } else if (char === 'i' || char === 'I') {\n      encoded += 'e';\n    } else {\n      encoded += char;\n    }\n  }\n  return encoded;\n};\n\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('this is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const prime = isPrime(lst[i]);\n    if (prime) {\n      result.push(lst[i]);\n    }\n  }\n  return result.length;\n}\n\nconst isPrime = (n) => {\n  const prime = [2];\n  for (let i = 2; i < n; i++) {\n    if (prime[i - 2] === undefined) {\n      for (let j = 2; j * i < n; j++) {\n        prime[i - 2] = j;\n      }\n    }\n  }\n  return prime[n - 2]!== undefined;\n}\n\n// console.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\n// console.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\n// console.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\n// console.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\n// console.log(skjkasdkd([0, 81, 12, 3, 1, 21]));\n// console.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n// console.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  let all_lower = true;\n  let all_upper = true;\n\n  for (let key of Object.keys(dict)) {\n    if (typeof key === \"string\") {\n      all_lower = all_lower && key.toLowerCase() === key;\n      all_upper = all_upper && key.toUpperCase() === key;\n    }\n  }\n\n  return all_lower || all_upper;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings, else return false.\n  The function should return false if the given dictionary is empty.\n  Examples:\n  check_dict_type({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_type({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_type({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_type({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  check_dict_type({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  */\nconst check_dict_type = (dict) => {\n  for (let key of Object.keys(dict)) {\n    if (typeof key!== \"string\") {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Tests\n\ndescribe(\"Is Dictionary Valid\", function() {\n  it(\"returns false if dictionary is empty\", function() {\n    expect(is_dict_valid({})).toEqual(false);\n  });\n\n  it(\"returns false if dictionary keys are not strings\", function() {\n    expect(is_dict_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(false);\n  });\n\n  it(\"returns false if dictionary keys are not all lowercase\", function() {\n    expect(is_dict_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(false);\n  });\n\n  it(\"returns false if dictionary keys are not all uppercase\", function() {\n    expect(is_dict_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(false);\n  });\n\n  it(\"returns true if all dictionary keys are strings and are all lowercase\", function() {\n    expect(is_dict_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n\n  it(\"returns true if all dictionary keys are strings and are all uppercase\", function() {\n    expect(is_dict_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n\n  it(\"returns true if dictionary keys are all strings\", function() {\n    expect(is_dict_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n\n  it(\"returns true if dictionary keys are all strings and are all lowercase\", function() {\n    expect(is_dict_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n\n  it(\"returns true if dictionary keys are all strings and are all uppercase\", function() {\n    expect(is_dict_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n});\n\ndescribe(\"Is Dictionary Case Valid\", function() {\n  it(\"returns false if dictionary is empty\", function() {\n    expect(is_dict_case_valid({})).toEqual(false);\n  });\n\n  it(\"returns false if dictionary keys are not strings\", function() {\n    expect(is_dict_case_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(false);\n  });\n\n  it(\"returns false if dictionary keys are not all lowercase\", function() {\n    expect(is_dict_case_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(false);\n  });\n\n  it(\"returns false if dictionary keys are not all uppercase\", function() {\n    expect(is_dict_case_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(false);\n  });\n\n  it(\"returns true if all dictionary keys are strings and are all lowercase\", function() {\n    expect(is_dict_case_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n\n  it(\"returns true if all dictionary keys are strings and are all uppercase\", function() {\n    expect(is_dict_case_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n\n  it(\"returns true if dictionary keys are all strings\", function() {\n    expect(is_dict_case_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n\n  it(\"returns true if dictionary keys are all strings and are all lowercase\", function() {\n    expect(is_dict_case_valid({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})).toEqual(true);\n  });\n\n  it"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n    const arr = []\n    let i = 2\n    while (i <= n) {\n        if (is_prime(i)) {\n            arr.push(i)\n        }\n        i++\n    }\n    return arr\n}\n\n// const count_up_to = (n) => {\n//     const arr = []\n//     let i = 2\n//     while (i <= n) {\n//         if (is_prime(i)) {\n//             arr.push(i)\n//         }\n//         i++\n//     }\n//     return arr\n// }\n\nfunction is_prime(num) {\n    const arr = [2, 3, 5, 7]\n    for (let i = 0; i < arr.length; i++) {\n        if (num % arr[i] == 0) {\n            return false\n        }\n    }\n    return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let aDigits = a.toString().split('')\n  let bDigits = b.toString().split('')\n  let product = 0\n  for (let i = 0; i < Math.max(aDigits.length, bDigits.length); i++) {\n    if (i < aDigits.length) {\n      product += parseInt(aDigits[i], 10) * parseInt(bDigits[i], 10)\n    } else if (i < bDigits.length) {\n      product += parseInt(bDigits[i], 10) * parseInt(aDigits[i], 10)\n    } else {\n      product += parseInt(bDigits[i], 10) * parseInt(aDigits[i], 10)\n    }\n  }\n  return product\n}\n\n/*\n  Write a function that takes two integers and returns the sum of their\n  difference.\n  Assume the input is always valid.\n  Examples:\n  difference(10, 14) should return 4.\n  difference(12, 14) should return 6.\n  difference(1, 1) should return 0.\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/*\n  Write a function that takes two integers and returns the sum of their\n  absolute value difference.\n  Assume the input is always valid.\n  Examples:\n  absDifference(10, 14) should return 4.\n  absDifference(12, 14) should return 6.\n  absDifference(1, 1) should return 0.\n  */\nconst absDifference = (a, b) => {\n  return Math.abs(a - b)\n}\n\n/*\n  Write a function that takes two integers and returns the difference of their\n  absolute value.\n  Assume the input is always valid.\n  Examples:\n  absDifference(10, 14) should return 4.\n  absDifference(12, 14) should return 6.\n  absDifference(1, 1) should return 0.\n  */\nconst absDifference = (a, b) => {\n  return Math.abs(a - b)\n}\n\n/*\n  Write a function that takes two integers and returns the greatest common\n  divisor of their product and the difference of their absolute value.\n  Assume the input is always valid.\n  Examples:\n  gcd(10, 14) should return 2.\n  gcd(12, 14) should return 2.\n  gcd(1, 1) should return 1.\n  */\nconst gcd = (a, b) => {\n  if (Math.abs(a - b) === 0) {\n    return a\n  } else {\n    return gcd(Math.abs(a - b), a * b)\n  }\n}\n\n/*\n  Write a function that takes two integers and returns the least common\n  multiple of their product and the difference of their absolute value.\n  Assume the input is always valid.\n  Examples:\n  lcm(10, 14) should return 14.\n  lcm(12, 14) should return 28.\n  lcm(1, 1) should return 1.\n  */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b)\n}\n\n/*\n  Write a function that takes two integers and returns the product of their\n  difference and the difference of their absolute value.\n  Assume the input is always valid.\n  Examples:\n  prod(10, 14) should return 14.\n  prod(12, 14) should return 28.\n  prod(1, 1) should return 1.\n  */\nconst prod = (a, b) => {\n  return a - b * gcd(a, b)\n}\n\n/*\n  Write a function that takes two integers and returns the product of their\n  absolute value difference and the difference of their absolute value.\n  Assume the input is always valid.\n  Examples:\n  prod(10, 14) should return 14.\n  prod(12, 14) should return 28.\n  prod(1, 1) should return 1.\n  */\nconst prod = (a, b) => {\n  return a - b * gcd(a, b)\n}\n\n/*\n  Write a function that takes two integers and returns the sum of their\n  difference and the product of their difference.\n  Assume the input is always valid.\n  Examples:\n  sum(10, 14) should return 14.\n  sum(12, 14) should return 28.\n  sum(1, 1) should return 1.\n  */\nconst sum = (a, b) => {\n  return a - b * gcd(a, b) + b - a * gcd(a, b)\n}\n\n/*\n  Write a function that takes two integers and returns the sum of their\n  absolute value difference and the product of their absolute value difference.\n  Assume the input is always valid.\n  Examples:\n  sum(10, 14) should return 14.\n  sum(12, 14) should return 28.\n  sum(1, 1) should return 1.\n  */\nconst sum = (a, b) => {\n  return a - b * gcd(a, b) + b - a * gcd(a, b)\n}\n\n/*\n  Write a function that takes two integers and returns the sum of their\n  difference and the difference of their difference.\n  Assume the input is always valid.\n  Examples:\n  sum(10, 14) should return 14.\n  sum(12, 14) should return 28.\n  sum(1, 1) should return 1.\n  */\nconst sum = (a, b) => {\n  return a - b * gcd(a, b) + b - a * gcd(a, b)\n}\n\n/*\n  Write a function that takes two integers and returns the sum of their\n  absolute value difference and the difference of their absolute value.\n  Assume the input is always valid.\n  Examples:\n  sum(10, 14) should return 14.\n  sum(12, 14)"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 0; i < chars.length; i += 2) {\n    if (chars[i].toUpperCase() === chars[i + 1].toUpperCase()) {\n      count += 1;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n    // check for negatives\n    if (value < 0) {\n        return closest_integer(Math.abs(value)) + Math.abs(value);\n    }\n\n    // check for a single digit\n    if (value <= 9) {\n        return Math.round(value);\n    }\n\n    // check for multiple digits\n    const digits = value.split(\".\");\n    const digits_length = digits.length;\n\n    // if there are no digits, we return 0\n    if (digits_length === 0) {\n        return 0;\n    }\n\n    // get the digits as an array\n    const digits_as_array = digits.map(digit => parseInt(digit));\n\n    // if there are 3 or more digits, find the closest\n    if (digits_length >= 3) {\n        let min_diff = 9999;\n        let min_diff_index = 0;\n\n        // loop over the digits in order\n        for (let i = 0; i < digits_length; i++) {\n            let diff = digits_as_array[i] - digits_as_array[i + 1];\n\n            // if the difference is smaller than the min difference, save the index\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_diff_index = i;\n            }\n        }\n\n        // return the index + 1 because we want the index of the next digit\n        return digits_as_array[min_diff_index] + 1;\n    }\n\n    // if there are 2 digits, find the closest\n    if (digits_length === 2) {\n        let min_diff = 9999;\n\n        // loop over the digits in order\n        for (let i = 0; i < digits_length; i++) {\n            let diff = digits_as_array[i] - digits_as_array[i + 1];\n\n            // if the difference is smaller than the min difference, save the index\n            if (diff < min_diff) {\n                min_diff = diff;\n            }\n        }\n\n        // return the index + 1 because we want the index of the next digit\n        return digits_as_array[min_diff] + 1;\n    }\n\n    // if there is a single digit, return it\n    return digits_as_array[0];\n};\n\n/* Create a function that returns the closest integer to the given\n  value. If the number is equidistant from two integers, round it away\n  from zero.\n  Examples\n  >>> round_away(10.3)\n  10\n  >>> round_away(10.5)\n  11\n  >>> round_away(15.3)\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example round_away(\"14.5\") should return 15 and\n  round_away(\"-14.5\") should return -15.\n  */\nconst round_away = (value) => {\n    // check for negatives\n    if (value < 0) {\n        return round_away(Math.abs(value)) + Math.abs(value);\n    }\n\n    // check for a single digit\n    if (value <= 9) {\n        return Math.round(value);\n    }\n\n    // check for multiple digits\n    const digits = value.split(\".\");\n    const digits_length = digits.length;\n\n    // if there are no digits, we return 0\n    if (digits_length === 0) {\n        return 0;\n    }\n\n    // get the digits as an array\n    const digits_as_array = digits.map(digit => parseInt(digit));\n\n    // if there are 3 or more digits, find the closest\n    if (digits_length >= 3) {\n        let min_diff = 9999;\n        let min_diff_index = 0;\n\n        // loop over the digits in order\n        for (let i = 0; i < digits_length; i++) {\n            let diff = digits_as_array[i] - digits_as_array[i + 1];\n\n            // if the difference is smaller than the min difference, save the index\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_diff_index = i;\n            }\n        }\n\n        // return the index + 1 because we want the index of the next digit\n        return digits_as_array[min_diff_index] + 1;\n    }\n\n    // if there are 2 digits, find the closest\n    if (digits_length === 2) {\n        let min_diff = 9999;\n\n        // loop over the digits in order\n        for (let i = 0; i < digits_length; i++) {\n            let diff = digits_as_array[i] - digits_as_array[i + 1];\n\n            // if the difference is smaller than the min difference, save the index\n            if (diff < min_diff) {\n                min_diff = diff;\n            }\n        }\n\n        // return the index + 1 because we want the index of the next digit\n        return digits_as_array[min_diff] + 1;\n    }\n\n    // if there is a single digit, return it\n    return digits_as_array[0];\n};\n\n/* Create a function that returns the closest integer to the given\n  value. If the number is equidistant from two integers, round it\n  away from zero.\n  Examples\n  >>> round_towards_zero(10.3)\n  10\n  >>> round_towards_zero(10.5)\n  10\n  >>> round_towards_zero(15.3)\n  15\n  Note:\n  Rounding towards zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  if (n === 0) {\n    return [0]\n  } else {\n    if (n % 2 === 0) {\n      return [n, n + 1]\n    } else {\n      return [n, n + 1, n + 2]\n    }\n  }\n}\n\nmodule.exports = make_a_pile\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/(\\s|,)/).filter(w => w.length > 0)\n}\n\n/*\n  Given an array of words, return the word at the index of the array.\n  \n  For example:\n  words_at([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"John\"\n  words_at([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"six\"\n  */\nconst words_at = (words) => {\n  return words[words.length - 1]\n}\n\n/*\n  Given an array of words, return the number of the index of the word in the array.\n  \n  For example:\n  words_index([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == 1\n  words_index([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == 5\n  */\nconst words_index = (words) => {\n  return words.indexOf(words_at(words))\n}\n\n/*\n  Given an array of words, return the index of the word in the array with the greatest\n  frequency.\n  \n  For example:\n  words_index_of_highest_frequency([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == 1\n  words_index_of_highest_frequency([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == 5\n  */\nconst words_index_of_highest_frequency = (words) => {\n  let index = -1\n  let count = -1\n  words.forEach(w => {\n    let i = words_index(words)\n    if (count < i) {\n      count = i\n      index = w\n    }\n  })\n  return index\n}\n\n/*\n  Given an array of words, return the words in the array with the highest frequency.\n  \n  For example:\n  words_of_highest_frequency([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\"]\n  words_of_highest_frequency([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_of_highest_frequency = (words) => {\n  let highest_index = -1\n  let highest_count = -1\n  words.forEach(w => {\n    let i = words_index(words)\n    if (highest_count < i) {\n      highest_count = i\n      highest_index = w\n    }\n  })\n  return [words[highest_index],...words.slice(0, highest_index)]\n}\n\n/*\n  Given an array of words, return a list of all words in the array with the same frequency\n  as the word at the index of the array.\n  \n  For example:\n  words_of_frequency([\"Hi\", \"my\", \"name\", \"is\", \"John\", \"My\"]) == [\"Hi\", \"my\", \"name\"]\n  words_of_frequency([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_of_frequency = (words) => {\n  let index = words_index(words)\n  let highest_index = words_index_of_highest_frequency(words)\n  return words.slice(index, highest_index + 1)\n}\n\n/*\n  Given an array of words, return a list of all words in the array with the same frequency\n  as the word with the index of the array.\n  \n  For example:\n  words_of_frequency_of([\"Hi\", \"my\", \"name\", \"is\", \"John\", \"My\"]) == [\"Hi\", \"my\", \"name\"]\n  words_of_frequency_of([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_of_frequency_of = (words) => {\n  let index = words_index_of_highest_frequency(words)\n  return words.slice(index)\n}\n\n/*\n  Given an array of words, return the most common word in the array.\n  \n  For example:\n  most_common_word([\"Hi\", \"my\", \"name\", \"is\", \"John\", \"My\"]) == \"My\"\n  most_common_word([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"six\"\n  */\nconst most_common_word = (words) => {\n  let words_of_highest_frequency = words_of_highest_frequency(words)\n  let highest_frequency = words_of_highest_frequency.length\n  let highest_index = -1\n  words_of_highest_frequency.forEach(w => {\n    if (words_of_highest_frequency.indexOf(w) > highest_index) {\n      highest_index = words_of_highest_frequency.indexOf(w)\n    }\n  })\n  return words_of_highest_frequency[highest_index]\n}\n\n/*\n  Given an array of words, return the most common word in the array with the index\n  of the array.\n  \n  For example:\n  most_common_word_of([\"Hi\", \"my\", \"name\", \"is\", \"John\", \"My\"]) == \"My\"\n  most_common_word_of([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"six\"\n  */\nconst most_common_word_of = (words) => {\n  let index = words_index_of_highest_frequency(words)\n  return words_of_highest_frequency[index]\n}\n\n/*\n  Given an array of"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let ans = 0;\n  while (x <= y) {\n    ans += x;\n    x += 2;\n  }\n  return ans;\n};\n\nconst solve = () => {\n  let result = choose_num(1, 10000);\n  if (result === -1) {\n    result = choose_num(10000, 1000000);\n  }\n  console.log(result);\n};\n\nsolve();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) return -1;\n  const avg = (n + m) / 2;\n  return (avg | 0).toString(2);\n};\n\nconst main = () => {\n  console.log(`rounded_avg(1, 5) = ${rounded_avg(1, 5)}`);\n  console.log(`rounded_avg(7, 5) = ${rounded_avg(7, 5)}`);\n  console.log(`rounded_avg(10, 20) = ${rounded_avg(10, 20)}`);\n  console.log(`rounded_avg(20, 33) = ${rounded_avg(20, 33)}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let res = []\n  for (let i = 1; i < x; i++) {\n    if (x % i === 0) {\n      continue\n    } else {\n      res.push(i)\n    }\n  }\n  return res\n}\n\n// test\nconsole.log(unique_digits(123))\nconsole.log(unique_digits(10))\nconsole.log(unique_digits(20))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  if (!arr || arr.length === 0) {\n    return []\n  }\n\n  return arr.reduce((prev, current) => {\n    if (current <= 9 && current >= 1) {\n      prev.push(String(current).toUpperCase())\n    }\n    return prev\n  }, [])\n   .map(n => n.toUpperCase())\n   .reverse()\n}\n\nconsole.log(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length_reversed = (arr) => {\n  if (!arr || arr.length === 0) {\n    return []\n  }\n\n  return arr.reduce((prev, current) => {\n    if (current <= 9 && current >= 1) {\n      prev.push(String(current).toUpperCase())\n    }\n    return prev\n  }, [])\n   .map(n => n.toUpperCase())\n   .reverse()\n}\n\nconsole.log(by_length_reversed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [1];\n  for (let i = 1; i <= n; i += 2) {\n    factorials.push(factorials[i - 1] * i);\n  }\n  return factorials;\n};\n\nconst result = f(5);\n\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n    const palindromes = []\n\n    for (let i = 1; i < n; i++) {\n        let palindrome = i\n        while (palindrome) {\n            palindrome = palindrome.toString().split('').reverse().join('')\n            if (palindrome.length % 2) {\n                palindrome = palindrome.toString().split('').join('')\n                palindromes.push(palindrome)\n            }\n        }\n    }\n\n    return (palindromes.length / 2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    n += arr[i];\n  }\n  return n > 0? n : 0;\n};\n\nmodule.exports = count_nums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n    let size = arr.length;\n    if (size === 0) return true;\n    if (size === 1) return true;\n\n    let prev = arr[size-1];\n    let max = size-1;\n    for (let i=0; i<max; i++) {\n        if (arr[i] > prev) {\n            prev = arr[i];\n            size--;\n            for (let j=i+1; j<max; j++) {\n                arr[j-1] = arr[j];\n            }\n            break;\n        }\n    }\n    arr[size-1] = prev;\n    return (size < arr.length);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  const diff = lst1.reduce((acc, i) => acc + (lst2[i] - lst1[i]), 0);\n  return (diff % 2) === 0? 'YES' : 'NO';\n};\n\nexport default exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  const alphabet = test.split('')\n  for (let i = 0; i < alphabet.length; i++) {\n    if (histogram[alphabet[i]] === undefined) {\n      histogram[alphabet[i]] = 1\n    } else {\n      histogram[alphabet[i]] = histogram[alphabet[i]] + 1\n    }\n  }\n  return histogram\n}\n\n//Tests\ndescribe('histogram', () => {\n  it('should return an empty dictionary when no string is given', () => {\n    expect(histogram('')).toEqual({})\n  })\n  it('should return a dictionary with the count of repeated letters', () => {\n    expect(histogram('a b c a b a b')).toEqual({'a': 2, 'b': 3})\n  })\n  it('should return a dictionary with the count of repeated letters', () => {\n    expect(histogram('a b c a b a b')).toEqual({'a': 2, 'b': 3})\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  const c_arr = c.split(\"\");\n  let result = \"\";\n  let is_pal = false;\n  s.split(\"\").forEach(char => {\n    const index = c_arr.indexOf(char);\n    if (index!== -1) {\n      is_pal = true;\n      s = s.replace(char, \"\");\n    }\n  });\n  return {\n    result: s,\n    is_pal: is_pal\n  };\n};\n\n/*\n  Task\n  Given two strings s and c, you have to deleted all the characters in c that are not in s\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('abcde',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',true)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedcba',false)\n  */\nconst delete_all_not_in = (s, c) => {\n  const c_arr = c.split(\"\");\n  const result = \"\";\n  s.split(\"\").forEach(char => {\n    const index = c_arr.indexOf(char);\n    if (index!== -1) {\n      s = s.replace(char, \"\");\n    }\n  });\n  return {\n    result: s,\n    is_pal: s === \"\"\n  };\n};\n\n/*\n  Task\n  Given two strings s and c, you have to deleted all the characters in s that are not in c\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('abcde',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',true)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedcba',true)\n  */\nconst delete_all_not_in_rev = (s, c) => {\n  const c_arr = c.split(\"\");\n  const result = \"\";\n  c_arr.forEach(char => {\n    const index = s.indexOf(char);\n    if (index!== -1) {\n      s = s.replace(char, \"\");\n    }\n  });\n  return {\n    result: s,\n    is_pal: s === \"\"\n  };\n};\n\n/*\n  Task\n  Given two strings s and c, you have to deleted all the characters in c that are not in s\n  Then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('abcde',true)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedcba',false)\n  */\nconst delete_all_not_in_rev_rev = (s, c) => {\n  const c_arr = c.split(\"\");\n  const result = \"\";\n  c_arr.forEach(char => {\n    const index = s.lastIndexOf(char);\n    if (index!== -1) {\n      s = s.substr(0, index) + s.substr(index + 1);\n    }\n  });\n  return {\n    result: s,\n    is_pal: s === \"\"\n  };\n};\n\nexport {\n  reverse_delete,\n  delete_all_not_in_rev,\n  delete_all_not_in_rev_rev\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  const odd_count_map = {};\n  lst.forEach(str => {\n    const count = count_odd(str);\n    if (odd_count_map[count]) {\n      odd_count_map[count].push(str);\n    } else {\n      odd_count_map[count] = [str];\n    }\n  });\n\n  return Object.keys(odd_count_map).map(key => {\n    return `the number of odd elements ${key} of the ${odd_count_map[key].join(\", \")}`;\n  });\n};\n\nmodule.exports = odd_count;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  if (!nums) {\n    return -1;\n  }\n\n  if (nums.length === 0) {\n    return -1;\n  }\n\n  if (nums.length === 1) {\n    return nums[0];\n  }\n\n  return Math.min(\n    min_sub_array_sum(nums.slice(1)),\n    min_sub_array_sum(nums.slice(0, nums.length - 1)) + nums[nums.length - 1]\n  );\n};\n\nmodule.exports = min_sub_array_sum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        let fill_amount = 1;\n        while (fill_amount < capacity) {\n          if (grid[i][j] === 1) {\n            fill_amount++;\n          } else {\n            fill_amount = 0;\n            break;\n          }\n        }\n        count += fill_amount;\n      }\n    }\n  }\n  return count;\n}\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n*/\nconst max_fill_2 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        let fill_amount = 1;\n        while (fill_amount < capacity) {\n          if (grid[i][j] === 1) {\n            fill_amount++;\n          } else {\n            fill_amount = 0;\n            break;\n          }\n        }\n        count += fill_amount;\n      }\n    }\n  }\n  return count;\n}\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n*/\nconst max_fill_3 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        let fill_amount = 1;\n        while (fill_amount < capacity) {\n          if (grid[i][j] === 1) {\n            fill_amount++;\n          } else {\n            fill_amount = 0;\n            break;\n          }\n        }\n        count += fill_amount;\n      }\n    }\n  }\n  return count;\n}\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input:"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const isInt = (num) =>!isNaN(parseInt(num)) && isFinite(num) &&!isNaN(parseFloat(num))\n\n  if (isInt(arr[0])) {\n    return arr.sort((a, b) => a - b)\n  } else {\n    return arr.sort((a, b) => parseInt(a, 10) - parseInt(b, 10))\n  }\n}\n\nexport default sort_array\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const count = s.split('').filter(char => char.match(/[A-Za-z]+/g)).length\n  if (count === n) return [s]\n  if (count > n) return []\n  let words = []\n  s = s.split('')\n  for (let i = 0; i < n; i++) {\n    let word = s.shift()\n    while (word.length > 0) {\n      let matches = s.filter(c => c === word[0]).length\n      if (matches === n) {\n        words.push(word)\n      }\n      word = word.substr(1)\n    }\n  }\n  return words\n}\n\n/*\n  Given a string s and a string t, you have been tasked to implement a function \n  that checks if the string s contains all the characters of t.\n  If the string s contains all the characters of t then the function should \n  return true. Else it should return false.\n  Examples:\n  is_substring(\"Hello World\", \"World\") ==> true\n  is_substring(\"Hello World\", \"hello\") ==> false\n  is_substring(\"Hello World\", \"\") ==> true\n  is_substring(\"Hello World\", \"Hellow\") ==> false\n  is_substring(\"Hello World\", \"\") ==> true\n  is_substring(\"Hello World\", \"Hello\") ==> true\n*/\nconst is_substring = (s, t) => {\n  const sLength = s.length\n  const tLength = t.length\n  for (let i = 0; i < sLength; i++) {\n    if (t.indexOf(s[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a string s and a string t, you have been tasked to implement a function \n  that returns the minimum distance between t and s.\n  If the distance between t and s is 0 then the function should return 0. Else it \n  should return the distance.\n  Examples:\n  min_distance(\"hello\", \"world\") ==> 3\n  min_distance(\"hello\", \"hell\") ==> 1\n  min_distance(\"hello\", \"Hello\") ==> 0\n*/\nconst min_distance = (s, t) => {\n  const distance = t.split('').map(char => {\n    if (s.indexOf(char) === -1) {\n      return Infinity\n    }\n    return Math.abs(s.indexOf(char) - t.indexOf(char))\n  }).reduce((a, b) => a < b? a : b)\n  return distance === Infinity? Infinity : distance\n}\n\nconst main = () => {\n  const {\n    select_words,\n    is_substring,\n    min_distance\n  } = require('./select_words.js')\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('simple white space', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Uncle sam', 3))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console.log(select_words('Hello World', 2))\n  console.log(select_words('Hello World', 4))\n  console.log(select_words('Hello World', 3))\n  console"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let found_vowel = \"\"\n  let found_vowel_index = 0\n  let index = word.length - 1\n  let i = 0\n  while (i < index) {\n    if (vowels.indexOf(word.charAt(i)) > -1) {\n      found_vowel = word.charAt(i)\n      found_vowel_index = i\n      break\n    }\n    i++\n  }\n  if (found_vowel === \"\") {\n    for (i = 0; i < word.length; i++) {\n      if (vowels.indexOf(word.charAt(i)) > -1) {\n        found_vowel = word.charAt(i)\n        found_vowel_index = i\n        break\n      }\n    }\n  }\n  if (found_vowel === \"\") {\n    return \"\"\n  }\n  while (i < word.length) {\n    if (vowels.indexOf(word.charAt(i)) > -1) {\n      if (i === found_vowel_index) {\n        return \"\"\n      } else {\n        return word.charAt(i)\n      }\n    }\n    i++\n  }\n  return found_vowel\n}\n\nconsole.log(get_closest_vowel(\"ab\"))\nconsole.log(get_closest_vowel(\"quick\"))\nconsole.log(get_closest_vowel(\"yogurt\"))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  if (!lst) return 'No';\n  const result = lst.filter(item => item === '(');\n  if (result.length!== lst.length) return 'No';\n  const stack = [];\n  for (const item of result) {\n    stack.push(item);\n  }\n  let pos = 0;\n  while (pos < stack.length) {\n    const item = stack[pos];\n    const next = stack[pos + 1];\n    if (item === '(' && next === ')') {\n      stack.splice(pos, 2);\n      pos--;\n    } else {\n      pos++;\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const max = arr.slice(0, k);\n    const maxLen = max.reduce((a, b) => a > b? a : b);\n    return arr.slice(0, maxLen).sort((a, b) => a - b);\n};\n\nconst maximumK = (arr, k) => {\n    const len = arr.length;\n    const max = arr.slice(0, k);\n    const maxLen = max.reduce((a, b) => a > b? a : b);\n    return arr.slice(0, maxLen);\n};\n\nmodule.exports = maximumK;<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let result = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0\n  while (k--) {\n    sum += arr[k]\n  }\n  return sum\n}\n\nconst test = [\n  [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n  4,\n  [21, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],\n  2,\n]\n\ntest.forEach(t => {\n  console.log(add_elements(t[0], t[1]))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  if(n === 1) return [1];\n  const collatz = (n) => {\n    if(n === 2) return [1];\n    if(n === 3) return [1, 3];\n    if(n % 2 === 0) {\n      return collatz(n / 2);\n    } else {\n      return collatz(3 * n + 1);\n    }\n  }\n  return collatz(n);\n}\n\n/*\n  Given a non-negative integer n, return the number of terms in the Collatz sequence that sums up to n.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach n.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz_sum(5) returns 1 # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz_sum = (n) => {\n  if(n === 1) return 1;\n  const collatz = (n) => {\n    if(n === 2) return 1;\n    if(n === 3) return 1;\n    if(n % 2 === 0) {\n      return collatz(n / 2) + 1;\n    } else {\n      return collatz(3 * n + 1) + 1;\n    }\n  }\n  return collatz(n) + 1;\n}\n\nmodule.exports = {\n  get_odd_collatz,\n  get_odd_collatz_sum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n    if (date === \"\") {\n        return false;\n    }\n    const m = date.match(/^\\d{2}-\\d{2}-\\d{4}$/);\n    if (m === null) {\n        return false;\n    }\n    const day = m[0];\n    const month = m[1];\n    const year = m[2];\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    const days = new Array(month);\n    for (let i = 0; i < month; i++) {\n        days[i] = 31;\n        if (i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 || i == 12) {\n            days[i] = 30;\n        }\n        if (i == 4 || i == 6 || i == 9 || i == 11) {\n            days[i] = 29;\n        }\n    }\n    if (day < 1 || day > days[month - 1]) {\n        return false;\n    }\n    if (year < 1 || year > (new Date()).getFullYear()) {\n        return false;\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  let wordlist = [];\n  let s = txt.split(' ');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_2 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_3 = (txt) => {\n  let wordlist = [];\n  let s = txt.split(' ');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_4 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_5 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_6 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_7 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_8 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_9 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_10 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_11 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_12 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_13 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_14 = (txt) => {\n  let wordlist = [];\n  let s = txt.split('');\n  for (let i = 0; i < s.length; i++) {\n    let word = s[i].trim().toLowerCase();\n    if (word.length) {\n      wordlist.push(word);\n    }\n  }\n  return wordlist;\n};\n\nconst split_words_15 = (txt) => {"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  let sorted = true;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] < lst[i - 1]) {\n      sorted = false;\n    }\n    i++;\n  }\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const a = interval1[0], b = interval1[1],\n    c = interval2[0], d = interval2[1];\n\n  if (a > b || c > d) {\n    return \"NO\";\n  }\n\n  if (a > c || b > d) {\n    return \"NO\";\n  }\n\n  return (a <= d && b <= c)? \"YES\" : \"NO\";\n};\n\nexport default intersection;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const result = []\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      result.push(0)\n    } else if (arr[i] === 1) {\n      result.push(1)\n    } else if (arr[i] === -1) {\n      result.push(-1)\n    } else {\n      return null\n    }\n  }\n\n  const product = arr.reduce((acc, curr) => acc * curr)\n  const prod_sum = arr.reduce((acc, curr) => acc + curr, 0)\n\n  return result.map((item, index) => {\n    return item * product * result[index]\n  }).reduce((acc, curr) => acc + curr, 0)\n}\n\nconsole.log(prod_signs([1, 2, 2, -4]))\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n\n  dp[0] = grid[0][0];\n  for(let i = 1; i < n; i++) {\n    dp[i] = dp[i - 1] + grid[i][0];\n  }\n\n  const paths = [];\n  for(let i = 0; i < m; i++) {\n    const row = dp[0];\n    dp[0] = 0;\n\n    for(let j = 1; j < n; j++) {\n      const next = dp[j];\n      dp[j] = row + grid[j][i];\n      row = next;\n    }\n\n    paths.push(dp[n - 1]);\n  }\n\n  const sorted_paths = paths.sort((a, b) => a - b);\n  return k <= sorted_paths.length? sorted_paths.slice(0, k) : sorted_paths;\n};\n\n// const grid = [ [1,2,3], [4,5,6], [7,8,9]];\n// const k = 1;\n// const paths = min_path(grid, k);\n// console.log(paths); // [1]\n// console.log(grid[0][0]); // 1\n// console.log(grid[1][0]); // 2\n// console.log(grid[1][1]); // 5\n// console.log(grid[2][0]); // 8\n// console.log(grid[2][1]); // 9\n// console.log(grid[2][2]); // 13\n// console.log(grid[3][0]); // 16\n// console.log(grid[3][1]); // 17\n// console.log(grid[3][2]); // 21\n// console.log(grid[3][3]); // 25\n// console.log(grid[4][0]); // 28\n// console.log(grid[4][1]); // 29\n// console.log(grid[4][2]); // 33\n// console.log(grid[4][3]); // 37\n// console.log(grid[4][4]); // 41\n// console.log(grid[5][0]); // 44\n// console.log(grid[5][1]); // 45\n// console.log(grid[5][2]); // 49\n// console.log(grid[5][3]); // 53\n// console.log(grid[5][4]); // 57\n// console.log(grid[5][5]); // 61\n// console.log(grid[5][6]); // 65\n// console.log(grid[5][7]); // 69\n// console.log(grid[5][8]); // 73\n// console.log(grid[5][9]); // 77\n// console.log(grid[5][10]); // 81\n// console.log(grid[5][11]); // 85\n// console.log(grid[5][12]); // 89\n// console.log(grid[5][13]); // 93\n// console.log(grid[5][14]); // 97\n// console.log(grid[5][15]); // 101\n// console.log(grid[5][16]); // 105\n// console.log(grid[5][17]); // 109\n// console.log(grid[5][18]); // 113\n// console.log(grid[5][19]); // 117\n// console.log(grid[5][20]); // 121\n// console.log(grid[5][21]); // 125\n// console.log(grid[5][22]); // 129\n// console.log(grid[5][23]); // 133\n// console.log(grid[5][24]); // 137\n// console.log(grid[5][25]); // 141\n// console.log(grid[5][26]); // 145\n// console.log(grid[5][27]); // 149\n// console.log(grid[5][28]); // 153\n// console.log(grid[5][29]); // 157\n// console.log(grid[5][30]); // 161\n// console.log(grid[5][31]); // 165\n// console.log(grid[5][32]); // 169\n// console.log(grid[5][33]); // 173\n// console.log(grid[5][34]); // 177\n// console.log(grid[5][35]); // 181\n// console.log(grid[5][36]); // 185\n// console.log(grid[5][37]); // 189\n// console.log(grid[5][38]); // 193\n// console.log(grid[5][39]); // 197\n// console.log(grid[5][40]); // 201\n// console.log(grid[5][41]); // 205\n// console."}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = []\n  let prevTri = 0\n  let curTri = 0\n\n  while (result.length < n + 1) {\n    curTri = curTri + prevTri\n    prevTri = prevTri + curTri\n    result.push(curTri)\n  }\n  return result\n}\n\nconst tribonacci = (n) => tri(n)\n\nconst test = tribonacci(5)\n\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1\n  let index = 0\n  while (index < n) {\n    if (n % 2 === 1) {\n      product *= parseInt(n % 10)\n    }\n    index++\n    n = Math.floor(n / 10)\n  }\n  return product\n}\n\n/*\n  Given a non-negative integer n, return the sum of the digits of n.\n  For example:\n  sumDigits(1234) == 12\n  sumDigits(15) == 15\n  sumDigits(0) == 0\n  sumDigits(13) == 13\n  sumDigits(1) == 1\n  sumDigits(10) == 10\n  */\nconst sumDigits = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += n % 10\n    n = Math.floor(n / 10)\n  }\n  return sum\n}\n\n/*\n  Given two non-negative integers a and b, return the larger of two.\n  For example:\n  max(2, 4) == 4\n  max(1, 2) == 2\n  */\nconst max = (a, b) => {\n  return Math.max(a, b)\n}\n\n/*\n  Given two non-negative integers a and b, return the smaller of two.\n  For example:\n  min(2, 4) == 2\n  min(1, 2) == 1\n  */\nconst min = (a, b) => {\n  return Math.min(a, b)\n}\n\n/*\n  Given an array of integers nums, return the number of digit 1's in the array.\n  For example:\n  countDigits(1, 2, 3) == 3\n  countDigits(0, 1, 2, 3) == 2\n  countDigits([]) == 0\n  countDigits([1]) == 1\n  countDigits([1, 0]) == 2\n  */\nconst countDigits = (nums) => {\n  let count = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given an array of non-negative integers nums, return the largest number\n  that can be formed by the sum of the digits of the number.\n\n  For example:\n  numberOfLargestSum(1, 2, 3, 4) == 10\n  numberOfLargestSum(1, 2, 3) == 6\n  numberOfLargestSum(1, 2) == 2\n  numberOfLargestSum(1) == 1\n  numberOfLargestSum(4) == 16\n  numberOfLargestSum([4, 3, 2, 1]) == 10\n  */\nconst numberOfLargestSum = (nums) => {\n  let max = 0\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums.length; j++) {\n      let curr = nums[i] + nums[j]\n      if (curr > max) {\n        max = curr\n      }\n    }\n  }\n  return max\n}\n\n/*\n  Given two strings s and t, return true if s contains all of the characters in t,\n  in any order.\n\n  For example:\n  containsAllChars(\"abcd\", \"cdab\") == true\n  containsAllChars(\"a\", \"aa\") == false\n  containsAllChars(\"ab\", \"a\") == false\n  containsAllChars(\"ab\", \"b\") == true\n  containsAllChars(\"abc\", \"a\") == false\n  */\nconst containsAllChars = (s, t) => {\n  let sIndex = 0\n  let tIndex = 0\n  while (sIndex < s.length && tIndex < t.length) {\n    if (s[sIndex] === t[tIndex]) {\n      sIndex++\n      tIndex++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given an array of non-negative integers, return the number of unique subarrays\n  that can be formed.\n\n  For example:\n  subarraySum(3, [1, 2, 3]) == 2\n  subarraySum(3, [1, 2, 2]) == 2\n  subarraySum(3, [1, 3, 3]) == 3\n  subarraySum(3, [1, 1, 1]) == 1\n  subarraySum(3, [1, 1, 2, 2]) == 1\n  subarraySum(3, [1, 1, 2, 2, 3, 3]) == 4\n  */\nconst subarraySum = (n, nums) => {\n  let sum = 0\n  let index = 0\n  while (index < nums.length) {\n    sum += nums[index]\n    index++\n  }\n  return countSubarrays(n, sum)\n}\n\n/*\n  Given a positive integer n, return the number of digit 1's in the binary\n  representation of n.\n\n  For example:\n  digitOnes(10) == 3\n  digitOnes(13) == 3\n  digitOnes(15) == 3\n  digitOnes(1) == 1\n  digitOnes(0) == 0\n  */\nconst digitOnes = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 2 === 1) {\n      count++\n    }\n    n = Math.floor(n / 2)\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of digit 0's in the binary\n  representation of n.\n\n  For example:\n  digitZeros(10) == 2\n  digitZeros(13) == 2\n  digitZeros(15) == 2\n  digitZeros(1) == 1\n  digitZeros(0) == 1\n  digitZeros(2) == 1\n  digitZeros(3) == 0\n  */\nconst digitZeros = (n) => {\n  let count"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[][]/g\n  let match\n  while ((match = regex.exec(string))!== null) {\n    if (match[0]!== '[') return false\n    const nextMatch = regex.exec(string.slice(match.index + 1))\n    if (nextMatch === null || nextMatch[0]!== '[') return false\n  }\n  return true\n}\n\n/*\n  Given a string, count how many times a certain substring is nested within brackets.\n  The string should be bracketed.\n  count_nested('[[]]') ➞ 1\n  count_nested}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(parseFloat(lst[i]), 2);\n  }\n  return sum;\n}\n\nconsole.log(sum_squares([1,2,3])); // 14\nconsole.log(sum_squares([1,4,9])); // 98\nconsole.log(sum_squares([1,3,5,7])); // 84\nconsole.log(sum_squares([1.4,4.2,0])); // 29\nconsole.log(sum_squares([-2.4,1,1])); // 6\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const is_last_char_a_letter = (char) => char.match(/[a-zA-Z]/);\n  const is_not_last_char_a_word_part = (char) => char.match(/[^a-zA-Z]/);\n  const is_last_char_not_a_word_part = (char) => char.match(/[a-zA-Z]/);\n  const is_not_last_char_a_word = (char) => char.match(/[^a-zA-Z ]/);\n  const is_not_last_char_a_word = (char) => char.match(/[a-zA-Z ]/);\n  const is_last_char_a_word = (char) => char.match(/[a-zA-Z ]/);\n\n  let last_char = txt[txt.length - 1];\n  const is_last_char_a_letter = is_last_char_a_letter(last_char);\n  const is_not_last_char_a_word_part = is_not_last_char_a_word_part(last_char);\n  const is_last_char_not_a_word_part = is_last_char_not_a_word_part(last_char);\n  const is_not_last_char_a_word = is_not_last_char_a_word(last_char);\n  const is_not_last_char_a_word = is_not_last_char_a_word(last_char);\n  const is_last_char_a_word = is_last_char_a_word(last_char);\n\n  return (\n    (is_last_char_a_letter && is_not_last_char_a_word_part) ||\n    (!is_last_char_a_letter && is_not_last_char_a_word) ||\n    (is_last_char_a_letter && is_not_last_char_a_word) ||\n    (is_last_char_not_a_word_part && is_not_last_char_a_word)\n  );\n};\n\nmodule.exports = check_if_last_char_is_a_letter;\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  const sorted = arr.sort();\n  let i = sorted.length - 1;\n  let j = 0;\n  let index;\n\n  while (i > j) {\n    index = sorted[i];\n    if (index >= sorted[j]) {\n      return index;\n    }\n    i--;\n  }\n\n  return -1;\n};\n\nexport default can_arrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const largest = sorted_lst[0];\n  const smallest = sorted_lst[1];\n  return largest === smallest? [null, null] : [largest, smallest];\n};\n\nexport {\n  largest_smallest_integers,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(',', '.');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(',', '.');\n  }\n\n  if (isNaN(a) && isNaN(b)) {\n    return a > b? b : null;\n  } else if (isNaN(a)) {\n    return b;\n  } else if (isNaN(b)) {\n    return a;\n  }\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return b;\n    } else if (a < b) {\n      return a;\n    } else {\n      return null;\n    }\n  } else if (typeof a === 'number') {\n    return a;\n  } else if (typeof b === 'number') {\n    return b;\n  } else {\n    return a > b? b : a;\n  }\n};\n\nmodule.exports = compare_one;\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n >= 4;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const fibonacci = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  };\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const fibonacci = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  };\n  const big_n = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return big_n(n - 1) + big_n(n - 2);\n  };\n  const fibonacci = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  };\n  return n > 0\n   ? fibonacci(n)\n    : big_n(n);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  text = text.replace(/ /g, '_')\n  if (text.indexOf(' ')!== -1) {\n    let spaces = 0\n    while (text.indexOf(' ')!== -1) {\n      text = text.replace(' ','_')\n      spaces += 1\n    }\n    if (spaces > 2) {\n      text = text.replace(/ /g, '-')\n    }\n  }\n  return text\n}\n\nmodule.exports = fix_spaces\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  let regex = /^[a-zA-Z]+[0-9]+\\.[a-z]+$/;\n  if (regex.test(file_name) === false) {\n    return 'No';\n  }\n  let regex_txt = /^[a-zA-Z]+[0-9]+\\.[a-z]{3}$/;\n  if (regex_txt.test(file_name) === false) {\n    return 'No';\n  }\n  return 'Yes';\n}\n\nconst file_name_check2 = (file_name) => {\n  let regex = /^[a-zA-Z]+[0-9]+\\.[a-z]+$/;\n  if (regex.test(file_name) === false) {\n    return 'No';\n  }\n  let regex_txt = /^[a-zA-Z]+[0-9]+\\.[a-z]{3}$/;\n  if (regex_txt.test(file_name) === false) {\n    return 'No';\n  }\n  return 'Yes';\n}\n\nmodule.exports = file_name_check;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let total = 0;\n  lst.forEach(i => {\n    if (i % 3 === 0) {\n      total += i * i;\n    }\n    if (i % 4 === 0) {\n      total += i * i * i;\n    }\n  });\n  return total;\n};\n\n/*\n  \"squared\"\n  This function takes a number and squares it, returning the squared number. The number may be an integer or a float. If the number \n  is an integer, the function should return the square of the integer number. If the number is a float, the function should return \n  the square of the float number. \n  \n  Examples:\n  For n = 9 the output should be 81\n  For n = 1.25 the output should be 81.25\n  For n = -1.25 the output should be -81.25\n  For n = -1.25 the output should be -81.25\n  */\nconst squared = (n) => {\n  return n * n;\n};\n\n/*\n  \"pow\"\n  This function takes two numbers and performs their successive powers, returning the result. The numbers may be integers or floats. If \n  the numbers are floats, they must be of the same type. If the number is an integer, the function will first convert it to a float \n  (with the same type as the number) and then apply the function to the float number. If the number is a float, the function will \n  first convert the float number to an integer (with the same type as the number) and then apply the function to the integer. \n  \n  Examples:\n  For n = 2 the output should be 4\n  For n = 2.25 the output should be 1024\n  For n = -2.25 the output should be -1024\n  For n = -2.25 the output should be -1024\n  */\nconst pow = (n) => {\n  if (typeof n === 'number') {\n    let n2 = Math.floor(n);\n    let n3 = n - n2;\n    return n2 * n2 + n3 * n3;\n  }\n  return n * n;\n};\n\n/*\n  \"triangular\"\n  This function takes three numbers and performs their successive powers, returning the result. The numbers may be integers or floats. If \n  the numbers are floats, they must be of the same type. If the number is an integer, the function will first convert it to a float \n  (with the same type as the number) and then apply the function to the float number. If the number is a float, the function will \n  first convert the float number to an integer (with the same type as the number) and then apply the function to the integer. \n  \n  Examples:\n  For n = 1.5 the output should be 2.25\n  For n = -1.5 the output should be -2.25\n  For n = -1.5 the output should be -2.25\n  For n = 1.5 the output should be 2.25\n  */\nconst triangular = (n) => {\n  if (typeof n === 'number') {\n    let n2 = Math.floor(n);\n    let n3 = n - n2;\n    return n2 * n2 + n3 * n3;\n  }\n  return n * n;\n};\n\n/*\n  \"double\"\n  This function takes a number and multiplies it by two. The number may be an integer or a float. If the number is an integer, the \n  function will first convert it to a float (with the same type as the number) and then apply the function to the float number. \n  If the number is a float, the function will first convert the float number to an integer (with the same type as the number) and then apply the function to the integer. \n  \n  Examples:\n  For n = 3 the output should be 6\n  For n = 3.25 the output should be 24\n  For n = -3.25 the output should be -24\n  For n = -3.25 the output should be -24\n  For n = 3 the output should be 6\n  */\nconst double = (n) => {\n  if (typeof n === 'number') {\n    let n2 = Math.floor(n);\n    let n3 = n - n2;\n    return n2 * n2 + n3 * n3;\n  }\n  return n * n;\n};\n\n/*\n  \"triple\"\n  This function takes a number and multiplies it by three. The number may be an integer or a float. If the number is an integer, the \n  function will first convert it to a float (with the same type as the number) and then apply the function to the float number. \n  If the number is a float, the function will first convert the float number to an integer (with the same type as the number) and then apply the function to the integer. \n  \n  Examples:\n  For n = 3 the output should be 9\n  For n = 3.25 the output should be 27\n  For n = -3.25 the output should be -27\n  For n = -3.25 the output should be -27\n  For n = 3 the output should be 9\n  */\nconst triple = (n) => {\n  if (typeof n === 'number') {\n    let n2 = Math.floor(n);\n    let n3 = n - n2;\n    return n2 * n2 + n3 * n3;\n  }\n  return n * n;\n};\n\nexport { sum_squares, squared, pow, triangular, double, triple };\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n    let arr = sentence.split(' ')\n    arr.forEach(x => {\n        let isPrime = isPrime(x.length)\n        if(isPrime) {\n            let new_array = []\n            new_array = arr.filter((a, i, arr) => {\n                return (i === 0 || arr[i - 1]!== a)\n            })\n            console.log(new_array)\n            return\n        }\n        else {\n            return\n        }\n    })\n}\n\nfunction isPrime(num) {\n    for(let i = 2; i < num; i++) {\n        if(num % i === 0) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  You are given two strings, first contains numbers and the second contains letters.\n  The numbers can be of any length.\n  The letters can be of any length.\n  The order of the letters is important.\n\n  Return the combination of both strings\n  that gives the maximum combination.\n\n  Example 1:\n      Input: num = \"12345\", letter = \"abcde\"\n      Output: \"adcb\"\n\n  Example 2:\n      Input: num = \"12345\", letter = \"abcde\"\n      Output: \"abcd\"\n\n  Constraints:\n      * 1 <= len(num) <= 10\n      * len(num) <= len(letter)\n      * num contains only numbers\n      * letter contains only letters\n*/\nconst combine = (num, letter) => {\n    let arr = num.split('')\n    arr.forEach((a, i) => {\n        if(i === 0) {\n            arr.splice(i, 1, a)\n        }\n        else {\n            arr.splice(i, 1, a + letter[i - 1])\n        }\n    })\n    let str = arr.join('')\n    return str\n}\n\n/*\n  You are given a string and a dictionary, the string can contain any characters and the dictionary contains words that are in the string.\n  The order of the words in the dictionary is important.\n  The order of the characters in the string is not important.\n\n  Return a string that contains the words from the string\n  in the order they are in the dictionary.\n\n  Example 1:\n      Input: str = \"Hello my name is John\"\n      Output: \"my\"\n\n  Example 2:\n      Input: str = \"hello my name is John\"\n      Output: \"hello \"\n\n  Example 3:\n      Input: str = \"Hello my name is John\"\n      Output: \"John\"\n\n  Example 4:\n      Input: str = \"Hello my name is John\"\n      Output: \"John\"\n\n  Constraints:\n      * 1 <= len(str) <= 100\n      * str contains only letters and spaces\n      * 1 <= len(dictionary) <= 1000\n      * dictionary contains only letters and spaces\n      * str contains at least one word in the dictionary\n*/\nconst words_in_string = (str, dictionary) => {\n    let arr = str.split(' ')\n    let str_out = []\n    arr.forEach((a, i) => {\n        let a_in_dictionary = false\n        dictionary.split(' ').forEach((x, j) => {\n            if(a === x) {\n                a_in_dictionary = true\n            }\n        })\n        if(a_in_dictionary) {\n            str_out.push(a)\n        }\n        else {\n            str_out.push(a)\n        }\n    })\n    let str_out_string = str_out.join(' ')\n    return str_out_string\n}\n\n/*\n  Given a string, find the length of the longest substring without repeating characters.\n\n  Example 1:\n      Input: \"abcabcbb\"\n      Output: 3\n\n  Example 2:\n      Input: \"bbbbb\"\n      Output: 1\n\n  Constraints:\n      * 1 <= len(str) <= 1000\n      * str contains only letters\n*/\nconst length_of_longest_substring = (str) => {\n    let arr = str.split('')\n    let result = 1\n    let counter = 1\n    let max_length = 0\n    arr.forEach((a, i) => {\n        if(counter === 1) {\n            counter = 2\n        }\n        else {\n            counter = 1\n        }\n        if(i === 0) {\n            counter = 1\n        }\n        else {\n            if(a!== arr[i - 1]) {\n                counter = 1\n            }\n        }\n        if(counter === 2) {\n            max_length = a.length\n        }\n    })\n    return max_length\n}\n\n/*\n  Given two strings, a and b, return a string that contains the characters from the first string\n  but in the opposite order.\n\n  Example 1:\n      Input: a = \"Hello\", b = \"World\"\n      Output: \"World\"\n\n  Example 2:\n      Input: a = \"Hello\", b = \"World\"\n      Output: \"Hello\"\n\n  Constraints:\n      * 1 <= len(a) <= 100\n      * 1 <= len(b) <= 100\n      * a and b contain only letters\n*/\nconst reverse = (a, b) => {\n    let arr = a.split('')\n    let reversed = []\n    arr.forEach((a, i) => {\n        reversed.push(b[i])\n    })\n    return reversed.join('')\n}\n\n/*\n  Given a string, return the string with double characters replaced by their single counterparts.\n  E.g. Given \"aaabbbccc\", return \"aaaaccc\".\n\n  Example 1:\n      Input: a = \"aaabbbccc\"\n      Output: \"aaaaccc\"\n\n"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const d = n.split('/').reverse();\n  const r = d.reduce((acc, el) => {\n    const [k, v] = el.split('*').reverse();\n    if (k === 0) return acc;\n    return acc + v * acc;\n  }, 0);\n  return r === 0? false : x * r.toString();\n};\n\nconsole.log(simplify('1/3', '2/3'));\nconsole.log(simplify('1/3', '5/6'));\nconsole.log(simplify('1/3', '1/1'));\nconsole.log(simplify('1/3', '3/2'));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted_nums = [].concat(nums);\n  sorted_nums.sort((a, b) => {\n    const sum_a = sum_of_digits(a);\n    const sum_b = sum_of_digits(b);\n    return sum_a - sum_b;\n  });\n  return sorted_nums;\n};\n\nconst sum_of_digits = (num) => {\n  const num_str = num.toString();\n  let sum = 0;\n  for (let i = 0; i < num_str.length; i++) {\n    sum += parseInt(num_str[i]);\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let out = 0;\n  nums.forEach((num) => {\n    if (num > 10 && (num % 2 === 1 || num % 10 === 1)) {\n      out++;\n    }\n  });\n  return out;\n};\n\nexport default special_filter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const a = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        if (sum % 3 === 0) {\n          a.push([i, j, k])\n        }\n      }\n    }\n  }\n  return a.length\n}\n\nconsole.log(get_max_triples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if(!planet1) {\n    return [];\n  }\n  if(!planet2) {\n    return [];\n  }\n  var result = [];\n  for(var i = 0; i < 8; i++) {\n    var current = Math.abs(planet1.PlanetName.PlanetName - planet2.PlanetName.PlanetName);\n    var x = planet1.PlanetName.PlanetName;\n    var y = planet2.PlanetName.PlanetName;\n    if(x > y) {\n      x = planet2.PlanetName.PlanetName;\n      y = planet1.PlanetName.PlanetName;\n    }\n    var c = 0;\n    for(var j = 0; j < planet2.PlanetName.PlanetName.length; j++) {\n      if(x.PlanetName[j] == y.PlanetName[j]) {\n        c++;\n      }\n    }\n    var planet = {};\n    planet.PlanetName = {PlanetName: x.PlanetName, PlanetType: x.PlanetType, PlanetDistance: x.PlanetDistance};\n    planet.PlanetType = x.PlanetType;\n    planet.PlanetDistance = x.PlanetDistance;\n    result.push(planet);\n    console.log(result);\n  }\n  return result;\n};\n\nbf(\"Jupiter\", \"Neptune\");\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const len = lst.length\n  const lst_sorted = []\n  for (let i = 0; i < len; i++) {\n    const curr_sum = lst.reduce((acc, item, index) => acc + (index % 2 === 0? item.length : 0), 0)\n    lst_sorted.push(lst[i])\n    if (curr_sum % 2!== 0) {\n      lst_sorted.push(lst[i])\n    }\n  }\n  lst_sorted.sort()\n  return lst_sorted\n}\n\n/*\nWrite a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd length from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const len = lst.length\n  const lst_sorted = []\n  for (let i = 0; i < len; i++) {\n    const curr_sum = lst.reduce((acc, item, index) => acc + (index % 2 === 0? item.length : 0), 0)\n    lst_sorted.push(lst[i])\n    if (curr_sum % 2!== 0) {\n      lst_sorted.push(lst[i])\n    }\n  }\n  lst_sorted.sort()\n  return lst_sorted\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst prime = (n) => {\n  const arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\n    53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\n    131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\n    199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\n    281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367,\n    373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,\n    457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\n    557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,\n    641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\n    733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\n    827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\n    929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (n % arr[i] === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nconst isPrime = (n) => {\n  return n > 1 && prime(n);\n}\n\nconst x_or_y_prime = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_f = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_b = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_m = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_o = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_p = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_q = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_r = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_s = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_t = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_u = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_v = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_w = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_x = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_z = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime_a = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst x_or_y_prime"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  const n = lst.length\n  if (n === 0) return 0\n  let diff = 0\n  lst.forEach((x) => {\n    if (x % 2) {\n      diff += x * x\n    }\n  })\n  return diff\n}\n\nconst sum_of_squares = (lst) => {\n  const n = lst.length\n  if (n === 0) return 0\n  let sum = 0\n  lst.forEach((x) => {\n    sum += x * x\n  })\n  return sum\n}\n\nexport {\n  double_the_difference,\n  sum_of_squares\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const diff = [];\n  for (let i = 0; i < game.length; i++) {\n    diff.push(Math.abs(game[i] - guess[i]));\n  }\n  return diff;\n};\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n    // Sort extensions by strength\n    extensions.sort((a, b) => {\n        let capA = a.length;\n        let capB = b.length;\n        let smA = 0;\n        let smB = 0;\n        for (let i = 0; i < capA; i++) {\n            if (a.charAt(i).toUpperCase() === a.charAt(i)) {\n                smA++;\n            }\n        }\n        for (let i = 0; i < capB; i++) {\n            if (b.charAt(i).toLowerCase() === b.charAt(i)) {\n                smB++;\n            }\n        }\n        return (capA - smA) - (capB - smB);\n    });\n\n    // Find first strongest extension\n    for (let i = 0; i < extensions.length; i++) {\n        if (class_name.indexOf(extensions[i]) === 0) {\n            return class_name + '.' + extensions[i];\n        }\n    }\n};\n\nmodule.exports = strongest_extension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n    const m = a.length\n    const n = b.length\n    if(m!== n) return false\n    let f = true\n    for(let i = 0; i < m; i++){\n        if(a[i] === b[i]){\n            continue\n        }\n        let c = b.slice(i+1, n)\n        if(!cycpattern_check(a.slice(i+1), c)){\n            f = false\n            break\n        }\n    }\n    return f\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  const even_digit_count = num % 10 === 0? 1 : 0;\n  const odd_digit_count = num % 10 === 0? 0 : 1;\n  return [even_digit_count, odd_digit_count];\n};\n\nconsole.log(even_odd_count(123));\nconsole.log(even_odd_count(-12));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const one = 'I'\n  const five = 'V'\n  const ten = 'X'\n  const half = 'L'\n  const one_hundred = 'C'\n  const one_thousand = 'M'\n  const one_thousand_one = 'D'\n  const one_thousand_two = 'M'\n  const one_thousand_three = 'C'\n  const one_thousand_four = 'M'\n  const one_thousand_five = 'D'\n  const one_thousand_six = 'M'\n  const one_thousand_seven = 'D'\n  const one_thousand_eight = 'M'\n  const one_thousand_nine = 'D'\n  const two = 'II'\n  const four = 'IV'\n  const six = 'VI'\n  const eight = 'VIII'\n  const nine = 'IX'\n  const ten_thousand = 'X'\n  const hundred = 'C'\n  const hundred_thousand = 'M'\n  const hundred_thousand_two = 'MM'\n  const hundred_thousand_three = 'MMM'\n  const hundred_thousand_four = 'MMMM'\n  const hundred_thousand_five = 'MMMMX'\n  const hundred_thousand_six = 'MMMMXII'\n  const hundred_thousand_seven = 'MMMMXIII'\n  const hundred_thousand_eight = 'MMMMXIV'\n  const hundred_thousand_nine = 'MMMMXIX'\n  const hundred_thousand_ten = 'MMMMXX'\n  const hundred_thousand_eleven = 'MMMMXXI'\n  const hundred_thousand_twelve = 'MMMMXXII'\n  const hundred_thousand_thirteen = 'MMMMXXIII'\n  const hundred_thousand_fourteen = 'MMMMXXIV'\n  const hundred_thousand_fifteen = 'MMMMXXV'\n  const hundred_thousand_sixteen = 'MMMMXXVI'\n  const hundred_thousand_seventeen = 'MMMMXXVII'\n  const hundred_thousand_eighteen = 'MMMMXXVIII'\n  const hundred_thousand_nineteen = 'MMMMXXIX'\n  const one_hundred_thousand = 'MMMMXXX'\n  const one_hundred_thousand_two = 'MMMMXXXII'\n  const one_hundred_thousand_three = 'MMMMXXXIII'\n  const one_hundred_thousand_four = 'MMMMXXXIV'\n  const one_hundred_thousand_five = 'MMMMXXXV'\n  const one_hundred_thousand_six = 'MMMMXXXVI'\n  const one_hundred_thousand_seven = 'MMMMXXXVII'\n  const one_hundred_thousand_eight = 'MMMMXXXVIII'\n  const one_hundred_thousand_nine = 'MMMMXXXIX'\n  const two_hundred_thousand = 'MMMMXX'\n  const two_hundred_thousand_two = 'MMMMXXII'\n  const two_hundred_thousand_three = 'MMMMXXIII'\n  const two_hundred_thousand_four = 'MMMMXXIV'\n  const two_hundred_thousand_five = 'MMMMXXV'\n  const two_hundred_thousand_six = 'MMMMXXVI'\n  const two_hundred_thousand_seven = 'MMMMXXVII'\n  const two_hundred_thousand_eight = 'MMMMXXVIII'\n  const two_hundred_thousand_nine = 'MMMMXXIX'\n  const two_hundred_thousand_ten = 'MMMMXXX'\n  const two_hundred_thousand_eleven = 'MMMMXXXI'\n  const two_hundred_thousand_twelve = 'MMMMXXXII'\n  const two_hundred_thousand_thirteen = 'MMMMXXXIII'\n  const two_hundred_thousand_fourteen = 'MMMMXXXIV'\n  const two_hundred_thousand_fifteen = 'MMMMXXXV'\n  const two_hundred_thousand_sixteen = 'MMMMXXXVI'\n  const two_hundred_thousand_seventeen = 'MMMMXXXVII'\n  const two_hundred_thousand_eighteen = 'MMMMXXXVIII'\n  const two_hundred_thousand_nineteen = 'MMMMXXXIX'\n  const one_thousand = 'M'\n  const two_thousand = 'MM'\n  const three_thousand = 'MMM'\n  const four_thousand = 'MMMM'\n  const five_thousand = 'MMMMM'\n  const six_thousand = 'MMMMMM'\n  const seven_thousand = 'MMMMMMM'\n  const eight_thousand = 'MMMMMMMM'\n  const nine_thousand = 'MMMMMMMMM'\n  const ten_thousand = 'MMMMMMMMMM'\n  const one_thousand_one = 'MMMMMMMMMM'\n  const one_thousand_two = 'MMMMMMMMMMM'\n  const one_thousand_three = 'MMMMMMMMMMMM'\n  const one_thousand_four = 'MMMMMMMMMMMMM'\n  const one_thousand_five = 'MMMMMMMMMMMMMM'\n  const one_thousand_six = 'MMMMMMMMMMMMMMM'\n  const one_thousand_seven = 'MMMMMMMMMMMMMMMM'\n  const one_thousand_eight = 'MMMMMMMMMMMMMMMMM'\n  const one_thousand_nine = 'MMMMMMMMMMMMMMMMMM'\n  const two_thousand_one = 'MMMMMMMMMMMMMMMMMMM'\n  const two_thousand_two = 'MMMMMMMMMMMMMMMMMMMMM'\n  "}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n    let side_lengths = [a, b, c];\n    return (side_lengths.every(value => value === Math.sqrt(value * value / 4)));\n};\n\n/*\n  Given the lengths of the three sides of a triangle, return the hypotenuse of\n  the triangle.\n  Hypotenuse is the length of the longest side of the triangle.\n  Example:\n  hypotenuse_of_triangle(3, 4, 5) == 5\n  hypotenuse_of_triangle(1, 2, 3) == 3\n  */\nconst hypotenuse_of_triangle = (a, b, c) => {\n    return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n Given a triangle with non-negative lengths, return the area of the triangle.\n */\nconst triangle_area = (a, b, c) => {\n    return (Math.abs(a * b + b * c + c * a) / 2);\n};\n\n/*\n Given a triangle with non-negative lengths, return the length of the opposite\n triangle.\n */\nconst opposite_triangle = (a, b, c) => {\n    return (Math.sqrt(a * a + b * b + c * c) / 2);\n};\n\n/*\n Given a triangle with non-negative lengths, return the length of the longest\n  triangle side.\n */\nconst longest_triangle = (a, b, c) => {\n    return Math.max(a, Math.max(b, c));\n};\n\n/*\n Given a triangle with non-negative lengths, return the length of the shortest\n  triangle side.\n */\nconst shortest_triangle = (a, b, c) => {\n    return Math.min(a, Math.min(b, c));\n};\n\n/*\n Given the lengths of two sides of a triangle, return the length of the third\n  side of the triangle.\n */\nconst third_side = (a, b) => {\n    return ((a + b) / 2);\n};\n\n/*\n Given a triangle with non-negative lengths, return the height of the triangle.\n */\nconst triangle_height = (a, b, c) => {\n    return Math.max(a, Math.max(b, c));\n};\n\n/*\n Given a triangle with non-negative lengths, return the base of the triangle.\n */\nconst triangle_base = (a, b, c) => {\n    return Math.min(a, Math.min(b, c));\n};\n\n/*\n Given the lengths of two sides of a triangle, return the width of the\n  triangle.\n */\nconst triangle_width = (a, b) => {\n    return (Math.abs(a - b));\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the perimeter of the\n  triangle.\n */\nconst triangle_perimeter = (a, b, c) => {\n    return (a + b + c);\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the volume of the\n triangle.\n */\nconst triangle_volume = (a, b, c) => {\n    return (a * b * c);\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the area of the rectangle.\n */\nconst rectangle_area = (a, b) => {\n    return (a * b);\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the length of the opposite\n side of the rectangle.\n */\nconst rectangle_opposite_length = (a, b) => {\n    return (Math.abs(a - b));\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the length of the longest\n side of the rectangle.\n */\nconst rectangle_longest_length = (a, b) => {\n    return Math.max(a, b);\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the length of the shortest\n side of the rectangle.\n */\nconst rectangle_shortest_length = (a, b) => {\n    return Math.min(a, b);\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the length of the side\n  of the rectangle which is the same length as the longest side.\n */\nconst rectangle_middle_length = (a, b) => {\n    return (Math.min(Math.max(a, b), Math.max(a, b)));\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the length of the side\n  of the rectangle which is the same length as the shortest side.\n */\nconst rectangle_middle_length = (a, b) => {\n    return (Math.max(Math.min(a, b), Math.min(a, b)));\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the width of the\n  rectangle.\n */\nconst rectangle_width = (a, b) => {\n    return (Math.abs(a - b));\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the length of the opposite\n side of the rectangle.\n */\nconst rectangle_opposite_length = (a, b) => {\n    return (Math.abs(a - b));\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the height of the\n  rectangle.\n */\nconst rectangle_height = (a, b) => {\n    return (Math.max(a, b));\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the area of the rectangle.\n */\nconst rectangle_area = (a, b) => {\n    return (a * b);\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the perimeter of the\n  rectangle.\n */\nconst rectangle_perimeter = (a, b) => {\n    return (a + b);\n};\n\n/*\n Given the lengths of two sides of a rectangle, return the volume of the\n  rectangle.\n */\nconst rectangle_"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = '';\n  let max_len = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let char_count = 0;\n    for (let j = 0; j < word.length; j++) {\n      let c = word[j];\n      if (max_len < word.length) {\n        max_len = word.length;\n        max = word;\n      }\n      if (max_len === word.length) {\n        if (c < max[j]) {\n          max = word;\n          max_len = word.length;\n        }\n      } else {\n        if (c < max[j]) {\n          max = word;\n          max_len = word.length;\n        }\n      }\n      char_count++;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need, remaining];\n  const [total, left] = [number, remaining];\n  const [needed, left] = [need,"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_2 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_3 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_4 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_5 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_6 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_7 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_8 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_9 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n      result += operand[i + 1] // add the next expression\n    }\n  }\n  return result\n}\n\nconst do_algebra_10 = (operator, operand) => {\n  let result = 0\n  for(let i = 0; i < operator.length; i++){\n    let current = operator[i]\n    let next = operator[i + 1]\n    if(current === next){\n      result += operand[i] * current\n    }else{\n      result += operand[i] * current\n      result = result // calculate the previous expression\n"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let cnt = 0,\n        sz = s.length,\n        res = [];\n    for (let i = 0; i < sz; i++) {\n        if (s[i].toLowerCase() === s[i].toUpperCase()) {\n            cnt += 1;\n        } else {\n            res.push(cnt + (s[i].toLowerCase() || s[i].toUpperCase()));\n            cnt = 1;\n        }\n    }\n    if (cnt === 1) {\n        res.push(cnt + (s[sz - 1].toLowerCase() || s[sz - 1].toUpperCase()));\n    }\n    return res.join(\"\");\n};\n\nconsole.log(solve(\"1234\")); //4321\nconsole.log(solve(\"ab\")); //AB\nconsole.log(solve(\"#a@C\")); //#A@c\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  const hash = crypto.createHash('md5');\n  if (text.length) {\n    hash.update(text);\n  }\n  return hash.digest('hex');\n};\n\nexport default string_to_md5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n\n  while (a <= b) {\n    if (a % 2 === 0) {\n      result.push(a);\n    }\n\n    a = a + 1;\n  }\n\n  return result;\n};\n\nconsole.log(generate_integers(2, 8));\n<|endoftext|>"}
