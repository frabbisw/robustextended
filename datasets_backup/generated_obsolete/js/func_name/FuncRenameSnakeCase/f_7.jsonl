{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n    let min_element = numbers[0];\n    let max_element = numbers[0];\n    let same_element = false;\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_element) {\n            min_element = numbers[i];\n        }\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i] - min_element) < threshold) {\n            if (same_element) {\n                return true;\n            }\n            same_element = true;\n        } else {\n            same_element = false;\n        }\n    }\n\n    return false;\n}\n\n/*\n  >>> has_close_elements([1, 2, 3], 0.5)\n  false\n  >>> has_close_elements([1, 2, 3], 0.3)\n  true\n  >>> has_close_elements([1, 2, 3, 4, 5], 0.3)\n  false\n  */\nconst has_close_elements2 = (numbers, threshold) => {\n    let min_element = numbers[0];\n    let max_element = numbers[0];\n    let same_element = false;\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_element) {\n            min_element = numbers[i];\n        }\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (Math.abs(numbers[i] - min_element) < threshold) {\n            if (same_element) {\n                return true;\n            }\n            same_element = true;\n        } else {\n            same_element = false;\n        }\n    }\n\n    return false;\n}\n\nmodule.exports = {\n    has_close_elements,\n    has_close_elements2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  // console.log(paren_string);\n  const open_parens = paren_string.filter(c => c === '(');\n  const closed_parens = paren_string.filter(c => c === ')');\n  const balanced_open_parens = open_parens.filter(c => c === open_parens[open_parens.length - 1]);\n  const balanced_closed_parens = closed_parens.filter(c => c === closed_parens[closed_parens.length - 1]);\n  // console.log(open_parens, closed_parens, balanced_open_parens, balanced_closed_parens);\n  const balanced_open_brackets = balanced_open_parens.map(p => p.match(/\\(/g).map(p => p.replace(/\\(/g, '')).replace(/\\)/g, '')));\n  const balanced_closed_brackets = balanced_closed_parens.map(p => p.match(/\\)/g).map(p => p.replace(/\\)/g, ''));\n  // console.log(balanced_open_brackets, balanced_closed_brackets);\n  const balanced_open_brackets_array = balanced_open_brackets.filter(c => c.length > 0);\n  const balanced_closed_brackets_array = balanced_closed_brackets.filter(c => c.length > 0);\n  // console.log(balanced_open_brackets_array, balanced_closed_brackets_array);\n  const balanced_open_brackets_set = new Set(balanced_open_brackets_array);\n  const balanced_closed_brackets_set = new Set(balanced_closed_brackets_array);\n  const balanced_open_brackets_length = balanced_open_brackets_set.size;\n  const balanced_closed_brackets_length = balanced_closed_brackets_set.size;\n  const balanced_open_brackets_array_length = balanced_open_brackets_array.length;\n  const balanced_closed_brackets_array_length = balanced_closed_brackets_array.length;\n  // console.log(balanced_open_brackets_array_length, balanced_closed_brackets_array_length);\n  const open_brackets_to_remove = balanced_open_brackets_length - balanced_open_brackets_array_length;\n  const closed_brackets_to_remove = balanced_closed_brackets_length - balanced_closed_brackets_array_length;\n  const new_open_brackets = balanced_open_brackets_length - open_brackets_to_remove;\n  const new_closed_brackets = balanced_closed_brackets_length - closed_brackets_to_remove;\n  // console.log(new_open_brackets, new_closed_brackets);\n  const new_open_brackets_array = balanced_open_brackets_array.slice(0, new_open_brackets);\n  const new_closed_brackets_array = balanced_closed_brackets_array.slice(0, new_closed_brackets);\n  // console.log(new_open_brackets_array, new_closed_brackets_array);\n  const new_open_brackets_set = new Set(new_open_brackets_array);\n  const new_closed_brackets_set = new Set(new_closed_brackets_array);\n  const new_open_brackets_length = new_open_brackets_set.size;\n  const new_closed_brackets_length = new_closed_brackets_set.size;\n  // console.log(new_open_brackets_length, new_closed_brackets_length);\n  const new_open_brackets_array_length = new_open_brackets_array.length;\n  const new_closed_brackets_array_length = new_closed_brackets_array.length;\n  const new_open_brackets_set_length = new_open_brackets_set.size;\n  const new_closed_brackets_set_length = new_closed_brackets_set.size;\n  // console.log(new_open_brackets_array_length, new_closed_brackets_array_length);\n  const new_open_brackets_array_filtered = new_open_brackets_array.filter(c => c.length > 0);\n  const new_closed_brackets_array_filtered = new_closed_brackets_array.filter(c => c.length > 0);\n  // console.log(new_open_brackets_array_filtered, new_closed_brackets_array_filtered);\n  const new_open_brackets_array_filtered_length = new_open_brackets_array_filtered.length;\n  const new_closed_brackets_array_filtered_length = new_closed_brackets_array_filtered.length;\n  const new_open_brackets_set_filtered_length = new_open_brackets_set.size;\n  const new_closed_brackets_set_filtered_length = new_closed_brackets_set.size;\n  // console.log(new_open_brackets_array_filtered_length, new_closed_brackets_array_filtered_length);\n  return [new_open_brackets_array_filtered, new_closed_brackets_array_filtered];\n};\n\n// console.log(separate_paren_groups('(((())))'));\n\n/*\n\nSOLUTION\n\nThe first thing to do is to separate the parentheses into two groups.\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  let num = parseFloat(number);\n  let integer = Math.floor(num);\n  let decimal = num - integer;\n  return decimal;\n};\n\nexport {\n  truncate_number,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  const operationsLength = operations.length;\n  let current = 0;\n\n  for (let i = 0; i < operationsLength; i += 2) {\n    const currentBalance = operations[i];\n    const nextBalance = operations[i + 1];\n    if (currentBalance < 0 && currentBalance < nextBalance) {\n      return true;\n    }\n    current += currentBalance;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const { mean, median, mode, variance, standard_deviation } = _mean_absolute_deviation(numbers)\n\n  return _mean_absolute_deviation_from_mean_and_variance(numbers, mean, variance)\n}\n\n/*\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  2.0\n  */\nconst mean_absolute_deviation_from_median = (numbers) => {\n  const { median, mean, variance, standard_deviation } = _mean_absolute_deviation(numbers)\n  return _mean_absolute_deviation_from_mean_and_variance(numbers, mean, variance)\n}\n\n/*\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  2.0\n  */\nconst mean_absolute_deviation_from_mode = (numbers) => {\n  const { mode, mean, variance, standard_deviation } = _mean_absolute_deviation(numbers)\n  return _mean_absolute_deviation_from_mean_and_variance(numbers, mean, variance)\n}\n\n/*\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  2.0\n  */\nconst mean_absolute_deviation_from_variance = (numbers) => {\n  const { variance, mean, standard_deviation } = _mean_absolute_deviation(numbers)\n  return _mean_absolute_deviation_from_mean_and_variance(numbers, mean, variance)\n}\n\n/*\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  2.0\n  */\nconst mean_absolute_deviation_from_standard_deviation = (numbers) => {\n  const { standard_deviation, mean, variance } = _mean_absolute_deviation(numbers)\n  return _mean_absolute_deviation_from_mean_and_variance(numbers, mean, variance)\n}\n\nexport { mean_absolute_deviation }\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const output = new Array(len + 1);\n\n  for (let i = 0; i < len; i += 1) {\n    output[i] = numbers[i];\n  }\n\n  for (let i = len - 2; i >= 0; i -= 1) {\n    output[i + 1] = delimeter;\n    output[i] = numbers[i + 1];\n  }\n\n  return output;\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const stack = [];\n  const length = paren_string.length;\n\n  for (let i = 0; i < length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(i);\n    }\n    if (paren_string[i] === ')') {\n      const start = stack.pop();\n      const end = i;\n      const deepest = stack.pop();\n      const max_depth = Math.max(end - start, deepest - start);\n\n      return max_depth;\n    }\n  }\n};\n\nexport default parse_nested_parens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  let result = []\n  strings.forEach((string) => {\n    if (string.indexOf(substring) >= 0) {\n      result.push(string)\n    }\n  })\n  return result\n}\n\nexport default filter_by_substring\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let product = 1\n  let sum = 0\n  for (let number of numbers) {\n    sum += number\n    product *= number\n  }\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers and a number, return the sum of the first and the last number.\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n  [4, 7, 10]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n  [5, 8, 11]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n  [6, 9, 12]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6)\n  [7, 10, 13]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11)\n  [9, 14, 17]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12)\n  [10, 15, 18]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13)\n  [11, 16, 19]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14)\n  [12, 17, 20]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15)\n  [13, 18, 21]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 16)\n  [14, 19, 22]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 17)\n  [15, 20, 23]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18)\n  [16, 21, 24]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 19)\n  [17, 22, 25]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20)\n  [18, 23, 26]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 21)\n  [19, 24, 27]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 22)\n  [20, 25, 28]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 23)\n  [21, 26, 29]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 24)\n  [22, 27, 30]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 25)\n  [23, 28, 31]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 26)\n  [24, 29, 32]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 27)\n  [25, 30, 33]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 28)\n  [26, 31, 34]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 29)\n  [27, 32, 35]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 30)\n  [28, 33, 36]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 31)\n  [29, 34, 37]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 32)\n  [30, 35, 38]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 33)\n  [31, 36, 39]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 34)\n  [32, 37, 40]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 35)\n  [33, 38, 41]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 36)\n  [34, 39, 42]\n  >>> sum_of_the_last_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 37)\n  [35, 40, 43]\n  >>>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  let max = numbers[0];\n  let res = [];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    res.push(max);\n  }\n\n  return res;\n}\n\nmodule.exports = rolling_max;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let len = string.length;\n\n  for (let i = 0; i < len; i++) {\n    if (is_palindrome(string.slice(0, i + 1))) {\n      prefix += string.slice(0, i + 1);\n    } else {\n      break;\n    }\n  }\n  for (let i = len - 1; i >= 0; i--) {\n    if (is_palindrome(string.slice(i, len))) {\n      suffix += string.slice(i, len);\n    } else {\n      break;\n    }\n  }\n  return prefix + suffix;\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that contains the supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let len = string.length;\n\n  for (let i = 0; i < len; i++) {\n    if (is_palindrome(string.slice(0, i + 1))) {\n      prefix += string.slice(0, i + 1);\n    } else {\n      break;\n    }\n  }\n  for (let i = len - 1; i >= 0; i--) {\n    if (is_palindrome(string.slice(i, len))) {\n      suffix += string.slice(i, len);\n    } else {\n      break;\n    }\n  }\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that ends with the supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let len = string.length;\n\n  for (let i = 0; i < len; i++) {\n    if (is_palindrome(string.slice(len - i - 1, len))) {\n      prefix += string.slice(len - i - 1, len);\n    } else {\n      break;\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (is_palindrome(string.slice(i, len))) {\n      suffix += string.slice(i, len);\n    } else {\n      break;\n    }\n  }\n  return suffix + prefix;\n}\n\n/* Find the longest palindrome that contains the supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let len = string.length;\n\n  for (let i = 0; i < len; i++) {\n    if (is_palindrome(string.slice(len - i - 1, len))) {\n      prefix += string.slice(len - i - 1, len);\n    } else {\n      break;\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (is_palindrome(string.slice(i, len))) {\n      suffix += string.slice(i, len);\n    } else {\n      break;\n    }\n  }\n  return suffix + prefix;\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('')."}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  a = a.replace(/1/g, '');\n  b = b.replace(/1/g, '');\n  return a + b;\n};\n\n/* Input is a string consisting only of 1s and 0s.\n  Perform binary AND on this input and return result also as a string.\n  >>> string_and('010')\n  '010'\n  */\nconst string_and = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '');\n};\n\n/* Input is a string consisting only of 1s and 0s.\n  Perform binary OR on this input and return result also as a string.\n  >>> string_or('010')\n  '110'\n  */\nconst string_or = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '').replace(/1/g, '1');\n};\n\n/* Input is a string consisting of an even number of 1s and 0s.\n  Perform binary NOT on this input and return result also as a string.\n  >>> string_not('101')\n  '110'\n  */\nconst string_not = (a) => {\n  return a.replace(/1/g, '').replace(/0/g, '1');\n};\n\n/* Input is a string consisting of an odd number of 1s and 0s.\n  Perform binary NOT on this input and return result also as a string.\n  >>> string_not('011')\n  '100'\n  */\nconst string_complement = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '0');\n};\n\n/* Input is a string consisting of an even number of 1s and 0s.\n  Perform logical AND on this input and return result also as a string.\n  >>> string_and('101')\n  '101'\n  */\nconst string_and_logical = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '');\n};\n\n/* Input is a string consisting of an odd number of 1s and 0s.\n  Perform logical OR on this input and return result also as a string.\n  >>> string_or('011')\n  '111'\n  */\nconst string_or_logical = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '').replace(/1/g, '1');\n};\n\n/* Input is a string consisting of an even number of 1s and 0s.\n  Perform logical XOR on this input and return result also as a string.\n  >>> string_xor('101')\n  '110'\n  */\nconst string_xor_logical = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '').replace(/1/g, '1');\n};\n\n/* Input is a string consisting of an odd number of 1s and 0s.\n  Perform logical XOR on this input and return result also as a string.\n  >>> string_xor('011')\n  '100'\n  */\nconst string_complement_logical = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '').replace(/1/g, '0');\n};\n\n/* Input is a string consisting of an even number of 1s and 0s.\n  Perform logical AND on this input and return result also as a string.\n  >>> string_and('101')\n  '101'\n  */\nconst string_and_not_logical = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '');\n};\n\n/* Input is a string consisting of an odd number of 1s and 0s.\n  Perform logical OR on this input and return result also as a string.\n  >>> string_or('011')\n  '111'\n  */\nconst string_or_not_logical = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '').replace(/1/g, '1');\n};\n\n/* Input is a string consisting of an even number of 1s and 0s.\n  Perform logical XOR on this input and return result also as a string.\n  >>> string_xor('101')\n  '110'\n  */\nconst string_xor_not_logical = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '').replace(/1/g, '0');\n};\n\n/* Input is a string consisting of an odd number of 1s and 0s.\n  Perform logical XOR on this input and return result also as a string.\n  >>> string_xor('011')\n  '100'\n  */\nconst string_complement_not_logical = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '').replace(/1/g, '0');\n};\n\n/* Input is a string consisting of an even number of 1s and 0s.\n  Perform logical AND on this input and return result also as a string.\n  >>> string_and('101')\n  '101'\n  */\nconst string_and_not_logical_2 = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '');\n};\n\n/* Input is a string consisting of an odd number of 1s and 0s.\n  Perform logical OR on this input and return result also as a string.\n  >>> string_or('011')\n  '111'\n  */\nconst string_or_not_logical_2 = (a) => {\n  return a.replace(/0/g, '').replace(/1/g, '').replace(/1/g, '1');\n};\n\n/* Input is a string consisting of an even number of 1s and 0s.\n  Perform logical XOR on this input and return result also as a string.\n  >>> string_xor('101"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n    const longestString = () => {\n        let longest = 0;\n        for (let i = 0; i < strings.length; i++) {\n            if (strings[i].length > longest) {\n                longest = strings[i].length;\n            }\n        }\n        return longest;\n    }\n\n    return longestString(strings);\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (a === 1) return b\n  if (b === 1) return a\n  if (a > b) return greatest_common_divisor(a % b, b)\n  const x = greatest_common_divisor(a, b % a)\n  return x? x : greatest_common_divisor(b, a % b)\n}\n\n/* Return a power of two nearest to n\n  >>> power_of_two(16)\n  4\n  >>> power_of_two(17)\n  8\n  >>> power_of_two(19)\n  16\n  >>> power_of_two(21)\n  16\n  >>> power_of_two(0)\n  0\n  >>> power_of_two(3)\n  1\n  >>> power_of_two(4)\n  1\n  >>> power_of_two(-1)\n  0\n  >>> power_of_two(-2)\n  0\n  >>> power_of_two(-3)\n  0\n  */\nconst power_of_two = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n / 2\n  return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)))\n}\n\n/* Return a least common multiple of a and b\n  >>> lcm(3, 5)\n  15\n  >>> lcm(25, 15)\n  30\n  */\nconst lcm = (a, b) => {\n  if (b === 0) return a\n  if (a === 0) return b\n  if (a === 1) return b\n  if (b === 1) return a\n  return a * b / greatest_common_divisor(a, b)\n}\n\n/* Return a number of digits of n\n  >>> digits(10)\n  1\n  >>> digits(100)\n  2\n  >>> digits(10000)\n  4\n  >>> digits(100000)\n  5\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  11\n  >>> digits(10000000000)\n  12\n  >>> digits(100000000000)\n  13\n  >>> digits(1000000000000)\n  14\n  >>> digits(10000000000000)\n  15\n  >>> digits(100000000000000)\n  16\n  >>> digits(1000000000000000)\n  17\n  >>> digits(10000000000000000)\n  18\n  >>> digits(100000000000000000)\n  19\n  >>> digits(1000000000000000000)\n  20\n  >>> digits(10000000000000000000)\n  21\n  >>> digits(100000000000000000000)\n  22\n  >>> digits(1000000000000000000000)\n  23\n  >>> digits(10000000000000000000000)\n  24\n  >>> digits(100000000000000000000000)\n  25\n  >>> digits(1000000000000000000000000)\n  26\n  >>> digits(10000000000000000000000000)\n  27\n  >>> digits(100000000000000000000000000)\n  28\n  >>> digits(1000000000000000000000000000)\n  29\n  >>> digits(10000000000000000000000000000)\n  30\n  >>> digits(100000000000000000000000000000)\n  31\n  >>> digits(1000000000000000000000000000000)\n  32\n  >>> digits(10000000000000000000000000000000)\n  33\n  >>> digits(100000000000000000000000000000000)\n  34\n  >>> digits(1000000000000000000000000000000000)\n  35\n  >>> digits(10000000000000000000000000000000000)\n  36\n  >>> digits(100000000000000000000000000000000000)\n  37\n  >>> digits(1000000000000000000000000000000000000)\n  38\n  >>> digits(10000000000000000000000000000000000000)\n  39\n  >>> digits(100000000000000000000000000000000000000)\n  40\n  >>> digits(1000000000000000000000000000000000000000)\n  41\n  >>> digits(10000000000000000000000000000000000000000)\n  42\n  >>> digits(100000000000000000000000000000000000000000)\n  43\n  >>> digits(1000000000000000000000000000000000000000000)\n  44\n  >>> digits(10000000000000000000000000000000000000000000)\n  45\n  >>> digits(100000000000000000000000000000000000000000000)\n  46\n  >>> digits(1000000000000000000000000000000000000000000000)\n  47\n  >>> digits(10000000000000000000000000000000000000000000000)\n  48\n  >>> digits(100000000000000000000000000000000000000000000000)\n  49\n  >>> digits(1000000000000000000000000000000000000000000000000)\n  50\n  >>> digits(100000000000000000000000000000000000000000000000000)\n  51\n  >>> digits(1000000000000000000000000000000000000000000000000000)\n  52\n  >>> digits(10000000000000000000000000000000000000000000000000000)\n  53\n  >>> digits(100000000000000000000000000000000000000000000000000000)\n  54\n  >>> digits(1000000000000000000000000000000000000000000000000000000)\n  55\n  >>> digits(10000000000000000000000000000000000000000000000000000000)\n  56\n  >>> digits(100000000000000000000000000000000000000000000000000000000)\n  57\n  >>> digits(1000000000000000000000000000000000000000000000000000000000)\n  58\n  >>> digits(10000000000000000000000000000000000000000000000000000000000)\n  59\n  >>> digits(100000000000000000000000000000000000000000000000000000000000)\n  60\n  */\nconst digits = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return Math.floor(Math.log(n) / Math.log(10)) + 1\n}\n\n/* Return a number of decimal digits of n\n  >>> digits_decimal(10)\n  1\n  >>> digits_decimal(100)\n  2\n  >>> digits_decimal(10000)\n  4\n  >>> digits_decimal(100000)\n  5\n  >>> digits_decimal(1000000)\n  7\n  >>> digits_decimal(10000000)\n  8\n  >>> digits_decimal(100000000)\n  9\n  >>> digits_decimal(1000000000)\n  11\n  >>> digits_decimal(10000000000)\n  12\n  >>> digits_decimal(100000000000)\n  13\n  >>> digits_decimal(1000000000000)\n  14\n  >>> digits_decimal(10000000000000)\n  15\n  >>> digits_decimal(100000000000000)\n  16\n  >>> digits_decimal(1000000000000000)\n  17\n"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = [''];\n  const n = string.length;\n  for (let i = 0; i < n; i++) {\n    const prefix = string.substring(0, i + 1);\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['b', 'c', 'abc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = [''];\n  const n = string.length;\n  for (let i = 0; i < n; i++) {\n    const suffix = string.substring(i + 1, n);\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/* Return the longest substring in the input string\n  >>> longest_substring('abc')\n  'abc'\n  >>> longest_substring('a')\n  ''\n  >>> longest_substring('a' * 20)\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const str = Array(n + 1).join(' ')\n  return str\n}\n\n/* Return a string containing only the characters from A.\n  >>> string_without_chars(['a', 'b', 'c'])\n  'abc'\n  >>> string_without_chars(['a', 'b', 'c'], 'f')\n  'abcf'\n  */\nconst string_without_chars = (chars, ch) => {\n  return chars.map((c) => c === ch? '' : c)\n}\n\n/* Return a list of all the permutations of A.\n  >>> permutations(['a', 'b', 'c'])\n  [[['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  >>> permutations(['a', 'b', 'c'], 'f')\n  [[['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst permutations = (chars, ch) => {\n  const all_permutations = []\n  for (let i = 0; i < chars.length; i++) {\n    const current_permutation = chars.slice(0)\n    for (let j = 0; j < chars.length; j++) {\n      if (j!== i) {\n        current_permutation[j] = current_permutation[j] === ch? '' : current_permutation[j]\n      }\n    }\n    all_permutations.push(current_permutation)\n  }\n  return all_permutations\n}\n\n/* Return a list of all the permutations of A that are of length N.\n  >>> permutations_length(['a', 'b', 'c'], 3)\n  [[['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n  >>> permutations_length(['a', 'b', 'c'], 3, 'f')\n  [[['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n  */\nconst permutations_length = (chars, n, ch) => {\n  const all_permutations = []\n  for (let i = 0; i < chars.length; i++) {\n    const current_permutation = chars.slice(0)\n    for (let j = 0; j < chars.length; j++) {\n      if (j!== i) {\n        current_permutation[j] = current_permutation[j] === ch? '' : current_permutation[j]\n      }\n    }\n    if (current_permutation.length === n) {\n      all_permutations.push(current_permutation)\n    }\n  }\n  return all_permutations\n}\n\n/* Return a list of all the permutations of A that are of length N, starting from index\n  (indexing starts from 0).\n  >>> permutations_length_index(['a', 'b', 'c'], 3, 0)\n  [[['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n  >>> permutations_length_index(['a', 'b', 'c'], 3, 2)\n  [[['a', 'b', 'c'], ['a', 'b', 'c'], ['b', 'c', 'a'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'a', 'b']]\n  >>> permutations_length_index(['a', 'b', 'c'], 3, 2, 'f')\n  [[['a', 'b', 'c'], ['a', 'b', 'c'], ['b', 'c', 'a'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'a', 'b']]\n  */\nconst permutations_length_index = (chars, n, index, ch) => {\n  const all_permutations = []\n  for (let i = index; i < chars.length; i++) {\n    const current_permutation = chars.slice(0)\n    for (let j = index; j < chars.length; j++) {\n      if (j!== i) {\n        current_permutation[j] = current_permutation[j] === ch? '' : current_permutation[j]\n      }\n    }\n    if (current_permutation.length === n) {\n      all_permutations.push(current_permutation)\n    }\n  }\n  return all_permutations\n}\n\n/* Return the list of all permutations of A that are of length N starting from index\n  (indexing starts from 0).\n  >>> permutations_length_index_n(['a', 'b', 'c'], 3, 0)\n  [[['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n  >>> permutations_length_index_n(['a', 'b', 'c'], 3, 2)\n  [[['a', 'b', 'c'], ['a', 'b', 'c'], ['b', 'c', 'a'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'a', 'b']]\n  >>> permutations_length_index_n(['a', 'b', 'c'], 3, 2, 'f')\n  [[['a', 'b', 'c'], ['a', 'b', 'c'], ['b', 'c', 'a'], ['b', 'c', 'a'], ['"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (char_set.has(character.toLowerCase())) {\n      char_set.delete(character.toLowerCase());\n    } else {\n      char_set.add(character.toLowerCase());\n    }\n  }\n  return char_set.size;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  // Use the'reduce' function to make a list out of the string.\n  // The function takes in a string and returns an array with one element for each character.\n  // Each character is mapped to an integer.\n  const notes = reduce(music_string, (acc, note) => {\n    // If the note is 'o' or 'o|' or '.', it means that the note lasts four beats.\n    if (note === 'o' || note === 'o|' || note === '.') {\n      acc.push(4)\n    } else if (note === '|') {\n      acc.push(2)\n    } else {\n      acc.push(1)\n    }\n    return acc\n  }, [])\n\n  // Return a list of all the notes.\n  return notes\n}\n\nmodule.exports = parse_music\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n    let count = 0\n    let n = string.length\n    let m = substring.length\n\n    while (n - m >= 0) {\n        if (string[n - m] === substring[0]) {\n            count += 1\n        }\n\n        if (count === m) {\n            break\n        }\n\n        n -= 1\n    }\n\n    return count\n}\n\nmodule.exports = how_many_times\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const str = numbers.split(' ')\n  str.sort((a, b) => {\n    const numA = parseInt(a.replace(/\\D/g, ''), 10)\n    const numB = parseInt(b.replace(/\\D/g, ''), 10)\n    if (numA < numB) {\n      return -1\n    }\n    if (numA > numB) {\n      return 1\n    }\n    return 0\n  })\n  return str.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sort_numbers('three one five')\n  'five three one'\n  */\nconst sort_numbers_reverse = (numbers) => {\n  const str = numbers.split(' ')\n  str.sort((a, b) => {\n    const numA = parseInt(a.replace(/\\D/g, ''), 10)\n    const numB = parseInt(b.replace(/\\D/g, ''), 10)\n    if (numA < numB) {\n      return -1\n    }\n    if (numA > numB) {\n      return 1\n    }\n    return 0\n  })\n  return str.join(' ')\n}\n\nmodule.exports = {\n  sort_numbers,\n  sort_numbers_reverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  if (numbers.length === 0) {\n    return undefined;\n  } else if (numbers.length === 1) {\n    return numbers;\n  } else {\n    let first = numbers[0];\n    let last = numbers[numbers.length - 1];\n    let diff = last - first;\n    let closest = [];\n    let index = 0;\n    for (let i = 0; i < numbers.length - 1; i++) {\n      let next = numbers[i + 1];\n      let next_diff = next - first;\n      if (next_diff < diff) {\n        closest = [first, next];\n        diff = next_diff;\n        index = i + 1;\n      }\n    }\n    return closest;\n  }\n};\n\n/**\n  @method\n  */\nconst find_closest_elements_by_percentage = (numbers, percentage) => {\n  if (numbers.length === 0) {\n    return undefined;\n  } else if (numbers.length === 1) {\n    return numbers;\n  } else {\n    let first = numbers[0];\n    let last = numbers[numbers.length - 1];\n    let diff = last - first;\n    let closest = [];\n    let index = 0;\n    for (let i = 0; i < numbers.length - 1; i++) {\n      let next = numbers[i + 1];\n      let next_diff = next - first;\n      if (next_diff < diff * percentage) {\n        closest = [first, next];\n        diff = next_diff;\n        index = i + 1;\n      }\n    }\n    return closest;\n  }\n};\n\n/**\n  @method\n  */\nconst find_closest_elements_by_percentage_by_distance = (numbers, percentage) => {\n  if (numbers.length === 0) {\n    return undefined;\n  } else if (numbers.length === 1) {\n    return numbers;\n  } else {\n    let first = numbers[0];\n    let last = numbers[numbers.length - 1];\n    let diff = last - first;\n    let closest = [];\n    let index = 0;\n    for (let i = 0; i < numbers.length - 1; i++) {\n      let next = numbers[i + 1];\n      let next_diff = next - first;\n      if (next_diff < diff * percentage) {\n        closest = [first, next];\n        diff = next_diff;\n        index = i + 1;\n      }\n    }\n    return closest;\n  }\n};\n\n/**\n  @method\n  */\nconst find_closest_elements_by_percentage_by_distance_to_average = (numbers, percentage) => {\n  if (numbers.length === 0) {\n    return undefined;\n  } else if (numbers.length === 1) {\n    return numbers;\n  } else {\n    let average = sum(numbers) / numbers.length;\n    let closest = [];\n    let index = 0;\n    for (let i = 0; i < numbers.length - 1; i++) {\n      let next = numbers[i + 1];\n      let next_diff = next - average;\n      if (next_diff < next - average * percentage) {\n        closest = [average, next];\n        index = i + 1;\n      }\n    }\n    return closest;\n  }\n};\n\n/**\n  @method\n  */\nconst sum = (numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number;\n  }\n  return sum;\n};\n\nexport {\n  find_closest_elements,\n  find_closest_elements_by_percentage,\n  find_closest_elements_by_percentage_by_distance,\n  find_closest_elements_by_percentage_by_distance_to_average,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  let smallest = 0.0\n  let largest = 1.0\n  if (numbers.length < 2) {\n    return numbers\n  }\n\n  // If there is a single number, it becomes the largest\n  if (numbers.length === 1) {\n    smallest = largest = numbers[0]\n  }\n\n  // If there are two numbers, they are the smallest and largest\n  if (numbers.length === 2) {\n    smallest = largest = numbers[0]\n  }\n\n  // If there are more than two numbers, find the smallest number\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i]\n    }\n  }\n\n  // Find the largest number\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largest) {\n      largest = numbers[i]\n    }\n  }\n\n  // Find the ratio\n  let ratio = largest / smallest\n  // Create the new list\n  let new_numbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    new_numbers.push(numbers[i] / ratio)\n  }\n\n  return new_numbers\n}\n\n// Given a list of numbers, find the median\nconst median = (numbers) => {\n  // Find the median\n  let median_index = Math.floor((numbers.length + 1) / 2)\n  let mid_element = (numbers.length % 2 === 0)? numbers[median_index - 1] : numbers[median_index]\n  let median = (mid_element + numbers[median_index]) / 2\n\n  return median\n}\n\n// Given a list of numbers, return the mean\nconst mean = (numbers) => {\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n\n  return sum / numbers.length\n}\n\n// Given a list of numbers, find the range\nconst range = (numbers) => {\n  let min = numbers[0]\n  let max = numbers[0]\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n  }\n  return [min, max]\n}\n\n// Given a list of numbers, return the variance\nconst variance = (numbers) => {\n  let mean_of_list = mean(numbers)\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += (numbers[i] - mean_of_list) ** 2\n  }\n\n  return sum / numbers.length\n}\n\n// Given a list of numbers, return the standard deviation\nconst standard_deviation = (numbers) => {\n  let variance_of_list = variance(numbers)\n  let std_dev = Math.sqrt(variance_of_list)\n  return std_dev\n}\n\n// Given a list of numbers, return the mode\nconst mode = (numbers) => {\n  let counts = {}\n  let modes = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (counts.hasOwnProperty(numbers[i])) {\n      counts[numbers[i]]++\n    } else {\n      counts[numbers[i]] = 1\n    }\n  }\n\n  // Find the mode\n  for (let key in counts) {\n    if (counts[key] === 1) {\n      modes.push(key)\n    }\n  }\n\n  return modes\n}\n\n// Given a list of numbers, return the skewness\nconst skewness = (numbers) => {\n  let mean_of_list = mean(numbers)\n  let std_dev = standard_deviation(numbers)\n  let sum = 0\n  let sum_of_squares = 0\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]!== mean_of_list) {\n      sum += numbers[i]\n      sum_of_squares += (numbers[i] - mean_of_list) ** 2\n      count++\n    }\n  }\n\n  return sum_of_squares / count - (sum ** 2 / count)\n}\n\n// Given a list of numbers, return the kurtosis\nconst kurtosis = (numbers) => {\n  let mean_of_list = mean(numbers)\n  let std_dev = standard_deviation(numbers)\n  let sum = 0\n  let sum_of_squares = 0\n  let sum_of_squares_of_differences = 0\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]!== mean_of_list) {\n      sum += numbers[i]\n      sum_of_squares += (numbers[i] - mean_of_list) ** 2\n      sum_of_squares_of_differences += ((numbers[i] - mean_of_list) ** 2)\n      count++\n    }\n  }\n\n  return sum_of_squares_of_differences / count - (sum ** 2 / count) - ((sum_of_squares / count) ** 2)\n}\n\n// Given a list of numbers, return the median absolute deviation\nconst mad = (numbers) => {\n  let median = median(numbers)\n  let mean_of_list = mean(numbers)\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - median)\n  }\n\n  return sum /"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\nmodule.exports = filter_integers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return length of given string, treating it as a sequence of bytes\n  >>> strlen(\"abc\")\n  3\n  >>> strlen(\"a\\u0101\\u0100\")\n  4\n  >>> strlen(\"a\\u0101\\u0100\", \"utf-8\")\n  4\n  */\nconst strlen_bytes = (string, encoding) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(\"abc\", \"utf-8\")\n  3\n  >>> strlen(\"a\\u0101\\u0100\", \"utf-8\")\n  4\n  */\nconst strlen_bytes_utf8 = (string) => {\n  return string.length;\n};\n\n/* Return length of given string, treating it as a sequence of bytes,\n  given a specific encoding.\n  >>> strlen_bytes(\"abc\", \"utf-8\")\n  3\n  >>> strlen_bytes(\"a\\u0101\\u0100\", \"utf-8\")\n  4\n  */\nconst strlen_bytes_utf8 = (string, encoding) => {\n  return string.length;\n};\n\n// --------------------------------------------------------------------------\n// UTF-8-compatibility helper functions\n\n/* Convert string to UTF-8 byte array.\n  >>> utf8_encode(\"abc\")\n  Array(3)\n  >>> utf8_encode(\"a\\u0101\\u0100\")\n  Array(6)\n  >>> utf8_encode(\"a\\u0101\\u0100\", \"utf-8\")\n  Array(6)\n  */\nconst utf8_encode = (string, encoding) => {\n  return string.encode(encoding || \"utf-8\");\n};\n\n/* Convert UTF-8 byte array to string.\n  >>> utf8_decode(Array(3))\n  \"abc\"\n  >>> utf8_decode(Array(6))\n  \"a\\u0101\\u0100\"\n  >>> utf8_decode(Array(6), \"utf-8\")\n  \"a\\u0101\\u0100\"\n  */\nconst utf8_decode = (bytes, encoding) => {\n  return bytes.decode(encoding || \"utf-8\");\n};\n\n/* Return a list of the given strings, with the UTF-8 encoded versions.\n  >>> [utf8_encode(x) for x in [\"abc\", \"a\\u0101\\u0100\"]]\n  [Array(3), Array(6)]\n  >>> [utf8_decode(x) for x in [Array(3), Array(6)]]\n  [\"abc\", \"a\\u0101\\u0100\"]\n  */\nconst utf8_encode_list = (strings) => {\n  return strings.map((string) => utf8_encode(string));\n};\n\n/* Return a list of the given strings, with the UTF-8 decoded versions.\n  >>> [utf8_decode(x) for x in [Array(3), Array(6)]]\n  [\"abc\", \"a\\u0101\\u0100\"]\n  */\nconst utf8_decode_list = (bytes) => {\n  return bytes.map((byte) => utf8_decode(byte));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  while (n > 0) {\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    divisor++;\n  }\n  return 0;\n};\n\n/*\n  Given a number, return the largest number that divides it, smaller than the number\n  >>> largest_divisor(6)\n  2\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor2 = (n) => {\n  let divisor = 1;\n  while (n > 0) {\n    if (n % divisor < 0) {\n      return divisor;\n    }\n    divisor++;\n  }\n  return 0;\n};\n\n/*\n  Given a number n, return the smallest number that divides it, smaller than n\n  >>> largest_divisor(15)\n  5\n  >>> largest_divisor(6)\n  2\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  while (n > 0) {\n    if (n % divisor > 0) {\n      return divisor;\n    }\n    divisor++;\n  }\n  return 0;\n};\n\n/*\n  Given a number n, return the largest number that divides it, larger than n\n  >>> largest_divisor(15)\n  5\n  >>> largest_divisor(6)\n  5\n  */\nconst largest_divisor3 = (n) => {\n  let divisor = 1;\n  while (n > 0) {\n    if (n % divisor < 0) {\n      return divisor;\n    }\n    divisor++;\n  }\n  return 0;\n};\n\n/*\n  Given a number n, return the smallest number that divides it, larger than n\n  >>> largest_divisor(15)\n  5\n  >>> largest_divisor(6)\n  5\n  */\nconst smallest_divisor2 = (n) => {\n  let divisor = 1;\n  while (n > 0) {\n    if (n % divisor > 0) {\n      return divisor;\n    }\n    divisor++;\n  }\n  return 0;\n};\n\n/*\n  Given a number n, return the largest number that divides it, larger than n\n  >>> largest_divisor(15)\n  5\n  >>> largest_divisor(6)\n  5\n  */\nconst largest_divisor4 = (n) => {\n  let divisor = 1;\n  while (n > 0) {\n    if (n % divisor < 0) {\n      return divisor;\n    }\n    divisor++;\n  }\n  return 0;\n};\n\nconst test_cases = [\n  [6, 6],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  [15, 5],\n  [6, 2],\n  ["}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  const factor = (n, list) => {\n    if (n === 1) return\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        list.push(i)\n        factor(n / i, list)\n      }\n    }\n  }\n  factor(n, factors)\n  return factors\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeNumber = (primeNumbers, index) => {\n  return primeNumbers[index]\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactors = (primeNumbers, index) => {\n  return primeNumbers[index].factors\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeExponent = (primeNumbers, index) => {\n  return primeNumbers[index].exponent\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactor = (primeNumbers, index) => {\n  return primeNumbers[index].factor\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorization = (primeNumbers, index) => {\n  return primeNumbers[index].factorization\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationString = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorsString = (primeNumbers, index) => {\n  return primeNumbers[index].factorsString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeExponentString = (primeNumbers, index) => {\n  return primeNumbers[index].exponentString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorString = (primeNumbers, index) => {\n  return primeNumbers[index].factorString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationString = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationAsArray = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationArray\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationAsArrayString = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationArrayString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationAsString = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationAsStringArray = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationStringArray\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationAsStringAsArray = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationStringArray\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationAsStringAsArrayString = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationStringArrayString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationAsStringAsStringArray = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationStringArrayString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {number} index\n  * @return {number}\n  */\nconst getPrimeFactorizationAsStringAsStringArrayString = (primeNumbers, index) => {\n  return primeNumbers[index].factorizationStringArrayString\n}\n\n/**\n  * Return prime number at given index\n  * @param {array} primeNumbers\n  * @param {"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter(number => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\nexport default remove_duplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  let new_string = string;\n  new_string = new_string.replace(/[a-z]/g, letter => {\n    return letter.toUpperCase();\n  });\n  new_string = new_string.replace(/[A-Z]/g, letter => {\n    return letter.toLowerCase();\n  });\n  return new_string;\n};\n\n/*\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nexport default flip_case;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const joined = strings.reduce((acc, str) => acc + str, '');\n  return joined;\n};\n\nexport {\n  concatenate,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  if (strings.length === 0) return []\n  return strings.filter(s => startsWith(s, prefix))\n}\n\n/*\n  Check if a string starts with a given prefix.\n  >>> startsWith('a', 'a')\n  true\n  >>> startsWith('a', 'aa')\n  false\n  >>> startsWith('a', 'aaa')\n  false\n  >>> startsWith('aa', 'aaa')\n  true\n  >>> startsWith('ab', 'aaa')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  if (string.length < prefix.length) return false\n  return string.substring(0, prefix.length) === prefix\n}\n\n/*\n  Check if a string ends with a given suffix.\n  >>> endsWith('a', 'a')\n  true\n  >>> endsWith('a', 'aa')\n  false\n  >>> endsWith('a', 'aaa')\n  true\n  >>> endsWith('aa', 'aaa')\n  true\n  >>> endsWith('ab', 'aaa')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  if (string.length < suffix.length) return false\n  return string.substring(string.length - suffix.length) === suffix\n}\n\n/*\n  Returns true if the input string is an integer.\n  >>> is_integer('0')\n  true\n  >>> is_integer('1')\n  true\n  >>> is_integer('-1')\n  true\n  >>> is_integer('0.1')\n  false\n  >>> is_integer('0.1a')\n  false\n  >>> is_integer('1a')\n  false\n  >>> is_integer('a')\n  false\n  */\nconst is_integer = (string) => {\n  return (typeof string ==='string') &&\n    (string.match(/^\\s*(\\-?[0-9]+|[0-9]+(\\.[0-9]+)?(\\s*\\,[\\s\\.]+)?|(\\.[0-9]+))\\s*$/))\n}\n\n/*\n  Convert a string to an integer.\n  >>> parse_integer('0')\n  0\n  >>> parse_integer('1')\n  1\n  >>> parse_integer('-1')\n  -1\n  >>> parse_integer('0.1')\n  0.1\n  >>> parse_integer('1a')\n  1\n  >>> parse_integer('a')\n  NaN\n  */\nconst parse_integer = (string) => {\n  return parseInt(string)\n}\n\n/*\n  Returns the index of the first string that matches a given regex.\n  >>> index_of_match(regex, 'a')\n  0\n  >>> index_of_match(regex, 'aa')\n  1\n  >>> index_of_match(regex, 'aaa')\n  2\n  >>> index_of_match(regex, 'ab')\n  -1\n  */\nconst index_of_match = (regex, string) => {\n  const matches = string.match(regex)\n  if (matches) return matches.index\n  return -1\n}\n\n/*\n  Returns the string that matches a given regex, or an empty string\n  if there are no matches.\n  >>> match_by_regex(regex, 'a')\n  'a'\n  >>> match_by_regex(regex, 'aa')\n  'aa'\n  >>> match_by_regex(regex, 'aaa')\n  'aaa'\n  >>> match_by_regex(regex, 'ab')\n  ''\n  */\nconst match_by_regex = (regex, string) => {\n  const matches = string.match(regex)\n  if (matches) return matches[0]\n  return ''\n}\n\n/*\n  Returns the string that contains a given substring, or an empty string\n  if there are no matches.\n  >>> find_by_substring(substring, 'a')\n  'a'\n  >>> find_by_substring(substring, 'aa')\n  'aa'\n  >>> find_by_substring(substring, 'aaa')\n  'aaa'\n  >>> find_by_substring(substring, 'ab')\n  ''\n  */\nconst find_by_substring = (substring, string) => {\n  const index = index_of_match(substring, string)\n  if (index >= 0) return string.substring(index, index + substring.length)\n  return ''\n}\n\n/*\n  Returns the string that contains a given substring, or an empty string\n  if there are no matches.\n  >>> find_by_regex(regex, 'a')\n  'a'\n  >>> find_by_regex(regex, 'aa')\n  'aa'\n  >>> find_by_regex(regex, 'aaa')\n  'aaa'\n  >>> find_by_regex(regex, 'ab')\n  ''\n  */\nconst find_by_regex = (regex, string) => {\n  const matches = string.match(regex)\n  if (matches) return matches[0]\n  return ''\n}\n\n/*\n  Returns the string that matches a given regex, or an empty string\n  if there are no matches.\n  >>> find_by_regex_index(regex, 'a')\n  'a'\n  >>> find_by_regex_index(regex, 'aa')\n  'aa'\n  >>> find_by_regex_index(regex, 'aaa')\n  'aaa'\n  >>> find_by_regex_index(regex, 'ab')\n  ''\n  */\nconst find_by_regex_index = (regex, string) => {\n  const matches = string.match(regex)\n  if (matches) return matches[1]\n  return ''\n}\n\nmodule.exports = {\n  startsWith,\n  endsWith,\n  is_integer,\n  parse_integer,\n  index_of_match,\n  match_by_"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/**\n  * Return the length of the list.\n  *\n  * @param {Array} list\n  * @return {number}\n  * @example\n  *\n  * get_length([1, 2, 3, 4, 5])\n  * //=> 5\n  *\n  * get_length([])\n  * //=> 0\n  */\nconst get_length = (l) => {\n  return l.length\n}\n\n/**\n  * Return true if the list contains an item that is equal to the given item.\n  *\n  * @param {Array} list\n  * @param {any} item\n  * @return {boolean}\n  * @example\n  *\n  * contains_item([1, 2, 3, 4, 5], 3)\n  * //=> true\n  *\n  * contains_item([1, 2, 3, 4, 5], 6)\n  * //=> false\n  */\nconst contains_item = (l, item) => {\n  return l.includes(item)\n}\n\n/**\n  * Return the sum of all items in the list.\n  *\n  * @param {Array} list\n  * @return {number}\n  * @example\n  *\n  * sum_items([1, 2, 3, 4, 5])\n  * //=> 15\n  */\nconst sum_items = (l) => {\n  return l.reduce((a, b) => a + b, 0)\n}\n\n/**\n  * Return the average of all items in the list.\n  *\n  * @param {Array} list\n  * @return {number}\n  * @example\n  *\n  * average_items([1, 2, 3, 4, 5])\n  * //=> 3.0\n  */\nconst average_items = (l) => {\n  return sum_items(l) / get_length(l)\n}\n\n/**\n  * Return the index of the largest item in the list.\n  *\n  * @param {Array} list\n  * @return {number}\n  * @example\n  *\n  * largest_item([1, 2, 3, 4, 5])\n  * //=> 5\n  *\n  * largest_item([1, 2, 3, 4, 5, 6])\n  * //=> 5\n  */\nconst largest_item = (l) => {\n  return get_positive(l).sort((a, b) => b - a).pop()\n}\n\n/**\n  * Return the index of the smallest item in the list.\n  *\n  * @param {Array} list\n  * @return {number}\n  * @example\n  *\n  * smallest_item([1, 2, 3, 4, 5])\n  * //=> 1\n  *\n  * smallest_item([1, 2, 3, 4, 5, 6])\n  * //=> 1\n  */\nconst smallest_item = (l) => {\n  return get_positive(l).sort((a, b) => a - b).pop()\n}\n\n/**\n  * Return the item in the list at the given index.\n  *\n  * @param {Array} list\n  * @param {number} index\n  * @return {number}\n  * @example\n  *\n  * get_item([1, 2, 3, 4, 5], 3)\n  * //=> 4\n  */\nconst get_item = (l, index) => {\n  return l[index]\n}\n\n/**\n  * Return the index of the given item in the list.\n  *\n  * @param {Array} list\n  * @param {any} item\n  * @return {number}\n  * @example\n  *\n  * get_index([1, 2, 3, 4, 5], 3)\n  * //=> 3\n  *\n  * get_index([1, 2, 3, 4, 5], 6)\n  * //=> -1\n  */\nconst get_index = (l, item) => {\n  return l.indexOf(item)\n}\n\n/**\n  * Return the item in the list that is closest to the given item.\n  *\n  * @param {Array} list\n  * @param {any} item\n  * @return {number}\n  * @example\n  *\n  * closest_item([1, 2, 3, 4, 5], 3)\n  * //=> 4\n  *\n  * closest_item([1, 2, 3, 4, 5], 6)\n  * //=> 5\n  */\nconst closest_item = (l, item) => {\n  return get_index(l, item)\n}\n\n/**\n  * Return the item in the list that is farthest from the given item.\n  *\n  * @param {Array} list\n  * @param {any} item\n  * @return {number}\n  * @example\n  *\n  * farthest_item([1, 2, 3, 4, 5], 3)\n  * //=> 2\n  *\n  * farthest_item([1, 2, 3, 4, 5], 6)\n  * //=> 1\n  */\nconst farthest_item = (l, item) => {\n  return get_index(l, item)\n}\n\n/**\n  * Return the item in the list that is closest to the given item.\n  *\n  * @param {Array} list\n  * @param {any} item\n  * @return {number}\n  * @example\n  *\n  * closest_item([1, 2, 3, 4, 5], 3)\n  * //=> 4\n  *\n  * closest_item([1, 2, 3, 4, 5], 6)\n  * //=> 5\n  */\nconst get_closest_item = (l, item) => {\n  return get_index(l, item)\n}\n\n/**\n  * Return the item in the list that is farthest from the given item.\n  *\n  * @param {Array} list\n  * @param {any} item"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n    if (n === 2) return true\n    if (n === 1) return false\n    if (n % 2 === 0) return false\n    let x = Math.floor(Math.sqrt(n))\n    for (let i = 3; i <= x; i += 2) {\n        if (n % i === 0) return false\n    }\n    return true\n}\n\n/*Return the number of divisors of a number.\n  >>> num_divisors(1)\n  1\n  >>> num_divisors(2)\n  1\n  >>> num_divisors(3)\n  1\n  >>> num_divisors(4)\n  2\n  >>> num_divisors(6)\n  1\n  >>> num_divisors(7)\n  1\n  >>> num_divisors(100)\n  5\n  >>> num_divisors(101)\n  1\n  >>> num_divisors(1000)\n  1\n  >>> num_divisors(1001)\n  1\n  >>> num_divisors(10001)\n  2\n  >>> num_divisors(1000000)\n  1\n  >>> num_divisors(1000000000)\n  1\n  >>> num_divisors(10000000000)\n  1\n  >>> num_divisors(10000000000000)\n  2\n  >>> num_divisors(100000000000000)\n  1\n  >>> num_divisors(1000000000000000)\n  1\n  >>> num_divisors(10000000000000000)\n  2\n  >>> num_divisors(1000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000)\n  2\n  >>> num_divisors(10000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000)\n  2\n  >>> num_divisors(100000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000000000000)\n  2\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> num_divisors(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const coeffs = xs.slice(0, -1).reverse();\n  const N = coeffs.length;\n  const largest = coeffs[N - 1];\n  let x = largest;\n  let i = N;\n  while (x === largest) {\n    x = coeffs[--i];\n  }\n  if (i === 0) {\n    return x;\n  }\n  let x0 = largest;\n  let i = N;\n  while (x0 === largest) {\n    x0 = coeffs[--i];\n  }\n  if (i === 0) {\n    return x0;\n  }\n  while (x0!== largest) {\n    x = x0;\n    x0 = coeffs[--i];\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero finds all zero points.\n  returns an array of zero points\n  >>> round(findZero([1, 2, -3]), 2) # f(x) = 1 + 2x + 3x^2\n  [-0.5, 0.5]\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0, 1.0]\n  >>> round(findZero([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 2)\n  [-1.0,"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let list_to_be_sorted = [...l];\n  for (let i = 0; i < list_to_be_sorted.length; i++) {\n    if (i % 3 === 0) {\n      list_to_be_sorted[i] = l[i];\n    }\n  }\n  return list_to_be_sorted.sort( (a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\nconst sort_third_2 = (l) => {\n  let sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted.sort( (a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\nconst sort_third_3 = (l) => {\n  let sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted.sort( (a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\nmodule.exports = {\n  sort_third: sort_third,\n  sort_third_2: sort_third_2,\n  sort_third_3: sort_third_3\n}<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniq = {};\n  for (const e of l) {\n    if (uniq[e] === undefined) {\n      uniq[e] = true;\n    }\n  }\n  return Object.keys(uniq);\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  return sorted[sorted.length - 1];\n};\n\n/*\n  Returns a maximum element of a given array.\n  >>> max_element([2, 1, 3])\n  3\n  >>> max_element([1, -2, 1, -3, 4, 9, 0, -12])\n  9\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  13\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  14\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  16\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  18\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  21\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  24\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  25\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  26\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  27\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  28\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  29\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  30\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  31\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  32\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  33\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  34\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  35\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  36\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])\n  37\n  >>> max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])\n  38\n  >>> max_element([1, 2, 3, 4, 5"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let result = 0\n  for (let i = 1; i < n; i += 1) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      result += 1\n    }\n  }\n  return result\n}\n\nconsole.log(fizz_buzz(9))\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  return l.sort(a => a + b => a < b? 1 : -1);\n};\n\nexport {\n  sort_even,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = s.split('');\n  const len = groups.length;\n  var result = '';\n  for (let i = 0; i < len; i++) {\n    if (i % 3 == 0) {\n      if (groups[i] == '0')\n        result += groups[i];\n      else if (groups[i] == '1')\n        result += '0';\n      else if (groups[i] == '2')\n        result += '1';\n    }\n    else {\n      if (groups[i] == '0')\n        result += '0';\n      else if (groups[i] == '1')\n        result += '1';\n      else if (groups[i] == '2')\n        result += '2';\n    }\n  }\n  return result;\n}\n\nconst encode = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    if (i % 3 == 0) {\n      groups.push(s.slice(i, Math.min(i + 3, s.length)));\n    }\n    else {\n      groups.push(s[i]);\n    }\n  }\n  groups.push(s.slice(s.length - 3));\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode = (s) => {\n  const groups = s.split('');\n  const len = groups.length;\n  var result = '';\n  for (let i = 0; i < len; i++) {\n    if (i % 3 == 0) {\n      if (groups[i] == '0')\n        result += groups[i];\n      else if (groups[i] == '1')\n        result += '0';\n      else if (groups[i] == '2')\n        result += '1';\n    }\n    else {\n      if (groups[i] == '0')\n        result += '0';\n      else if (groups[i] == '1')\n        result += '1';\n      else if (groups[i] == '2')\n        result += '2';\n    }\n  }\n  return result;\n}\n\nconst encode_cyclic_encoded = (s) => {\n  const encoded = encodeCyclic(s);\n  const decoded = decodeCyclic(encoded);\n  return decoded;\n}\n\nconst decode_cyclic_encoded = (s) => {\n  const encoded = decodeCyclic(s);\n  const decoded = decodeCyclic(encoded);\n  return decoded;\n}\n\nmodule.exports = {\n  encode_cyclic,\n  decode_cyclic_encoded,\n  encode,\n  decode_cyclic_encoded,\n  decode,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n    let i = 0\n    let j = 1\n    let prime = 2\n    let fib = 1\n    while (prime < n) {\n        fib = prime + fib\n        if (fib % 2 === 0) {\n            prime = fib\n        } else {\n            prime = fib + 1\n        }\n        i += 1\n    }\n    return fib\n}\n\n/**\n  prime_fib_rec returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib_rec(1)\n  2\n  >>> prime_fib_rec(2)\n  3\n  >>> prime_fib_rec(3)\n  5\n  >>> prime_fib_rec(4)\n  13\n  >>> prime_fib_rec(5)\n  89\n  */\nconst prime_fib_rec = (n) => {\n    if (n === 1) {\n        return 2\n    } else if (n === 2) {\n        return 3\n    } else if (n === 3) {\n        return 5\n    } else {\n        return prime_fib_rec(n - 1) + prime_fib_rec(n - 2)\n    }\n}\n\n// console.log(prime_fib(4))\n// console.log(prime_fib_rec(4))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  return l.every((el) => {\n    return (el + l[l.indexOf(el) + 1] + l[l.indexOf(el) + 2]) === 0;\n  });\n};\n\nexport default triples_sum_to_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n\n  for (let i = 0; i < n; i++) {\n    for (let j = n - 1; j >= 0; j--) {\n      if (car_race_distance(i, j) <= CAR_RACE_MAX_DISTANCE) {\n        collisions += 1;\n      }\n    }\n  }\n\n  return collisions;\n};\n\nconst car_race_distance = (i, j) => {\n  let x = Math.abs(i - j);\n  let y = Math.max(i, j);\n  return x + y;\n};\n\nmodule.exports = car_race_collision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  return l.slice().map((x) => x + 1);\n};\n\n/*\n  >>> incr_list(['a', 'b', 'c'])\n  [1, 2, 3]\n  >>> incr_list(['b', 'a', 'd'])\n  [2, 3, 4]\n  >>> incr_list(['c', 'a', 'e'])\n  [3, 4, 5]\n  >>> incr_list(['e', 'b', 'c'])\n  [4, 5, 6]\n  */\nconst incr_list = (l) => {\n  const ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1);\n  }\n  return ret;\n};\n\n// const incr_list = (l) => {\n//   let ret = [];\n//   for (let i = 0; i < l.length; i++) {\n//     ret.push(l[i] + 1);\n//   }\n//   return ret;\n// };\n\nmodule.exports = incr_list;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  const p = []\n  for (const i of l) {\n    for (const j of l) {\n      if (i === j) {\n        continue\n      }\n      if (i + j === 0) {\n        p.push([i, j])\n      }\n    }\n  }\n  return p.length > 1\n}\n\nexport default pairs_sum_to_zero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const result = '';\n  const base_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n  for (let i = 0; i < x.length; i++) {\n    result += base_digits[parseInt(x[i], 10) % base];\n  }\n\n  return result;\n};\n\n/*\n  Return the number of 1's in x.\n  >>> count_ones(6)\n  2\n  >>> count_ones(5)\n  0\n  >>> count_ones(7)\n  1\n  */\nconst count_ones = (x) => {\n  let count = 0;\n\n  for (let i = 0; i < x.length; i++) {\n    count += parseInt(x[i], 10) % 2;\n  }\n\n  return count;\n};\n\n/*\n  Return the number of 0's in x.\n  >>> count_zeros(6)\n  2\n  >>> count_zeros(5)\n  0\n  >>> count_zeros(7)\n  2\n  */\nconst count_zeros = (x) => {\n  let count = 0;\n\n  for (let i = 0; i < x.length; i++) {\n    count += parseInt(x[i], 10) % 2;\n  }\n\n  return x.length - count;\n};\n\n/*\n  Return the number of 1's and 0's in x.\n  >>> count_ones_zeros(6)\n  2\n  >>> count_ones_zeros(5)\n  0\n  >>> count_ones_zeros(7)\n  2\n  */\nconst count_ones_zeros = (x) => {\n  return count_ones(x) + count_zeros(x);\n};\n\n/*\n  Return the number of 1's and 0's in x in base.\n  >>> count_ones_zeros_base(6, 3)\n  2\n  >>> count_ones_zeros_base(5, 2)\n  0\n  >>> count_ones_zeros_base(7, 3)\n  2\n  >>> count_ones_zeros_base(6, 4)\n  0\n  >>> count_ones_zeros_base(8, 4)\n  1\n  >>> count_ones_zeros_base(7, 4)\n  1\n  >>> count_ones_zeros_base(9, 4)\n  2\n  >>> count_ones_zeros_base(10, 4)\n  0\n  */\nconst count_ones_zeros_base = (x, base) => {\n  return count_ones(change_base(x, base)) + count_zeros(change_base(x, base));\n};\n\n/*\n  >>> count_ones_zeros_base(6, 3)\n  2\n  >>> count_ones_zeros_base(5, 2)\n  0\n  >>> count_ones_zeros_base(7, 3)\n  2\n  >>> count_ones_zeros_base(6, 4)\n  0\n  >>> count_ones_zeros_base(8, 4)\n  1\n  >>> count_ones_zeros_base(7, 4)\n  1\n  >>> count_ones_zeros_base(9, 4)\n  2\n  >>> count_ones_zeros_base(10, 4)\n  0\n  */\nexports.count_ones_zeros_base = count_ones_zeros_base;\n\n/*\n  Return the number of 1's in x.\n  >>> count_ones_base(6, 3)\n  2\n  >>> count_ones_base(5, 2)\n  0\n  >>> count_ones_base(7, 3)\n  2\n  >>> count_ones_base(6, 4)\n  0\n  >>> count_ones_base(8, 4)\n  1\n  >>> count_ones_base(7, 4)\n  1\n  >>> count_ones_base(9, 4)\n  2\n  >>> count_ones_base(10, 4)\n  0\n  */\nconst count_ones_base = (x, base) => {\n  return count_ones(change_base(x, base));\n};\n\n/*\n  Return the number of 0's in x.\n  >>> count_zeros_base(6, 3)\n  2\n  >>> count_zeros_base(5, 2)\n  0\n  >>> count_zeros_base(7, 3)\n  2\n  >>> count_zeros_base(6, 4)\n  0\n  >>> count_zeros_base(8, 4)\n  1\n  >>> count_zeros_base(7, 4)\n  1\n  >>> count_zeros_base(9, 4)\n  2\n  >>> count_zeros_base(10, 4)\n  0\n  */\nconst count_zeros_base = (x, base) => {\n  return count_zeros(change_base(x, base));\n};\n\n/*\n  Return the number of 1's and 0's in x.\n  >>> count_ones_zeros_base(6, 3)\n  2\n  >>> count_ones_zeros_base(5, 2)\n  0\n  >>> count_ones_zeros_base(7, 3)\n  2\n  >>> count_ones_zeros_base(6, 4)\n  0\n  >>> count_ones_zeros_base(8, 4)\n  1\n  >>> count_ones_zeros_base(7, 4)\n  1\n  >>> count_ones_zeros_base(9, 4)\n  2\n  >>> count_ones_zeros_base(10, 4)\n  0\n  */\nconst count_ones_zeros_base = (x, base) => {\n  return count_ones_base(x, base) + count_zeros_base(x, base);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return (h * a) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 6)\n  4.5\n  */\nconst triangle_area2 = (a, h) => {\n  return (h / 2) * a;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 10)\n  3.0\n  */\nconst triangle_area3 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(6, 2)\n  6.0\n  */\nconst triangle_area4 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(4, 9)\n  6.0\n  */\nconst triangle_area5 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(3, 9)\n  5.0\n  */\nconst triangle_area6 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(9, 6)\n  6.0\n  */\nconst triangle_area7 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 4)\n  4.0\n  */\nconst triangle_area8 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(3, 4)\n  4.0\n  */\nconst triangle_area9 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(9, 3)\n  3.0\n  */\nconst triangle_area10 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(4, 3)\n  3.0\n  */\nconst triangle_area11 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(3, 3)\n  3.0\n  */\nconst triangle_area12 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(2, 2)\n  4.0\n  */\nconst triangle_area13 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 5)\n  25.0\n  */\nconst triangle_area14 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(8, 8)\n  64.0\n  */\nconst triangle_area15 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(10, 10)\n  100.0\n  */\nconst triangle_area16 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(12, 12)\n  144.0\n  */\nconst triangle_area17 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(14, 14)\n  168.0\n  */\nconst triangle_area18 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(16, 16)\n  256.0\n  */\nconst triangle_area19 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(18, 18)\n  324.0\n  */\nconst triangle_area20 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(20, 20)\n  400.0\n  */\nconst triangle_area21 = (a, h) => {\n  return (h * h / (4 * a)) / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let a = 0\n  let b = 1\n  let sum = 0\n  while(n > 0){\n    sum = a + b\n    a = b\n    b = sum\n    n--\n  }\n  return sum\n}\n\nconsole.log(fib4(6))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort();\n  let middle = sorted.length / 2;\n  return (sorted[middle] + sorted[sorted.length - middle - 1]) / 2;\n};\n\n/**\n  * @summary:\n  * Given an array, return the longest increasing subsequence\n  * that contains at least one increasing element.\n  * @param {Array} l\n  * @return {Array}\n  *\n  * @example\n  *  [[3,4,5], [1,2,4], [2,2,3], [3,1,3], [1,2,4]]\n  *  [[3,4,5], [1,2,4], [2,2,3], [3,1,3], [1,2,4], [2,2,3], [1,2,4]]\n  *  [[3,4,5], [1,2,4], [2,2,3], [3,1,3], [1,2,4], [2,2,3], [1,2,4], [2,2,3], [1,2,4]]\n  *\n  *  [[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]\n  *  [[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]\n  *  [[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]\n  */\nconst longestIncreasingSubsequence = (l) => {\n  let n = l.length;\n  let increasing = l.slice(0);\n  let increasingCopy = increasing.slice(0);\n  let increasingCopyLength = increasingCopy.length;\n  let increasingLength = increasingCopyLength;\n  let i = 0;\n  let j = 0;\n  while (i < increasingCopyLength) {\n    let value = increasing[i];\n    while (j < increasingLength && increasing[j] <= value) {\n      increasingLength = j;\n      increasingCopyLength = increasingCopyLength - increasingLength;\n      increasing = increasing.slice(increasingLength);\n      increasingCopy = increasingCopy.slice(increasingLength);\n    }\n    i++;\n  }\n  increasingCopyLength = increasingCopyLength - increasingLength;\n  increasing = increasing.slice(increasingLength);\n  increasingCopy = increasingCopy.slice(increasingLength);\n  return increasing;\n};\n\nmodule.exports = {\n  median,\n  longestIncreasingSubsequence\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    let result = true;\n    let length = text.length;\n    let start = 0;\n    let end = length - 1;\n    while (start < end) {\n        if (text[start]!== text[end]) {\n            result = false;\n            break;\n        }\n        start++;\n        end--;\n    }\n    return result;\n};\n\n/*\n  Checks if given string is an anagram\n  >>> is_anagram('baa', 'aaa')\n  true\n  >>> is_anagram('baa', 'aaa')\n  false\n  >>> is_anagram('baba', 'baa')\n  true\n  */\nconst is_anagram = (str1, str2) => {\n    const sorted_str1 = str1.toLowerCase().split('');\n    const sorted_str2 = str2.toLowerCase().split('');\n    const result = sorted_str1.every(c => sorted_str2.indexOf(c)!== -1);\n    return result;\n};\n\n/*\n  Takes given string and returns the length of the string\n  >>> length('ab')\n  2\n  >>> length('abab')\n  4\n  >>> length('aaa')\n  3\n  */\nconst length = (text) => {\n    let result = 0;\n    const length = text.length;\n    for (let i = 0; i < length; i++) {\n        result += text[i].length;\n    }\n    return result;\n};\n\n/*\n  Takes given string and returns a reversed string\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  */\nconst reverse = (text) => {\n    let result = '';\n    const length = text.length;\n    for (let i = 0; i < length; i++) {\n        result += text[length - i - 1];\n    }\n    return result;\n};\n\n/*\n  Takes given string and returns the longest substring\n  >>> longest_substring('abcdefg')\n  'def'\n  >>> longest_substring('abcd')\n  'abcd'\n  >>> longest_substring('abcdabc')\n  'abc'\n  >>> longest_substring('z')\n  'z'\n  */\nconst longest_substring = (text) => {\n    let result = '';\n    const length = text.length;\n    let start = 0;\n    let end = 0;\n    while (start < length) {\n        end = start + 1;\n        while (end < length) {\n            if (text[start] === text[end]) {\n                result = text.substring(start, end + 1);\n            }\n            end++;\n        }\n        start++;\n    }\n    return result;\n};\n\n/*\n  Takes given string and returns the longest common substring\n  >>> longest_common_substring('abcd', 'abc')\n  'ab'\n  >>> longest_common_substring('abcd', 'abcde')\n  'ab'\n  >>> longest_common_substring('abcd', 'abcd')\n  'abcd'\n  >>> longest_common_substring('abcd', 'abcda')\n  'abcd'\n  >>> longest_common_substring('abcd', 'abcda')\n  'abcda'\n  */\nconst longest_common_substring = (str1, str2) => {\n    const result = [];\n    const length = str1.length;\n    let start = 0;\n    let end = 0;\n    while (start < length) {\n        end = start + 1;\n        while (end < length) {\n            if (str1[start] === str2[end]) {\n                result.push(str1.substring(start, end + 1));\n            }\n            end++;\n        }\n        start++;\n    }\n    return result;\n};\n\n/*\n  Takes given string and returns the longest common prefix\n  >>> longest_common_prefix('abcdefg', 'abcd')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcd')\n  'ab'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'abcdef'\n  >>> longest_common_prefix('abcdefg', 'abcdef')\n  'abcdef'\n  */\nconst longest_common_prefix = (str1, str2) => {\n    const result = [];\n    const length = str1.length;\n    let start = 0;\n    let end = 0;\n    while (start < length) {\n        end = start + 1;\n        while (end < length) {\n            if (str1[start] === str2[end]) {\n                result.push(str1.substring(start, end + 1));\n            }\n            end++;\n        }\n        start++;\n    }\n    return result;\n};\n\n/*\n  Takes given string and returns the longest common suffix\n  >>> longest_common_suffix('abcdefg', 'abcd')\n  'ab'\n  >>> longest_common_suffix('abcdefg', 'abcd')\n  'ab'\n  >>> longest_common_suffix('abcdefg', 'abcdef')\n  'abcdef'\n  >>> longest_common_suffix('abcdefg', 'abcdef')\n  'abcdef'\n  */\nconst longest_common_suffix = (str1, str2) => {\n    const result = [];\n    const length = str1.length;\n    let start = length - 1;\n    let end = length - 1;\n    while (start >= 0) {\n        end = start - 1;\n        while (end >= 0) {\n            if (str1[start] === str2[end]) {\n                result.push(str1.substring(start, end + 1));\n            }\n            end--;\n        }\n        start--;\n    }\n    return result;\n};\n\nmodule.exports = {\n    is_palindrome,\n    is_anagram,\n    length,"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let n1 = n % p;\n  if (n1 === 0) return n;\n  let n2 = n1 * 2;\n  if (n2 % p === 0) return n2;\n  return modp(n2, p);\n};\n\n/**\n  * Finds the prime p from a to b.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * @example\n  *\n  * findPrime(1, 10);\n  * // => 5\n  *\n  * findPrime(7, 11);\n  * // => 7\n  *\n  * findPrime(9, 10);\n  * // => 3\n  *\n  * findPrime(7, 9);\n  * // => 7\n  */\nconst findPrime = (a, b) => {\n  let n = a;\n  let p = b;\n  while (n < p) {\n    let modp = modp(n, p);\n    if (modp === 1) return n;\n    n = modp + p;\n  }\n  return p;\n};\n\n/**\n  * Finds the prime p from a to b.\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * @example\n  *\n  * findPrime(1, 10);\n  * // => 5\n  *\n  * findPrime(7, 11);\n  * // => 7\n  *\n  * findPrime(9, 10);\n  * // => 3\n  *\n  * findPrime(7, 9);\n  * // => 7\n  */\nconst findPrimePrime = (a, b) => {\n  let n = a;\n  let p = b;\n  while (n < p) {\n    let modp = modp(n, p);\n    if (modp === 1) return n;\n    n = modp + p;\n  }\n  return p;\n};\n\nexport { findPrime, findPrimePrime, modp, modpPrime };\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nmodule.exports = {\n  encodeShift,\n  decodeShift\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n    const vowels = ['a','e','i','o','u','A','E','I','O','U']\n    const lower_text = text.toLowerCase()\n    for (let i = 0; i < vowels.length; i++) {\n        const vowel = vowels[i]\n        const index = lower_text.indexOf(vowel)\n        if (index > -1) {\n            text = text.replace(vowel, '')\n        }\n    }\n    return text\n}\n\n// https://www.youtube.com/watch?v=rkH5f2_jZc\nconst main = () => {\n    let text = ''\n    let max_length = 0\n    const max_length_text = remove_vowels(text)\n    console.log(max_length_text)\n    if (max_length_text.length > max_length) {\n        max_length = max_length_text.length\n        text = max_length_text\n    }\n    let length = 0\n    let is_equal = false\n    while (length < max_length) {\n        text = text +''\n        if (remove_vowels(text).length > max_length) {\n            is_equal = true\n            break\n        }\n        length += 1\n    }\n    if (is_equal) {\n        console.log(text)\n    } else {\n        console.log(remove_vowels(text))\n    }\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  return l.every(n => n < t)\n}\n\n/**\n  * Return true if all numbers in the list l are equal to each other\n  *\n  * @param {Array} l\n  * @return {Boolean}\n  *\n  * @example\n  *\n  *     equals([1, 2, 3, 4, 5])\n  *     // true\n  *\n  *     equals([1, 2, 3, 4, 5, 5])\n  *     // false\n  *\n  */\nconst equals = (l) => {\n  return l.every(n => n === l[0])\n}\n\n/**\n  * Return true if all numbers in the list l are greater than threshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  *\n  * @example\n  *\n  *     greater_than([1, 2, 4, 10], 100)\n  *     // true\n  *\n  *     greater_than([1, 20, 4, 10], 5)\n  *     // false\n  *\n  */\nconst greater_than = (l, t) => {\n  return l.every(n => n > t)\n}\n\n/**\n  * Return true if all numbers in the list l are less than threshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  *\n  * @example\n  *\n  *     less_than([1, 2, 4, 10], 100)\n  *     // true\n  *\n  *     less_than([1, 20, 4, 10], 5)\n  *     // false\n  *\n  */\nconst less_than = (l, t) => {\n  return l.every(n => n < t)\n}\n\n/**\n  * Return true if all numbers in the list l are equal to t\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  *\n  * @example\n  *\n  *     equal([1, 2, 3, 4, 5], 5)\n  *     // true\n  *\n  *     equal([1, 2, 3, 4, 5], 1)\n  *     // false\n  *\n  */\nconst equal = (l, t) => {\n  return equals(l, t)\n}\n\n/**\n  * Return true if all numbers in the list l are greater than t\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  *\n  * @example\n  *\n  *     greater_than([1, 2, 4, 10], 100)\n  *     // true\n  *\n  *     greater_than([1, 20, 4, 10], 5)\n  *     // false\n  *\n  */\nconst greater_than = (l, t) => {\n  return greater_than(l, t)\n}\n\n/**\n  * Return true if all numbers in the list l are less than t\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  *\n  * @example\n  *\n  *     less_than([1, 2, 4, 10], 100)\n  *     // true\n  *\n  *     less_than([1, 20, 4, 10], 5)\n  *     // false\n  *\n  */\nconst less_than = (l, t) => {\n  return less_than(l, t)\n}\n\n/**\n  * Return true if all numbers in the list l are between threshold t1 and t2\n  *\n  * @param {Array} l\n  * @param {Number} t1\n  * @param {Number} t2\n  * @return {Boolean}\n  *\n  * @example\n  *\n  *     between([1, 2, 4, 10], 100, 100)\n  *     // true\n  *\n  *     between([1, 20, 4, 10], 5, 5)\n  *     // false\n  *\n  */\nconst between = (l, t1, t2) => {\n  return less_than(l, t2) && greater_than(l, t1)\n}\n\nmodule.exports = {\n  below_threshold,\n  equals,\n  greater_than,\n  less_than,\n  equal,\n  between\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/**\n  *Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/**\n  *Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  21\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/**\n  *Divide two numbers x and y\n  >>> divide(2, 3)\n  1\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\n/**\n  *Modulus of two numbers x and y\n  >>> modulus(2, 3)\n  2\n  >>> modulus(5, 7)\n  1\n  */\nconst modulus = (x, y) => {\n  return x % y;\n}\n\n/**\n  *Absolute value of two numbers x and y\n  >>> absoluteValue(2, 3)\n  2\n  >>> absoluteValue(5, 7)\n  7\n  */\nconst absoluteValue = (x, y) => {\n  return Math.abs(x) + Math.abs(y);\n}\n\n/**\n  *Sine of two numbers x and y\n  >>> sin(2, 3)\n  0.927295218001612\n  >>> sin(5, 7)\n  0.05497559753477\n  */\nconst sin = (x, y) => {\n  return Math.sin(x) + Math.sin(y);\n}\n\n/**\n  *Cosine of two numbers x and y\n  >>> cos(2, 3)\n  0.184594801573790\n  >>> cos(5, 7)\n  0.981627222965297\n  */\nconst cos = (x, y) => {\n  return Math.cos(x) + Math.cos(y);\n}\n\n/**\n  *Tangent of two numbers x and y\n  >>> tangent(2, 3)\n  0.6720985645254426\n  >>> tangent(5, 7)\n  0.964290795302385\n  */\nconst tangent = (x, y) => {\n  return Math.tan(x) + Math.tan(y);\n}\n\n/**\n  *Cotangent of two numbers x and y\n  >>> cotangent(2, 3)\n  0.927295218001612\n  >>> cotangent(5, 7)\n  0.1535168844118098\n  */\nconst cotangent = (x, y) => {\n  return Math.cos(x) / Math.cos(y);\n}\n\n/**\n  *Secant of two numbers x and y\n  >>> secant(2, 3)\n  2.5\n  >>> secant(5, 7)\n  2.5\n  */\nconst secant = (x, y) => {\n  return 1 / Math.tan(x) - 1 / Math.tan(y);\n}\n\n/**\n  *Cosecant of two numbers x and y\n  >>> cosecant(2, 3)\n  1.5\n  >>> cosecant(5, 7)\n  1.5\n  */\nconst cosecant = (x, y) => {\n  return 1 / Math.cot(x) - 1 / Math.cot(y);\n}\n\n/**\n  *Hyperbolic sine of two numbers x and y\n  >>> hyperbolicSine(2, 3)\n  2.016629582133556\n  >>> hyperbolicSine(5, 7)\n  0.4965984548695014\n  */\nconst hyperbolicSine = (x, y) => {\n  return Math.sinh(x) + Math.sinh(y);\n}\n\n/**\n  *Hyperbolic cosine of two numbers x and y\n  >>> hyperbolicCosine(2, 3)\n  0.927295218001612\n  >>> hyperbolicCosine(5, 7)\n  0.1535168844118098\n  */\nconst hyperbolicCosine = (x, y) => {\n  return Math.cosh(x) + Math.cosh(y);\n}\n\n/**\n  *Hyperbolic tangent of two numbers x and y\n  >>> hyperbolicTangent(2, 3)\n  1.948683298054700\n  >>> hyperbolicTangent(5, 7)\n  0.964290795302385\n  */\nconst hyperbolicTangent = (x, y) => {\n  return Math.tanh(x) + Math.tanh(y);\n}\n\n/**\n  *Hyperbolic cotangent of two numbers x and y\n  >>> hyperbolicCotangent(2, 3)\n  0.927295218001612\n  >>> hyperbolicCotangent(5, 7)\n  0.1535168844118098\n  */\nconst hyperbolicCotangent = (x, y) => {\n  return Math.coth(x) + Math.coth(y);\n}\n\n/**\n  *Hyperbolic secant of two numbers x and y\n  >>> hyperbolicSecant(2, 3)\n  2.5\n  >>> hyperbolicSecant(5, 7)\n  2.5\n  */\nconst hyperbolicSecant = (x, y) => {\n  return 1 / Math.tanh(x) - 1 / Math.tanh(y);\n}\n\n/**\n  *Hyperbolic cosecant of two numbers x and y\n  >>> hyperbolicCosecant(2, 3)\n  1.5\n  >>> hyperbolicCosecant(5, 7)\n  1.5\n  */\nconst hyperbolicCosecant = (x, y) => {\n  return 1 / Math.coth(x) - 1 / Math.coth(y);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> same_chars_rev('dddddddabc', 'abcd')\n  true\n  >>> same_chars_rev('dddddddabce', 'eabcd')\n  true\n  >>> same_chars_rev('abcd', 'dddddddabc')\n  false\n  >>> same_chars_rev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_rev = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[s0.length - i - 1]) return false;\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters in any order.\n  >>> same_chars_any('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_any('eabcdzzzz', 'dddzzzzzzzddeddabce')\n  false\n  >>> same_chars_any('eabcdzzzz', 'abcd')\n  false\n  >>> same_chars_any('eabcdzzzz', 'dddddddabc')\n  false\n  >>> same_chars_any('abcd', 'dddddddabc')\n  false\n  >>> same_chars_any('eabcd', 'dddddddabce')\n  false\n  */\nconst same_chars_any = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    for (let i = 0; i < s0.length; i++) {\n        if (same_chars(s0.slice(0, i + 1), s1.slice(0, i + 1))) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  Check if two words are the same, using any order.\n  >>> same_any('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_any('eabcdzzzz', 'dddzzzzzzzddeddabce')\n  false\n  >>> same_any('eabcdzzzz', 'abcd')\n  false\n  >>> same_any('eabcdzzzz', 'dddddddabc')\n  false\n  >>> same_any('abcd', 'dddddddabc')\n  false\n  >>> same_any('eabcd', 'dddddddabce')\n  false\n  */\nconst same_any = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    return same_chars_any(s0, s1) || same_chars_rev(s0, s1);\n};\n\nconst all_words = (words) => {\n    for (let i = 0; i < words.length; i++) {\n        if (same_any(words[i], words[(i + 1) % words.length]) === false) return false;\n    }\n    return true;\n};\n\n/*\n  Returns the first word in the list which is not in the second list.\n  >>> first_word_not_in(['abcd', 'eabcd'], ['abcd', 'eabcd', 'z', 'x'])\n  'eabcd'\n  >>> first_word_not_in(['abcd', 'eabcd'], ['abcd', 'eabcd', 'z', 'x', 'd', 'e'])\n  'eabcd'\n  >>> first_word_not_in(['abcd', 'eabcd', 'z', 'x'], ['abcd', 'eabcd'])\n  'z'\n  >>> first_word_not_in(['abcd', 'eabcd', 'z', 'x', 'd', 'e'], ['abcd', 'eabcd'])\n  'z'\n  >>> first_word_not_in(['abcd', 'eabcd', 'z', 'x', 'd', 'e'], ['abcd', 'eabcd', 'z', 'x', 'd', 'e'])\n  'eabcd'\n  */\nconst first_word_not_in = (words0, words1) => {\n    for (let i = 0; i < words0.length; i++) {\n        if (words1.indexOf(words0[i]) === -1) {\n            return words0[i];\n        }\n    }\n    return null;\n};\n\nexport {\n    same_chars,\n    same_chars_rev,\n    same_chars_any,\n    same_any,\n    all_words,\n    first_word_not_in\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else if (n === 3) {\n    return 2\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\nconsole.log(fib(10))\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let num_open = 0\n  let num_close = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      num_open++\n    }\n    if (brackets[i] === \">\") {\n      num_close++\n    }\n  }\n\n  return num_open === num_close\n}\n\nmodule.exports = {\n  is_balanced,\n  correct_bracketing,\n  is_balanced_regex,\n  is_balanced_regex_regex\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false;\n    prev = l[i];\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n// Test\n\nconst commonTest = common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]);\nconsole.log(commonTest);\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n};\n\nexport default largest_prime_factor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n    let sum = 0;\n    while (sum < n) {\n        sum += 1;\n    }\n    return sum;\n};\n\n/*\n  find_pythagorean_triple_sum is a function that finds a pythagorean triple sum.\n  >>> find_pythagorean_triple_sum(100)\n  (25, 15, 5)\n  >>> find_pythagorean_triple_sum(15)\n  (15, 10, 5)\n  >>> find_pythagorean_triple_sum(6)\n  (6, 5, 3)\n  >>> find_pythagorean_triple_sum(2)\n  (2, 2, 2)\n  >>> find_pythagorean_triple_sum(1)\n  (1, 1, 1)\n  >>> find_pythagorean_triple_sum(0)\n  Traceback (most recent call last):\n   ...\n  ValueError: Invalid number of numbers\n  >>> find_pythagorean_triple_sum(10, 15, 5)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(10, 15, 6)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(10, 15, 5, 6)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(1)\n  Traceback (most recent call last):\n   ...\n  ValueError: Invalid number of numbers\n  >>> find_pythagorean_triple_sum(2, 3, 4)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(2, 4, 3)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(10, 5, 2)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(10, 5, 6)\n  (10, 5, 6)\n  >>> find_pythagorean_triple_sum(3, 3, 5)\n  (3, 3, 5)\n  >>> find_pythagorean_triple_sum(3, 3, 4)\n  (3, 3, 4)\n  >>> find_pythagorean_triple_sum(3, 3, 2)\n  (3, 3, 2)\n  >>> find_pythagorean_triple_sum(3, 4, 3)\n  (3, 4, 3)\n  >>> find_pythagorean_triple_sum(3, 4, 5)\n  (3, 4, 5)\n  >>> find_pythagorean_triple_sum(3, 5, 3)\n  (3, 5, 3)\n  >>> find_pythagorean_triple_sum(3, 5, 4)\n  (3, 5, 4)\n  >>> find_pythagorean_triple_sum(3, 5, 2)\n  (3, 5, 2)\n  >>> find_pythagorean_triple_sum(4, 3, 3)\n  (4, 3, 3)\n  >>> find_pythagorean_triple_sum(4, 3, 5)\n  (4, 3, 5)\n  >>> find_pythagorean_triple_sum(4, 5, 3)\n  (4, 5, 3)\n  >>> find_pythagorean_triple_sum(4, 5, 4)\n  (4, 5, 4)\n  >>> find_pythagorean_triple_sum(4, 5, 2)\n  (4, 5, 2)\n  >>> find_pythagorean_triple_sum(5, 3, 3)\n  (5, 3, 3)\n  >>> find_pythagorean_triple_sum(5, 3, 4)\n  (5, 3, 4)\n  >>> find_pythagorean_triple_sum(5, 3, 2)\n  (5, 3, 2)\n  >>> find_pythagorean_triple_sum(5, 4, 3)\n  (5, 4, 3)\n  >>> find_pythagorean_triple_sum(5, 4, 5)\n  (5, 4, 5)\n  >>> find_pythagorean_triple_sum(5, 2, 3)\n  (5, 2, 3)\n  >>> find_pythagorean_triple_sum(5, 2, 4)\n  (5, 2, 4)\n  >>> find_pythagorean_triple_sum(5, 2, 2)\n  (5, 2, 2)\n  >>> find_pythagorean_triple_sum(1)\n  Traceback (most recent call last):\n   ...\n  ValueError: Invalid number of numbers\n  >>> find_pythagorean_triple_sum(0)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(0, 1)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(0, 1, 1)\n  Traceback (most recent call last):\n   ...\n  ValueError: Not a pythagorean triple sum\n  >>> find_pythagorean_triple_sum(0, 1, 1, 1)\n  Traceback (most recent call last"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_bracket = brackets[0]\n  const closing_bracket = brackets[brackets.length - 1]\n  return opening_bracket === \"(\" && closing_bracket === \")\"\n   ? correct_bracketing(brackets.slice(1, brackets.length - 1))\n    : brackets.every((bracket, i) => bracket === opening_bracket && brackets[i + 1] === closing_bracket)\n}\n\n/*\n  Returns a balanced bracketed string.\n\n  >>> balanced_bracketing(\"(\")\n  '('\n  >>> balanced_bracketing(\"()\")\n  ''\n  >>> balanced_bracketing(\"(()())\")\n  '((()()))'\n  >>> balanced_bracketing(\"())\")\n  '()'\n  */\nconst balanced_bracketing = (brackets) => {\n  const opening_bracket = brackets[0]\n  const closing_bracket = brackets[brackets.length - 1]\n  const balanced_brackets = brackets\n   .map((bracket, i) => brackets[i + 1] === closing_bracket\n     ? closing_bracket\n      : opening_bracket === bracket\n       ? opening_bracket\n        : balanced_brackets)\n   .join(\"\")\n  return balanced_brackets\n}\n\n/*\n  Returns the longest balanced bracketed string.\n\n  >>> longest_balanced_bracketing(\"(\")\n  '('\n  >>> longest_balanced_bracketing(\"())\")\n  ''\n  >>> longest_balanced_bracketing(\"()())\")\n  '()()'\n  >>> longest_balanced_bracketing(\"())\")\n  '()'\n  */\nconst longest_balanced_bracketing = (brackets) => {\n  const opening_bracket = brackets[0]\n  const closing_bracket = brackets[brackets.length - 1]\n  const longest_balanced_bracket = brackets.reduce((acc, bracket, i) =>\n    i === brackets.length - 1\n     ? (bracket === opening_bracket? opening_bracket : acc)\n      : longest_balanced_bracket(bracket, acc), opening_bracket)\n  return longest_balanced_bracket\n}\n\n/*\n  Returns the balanced string from a bracketed string.\n\n  >>> balanced_string(\"()\")\n  ''\n  >>> balanced_string(\"()())\")\n  '((()()))'\n  >>> balanced_string(\"(())\")\n  '()'\n  */\nconst balanced_string = (brackets) => {\n  return balanced_bracketing(brackets)\n   .replace(/[()]/g, \"\")\n}\n\n/*\n  Returns the longest balanced string from a bracketed string.\n\n  >>> longest_balanced_string(\"()\")\n  ''\n  >>> longest_balanced_string(\"()())\")\n  '((()()))'\n  >>> longest_balanced_string(\"(())\")\n  '()'\n  */\nconst longest_balanced_string = (brackets) => {\n  return longest_balanced_bracketing(brackets)\n   .replace(/[()]/g, \"\")\n}\n\n/*\n  Returns the longest balanced bracketed string.\n\n  >>> longest_balanced_bracketed_string(\"(\")\n  '('\n  >>> longest_balanced_bracketed_string(\"()())\")\n  '()()'\n  >>> longest_balanced_bracketed_string(\"())\")\n  '()'\n  */\nconst longest_balanced_bracketed_string = (brackets) => {\n  return longest_balanced_bracketing(brackets)\n   .replace(/[()]/g, \"\")\n}\n\n/*\n  Returns a balanced string from a bracketed string.\n\n  >>> balanced_string(\"(())\")\n  ''\n  >>> balanced_string(\"(())())\")\n  '((()()))'\n  >>> balanced_string(\"())\")\n  '()'\n  */\nconst balanced_string_from_brackets = (brackets) => {\n  return balanced_bracketing(brackets)\n   .replace(/[()]/g, \"\")\n}\n\n/*\n  Returns a balanced string from a string.\n\n  >>> balanced_string(\"\")\n  ''\n  >>> balanced_string(\"(())\")\n  '((()()))'\n  >>> balanced_string(\"(())())\")\n  '((()()))'\n  >>> balanced_string(\"())\")\n  '()'\n  */\nconst balanced_string_from_string = (string) => {\n  return balanced_bracketing(string.split(\"\"))\n   .replace(/[()]/g, \"\")\n}\n\n/*\n  Returns a balanced string from a string.\n\n  >>> longest_balanced_bracketed_string(\"(\")\n  '('\n  >>> longest_balanced_bracketed_string(\"()())\")\n  '()()'\n  >>> longest_balanced_bracketed_string(\"())\")\n  '()'\n  */\nconst longest_balanced_bracketed_string_from_string = (string) => {\n  return longest_balanced_bracketing(string.split(\"\"))\n   .replace(/[()]/g, \"\")\n}\n\n/*\n  Returns a balanced string from a string.\n\n  >>> longest_balanced_bracketed_string(\"(\")\n  '('\n  >>> longest_balanced_bracketed_string(\"()())\")\n  '()()'\n  >>> longest_balanced_bracketed_string(\"())\")\n  '()'\n  */\nconst longest_balanced_bracketed_string_from_brackets = (brackets) => {\n  return longest_balanced_bracketing(brackets.split(\"\"))\n   .replace(/[()]/g, \"\")\n}\n\n/*\n  Returns a balanced string from a string.\n\n  >>> balanced_string_from_string(\"()\")\n  ''\n  >>> balanced_string_from_string(\"(())\")\n  '((()()))'\n  >>> balanced_string_from_string(\"(())())\")\n  '((()()))'\n  >>> balanced_"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 0) {\n    return xs;\n  }\n  let last = xs[xs.length - 1];\n  const newXs = xs.slice(0, xs.length - 1);\n  const d = newXs.length + 1;\n  return newXs.map((_x, i) => {\n    return last - d * _x;\n  });\n};\n\nexport { derivative, linear, quadratic, cubic, quintic, derivative };\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib1 = 0,\n      fib2 = 1,\n      fib3 = 0;\n  let sum = 0;\n  while (fib3 < n) {\n    sum += fib2;\n    fib1 = fib2;\n    fib2 = fib3;\n    fib3 = sum;\n  }\n  return fib3;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const result = s.split('').map((c) => {\n    return vowels.indexOf(c)!== -1? 1 : 0\n  }).reduce((prev, curr) => {\n    return prev + curr\n  })\n  return result.length\n}\n\nexport default vowels_count\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n    let n = x.toString();\n    const size = n.length;\n    const reversed = reverse(n);\n    const shiftSize = reversed.length - shift;\n    let start = 0;\n    let end = shiftSize;\n    const reversedLength = reversed.length;\n    if (shift < 0) {\n        start = Math.abs(shift);\n    }\n    if (shiftSize > size) {\n        end = size;\n    }\n    return reversed.substring(start, end);\n};\n\nconst circular_shift_test = () => {\n    console.log(\"Test case for circular_shift\");\n    console.log(\"Circular shift of 12 by 1\");\n    console.log(circular_shift(12, 1));\n    console.log(\"Circular shift of 12 by 2\");\n    console.log(circular_shift(12, 2));\n    console.log(\"Circular shift of 12 by 3\");\n    console.log(circular_shift(12, 3));\n};\n\n// circular_shift_test();\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  const upper = s.match(/[A-Z]/g)\n  const digits = s.match(/\\d/g)\n  let sum = 0\n  upper.forEach(c => {\n    sum += c.charCodeAt(0) - 64\n  })\n  digits.forEach(c => {\n    sum += c.charCodeAt(0) - 48\n  })\n  return sum\n}\n\nconsole.log(digit_sum(\"aAaaaXa\"))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n    let count = 0\n    const a = s.split(\" \")\n    a.forEach(v => {\n        count += v\n    })\n    return n - count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [arr[0], 0];\n  let result_index = 0;\n  let min_even_value = Infinity;\n  let min_even_index = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      let value = arr[i];\n      let index = i;\n\n      if (value < min_even_value) {\n        min_even_value = value;\n        min_even_index = index;\n        result = [value, index];\n      }\n    }\n  }\n\n  if (arr.length === 0) {\n    return result;\n  }\n\n  if (min_even_index === -1) {\n    return [arr[0], 0];\n  }\n\n  return [arr[min_even_index], min_even_index];\n};\n\n/*\n  \"Given a list of non-negative numbers, find the largest sum that is less than or equal to the sum of the input numbers.\n\n  Example 1:\n      Input: [7,9,8]\n      Output: 15\n      Explanation: Sum of numbers is 17. Largest sum that is less than or equal to 17 is 15.\n\n  Example 2:\n      Input: [1,2,1]\n      Output: 3\n      Explanation: Sum of numbers is 4. Largest sum that is less than or equal to 4 is 3.\n\n  Example 3:\n      Input: []\n      Output: 0\n      Explanation: Sum of numbers is 0. Largest sum that is less than or equal to 0 is 0.\n\n  Constraints:\n      * 1 <= numbers.length <= 1000\n      * 1 <= numbers[i] <= 1000\n      * The input is guaranteed to be valid.\n\n  Follow up:\n    What if there are several solutions? Find the one that has the largest sum.\n\n    What if there are no valid solutions? How to handle such case?\n\n  Credits:\n    Special thanks to @ts for adding this problem and creating all test cases.\n*/\nconst findLargestSum = (numbers) => {\n  let total = 0;\n  let max_sum = 0;\n  let index = -1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    total += numbers[i];\n\n    if (total > max_sum) {\n      max_sum = total;\n      index = i;\n    }\n  }\n\n  return max_sum;\n};\n\n/*\n  \"Given an array of non-negative numbers and a number k, find the largest number that is a sum of at least k numbers in the array.\n\n  Example 1:\n      Input: [1,1,1,1,1,4], k = 6\n      Output: 6\n\n  Example 2:\n      Input: [1,2,3], k = 6\n      Output: 6\n\n  Example 3:\n      Input: [2,3], k = 6\n      Output: 6\n\n  Example 4:\n      Input: [1,2,3,4], k = 6\n      Output: 6\n\n  Example 5:\n      Input: [1,2,3,4,5,6,7], k = 6\n      Output: 6\n\n  Example 6:\n      Input: [1,2,3,4,5,6,7,8,9,10], k = 6\n      Output: 6\n\n  Example 7:\n      Input: [2,3,4,5,6,7,8,9,10], k = 6\n      Output: 6\n\n  Example 8:\n      Input: [2,3,4,5,6,7,8,9,10], k = 7\n      Output: 7\n\n  Example 9:\n      Input: [2,3,4,5,6,7,8,9,10], k = 8\n      Output: 8\n\n  Example 10:\n      Input: [2,3,4,5,6,7,8,9,10], k = 9\n      Output: 9\n\n  Example 11:\n      Input: [2,3,4,5,6,7,8,9,10], k = 10\n      Output: 10\n\n  Example 12:\n      Input: [2,3,4,5,6,7,8,9,10], k = 11\n      Output: 11\n\n  Example 13:\n      Input: [2,3,4,5,6,7,8,9,10], k = 12\n      Output: 12\n\n  Example 14:\n      Input: [2,3,4,5,6,7,8,9,10], k = 13\n      Output: 13\n\n  Example 15:\n      Input: [2,3,4,5,6,7,8,9,10], k = 14\n      Output: 14\n\n  Example 16:\n      Input: [2,3,4,5,6,7,8,9,10], k = 15\n      Output: 15\n\n  Constraints:\n      * 1 <= numbers.length <= 1000\n      * 1 <= numbers[i] <= 1000\n      * 1 <= k <= 10^6\n      * The input is guaranteed to be valid.\n\n  Follow up:\n    What if there are several solutions"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst[0];\n  const min = lst[0];\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return max - min;\n};\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  const min = sorted[0];\n  for (let i = 0; i < sorted.length; i++) {\n    if (min > sorted[i]) {\n      result.push(min);\n      min = sorted[i];\n    } else if (min < sorted[i]) {\n      result.push(sorted[i]);\n      break;\n    }\n  }\n  return result;\n};\n\nexport default strange_sort_list;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if(Math.abs(a+b-c) === 0) return -1\n  if(Math.abs(a+c-b) === 0) return -1\n  if(Math.abs(b+c-a) === 0) return -1\n\n  return Math.abs((a*b)/2 + (a*c)/2 + (b*c)/2 - (a*c)/4)\n}\n\nconst is_valid_triangle = triangle_area(3, 4, 5)\nconsole.log(is_valid_triangle)\n\nconst is_valid_triangle = triangle_area(1, 2, 10)\nconsole.log(is_valid_triangle)\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n    if (!q ||!Array.isArray(q)) return false;\n    if (!w || typeof w!== 'number') return false;\n\n    return q.every((element, index) => {\n        return element >= 0 && element <= w && (index === 0 || element === q[index - 1] + q[index]);\n    });\n};\n\nmodule.exports = will_it_fly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  const sortedArr = arr.slice().sort()\n  let changed = 0\n  let i = 0\n  let j = sortedArr.length - 1\n\n  while (i < j) {\n    if (sortedArr[i]!= sortedArr[j]) {\n      changed += 1\n      i++\n      j--\n    } else {\n      i++\n      j--\n    }\n  }\n  return changed\n}\n\nconsole.log(smallest_change([1, 2, 3, 2, 1]))\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smallest_change([1, 2, 3, 2, 1, 2, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (!lst1.length ||!lst2.length) return lst1;\n  let result = [...lst1,...lst2];\n  return result.filter(v => v.length <= lst2.length);\n};\n\nmodule.exports = total_match;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//console.log(is_multiply_prime(30));\n\n//console.log(is_multiply_prime(10000));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n    return x % n === 0 && x / n === n;\n};\n\n/*\nGiven a non-negative integer n, check whether it is a power of two.\n\nFollow up:\nCould you solve it without loops/recursion?\n */\nconst is_power_of_two = (n) => {\n    return n === (n & (n - 1));\n};\n\n/*\nGiven a non-negative integer n, check whether it is a power of three.\n\nFollow up:\nCould you solve it without loops/recursion?\n */\nconst is_power_of_three = (n) => {\n    return n === (n & (n - 1)) && n % 3 === 0;\n};\n\n/*\nGiven a non-negative integer n, check whether it is a power of five.\n\nFollow up:\nCould you solve it without loops/recursion?\n */\nconst is_power_of_five = (n) => {\n    return n === (n & (n - 1)) && n % 5 === 0;\n};\n\nconst is_power_of_six = (n) => {\n    return n === (n & (n - 1)) && n % 6 === 0;\n};\n\nconst is_power_of_seven = (n) => {\n    return n === (n & (n - 1)) && n % 7 === 0;\n};\n\nconst is_power_of_eight = (n) => {\n    return n === (n & (n - 1)) && n % 8 === 0;\n};\n\nconst is_power_of_nine = (n) => {\n    return n === (n & (n - 1)) && n % 9 === 0;\n};\n\nconst is_power_of_ten = (n) => {\n    return n === (n & (n - 1)) && n % 10 === 0;\n};\n\nconst is_power_of_eleven = (n) => {\n    return n === (n & (n - 1)) && n % 11 === 0;\n};\n\nconst is_power_of_twelve = (n) => {\n    return n === (n & (n - 1)) && n % 12 === 0;\n};\n\nconst is_power_of_thirteen = (n) => {\n    return n === (n & (n - 1)) && n % 13 === 0;\n};\n\nconst is_power_of_fourteen = (n) => {\n    return n === (n & (n - 1)) && n % 14 === 0;\n};\n\nconst is_power_of_fifteen = (n) => {\n    return n === (n & (n - 1)) && n % 15 === 0;\n};\n\nconst is_power_of_sixteen = (n) => {\n    return n === (n & (n - 1)) && n % 16 === 0;\n};\n\nconst is_power_of_seventeen = (n) => {\n    return n === (n & (n - 1)) && n % 17 === 0;\n};\n\nconst is_power_of_eighteen = (n) => {\n    return n === (n & (n - 1)) && n % 18 === 0;\n};\n\nconst is_power_of_nineteen = (n) => {\n    return n === (n & (n - 1)) && n % 19 === 0;\n};\n\nconst is_power_of_twenty = (n) => {\n    return n === (n & (n - 1)) && n % 20 === 0;\n};\n\nconst is_power_of_thirty = (n) => {\n    return n === (n & (n - 1)) && n % 30 === 0;\n};\n\nconst is_power_of_forty = (n) => {\n    return n === (n & (n - 1)) && n % 40 === 0;\n};\n\nconst is_power_of_fifty = (n) => {\n    return n === (n & (n - 1)) && n % 50 === 0;\n};\n\nconst is_power_of_sixty = (n) => {\n    return n === (n & (n - 1)) && n % 60 === 0;\n};\n\nconst is_power_of_seventy = (n) => {\n    return n === (n & (n - 1)) && n % 70 === 0;\n};\n\nconst is_power_of_eighty = (n) => {\n    return n === (n & (n - 1)) && n % 80 === 0;\n};\n\nconst is_power_of_ninety = (n) => {\n    return n === (n & (n - 1)) && n % 90 === 0;\n};\n\n/*\nGiven two non-negative integers n and k, return the number of k-digit\ntotient function (kT(n)).\n\nNote:\n1 ≤ n ≤ 99999999\n1 ≤ k ≤ 99999999\n\nkT(n) is also known as the nth triangular number.\n\nkT(n) = n * (n + 1) / 2\n*/\nconst get_k_digit_totient = (n, k) => {\n    const num = n * (n + 1) / 2;\n    const sum = 1;\n\n    for (let i = 2; i <= k; i++) {\n        sum += num / i;\n    }\n\n    return sum;\n};\n\n/*\nGiven two non-negative integers n and k, return the number of k-digit\nnumerator function (kN(n)).\n\nNote:\n1 ≤ n ≤ 99999999\n1 ≤ k ≤ 99999999\n\nkN(n) is also known as the nth triangular number.\n\nkN(n) = n * (n - 1) / 2\n*/\nconst get_k_digit_numerator = (n, k) => {\n    const num = n * (n - 1) / 2;\n    const sum = 1;"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 3 === 0) {\n    let x = (a / 3) * 3;\n    if (x === a) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  iscube,\n  iscube2,\n  iscube3,\n  iscube4,\n  iscube5,\n  iscube6,\n  iscube7,\n  iscube8,\n  iscube9,\n  iscube10,\n  iscube11,\n  iscube12,\n  iscube13,\n  iscube14,\n  iscube15,\n  iscube16,\n  iscube17,\n  iscube18,\n  iscube19,\n  iscube20,\n  iscube21,\n  iscube22,\n  iscube23,\n  iscube24,\n  iscube25,\n  iscube26,\n  iscube27,\n  iscube28,\n  iscube29,\n  iscube30,\n  iscube31,\n  iscube32,\n  iscube33,\n  iscube34,\n  iscube35,\n  iscube36,\n  iscube37,\n  iscube38,\n  iscube39,\n  iscube40,\n  iscube41,\n  iscube42,\n  iscube43,\n  iscube44,\n  iscube45,\n  iscube46,\n  iscube47,\n  iscube48,\n  iscube49,\n  iscube50,\n  iscube51,\n  iscube52,\n  iscube53,\n  iscube54,\n  iscube55,\n  iscube56,\n  iscube57,\n  iscube58,\n  iscube59,\n  iscube60,\n  iscube61,\n  iscube62,\n  iscube63,\n  iscube64,\n  iscube65,\n  iscube66,\n  iscube67,\n  iscube68,\n  iscube69,\n  iscube70,\n  iscube71,\n  iscube72,\n  iscube73,\n  iscube74,\n  iscube75,\n  iscube76,\n  iscube77,\n  iscube78,\n  iscube79,\n  iscube80,\n  iscube81,\n  iscube82,\n  iscube83,\n  iscube84,\n  iscube85,\n  iscube86,\n  iscube87,\n  iscube88,\n  iscube89,\n  iscube90,\n  iscube91,\n  iscube92,\n  iscube93,\n  iscube94,\n  iscube95,\n  iscube96,\n  iscube97,\n  iscube98,\n  iscube99,\n  iscube100,\n  iscube101,\n  iscube102,\n  iscube103,\n  iscube104,\n  iscube105,\n  iscube106,\n  iscube107,\n  iscube108,\n  iscube109,\n  iscube110,\n  iscube111,\n  iscube112,\n  iscube113,\n  iscube114,\n  iscube115,\n  iscube116,\n  iscube117,\n  iscube118,\n  iscube119,\n  iscube120,\n  iscube121,\n  iscube122,\n  iscube123,\n  iscube124,\n  iscube125,\n  iscube126,\n  iscube127,\n  iscube128,\n  iscube129,\n  iscube130,\n  iscube131,\n  iscube132,\n  iscube133,\n  iscube134,\n  iscube135,\n  iscube136,\n  iscube137,\n  iscube138,\n  iscube139,\n  iscube140,\n  iscube141,\n  iscube142,\n  iscube143,\n  iscube144,\n  iscube145,\n  iscube146,\n  iscube147,\n  iscube148,\n  iscube149,\n  iscube150,\n  iscube151,\n  iscube152,\n  iscube153,\n  iscube154,\n  iscube155,\n  iscube156,\n  iscube157,\n  iscube158,\n  iscube159,\n  iscube160,\n  iscube161,\n  iscube162,\n  iscube163,\n  iscube164,\n  iscube165,\n  iscube166,\n  iscube167,\n  iscube168,\n  iscube169,\n  iscube170,\n  iscube171,\n  iscube172,\n  iscube173,\n  iscube174,\n  iscube175,\n  iscube176,\n  iscube177,\n  iscube178,\n  iscube179,\n  iscube180,\n  iscube181,\n  iscube182,\n  iscube183,\n  iscube184,\n  iscube185,\n  iscube186,\n  iscube187,\n  iscube188,\n  iscube189,\n  iscube190,\n  iscube191,\n  iscube192,\n  iscube193,\n  iscube194,\n  iscube195,\n  iscube196,\n  iscube197,\n  iscube198,\n  iscube199,\n  iscube200,\n  iscube201,\n  iscube202,\n  iscube203,\n  iscube204,\n  iscube205,\n  iscube206,\n  iscube207,\n  iscube208,\n  iscube209,\n  iscube210,\n  iscube211,\n  iscube212,\n  iscube213,\n  iscube214,\n  iscube215,\n  iscube216,\n  iscube217,\n  iscube218,\n  iscube219,\n  iscube220,\n  iscube221,\n  iscube222,\n  iscube223,\n  iscube224,\n  iscube225,\n  iscube226,\n  iscube"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let num_hex = num.split(\"\").map((x) => x.charCodeAt(0));\n  let prime_num = 0;\n  for (let i = 0; i < num_hex.length; i++) {\n    let num = num_hex[i];\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    for (let j = 0; j < primes.length; j++) {\n      let num_prime = primes[j];\n      if (num % num_prime === 0) {\n        prime_num += 1;\n      }\n    }\n  }\n  return prime_num;\n};\n\nconst check_prime = (num) => {\n  let num_hex = num.split(\"\").map((x) => x.charCodeAt(0));\n  let prime_num = 0;\n  for (let i = 0; i < num_hex.length; i++) {\n    let num = num_hex[i];\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    for (let j = 0; j < primes.length; j++) {\n      let num_prime = primes[j];\n      if (num % num_prime === 0) {\n        prime_num += 1;\n      }\n    }\n  }\n  return prime_num;\n};\n\nconst check_prime_hex = (num) => {\n  let num_hex = num.split(\"\").map((x) => x.charCodeAt(0));\n  let prime_num = 0;\n  for (let i = 0; i < num_hex.length; i++) {\n    let num = num_hex[i];\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = ''\n  while (decimal > 0) {\n    binary = (decimal & 1) + binary\n    decimal = decimal >> 1\n  }\n  return binary + 'db'\n}\n\n/*\n  This is the task you will be asked to write.\n  \n  The function should return a string. Each character in the string will be '0' or '1'.\n  Each character in the string will represent a binary number, that you have to convert.\n\n  Examples:\n  binary_to_decimal(1)  # returns \"1\"\n  binary_to_decimal(10) # returns \"100\"\n  binary_to_decimal(100) # returns \"111100000\"\n  binary_to_decimal(111100000) # returns \"11111111111111111\"\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = 0\n  while (binary > 0) {\n    decimal = (decimal << 1) + binary % 2\n    binary = binary / 2\n  }\n  return decimal\n}\n\n/*\n  This is the task you will be asked to write.\n  \n  The function should return a string. Each character in the string will be '0' or '1'.\n  Each character in the string will represent a binary number, that you have to convert.\n\n  Examples:\n  binary_to_decimal(1)  # returns \"1\"\n  binary_to_decimal(10) # returns \"100\"\n  binary_to_decimal(100) # returns \"111100000\"\n  binary_to_decimal(111100000) # returns \"11111111111111111\"\n  */\nconst binary_to_decimal_conversion = (binary) => {\n  let decimal = 0\n  while (binary > 0) {\n    decimal = (decimal << 1) + binary % 2\n    binary = binary / 2\n  }\n  return decimal\n}\n\n/*\n  This is the task you will be asked to write.\n  \n  The function should return a string. Each character in the string will be '0' or '1'.\n  Each character in the string will represent a binary number, that you have to convert.\n\n  Examples:\n  binary_to_decimal(1)  # returns \"1\"\n  binary_to_decimal(10) # returns \"100\"\n  binary_to_decimal(100) # returns \"111100000\"\n  binary_to_decimal(111100000) # returns \"11111111111111111\"\n  */\nconst binary_to_decimal_conversion_reverse = (binary) => {\n  let decimal = 0\n  while (binary > 0) {\n    decimal = (decimal << 1) + binary % 2\n    binary = binary / 2\n  }\n  return decimal\n}\n\n/*\n  This is the task you will be asked to write.\n  \n  The function should return a string. Each character in the string will be '0' or '1'.\n  Each character in the string will represent a binary number, that you have to convert.\n\n  Examples:\n  binary_to_decimal(1)  # returns \"1\"\n  binary_to_decimal(10) # returns \"100\"\n  binary_to_decimal(100) # returns \"111100000\"\n  binary_to_decimal(111100000) # returns \"11111111111111111\"\n  */\nconst binary_to_decimal_conversion_reverse_reverse = (binary) => {\n  let decimal = 0\n  while (binary > 0) {\n    decimal = (decimal << 1) + binary % 2\n    binary = binary / 2\n  }\n  return decimal\n}\n\n/*\n  This is the task you will be asked to write.\n  \n  The function should return a string. Each character in the string will be '0' or '1'.\n  Each character in the string will represent a binary number, that you have to convert.\n\n  Examples:\n  binary_to_decimal(1)  # returns \"1\"\n  binary_to_decimal(10) # returns \"100\"\n  binary_to_decimal(100) # returns \"111100000\"\n  binary_to_decimal(111100000) # returns \"11111111111111111\"\n  */\nconst binary_to_decimal_reverse_reverse = (binary) => {\n  let decimal = 0\n  while (binary > 0) {\n    decimal = (decimal << 1) + binary % 2\n    binary = binary / 2\n  }\n  return decimal\n}\n\n/*\n  This is the task you will be asked to write.\n  \n  The function should return a string. Each character in the string will be '0' or '1'.\n  Each character in the string will represent a binary number, that you have to convert.\n\n  Examples:\n  binary_to_decimal(1)  # returns \"1\"\n  binary_to_decimal(10) # returns \"100\"\n  binary_to_decimal(100) # returns \"111100000\"\n  binary_to_decimal(111100000) # returns \"11111111111111111\"\n  */\nconst binary_to_decimal_reverse = (binary) => {\n  let decimal = 0\n  while (binary > 0) {\n    decimal = (decimal << 1) + binary % 2\n    binary = binary / 2\n  }\n  return decimal\n}\n\n/*\n  This is the task you will be asked to write.\n  \n  The function should return a string. Each character in the string will be '0' or '1'.\n  Each character in the string will represent a binary number, that you have to convert.\n\n  Examples:\n  binary_to_decimal(1)  # returns \"1\"\n  binary_to_decimal(10) # returns \"100\"\n  binary_to_decimal(100) # returns \"111100000\"\n  binary_to_decimal(111100000) #"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let index = 0\n  let result = false\n  let i = 0\n  while (i < s.length) {\n    if (i % 3 === 0) {\n      if (s[index] === s[index + 1] && s[index] === s[index + 2]) {\n        index += 3\n      } else {\n        result = false\n        break\n      }\n    } else {\n      index++\n    }\n    i++\n  }\n  return result\n}\n\nconsole.log(is_happy(\"happy\"))\nconsole.log(is_happy(\"happy\"))\nconsole.log(is_happy(\"happy\"))\nconsole.log(is_happy(\"happy\"))\nconsole.log(is_happy(\"happy\"))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const result = []\n  const gpa = grades.filter(\n    (grade) =>\n      grade.toFixed(2) === `${grades[grades.length - 1].toFixed(2)}`.toFixed(2)\n  )\n\n  if (gpa.length === 1) {\n    const percentage = gpa[0].toFixed(2)\n    const percentage_difference = gpa[0].toFixed(2) - grades[grades.length - 1].toFixed(2)\n    const letter_grade = `${gpa[0].toFixed(2)}`\n\n    if (percentage_difference >= 0.6) {\n      result.push(`A+`)\n    } else if (percentage_difference >= 0.3) {\n      result.push(`A`)\n    } else if (percentage_difference >= 0.0) {\n      result.push(`B+`)\n    } else if (percentage_difference <= -0.3) {\n      result.push(`B`)\n    } else if (percentage_difference <= -0.6) {\n      result.push(`C-`)\n    } else {\n      result.push(`C`)\n    }\n\n    if (percentage === '0.0') {\n      result.push(`D-`)\n    } else {\n      result.push(`D`)\n    }\n  } else {\n    const percentage_difference = gpa[1].toFixed(2) - grades[grades.length - 2].toFixed(2)\n    const letter_grade_2 = `${gpa[1].toFixed(2)}`\n\n    if (percentage_difference >= 0.6) {\n      result.push(`A+`)\n    } else if (percentage_difference >= 0.3) {\n      result.push(`A`)\n    } else if (percentage_difference >= 0.0) {\n      result.push(`B+`)\n    } else if (percentage_difference <= -0.3) {\n      result.push(`B`)\n    } else if (percentage_difference <= -0.6) {\n      result.push(`C-`)\n    } else {\n      result.push(`C`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`D-`)\n    } else {\n      result.push(`D`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n\n    if (percentage_difference === '0.0') {\n      result.push(`E`)\n    } else {\n      result.push(`F`)\n    }\n  }\n\n  return result\n}\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  return new Promise((resolve, reject) => {\n    let p = string.length;\n    let n = 2;\n    let i;\n    for (i = 0; i < p; i += 1) {\n      if (string[i] === '.') continue;\n      if (string[i] ==='') continue;\n      n = 1;\n      break;\n    }\n    if (n === 2) {\n      resolve(true);\n    } else {\n      resolve(false);\n    }\n  });\n};\n\nconst prime_number = (string) => {\n  return new Promise((resolve, reject) => {\n    let p = string.length;\n    let n = 2;\n    let i;\n    for (i = 0; i < p; i += 1) {\n      if (string[i] === '.') continue;\n      if (string[i] ==='') continue;\n      n = 1;\n      break;\n    }\n    if (n === 2) {\n      resolve(true);\n    } else {\n      resolve(false);\n    }\n  });\n};\n\nconst is_prime = (string) => {\n  return prime_number(string)\n   .then(prime => {\n      if (prime) return true;\n      return prime_length(string)\n       .then(prime_length => {\n          if (prime_length) return true;\n          return false;\n        });\n    })\n   .then(result => {\n      if (!result) return false;\n      return true;\n    });\n};\n\nmodule.exports = is_prime;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  const start_ends_one = (n) => {\n    const start = (n) => {\n      const num = (n) => {\n        return [...Array(n)].join('1').split('1').reduce((s, v) => {\n          return s + v;\n        }, 0);\n      };\n\n      return num(n);\n    };\n\n    const ends = (n) => {\n      const num = (n) => {\n        return [...Array(n)].join('1').split('1').reduce((s, v) => {\n          return s + v;\n        }, 0);\n      };\n\n      return num(n);\n    };\n\n    return {\n      start: start(n),\n      ends: ends(n),\n    };\n  };\n\n  return start_ends_one(n);\n};\n\nexport { starts_one_ends };\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = []\n  for(let i = N; i > 0; i--){\n    const d = parseInt(N % 2, 10)\n    digits.push(d)\n    N = N / 2\n  }\n  return digits.join(\"\")\n}\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    return lst.reduce((acc, num) => {\n        if(num % 2) {\n            return acc + num;\n        }\n        return acc;\n    }, 0);\n};\n\n/*\nGiven two lists, return the list that contains elements in both lists.\n\nExample:\n    union([1, 2, 3], [2, 4, 5]) ==> [1, 2, 3, 4, 5]\n    union([1, 2], [2, 3, 4]) ==> [1, 2, 3, 4]\n    union([1, 2, 3, 4, 5], [6, 7]) ==> [1, 2, 3, 4, 5, 6, 7]\n*/\nconst union = (lst1, lst2) => {\n    return lst1.filter((el, idx) => lst2.indexOf(el) > -1).concat(lst2.filter((el, idx) => lst1.indexOf(el) > -1));\n};\n\n/*\nGiven two lists, return the list that contains the union of elements of both lists.\n\nExample:\n    union([1, 2, 3, 4, 5], [6, 7]) ==> [1, 2, 3, 4, 5, 6, 7]\n*/\nconst union = (lst1, lst2) => {\n    return lst1.filter((el, idx) => lst2.indexOf(el) > -1).concat(lst2.filter((el, idx) => lst1.indexOf(el) > -1));\n};\n\n/*\nGiven a list of numbers, return a list with the same elements but in reverse order.\n\nExample:\n    reverse([1, 2, 3]) ==> [3, 2, 1]\n    reverse([]) ==> []\n    reverse([1]) ==> [1]\n    reverse([1, 2, 3]) ==> [3, 2, 1]\n*/\nconst reverse = (lst) => {\n    return lst.slice(1).concat(lst.slice(0, 1));\n};\n\n/*\nGiven a list of numbers, return the list with the smallest number at the front.\n\nExample:\n    min([4, 2, 6, 7]) ==> 2\n    min([4, 2, 6, 7, 8]) ==> 2\n    min([2, 4, 6, 7]) ==> 2\n*/\nconst min = (lst) => {\n    let minNum = Number.MAX_VALUE;\n    for(let el of lst) {\n        if(el < minNum) {\n            minNum = el;\n        }\n    }\n    return minNum;\n};\n\n/*\nGiven a list of numbers, return the list with the largest number at the front.\n\nExample:\n    max([4, 2, 6, 7]) ==> 7\n    max([4, 2, 6, 7, 8]) ==> 7\n    max([2, 4, 6, 7]) ==> 7\n*/\nconst max = (lst) => {\n    let maxNum = Number.MIN_VALUE;\n    for(let el of lst) {\n        if(el > maxNum) {\n            maxNum = el;\n        }\n    }\n    return maxNum;\n};\n\n/*\nGiven a list of numbers, return the list with the smallest number at the front.\n\nExample:\n    min([4, 2, 6, 7]) ==> 2\n    min([4, 2, 6, 7, 8]) ==> 2\n    min([2, 4, 6, 7]) ==> 2\n*/\nconst min = (lst) => {\n    let minNum = Number.MAX_VALUE;\n    for(let el of lst) {\n        if(el < minNum) {\n            minNum = el;\n        }\n    }\n    return minNum;\n};\n\n/*\nGiven a list of numbers, return a list with the largest number at the front.\n\nExample:\n    max([4, 2, 6, 7]) ==> 7\n    max([4, 2, 6, 7, 8]) ==> 7\n    max([2, 4, 6, 7]) ==> 7\n*/\nconst max = (lst) => {\n    let maxNum = Number.MIN_VALUE;\n    for(let el of lst) {\n        if(el > maxNum) {\n            maxNum = el;\n        }\n    }\n    return maxNum;\n};\n\n/*\nGiven a list of numbers, return the list with the smallest number at the front.\n\nExample:\n    min([4, 2, 6, 7]) ==> 2\n    min([4, 2, 6, 7, 8]) ==> 2\n    min([2, 4, 6, 7]) ==> 2\n*/\nconst min = (lst) => {\n    let minNum = Number.MAX_VALUE;\n    for(let el of lst) {\n        if(el < minNum) {\n            minNum = el;\n        }\n    }\n    return minNum;\n};\n\nmodule.exports = {\n    add,\n    union,\n    min,\n    max\n};<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let arr = s.split('');\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = chars.indexOf(arr[i]);\n    if (index >= 0) {\n      out += chars[index];\n    } else {\n      out += arr[i];\n    }\n  }\n  return out;\n};\n\nconst shuffle = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_word = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_chars = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_numbers = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_string = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_sentence = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_letters = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_word_with_space = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_chars_with_space = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1));\n    out += chars[index];\n  }\n  return out;\n};\n\nconst shuffle_numbers_with_space = (s) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const length = s.length;\n  let out = '';\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (chars.length - 1"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  return lst.reduce((acc, elem, index) => {\n    let el = elem[x]\n    acc.push(el)\n    if (index === 0) {\n      acc.push((index, index))\n    }\n    if (index === 0) {\n      acc.push((index, index))\n    }\n    return acc\n  }, [])\n}\n\n/*\n  Given 2 dimensional data,\n  return sorted list of tuples,\n  such that each tuple is a coordinate - (row, columns), starting with 0.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row_sorted = (lst, x) => {\n  return get_row(lst, x).sort((a, b) => {\n    if (a[0] === b[0]) {\n      return a[1] - b[1]\n    }\n    return b[0] - a[0]\n  })\n}\n\nmodule.exports = {\n  get_row,\n  get_row_sorted\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const sorted = array.slice();\n  sorted.sort((a, b) => {\n    return a - b;\n  });\n  return sorted;\n};\n\nexport default sort_array;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let i = 0\n  let j = 0\n  let encrypt = ''\n  \n  for (i = 0; i < s.length; i++) {\n    encrypt += alphabet[j]\n    j = (j + 1) % alphabet.length\n  }\n  return encrypt\n}\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'ih'\n  encrypt('asdfghjkl') returns 'asdfjhlkp'\n  encrypt('gf') returns 'gf'\n  encrypt('et') returns 'et'\n  */\nconst decrypt = (s) => {\n  let i = 0\n  let j = 0\n  let decrypt = ''\n  \n  for (i = 0; i < s.length; i++) {\n    decrypt += alphabet[j]\n    j = (j + 1) % alphabet.length\n  }\n  return decrypt\n}\n\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n    let min = lst[0];\n    let index = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n            index = i;\n        }\n    }\n    return (index!== 0)? lst[index - 1] : null;\n};\n\nnext_smallest([1, 2, 3, 4, 5]); // 2\nnext_smallest([5, 1, 4, 3, 2]); // 2\nnext_smallest([1, 1]); // null\nnext_smallest([1, 2, 3, 4, 5, 6]); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  const count = (S).split(\".\").filter(w => w.startsWith(\"I\")).length\n  return count > 0\n}\n\nconst bored_words = \"I\".split(\".\")\n\n/*\n  Given a string of words, count the number of words that start with \"I\" and\n  are followed by \"bored\".\n  \n  For example:\n  >>> count_bored(\"Hello world\")\n  0\n  >>> count_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst count_bored = (S) => {\n  const count = (S).split(\".\").filter(w => w.startsWith(\"I\")).length\n  const words = bored_words\n  const new_words = bored_words.concat(words)\n  return new_words.filter(w => is_bored(w)).length\n}\n\n// Test cases\n\nconst test = [\n  \"Hello world\",\n  \"The sky is blue. The sun is shining. I love this weather\",\n  \"Hello world. The sky is blue. The sun is shining. I love this weather\",\n  \"Hello world. The sky is blue. The sun is shining. I love this weather. The rain is cloudy.\",\n]\n\ntest.forEach(S => {\n  console.log(`${S} -> ${count_bored(S)}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (y === z + x);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  return message.toLowerCase().replace(/[aeiou]/g, (match) => {\n    return vowels[vowels.indexOf(match) + 2]\n  })\n}\n\n// Test\nconsole.log(encode('This is a message'))\nconsole.log(encode('This is a Message'))\nconsole.log(encode('This is a message.'))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const largestPrime = findLargestPrime(lst)\n  return largestPrime.map((n) => {\n    return n.toString().split('').reduce((sum, n) => sum + n, 0)\n  })\n}\n\nfunction findLargestPrime(lst) {\n  return lst.filter((x) => isPrime(x))\n   .sort((a, b) => a - b)\n   .slice(-1)\n}\n\nfunction isPrime(x) {\n  let sqrtX = Math.sqrt(x)\n  for (let i = 2; i <= sqrtX; i++) {\n    if (x % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n//# sourceMappingURL=skjkasdkd.js.map<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n    return Object.keys(dict).every(key => {\n        return (key.toLowerCase() === key) || (key.toUpperCase() === key);\n    });\n}\n\n// Test Cases\nconst test_cases = [\n    {\n        description:'should return true if dictionary is empty',\n        dictionary: {},\n        expected: true\n    },\n    {\n        description:'should return true if all keys are strings in lower case',\n        dictionary: {\n            'a': 'apple',\n            'b': 'banana',\n            'c': 'cat',\n            'd': 'dog',\n            'e': 'elephant'\n        },\n        expected: true\n    },\n    {\n        description:'should return false if all keys are strings in upper case',\n        dictionary: {\n            'A': 'apple',\n            'B': 'banana',\n            'C': 'cat',\n            'D': 'dog',\n            'E': 'elephant'\n        },\n        expected: false\n    },\n    {\n        description:'should return true if all keys are strings in lower case',\n        dictionary: {\n            'a': 'apple',\n            'b': 'banana',\n            'c': 'cat',\n            'd': 'dog',\n            'e': 'elephant'\n        },\n        expected: true\n    },\n    {\n        description:'should return true if all keys are strings in upper case',\n        dictionary: {\n            'a': 'apple',\n            'A': 'banana',\n            'b': 'banana',\n            'C': 'cat',\n            'D': 'dog',\n            'E': 'elephant'\n        },\n        expected: true\n    },\n    {\n        description:'should return false if dictionary contains only integers',\n        dictionary: {\n            'a': 1,\n            'b': 2,\n            'c': 3,\n            'd': 4,\n            'e': 5\n        },\n        expected: false\n    },\n    {\n        description:'should return false if dictionary contains only strings',\n        dictionary: {\n            'a': 'apple',\n            'b': 'banana',\n            'c': 'cat',\n            'd': 'dog',\n            'e': 'elephant'\n        },\n        expected: false\n    },\n    {\n        description:'should return false if dictionary contains only numbers in lower case',\n        dictionary: {\n            'a': '1',\n            'b': '2',\n            'c': '3',\n            'd': '4',\n            'e': '5'\n        },\n        expected: false\n    },\n    {\n        description:'should return false if dictionary contains only numbers in upper case',\n        dictionary: {\n            'a': '1',\n            'B': '2',\n            'c': '3',\n            'D': '4',\n            'E': '5'\n        },\n        expected: false\n    },\n    {\n        description:'should return false if dictionary contains mixed numbers and strings',\n        dictionary: {\n            'a': '1',\n            'b': '2',\n            'c': '3',\n            'd': '4',\n            'e': '5'\n        },\n        expected: false\n    },\n    {\n        description:'should return false if dictionary contains mixed upper and lower case',\n        dictionary: {\n            'a': 'apple',\n            'A': 'banana',\n            'b': 'banana',\n            'C': 'cat',\n            'D': 'dog',\n            'E': 'elephant'\n        },\n        expected: false\n    },\n    {\n        description:'should return true if dictionary contains only lower case letters',\n        dictionary: {\n            'a': 'apple',\n            'b': 'banana',\n            'c': 'cat',\n            'd': 'dog',\n            'e': 'elephant'\n        },\n        expected: true\n    },\n    {\n        description:'should return true if dictionary contains only upper case letters',\n        dictionary: {\n            'A': 'apple',\n            'B': 'banana',\n            'C': 'cat',\n            'D': 'dog',\n            'E': 'elephant'\n        },\n        expected: true\n    },\n    {\n        description:'should return true if dictionary contains all lower case letters and all upper case letters',\n        dictionary: {\n            'a': 'apple',\n            'A': 'banana',\n            'b': 'banana',\n            'C': 'cat',\n            'D': 'dog',\n            'E': 'elephant'\n        },\n        expected: true\n    },\n    {\n        description:'should return true if dictionary contains all upper case letters and all lower case letters',\n        dictionary: {\n            'A': 'apple',\n            'B': 'banana',\n            'C': 'cat',\n            'D': 'dog',\n            'E': 'elephant'\n        },\n        expected: true\n    },\n    {\n        description:'should return true if dictionary contains all lower case letters and all upper case letters',\n        dictionary: {\n            'a': 'apple',\n            'A': 'banana',\n            'b': 'banana',\n            'C': 'cat',\n            'D': 'dog',\n            'E': 'elephant'\n        },\n        expected: true\n    },\n    {\n        description:'should return true if dictionary contains all upper case letters and all lower case letters',\n        dictionary: {\n            'A': 'apple',\n            'B': '"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  const primes = []\n\n  const is_prime = (n) => {\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (is_prime(i)) {\n      primes.push(i)\n    }\n  }\n\n  const count = 0\n  for (let i = primes.length - 1; i >= 0; i--) {\n    while (count < n && primes[i] < n) {\n      count += 1\n    }\n  }\n\n  return primes.slice(0, count)\n}\n\nconsole.log(count_up_to(5))\nconsole.log(count_up_to(11))\nconsole.log(count_up_to(0))\nconsole.log(count_up_to(20))\nconsole.log(count_up_to(1))\nconsole.log(count_up_to(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? multiply(a % 10, b) : multiply(a, b % 10);\n};\n\nexport default multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  const is_vowel = (c) => {\n    return c === 'A' || c === 'E' || c === 'I' || c === 'O' || c === 'U';\n  };\n\n  let count = 0;\n  let last_index = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (is_vowel(s[i])) {\n      count++;\n    } else {\n      if (count) {\n        count--;\n      }\n      last_index = i + 1;\n    }\n  }\n\n  return count;\n};\n\nconsole.log(count_upper('aBcDeF'));\nconsole.log(count_upper('abcdefg'));\nconsole.log(count_upper('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const number = parseInt(value, 10)\n  const floor = Math.floor(number)\n  const ceiling = Math.ceil(number)\n  const abs = Math.abs(number)\n  let closest = floor\n  if (abs < ceiling - floor) {\n    closest = floor\n  } else {\n    closest = ceiling\n  }\n  return closest\n}\n\n/*\n  Given a list of tuples, find the element that\n  has the largest integer value.\n  Examples\n  >>> find_largest_integer_in_array([(1, 2, 3), (2, 3, 4), (2, 4, 5)])\n  2\n  >>> find_largest_integer_in_array([(1, 2), (2, 3, 4), (2, 4, 5)])\n  2\n  >>> find_largest_integer_in_array([(1, 2), (2, 3)])\n  2\n  >>> find_largest_integer_in_array([(1, 2), (1, 2, 3), (2, 3)])\n  2\n  >>> find_largest_integer_in_array([(1, 2), (2, 3)])\n  2\n  >>> find_largest_integer_in_array([(1, 2), (2, 3)])\n  2\n  */\nconst find_largest_integer_in_array = (array) => {\n  const largest_integer = array.reduce((prev, curr) => {\n    const [integer,...rest] = curr\n    return prev + Math.abs(parseInt(integer, 10))\n  })\n  return largest_integer\n}\n\n/*\n  Given a list of tuples, find the largest integer value that occurs\n  more than once.\n  Examples\n  >>> largest_duplicate_in_array([(1, 2, 3), (2, 3, 4), (2, 4, 5)])\n  2\n  >>> largest_duplicate_in_array([(1, 2), (2, 3, 4), (2, 4, 5)])\n  2\n  >>> largest_duplicate_in_array([(1, 2), (2, 3)])\n  2\n  >>> largest_duplicate_in_array([(1, 2), (1, 2, 3), (2, 3)])\n  2\n  >>> largest_duplicate_in_array([(1, 2), (2, 3)])\n  2\n  >>> largest_duplicate_in_array([(1, 2), (2, 3)])\n  2\n  */\nconst largest_duplicate_in_array = (array) => {\n  const duplicates = array.reduce((prev, curr) => {\n    const [integer,...rest] = curr\n    if (prev.indexOf(integer)!== -1) {\n      prev.push(integer)\n    }\n    return prev\n  }, [])\n  const largest = Math.max(...duplicates)\n  return largest\n}\n\n/*\n  Given a list of tuples, find the largest pair of integers\n  that does not occur more than once.\n  Examples\n  >>> largest_pair_without_duplicates_in_array([(1, 2, 3), (2, 3, 4), (2, 4, 5)])\n  [(2, 4), (3, 4)]\n  >>> largest_pair_without_duplicates_in_array([(1, 2), (2, 3, 4), (2, 4, 5)])\n  [(2, 4)]\n  >>> largest_pair_without_duplicates_in_array([(1, 2), (2, 3)])\n  [(2, 3)]\n  >>> largest_pair_without_duplicates_in_array([(1, 2), (1, 2, 3), (2, 3)])\n  [(2, 3)]\n  >>> largest_pair_without_duplicates_in_array([(1, 2), (2, 3)])\n  [(2, 3)]\n  >>> largest_pair_without_duplicates_in_array([(1, 2), (2, 3)])\n  [(2, 3)]\n  */\nconst largest_pair_without_duplicates_in_array = (array) => {\n  const duplicates = array.reduce((prev, curr) => {\n    const [integer,...rest] = curr\n    if (prev.indexOf(integer)!== -1) {\n      prev.push(integer)\n    }\n    return prev\n  }, [])\n  const largest = [...new Set(duplicates).values()].reduce((prev, curr) => {\n    const [integer,...rest] = curr\n    if (prev.indexOf(integer) === -1) {\n      prev.push(integer)\n    }\n    return prev\n  }, [])\n  return largest\n}\n\n/*\n  Given a list of tuples, find the largest integer value that occurs\n  more than once.\n  Examples\n  >>> largest_duplicate_without_duplicates_in_array([(1, 2, 3), (2, 3, 4), (2, 4, 5)])\n  2\n  >>> largest_duplicate_without_duplicates_in_array([(1, 2), (2, 3, 4), (2, 4, 5)])\n  2\n  >>> largest_duplicate_without_duplicates_in_array([(1, 2), (2, 3)])\n  2\n  >>> largest_duplicate_without_duplicates_in_array([(1, 2), (1, 2, 3), (2, 3)])\n  2\n  >>> largest_duplicate_without_duplicates_in_array([(1, 2), (2,"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  if (n === 0) return []\n\n  const levels = []\n\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0 && n > 1) {\n      levels.push(n)\n    } else if (n % 2 === 1 && n > 1) {\n      levels.push(n - 1)\n    }\n  }\n\n  return levels\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n    const words = s.split(/\\s+/g)\n    return words\n}\n\n/*\n  Given a string of words, return a list of all words in the string that are not\n  in the dictionary. The dictionary is a string of words separated by commas or\n  spaces.\n\n  For example:\n  words_in_dictionary(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"John\"]\n  words_in_dictionary(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"John\"]\n  words_in_dictionary(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_in_dictionary(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_in_dictionary = (s) => {\n    const words = s.split(/\\s+/g)\n    const dictionary = words_string(s)\n    let dictionary_words = []\n    for(const word of dictionary) {\n        dictionary_words.push(word)\n    }\n    return dictionary_words\n}\n\n/*\n  Given a string of words, return a list of all the unique words in the string.\n  \n  For example:\n  words_in_all_cases(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"John\"]\n  words_in_all_cases(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"John\"]\n  words_in_all_cases(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_in_all_cases(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_in_all_cases = (s) => {\n    const words = s.split(/\\s+/g)\n    const unique_words = []\n    for(const word of words) {\n        if(unique_words.indexOf(word) === -1) {\n            unique_words.push(word)\n        }\n    }\n    return unique_words\n}\n\n/*\n  Given a string of words, return a list of all the unique words in the string,\n  and the number of times each word appears in the string.\n\n  For example:\n  words_and_frequency(\"Hi, my name is John\") == [[\"Hi\", 1], [\"my\", 1], [\"name\", 1], [\"John\", 1]]\n  words_and_frequency(\"Hi, my name is John\") == [[\"Hi\", 1], [\"my\", 1], [\"name\", 1], [\"John\", 1]]\n  words_and_frequency(\"One, two, three, four, five, six\") == [[\"One\", 1], [\"two\", 1], [\"three\", 1], [\"four\", 1], [\"five\", 1], [\"six\", 1]]\n  words_and_frequency(\"One, two, three, four, five, six\") == [[\"One\", 1], [\"two\", 1], [\"three\", 1], [\"four\", 1], [\"five\", 1], [\"six\", 1]]\n  */\nconst words_and_frequency = (s) => {\n    const words = s.split(/\\s+/g)\n    const unique_words = []\n    for(const word of words) {\n        if(unique_words.indexOf(word) === -1) {\n            unique_words.push([word, 1])\n        } else {\n            unique_words[unique_words.indexOf(word)].push(1)\n        }\n    }\n    return unique_words\n}\n\n/*\n  Given a string of words, return the number of letters in the string.\n\n  For example:\n  length_of_words(\"Hi, my name is John\") == 5\n  length_of_words(\"Hi, my name is John\") == 5\n  length_of_words(\"One, two, three, four, five, six\") == 10\n  length_of_words(\"One, two, three, four, five, six\") == 10\n  */\nconst length_of_words = (s) => {\n    return s.length\n}\n\n/*\n  Given a string of words, return the number of letters in the string.\n\n  For example:\n  is_all_lowercase(\"Hi, my name is John\") == true\n  is_all_lowercase(\"Hi, my name is john\") == false\n  is_all_lowercase(\"Hi, my name is john\") == false\n  */\nconst is_all_lowercase = (s) => {\n    return s.toLowerCase() === s\n}\n\n/*\n  Given a string of words, return the number of words in the string.\n\n  For example:\n  number_of_words(\"Hi, my name is John\") == 1\n  number_of_words(\"Hi, my name is John\") == 1\n  number_of_words(\"One, two, three, four, five, six\") == 6\n  number_of_words(\"One, two, three, four, five, six\") == 6\n  */\nconst number_of_words = (s) => {\n    return words_in_dictionary(s).length\n}\n\n/*\n  Given a string of words, return the number of unique words in the string.\n\n  For example:\n  number_of_unique_words(\"Hi, my name is John\") == 2\n  number_of_unique_words(\"Hi, my name is John\") == 2\n  number_of_unique_words(\"One, two, three, four, five, six\") == 3\n  number_of_unique_words(\"One, two, three, four, five, six\") == 3\n  */\nconst number_of_unique_words = (s) => {\n    return words_in_all_cases(s)."}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < y) {\n    throw new Error('The number must be in the range [x, y] inclusive.')\n  }\n  let largest = 0\n  for (let i = x; i <= y; i += 2) {\n    if (largest < i) {\n      largest = i\n    }\n  }\n  return largest\n}\n\nconst choose_num_2 = (x, y) => {\n  if (x < y) {\n    throw new Error('The number must be in the range [x, y] inclusive.')\n  }\n  let largest = 0\n  for (let i = x; i <= y; i += 2) {\n    if (largest < i) {\n      largest = i\n    }\n  }\n  return largest\n}\n\nconst choose_num_3 = (x, y, z) => {\n  if (x < y) {\n    throw new Error('The number must be in the range [x, y] inclusive.')\n  }\n  let largest = 0\n  for (let i = x; i <= y; i += 2) {\n    for (let j = x; j <= y; j += 2) {\n      if (largest < i + j) {\n        largest = i + j\n      }\n    }\n  }\n  return largest\n}\n\nconst choose_num_4 = (x, y, z, a) => {\n  if (x < y) {\n    throw new Error('The number must be in the range [x, y] inclusive.')\n  }\n  let largest = 0\n  for (let i = x; i <= y; i += 2) {\n    for (let j = x; j <= y; j += 2) {\n      for (let k = x; k <= y; k += 2) {\n        if (largest < i + j + k) {\n          largest = i + j + k\n        }\n      }\n    }\n  }\n  return largest\n}\n\nconst choose_num_5 = (x, y, z, a, b) => {\n  if (x < y) {\n    throw new Error('The number must be in the range [x, y] inclusive.')\n  }\n  let largest = 0\n  for (let i = x; i <= y; i += 2) {\n    for (let j = x; j <= y; j += 2) {\n      for (let k = x; k <= y; k += 2) {\n        for (let l = x; l <= y; l += 2) {\n          if (largest < i + j + k + l) {\n            largest = i + j + k + l\n          }\n        }\n      }\n    }\n  }\n  return largest\n}\n\nconst choose_num_6 = (x, y, z, a, b, c) => {\n  if (x < y) {\n    throw new Error('The number must be in the range [x, y] inclusive.')\n  }\n  let largest = 0\n  for (let i = x; i <= y; i += 2) {\n    for (let j = x; j <= y; j += 2) {\n      for (let k = x; k <= y; k += 2) {\n        for (let l = x; l <= y; l += 2) {\n          for (let m = x; m <= y; m += 2) {\n            if (largest < i + j + k + l + m) {\n              largest = i + j + k + l + m\n            }\n          }\n        }\n      }\n    }\n  }\n  return largest\n}\n\nconst choose_num_7 = (x, y, z, a, b, c, d) => {\n  if (x < y) {\n    throw new Error('The number must be in the range [x, y] inclusive.')\n  }\n  let largest = 0\n  for (let i = x; i <= y; i += 2) {\n    for (let j = x; j <= y; j += 2) {\n      for (let k = x; k <= y; k += 2) {\n        for (let l = x; l <= y; l += 2) {\n          for (let m = x; m <= y; m += 2) {\n            for (let n = x; n <= y; n += 2) {\n              if (largest < i + j + k + l + m + n) {\n                largest = i + j + k + l + m + n\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return largest\n}\n\nconst choose_num_8 = (x, y, z, a, b, c, d, e) => {\n  if (x < y) {\n    throw new Error('The number must be in the range [x, y] inclusive.')\n  }\n  let largest = 0\n  for (let i = x; i <= y; i += 2) {\n    for (let j = x; j <= y; j += 2) {\n      for (let k = x; k <= y; k += 2) {\n        for (let l = x; l <= y; l += 2) {\n          for (let m = x; m <= y; m += 2) {\n            for (let n = x; n <= y; n += 2) {\n              for (let o = x; o <= y; o += 2) {\n                if (largest < i + j + k + l + m + n + o) {\n                  largest = i + j + k + l + m + n + o\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return largest\n}\n\nexport { choose_num, choose_num_2, choose_num_3, choose_num_4, choose_num_5, choose_num_6, choose_num_7, choose_num_8 }\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2);\n}\n\nconst rounded_avg_b = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).split(\".\");\n}\n\nconst rounded_avg_b2 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\".\", \"\").replace(\"-\", \"\");\n}\n\nconst rounded_avg_b3 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b4 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b5 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b6 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b7 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b8 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b9 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b10 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b11 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b12 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b13 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b14 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b15 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b16 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b17 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b18 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b19 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b20 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b21 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b22 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b23 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b24 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b25 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b26 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b27 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg.toString(2).replace(\"-\", \"\");\n}\n\nconst rounded_avg_b28 = (n, m) => {\n    const avg = (n + m) / 2;\n    return avg."}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const numbers = new Set()\n  for (const i of x) {\n    numbers.add(Math.floor(i))\n  }\n  const sorted = [...new Set(numbers).values()]\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nexport default unique_digits\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    ret.push(sorted[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    ret.push(reversed[i]);\n  }\n  return ret;\n};\n\nconst by_digit = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    ret.push(sorted[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    ret.push(reversed[i]);\n  }\n  return ret;\n};\n\nconst by_name = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const sorted = arr.sort((a, b) => a.toLowerCase() - b.toLowerCase());\n  const reversed = sorted.reverse();\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    ret.push(sorted[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    ret.push(reversed[i]);\n  }\n  return ret;\n};\n\nconst by_length_reverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    ret.push(reversed[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    ret.push(sorted[i]);\n  }\n  return ret;\n};\n\nconst by_digit_reverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    ret.push(reversed[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    ret.push(sorted[i]);\n  }\n  return ret;\n};\n\nconst by_name_reverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const sorted = arr.sort((a, b) => a.toLowerCase() - b.toLowerCase());\n  const reversed = sorted.reverse();\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    ret.push(reversed[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    ret.push(sorted[i]);\n  }\n  return ret;\n};\n\nconst main = () => {\n  const arr = [2, 1, 1, 4, 5, 8, 2, 3];\n  console.log(by_length(arr));\n  console.log(by_length_reverse(arr));\n  console.log(by_name(arr));\n  console.log(by_name_reverse(arr));\n  console.log(by_digit(arr));\n  console.log(by_digit_reverse(arr));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const ret = []\n  let i = 1\n  while (i < n) {\n    ret.push(i)\n    if (i % 2 === 0) {\n      ret.push(i * f(i))\n    } else {\n      ret.push(f(i - 1) + f(i))\n    }\n    i++\n  }\n  return ret\n}\n\nconst fp = (n) => {\n  return Array.from(f(n)).map((i) => i.toString()).join('')\n}\n\nconst n = (n) => {\n  return f(n)\n}\n\nconst test = [\n  [1, '1'],\n  [2, '2'],\n  [3, '6'],\n  [4, '24'],\n  [5, '120'],\n  [6, '720'],\n  [7, '5040'],\n  [8, '40320'],\n  [9, '362880'],\n  [10, '3628800'],\n  [11, '39916800'],\n  [12, '479001600'],\n  [13, '6227020800'],\n  [14, '87178291200'],\n  [15, '1307674368000'],\n  [16, '20922789888000'],\n  [17, '355687428096000'],\n  [18, '6402373705728000'],\n  [19, '121645100408832000'],\n  [20, '2432902008176640000'],\n  [21, '51090942171709440000'],\n  [22, '1124000727777607680000'],\n  [23, '25852016738884976640000'],\n  [24, '620448401733239439360000'],\n  [25, '15511210043330985984000000'],\n  [26, '403291461126605635584000000'],\n  [27, '10888869450418352160768000000'],\n  [28, '304888344611713860501504000000'],\n  [29, '8841761993739701954543616000000'],\n  [30, '265252859812191058636308480000000'],\n  [31, '8222838654177922817725562880000000'],\n  [32, '263130836933693530167218012160000000'],\n  [33, '8683317618811886495518194401280000000'],\n  [34, '2147483647'],\n  [35, '4294967295'],\n  [36, '1099511627775'],\n  [37, '281474976710655'],\n  [38, '72057594037927936'],\n  [39, '144115188075855872'],\n  [40, '289912650105600'],\n  [41, '5797630901120'],\n  [42, '1159609381906'],\n  [43, '2252803628480'],\n  [44, '4503599627370496'],\n  [45, '9007199254740992'],\n  [46, '18014398509481984'],\n  [47, '36028797018963968'],\n  [48, '73733695994806784'],\n  [49, '140737488355328'],\n  [50, '281474976710656'],\n  [51, '562949953421312'],\n  [52, '1125899906842624'],\n  [53, '2251799813685248'],\n  [54, '4503599627370496'],\n  [55, '9007199254740992'],\n  [56, '18014398509481984'],\n  [57, '36028797018963968'],\n  [58, '73733695994806784'],\n  [59, '140737488355328'],\n  [60, '281474976710656'],\n  [61, '562949953421312'],\n  [62, '1125899906842624'],\n  [63, '2251799813685248'],\n  [64, '4503599627370496'],\n  [65, '9007199254740992'],\n  [66, '18014398509481984'],\n  [67, '36028797018963968'],\n  [68, '73733695994806784'],\n  [69, '140737488355328'],\n  [70, '281474976710656'],\n  [71, '562949953421312'],\n  [72, '1125899906842624'],\n  [73, '2251799813685248'],\n  [74, '4503599627370496'],\n  [75, '9007199254740992'],\n  [76, '18014398509481984'],\n  [77, '36028797018963968'],\n  [78, '73733695994806784'],\n  [79, '140737488355328'],\n  [80, '281474976710656'],\n  [81, '562949953421312'],\n  [82, '1125899906842624'],\n  [83, '2251799813685248'],\n  [84, '4503599627370496'],\n  [85, '9007199254740992'],\n  [86, '18014398509481984'],\n  [87, '36028797018963968'],\n  ["}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n    const even_sum = 0;\n    const odd_sum = 0;\n    for (let i = 1; i <= n; i++) {\n        const n_palindrome = is_palindrome(i);\n        if (n_palindrome) {\n            if (n_palindrome % 2 === 0) {\n                even_sum += n_palindrome;\n            } else {\n                odd_sum += n_palindrome;\n            }\n        }\n    }\n    return (even_sum, odd_sum);\n};\n\nexport default even_odd_palindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const n = arr.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      result += 1;\n    }\n    if (num < 0) {\n      const sign = num % 10;\n      const num = Math.floor(num / 10);\n      if (sign > 0) {\n        result += num + 1;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = count_nums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  const l = arr.length;\n  if (l === 0) return true;\n  const max = arr[l - 1];\n  let i = 0;\n  for (i = 0; i < l - 1; i++) {\n    if (arr[i] > max) {\n      break;\n    }\n  }\n  for (; i < l - 1; i++) {\n    if (arr[i] <= max) {\n      const r = arr.slice(0, l - 1);\n      r.push(arr[i]);\n      r.sort();\n      return true;\n    }\n  }\n  return false;\n}\n\n// Test\nconsole.log(move_one_ball([3, 5, 4, 1, 2]));\nconsole.log(move_one_ball([1, 2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    let result = true;\n    if (lst1.length!== lst2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < lst1.length; i++) {\n        let n1 = lst1[i], n2 = lst2[i];\n        if (n1 === n2) {\n            continue;\n        }\n        if ((n1 % 2)!== (n2 % 2)) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nexport default exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  if (!test) {\n    return {}\n  }\n  const count = (test.split('').reduce((acc, item) => {\n    if (acc[item]) {\n      acc[item]++\n    } else {\n      acc[item] = 1\n    }\n    return acc\n  }, {})\n  );\n  const max = Object.keys(count).reduce((acc, key) => {\n    if (count[key] > acc) {\n      acc = count[key]\n    }\n    return acc\n  }, 0);\n  return {\n   ...count,\n    max\n  }\n};\n\n/*\n  Given a list of strings, return a list of strings sorted in alphabetical order.\n  \n  Example:\n  sort('a b c d') == ['a', 'b', 'c', 'd']\n  sort(['a b', 'b a', 'a b']) == ['a b', 'a b', 'b a']\n  sort(['b a', 'a b']) == ['a b', 'a b']\n  sort(['a b c', 'b c a']) == ['a b c', 'b c a']\n  sort(['a b c', 'b c a', 'a b']) == ['a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b', 'a b']) == ['a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b', 'a b']) == ['a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a b', 'b c a', 'b c a']\n  sort(['a b c', 'b c a', 'a b c', 'a b c']) == ['a b', 'a b', 'a b', 'a"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  const is_palindrome = (s, c) => {\n    let i = 0;\n    let j = s.length - 1;\n    let s_substring = s.substring(i, j);\n    while (i <= j) {\n      if (s_substring === c.substring(i, j)) {\n        return false;\n      }\n      i++;\n      j--;\n      s_substring = s.substring(i, j);\n    }\n    return true;\n  };\n  const s_length = s.length;\n  const c_length = c.length;\n  const i = 0;\n  const j = s_length - 1;\n  let c_substring = c.substring(i, j);\n  while (i <= j) {\n    if (s[i] === c_substring[j]) {\n      s_length--;\n      j--;\n    }\n    i++;\n    j--;\n    c_substring = c.substring(i, j);\n  }\n  return [s.substring(0, s_length), is_palindrome(s, c)];\n};\n\nconst test = (test) => {\n  let s = \"\";\n  let c = \"\";\n  while (test.length) {\n    let [s, c_is_palindrome] = reverse_delete(s, c);\n    if (c_is_palindrome) {\n      console.log(s);\n      return;\n    }\n    s = s.concat(c);\n    test = test.slice(1);\n  }\n  console.log(\"no palindrome\");\n};\n\ntest([\"abcde\", \"ae\"]);\ntest([\"abcdef\", \"b\"]);\ntest([\"abcdedcba\", \"ab\"]);\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  return lst.map(num => {\n    let odd_count = 0;\n    while (num) {\n      if (num % 2!== 0) {\n        odd_count++;\n      }\n      num = parseInt(num / 2);\n    }\n    return `the number of odd elements ${odd_count} of the ${num}th string of the ${lst.length}`;\n  });\n};\n\n// let lst = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  if (!nums || nums.length === 0) {\n    return 0;\n  }\n\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n\n  let left = 0;\n  let right = nums.length - 1;\n  while (left < right) {\n    const l = left;\n    const r = right;\n    while (l < r) {\n      sum += nums[l];\n      if (sum < 0) {\n        sum = 0;\n      }\n      l++;\n    }\n    right--;\n  }\n\n  return sum;\n};\n\n// const min_sub_array_sum = (nums) => {\n//   if (!nums || nums.length === 0) {\n//     return 0;\n//   }\n\n//   let sum = nums[0];\n//   for (let i = 1; i < nums.length; i++) {\n//     sum += nums[i];\n//     if (sum < 0) {\n//       sum = 0;\n//     }\n//   }\n\n//   let left = 0;\n//   let right = nums.length - 1;\n//   while (left < right) {\n//     const l = left;\n//     const r = right;\n//     while (l < r) {\n//       sum += nums[l];\n//       if (sum < 0) {\n//         sum = 0;\n//       }\n//       l++;\n//     }\n//     right--;\n//   }\n\n//   return sum;\n// };\n\nconst min_sub_array_sum = (nums) => {\n  if (!nums || nums.length === 0) {\n    return 0;\n  }\n\n  let sum = nums[0];\n  let left = 0;\n  let right = nums.length - 1;\n  while (left < right) {\n    const l = left;\n    const r = right;\n    while (l < r) {\n      sum += nums[l];\n      if (sum < 0) {\n        sum = 0;\n      }\n      l++;\n    }\n    right--;\n  }\n\n  return sum;\n};\n\nexport default min_sub_array_sum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n    if (grid.length === 0 || grid.length === 1) return 0;\n    if (grid.length === 2 && grid[0][0] === 0 && grid[1][1] === 0) return 0;\n    if (grid.length === 2 && grid[0][1] === 0) return grid[1][0];\n    if (grid.length === 2 && grid[1][0] === 0) return grid[0][1];\n    \n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        result += grid[i].reduce((prev, current, index) => {\n            if (index === 0) {\n                return current;\n            } else {\n                return prev + current;\n            }\n        }, 0);\n    }\n    return result >= capacity? 0 : result;\n}\n\nconst find = (grid, capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        result += grid[i].reduce((prev, current, index) => {\n            if (index === 0) {\n                return current;\n            } else {\n                return prev + current;\n            }\n        }, 0);\n    }\n    return result >= capacity? 0 : result;\n}\n\nconst main = () => {\n    let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    let capacity = 5;\n    let result = max_fill(grid, capacity);\n    console.log(result);\n    result = find(grid, capacity);\n    console.log(result);\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const arr_length = arr.length;\n  const arr_clone = arr.slice();\n  for (let i = 0; i < arr_length; i++) {\n    for (let j = i + 1; j < arr_length; j++) {\n      const x = parseInt(arr[i]);\n      const y = parseInt(arr[j]);\n      if (arr[i] === '1' && arr[j] === '0') {\n        arr_clone[i] = x;\n        arr_clone[j] = y;\n        break;\n      }\n      if (arr[i] === '0' && arr[j] === '1') {\n        arr_clone[i] = y;\n        arr_clone[j] = x;\n        break;\n      }\n    }\n  }\n  return arr_clone.sort();\n};\n\nconsole.log(sort_array([1, 5, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const words = s.split(' ');\n  const result = [];\n  const counter = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (counter === n) {\n      result.push(words[i]);\n    }\n    counter += words[i].length;\n  }\n  return result;\n}\n\nconst words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\", \"that\", \"had\", \"a\", \"little\", \"lamb\"];\n\nconsole.log(select_words(words[4], 4));\nconsole.log(select_words(words[3], 3));\nconsole.log(select_words(words[2], 2));\nconsole.log(select_words(words[1], 1));\nconsole.log(select_words(words[0], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n    if(!word) return '';\n    const vowel = word.split('').filter(a => a.match(/[A-Z]/i)).slice(-1)[0];\n    if(!vowel) return '';\n    let closest = '';\n    word.split('').map((c, i) => {\n        if(i > 0 && c!== vowel) {\n            if(!closest) closest = c;\n            else if(Math.abs(c - vowel) < Math.abs(closest - vowel)) closest = c;\n        }\n    });\n    return closest;\n};\n\n/*\n  Given an array of words and a word, return the closest word from the array.\n  \n  Assume the word is in the given array and return the closest word from the array.\n  \n  Return empty string if you didn't find any word in the array meets the above condition. \n\n  Example:\n  find_closest_word(\"candy\", [\"cake\", \"bread\", \"cake\"]) ==> \"cake\"\n  find_closest_word(\"candy\", [\"cake\", \"bread\", \"cake\", \"sugar\"]) ==> \"cake\"\n  find_closest_word(\"candy\", [\"sugar\"]) ==> \"\"\n  */\nconst find_closest_word = (word, words) => {\n    const closest = words.find(w => w.toLowerCase() === word.toLowerCase());\n    return closest || '';\n};\n\n/*\n  Given a string, find out how many consonant and vowels in the string.\n  \n  Example:\n  count_consonants(\"aAoOu\") ==> 2\n  count_consonants(\"aAoOu\") ==> 2\n  count_consonants(\"b\") ==> 0\n  count_consonants(\"a\") ==> 1\n  */\nconst count_consonants = (string) => {\n    const consonants = string.split('').filter(a => a.match(/[A-Z]/i));\n    const vowels = string.split('').filter(a => a.match(/[A-Z]/i)).filter(a =>!consonants.includes(a));\n    return consonants.length + vowels.length;\n};\n\n/*\n  Given a string, find out how many consonant and vowels in the string.\n  \n  Example:\n  count_consonants(\"aAoOu\") ==> 2\n  count_consonants(\"aAoOu\") ==> 2\n  count_consonants(\"b\") ==> 0\n  count_consonants(\"a\") ==> 1\n  */\nconst count_vowels = (string) => {\n    const vowels = string.split('').filter(a => a.match(/[A-Z]/i));\n    const consonants = string.split('').filter(a => a.match(/[A-Z]/i)).filter(a =>!vowels.includes(a));\n    return consonants.length + vowels.length;\n};\n\n/*\n  Given a string, return a string with all the consonants removed and vowels added.\n  \n  Example:\n  string_without_vowels(\"aAoOu\") ==> \"aaou\"\n  string_without_vowels(\"aAoOu\") ==> \"aaou\"\n  string_without_vowels(\"b\") ==> \"b\"\n  string_without_vowels(\"a\") ==> \"a\"\n  */\nconst string_without_vowels = (string) => {\n    const consonants = string.split('').filter(a => a.match(/[A-Z]/i));\n    const vowels = string.split('').filter(a => a.match(/[A-Z]/i)).filter(a =>!consonants.includes(a));\n    return vowels.join('');\n};\n\n/*\n  Given a string, return the number of consonants and vowels in the string.\n  \n  Example:\n  string_without_vowels(\"aAoOu\") ==> 2\n  string_without_vowels(\"aAoOu\") ==> 2\n  string_without_vowels(\"b\") ==> 1\n  string_without_vowels(\"a\") ==> 1\n  */\nconst string_without_vowels_count = (string) => {\n    const consonants = string.split('').filter(a => a.match(/[A-Z]/i));\n    const vowels = string.split('').filter(a => a.match(/[A-Z]/i)).filter(a =>!consonants.includes(a));\n    return consonants.length + vowels.length;\n};\n\n/*\n  Given a string, return the number of consonants and vowels in the string.\n  \n  Example:\n  string_without_vowels(\"aAoOu\") ==> 2\n  string_without_vowels(\"aAoOu\") ==> 2\n  string_without_vowels(\"b\") ==> 1\n  string_without_vowels(\"a\") ==> 1\n  */\nconst string_without_vowels_count2 = (string) => {\n    const consonants = string.split('').filter(a => a.match(/[A-Z]/i));\n    const vowels = string.split('').filter(a => a.match(/[A-Z]/i)).filter(a => consonants.includes(a));\n    return consonants.length + vowels.length;\n};\n\n/*\n  Given a string, return a"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const is_balanced = (l) => {\n    let res = 0;\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] === '(') {\n        res += 1;\n      } else if (l[i] === ')') {\n        res -= 1;\n      }\n    }\n    return res === 0;\n  };\n  const is_in = (lst, s) => {\n    let res = false;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] === s) {\n        res = true;\n        break;\n      }\n    }\n    return res;\n  };\n  const lst_iter = (l) => {\n    let res = [];\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] === '(') {\n        res.push(1);\n      } else if (l[i] === ')') {\n        res.push(-1);\n      }\n    }\n    return res;\n  };\n  const lst_reduce = (l, acc) => {\n    let res = 0;\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] === '(') {\n        res += 1;\n      } else if (l[i] === ')') {\n        res -= 1;\n      }\n    }\n    return res === 0? acc : lst_reduce(lst_iter(l), acc + res);\n  };\n  return lst_reduce(lst, 0);\n};\n\nconsole.log(match_parens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = []\n  let max = 0\n  let arrLength = arr.length\n  for (let i = 0; i < arrLength; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      result.unshift(arr[i])\n    } else if (arr[i] === max) {\n      result.unshift(arr[i])\n    } else {\n      result.push(arr[i])\n    }\n  }\n  return result.slice(0, k)\n}\n\n// const maximum = (arr, k) => {\n//   let result = []\n//   let max = arr[0]\n//   let count = 0\n//   for (let i = 0; i < arr.length; i++) {\n//     if (arr[i] > max) {\n//       max = arr[i]\n//       result.unshift(arr[i])\n//     } else if (arr[i] === max) {\n//       result.unshift(arr[i])\n//     } else {\n//       result.push(arr[i])\n//     }\n//   }\n//   return result.slice(0, k)\n// }\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  let max = arr[0]\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor((Math.random() * arr.length))\n    result.unshift(arr[index])\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  let result = []\n  for (let i = 0; i"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += (lst[i] % 2)? lst[i] : 0;\n  }\n  return sum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  let carry = 0\n  for (let i = k; i < arr.length; i++) {\n    carry += sum\n    sum = arr[i]\n    if (carry >= 10) {\n      sum += 1\n      carry = 0\n    }\n  }\n  return sum\n}\n\nexport default add_elements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let collatz = get_collatz(i);\n    result = result.concat(collatz);\n    i = collatz[collatz.length - 1];\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return the Collatz sequence of n.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. returned list sorted in increasing order.\n\n  For example:\n  get_collatz(5) returns [5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_collatz = (n) => {\n  let result = [];\n  while (n > 0) {\n    let collatz = n % 2 == 0? n / 2 : 3 * n + 1;\n    result.push(collatz);\n    n = collatz;\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return the next n in the Collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. returned list sorted in increasing order.\n\n  For example:\n  next_collatz(5) returns [5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst next_collatz = (n) => {\n  let result = [];\n  while (n > 0) {\n    let collatz = n % 2 == 0? n / 2 : 3 * n + 1;\n    result.push(collatz);\n    n = collatz;\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return the first nth number in the Collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. returned list sorted in increasing order.\n\n  For example:\n  first_collatz(5) returns [1, 2, 3, 5, 8, 13, 21, 34, 55,...] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst first_collatz = (n) => {\n  let result = [];\n  while (n > 0) {\n    let collatz = n % 2 == 0? n / 2 : 3 * n + 1;\n    result.push(collatz);\n    n = collatz;\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return the last nth number in the Collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. returned list sorted in increasing order.\n\n  For example:\n  last_collatz(5) returns [55, 34, 21, 13, 8, 5, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst last_collatz = (n) => {\n  let result = [];\n  while (n > 0) {\n    let collatz = n % 2 == 0? n / 2 : 3 * n + 1;\n    result.push(collatz);\n    n = collatz;\n  }\n  return result.sort((a, b) => a - b);\n};\n\nmodule.exports = {\n  get_odd_collatz,\n  get_collatz,\n  next_collatz,\n  first_collatz,\n  last_collatz\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const d = date.split('-');\n  const m = d[1];\n  const y = d[0];\n  const num_of_days = new Date(y, m - 1, 0).getDate();\n  const num_of_months = new Date(y, m, 0).getMonth();\n  if (num_of_days < 1 || num_of_days > 31 || (num_of_months === 4 || num_of_months === 6 || num_of_months === 9 || num_of_months === 11)) {\n    return false;\n  }\n  if (num_of_days < 1 || num_of_days > 30) {\n    return false;\n  }\n  if (num_of_months === 2) {\n    return false;\n  }\n  return true;\n};\n\nconst validate_date = (date) => {\n  const is_valid = valid_date(date);\n  if (is_valid) {\n    console.log('The date is valid');\n  } else {\n    console.log('The date is invalid');\n  }\n};\n\nvalidate_date('03-11-2000');\n\nvalidate_date('15-01-2012');\n\nvalidate_date('04-0-2040');\n\nvalidate_date('06-04-2020');\n\nvalidate_date('06/04/2020');\n\nvalidate_date('06/05/2020');\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splits = words.filter((word) => word.length > 0);\n  const count = splits.length;\n  const words2 = splits.map((word) => to_lower_case(word));\n  const lower = words2.reduce((acc, word) => {\n    const word2 = to_lower_case(word);\n    if (acc[word2]) {\n      acc[word2] += 1;\n    } else {\n      acc[word2] = 1;\n    }\n    return acc;\n  }, {});\n  const odd = Object.keys(lower).filter((key) => lower[key] % 2 === 1).map((key) => key);\n  return [words, count, words2, lower, odd];\n};\n\nconst to_lower_case = (str) => {\n  const chr_array = str.split('');\n  for (let i = 0; i < chr_array.length; i++) {\n    chr_array[i] = chr_array[i].toLowerCase();\n  }\n  return chr_array.join('');\n};\n\nexport default split_words;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const sorted = [];\n  lst.forEach((x) => {\n    if (sorted.indexOf(x) === -1) {\n      sorted.push(x);\n    } else {\n      return false;\n    }\n  });\n  return sorted.length === lst.length;\n};\n\nmodule.exports = is_sorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] >= interval1[1] || interval2[0] >= interval2[1]) {\n    return false;\n  }\n\n  if (interval1[0] > interval2[0] && interval1[0] < interval2[1]) {\n    return true;\n  }\n\n  if (interval1[1] > interval2[0] && interval1[1] < interval2[1]) {\n    return true;\n  }\n\n  return false;\n};\n\nconst test = (input, output) => {\n  if (intersection(input[0], input[1])) {\n    console.log(output);\n  }\n};\n\nconst test2 = (input, output) => {\n  const interval1 = [1, 3];\n  const interval2 = [2, 4];\n  if (intersection(interval1, interval2)) {\n    console.log(output);\n  }\n};\n\nconst test3 = (input, output) => {\n  const interval1 = [-1, 1];\n  const interval2 = [0, 4];\n  if (intersection(interval1, interval2)) {\n    console.log(output);\n  }\n};\n\nconst test4 = (input, output) => {\n  const interval1 = [-3, -1];\n  const interval2 = [-5, 5];\n  if (intersection(interval1, interval2)) {\n    console.log(output);\n  }\n};\n\ntest([[1, 2], [2, 3]], \"NO\");\ntest([[1, 2], [2, 3]], \"YES\");\ntest([[-1, 1], [0, 4]], \"YES\");\ntest([[-3, -1], [-5, 5]], \"YES\");\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const product = 1\n  let result = 0\n  arr.forEach((n) => {\n    if (n > 0) {\n      product *= n\n    } else if (n < 0) {\n      product *= -n\n    } else {\n      result += product\n      product = 1\n    }\n  })\n  if (result === 0) return null\n  return result\n}\n\nconst arr = [1, 2, 2, -4]\nconsole.log(prod_signs(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const m = grid.length;\n  if (m === 0) return [];\n  const n = grid[0].length;\n\n  // find the smallest index j such that\n  // grid[j][i] < grid[j+1][i]\n  let j = 0;\n  while (j < n && grid[j][i] > grid[j + 1][i]) j += 1;\n  if (j === n) return grid[0];\n\n  // find the smallest index i such that\n  // grid[j][i] < grid[j][i+1]\n  let i = 0;\n  while (i < m && grid[j][i] > grid[j][i + 1]) i += 1;\n  if (i === m) return grid[j];\n\n  // find the smallest index k such that\n  // grid[j][i] < grid[j][i+1] < grid[j][i+2]\n  while (i + 1 < m && grid[j][i] > grid[j][i + 1] && grid[j][i] > grid[j][i + 2]) i += 1;\n\n  const path = grid[j][i + 1];\n  const result = [];\n  let j_ = j + 1;\n  while (j_ < n && path < grid[j_][i + 1]) {\n    result.push(grid[j_][i]);\n    j_ += 1;\n  }\n  result.push(path);\n  return result;\n};\n\nmodule.exports = {\n  min_path,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let i = 1, j = 2;\n  if (n % 2 === 0) {\n    while (i <= n) {\n      i += 1;\n      j = j + 2;\n    }\n  } else {\n    while (i <= n) {\n      i += 1;\n      j = j + 2 + i;\n    }\n  }\n  return [1, 3, 2, j];\n}\n\nconst test = () => {\n  const res = tri(3);\n  console.log(res);\n}\n\nconst main = () => {\n  test();\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) return 1;\n  return n % 10 === 0? 1 : n * digits(n / 10);\n};\n\nlet r = 0;\n\nfor (let i = 1; i < 1000000; i++) {\n  r += digits(i);\n}\n\nconsole.log(r);\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const len = string.length\n  const stack = []\n  let is_nested = true\n  let i = 0\n  while (i < len) {\n    const character = string[i]\n    if (character === '[') {\n      stack.push(character)\n    } else if (character === ']') {\n      if (stack.length === 0) {\n        is_nested = false\n      } else {\n        stack.pop()\n      }\n    }\n    i++\n  }\n  return is_nested\n}\n\n// is_nested('[[]') → true\n// is_nested('[][]') → true\n// is_nested('[][[]]') → true\n// is_nested('[][[[]]') → true\n// is_nested('[][[][[]]') → true\n// is_nested('[][[][[[]]') → true\n// is_nested('[][[][[][]]') → true\n// is_nested('[][[][[][]]') → true\n// is_nested('[][[][[][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][][]]') → true\n// is_nested('[][[][[][]["}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  const ceil = (n) => Math.ceil(n);\n  const squared = (n) => Math.pow(n, 2);\n  return lst.reduce((a, b) => a + squared(ceil(b)), 0);\n};\n\nconsole.log(sum_squares([1,2,3,4,5]));\nconsole.log(sum_squares([1,4,9,16,25]));\nconsole.log(sum_squares([1,3,5,7,9]));\nconsole.log(sum_squares([1.4,4.2,0]));\nconsole.log(sum_squares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const text = txt.toLowerCase();\n  const chars = text.charAt(text.length - 1);\n  if (alphabetic_chars.indexOf(chars)!== -1) {\n    return false;\n  }\n  const last_char_pos = text.lastIndexOf(chars);\n  if (last_char_pos === text.length - 1) {\n    return false;\n  }\n  if (text.indexOf(\" \") === last_char_pos) {\n    return false;\n  }\n  return true;\n}\n\n/* Create a function that returns true if a given string\n  contains at least one of the given words and false otherwise.\n  Examples:\n  contains_at_least_one_word(\"apple pie\", \"apple\", \"pie\") ➞ true\n  contains_at_least_one_word(\"apple pie\", \"apple\", \"pie \") ➞ false\n  contains_at_least_one_word(\"apple pie\", \"pie\", \"apple\") ➞ false\n  */\nconst contains_at_least_one_word = (txt, words) => {\n  words.forEach((word) => {\n    if (txt.indexOf(word)!== -1) {\n      return true;\n    }\n  });\n  return false;\n}\n\n/* Create a function that returns the last word of a given string\n  or null if there is no word.\n  Examples:\n  get_last_word(\"apple pie\") ➞ \"pie\"\n  get_last_word(\"apple pie \") ➞ \"pie\"\n  get_last_word(\"apple pie \") ➞ null\n  get_last_word(\"apple pie\") ➞ null\n  */\nconst get_last_word = (txt) => {\n  const last_word = txt.replace(/[\\s+]+$/, \"\").trim();\n  if (last_word.length === 0) {\n    return null;\n  }\n  return last_word;\n}\n\n/* Create a function that returns the first word of a given string\n  or null if there is no word.\n  Examples:\n  get_first_word(\"apple pie\") ➞ \"apple\"\n  get_first_word(\"apple pie \") ➞ \"apple\"\n  get_first_word(\"apple pie \") ➞ null\n  get_first_word(\"apple pie\") ➞ null\n  */\nconst get_first_word = (txt) => {\n  const first_word = txt.replace(/^[\\s+]+/, \"\").trim();\n  if (first_word.length === 0) {\n    return null;\n  }\n  return first_word;\n}\n\n/* Create a function that returns true if a given string\n  contains at least one of the given words and false otherwise.\n  Examples:\n  contains_at_least_one_word(\"apple pie\", \"apple\", \"pie\") ➞ true\n  contains_at_least_one_word(\"apple pie\", \"apple\", \"pie \") ➞ false\n  contains_at_least_one_word(\"apple pie\", \"pie\", \"apple\") ➞ false\n  */\nconst contains_at_least_one_word_in_each_line = (txt, words) => {\n  words.forEach((word) => {\n    if (txt.indexOf(word)!== -1) {\n      return true;\n    }\n  });\n  return false;\n}\n\n/* Create a function that returns a string with the last\n  word of a given string concatenated with the first word\n  of the next string or null if there is no next string.\n  Examples:\n  concat_words_with_next(\"apple pie\", \"apple\") ➞ \"apple pie\"\n  concat_words_with_next(\"apple pie\", \"pie\") ➞ \"pie apple\"\n  concat_words_with_next(\"apple pie\", \"\") ➞ null\n  */\nconst concat_words_with_next = (txt, next_txt) => {\n  const last_word = txt.replace(/[\\s+]+$/, \"\").trim();\n  if (last_word.length === 0) {\n    return null;\n  }\n  const first_word = next_txt.replace(/^[\\s+]+/, \"\").trim();\n  if (first_word.length === 0) {\n    return null;\n  }\n  return last_word + first_word;\n}\n\n/* Create a function that returns the first word of a given string\n  or null if there is no word.\n  Examples:\n  get_first_word(\"apple pie\") ➞ \"apple\"\n  get_first_word(\"apple pie \") ➞ \"apple\"\n  get_first_word(\"apple pie \") ➞ null\n  get_first_word(\"apple pie\") ➞ null\n  */\nconst get_first_word_in_each_line = (txt) => {\n  const words = txt.split(\" \");\n  if (words.length === 0) {\n    return null;\n  }\n  return words[0];\n}\n\n/* Create a function that returns the last word of a given string\n  or null if there is no word.\n  Examples:\n  get_last_word(\"apple pie\") ➞ \"pie\"\n  get_last_word(\"apple pie \") ➞ \"pie\"\n  get_last_word(\"apple pie \") ➞ null\n  get_last_word(\"apple pie\") ➞ null\n  */\nconst get_last_word_in_each_line = (txt) => {\n  const words = t"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let a = arr.slice()\n  let b = a.slice(1)\n  let l = a.length\n  let c = a.length - 1\n  let r = a.length - 1\n  let i = 0\n\n  while (i < l) {\n    if (a[i] < b[i]) {\n      c = i\n    }\n    i++\n  }\n\n  if (c < 0) {\n    return -1\n  }\n  return c\n}\n\nmodule.exports = can_arrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const result = lst.filter(x => x > 0)\n   .map(x => Math.max(...result))\n   .filter(x => x > 0)\n   .find(x => x > 0)\n  return result.length? result : null\n}\n\n/* Create a function that returns the largest integer in a list.\n  If there is no integer, return null.\n  Examples:\n  largest_integer([1, 2, 3, 4, 5, 6]) == 6\n  largest_integer([]) == null\n  largest_integer([0, 0, 0]) == null\n  */\nconst largest_integer = (lst) => {\n  const result = lst.filter(x => x > 0)\n   .find(x => x > 0)\n  return result? result : null\n}\n\n/* Create a function that returns the smallest integer in a list.\n  If there is no integer, return null.\n  Examples:\n  smallest_integer([1, 2, 3, 4, 5, 6]) == 1\n  smallest_integer([]) == null\n  smallest_integer([0, 0, 0]) == null\n  */\nconst smallest_integer = (lst) => {\n  const result = lst.filter(x => x > 0)\n   .find(x => x > 0)\n  return result? result : null\n}\n\n/* Create a function that returns a list of pairs.\n  If there is no pair, return null.\n  Examples:\n  pairs([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\n  pairs([]) == null\n  pairs([0, 0]) == null\n  */\nconst pairs = (lst) => {\n  const result = []\n  lst.forEach((value, index) => {\n    if (index % 2 === 0) {\n      result.push([value, lst[index - 1]])\n    }\n  })\n  return result.length? result : null\n}\n\n/* Create a function that returns a list of triplets.\n  If there is no triplet, return null.\n  Examples:\n  triplets([1, 2, 3, 4]) == [[1, 2, 3], [2, 3, 4]]\n  triplets([]) == null\n  triplets([0, 0, 0]) == null\n  */\nconst triplets = (lst) => {\n  const result = []\n  lst.forEach((value, index) => {\n    if (index % 3 === 0) {\n      result.push([value, lst[index - 1], lst[index - 2]])\n    }\n  })\n  return result.length? result : null\n}\n\n/* Create a function that returns a list of quadruplets.\n  If there is no quadruplet, return null.\n  Examples:\n  quadruplets([1, 2, 3, 4]) == [[1, 2, 3, 4]]\n  quadruplets([]) == null\n  quadruplets([0, 0, 0, 0]) == null\n  */\nconst quadruplets = (lst) => {\n  const result = []\n  lst.forEach((value, index) => {\n    if (index % 4 === 0) {\n      result.push([value, lst[index - 1], lst[index - 2], lst[index - 3]])\n    }\n  })\n  return result.length? result : null\n}\n\n/* Create a function that returns the sum of a list of numbers.\n  Examples:\n  sum([1, 2, 3, 4, 5]) == 15\n  sum([]) == 0\n  sum([0, 0, 0]) == 0\n  */\nconst sum = (lst) => {\n  const result = 0\n  lst.forEach(value => result += value)\n  return result\n}\n\n/* Create a function that returns the product of a list of numbers.\n  Examples:\n  product([1, 2, 3, 4, 5]) == 120\n  product([]) == 1\n  product([0, 0, 0]) == 0\n  */\nconst product = (lst) => {\n  const result = 1\n  lst.forEach(value => result *= value)\n  return result\n}\n\n/* Create a function that returns the average of a list of numbers.\n  Examples:\n  average([1, 2, 3, 4, 5]) == 3.0\n  average([]) == 0.0\n  average([0, 0, 0]) == 0.0\n  */\nconst average = (lst) => {\n  const sum = sum(lst)\n  return sum / lst.length\n}\n\n/* Create a function that returns the median of a list of numbers.\n  Examples:\n  median([1, 2, 3, 4, 5]) == 3.0\n  median([]) == null\n  median([0, 0, 0]) == null\n  */\nconst median = (lst) => {\n  const result = median_triplet(lst)\n  if (result) {\n    return result.sort((a, b) => a - b)[1]\n  }\n}\n\n/* Create a function that returns the mode of a list of numbers.\n  Examples:\n  mode([1, 2, 3, 4, 5]) == 4\n  mode([]) == null\n  mode([0, 0, 0]) == null\n  */\nconst mode = (lst) => {\n  const result = mode_triplet(lst)\n  if (result) {\n    return result.sort((a, b) => a - b)[0]\n  }\n}\n\n/* Create a function that returns the mode of a list of numbers.\n  Examples:\n  mode([1, 2, 3, 4, 5]) == 4\n  mode([]) == null\n  mode([0, 0, 0]) == null\n  */\nconst mode_triplet = (lst) => {\n  "}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  const a_is_float = typeof a === 'number'\n  const b_is_float = typeof b === 'number'\n\n  if (a_is_float && b_is_float) {\n    return a > b? a : b\n  }\n\n  const a_is_string = typeof a ==='string'\n  const b_is_string = typeof b ==='string'\n\n  if (a_is_string && b_is_string) {\n    const a_floating_point = a.replace(/[,.]/g, '')\n    const b_floating_point = b.replace(/[,.]/g, '')\n    if (a_floating_point === b_floating_point) {\n      return null\n    }\n    return a_floating_point > b_floating_point? a : b\n  }\n\n  return a > b? a : b\n}\n\n/*\n  Create a function that takes an array of numbers, and returns the largest number in the array.\n  Return null if the array is empty.\n  */\nconst compare_all = (array) => {\n  if (array.length === 0) {\n    return null\n  }\n  return array.reduce((a, b) => {\n    if (a === null) {\n      return b\n    }\n    if (a < b) {\n      return b\n    }\n    return a\n  })\n}\n\n/*\n  Create a function that takes an array of numbers, and returns the smallest number in the array.\n  Return null if the array is empty.\n  */\nconst compare_min = (array) => {\n  if (array.length === 0) {\n    return null\n  }\n  return array.reduce((a, b) => {\n    if (a === null) {\n      return b\n    }\n    if (a > b) {\n      return b\n    }\n    return a\n  })\n}\n\n/*\n  Create a function that takes an array of numbers, and returns the smallest number in the array.\n  Return null if the array is empty.\n  */\nconst compare_max = (array) => {\n  if (array.length === 0) {\n    return null\n  }\n  return array.reduce((a, b) => {\n    if (a === null) {\n      return b\n    }\n    if (a < b) {\n      return b\n    }\n    return a\n  })\n}\n\n/*\n  Create a function that takes an array of numbers, and returns the average number in the array.\n  Return null if the array is empty.\n  */\nconst compare_average = (array) => {\n  if (array.length === 0) {\n    return null\n  }\n  return array.reduce((a, b) => {\n    return a + b\n  }) / array.length\n}\n\n/*\n  Create a function that takes an array of numbers, and returns the sum of the numbers.\n  Return null if the array is empty.\n  */\nconst compare_sum = (array) => {\n  if (array.length === 0) {\n    return null\n  }\n  return array.reduce((a, b) => {\n    return a + b\n  })\n}\n\n/*\n  Create a function that takes an array of numbers, and returns the sum of the squares of the numbers.\n  Return null if the array is empty.\n  */\nconst compare_sum_squares = (array) => {\n  if (array.length === 0) {\n    return null\n  }\n  return array.reduce((a, b) => {\n    return a + Math.pow(b, 2)\n  })\n}\n\n/*\n  Create a function that takes two objects, and returns the object with the largest values.\n  Return null if the objects are equal.\n  */\nconst compare_two = (obj1, obj2) => {\n  return compare_one(obj1.a, obj2.a)\n}\n\n/*\n  Create a function that takes two objects, and returns the object with the largest values.\n  Return null if the objects are equal.\n  */\nconst compare_two_obj = (obj1, obj2) => {\n  if (obj1.a === null) {\n    return obj2\n  }\n  if (obj2.a === null) {\n    return obj1\n  }\n  return compare_one(obj1.a, obj2.a)\n}\n\n/*\n  Create a function that takes two objects, and returns the object with the largest values.\n  Return null if the objects are equal.\n  */\nconst compare_two_arr = (arr1, arr2) => {\n  if (arr1.length === 0) {\n    return arr2\n  }\n  if (arr2.length === 0) {\n    return arr1\n  }\n  return compare_one(arr1[0], arr2[0])\n}\n\n/*\n  Create a function that takes two objects, and returns the object with the smallest values.\n  Return null if the objects are equal.\n  */\nconst compare_two_reverse = (obj1, obj2) => {\n  return compare_one(obj2.a, obj1.a)\n}\n\n/*\n  Create a function that takes two objects, and returns the object with the smallest values.\n  Return null if the objects are equal.\n  */\nconst compare_two_reverse_obj = (obj1, obj2) => {\n  if (obj1.a === null) {\n    return obj2\n  }\n  if (obj2.a === null) {\n    return obj1\n  }\n  return compare_one(obj2.a, obj1.a)\n}\n\n/*\n  Create a function that takes two objects, and returns the object with the smallest"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 4) {\n    return true\n  }\n  if (n === 8) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  return is_equal_to_sum_even(n - 2)\n}\n\nconst is_equal_to_sum_even_re = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 4) {\n    return true\n  }\n  if (n === 8) {\n    return false\n  }\n  if (n === 16) {\n    return false\n  }\n  if (n === 32) {\n    return false\n  }\n  if (n === 64) {\n    return false\n  }\n  if (n === 128) {\n    return false\n  }\n  return is_equal_to_sum_even_re(n - 2)\n}\n\nconst is_equal_to_sum_even_df = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 4) {\n    return true\n  }\n  if (n === 8) {\n    return false\n  }\n  if (n === 16) {\n    return false\n  }\n  if (n === 32) {\n    return false\n  }\n  if (n === 64) {\n    return false\n  }\n  if (n === 128) {\n    return false\n  }\n  return is_equal_to_sum_even_df(n - 2)\n}\n\nconst is_equal_to_sum_even_re2 = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 4) {\n    return true\n  }\n  if (n === 8) {\n    return false\n  }\n  if (n === 16) {\n    return false\n  }\n  if (n === 32) {\n    return false\n  }\n  if (n === 64) {\n    return false\n  }\n  if (n === 128) {\n    return false\n  }\n  return is_equal_to_sum_even_re2(n - 2)\n}\n\nconst is_equal_to_sum_even_df2 = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 4) {\n    return true\n  }\n  if (n === 8) {\n    return false\n  }\n  if (n === 16) {\n    return false\n  }\n  if (n === 32) {\n    return false\n  }\n  if (n === 64) {\n    return false\n  }\n  if (n === 128) {\n    return false\n  }\n  return is_equal_to_sum_even_df2(n - 2)\n}\n\nconst is_equal_to_sum_even_re3 = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 4) {\n    return true\n  }\n  if (n === 8) {\n    return false\n  }\n  if (n === 16) {\n    return false\n  }\n  if (n === 32) {\n    return false\n  }\n  if (n === 64) {\n    return false\n  }\n  if (n === 128) {\n    return false\n  }\n  return is_equal_to_sum_even_re3(n - 2)\n}\n\nconst is_equal_to_sum_even_df3 = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 4) {\n    return true\n  }\n  if (n === 8) {\n    return false\n  }\n  if (n === 16) {\n    return false\n  }\n  if (n === 32) {\n    return false\n  }\n  if (n === 64) {\n    return false\n  }\n  if (n === 128) {\n    return false\n  }\n  return is_equal_to_sum_even_df3(n - 2)\n}\n\nconsole.log(is_equal_to_sum_even(9))\nconsole.log(is_equal_to_sum_even_re(9))\nconsole.log(is_equal_to_sum_even_df(9))\nconsole.log(is_equal_to_sum_even_re2(9))\nconsole.log(is_equal_to_sum_even_df2(9))\nconsole.log(is_equal_to_sum_even_re3(9))\nconsole.log(is_equal_to_sum_even_df3(9))\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  let s = 1\n  while (n > 1) {\n    s = s * n\n    n = n - 1\n  }\n  return s\n}\n\nconst sum_of_factorial = (n) => {\n  let s = 0\n  for (let i = 1; i <= n; i++) {\n    s = s + special_factorial(i)\n  }\n  return s\n}\n\nexport default sum_of_factorial\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s/g, '_');\n};\n\n/*\n  Given a string text, return a string with all the characters in it\n  that are lowercase (not uppercase or numbers)\n  \n  fix_lowercase(\"example\") == \"example\"\n  fix_lowercase(\"Example\") == \"example\"\n  fix_lowercase(\"example 2\") == \"example2\"\n  fix_lowercase(\" example 3\") == \"example3\"\n  */\nconst fix_lowercase = (text) => {\n  return text.toLowerCase();\n};\n\n/*\n  Given a string text, return a string with all the characters in it\n  that are uppercase (not lowercase or numbers)\n  \n  fix_uppercase(\"example\") == \"EXAMPLE\"\n  fix_uppercase(\"Example\") == \"EXAMPLE\"\n  fix_uppercase(\"example 2\") == \"EXAMPLE2\"\n  fix_uppercase(\" example 3\") == \"EXAMPLE3\"\n  */\nconst fix_uppercase = (text) => {\n  return text.toUpperCase();\n};\n\n/*\n  Given a string text, return a string with all the characters in it\n  that are numbers\n  \n  fix_numbers(\"example\") == \"example\"\n  fix_numbers(\"Example\") == \"example\"\n  fix_numbers(\"example 2\") == \"example_2\"\n  fix_numbers(\" example 3\") == \"example_3\"\n  */\nconst fix_numbers = (text) => {\n  return text.replace(/[^0-9]/g, '');\n};\n\n/*\n  Given a string text, return a string with all the characters in it\n  that are not numbers or lowercase\n  \n  fix_nonnumbers(\"example\") == \"example\"\n  fix_nonnumbers(\"Example\") == \"example\"\n  fix_nonnumbers(\"example 2\") == \"example2\"\n  fix_nonnumbers(\" example 3\") == \"example3\"\n  */\nconst fix_nonnumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  Given a string text, return a string with all the punctuation characters in it\n  that are not upper or lowercase\n  \n  fix_punctuation(\"example\") == \"example\"\n  fix_punctuation(\"Example\") == \"example\"\n  fix_punctuation(\"example 2\") == \"example_2\"\n  fix_punctuation(\" example 3\") == \"example_3\"\n  */\nconst fix_punctuation = (text) => {\n  return text.replace(/[^A-Za-z0-9 ]/g, '');\n};\n\n/*\n  Given a string text, return a string with all the punctuation characters in it\n  that are not numbers\n  \n  fix_punctuation(\"example\") == \"example\"\n  fix_punctuation(\"Example\") == \"example\"\n  fix_punctuation(\"example 2\") == \"example_2\"\n  fix_punctuation(\" example 3\") == \"example_3\"\n  */\nconst fix_punctuation_numbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  Given a string text, return a string with all the punctuation characters in it\n  that are not upper or lowercase\n  \n  fix_punctuation(\"example\") == \"example\"\n  fix_punctuation(\"Example\") == \"example\"\n  fix_punctuation(\"example 2\") == \"example_2\"\n  fix_punctuation(\" example 3\") == \"example_3\"\n  */\nconst fix_punctuation_nonnumbers = (text) => {\n  return text.replace(/[A-Za-z0-9 ]/g, '');\n};\n\n/*\n  Given a string text, return a string with all the characters in it\n  that are lowercase and not punctuation or numbers\n  \n  fix_lowercase_nonpunctuation(\"example\") == \"example\"\n  fix_lowercase_nonpunctuation(\"Example\") == \"example\"\n  fix_lowercase_nonpunctuation(\"example 2\") == \"example_2\"\n  fix_lowercase_nonpunctuation(\" example 3\") == \"example_3\"\n  */\nconst fix_lowercase_nonpunctuation = (text) => {\n  return text.replace(/[^A-Za-z0-9]/g, '').toLowerCase();\n};\n\n/*\n  Given a string text, return a string with all the characters in it\n  that are uppercase and not punctuation or numbers\n  \n  fix_uppercase_nonpunctuation(\"example\") == \"EXAMPLE\"\n  fix_uppercase_nonpunctuation(\"Example\") == \"EXAMPLE\"\n  fix_uppercase_nonpunctuation(\"example 2\") == \"EXAMPLE_2\"\n  fix_uppercase_nonpunctuation(\" example 3\") == \"EXAMPLE_3\"\n  */\nconst fix_uppercase_nonpunctuation = (text) => {\n  return text.replace(/[^A-Za-z0-9]/g, '').toUpperCase();\n};\n\n/*\n  Given a string text, return a string with all the characters in it\n  that are not uppercase and not lowercase or punctuation or numbers\n  \n  fix_nonuppercase_nonpunctuation(\"example\") == \"example\"\n  fix_nonuppercase_nonpunctuation(\"Example\") == \"example\"\n  fix_nonuppercase_nonpunctuation(\"example 2\") == \"example_2\"\n  fix_nonuppercase_nonpunctuation(\" example 3\") == \"example_3\"\n  */\nconst fix_nonuppercase_nonpunctuation = (text) => {\n  return text.replace(/[^A-Za-z0-9]/g, '').toLowerCase();\n"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  if (file_name.indexOf('.') === -1) {\n    return 'No';\n  }\n\n  const valid_chars = [...file_name.split('')].map(char => char.charCodeAt(0));\n  const valid_char_count = valid_chars.filter(char => char >= 'a').length;\n  const file_name_count = file_name.split('.').length;\n\n  if (valid_char_count === 1) {\n    const first_char = valid_chars.find(char => char >= 'a') || 'z';\n    if (file_name.split('.').slice(0, 1)[0].charCodeAt(0)!== first_char.charCodeAt(0)) {\n      return 'No';\n    }\n  }\n\n  if (file_name_count === 1) {\n    return 'Yes';\n  }\n\n  if (file_name.split('.').slice(1).includes('txt')) {\n    return 'Yes';\n  }\n\n  if (file_name.split('.').slice(1).includes('exe')) {\n    return 'Yes';\n  }\n\n  if (file_name.split('.').slice(1).includes('dll')) {\n    return 'Yes';\n  }\n\n  return 'No';\n};\n\nexport default file_name_check;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  return lst.reduce((acc, x) => x * x, lst)\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_cubes = (lst) => {\n  return lst.reduce((acc, x) => x * x * x, lst)\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_cubic = (lst) => {\n  return lst.reduce((acc, x) => x * x * x * x, lst)\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_quintic = (lst) => {\n  return lst.reduce((acc, x) => x * x * x * x * x, lst)\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_quintic = (lst) => {\n  return lst.reduce((acc, x) => x * x * x * x * x, lst)\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_quintic = (lst) => {\n  return lst.reduce((acc, x) => x * x * x * x * x, lst)\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_quintic = (lst) => {\n  return lst.reduce((acc, x) => x * x * x * x * x, lst)\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  let result = ''\n  for (let i = 0; i < sentence.length; i++) {\n    const word = sentence[i]\n    const index = Math.floor(Math.pow(2, sentence.length - i - 1))\n    result += (index === 1)? word : ''\n  }\n  return result\n}\n\nexport default words_in_sentence\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === '0') return false\n  const s = x.toString()\n  const m = n.toString()\n  const r = s.match(/^([0-9]+)([0-9]+)/)\n  if (r === null) return false\n  const xs = parseInt(r[1], 10)\n  const ns = parseInt(r[2], 10)\n  const xs_len = xs.toString().length\n  const ns_len = ns.toString().length\n  if (xs_len > ns_len) return false\n  return xs_len === ns_len && xs === parseInt(x * ns, 10)\n}\n\n/*\n  Given a string representing an expression of the form a+b, where a and b are both positive whole numbers,\n  return a boolean indicating whether the expression evaluates to a whole number.\n\n  For example, for a+b, return true if a+b evaluates to a whole number and false otherwise.\n\n  Please note that the expression may contain non-whole numbers.\n*/\nconst isValidExpression = (e) => {\n  const n = e.toString()\n  const a = n.match(/[0-9]+/)\n  if (a === null) return false\n  const b = n.match(/[0-9]+/)\n  if (b === null) return false\n  return a[0] === b[0]\n}\n\nconst add = (a, b) => {\n  return a + b\n}\n\nconst add2 = (a, b) => {\n  return a + b\n}\n\nconst sub = (a, b) => {\n  return a - b\n}\n\nconst mul = (a, b) => {\n  return a * b\n}\n\nconst mul2 = (a, b) => {\n  return a * b\n}\n\nconst div = (a, b) => {\n  return a / b\n}\n\nconst div2 = (a, b) => {\n  return a / b\n}\n\nconst isValid = (e) => {\n  if (!isValidExpression(e)) return false\n  if (e === '0') return true\n  const sum = sum_of_sub(e)\n  return (isValidExpression(sum) && sum === e)\n}\n\nconst sum_of_sub = (e) => {\n  if (e === '0') return '0'\n  const sub_1 = sub(e, '1')\n  const sub_2 = sub(e, '2')\n  const sub_3 = sub(e, '3')\n  const sub_4 = sub(e, '4')\n  const sub_5 = sub(e, '5')\n  const sub_6 = sub(e, '6')\n  const sub_7 = sub(e, '7')\n  const sub_8 = sub(e, '8')\n  const sub_9 = sub(e, '9')\n  const sub_10 = sub(e, '10')\n  const sub_11 = sub(e, '11')\n  const sub_12 = sub(e, '12')\n  const sub_13 = sub(e, '13')\n  const sub_14 = sub(e, '14')\n  const sub_15 = sub(e, '15')\n  const sub_16 = sub(e, '16')\n  const sum = mul(sub_1, sub_2)\n  sum = sum + mul(sub_3, sub_4)\n  sum = sum + mul(sub_5, sub_6)\n  sum = sum + mul(sub_7, sub_8)\n  sum = sum + mul(sub_9, sub_10)\n  sum = sum + mul(sub_11, sub_12)\n  sum = sum + mul(sub_13, sub_14)\n  sum = sum + mul(sub_15, sub_16)\n  return sum\n}\n\nconst test = () => {\n  console.log(simplify(\"1/5\", \"5/1\"))\n  console.log(simplify(\"1/6\", \"2/1\"))\n  console.log(simplify(\"7/10\", \"10/2\"))\n  console.log(isValid(\"1/3\"))\n  console.log(isValid(\"1/5\"))\n  console.log(isValid(\"2/1\"))\n  console.log(isValid(\"2/3\"))\n  console.log(isValid(\"4/2\"))\n  console.log(isValid(\"2/3\"))\n  console.log(isValid(\"4/2\"))\n  console.log(isValid(\"1/3\"))\n  console.log(isValid(\"2/3\"))\n  console.log(isValid(\"1/5\"))\n  console.log(isValid(\"1/6\"))\n  console.log(isValid(\"7/10\"))\n  console.log(isValid(\"7/10\"))\n  console.log(isValid(\"10/2\"))\n  console.log(isValid(\"10/2\"))\n  console.log(isValid(\"10/4\"))\n  console.log(isValid(\"10/4\"))\n  console.log(isValid(\"10/3\"))\n  console.log(isValid(\"10/3\"))\n  console.log(isValid(\"10/5\"))\n  console.log(isValid(\"10/6\"))\n  console.log(isValid(\"10/8\"))\n  console.log(isValid(\"10/9\"))\n  console.log(isValid(\"10/12\"))\n  console.log(isValid(\"10/14\"))\n  console.log(isValid(\"10/13\"))\n  console.log(isValid(\"10/15\"))\n  console.log(isValid(\"10/16\"))\n  console"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted_points = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((acc, c, i) => {\n      acc += (c === '9'? 0 : parseInt(c, 10))\n      return acc\n    }, 0)\n    const b_sum = b.toString().split('').reduce((acc, c, i) => {\n      acc += (c === '9'? 0 : parseInt(c, 10))\n      return acc\n    }, 0)\n    if (a_sum === b_sum) return a < b? -1 : 1\n    return a_sum - b_sum\n  })\n  return sorted_points\n}\n\nmodule.exports = order_by_points\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let result = 0;\n  for (let num of nums) {\n    if (num > 10 && (num % 2 === 1 || num % 2 === -1)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(special_filter([15, -73, 14, -15]));\nconsole.log(special_filter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const num_triples = 0;\n  const array = new Array(n);\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      array[j] = i * i - i + 1;\n    }\n    num_triples += get_triples(array);\n  }\n  return num_triples;\n}\n\nfunction get_triples(array) {\n  const num_triples = 0;\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      const k = i + j;\n      if (k < array.length) {\n        if ((array[i] + array[j] + array[k]) % 3 === 0) {\n          num_triples++;\n        }\n      }\n    }\n  }\n  return num_triples;\n}\n\nconsole.log(get_max_triples(5));<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetList = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const planet1Name = planetList.find(x => x === planet1)\n  const planet2Name = planetList.find(x => x === planet2)\n  if (planet1Name === undefined || planet2Name === undefined) {\n    return []\n  }\n  let index1 = 0\n  let index2 = 0\n  let currentPlanet = planet1Name\n  while (index1 < planetList.length) {\n    if (planetList[index1] === currentPlanet) {\n      index1++\n    }\n  }\n  while (index2 < planetList.length) {\n    if (planetList[index2] === currentPlanet) {\n      index2++\n    }\n  }\n  if (index1 === planetList.length) {\n    index1 = planetList.length - 1\n  }\n  if (index2 === planetList.length) {\n    index2 = planetList.length - 1\n  }\n  let planetArray = []\n  for (let i = index1; i <= index2; i++) {\n    planetArray.push(planetList[i])\n  }\n  return planetArray\n}\n\nconst test = () => {\n  console.log(bf(\"Mercury\", \"Uranus\"))\n  console.log(bf(\"Mercury\", \"Jupiter\"))\n  console.log(bf(\"Jupiter\", \"Mercury\"))\n  console.log(bf(\"Jupiter\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Jupiter\", \"Earth\"))\n  console.log(bf(\"Earth\", \"Mercury\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Jupiter\", \"Mars\"))\n  console.log(bf(\"Jupiter\", \"Uranus\"))\n  console.log(bf(\"Saturn\", \"Uranus\"))\n  console.log(bf(\"Saturn\", \"Mercury\"))\n  console.log(bf(\"Saturn\", \"Mercury\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Saturn\"))\n  console.log(bf(\"Mercury\", \"Sat"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let result = [...lst];\n  let result_length = result.length;\n  let sum = 0;\n  let i;\n  for (i = 0; i < result_length; i += 1) {\n    sum += result[i].length;\n  }\n  let j;\n  let index = 0;\n  while (sum > 0) {\n    if (sum % 2 === 0) {\n      index = Math.floor(sum / 2);\n      sum = sum - index;\n      result.splice(index, 1);\n      result_length -= 1;\n    } else {\n      sum = sum - (sum % 2);\n    }\n  }\n  result = result.sort();\n  return result;\n};\n\n/*Write a function that takes a list of words as a parameter,\n  and returns the list with all the vowels in it removed.\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_without_vowels = (lst) => {\n  let result = [...lst];\n  let result_length = result.length;\n  let i;\n  for (i = 0; i < result_length; i += 1) {\n    let letter = result[i];\n    if (letter.length === 1) {\n      result.splice(i, 1);\n      result_length -= 1;\n      i -= 1;\n    }\n  }\n  result = result.sort();\n  return result;\n};\n\ndescribe('list_sort', () => {\n  it('should return an array in ascending order', () => {\n    const result = list_sort([\"aa\", \"a\", \"aaa\"]);\n    expect(result).toEqual([\"aa\"]);\n  });\n  it('should return an array in ascending order', () => {\n    const result = list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]);\n    expect(result).toEqual([\"ab\", \"cd\"]);\n  });\n  it('should return an array in ascending order', () => {\n    const result = sorted_list_sum([\"aa\", \"a\", \"aaa\", \"ab\"]);\n    expect(result).toEqual([\"aa\"]);\n  });\n  it('should return an array in ascending order', () => {\n    const result = sorted_list_without_vowels([\"aa\", \"a\", \"aaa\", \"ab\"]);\n    expect(result).toEqual([\"aa\"]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (x_or_y.isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst x_or_y.isPrime = (n) => {\n  if (n % 2 == 0) {\n    return false\n  }\n\n  const sqrt = Math.sqrt(n)\n\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i == 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport default x_or_y\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (n > 0 && Math.floor(n) == n) {\n      return (acc + n) * (acc + n);\n    } else {\n      return acc;\n    }\n  }, 0);\n};\n\n// Test\nconsole.log(double_the_difference([1, 3, 2, 0]));\nconsole.log(double_the_difference([-1, -2, 0]));\nconsole.log(double_the_difference([9, -2]));\nconsole.log(double_the_difference([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = [...game].map(n => n)\n  let guess = [...guess].map(n => n)\n  \n  let len = score.length\n  let result = []\n  for(let i=0; i<len; i++) {\n    let diff = score[i] - guess[i]\n    result.push(diff)\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let extensions_string = extensions.join(\"\")\n  let extensions_strength = 0\n  extensions.forEach(extension => {\n    let extension_name = extension.toLowerCase()\n    let extension_strength = extension_name.split(\"\").reduce((carry, char, i) => {\n      if (i < extension_name.length - 1) {\n        carry = carry + char.toUpperCase()\n      } else {\n        carry = carry + char\n      }\n      return carry\n    }, \"\")\n    extensions_strength = Math.max(extensions_strength, extension_strength)\n  })\n  let class_strength = class_name.toUpperCase().split(\"\").reduce((carry, char, i) => {\n    if (i < class_name.length - 1) {\n      carry = carry + char.toUpperCase()\n    } else {\n      carry = carry + char\n    }\n    return carry\n  }, \"\")\n  let class_name_with_strength = class_name + \".\" + extensions_strength + \".\" + class_strength\n  return class_name_with_strength\n}\n\nexport default strongest_extension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n    if (a.length === 0) {\n        return false;\n    }\n    const a_length = a.length;\n    const b_length = b.length;\n    const a_subs = [];\n    const b_subs = [];\n    let i = 0;\n    let j = 0;\n    while (i < a_length && j < b_length) {\n        if (a[i] === b[j]) {\n            a_subs.push(a[i]);\n            b_subs.push(b[j]);\n            i++;\n            j++;\n        } else if (a[i] === b[j] + a[i]) {\n            i++;\n            j++;\n        } else if (a[i] === a[i] + b[j]) {\n            i++;\n        } else if (b[j] === a[i] + b[j]) {\n            j++;\n        } else {\n            return false;\n        }\n    }\n    if (i === a_length) {\n        return true;\n    }\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n    let res = [0, 0];\n    while (num) {\n        if (num % 2 === 0) {\n            res[0]++;\n        } else {\n            res[1]++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return res;\n}\n\nexport default even_odd_count;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n    const a = [ \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\" ];\n    const b = [ \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\" ];\n    let roman = 0;\n    let d = 0;\n\n    while (number > 0) {\n        roman += a[number % 10] * (number / 10);\n        number = Math.floor(number / 10);\n    }\n\n    roman = roman.toString();\n    for (let i = 0; i < roman.length; i++) {\n        d = roman.charAt(i);\n        d = d.toUpperCase();\n        roman = roman.substring(0, i) + d + roman.substring(i + 1);\n    }\n\n    return roman;\n};\n\nexport default int_to_mini_roman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/*\n  Given the length of the hypotenuse and the length of the other sides,\n  return the length of the third side.\n  Example:\n  hypotenuse = 3\n  length_of_side1 = 4\n  length_of_side2 = 5\n  length_of_side3 = 6\n  hypotenuse + 4 + 5 = 18\n  18 is the hypotenuse of a triangle with sides of length 4, 5, and 6.\n*/\nconst length_of_side = (hypotenuse, length_of_side1, length_of_side2) => {\n  return hypotenuse + length_of_side1 + length_of_side2;\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the length of the\n  third side, or 0 if the triangle is a right-angle triangle.\n*/\nconst length_of_side_with_hypotenuse = (a, b, c) => {\n  if (right_angle_triangle(a, b, c)) {\n    return 0;\n  } else {\n    return length_of_side(a, b, c);\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the length of the\n  third side, or 0 if the triangle is a right-angle triangle.\n*/\nconst length_of_side_with_hypotenuse_2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return 0;\n  } else {\n    return length_of_side(a, b, c);\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the length of the\n  third side, or 0 if the triangle is a right-angle triangle.\n*/\nconst length_of_side_with_hypotenuse_3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return 0;\n  } else {\n    return length_of_side(a, b, c);\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the length of the\n  third side, or 0 if the triangle is a right-angle triangle.\n*/\nconst length_of_side_with_hypotenuse_4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return 0;\n  } else {\n    return length_of_side(a, b, c);\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the length of the\n  third side, or 0 if the triangle is a right-angle triangle.\n*/\nconst length_of_side_with_hypotenuse_5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return 0;\n  } else {\n    return length_of_side(a, b, c);\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the length of the\n  third side, or 0 if the triangle is a right-angle triangle.\n*/\nconst length_of_side_with_hypotenuse_6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return 0;\n  } else {\n    return length_of_side(a, b, c);\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  // The idea is to convert the string to an array of the same length,\n  // and check for the lexicographical order of the array\n  const arr = words.map((word) => word.split(\"\"));\n  return arr.sort().reduce((previous, current) => {\n    if (previous.length!== current.length) {\n      return current;\n    }\n    return previous.find((previous_char, current_char) => {\n      if (previous_char === current_char) {\n        return true;\n      }\n      return previous_char > current_char;\n    });\n  });\n};\n\nexport default find_max;\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const left = number - need;\n  const eaten = number - remaining;\n  if (need > remaining) {\n    return [left, need - remaining];\n  } else {\n    return [left, left];\n  }\n}\n\nconst number = input.readInt();\nconst need = input.readInt();\nconst remaining = input.readInt();\n\nif (number >= need && remaining > 0) {\n  const [eaten, left] = eat(number, need, remaining);\n  console.log(eaten);\n} else {\n  console.log(left);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  // check if length of operator is equal to length of operand minus one\n  if (operator.length!== operand.length - 1) {\n    throw new Error('Operator list must be one less than operand list.')\n  }\n\n  // check if first operator is a basic operator\n  if (operator.indexOf(['+', '-', '*', '//', '**']) === -1) {\n    throw new Error('First operator must be a basic operator.')\n  }\n\n  // check if all elements of operand list are non-negative integers\n  for (let i = 0; i < operand.length; i++) {\n    if (operand[i] <= 0) {\n      throw new Error('All elements of operand list must be non-negative.')\n    }\n  }\n\n  // build algebric expression\n  let result = 0\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i]\n    } else if (operator[i] === '-') {\n      result -= operand[i]\n    } else if (operator[i] === '*') {\n      result *= operand[i]\n    } else if (operator[i] === '//') {\n      result /= operand[i]\n    } else if (operator[i] === '**') {\n      result **= operand[i]\n    }\n  }\n\n  return result\n}\n\nconst algebric_expression = [\n  ['a', '+', 'b'],\n  ['c', '-', 'b'],\n  ['a', '*', 'b'],\n  ['c', '*', 'b'],\n  ['a', '//', 'b'],\n  ['c', '//', 'b'],\n  ['a', '**', 'b'],\n  ['c', '**', 'b'],\n  ['a', '+', 'b', '+', 'c'],\n  ['c', '-', 'b', '-', 'c'],\n  ['a', '*', 'b', '*', 'c'],\n  ['c', '*', 'b', '*', 'c'],\n  ['a', '//', 'b', '//', 'c'],\n  ['c', '//', 'b', '//', 'c'],\n  ['a', '**', 'b', '**', 'c'],\n  ['c', '**', 'b', '**', 'c'],\n  ['a', '+', 'b', '+', 'c', '+', 'd'],\n  ['c', '-', 'b', '-', 'c', '-', 'd'],\n  ['a', '*', 'b', '*', 'c', '*', 'd'],\n  ['c', '*', 'b', '*', 'c', '*', 'd'],\n  ['a', '//', 'b', '//', 'c', '//', 'd'],\n  ['c', '//', 'b', '//', 'c', '//', 'd'],\n  ['a', '**', 'b', '**', 'c', '**', 'd'],\n  ['c', '**', 'b', '**', 'c', '**', 'd']\n]\n\nconst check_algebra = algebric_expression.map(\n  (expression) => {\n    try {\n      do_algebra(expression[0], expression.slice(1))\n    } catch (e) {\n      return false\n    }\n    return true\n  }\n)\n\nconsole.log(check_algebra)\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  let r = '';\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      r += s[i].toUpperCase();\n    } else {\n      r += s[i];\n    }\n  }\n  return r;\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '7f47c2cb4b3f9aa2af09988b95e6e0c5a7f8d4e3e3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a5d9e5e5f4f3f0f8b0a4f2e5a"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    let digit = i % 10;\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, find the smallest prime number, p, such that\n  p * p > n. If no such prime exists, return -1.\n\n  E.g.:\n  prime_next_power_of_two(14) => 5\n  prime_next_power_of_two(15) => -1\n  prime_next_power_of_two(16) => -1\n  prime_next_power_of_two(100) => -1\n  prime_next_power_of_two(999) => 2\n  prime_next_power_of_two(1000) => 2\n  prime_next_power_of_two(1001) => 3\n  prime_next_power_of_two(1004) => 5\n  prime_next_power_of_two(1005) => 7\n  prime_next_power_of_two(1006) => 11\n  prime_next_power_of_two(1100) => -1\n  prime_next_power_of_two(100000000) => -1\n  prime_next_power_of_two(10000000000000) => -1\n  prime_next_power_of_two(100000000000007) => 13\n  prime_next_power_of_two(100000000000008) => -1\n  prime_next_power_of_two(100000000000009) => -1\n  prime_next_power_of_two(100000000000010) => -1\n  prime_next_power_of_two(100000000000011) => -1\n  prime_next_power_of_two(100000000000012) => -1\n  prime_next_power_of_two(100000000000013) => -1\n  prime_next_power_of_two(100000000000014) => -1\n  prime_next_power_of_two(100000000000015) => -1\n  prime_next_power_of_two(100000000000016) => -1\n  prime_next_power_of_two(100000000000017) => -1\n  prime_next_power_of_two(100000000000018) => -1\n  prime_next_power_of_two(100000000000019) => -1\n  prime_next_power_of_two(100000000000020) => -1\n  prime_next_power_of_two(100000000000021) => -1\n  prime_next_power_of_two(100000000000022) => -1\n  prime_next_power_of_two(100000000000023) => -1\n  prime_next_power_of_two(100000000000024) => -1\n  prime_next_power_of_two(100000000000025) => -1\n  prime_next_power_of_two(100000000000026) => -1\n  prime_next_power_of_two(100000000000027) => -1\n  prime_next_power_of_two(100000000000028) => -1\n  prime_next_power_of_two(100000000000029) => -1\n  prime_next_power_of_two(100000000000030) => -1\n  prime_next_power_of_two(100000000000031) => -1\n  prime_next_power_of_two(100000000000032) => -1\n  prime_next_power_of_two(100000000000033) => -1\n  prime_next_power_of_two(100000000000034) => -1\n  prime_next_power_of_two(100000000000035) => -1\n  prime_next_power_of_two(100000000000036) => -1\n  prime_next_power_of_two(100000000000037) => -1\n  prime_next_power_of_two(100000000000038) => -1\n  prime_next_power_of_two(100000000000039) => -1\n  prime_next_power_of_two(100000000000040) => -1\n  prime_next_power_of_two(100000000000041) => -1\n  prime_next_power_of_two(100000000000042) => -1\n  prime_next_power_of_two(100000000000043) => -1\n  prime_next_power_of_two(100000000000044) => -1\n  prime_next_power_of_two(100000000000045) => -1\n  prime_next_power_of_two(100000000000046) => -1\n  prime_next_power_of_two(100000000000047) => -1\n  prime_next_power_of_two(100000000000048) => -1\n  prime_next_power_of_two(100000000000049) => -1\n  prime_next_power_of_two(100000000000050) => -1\n  prime_next_power_of_two(100000000000051) => -1\n  prime_next_power_of_two(100000000000052) => -1\n  prime_next_power_of_two(100000000000053) => -1\n  prime_next_power_of_two(100000000000054) => -1\n  prime_next_power_of_two(100000000000055) => -1\n  prime_next_power_of_two(100000000000056) => -1\n  prime_next_power_of_two(100000000000057) => -1\n  prime_next_power_of_two(100000000000058) => -1\n  prime_next_power_of_two(100000000000059) => -1\n  prime_next_power_of_two(100000000000060) => -1\n  prime_next_power_of_two(100000000000061) => -1\n  prime"}
