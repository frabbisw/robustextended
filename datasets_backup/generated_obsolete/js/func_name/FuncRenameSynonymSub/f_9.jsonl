{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n    const difference = (x, y) => Math.abs(x - y);\n    const numberArray = numbers.slice();\n    let index = 0;\n    let index2 = 1;\n\n    while (index < numberArray.length - 1) {\n        if (difference(numberArray[index], numberArray[index2]) <= threshold) {\n            return true;\n        }\n        index++;\n        index2++;\n    }\n    return false;\n};\n\nmodule.exports = receiveCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  let stack = []\n  let group = []\n  paren_string.split(' ').forEach((char, index) => {\n    if (char === '(') {\n      stack.push(group)\n      group = []\n    } else if (char === ')') {\n      group.push(stack.pop())\n    } else if (group.length) {\n      group.push(char)\n    }\n  })\n  if (stack.length) {\n    return stack.pop()\n  } else {\n    return group\n  }\n}\n\n/*\n  Given a string, find the number of pairs of parentheses that need to be balanced,\n  but do not count the brackets that enclose the string.\n  >>> balancedParens('((()))')\n  2\n  >>> balancedParens('((()())')\n  2\n  >>> balancedParens('(()(())')\n  2\n  >>> balancedParens('(())())')\n  1\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('((())')\n  0\n  >>> balancedParens('()')\n  0\n  >>> balancedParens('(((())))')\n  2\n  >>> balancedParens('((()()()))')\n  1\n  >>> balancedParens('(()())')\n  1\n  >>> balancedParens('()())')\n  1\n  >>> balancedParens('())')\n  0\n  >>> balancedParens('())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(()())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(((()()))')\n  2\n  >>> balancedParens('((())())')\n  2\n  >>> balancedParens('((())())')\n  1\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('((())')\n  0\n  >>> balancedParens('()')\n  0\n  >>> balancedParens('(((())))')\n  2\n  >>> balancedParens('((()()()))')\n  1\n  >>> balancedParens('(()())')\n  1\n  >>> balancedParens('()())')\n  1\n  >>> balancedParens('())')\n  0\n  >>> balancedParens('())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('((())')\n  0\n  >>> balancedParens('()')\n  0\n  >>> balancedParens('(((())))')\n  2\n  >>> balancedParens('((())())')\n  2\n  >>> balancedParens('((())())')\n  1\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('((())')\n  0\n  >>> balancedParens('()')\n  0\n  >>> balancedParens('(((())))')\n  2\n  >>> balancedParens('((())())')\n  2\n  >>> balancedParens('((())())')\n  1\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('((())')\n  0\n  >>> balancedParens('()')\n  0\n  >>> balancedParens('(((())))')\n  2\n  >>> balancedParens('((())())')\n  2\n  >>> balancedParens('((())())')\n  1\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(())')\n  0\n  >>> balancedParens('(((())))')\n  0\n  >>> balancedParens('()')\n  0\n  >>> balancedParens('(((())))')\n  0\n  >>> balancedParens('(()())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('(()())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('(())())')\n  0\n  >>> balancedParens('()())')\n  0\n  >>> balanced"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberInt = number.toString().split('.')[0]\n  return Math.trunc(number - parseFloat(numberInt))\n}\n\n/* Given a list of numbers, returns the sum of all of them.\n  >>> sumNumbers([1, 2, 3, 4, 5])\n  15\n  >>> sumNumbers([3, 4, 5, 6])\n  21\n  */\nconst sumNumbers = (numbers) => {\n  return numbers.reduce((sum, number) => {\n    return sum + number\n  })\n}\n\n/* Given a list of numbers, returns the product of all of them.\n  >>> productNumbers([3, 4, 5, 6])\n  720\n  >>> productNumbers([1, 2, 3])\n  6\n  */\nconst productNumbers = (numbers) => {\n  return numbers.reduce((prod, number) => {\n    return prod * number\n  })\n}\n\n/* Given a list of numbers, returns the greatest of all of them.\n  >>> largestNumber([2, 3, 5, 7])\n  7\n  >>> largestNumber([4, 3, 2, 5, 6])\n  6\n  */\nconst largestNumber = (numbers) => {\n  return Math.max(...numbers)\n}\n\n/* Given a list of numbers, returns the smallest of all of them.\n  >>> smallestNumber([2, 3, 5, 7])\n  2\n  >>> smallestNumber([4, 3, 2, 5, 6])\n  2\n  */\nconst smallestNumber = (numbers) => {\n  return Math.min(...numbers)\n}\n\n/* Given a list of strings, returns the longest of all of them.\n  >>> longestWord([3, 4, 5, 6])\n  6\n  >>> longestWord([\"cat\", \"dog\", \"pig\", \"horse\"])\n  'horse'\n  */\nconst longestWord = (words) => {\n  return words.reduce((max, word) => {\n    return max.length > word.length? max : word\n  })\n}\n\n/* Given a list of strings, returns the shortest of all of them.\n  >>> shortestWord([3, 4, 5, 6])\n  3\n  >>> shortestWord([\"cat\", \"dog\", \"pig\", \"horse\"])\n  'cat'\n  */\nconst shortestWord = (words) => {\n  return words.reduce((min, word) => {\n    return min.length < word.length? min : word\n  })\n}\n\n/* Given a list of strings, returns the average of all of them.\n  >>> averageWord([3, 4, 5, 6])\n  4.0\n  >>> averageWord([\"cat\", \"dog\", \"pig\", \"horse\"])\n  4.0\n  */\nconst averageWord = (words) => {\n  return sumWords(words) / words.length\n}\n\n/* Given a list of strings, returns the number of all of them.\n  >>> numberOfWords([3, 4, 5, 6])\n  4\n  >>> numberOfWords([\"cat\", \"dog\", \"pig\", \"horse\"])\n  4\n  */\nconst numberOfWords = (words) => {\n  return words.length\n}\n\n/* Given a list of strings, returns the number of all of them containing a given\n  string.\n  >>> numberOfWordsContainingWord(\"cat\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsContainingWord(\"pig\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsContainingWord(\"horse\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  3\n  >>> numberOfWordsContainingWord(\"dog\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  1\n  */\nconst numberOfWordsContainingWord = (word, words) => {\n  return words.filter((word) => word.includes(word)).length\n}\n\n/* Given a list of strings, returns the number of all of them starting with a given\n  string.\n  >>> numberOfWordsStartingWithWord(\"cat\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsStartingWithWord(\"cat\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsStartingWithWord(\"dog\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  1\n  >>> numberOfWordsStartingWithWord(\"dog\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  1\n  >>> numberOfWordsStartingWithWord(\"pig\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  */\nconst numberOfWordsStartingWithWord = (word, words) => {\n  return words.filter((word) => word.startsWith(word)).length\n}\n\n/* Given a list of words, returns the number of all of them ending with a given\n  string.\n  >>> numberOfWordsEndingWithWord(\"horse\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsEndingWithWord(\"horse\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsEndingWithWord(\"pig\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  1\n  >>> numberOfWordsEndingWithWord(\"cat\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  1\n  */\nconst numberOfWordsEndingWithWord = (word, words) => {\n  return words.filter((word) => word.endsWith(word)).length\n}\n\n/* Given a list of words, returns the number of all of them containing a given\n  string.\n  >>> numberOfWordsContainingWord(\"horse\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsContainingWord(\"horse\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsContainingWord(\"pig\", [\"cat\", \"dog\", \"pig\", \"horse\"])\n  2\n  >>> numberOfWordsContainingWord(\"cat\", [\"cat\","}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let currentValue = 0;\n    let balance = 0;\n\n    operations.forEach(element => {\n        currentValue += element;\n    });\n\n    balance = currentValue;\n\n    return balance < 0;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = (numbers.reduce((a, b) => a + b) / numbers.length)\n  const squaredDeviations = (numbers.map((n) => Math.abs(n - mean)))\n  return squaredDeviations.reduce((a, b) => a + b) / numbers.length\n}\n\nconst getMAD = (numbers) => {\n  const mean = (numbers.reduce((a, b) => a + b) / numbers.length)\n  const squaredDeviations = (numbers.map((n) => Math.abs(n - mean)))\n  return Math.sqrt(squaredDeviations.reduce((a, b) => a + b) / numbers.length)\n}\n\nconst generateTestData = () => {\n  const size = 1000\n  const numbers = []\n  for (let i = 0; i < size; i++) {\n    numbers.push(Math.floor(Math.random() * (1000 - 1) + 1))\n  }\n  return numbers\n}\n\nconst getMean = (numbers) => {\n  return (numbers.reduce((a, b) => a + b) / numbers.length)\n}\n\nconst testCalculations = (numbers) => {\n  const mad = getMAD(numbers)\n  const mean = getMean(numbers)\n  const expectedMAD = getMean(entailAbsoluteDeviation(numbers))\n  console.log(`Expected: ${expectedMAD} Actual: ${mad}`)\n  console.log(`Expected: ${mean} Actual: ${numbers.reduce((a, b) => a + b) / numbers.length}`)\n}\n\ntestCalculations(generateTestData())\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let output = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    output.push(numbers[i])\n    output.push(delimeter)\n  }\n  output.push(numbers[numbers.length - 1])\n  return output\n}\n\n/* Return a list of numbers of length `num` which start at the beginning of\n  `numbers` and end at the end of `numbers` (inclusive)\n  >>> range(0, 5)\n  [0, 1, 2, 3, 4]\n  >>> range(2, 7)\n  [2, 3, 4, 5, 6]\n  >>> range(2, 7, 2)\n  [2, 4, 6]\n  >>> range(2, 7, -2)\n  [4, 6]\n  >>> range(2, 7, -2, 1)\n  [4]\n  */\nconst range = (start, end, step = 1) => {\n  let output = []\n  let current = start\n  while (current < end) {\n    output.push(current)\n    current += step\n  }\n  return output\n}\n\n/* Return a list of numbers of length `num` which start at the beginning of\n  `numbers` and end at the end of `numbers` (inclusive)\n  >>> range(0, 5)\n  [0, 1, 2, 3, 4]\n  >>> range(2, 7)\n  [2, 3, 4, 5, 6]\n  >>> range(2, 7, 2)\n  [2, 4, 6]\n  >>> range(2, 7, -2)\n  [4, 6]\n  >>> range(2, 7, -2, 1)\n  [4]\n  */\nconst rangeInclusive = (start, end, step = 1) => {\n  let output = []\n  let current = start\n  while (current < end) {\n    output.push(current)\n    current += step\n    if (current < end) {\n      output.push(current)\n    }\n  }\n  return output\n}\n\n/* Return a list of numbers of length `num` which start at the beginning of\n  `numbers` and end at the end of `numbers` (inclusive)\n  >>> range(0, 5)\n  [0, 1, 2, 3, 4]\n  >>> range(2, 7)\n  [2, 3, 4, 5, 6]\n  >>> range(2, 7, 2)\n  [2, 4, 6]\n  >>> range(2, 7, -2)\n  [4, 6]\n  >>> range(2, 7, -2, 1)\n  [4]\n  */\nconst rangeInclusiveFrom = (start, end, step = 1) => {\n  let output = []\n  let current = start\n  while (current < end) {\n    output.push(current)\n    current += step\n    if (current <= end) {\n      output.push(current)\n    }\n  }\n  return output\n}\n\n/* Return a list of numbers of length `num` which start at the beginning of\n  `numbers` and end at the end of `numbers` (inclusive)\n  >>> range(0, 5)\n  [0, 1, 2, 3, 4]\n  >>> range(2, 7)\n  [2, 3, 4, 5, 6]\n  >>> range(2, 7, 2)\n  [2, 4, 6]\n  >>> range(2, 7, -2)\n  [4, 6]\n  >>> range(2, 7, -2, 1)\n  [4]\n  */\nconst rangeInclusiveTo = (start, end, step = 1) => {\n  let output = []\n  let current = start\n  while (current < end) {\n    output.push(current)\n    current += step\n    if (current >= end) {\n      output.push(current)\n    }\n  }\n  return output\n}\n\n/* Return a list of numbers of length `num` which start at the beginning of\n  `numbers` and end at the end of `numbers` (inclusive)\n  >>> range(0, 5)\n  [0, 1, 2, 3, 4]\n  >>> range(2, 7)\n  [2, 3, 4, 5, 6]\n  >>> range(2, 7, 2)\n  [2, 4, 6]\n  >>> range(2, 7, -2)\n  [4, 6]\n  >>> range(2, 7, -2, 1)\n  [4]\n  */\nconst rangeTo = (start, end, step = 1) => {\n  let output = []\n  let current = start\n  while (current <= end) {\n    output.push(current)\n    current += step\n  }\n  return output\n}\n\nmodule.exports = {\n  intersperse,\n  range,\n  rangeInclusive,\n  rangeInclusiveFrom,\n  rangeInclusiveTo,\n  rangeTo\n}\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  // The result of this function.\n  const result = [];\n  // The current level of nesting.\n  let level = 0;\n  // The current index of the parenthesis string.\n  let index = 0;\n\n  // For each index, find the next parenthesis and\n  // store the parenthesis in the result.\n  while (index < paren_string.length) {\n    if (paren_string[index] === '(') {\n      level++;\n    } else if (paren_string[index] === ')') {\n      level--;\n    }\n    if (level === 0) {\n      result.push(index);\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Input to this function is a string of nested parentheses.\n  Output the number of opening parentheses minus the number of closing parentheses.\n  E.g. (()()) has one opening and two closing parentheses, so 1.\n  */\nconst parens = (paren_string) => {\n  // The result of this function.\n  const result = 0;\n  // The current level of nesting.\n  let level = 0;\n  // The current index of the parenthesis string.\n  let index = 0;\n\n  // For each index, find the next parenthesis and\n  // store the parenthesis in the result.\n  while (index < paren_string.length) {\n    if (paren_string[index] === '(') {\n      level++;\n    } else if (paren_string[index] === ')') {\n      level--;\n    }\n    index++;\n  }\n  return result;\n};\n\n/* Input to this function is a string representing a nested parens,\n  output the maximum depth of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n  */\nconst maxDepth = (paren_string) => {\n  // The result of this function.\n  const result = 0;\n  // The current level of nesting.\n  let level = 0;\n  // The current index of the parenthesis string.\n  let index = 0;\n\n  // For each index, find the next parenthesis and\n  // store the parenthesis in the result.\n  while (index < paren_string.length) {\n    if (paren_string[index] === '(') {\n      level++;\n    } else if (paren_string[index] === ')') {\n      level--;\n    }\n    index++;\n  }\n  return result;\n};\n\nmodule.exports = {\n  parseNestedParens,\n  parens,\n  maxDepth\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.includes(substring))\n}\n\nexport default filterBySubstring\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\nmodule.exports = kernelIntersection;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  let rollingMax = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    rollingMax = Math.max(numbers[i], rollingMax);\n  }\n  return rollingMax;\n};\n\n/*\n  Given a list of numbers, find the max and min values in the list.\n  >>> maxMin([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst maxMin = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (min > numbers[i]) {\n      min = numbers[i];\n    }\n    if (max < numbers[i]) {\n      max = numbers[i];\n    }\n  }\n  return [max, min];\n};\n\n/*\n  Given a list of numbers, find the sum of the list.\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  */\nconst sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, find the average of the list.\n  >>> average([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5.5\n  */\nconst average = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n};\n\n/*\n  Given a list of numbers, find the median of the list.\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4.5\n  */\nconst median = (numbers) => {\n  let sorted = sorted(numbers);\n  let half = Math.floor(sorted.length / 2);\n  let first = sorted[half];\n  let second = sorted[half + 1];\n  if (sorted.length % 2 === 0) {\n    return (first + second) / 2;\n  } else {\n    return first;\n  }\n};\n\n/*\n  Given a list of numbers, find the mode of the list.\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5\n  */\nconst mode = (numbers) => {\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let count = counts[numbers[i]]? counts[numbers[i]] + 1 : 1;\n    if (count > maxCount) {\n      maxCount = count;\n    }\n    counts[numbers[i]] = count;\n  }\n  return Object.keys(counts).sort((a, b) => counts[b] - counts[a])[0];\n};\n\nconst sumOfSquares = (numbers) => {\n  let squares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    squares += Math.pow(numbers[i], 2);\n  }\n  return squares;\n};\n\n/*\n  Given a list of numbers, find the sum of the squares of the list.\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  328\n  */\nconst sumOfSquares = (numbers) => {\n  let squares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    squares += Math.pow(numbers[i], 2);\n  }\n  return squares;\n};\n\nmodule.exports = {\n  rolledMax,\n  maxMin,\n  sum,\n  average,\n  median,\n  mode,\n  sumOfSquares\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the length of the longest string in the set.\n  Algorithm idea is simple:\n  - Split the string into substrings.\n  - Append the length of each sub string to the front of the string\n    and take the max of all the lengths.\n  - Repeat for each sub string.\n  */\nconst longestSubstring = (string) => {\n  let lengths = string.split('').map(x => x.length);\n  return Math.max.apply(null, lengths);\n}\n\n/* Find the length of the shortest string in the set.\n  Algorithm idea is simple:\n  - Split the string into substrings.\n  - Append the length of each sub string to the front of the string\n    and take the min of all the lengths.\n  - Repeat for each sub string.\n  */\nconst shortestSubstring = (string) => {\n  let lengths = string.split('').map(x => x.length);\n  return Math.min.apply(null, lengths);\n}\n\n/* Find the length of the longest common prefix of two strings.\n  Algorithm idea is simple:\n  - Split the two strings into substrings.\n  - Find the longest common prefix of the substrings.\n  - Repeat for each sub string.\n  */\nconst longestCommonPrefix = (string1, string2) => {\n  let substrings1 = string1.split('').map(x => x);\n  let substrings2 = string2.split('').map(x => x);\n  return substrings1.reduce((acc, x) => acc.concat(x), []).join('');\n}\n\n/* Find the length of the shortest common prefix of two strings.\n  Algorithm idea is simple:\n  - Split the two strings into substrings.\n  - Find the shortest common prefix of the substrings.\n  - Repeat for each sub string.\n  */\nconst shortestCommonPrefix = (string1, string2) => {\n  let substrings1 = string1.split('').map(x => x);\n  let substrings2 = string2.split('').map(x => x);\n  return substrings1.reduce((acc, x) => acc.concat(x), []).join('');\n}\n\n/* Find the length of the longest common suffix of two strings.\n  Algorithm idea is simple:\n  - Split the two strings into substrings.\n  - Find the longest common suffix of the substrings.\n  - Repeat for each sub string.\n  */\nconst longestCommonSuffix = (string1, string2) => {\n  let substrings1 = string1.split('').map(x => x);\n  let substrings2 = string2.split('').map(x => x);\n  return substrings1.reduce((acc, x) => acc.concat(x), []).reverse().join('');\n}\n\n/* Find the length of the shortest common suffix of two strings.\n  Algorithm idea is simple:\n  - Split the two strings into substrings.\n  - Find the shortest common suffix of the substrings.\n  - Repeat for each sub string.\n  */\nconst shortestCommonSuffix = (string1, string2) => {\n  let substrings1 = string1.split('').map(x => x);\n  let substrings2 = string2.split('').map(x => x);\n  return substrings1.reduce((acc, x) => acc.concat(x), []).reverse().join('');\n}\n\n/* Find the length of the longest common prefix of two strings.\n  Algorithm idea is simple:\n  - Split the two strings into substrings.\n  - Find the longest common prefix of the substrings.\n  - Repeat for each sub string.\n  */\nconst longestCommonSubstring = (string1, string2) => {\n  let substrings1 = string1.split('').map(x => x);\n  let substrings2 = string2.split('').map(x => x);\n  return substrings1.reduce((acc, x) => acc.concat(x), []).join('');\n}\n\n/* Find the length of the shortest common prefix of two strings.\n  Algorithm idea is simple:\n  - Split the two strings into substrings.\n  - Find the shortest common prefix of the substrings.\n  - Repeat for each sub string.\n  */\nconst shortestCommonSubstring = (string1, string2) => {\n  let substrings1 = string1.split('').map(x => x);\n  let substrings2 = string2.split('').map(x => x);\n  return substrings1.reduce((acc, x) => acc.concat(x), []).join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/*"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  const alphabet = '01';\n  const result = '';\n\n  for (let i = 0; i < a.length; i++) {\n    result += alphabet[parseInt(a[i] + b[i])];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as an array.\n  >>> bowedStringedInstrumentXor('010', '110')\n  [1, 0, 1, 0]\n  */\nconst bowedStringedInstrumentXorArray = (a, b) => {\n  const alphabet = '01';\n  const result = [];\n\n  for (let i = 0; i < a.length; i++) {\n    result.push(parseInt(a[i] + b[i]));\n  }\n  return result;\n};\n\nmodule.exports = {\n  bowedStringedInstrumentXor,\n  bowedStringedInstrumentXorArray,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  const len = strings.length;\n  if (len === 0) {\n    return null;\n  }\n  const last = strings[len - 1];\n  for (let i = 0; i < len - 1; i++) {\n    if (strings[i].length!== last.length) {\n      return strings[i];\n    }\n  }\n  return strings[0];\n};\n\nexport default farseeing;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  if (a % b === 0) {\n    return b;\n  }\n  return capitalCoarseDivisor(b, a % b);\n};\n\n// Returns a string representation of the given number\nconst getNumberString = (number) => {\n  if (number === 0) {\n    return 'zero';\n  }\n  if (number === 1) {\n    return 'one';\n  }\n  if (number === 2) {\n    return 'two';\n  }\n  if (number === 3) {\n    return 'three';\n  }\n  if (number === 4) {\n    return 'four';\n  }\n  if (number === 5) {\n    return 'five';\n  }\n  if (number === 6) {\n    return'six';\n  }\n  if (number === 7) {\n    return'seven';\n  }\n  if (number === 8) {\n    return 'eight';\n  }\n  if (number === 9) {\n    return 'nine';\n  }\n  return 'ten';\n};\n\nconst getNumberList = (number) => {\n  let list = [];\n  while (number > 0) {\n    list.unshift(getNumberString(number % 10));\n    number = number / 10;\n  }\n  return list.reverse();\n};\n\nconst getList = (number) => {\n  let list = [];\n  while (number > 0) {\n    list.unshift(getNumberString(number % 10));\n    number = number / 10;\n  }\n  return list.reverse();\n};\n\nconst getNumberListForWords = (number) => {\n  let list = [];\n  while (number > 0) {\n    list.unshift(getNumberString(number % 10));\n    number = number / 10;\n  }\n  return list.reverse();\n};\n\n// Takes a string in the form of 1 2 3... and returns an array of numbers\nconst getListOfNumbers = (string) => {\n  let list = [];\n  let number = 0;\n  let digit = 0;\n  let numberString = string.toLowerCase();\n  for (let i = 0; i < numberString.length; i++) {\n    digit = numberString.charAt(i);\n    if (digit >= '0' && digit <= '9') {\n      number = number * 10 + (digit - '0');\n    }\n  }\n  list.unshift(number);\n  return list.reverse();\n};\n\n// Takes a string in the form of 1 2 3... and returns a number\nconst getNumberFromString = (string) => {\n  let number = 0;\n  let digit = 0;\n  let numberString = string.toLowerCase();\n  for (let i = 0; i < numberString.length; i++) {\n    digit = numberString.charAt(i);\n    if (digit >= '0' && digit <= '9') {\n      number = number * 10 + (digit - '0');\n    }\n  }\n  return number;\n};\n\n// Takes a string in the form of 1 2 3... and returns a number\nconst getNumberFromStringForWords = (string) => {\n  let number = 0;\n  let digit = 0;\n  let numberString = string.toLowerCase();\n  for (let i = 0; i < numberString.length; i++) {\n    digit = numberString.charAt(i);\n    if (digit >= '0' && digit <= '9') {\n      number = number * 10 + (digit - '0');\n    }\n  }\n  return number;\n};\n\n// Converts a number to a string\nconst toString = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getNumberString(number);\n};\n\n// Converts a number to a string\nconst toStringForWords = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getNumberListForWords(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getListOfNumbers(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getListOfNumbers(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getListOfNumbers(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getListOfNumbers(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getListOfNumbers(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getListOfNumbers(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getListOfNumbers(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number < 0) {\n    return'minus'+ toString(-number);\n  }\n  return getListOfNumbers(number);\n};\n\n// Converts a number to a string\nconst toStringForWordsInList = (number) => {\n  if (number <"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  const words = string.split('')\n  const prefixes = []\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < i; j++) {\n      const prefix = words.slice(j, i + 1).join('')\n      if (prefixes.indexOf(prefix) === -1) {\n        prefixes.push(prefix)\n      }\n    }\n  }\n  return prefixes\n}\n\n/* Return longest common prefix of all input strings\n  >>> longestCommonPrefix(['abc', 'def'])\n  'def'\n  >>> longestCommonPrefix(['abc', 'def', 'ghi'])\n  'def'\n  >>> longestCommonPrefix(['abc', 'def', 'ghi', 'jkl'])\n  'abc'\n  */\nconst longestCommonPrefix = (strings) => {\n  const length = strings.length\n  const longest = strings[0].length\n  for (let i = 0; i < length; i++) {\n    const common = strings[0].slice(0, i + 1)\n    for (let j = 1; j < length; j++) {\n      if (common!== strings[j].slice(0, i + 1)) {\n        return common\n      }\n    }\n  }\n  return strings[0]\n}\n\n/* Return the longest string in the input list\n  >>> longest(['abc', 'def'])\n  'def'\n  >>> longest(['abc', 'def', 'ghi'])\n  'abc'\n  >>> longest(['abc', 'def', 'ghi', 'jkl'])\n  'abc'\n  */\nconst longest = (strings) => {\n  return strings.reduce((longest, string) => {\n    if (longest.length < string.length) {\n      return string\n    }\n    return longest\n  }, strings[0])\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allSuffix('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allSuffix('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allSuffix('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allSuffix('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allSuffix('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allSuffix = (string) => {\n  const words = string.split('')\n  const suffixes = []\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < i; j++) {\n      const suffix = words.slice(j, i + 1).join('')\n      if (suffixes.indexOf(suffix) === -1) {\n        suffixes.push(suffix)\n      }\n    }\n  }\n  return suffixes\n}\n\n/* Return longest common suffix of all input strings\n  >>> longestCommonSuffix(['abc', 'def'])\n  'def'\n  >>> longestCommonSuffix(['abc', 'def', 'ghi'])\n  'def'\n  >>> longestCommonSuffix(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst longestCommonSuffix = (strings) => {\n  const length = strings.length\n  const longest = strings[0].length\n  for (let i = 0; i < length; i++) {\n    const common = strings[0].slice(i, length)\n    for (let j = 1; j < length; j++) {\n      if (common!== strings[j].slice(i, length)) {\n        return common\n      }\n    }\n  }\n  return strings[0]\n}\n\n/* Return longest common suffix of all input strings\n  >>> longestCommonSuffix(['abc', 'def'])\n  'def'\n  >>> longestCommonSuffix(['abc', 'def', 'ghi'])\n  'def'\n  >>> longestCommonSuffix(['abc', 'def', 'ghi', 'jkl'])\n  'def'\n  */\nconst longestCommonSuffix = (strings) => {\n  const length = strings.length\n  const longest = strings[0].length\n  for (let i = 0; i < length; i++) {\n    const common = strings[0].slice(i, length)\n    for"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowStringedInstrumentSuccession(0)\n  '0'\n  >>> bowStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.reverse().join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> trumpetStringedInstrumentSuccession(0)\n  '0'\n  >>> trumpetStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst trumpetStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.reverse().join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> sopranoStringedInstrumentSuccession(0)\n  '0'\n  >>> sopranoStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst sopranoStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> altoStringedInstrumentSuccession(0)\n  '0'\n  >>> altoStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst altoStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> tenorStringedInstrumentSuccession(0)\n  '0'\n  >>> tenorStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst tenorStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.reverse().join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bassStringedInstrumentSuccession(0)\n  '0'\n  >>> bassStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bassStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> sopranoBassStringedInstrumentSuccession(0)\n  '0'\n  >>> sopranoBassStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst sopranoBassStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> altoTenorBassStringedInstrumentSuccession(0)\n  '0'\n  >>> altoTenorBassStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst altoTenorBassStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> altoTenorSopranoBassStringedInstrumentSuccession(0)\n  '0'\n  >>> altoTenorSopranoBassStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst altoTenorSopranoBassStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> sopranoAltoTenorBassStringedInstrumentSuccession(0)\n  '0'\n  >>> sopranoAltoTenorBassStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst sopranoAltoTenorBassStringedInstrumentSuccession = (n) => {\n  const s = [];\n  for (let i = 0; i <= n; i++) {\n    s.push(i.toString());\n  }\n  return s.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> sopranoAltoTenorSopranoBassStringedInstrumentSuccession(0)\n  '0'\n  >>> sopranoAltoTenorSopranoBassStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n    let count = 1;\n    let previous = string.charCodeAt(0);\n    for (let i = 1; i < string.length; i++) {\n        let current = string.charCodeAt(i);\n        if (current === previous && previous >= 97 && previous <= 122) {\n            count++;\n        } else {\n            previous = current;\n            count = 1;\n        }\n    }\n    return count;\n};\n\n/*\n  Let's try to solve the problem with a naive approach.\n  */\nconst naiveSolution = (string) => {\n    let map = {};\n    for (let i = 0; i < string.length; i++) {\n        if (map[string.charAt(i)] === undefined) {\n            map[string.charAt(i)] = 1;\n        } else {\n            map[string.charAt(i)]++;\n        }\n    }\n    let count = 0;\n    for (let key in map) {\n        if (map[key] > 1) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  This solution is not the best, but it is better than the naive solution.\n  Let's find out how much we will improve our performance with the second solution.\n  */\nconst secondSolution = (string) => {\n    let map = {};\n    for (let i = 0; i < string.length; i++) {\n        if (map[string.charAt(i)] === undefined) {\n            map[string.charAt(i)] = 1;\n        } else {\n            map[string.charAt(i)]++;\n        }\n    }\n    let count = 0;\n    for (let key in map) {\n        if (map[key] > 1) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Let's solve the problem with the third solution.\n  */\nconst thirdSolution = (string) => {\n    let count = 0;\n    let map = {};\n    for (let i = 0; i < string.length; i++) {\n        if (map[string.charAt(i)] === undefined) {\n            map[string.charAt(i)] = 1;\n        } else {\n            map[string.charAt(i)]++;\n        }\n    }\n    for (let key in map) {\n        if (map[key] > 1) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Let's solve the problem with the fourth solution.\n  */\nconst fourthSolution = (string) => {\n    let map = {};\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (map[string.charAt(i)] === undefined) {\n            map[string.charAt(i)] = 1;\n        } else {\n            map[string.charAt(i)]++;\n        }\n    }\n    for (let key in map) {\n        if (map[key] > 1) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Let's show how we improve our performance.\n  */\nconst performance = (string) => {\n    let naiveSolution = naiveSolution(string);\n    let secondSolution = secondSolution(string);\n    let thirdSolution = thirdSolution(string);\n    let fourthSolution = fourthSolution(string);\n    return Math.max(naiveSolution, secondSolution, thirdSolution, fourthSolution);\n};\n\n/*\n  Let's find out how many unique characters (regardless of case) does the string contain.\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst findClearcutCharacters = (string) => {\n    let count = 1;\n    let previous = string.charCodeAt(0);\n    for (let i = 1; i < string.length; i++) {\n        let current = string.charCodeAt(i);\n        if (current === previous && previous >= 97 && previous <= 122) {\n            count++;\n        } else {\n            previous = current;\n            count = 1;\n        }\n    }\n    return count;\n};\n\n/*\n  Let's try to solve the problem with a naive approach.\n  */\nconst naiveSolution = (string) => {\n    let map = {};\n    for (let i = 0; i < string.length; i++) {\n        if (map[string.charAt(i)] === undefined) {\n            map[string.charAt(i)] = 1;\n        } else {\n            map[string.charAt(i)]++;\n        }\n    }\n    let count = 0;\n    for (let key in map) {\n        if (map[key] > 1) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  This solution is not the best, but it is better than the naive solution.\n  Let's find out how much we will improve our performance with the second solution.\n  */\nconst secondSolution = (string) => {\n    let map = {};\n    for (let i = 0; i < string.length; i++) {\n        if (map[string.charAt(i)] === undefined) {\n            map[string.charAt(i)] = 1;\n        } else {\n            map[string.charAt(i)]++;\n        }\n    }\n    let count = 0;\n    for (let key in map) {\n        if (map[key] > 1) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Let's solve the problem with the third solution.\n  */\nconst thirdSolution = (string) => {\n    let count = 0;\n    let map = {};\n    for (let i = 0; i < string.length; i++) {\n        if (map[string.charAt(i)] === undefined) {\n            map[string.charAt(i)] = 1;\n        } else {\n            map[string.charAt(i)]++;\n        }\n    }\n    for (let key in map) {\n        if (map[key] > 1)"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = [];\n  let current_note = '';\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      notes.push(4);\n      current_note = 'o';\n    } else if (music_string[i] === 'o|') {\n      notes.push(2);\n      current_note = 'o|';\n    } else if (music_string[i] === '.') {\n      notes.push(1);\n      current_note = '.';\n    } else if (music_string[i] === '|') {\n      if (current_note === 'o') {\n        notes.push(4);\n      } else {\n        notes.push(1);\n      }\n      current_note = '|';\n    }\n  }\n  return notes;\n};\n\nconst test_parseMusic = () => {\n  console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));\n};\n\ntest_parseMusic();\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let n = 0, i = 0;\n  while (i < string.length) {\n    if (string[i] === substring[n]) {\n      n++;\n      if (n === substring.length) {\n        return n;\n      }\n    } else {\n      n = 0;\n    }\n    i++;\n  }\n  return n;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => a - b);\n  return sorted.join(' ');\n};\n\nexport default sortNumbers;<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  // This is the closest possible.\n  const bestOfTwo = (a, b) => a > b? a : b;\n\n  // Return the two closest elements.\n  return [\n   ...numbers.slice(0, -1).sort((a, b) => a - b).slice(0, 2),\n   ...numbers.slice(1).sort((a, b) => a - b).slice(0, 2)\n  ];\n};\n\n/**\n  * @function receiveClosestChemicalElement\n  * @param {Array} numbers - An array of numbers.\n  * @returns {Array} The two closest numbers.\n  *\n  * @description\n  * This function takes an array of numbers and returns the two closest.\n  *\n  * @example\n  * ```javascript\n  * const numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2];\n  *\n  * // Returns [2.0, 2.2].\n  * const closestNumbers = receiveClosestChemicalElement(numbers);\n  *\n  * // Returns [2.0, 2.0].\n  * const anotherClosestNumbers = receiveClosestChemicalElement(numbers);\n  * ```\n  */\nexport default receiveClosestChemicalElement;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const unit = 1 / (max - min)\n  return numbers.map((x) => (x - min) * unit)\n}\n\nexport { rescaleToUnit }\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for float\n  * @param {Array} values List of python values\n  * @returns {Array} List of only floats\n  * @example\n  * filterFloats(['a', 3.14, 5])\n  * //[3.14]\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for int\n  * @param {Array} values List of python values\n  * @returns {Array} List of only ints\n  * @example\n  * filterIntegers(['a', 3.14, 5])\n  * //[3, 5]\n  * filterIntegers([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterInts = (values) => {\n  return values.filter(v => isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for float\n  * @param {Array} values List of python values\n  * @returns {Array} List of only floats\n  * @example\n  * filterFloats(['a', 3.14, 5])\n  * //[3.14]\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(v =>!isInteger(v));\n};\n\n/**\n  * Given a string, checks if it is a float\n  * @param {String} str The string to check\n  * @returns {Boolean} true if string is a float\n  */\nconst isFloat = (str) => {\n  try {\n    parseFloat(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\n/**\n  * Given a string, checks if it is an integer\n  * @param {String} str The string to check\n  * @returns {Boolean} true if string is an integer\n  */\nconst isInteger = (str) => {\n  return parseInt(str) === parseFloat(str);\n};\n\n/**\n  * Given a list of python values, return the list of the given type\n  * @param {Array} values List of python values\n  * @param {Function} type The type to filter by\n  * @returns {Array} List of given type\n  * @example\n  * filterFloats(['a', 3.14, 5])\n  * //[3.14]\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterByType = (values, type) => {\n  return values.filter(v => type(v));\n};\n\n/**\n  * Given a list of python values, return the list of the given type\n  * @param {Array} values List of python values\n  * @param {Function} type The type to filter by\n  * @returns {Array} List of given type\n  * @example\n  * filterFloats(['a', 3.14, 5])\n  * //[3.14]\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterIntsByType = (values, type) => {\n  return values.filter(v => type(v) === 'number');\n};\n\n/**\n  * Given a list of python values, return the list of the given type\n  * @param {Array} values List of python values\n  * @param {Function} type The type to filter by\n  * @returns {Array} List of given type\n  * @example\n  * filterFloats(['a', 3.14, 5])\n  * //[3.14]\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterIntsByType = (values, type) => {\n  return values.filter(v => type(v) === 'integer');\n};\n\n/**\n  * Given a list of python values, return the list of the given type\n  * @param {Array} values List of python values\n  * @param {Function} type The type to filter by\n  * @returns {Array} List of given type\n  * @example\n  * filterFloats(['a', 3.14, 5])\n  * //[3.14]\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterFloatsByType = (values, type) => {\n  return values.filter(v => type(v) === 'float');\n};\n\n/**\n  * Given a list of python values, return the list of the given type\n  * @param {Array} values List of python values\n  * @param {Function} type The type to filter by\n  * @returns {Array} List of given type\n  * @example\n  * filterFloats(['a', 3.14, 5])\n  * //[3.14]\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterStringsByType = (values, type) => {\n  return values.filter(v => type(v) ==='string');\n};\n\nmodule.exports = {\n  filterByType,\n  filterFloats,\n  filterInts,\n  filterFloatsByType,\n  filterIntsByType,\n  filterStringsByType,\n  filterIntegers,\n  filterIntsByType,\n  filterFloatsByType,\n  filterStringsByType,\n  filterBy"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0;\n  while (string[i]!== undefined) {\n    i++;\n  }\n  return i;\n};\n\nexport default strlen;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  const divisor = Math.floor(n / 2)\n  const reminder = n - divisor * 2\n  if (reminder == 0) return divisor\n  if (reminder > 0) return divisor + bigDivisor(reminder)\n  return bigDivisor(Math.floor(n / 2))\n}\n\nconst isPrime = (n) => {\n  const i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\nconst isPandigital = (n) => {\n  const digits = []\n  while (n > 0) {\n    const d = n % 10\n    if (digits.indexOf(d)!== -1) return false\n    digits.push(d)\n    n = Math.floor(n / 10)\n  }\n  return true\n}\n\nconst isFibonacci = (n) => {\n  const a = 1\n  const b = 1\n  let i = 0\n  let j = 1\n  while (i + j <= n) {\n    i = a\n    j = b\n    a = a + b\n    b = a + b\n  }\n  return (a + b) === n\n}\n\nconst isPowerOfTwo = (n) => {\n  const k = Math.log(n) / Math.log(2)\n  return (Math.pow(2, k) === n)\n}\n\nconst isAnagram = (a, b) => {\n  return (a.toLowerCase().split('').sort().join('') === b.toLowerCase().split('').sort().join(''))\n}\n\nconst isPalindrome = (n) => {\n  const s = n.toString()\n  let i = 0\n  let j = s.length - 1\n  while (i <= j) {\n    if (s[i]!== s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nconst isSudoku = (grid) => {\n  for (let i = 0; i < 9; i += 1) {\n    for (let j = 0; j < 9; j += 1) {\n      if (grid[i][j] === undefined) {\n        return false\n      }\n      if (grid[i][j] === 0) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst isMatrix = (m) => {\n  for (let i = 0; i < m.length; i += 1) {\n    for (let j = 0; j < m[i].length; j += 1) {\n      if (m[i][j] === undefined) {\n        return false\n      }\n      if (m[i][j] === 0) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst isFinite = (n) => {\n  return typeof n === 'number' && isFinite(n) &&!isNaN(n)\n}\n\nconst isEven = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isOdd = (n) => {\n  return (n % 2!== 0)\n}\n\nconst isZero = (n) => {\n  return (n === 0)\n}\n\nconst isPositive = (n) => {\n  return (n > 0)\n}\n\nconst isNegative = (n) => {\n  return (n < 0)\n}\n\nconst isInteger = (n) => {\n  return (isFinite(n) && n % 1 === 0)\n}\n\nconst isZeroToOne = (n) => {\n  return (n >= 0 && n <= 1)\n}\n\nconst isOneToNine = (n) => {\n  return (n >= 1 && n <= 9)\n}\n\nconst isPositiveToNine = (n) => {\n  return (n >= 1 && n <= 9)\n}\n\nconst isNegativeToNine = (n) => {\n  return (n >= -1 && n <= 9)\n}\n\nconst isIntegerToNine = (n) => {\n  return (isInteger(n) && n >= 1 && n <= 9)\n}\n\nconst isInRange = (n, min, max) => {\n  return (n >= min && n <= max)\n}\n\nconst isPositiveToPositive = (a, b) => {\n  return (a >= b)\n}\n\nconst isPositiveToNegative = (a, b) => {\n  return (a <= b)\n}\n\nconst isPositiveToZero = (a, b) => {\n  return (a >= b && a <= 0)\n}\n\nconst isNegativeToPositive = (a, b) => {\n  return (a <= b)\n}\n\nconst isNegativeToZero = (a, b) => {\n  return (a <= b && a >= -1)\n}\n\nconst isNegativeToNegative = (a, b) => {\n  return (a <= b && a >= -1)\n}\n\nconst isZeroToPositive = (a, b) => {\n  return (a >= b)\n}\n\nconst isZeroToNegative = (a, b) => {\n  return (a <= b)\n}\n\nconst isZeroToZero = (a, b) => {\n  return (a === b)\n}\n\nconst isOddToOdd = (a, b) => {\n  return (a % 2 === b % 2)\n}\n\nconst isOddToEven = (a, b) => {\n  return (a % 2!== b % 2)\n}\n\nconst isOddToPositive = (a, b) => {\n  return (a % 2 === b % 2 && a >= b)\n}\n\nconst isOddToNegative = (a, b) => {\n  return (a % 2 === b % 2 && a <= b)\n}\n\nconst isOddToZero = (a, b) => {\n  return (a % 2!== b % 2 && a >= b)\n}\n"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if (n === 1) {\n    return []\n  }\n  const factor = (n) => {\n    if (n === 1) {\n      return []\n    }\n    let factorized = [n]\n    while (n!== 1) {\n      let n_minus_1 = n - 1\n      let x = Math.sqrt(n_minus_1)\n      while (n_minus_1 % x === 0) {\n        factorized.push(x)\n        n_minus_1 = n_minus_1 / x\n      }\n      n = n_minus_1\n    }\n    return factorized\n  }\n  const factors = factor(n)\n  return factors.reduce((a, b) => [a.concat(b)], [])\n}\n\nexport default factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  let map = new Map()\n  let list = numbers.filter((n) => {\n    if (map.has(n)) {\n      map.delete(n)\n    } else {\n      map.set(n, 1)\n    }\n    return true\n  })\n  return list\n}\n\n/*\n  From a list of integers, remove all elements that do not occur in the second input.\n  Keep order of elements left the same as in the first input.\n  >>> getRidOfNotInList([1, 2, 3, 4, 5], [2, 4, 6])\n  [1, 3]\n  */\nconst getRidOfNotInList = (numbers, other) => {\n  let map = new Map()\n  let list = numbers.filter((n) => {\n    if (map.has(n)) {\n      map.delete(n)\n    } else {\n      map.set(n, 1)\n    }\n    return true\n  })\n  return list.filter((n) => {\n    return other.includes(n)\n  })\n}\n\n/*\n  Given two lists, remove all elements that appear in the first list but not in the second list.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfNotInList([1, 2, 3, 4, 5], [2, 4, 6])\n  [1, 3]\n  */\nconst getRidOfNotInList2 = (numbers, other) => {\n  return numbers.filter((n) => {\n    return!other.includes(n)\n  })\n}\n\nmodule.exports = {\n  getRidOfDuplicate,\n  getRidOfNotInList,\n  getRidOfNotInList2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  const lowercase = string.toLowerCase();\n  const uppercase = string.toUpperCase();\n  return lowercase === uppercase? string : uppercase + lowercase;\n};\n\n/*\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nexport default impudentCase;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let string of strings) {\n    result += string;\n  }\n  return result;\n};\n\nexport default concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.startsWith(prefix);\n  });\n};\n\nexport default filterByPrefix;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  return l.filter((e) => e > 0)\n}\n\n/*\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, -3, 9, 0, 123, 1]\n  */\nconst catchNegative = (l) => {\n  return l.filter((e) => e < 0)\n}\n\n/*\n  >>> catchOdd([1, 3, 5, 7, 9, 11])\n  [3, 5, 7, 9]\n  >>> catchOdd([1, 3, 5, 7, 9, 11, 13])\n  [3, 5, 7, 9, 11]\n  */\nconst catchOdd = (l) => {\n  return l.filter((e) => e % 2!= 0)\n}\n\n/*\n  >>> catchEven([1, 3, 5, 7, 9, 11])\n  [5, 7, 9]\n  >>> catchEven([1, 3, 5, 7, 9, 11, 13])\n  [5, 7, 9, 11]\n  */\nconst catchEven = (l) => {\n  return l.filter((e) => e % 2 == 0)\n}\n\n/*\n  >>> catchDuplicate([1, 3, 5, 7, 9, 11, 13, 17])\n  [3, 5, 7, 9, 11, 13]\n  >>> catchDuplicate([1, 3, 5, 7, 9, 11, 13, 17, 19])\n  [3, 5, 7, 9, 11, 13, 17]\n  >>> catchDuplicate([1, 3, 5, 7, 9, 11, 13, 17, 19, 23])\n  [3, 5, 7, 9, 11, 13, 17, 19]\n  */\nconst catchDuplicate = (l) => {\n  return l.filter((e, i, a) => a.indexOf(e) === i)\n}\n\n/*\n  >>> catchRepeating([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 4, 6, 8]\n  >>> catchRepeating([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8, 9]\n  >>> catchRepeating([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 9, 10]\n  >>> catchRepeating([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 9, 10, 11]\n  >>> catchRepeating([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 9, 10, 11, 12]\n  */\nconst catchRepeating = (l) => {\n  return l.reduce((acc, e, i, a) => {\n    if (acc.indexOf(e) === i) {\n      acc.push(e)\n    }\n    return acc\n  }, [])\n}\n\nexport {\n  catchPositive,\n  catchNegative,\n  catchOdd,\n  catchEven,\n  catchDuplicate,\n  catchRepeating,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  if (n <= 1) return false\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i == 0) return false\n  }\n  return true\n}\n\n/*Return the number of prime numbers less than or equal to N.\n  >>> primeCount(4)\n  2\n  >>> primeCount(5)\n  3\n  >>> primeCount(100)\n  7\n  >>> primeCount(10000)\n  6\n  >>> primeCount(101)\n  7\n  >>> primeCount(1)\n  1\n  */\nconst primeCount = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPremier(i)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the smallest number that can be divided by all the prime numbers less than or equal to N.\n  >>> smallestPrimeDivisor(100)\n  100\n  >>> smallestPrimeDivisor(10000)\n  10000\n  >>> smallestPrimeDivisor(101)\n  101\n  >>> smallestPrimeDivisor(1)\n  1\n  */\nconst smallestPrimeDivisor = (n) => {\n  let smallestPrime = 0\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPremier(i)) {\n      count++\n      if (i < smallestPrime) {\n        smallestPrime = i\n      }\n    }\n  }\n  return smallestPrime\n}\n\n/*Return the largest prime number that can be divided by all prime numbers less than or equal to N.\n  >>> largestPrimeDivisor(100)\n  100\n  >>> largestPrimeDivisor(10000)\n  10000\n  >>> largestPrimeDivisor(101)\n  101\n  >>> largestPrimeDivisor(1)\n  1\n  */\nconst largestPrimeDivisor = (n) => {\n  let largestPrime = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPremier(i)) {\n      largestPrime = i\n    }\n  }\n  return largestPrime\n}\n\n/*Return the number of different prime numbers less than or equal to N.\n  >>> primeDifference(100)\n  97\n  >>> primeDifference(10000)\n  991\n  >>> primeDifference(101)\n  97\n  >>> primeDifference(1)\n  1\n  */\nconst primeDifference = (n) => {\n  let difference = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPremier(i)) {\n      difference++\n    }\n  }\n  return difference\n}\n\n/*Return the number of times that a given number can be divided by prime numbers.\n  >>> primeFactorCount(1)\n  1\n  >>> primeFactorCount(4)\n  2\n  >>> primeFactorCount(4)\n  3\n  >>> primeFactorCount(101)\n  21\n  >>> primeFactorCount(10000)\n  1860\n  >>> primeFactorCount(1)\n  1\n  */\nconst primeFactorCount = (n) => {\n  let count = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPremier(i)) {\n      count += 1\n    }\n  }\n  return count\n}\n\nmodule.exports = {\n  isPremier,\n  primeCount,\n  smallestPrimeDivisor,\n  largestPrimeDivisor,\n  primeDifference,\n  primeFactorCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 == 0) {\n    return findZero(xs.slice(1));\n  }\n  const coef = xs.slice(-1).reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n  if (coef == 0) {\n    return x;\n  }\n  return -1;\n}\n\nconst findAllZero = (xs) => {\n  const count = xs.length / 2;\n  const result = [];\n  for (let i = 0; i < count; i++) {\n    const x = findZero(xs.slice(i * 2, i * 2 + 2));\n    if (x!= -1) {\n      result.push(x);\n    }\n  }\n  return result;\n}\n\nconst findAllRoots = (xs) => {\n  const count = xs.length / 2;\n  const result = [];\n  for (let i = 0; i < count; i++) {\n    const x = findZero(xs.slice(i * 2, i * 2 + 2));\n    if (x!= -1) {\n      result.push(x);\n    }\n  }\n  return result;\n}\n\nconst test = () => {\n  const xs = [1, 2, -3, 4, 5, -6];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const x = findZero(xs);\n  console.log(x);\n  return poly(xs, x);\n}\n\nconst test2 = () => {\n  const xs = [-6, 11, -6, 1];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const x = findZero(xs);\n  console.log(x);\n  return poly(xs, x);\n}\n\nconst test3 = () => {\n  const xs = [1, 2, -3, 4, 5, -6, 7, 8, 9, -10];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const x = findZero(xs);\n  console.log(x);\n  return poly(xs, x);\n}\n\nconst test4 = () => {\n  const xs = [-6, 11, -6, 1];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const x = findZero(xs);\n  console.log(x);\n  return poly(xs, x);\n}\n\nconst test5 = () => {\n  const xs = [-6, 11, -6, 1];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const x = findAllZero(xs);\n  console.log(x);\n  return poly(xs, x);\n}\n\nconst test6 = () => {\n  const xs = [-6, 11, -6, 1];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const x = findAllRoots(xs);\n  console.log(x);\n  return poly(xs, x);\n}\n\nconst test7 = () => {\n  const xs = [-6, 11, -6, 1];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const x = findAllRoots(xs);\n  console.log(x);\n  return poly(xs, x);\n}\n\nconst test8 = () => {\n  const xs = [-6, 11, -6, 1];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const x = findAllRoots(xs);\n  console.log(x);\n  return poly(xs, x);\n}\n\nconst test9 = () => {\n  const xs = [-6, 11, -6, 1];\n  const poly = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.filter((x, i) => i % 3 === 0).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> sortFifth([9, 1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7, 9]\n  */\nconst sortFifth = (l) => {\n  return l.filter((x, i) => i % 5 === 0).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by both three and five, while its values at the indicies that are divisible by both three and five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([9, 1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortQuint = (l) => {\n  return l.filter((x, i) => i % 3 === 0 && i % 5 === 0).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by both three and five, but are sorted in the order of the values in l.\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([9, 1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sortQuint2 = (l) => {\n  return l.filter((x, i) => i % 3 === 0 && i % 5 === 0).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by both three and five, but are sorted in the order of the indicies.\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([9, 1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sortQuint3 = (l) => {\n  return l.filter((x, i) => i % 3 === 0 && i % 5 === 0).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by both three and five, but are sorted in the order of the indicies that are not divisible by three or five.\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([9, 1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sortQuint4 = (l) => {\n  return l.filter((x, i) => i % 3 === 0 && i % 5 === 0).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by both three and five, but are sorted in the order of the indicies that are not divisible by three or five.\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([9, 1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortQuint([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sortQuint5 = ("}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let i = 1\n  let j = 1\n  while (i < l) {\n    if (l[i - 1] > l[i]) {\n      let temp = l[i - 1]\n      l[i - 1] = l[i]\n      l[i] = temp\n      i += 1\n    } else {\n      break\n    }\n  }\n  while (j < l.length) {\n    if (l[j] > l[j + 1]) {\n      let temp = l[j]\n      l[j] = l[j + 1]\n      l[j + 1] = temp\n      j += 1\n    } else {\n      break\n    }\n  }\n  return l\n}\n\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nishantat/e4c072e0a0f9a8f0a9e\n// https://gist.github.com/nish"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = Number.MIN_VALUE;\n  let current = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      current = i;\n    }\n  }\n  return l[current];\n};\n\nexport default soapElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const numbers = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    50\n  ]\n  return numbers.reduce((acc, n) => {\n    if (n % 11 === 0 || n % 13 === 0) {\n      acc += 2\n    }\n    if (n % 3 === 0) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n}\n\n/*Return the number of times the digit 4 appears in integers less than n which are divisible by 7 or 9.\n  >>> fizzBuzz(20)\n  0\n  >>> fizzBuzz(25)\n  4\n  >>> fizzBuzz(30)\n  6\n  */\nconst fizzBuzz = (n) => {\n  const numbers = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    50\n  ]\n  return numbers.reduce((acc, n) => {\n    if (n % 7 === 0 || n % 9 === 0) {\n      acc += 2\n    }\n    if (n % 4 === 0) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n}\n\nmodule.exports = {\n  fizzBuzz,\n  fizzBuzz\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const length = l.length\n  const even = l.slice(0, length / 2)\n  const odd = l.slice(length / 2)\n  return [...odd,...even].sort()\n}\n\nexport default sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 2), s.length), Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 2), s.length), Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nexport { encodeCyclic, decode, decodeCyclic }\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n    const two = Math.pow(2, n)\n    const fib = fibonacci(two)\n    const prime = Math.pow(2, fib)\n    return prime\n}\n\nmodule.exports = premierFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  const {\n    sort: sort,\n    isEqual: isEqual\n  } = Array;\n  const {\n    concat,\n    push\n  } = Array;\n  const list = sort(l);\n  let prev = list.shift();\n  let count = 0;\n  const result = [];\n  while (list.length > 0) {\n    const current = list.shift();\n    if (isEqual(current, prev)) {\n      count++;\n      if (count === 3) {\n        result.push(prev);\n        count = 0;\n      }\n    } else {\n      prev = current;\n      count = 0;\n    }\n  }\n  return result.length > 0;\n};\n\nmodule.exports = tripleTotalToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n    let carLeft = 0;\n    let carRight = 0;\n    let collisions = 0;\n\n    while (carLeft < n && carRight < n) {\n        if (carLeft === 0 && carRight === 0) {\n            carLeft = Math.floor(Math.random() * n);\n            carRight = Math.floor(Math.random() * n);\n        } else if (carLeft === n - 1 && carRight === n - 1) {\n            carLeft = Math.floor(Math.random() * n);\n            carRight = Math.floor(Math.random() * n);\n        } else if (carLeft > carRight) {\n            carLeft += 1;\n        } else {\n            carRight += 1;\n        }\n\n        if (carLeft > carRight) {\n            collisions += 1;\n        }\n    }\n\n    return collisions;\n};\n\nconsole.log(cableCarRaceCollision(3));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1);\n  }\n  return a;\n};\n\n// ##############################################################################################################\n\nmodule.exports = {\n  incrList\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  return l.reduce((prev, curr) => {\n    if (curr === 0) {\n      return prev;\n    }\n    if (curr > 0) {\n      return prev.concat([curr]);\n    }\n    if (curr < 0) {\n      return prev.concat([-curr]);\n    }\n    return prev;\n  }, []);\n};\n\nmodule.exports = copulateUnionToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  const result = []\n  const baseToDigits = {\n    2: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return Math.pow(a, 2) * (Math.sqrt(3) - 1) / 6;\n};\n\nconst getArea = (triangle, height) => {\n  return triangulumArea(triangle.base, height);\n};\n\nconst triangle = {\n  base: 3,\n  height: 5,\n  area: getArea(triangle, 5)\n};\n\nexport { triangle, triangulumArea };\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const a = [1, 2, 3, 5, 8]\n  const b = [1, 2, 3, 5, 8]\n  const c = [1, 2, 3, 5, 8]\n  const d = [1, 2, 3, 5, 8]\n  const e = [1, 2, 3, 5, 8]\n  const f = [1, 2, 3, 5, 8]\n  const g = [1, 2, 3, 5, 8]\n  const h = [1, 2, 3, 5, 8]\n  const i = [1, 2, 3, 5, 8]\n  const j = [1, 2, 3, 5, 8]\n  const k = [1, 2, 3, 5, 8]\n  const l = [1, 2, 3, 5, 8]\n  const m = [1, 2, 3, 5, 8]\n  const n = [1, 2, 3, 5, 8]\n  const o = [1, 2, 3, 5, 8]\n  const p = [1, 2, 3, 5, 8]\n  const q = [1, 2, 3, 5, 8]\n  const r = [1, 2, 3, 5, 8]\n  const s = [1, 2, 3, 5, 8]\n  const t = [1, 2, 3, 5, 8]\n  const u = [1, 2, 3, 5, 8]\n  const v = [1, 2, 3, 5, 8]\n  const w = [1, 2, 3, 5, 8]\n  const x = [1, 2, 3, 5, 8]\n  const y = [1, 2, 3, 5, 8]\n  const z = [1, 2, 3, 5, 8]\n  const a1 = [1, 2, 3, 5, 8]\n  const a2 = [1, 2, 3, 5, 8]\n  const a3 = [1, 2, 3, 5, 8]\n  const a4 = [1, 2, 3, 5, 8]\n  const a5 = [1, 2, 3, 5, 8]\n  const a6 = [1, 2, 3, 5, 8]\n  const a7 = [1, 2, 3, 5, 8]\n  const a8 = [1, 2, 3, 5, 8]\n  const a9 = [1, 2, 3, 5, 8]\n  const a10 = [1, 2, 3, 5, 8]\n  const a11 = [1, 2, 3, 5, 8]\n  const a12 = [1, 2, 3, 5, 8]\n  const a13 = [1, 2, 3, 5, 8]\n  const a14 = [1, 2, 3, 5, 8]\n  const a15 = [1, 2, 3, 5, 8]\n  const a16 = [1, 2, 3, 5, 8]\n  const a17 = [1, 2, 3, 5, 8]\n  const a18 = [1, 2, 3, 5, 8]\n  const a19 = [1, 2, 3, 5, 8]\n  const a20 = [1, 2, 3, 5, 8]\n  const b1 = [1, 2, 3, 5, 8]\n  const b2 = [1, 2, 3, 5, 8]\n  const b3 = [1, 2, 3, 5, 8]\n  const b4 = [1, 2, 3, 5, 8]\n  const b5 = [1, 2, 3, 5, 8]\n  const b6 = [1, 2, 3, 5, 8]\n  const b7 = [1, 2, 3, 5, 8]\n  const b8 = [1, 2, 3, 5, 8]\n  const b9 = [1, 2, 3, 5, 8]\n  const b10 = [1, 2, 3, 5, 8]\n  const b11 = [1, 2, 3, 5, 8]\n  const b12 = [1, 2, 3, 5, 8]\n  const b13 = [1, 2, 3, 5, 8]\n  const b14 = [1, 2, 3, 5, 8]\n  const b15 = [1, 2, 3, 5, 8]\n  const b16 = [1, 2, 3, 5, 8]\n  const b17 = [1, 2, 3, 5, 8]\n  const b18 = [1, 2, 3, 5, 8]\n  const b19 = [1, 2, 3, 5, 8]\n  const b20 = [1, 2, 3, 5, 8]\n  const c1 = [1, 2, 3, 5, 8]\n  const c2 = [1, 2, 3, 5, 8]\n  const c3 = [1, 2, 3, 5, 8]\n  const c4 = [1, 2, 3, 5, 8]\n  const c5 = [1, 2, 3, 5, 8]\n  const c6 = [1, 2, 3, 5, 8]\n  const c7 = [1, 2, 3, 5, 8]\n  const c8 = [1, 2, 3, 5, 8]\n  const c9 = [1, 2, 3, 5, 8]\n  const c10 = [1, 2, 3, 5, 8]\n  const c11 = [1, 2, 3, 5, 8]\n  const c12 = [1, 2, 3, 5, 8]\n  const c13 = [1, 2, 3, 5, 8]\n  const c14 = [1, 2, 3, 5, 8]\n  const c15 = [1, 2, 3, 5, 8]\n  const c16 = ["}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = sort(l);\n  if (sorted.length % 2) {\n    return sorted[(sorted.length / 2) - 1];\n  } else {\n    const middle = sorted[(sorted.length / 2)];\n    return (sorted[(sorted.length / 2) - 1] + middle) / 2.0;\n  }\n};\n\nexport { median };\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const str = text.split('');\n    for (let i = 0, j = str.length - 1; i < j; i++, j--) {\n        if (str[i]!== str[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport { isPalindrome }\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp(3, 7)\n  1\n  >>> modp(2, 7)\n  2\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return (n % p + p) % p // this is faster than Math.pow(2, n) % p\n}\n\n/*\n  >>> modp2(3, 7)\n  1\n  >>> modp2(2, 7)\n  2\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp2a = (n, p) => {\n  return (Math.pow(2, n) % p + p) % p\n}\n\n/*\n  >>> modp2a(3, 7)\n  1\n  >>> modp2a(2, 7)\n  2\n  >>> modp2a(1101, 101)\n  2\n  >>> modp2a(0, 101)\n  1\n  >>> modp2a(3, 11)\n  8\n  >>> modp2a(100, 101)\n  1\n  */\nconst modp2b = (n, p) => {\n  return (Math.pow(2, n) % p + p) % p // this is faster than Math.pow(2, n) % p\n}\n\n/*\n  >>> modp2b(3, 7)\n  1\n  >>> modp2b(2, 7)\n  2\n  >>> modp2b(1101, 101)\n  2\n  >>> modp2b(0, 101)\n  1\n  >>> modp2b(3, 11)\n  8\n  >>> modp2b(100, 101)\n  1\n  */\nconst modp2c = (n, p) => {\n  return (Math.pow(2, n) % p + p) % p // this is faster than Math.pow(2, n) % p\n}\n\n/*\n  >>> modp2c(3, 7)\n  1\n  >>> modp2c(2, 7)\n  2\n  >>> modp2c(1101, 101)\n  2\n  >>> modp2c(0, 101)\n  1\n  >>> modp2c(3, 11)\n  8\n  >>> modp2c(100, 101)\n  1\n  */\nconst modp2d = (n, p) => {\n  return (Math.pow(2, n) % p + p) % p // this is faster than Math.pow(2, n) % p\n}\n\n/*\n  >>> modp2d(3, 7)\n  1\n  >>> modp2d(2, 7)\n  2\n  >>> modp2d(1101, 101)\n  2\n  >>> modp2d(0, 101)\n  1\n  >>> modp2d(3, 11)\n  8\n  >>> modp2d(100, 101)\n  1\n  */\nconst modp2e = (n, p) => {\n  return (Math.pow(2, n) % p + p) % p // this is faster than Math.pow(2, n) % p\n}\n\n/*\n  >>> modp2e(3, 7)\n  1\n  >>> modp2e(2, 7)\n  2\n  >>> modp2e(1101, 101)\n  2\n  >>> modp2e(0, 101)\n  1\n  >>> modp2e(3, 11)\n  8\n  >>> modp2e(100, 101)\n  1\n  */\nconst modp2f = (n, p) => {\n  return (Math.pow(2, n) % p + p) % p // this is faster than Math.pow(2, n) % p\n}\n\n/*\n  >>> modp2f(3, 7)\n  1\n  >>> modp2f(2, 7)\n  2\n  >>> modp2f(1101, 101)\n  2\n  >>> modp2f(0, 101)\n  1\n  >>> modp2f(3, 11)\n  8\n  >>> modp2f(100, 101)\n  1\n  */\nconst modp2g = (n, p) => {\n  return (Math.pow(2, n) % p + p) % p // this is faster than Math.pow(2, n) % p\n}\n\n/*\n  >>> modp2g(3, 7)\n  1\n  >>> modp2g(2, 7)\n  2\n  >>> modp2g(1101, 101)\n  2\n  >>> modp2g(0, 101)\n  1\n  >>> modp2g(3, 11)\n  8\n  >>> modp2g(100, 101)\n  1\n  */\nconst modp2h = (n, p) => {\n  return (Math.pow(2, n) % p + p) % p // this is faster than Math.pow(2, n) % p\n}\n\n/*\n  >>> modp2h(3, 7)\n  1\n  >>> modp2h(2, 7)\n  2\n  >>> modp2h(1101, 101)\n  2\n  >>> modp2h(0, 101)\n  1\n  >>> modp2h(3, 11)\n  8\n  >>> modp2h(100, 101)\n  1\n  */\nconst modp2i = (n, p) => {\n  return (Math.pow(2, n) % p + p"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let ch = s.charAt(i);\n    let next = s.charAt(i + 1);\n    result += String.fromCharCode(\n      ((\"a\".charCodeAt(0) + ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) +\n        \"a\".charCodeAt(0)\n    );\n    i++;\n  }\n  return result;\n}\n\nmodule.exports = {\n  encodeShift,\n  decodeShift\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  const pattern = /[aeiou]/g;\n  return text.replace(pattern,'');\n};\n\n/*\n  getRidOfDots is a function that takes string and returns string without dots.\n  >>> getRidOfDots('')\n  ''\n  >>> getRidOfDots('abcdef.ghijklm')\n  'abcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst')\n  'abcdefghijklmpqrst'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz')\n  'abcdefghijklmpqrstuvwxyz'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.')\n  'abcdefghijklmpqrstuvwxyz'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz')\n  'abcdefghijklmpqrstuvwxyzxyz'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef')\n  'abcdefghijklmpqrstuvwxyzabcdef'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  >>> getRidOfDots('abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef.ghijklm.pqrst.uvwxyz.xyz.abcdef')\n  'abcdefghijklmpqrstuvwxyzabcdefghijklm'\n  */\nconst getRidOfDots = (text) => {\n  const pattern = /\\./g;\n  return text.replace(pattern, '');\n};\n\n/*\n  getRidOfNumbers is a function that takes string and returns string without numbers.\n  >>> getRidOfNumbers('')\n  ''\n  >>> getRidOfNumbers('abcdef.ghijklm')\n  'abcdefghijklm'\n  >>> getRidOfNumbers('abcdef.ghijklm.pqrst')\n  'abcdefghijklmpqrst'\n  >>> getRidOfNumbers('abcdef.ghijklm.pqrst."}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n    if (!l ||!l.length) {\n        return false;\n    }\n    return l.every(x => x <= t);\n};\n\n/*\n  * @param {number} x\n  * @returns {number}\n  * @description\n  *     The nth number from 1 to n is a triangular number (n(n+1)/2).\n  *     For example, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...\n  *     Find the sum of all the triangular numbers below one million.\n  *     Note:\n  *     n <= 1000000\n  *\n  * @example\n  *     triangularSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n  *\n  */\nconst triangularSum = (l) => {\n    return (l.length > 1)\n       ? l.reduce((acc, x) => acc + x, 0)\n        : l[0];\n};\n\nmodule.exports = {\n    triangularSum,\n    belowDoorway\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n//#endregion\n\n//#region Main function\n\nconst test = () => {\n  console.log(lend(3, 7));\n};\n\n//#endregion\n\n//#region Start program\n\ntest();\n\n//#endregion\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  const l = s0.length\n  if (l!== s1.length) return false\n\n  for (let i = 0; i < l; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n\n  return true\n}\n\nconst isLikeChars = (s0, s1) => {\n  const l = s0.length\n  if (l!== s1.length) return false\n\n  for (let i = 0; i < l; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n\n  return true\n}\n\nconst findChars = (s0, s1) => {\n  const l = s0.length\n  const m = s1.length\n  const i0 = 0\n  const i1 = 0\n\n  while (i0 < l && i1 < m) {\n    if (s0[i0]!== s1[i1]) {\n      return false\n    }\n\n    i0++\n    i1++\n  }\n\n  if (i0!== l || i1!== m) {\n    return false\n  }\n\n  return true\n}\n\nconst hasCommonChars = (s0, s1) => {\n  const l = s0.length\n  const m = s1.length\n  const i0 = 0\n  const i1 = 0\n\n  while (i0 < l && i1 < m) {\n    if (s0[i0] === s1[i1]) {\n      return true\n    }\n\n    i0++\n    i1++\n  }\n\n  return false\n}\n\nexport default {\n  findChars,\n  isLikeChars,\n  likeChars,\n  hasCommonChars\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n <= 1) {\n        return 1;\n    }\n    else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const left = brackets.slice(0, -1);\n  const right = brackets.slice(1);\n  const opening = brackets.slice(1);\n  const closing = brackets.slice(-1);\n\n  for (let i = 0; i < opening.length; i++) {\n    if (left.includes(opening[i])) {\n      if (closing.includes(opening[i])) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Return true if the brackets match the given order.\n\n  >>> isValidOrder(\"<>\")\n  true\n  >>> isValidOrder(\"<\")\n  false\n  >>> isValidOrder(\"<>\")\n  false\n  >>> isValidOrder(\"<>\")\n  false\n  >>> isValidOrder(\"<>\")\n  false\n  >>> isValidOrder(\"<>\")\n  false\n  */\nconst isValidOrder = (brackets) => {\n  const bracketsArray = brackets.split(\"\");\n  let i = 0;\n  let current = bracketsArray[i];\n  while (i < bracketsArray.length - 1) {\n    if (bracketsArray[i + 1]!== current) {\n      return false;\n    }\n    i++;\n    current = bracketsArray[i];\n  }\n  return true;\n};\n\n/*\n  This function finds all the parentheses in the given string.\n  It returns a list of the indices of all the parentheses in the given string.\n\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3, 4, 5, 6, 7]\n  >>> parentheses(\"<>\")\n  [0, 2, 3"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  if (!l) {\n    return true\n  }\n  let x = l[0]\n  let result = true\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < x) {\n      result = false\n    }\n    x = l[i]\n  }\n  return result\n}\n\n/*\n  >>> flat([1,2,4,20])\n  true\n  >>> flat([1,20,4,10])\n  false\n  >>> flat([4,1,0,-10])\n  true\n  */\nconst flat2 = (l) => {\n  if (!l) {\n    return true\n  }\n  let x = l[0]\n  let result = true\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < x) {\n      result = false\n    }\n  }\n  return result\n}\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #############################################################################################################################\n\n// #################################################################################################"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const l1s = [...l1]\n  const l2s = [...l2]\n  const sorted = [...l1]\n  const uniq = []\n  const i = 0\n  let j = 0\n  let k = 0\n  while (i < l1.length && j < l2.length) {\n    const x = l1[i]\n    const y = l2[j]\n    if (x === y) {\n      uniq.push(x)\n      sorted.push(x)\n      i += 1\n      j += 1\n    } else if (x < y) {\n      i += 1\n    } else {\n      j += 1\n    }\n  }\n  while (i < l1.length) {\n    uniq.push(l1[i])\n    sorted.push(l1[i])\n    i += 1\n  }\n  while (j < l2.length) {\n    uniq.push(l2[j])\n    sorted.push(l2[j])\n    j += 1\n  }\n  return uniq\n}\n\nmodule.exports = {coarse}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\nexport default bigChoiceFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\n\nconst getDigits = (n) => {\n  let digits = [];\n  while (n > 0) {\n    digits.unshift(n % 10);\n    n = n / 10;\n  }\n  return digits;\n};\n\n/*\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const len = brackets.length\n  const brackets = brackets.split(\"\")\n  let stack = []\n  for (let i = 0; i < len; i++) {\n    if (brackets[i] === \"(\" && stack.length > 0 && stack[stack.length - 1] === \")\") {\n      stack.pop()\n    } else if (brackets[i] === \")\" && stack.length > 0 && stack[stack.length - 1] === \"(\" ) {\n      stack.pop()\n    } else if (brackets[i] === \")\" && stack.length === 0) {\n      return false\n    } else {\n      stack.push(brackets[i])\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string containing a number, return the string with the digits\n  replaced with a letter of the alphabet.\n\n  >>> replaceLetters(\"a\")\n  \"a\"\n  >>> replaceLetters(\"10\")\n  \"z\"\n  >>> replaceLetters(\"2a\")\n  \"3c\"\n  >>> replaceLetters(\"10a\")\n  \"g\"\n  >>> replaceLetters(\"ab\")\n  \"z\"\n  >>> replaceLetters(\"\")\n  \"\"\n  */\nconst replaceLetters = (num) => {\n  if (num === \"\") {\n    return \"\"\n  }\n  let string = \"\"\n  for (let i = 0; i < num.length; i++) {\n    string += alphabet.find(\n      (letter) => {\n        return num[i] === letter\n      }\n    )\n  }\n  return string\n}\n\n/*\n  Given a number, return the string with the digits replaced with the\n  alphabet.\n\n  >>> replaceDigits(\"a\")\n  \"a\"\n  >>> replaceDigits(\"10\")\n  \"z\"\n  >>> replaceDigits(\"2a\")\n  \"3c\"\n  >>> replaceDigits(\"10a\")\n  \"g\"\n  >>> replaceDigits(\"ab\")\n  \"z\"\n  >>> replaceDigits(\"\")\n  \"\"\n  */\nconst replaceDigits = (num) => {\n  if (num === \"\") {\n    return \"\"\n  }\n  let string = \"\"\n  for (let i = 0; i < num.length; i++) {\n    string += alphabet[parseInt(num[i])]\n  }\n  return string\n}\n\n/*\n  Given a number, return the string with the letters replaced with\n  the digits.\n\n  >>> replaceLetters(\"ab\")\n  \"ab\"\n  >>> replaceLetters(\"10\")\n  \"10\"\n  >>> replaceLetters(\"2a\")\n  \"2a\"\n  >>> replaceLetters(\"10a\")\n  \"10a\"\n  >>> replaceLetters(\"\")\n  \"\"\n  */\nconst replaceLettersDigits = (num) => {\n  if (num === \"\") {\n    return \"\"\n  }\n  let string = \"\"\n  for (let i = 0; i < num.length; i++) {\n    string += replaceDigits(num[i])\n  }\n  return string\n}\n\n/*\n  Given a string, return the string with the characters replaced\n  with their corresponding number.\n\n  >>> replaceNumbers(\"a\")\n  \"a\"\n  >>> replaceNumbers(\"10\")\n  \"10\"\n  >>> replaceNumbers(\"2a\")\n  \"2a\"\n  >>> replaceNumbers(\"10a\")\n  \"10a\"\n  >>> replaceNumbers(\"ab\")\n  \"ab\"\n  >>> replaceNumbers(\"\")\n  \"\"\n  */\nconst replaceNumbers = (string) => {\n  let newString = \"\"\n  for (let i = 0; i < string.length; i++) {\n    newString += replaceDigits(string[i])\n  }\n  return newString\n}\n\nmodule.exports = {\n  rightBracketing,\n  replaceDigits,\n  replaceLetters,\n  replaceNumbers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const N = xs.length;\n  const dxs = new Array(N + 1);\n  dxs[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    dxs[i] = xs[i] * (N - i);\n  }\n  return dxs;\n};\n\n// Calculate the coefficients of a polynomial.\nconst coeffs = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 1;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A;\n};\n\n// Calculate the coefficients of a derivative of a polynomial.\nconst dcoeffs = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A;\n};\n\n// Calculate the coefficients of the value of a polynomial.\nconst val = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 1;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a polynomial.\nconst dval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a polynomial.\nconst ddval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a derivative of a polynomial.\nconst ddval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a derivative of a polynomial.\nconst ddddval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a derivative of a derivative of a polynomial.\nconst ddddval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a derivative of a derivative of a polynomial.\nconst dddddval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a derivative of a derivative of a polynomial.\nconst ddddddval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a derivative of a derivative of a polynomial.\nconst ddddddval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a derivative of a derivative of a derivative of a polynomial.\nconst dddddddval = (xs) => {\n  const N = xs.length;\n  const A = new Array(N + 1);\n  A[0] = 0;\n  for (let i = 1; i <= N; i++) {\n    A[i] = xs[i - 1];\n  }\n  return A[N];\n};\n\n// Calculate the coefficients of the value of a derivative of a derivative\n// of a derivative of a derivative of a derivative of a polynomial.\nconst dddddddval = (xs) => {"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1;\n  while (n > 1) {\n    let c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return a;\n};\n\nmodule.exports = fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let vcount = 0;\n  for(let i = 0; i < s.length - 1; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){\n      vcount += 1;\n    }\n  }\n  if(s[s.length - 1] === 'y'){\n    vcount += 1;\n  }\n  return vcount;\n}\n\nexport default vowelReckon;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  let n = x + shift\n  let len = x.toString().length\n  if (n > len) {\n    n = n - len\n  }\n  let s = ''\n  for (let i = n; i < len; i++) {\n    s += x.toString().charAt(i)\n  }\n  return s\n}\n\n/*\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift2 = (x, shift) => {\n  let n = x + shift\n  let len = x.toString().length\n  if (n > len) {\n    n = n - len\n  }\n  let s = ''\n  for (let i = n; i < len; i++) {\n    s += x.toString().charAt(i)\n  }\n  return s\n}\n\nmodule.exports = {\n  roundShift, roundShift2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  const upperCodes = s.split('').filter((c) => c >= 'A' && c <= 'Z').reduce((acc, c, i) => {\n    return acc + c.charCodeAt(0) - 97 + i;\n  }, 0);\n  return upperCodes;\n};\n\nmodule.exports = fingerSum;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let fruit = 0;\n  for (let i = 0; i < s.length; i++) {\n    fruit += parseInt(s[i]);\n  }\n  fruit += n;\n  return fruit;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  const arrLen = arr.length;\n  if (arrLen === 0) return [];\n  let minValue = Number.MAX_VALUE;\n  let minIndex = 0;\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] % 2 === 0) {\n      if (minValue > arr[i]) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return [minValue, minIndex];\n};\n\nexport default hustle;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  const result = lst.find(i => i > 0 && i <= lst.length - 1)\n  if (!result) {\n    return -1\n  }\n  return result\n}\n\nexport default research\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  const lstArray = Array.from(lst);\n  const result = [];\n\n  if (!lstArray.length) {\n    return result;\n  }\n\n  const min = Math.min.apply(null, lstArray);\n  const max = Math.max.apply(null, lstArray);\n  const lstArraySize = lstArray.length;\n\n  for (let i = 0; i < lstArraySize; i++) {\n    const current = lstArray[i];\n    if (current === min) {\n      result.push(min);\n      min = Math.max(min, lstArray[i + 1]);\n    } else if (current === max) {\n      result.push(max);\n      max = Math.min(max, lstArray[i + 1]);\n    } else {\n      result.push(current);\n    }\n  }\n\n  return result;\n};\n\nconst lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconsole.log(foreignSortList(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const l = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  if (l === s) return -1\n  return l\n}\n\nconst triangle = {\n  triangulumArea,\n}\n\nexport default triangle\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  let l = q.length\n  for (let i = 0; i < l / 2; i++) {\n    if (q[i]!== q[l - i - 1]) {\n      return false\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < l; i++) {\n    sum += q[i]\n  }\n  return sum <= w\n}\n\nconsole.log(willItFlee([1, 2, 3], 9))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let res = -1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let l = arr[i] + arr[j];\n      if (l % 2 === 0) {\n        if (l < min) {\n          min = l;\n          res = j - i;\n        }\n      }\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const lst = [...lst1,...lst2];\n  const all = lst.map(s => s.length);\n  const length = lst.length;\n  let ans = [];\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length; j++) {\n      if (all[i] + all[j] > all[i + j]) {\n        ans.push(lst[i]);\n      }\n    }\n  }\n  return ans;\n};\n\nexpect(entireCatch(['hi', 'admin'], ['hI', 'Hi'])).toEqual(['hI', 'Hi']);\nexpect(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])).toEqual(['hi', 'admin']);\nexpect(entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi'])).toEqual(['hI', 'hi', 'hi']);\nexpect(entireCatch(['4'], ['1', '2', '3', '4', '5'])).toEqual(['4']);\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const p = [2, 3, 5];\n  for (let i = 0; i < p.length; i++) {\n    if (a % p[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumOfPrime = (a) => {\n  const p = [2, 3, 5];\n  for (let i = 0; i < p.length; i++) {\n    if (a % p[i]!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n < 2 || n < 10) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  let i = 2;\n  let p = 0;\n  while (i * i <= n) {\n    p++;\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n === 5) return true;\n  if (n === 7) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n < 2 || n < 10) return false;\n  for (let i = 6; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n === 3) return true;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n < 2 || n < 10) return false;\n  for (let i = 6; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n === 3) return true;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n < 2 || n < 10) return false;\n  for (let i = 8; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n === 3) return true;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n < 2 || n < 10) return false;\n  for (let i = 12; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n === 3) return true;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n < 2 || n < 10) return false;\n  for (let i = 14; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n === 3) return true;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)))\n}\n\n/*\n  Write a program that asks for a number and checks if it is an element of a power set.\n  In this case, the power set is the set of all possible combinations of the digits of the number.\n  Example:\n  What is the sum of all the even numbers that are simple powers of 3 or 5?\n  What is the sum of all the odd numbers that are simple powers of 3 or 5?\n  What is the sum of all the numbers that are simple powers of 3 or 5?\n  What is the sum of all the even numbers that are simple powers of 2?\n  What is the sum of all the odd numbers that are simple powers of 2?\n  What is the sum of all the numbers that are simple powers of 2?\n  What is the sum of all the even numbers that are simple powers of 7?\n  What is the sum of all the odd numbers that are simple powers of 7?\n  What is the sum of all the numbers that are simple powers of 7?\n  What is the sum of all the even numbers that are simple powers of 11?\n  What is the sum of all the odd numbers that are simple powers of 11?\n  What is the sum of all the numbers that are simple powers of 11?\n  */\nconst checkPowerSet = (x, n) => {\n  const powers = [...Array(n).keys()].map(n => Math.pow(n, Math.floor(Math.log(x) / Math.log(n))))\n  const odd = x % 2 === 1\n  return powers.reduce((a, b) => a + (odd? b : 0), 0)\n}\n\n/*\n  Write a program that asks for a number and checks if it is an element of a power set.\n  In this case, the power set is the set of all possible combinations of the digits of the number.\n  Example:\n  What is the sum of all the even numbers that are simple powers of 3 or 5?\n  What is the sum of all the odd numbers that are simple powers of 3 or 5?\n  What is the sum of all the numbers that are simple powers of 3 or 5?\n  What is the sum of all the even numbers that are simple powers of 2?\n  What is the sum of all the odd numbers that are simple powers of 2?\n  What is the sum of all the numbers that are simple powers of 2?\n  What is the sum of all the even numbers that are simple powers of 7?\n  What is the sum of all the odd numbers that are simple powers of 7?\n  What is the sum of all the numbers that are simple powers of 7?\n  What is the sum of all the even numbers that are simple powers of 11?\n  What is the sum of all the odd numbers that are simple powers of 11?\n  What is the sum of all the numbers that are simple powers of 11?\n  */\nconst checkPowerSet2 = (x, n) => {\n  return checkPowerSet(x, n)\n}\n\n/*\n  Write a program that asks for a number and checks if it is an element of a power set.\n  In this case, the power set is the set of all possible combinations of the digits of the number.\n  Example:\n  What is the sum of all the even numbers that are simple powers of 3 or 5?\n  What is the sum of all the odd numbers that are simple powers of 3 or 5?\n  What is the sum of all the numbers that are simple powers of 3 or 5?\n  What is the sum of all the even numbers that are simple powers of 2?\n  What is the sum of all the odd numbers that are simple powers of 2?\n  What is the sum of all the numbers that are simple powers of 2?\n  What is the sum of all the even numbers that are simple powers of 7?\n  What is the sum of all the odd numbers that are simple powers of 7?\n  What is the sum of all the numbers that are simple powers of 7?\n  What is the sum of all the even numbers that are simple powers of 11?\n  What is the sum of all the odd numbers that are simple powers of 11?\n  What is the sum of all the numbers that are simple powers of 11?\n  */\nconst checkPowerSet3 = (x, n) => {\n  return checkPowerSet(x, n)\n}\n\n/*\n  Write a program that asks for a number and checks if it is an element of a power set.\n  In this case, the power set is the set of all possible combinations of the digits of the number.\n  Example:\n  What is the sum of all the even numbers that are simple powers of 3 or 5?\n  What is the sum of all the odd numbers that are simple powers of 3 or 5?\n  What is the sum of all the numbers that are simple powers of 3 or 5?\n  What is the sum of all the even numbers that are simple powers of 2?\n  What is the sum of all the odd numbers that are simple powers of 2?\n  What is the sum of all the numbers that are simple powers of 2?\n  What is the sum of all the even numbers that are simple powers of 7?\n  What is the sum of all the odd numbers that are simple powers of 7?\n  What is the sum of all the numbers that are simple powers of 7?\n  What is the sum of all the even numbers that are simple powers of 11?\n  What is the sum of all the odd numbers that are simple powers of 11?\n  What is the sum of all the numbers that are simple powers of 11?\n  */\nconst checkPowerSet4 = (x, n) => {\n  return checkPowerSet(x, n)\n}\n\n/*\n  Write a program that asks for a number and checks if it is an element of a power set.\n  In this case, the power set is the set of all possible combinations of the digits of the number.\n  Example:\n  What is the sum of all the even numbers that are simple powers of 3 or 5?\n  What is the sum of all the odd numbers that are simple powers of 3 or"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = a,\n    result = true;\n  while (i) {\n    result = result && i % 3 === 0;\n    i = i / 3;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  return num.split(\"\").reverse().join(\"\");\n};\nconst primeNumbers = (num) => {\n  const numDigits = num.split(\"\").reverse().join(\"\");\n  const key = hexKey(numDigits);\n  let numberOfPrimes = 0;\n  for (let i = 0; i < key.length; i += 1) {\n    if (key.charAt(i) === '2' && i!== 0) {\n      numberOfPrimes += 1;\n    }\n    if (key.charAt(i) === '3' && i!== 0) {\n      numberOfPrimes += 1;\n    }\n    if (key.charAt(i) === '5' && i!== 0) {\n      numberOfPrimes += 1;\n    }\n    if (key.charAt(i) === '7' && i!== 0) {\n      numberOfPrimes += 1;\n    }\n    if (key.charAt(i) === '11' && i!== 0) {\n      numberOfPrimes += 1;\n    }\n    if (key.charAt(i) === '13' && i!== 0) {\n      numberOfPrimes += 1;\n    }\n  }\n  return numberOfPrimes;\n};\n\n// Test cases\nconsole.log(primeNumbers(\"AB\")); // 1\nconsole.log(primeNumbers(\"1077E\")); // 2\nconsole.log(primeNumbers(\"ABED1A33\")); // 4\nconsole.log(primeNumbers(\"123456789ABCDEF0\")); // 6\nconsole.log(primeNumbers(\"2020\")); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    const binary = 'db';\n    let binaryDigits = '';\n    for (let i = 0; i < decimal; i++) {\n        binaryDigits += binary;\n    }\n    return binaryDigits;\n};\n\nmodule.exports = decimalToBinary;<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n    let counter = 0\n    for (let i = 0; i < s.length; i++) {\n        counter += (s[i]!== s[i + 1])? 0 : 1\n    }\n    return counter >= 3\n}\n\nconst isHappy = (s) => {\n    let last = 0\n    let sum = 0\n    let visited = []\n    while (last!= s.length) {\n        sum = 0\n        for (let i = last + 1; i < s.length; i++) {\n            sum += s[i] - s[last]\n            if (sum < 0) {\n                sum = 0\n            }\n            if (sum > 9) {\n                sum = 9\n            }\n        }\n        if (sum === 0) {\n            last += 1\n            sum = 0\n        }\n        visited.push(sum)\n    }\n    return visited.indexOf(s.length) === -1\n}\n\nconst isPalindrome = (s) => {\n    let start = 0\n    let end = s.length - 1\n    while (start < end) {\n        if (s[start]!== s[end]) {\n            return false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\nconst isDivisible = (n) => {\n    return n % 1 === 0\n}\n\nconst isPowerOf2 = (n) => {\n    return n === 1 || (n & (n - 1)) === 0\n}\n\nconst isPrime = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isUgly = (n) => {\n    let i = 1\n    while (i < n) {\n        if (n % i === 0 && isPrime(i) === false) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst isHappyNumber = (n) => {\n    let i = 1\n    while (i < n) {\n        if (isDivisible(i) === false || isUgly(i) === false) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst isPalindromeNumber = (n) => {\n    return isPalindrome(n.toString())\n}\n\nconst isNumber = (s) => {\n    let i = 0\n    while (i < s.length) {\n        if (isPalindrome(s.slice(i, i + 1)) === false) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst isPerfect = (n) => {\n    return n % 1 === 0 && isPalindromeNumber(n) && isHappyNumber(n)\n}\n\nconst isFibonacci = (n) => {\n    let a = 0\n    let b = 1\n    let count = 1\n    while (count < n) {\n        count++\n        a = b\n        b = a + b\n        if (isPerfect(b) === false) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isCircular = (n) => {\n    let i = 1\n    let count = 1\n    while (i < n) {\n        count++\n        if (n % i === 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n        if (n % i === 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst isCircularNumber = (n) => {\n    return isPrime(n) && isFibonacci(n) && isCircular(n)\n}\n\nconst isPrimeNumber = (n) => {\n    return isPrime(n)\n}\n\nconst isSorted = (n) => {\n    let i = 1\n    let j = 2\n    while (j < n) {\n        if (n % i > j) {\n            return false\n        }\n        i++\n        j++\n    }\n    return true\n}\n\nconst isBipartite = (n) => {\n    let i = 1\n    let j = n\n    while (i < j) {\n        if (n % i === 0) {\n            return false\n        }\n        if (n % j === 0) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPrimePalindrome = (n) => {\n    return isPrimeNumber(n) && isPalindromeNumber(n)\n}\n\nconst isPalindromeNumber = (n) => {\n    return isPalindrome(n.toString())\n}\n\nconst isPalindrome = (s) => {\n    let i = 0\n    let j = s.length - 1\n    while (i < j) {\n        if (s[i]!== s[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isValid = (s) => {\n    if (isPalindromeNumber(s) === false) {\n        return false\n    }\n    if (isPalindrome(s) === false) {\n        return false\n    }\n    return isSorted(s) && isBipartite(s) && isPrimePalindrome(s)\n}\n\nconst isValidNumber = (n) => {\n    return isPrimeNumber(n) && isPalindromeNumber(n) && isPalindrome(n) && isValid(n)\n}\n\nconst isPerfectNumber = (n) => {\n    return isPrimeNumber(n) && isPal"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const letterGrade = []\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const letterGrade = (grade >= 3.7)? 'A+' :\n                        (grade >= 3.3)? 'A' :\n                        (grade >= 3.0)? 'B+' :\n                        (grade >= 2.7)? 'B' :\n                        (grade >= 2.3)? 'B-' :\n                        (grade >= 2.0)? 'C+' :\n                        (grade >= 1.7)? 'C' :\n                        (grade >= 1.3)? 'C-' :\n                        (grade >= 1.0)? 'D+' :\n                        (grade >= 0.7)? 'D' :\n                        (grade >= 0.0)? 'D-' :\n                        'E'\n    letterGrade.push(letterGrade)\n  }\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = []\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const letterGrade = (grade >= 3.7)? 'A+' :\n                        (grade >= 3.3)? 'A' :\n                        (grade >= 3.0)? 'B+' :\n                        (grade >= 2.7)? 'B' :\n                        (grade >= 2.3)? 'B-' :\n                        (grade >= 2.0)? 'C+' :\n                        (grade >= 1.7)? 'C' :\n                        (grade >= 1.3)? 'C-' :\n                        (grade >= 1.0)? 'D+' :\n                        (grade >= 0.7)? 'D' :\n                        (grade >= 0.0)? 'D-' :\n                        'E'\n    letterGrade.push(letterGrade)\n  }\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = []\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const letterGrade = (grade >= 3.7)? 'A+' :\n                        (grade >= 3.3)? 'A' :\n                        (grade >= 3.0)? 'B+' :\n                        (grade >= 2.7)? 'B' :\n                        (grade >= 2.3)? 'B-' :\n                        (grade >= 2.0)? 'C+' :\n                        (grade >= 1.7)? 'C' :\n                        (grade >= 1.3)? 'C-' :\n                        (grade >= 1.0)? 'D+' :\n                        (grade >= 0.7)? 'D' :\n                        (grade >= 0.0)? 'D-' :\n                        'E'\n    letterGrade.push(letterGrade)\n  }\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = []\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const letterGrade = (grade >= 3.7)? 'A+' :\n                        (grade >= 3.3)? 'A' :\n                        (grade >= 3.0)? 'B+' :\n                        (grade >= 2.7)? 'B' :\n                        (grade >= 2.3)? 'B-' :\n                        (grade >= 2.0)? 'C+' :\n                        (grade >= 1.7)? 'C' :\n                        (grade >= 1.3)? 'C-' :\n                        (grade >= 1.0)? 'D+' :\n                        (grade >= 0.7)? 'D' :\n                        (grade >= 0.0)? 'D-' :\n                        'E'\n    letterGrade.push(letterGrade)\n  }\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = []\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const letterGrade = (grade >= 3.7)? 'A+' :\n                        (grade >= 3.3)? 'A' :\n                        (grade >= 3.0)? 'B+' :\n                        (grade >= 2.7)? 'B' :\n                        (grade >= 2.3)? 'B-' :\n                        (grade >= 2.0)? 'C+' :\n                        (grade >= 1.7)? 'C' :\n                        (grade >= 1.3)? 'C-' :\n                        (grade >= 1.0)? 'D+' :\n                        (grade >= 0.7)? 'D' :\n                        (grade >= 0.0)? 'D-' :\n                        'E'\n    letterGrade.push(letterGrade)\n  }\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = []\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const letterGrade = (grade >= 3.7)? 'A+' :\n                        (grade >= 3.3)? 'A' :\n                        (grade >= 3.0)? 'B+' :\n                        (grade >= 2.7)? 'B' :\n                        (grade >= 2.3)? 'B-'"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n    let isPrime = true;\n    for (let i = 2; i < string.length; i++) {\n        if (string[i] === string[i - 1] && string[i] === string[i - 2]) {\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime;\n}\n\n/*\nWrite a function that takes a string and returns true if the string contains\nany consonant-vowel pair in it, false otherwise\nExamples\nconsonantVowelPair('Hello') == true\nconsonantVowelPair('abcdcba') == true\nconsonantVowelPair('kittens') == true\nconsonantVowelPair('orange') == false\n*/\nconst consonantVowelPair = (string) => {\n    let consonant = 'cC';\n    let vowel = 'vV';\n    for (let i = 0; i < string.length; i++) {\n        if (consonant.indexOf(string[i]) >= 0 && vowel.indexOf(string[i]) >= 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/*\nWrite a function that takes a string and returns true if the string is a\npalindrome, false otherwise\nExamples\npalindrome('Hello') == true\npalindrome('A man, a plan, a canal-Panama') == true\npalindrome('dog') == false\n*/\nconst palindrome = (string) => {\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]!== string[string.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst _string = {\n    prime: prime,\n    consonantVowelPair: consonantVowelPair,\n    palindrome: palindrome\n};\n\nexports.prime = _string.prime;\nexports.consonantVowelPair = _string.consonantVowelPair;\nexports.palindrome = _string.palindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      if (j >= 1 && j <= i) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(beginOneEnd(5))\nconsole.log(beginOneEnd(10))\nconsole.log(beginOneEnd(15))\nconsole.log(beginOneEnd(19))\nconsole.log(beginOneEnd(22))\nconsole.log(beginOneEnd(28))\nconsole.log(beginOneEnd(36))\nconsole.log(beginOneEnd(47))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  const binary = [];\n  \n  while (N > 0) {\n    binary.unshift(N % 2);\n    N = N / 2;\n  }\n  \n  return binary.join(\"\");\n};\n\nmodule.exports = resolve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let list = lst.slice();\n  list.sort((a, b) => {\n    if (a % 2!== b % 2) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  return list.shift();\n};\n\nconst list = [4, 2, 6, 7];\nconsole.log(lend(list));<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const asciiValues = []\n  for (let i = 0; i < 26; i++) {\n    asciiValues.push(i)\n  }\n  const words = s.split(' ')\n  const wordsArray = []\n  for (let i = 0; i < words.length; i++) {\n    const newWord = ''\n    for (let j = 0; j < words[i].length; j++) {\n      const char = words[i].charAt(j)\n      const asciiValue = char.charCodeAt(0)\n      const index = asciiValues.indexOf(asciiValue)\n      newWord += asciiValues[index]\n    }\n    wordsArray.push(newWord)\n  }\n  const shuffledString = wordsArray.join(' ')\n  return shuffledString\n}\n\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hello World!!'))\nconsole.log(antiShuffle('Hello World!!'))\nconsole.log(antiShuffle('Hello World'))\nconsole.log(antiShuffle('Hello World'))\nconsole.log(antiShuffle('Hello World'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n    let sorted = [];\n    for (let i = 0; i < lst.length; i++) {\n        let row = lst[i];\n        row.sort((a, b) => a - b);\n        sorted.push([row[0], x]);\n    }\n    return sorted;\n};\n\nconsole.log(catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let temp;\n  let sum;\n  let sortedArray = array.slice(0);\n\n  if (array.length === 1) {\n    return array;\n  }\n\n  if (array.length === 2) {\n    return sortedArray;\n  }\n\n  for (let i = 0; i < array.length; i += 1) {\n    sum = array[i];\n    for (let j = i; j < array.length; j += 1) {\n      temp = array[j];\n      if (sum + temp < array[i]) {\n        break;\n      }\n      if (sum + temp === array[i]) {\n        if (sum === array[i]) {\n          sortedArray[i] = temp;\n          sortedArray[j] = array[i];\n        } else if (sum + temp > array[i]) {\n          sortedArray[i] = sum + temp;\n          sortedArray[j] = array[i];\n        }\n      }\n    }\n  }\n\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const rotation = (rotation) => {\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let current = 0;\n    let newArr = [];\n    for (let i = 0; i < s.length; i++) {\n      newArr.push(alphabet[(current + (rotation * 2)) % 26]);\n      current = (current + (rotation * 2)) % 26;\n    }\n    return newArr.join('');\n  };\n\n  return rotation(0);\n};\n\n/*\n  * Create a function decrypt that takes a string as an argument and\n  * returns a string decrypted with the alphabet being rotated. \n  * The alphabet should be rotated in a manner such that the letters \n  * shift down by two multiplied to two places.\n  * For example:\n  * decrypt('lm') returns 'hi'\n  * decrypt('ewhjklnop') returns 'gf'\n  * decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  const rotation = (rotation) => {\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let current = 0;\n    let newArr = [];\n    for (let i = 0; i < s.length; i++) {\n      newArr.push(alphabet[(current - (rotation * 2)) % 26]);\n      current = (current - (rotation * 2)) % 26;\n    }\n    return newArr.join('');\n  };\n\n  return rotation(0);\n};\n\nconst encryptText = (text) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let encryptedText = '';\n\n  for (let i = 0; i < text.length; i++) {\n    encryptedText += alphabet[(i + 26) % 26];\n  }\n  return encryptedText;\n};\n\nconst decryptText = (text) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let decryptedText = '';\n\n  for (let i = 0; i < text.length; i++) {\n    decryptedText += alphabet[(i + 26) % 26];\n  }\n  return decryptedText;\n};\n\nexport { encrypt, decrypt, encryptText, decryptText };\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (!lst.length) return null\n  let smallest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return smallest\n}\n\n/*\n  Given a list of ints, write a function that returns the 2nd largest element\n  in the list. Return null if there is no such element.\n  \n  find2Largest([1, 2, 3, 4, 5]) == 5\n  find2Largest([5, 1, 4, 3, 2]) == 4\n  find2Largest([]) == null\n  find2Largest([1, 1]) == null\n  */\nconst find2Largest = (lst) => {\n  if (!lst.length) return null\n  let largest = lst[lst.length - 1]\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Given a list of ints, write a function that returns the 2nd largest element\n  in the list. Return null if there is no such element.\n  \n  find2Largest([1, 2, 3, 4, 5]) == 5\n  find2Largest([5, 1, 4, 3, 2]) == 4\n  find2Largest([]) == null\n  find2Largest([1, 1]) == null\n  */\nconst find2LargestByIndex = (lst) => {\n  if (!lst.length) return null\n  return lst[lst.length - 1]\n}\n\n/*\n  Given a list of ints, write a function that returns the 2nd largest element\n  in the list. Return null if there is no such element.\n  \n  find2Largest([1, 2, 3, 4, 5]) == 5\n  find2Largest([5, 1, 4, 3, 2]) == 4\n  find2Largest([]) == null\n  find2Largest([1, 1]) == null\n  */\nconst find2LargestByValue = (lst) => {\n  if (!lst.length) return null\n  let largest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Given a list of ints, write a function that returns the largest element\n  in the list. Return null if there is no such element.\n  \n  find2Largest([1, 2, 3, 4, 5]) == 5\n  find2Largest([5, 1, 4, 3, 2]) == 5\n  find2Largest([]) == null\n  find2Largest([1, 1]) == null\n  */\nconst findLargest = (lst) => {\n  if (!lst.length) return null\n  let largest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Given a list of ints, write a function that returns the largest element\n  in the list. Return null if there is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 5\n  findLargest([5, 1, 4, 3, 2]) == 5\n  findLargest([]) == null\n  findLargest([1, 1]) == null\n  */\nconst findLargestByIndex = (lst) => {\n  if (!lst.length) return null\n  return lst[0]\n}\n\n/*\n  Given a list of ints, write a function that returns the largest element\n  in the list. Return null if there is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 5\n  findLargest([5, 1, 4, 3, 2]) == 5\n  findLargest([]) == null\n  findLargest([1, 1]) == null\n  */\nconst findLargestByValue = (lst) => {\n  if (!lst.length) return null\n  let largest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Given a list of ints, write a function that returns the 2nd largest element\n  in the list. Return null if there is no such element.\n  \n  find2Largest([1, 2, 3, 4, 5]) == 5\n  find2Largest([5, 1, 4, 3, 2]) == 4\n  find2Largest([]) == null\n  find2Largest([1, 1]) == null\n  */\nconst find2LargestByIndex2 = (lst) => {\n  if (!lst.length) return null\n  let largest = lst[0]\n  let secondLargest = largest\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      secondLargest = largest\n      largest = lst[i]\n    }\n  }\n  return secondLargest\n}\n\n/*\n  Given a list of ints, write a function that returns the 2nd largest element\n  in the list. Return null if there is no such element.\n  \n  find2Largest([1, 2, 3, 4, 5]) == 5"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  const blaseWords = [\"I\", \"you}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(i => isInt(i));\n};\n\nconsole.log(anyInt(5, 2, 7));\nconsole.log(anyInt(3, 2, 2));\nconsole.log(anyInt(3, -2, 1));\nconsole.log(anyInt(3.6, -2.2, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let map = {\n    'a': 'A',\n    'b': 'B',\n    'c': 'C',\n    'd': 'D',\n    'e': 'E',\n    'f': 'F',\n    'g': 'G',\n    'h': 'H',\n    'i': 'I',\n    'j': 'J',\n    'k': 'K',\n    'l': 'L',\n   'm': 'M',\n    'n': 'N',\n    'o': 'O',\n    'p': 'P',\n    'q': 'Q',\n    'r': 'R',\n   's': 'S',\n    't': 'T',\n    'u': 'U',\n    'v': 'V',\n    'w': 'W',\n    'x': 'X',\n    'y': 'Y',\n    'z': 'Z'\n  }\n  let encoded = []\n  for (let char of message) {\n    if (char.toUpperCase()!== char) {\n      encoded.push(char.toUpperCase())\n    } else {\n      encoded.push(char.toLowerCase())\n    }\n  }\n  return encoded.join('')\n}\n\nencode('This is a message')\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let isPrime = (x) => {\n    if(x == 2) return true\n    let i = 2\n    while(i < x) {\n      if(x%i == 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n\n  let largestPrime = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(isPrime(lst[i])) {\n      largestPrime = lst[i]\n      break\n    }\n  }\n\n  let result = 0\n  for(let i = largestPrime; i > 0; i--) {\n    let count = 0\n    for(let j = largestPrime; j >= largestPrime; j--) {\n      if(lst[j] % i == 0) {\n        count += 1\n      }\n    }\n    result = result + count\n  }\n\n  return result\n}\n\nconsole.log(largestPrime(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])))\nconsole.log(largestPrime(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])))\nconsole.log(largestPrime(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])))\nconsole.log(largestPrime(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])))\nconsole.log(largestPrime(skjkasdkd([0,81,12,3,1,21])))\nconsole.log(largestPrime(skjkasdkd([0,8,1,2,1,7])))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n    let upper = true;\n    let lower = true;\n    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n            upper = false;\n        }\n        if (key.toUpperCase() === key) {\n            lower = false;\n        }\n    }\n    return upper && lower;\n};\n\nexport { determineDictCase };<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n    const arr = []\n    const arr2 = []\n    let i = 2\n    let prime = true\n    while (i <= n) {\n        if (isPrime(i)) {\n            arr.push(i)\n            prime = true\n        } else {\n            prime = false\n            arr2.push(i)\n        }\n        i += 1\n    }\n    return [...arr,...arr2]\n}\n\nconsole.log(considerUpTo(20))\n\nfunction isPrime(n) {\n    const num = n + 1\n    let i = 2\n    while (i < num) {\n        if (n % i === 0) {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  // Check if either of the arguments are zero\n  if (a === 0) {\n    if (b === 0) {\n      // Both arguments are zero\n      return 0;\n    } else {\n      // Only b is zero, return b\n      return b;\n    }\n  } else if (b === 0) {\n    // Only a is zero, return a\n    return a;\n  }\n\n  // Calculate the product of the two digits\n  let product = a * b;\n\n  // Calculate the sum of the two digits\n  let sum = a + b;\n\n  // Check if sum is zero\n  if (sum === 0) {\n    // If sum is zero, return product\n    return product;\n  }\n\n  // If sum is not zero, subtract the sum from the product and return the product\n  return product - sum;\n}\n\n/* Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed2 = (a, b) => {\n  if (a === 0) {\n    if (b === 0) {\n      // Both arguments are zero\n      return 0;\n    } else {\n      // Only b is zero, return b\n      return b;\n    }\n  } else if (b === 0) {\n    // Only a is zero, return a\n    return a;\n  }\n\n  let sum = a + b;\n\n  // Check if sum is zero\n  if (sum === 0) {\n    // If sum is zero, return product\n    return a * b;\n  }\n\n  // If sum is not zero, subtract the sum from the product and return the product\n  return a * b - sum;\n}\n\n/* Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed3 = (a, b) => {\n  if (a === 0) {\n    if (b === 0) {\n      // Both arguments are zero\n      return 0;\n    } else {\n      // Only b is zero, return b\n      return b;\n    }\n  } else if (b === 0) {\n    // Only a is zero, return a\n    return a;\n  }\n\n  let sum = a + b;\n\n  // Check if sum is zero\n  if (sum === 0) {\n    // If sum is zero, return product\n    return a * b;\n  }\n\n  // If sum is not zero, subtract the sum from the product and return the product\n  return a * b - sum;\n}\n\n/* Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed4 = (a, b) => {\n  if (a === 0) {\n    if (b === 0) {\n      // Both arguments are zero\n      return 0;\n    } else {\n      // Only b is zero, return b\n      return b;\n    }\n  } else if (b === 0) {\n    // Only a is zero, return a\n    return a;\n  }\n\n  let sum = a + b;\n\n  // Check if sum is zero\n  if (sum === 0) {\n    // If sum is zero, return product\n    return a * b;\n  }\n\n  // If sum is not zero, subtract the sum from the product and return the product\n  return a * b - sum;\n}\n\n/* Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed5 = (a, b) => {\n  if (a === 0) {\n    if (b === 0) {\n      // Both arguments are zero\n      return 0;\n    } else {\n      // Only b is zero, return b\n      return b;\n    }\n  } else if (b === 0) {\n    // Only a is zero, return a\n    return a;\n  }\n\n  let sum = a + b;\n\n  // Check if sum is zero\n  if (sum === 0) {\n    // If sum is zero, return product\n    return a * b;\n  }\n\n  // If sum is not zero, subtract the sum from the product and return the product\n  return a * b - sum;\n}\n\n/* Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed6 = (a, b) => {\n  if (a === 0) {\n    if (b === 0) {\n      // Both arguments are zero\n      return 0;\n    } else {\n      // Only b is zero, return b\n      return b;\n    }\n  } else if (b === 0) {\n    // Only a is zero, return a\n    return a;\n  }\n\n  let sum ="}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst isUpper = (s) => {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isUpperEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (isUpper(s.substring(i, i + 2))) {\n      count++;\n    }\n  }\n  return count === 0 || count === 2;\n};\n\nconst isUpperOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (isUpper(s.substring(i, i + 2))) {\n      count++;\n    }\n  }\n  return count === 1;\n};\n\nconst isUpperUppercase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count === 1;\n};\n\nconst isUpperLowercase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count === 1;\n};\n\nconst isUpperUppercaseEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count === 0 || count === 2;\n};\n\nconst isUpperLowercaseEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count === 0 || count === 1;\n};\n\nconst isUpperLowercaseOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count === 1;\n};\n\nconst considerUpperLowercase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (isUpper(s.substring(i, i + 2))) {\n      count++;\n    } else if (isLower(s.substring(i, i + 2))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst isLower = (s) => {\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase()!== s[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isLowerEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (isLower(s.substring(i, i + 2))) {\n      count++;\n    }\n  }\n  return count === 0 || count === 2;\n};\n\nconst isLowerOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (isLower(s.substring(i, i + 2))) {\n      count++;\n    }\n  }\n  return count === 1;\n};\n\nconst isLowerLowercase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase()!== s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count === 1;\n};\n\nconst isLowerUppercase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count === 1;\n};\n\nconst isLowerUppercaseEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count === 0 || count === 2;\n};\n\nconst isLowerUppercaseOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count === 1;\n};\n\nconst isLowerLowercaseEven = (s) => {\n  let count = 0;\n  for (let i = 0"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const nums = [10, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n  const value = parseInt(value)\n\n  if (value < 0) {\n    return -nums[Math.ceil(value / -10) - 1]\n  }\n\n  return nums[Math.ceil(value / 10) - 1]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n  }\n  for (let i = 1; i < stones.length; i++) {\n    stones[i] = (stones[i] + stones[i - 1] + 1) % 2\n  }\n  return stones\n}\n\nconst holdAPile = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n  }\n  for (let i = 1; i < stones.length; i++) {\n    stones[i] = (stones[i] + stones[i - 1] + 1) % 2\n  }\n  return stones\n}\n\nconst holdAPile = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n  }\n  for (let i = 1; i < stones.length; i++) {\n    stones[i] = (stones[i] + stones[i - 1] + 1) % 2\n  }\n  return stones\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  const words = s.split(/[,|\\s]+/);\n  return words;\n};\n\n/*\n  You will be given two strings. Your task is to add the words together.\n  For example:\n  add(\"one\", \"two\") == \"one, two\"\n  add(\"one\", \"two\") == \"one two\"\n  */\nconst add = (a, b) => a + b;\n\n/*\n  Given a string, return the string with all of the upper case letters converted to\n  lower case.\n  For example:\n  upperCase(\"OneTwoThree\") == \"oneTwoThree\"\n  upperCase(\"ONE\") == \"one\"\n  upperCase(\"ONE\") == \"one\"\n  */\nconst upperCase = (s) => s.toLowerCase();\n\n/*\n  Given a string, return the string with all of the lower case letters converted to\n  upper case.\n  For example:\n  lowerCase(\"oneTwoThree\") == \"oneTwoThree\"\n  lowerCase(\"one\") == \"one\"\n  lowerCase(\"one\") == \"one\"\n  */\nconst lowerCase = (s) => s.toUpperCase();\n\n/*\n  Given two words, return the word that comes first alphabetically.\n  For example:\n  sorted(\"oneTwoThree\", \"four\") == \"oneTwoThree\"\n  sorted(\"oneTwoThree\", \"four\") == \"oneTwoThree\"\n  */\nconst sorted = (a, b) => a < b? a : b;\n\n/*\n  Given a string of words, return the word that occurs first in the string.\n  For example:\n  occurs(\"oneTwoThree\", \"One\") == \"One\"\n  occurs(\"oneTwoThree\", \"One\") == \"One\"\n  */\nconst occurs = (s, w) => s.indexOf(w) == 0? w : \"\";\n\n/*\n  Given a string, return the index of the first occurrence of a given word in the string.\n  For example:\n  indexOf(\"OneTwoThree\", \"One\") == 1\n  indexOf(\"OneTwoThree\", \"One\") == 1\n  */\nconst indexOf = (s, w) => s.indexOf(w);\n\n/*\n  Given a string and a word, return true if the string contains the given word.\n  For example:\n  contains(\"oneTwoThree\", \"one\") == true\n  contains(\"oneTwoThree\", \"one\") == true\n  contains(\"oneTwoThree\", \"one\") == true\n  contains(\"oneTwoThree\", \"two\") == false\n  */\nconst contains = (s, w) => indexOf(s, w) > -1;\n\n/*\n  Given two strings, return a new string with the first string concatenated to the end\n  of the second string.\n  For example:\n  concat(\"one\", \"two\") == \"onetwo\"\n  concat(\"one\", \"two\") == \"onetwo\"\n  concat(\"one\", \"two\") == \"onetwo\"\n  */\nconst concat = (a, b) => a + b;\n\n/*\n  Given two strings, return a new string with the first string concatenated to the end\n  of the second string, but the second string should be the shorter of the two.\n  For example:\n  concatShorter(\"one\", \"two\") == \"onetwo\"\n  concatShorter(\"one\", \"two\") == \"onetwo\"\n  concatShorter(\"one\", \"two\") == \"onetwo\"\n  concatShorter(\"one\", \"two\") == \"onetwo\"\n  concatShorter(\"one\", \"two\") == \"onetwo\"\n  concatShorter(\"one\", \"two\") == \"onetwo\"\n  */\nconst concatShorter = (a, b) => a + b;\n\n/*\n  Given a string and a substring, return true if the string contains the substring.\n  For example:\n  contains(\"oneTwoThree\", \"Two\") == true\n  contains(\"oneTwoThree\", \"Two\") == true\n  contains(\"oneTwoThree\", \"Two\") == true\n  contains(\"oneTwoThree\", \"Two\") == true\n  contains(\"oneTwoThree\", \"Two\") == true\n  */\nconst containsSubstring = (s, w) => contains(s, w);\n\n/*\n  Given a string and a substring, return the index of the first occurrence of the\n  substring in the string.\n  For example:\n  indexOf(\"oneTwoThree\", \"Two\") == 1\n  indexOf(\"oneTwoThree\", \"Two\") == 1\n  indexOf(\"oneTwoThree\", \"Two\") == 1\n  indexOf(\"oneTwoThree\", \"Two\") == 1\n  indexOf(\"oneTwoThree\", \"Two\") == 1\n  */\nconst indexOfSubstring = (s, w) => indexOf(s, w);\n\n/*\n  Given a string and a substring, return the index of the first occurrence of the\n  substring in the string, but the index should be relative to the length of the\n  substring.\n  For example:\n  indexOfShorter(\"oneTwoThree\", \"Two\") == 1\n  indexOfShorter(\"oneTwoThree\", \"Two\") == 1\n  indexOfShorter(\"oneTwoThree\", \"Two\") == 1\n  indexOfShorter(\"oneTwoThree\", \"Two\") == 1\n  indexOfShorter(\"oneTwoThree\", \"Two\") == 1\n  */\nconst indexOfShorter = (s, w) => indexOfSubstring(s, w);\n\n/*\n  Given a string and a substring, return the string with the substring removed.\n  For example:\n  remove(\"oneTwoThree\", \"Two\") == \"oOneThree\"\n  remove(\"oneTwoThree\", \"Two\") == \"oOneThree\"\n  remove(\"oneTwoThree\", \"Two\") == \"oOneThree\"\n  remove(\"oneTwoThree\", \"Two\") == \"oOneThree\"\n  remove(\"oneTwoThree\", \"Two\") == \"oOneThree\"\n  */\nconst remove = (s, w"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = x\n  let min = y\n\n  while (max - min > 1) {\n    let mid = (max + min) >> 1\n    if (isEven(mid)) {\n      min = mid\n    } else {\n      max = mid\n    }\n  }\n\n  return max\n}\n\n/*\n  This function is almost the same as chooseNum() except that it returns \n  a negative number if there's no such number in the range [x, y] \n  inclusive.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumWithMin = (x, y) => {\n  let max = x\n  let min = y\n\n  while (max - min > 1) {\n    let mid = (max + min) >> 1\n    if (isEven(mid)) {\n      min = mid\n    } else {\n      max = mid\n    }\n  }\n\n  if (max - min > 1) {\n    return -1\n  } else {\n    return max\n  }\n}\n\n/*\n  This function is almost the same as chooseNum() except that it returns \n  a negative number if there's no such number in the range [x, y] \n  inclusive.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumWithMax = (x, y) => {\n  let max = x\n  let min = y\n\n  while (max - min > 1) {\n    let mid = (max + min) >> 1\n    if (isEven(mid)) {\n      max = mid\n    } else {\n      min = mid\n    }\n  }\n\n  if (max - min > 1) {\n    return -1\n  } else {\n    return max\n  }\n}\n\nconst isEven = (num) => {\n  return num % 2 === 0\n}\n\n// console.log(chooseNum(12, 15))\n// console.log(chooseNum(13, 12))\n// console.log(chooseNum(12, 13))\n// console.log(chooseNum(13, 14))\n// console.log(chooseNum(12, 15))\n// console.log(chooseNum(12, 16))\n// console.log(chooseNum(12, 17))\n// console.log(chooseNum(12, 18))\n// console.log(chooseNum(12, 19))\n// console.log(chooseNum(12, 20))\n// console.log(chooseNum(13, 12))\n// console.log(chooseNum(13, 13))\n// console.log(chooseNum(13, 14))\n// console.log(chooseNum(13, 15))\n// console.log(chooseNum(13, 16))\n// console.log(chooseNum(13, 17))\n// console.log(chooseNum(13, 18))\n// console.log(chooseNum(13, 19))\n// console.log(chooseNum(13, 20))\n// console.log(chooseNum(14, 12))\n// console.log(chooseNum(14, 13))\n// console.log(chooseNum(14, 14))\n// console.log(chooseNum(14, 15))\n// console.log(chooseNum(14, 16))\n// console.log(chooseNum(14, 17))\n// console.log(chooseNum(14, 18))\n// console.log(chooseNum(14, 19))\n// console.log(chooseNum(14, 20))\n// console.log(chooseNum(15, 12))\n// console.log(chooseNum(15, 13))\n// console.log(chooseNum(15, 14))\n// console.log(chooseNum(15, 15))\n// console.log(chooseNum(15, 16))\n// console.log(chooseNum(15, 17))\n// console.log(chooseNum(15, 18))\n// console.log(chooseNum(15, 19))\n// console.log(chooseNum(15, 20))\n// console.log(chooseNum(16, 12))\n// console.log(chooseNum(16, 13))\n// console.log(chooseNum(16, 14))\n// console.log(chooseNum(16, 15))\n// console.log(chooseNum(16, 16))\n// console.log(chooseNum(16, 17))\n// console.log(chooseNum(16, 18))\n// console.log(chooseNum(16, 19))\n// console.log(chooseNum(16, 20))\n// console.log(chooseNum(17, 12))\n// console.log(chooseNum(17, 13))\n// console.log(chooseNum(17, 14))\n// console.log(chooseNum(17, 15))\n// console.log(chooseNum(17, 16))\n// console.log(chooseNum(17, 17))\n// console.log(chooseNum(17, 18))\n// console.log(chooseNum(17, 19))\n// console.log(chooseNum(17, 20))\n// console.log(chooseNum(18, 12))\n// console.log(chooseNum(18, 13))\n// console.log(chooseNum(18, 14))\n// console.log(chooseNum(18, 15))\n// console.log(chooseNum(18, 16))\n// console.log(chooseNum(18, 17))\n// console.log(chooseNum(18, 18))\n// console.log(chooseNum(18, 19))\n// console.log(chooseNum(18, 20))\n// console.log(chooseNum(19, 12))\n// console.log(chooseNum(19, 13))\n// console.log(chooseNum(19, 14))\n// console.log(chooseNum(19, 15))\n// console.log(chooseNum(19, 16))\n// console.log"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = (n + m) / 2;\n  return Number(Math.round(avg)).toString(2);\n};\n\n// Test\nroundedAvg(1, 5);\nroundedAvg(7, 5);\nroundedAvg(10, 20);\nroundedAvg(20, 33);\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    let num = parseInt(x[i])\n    if (num % 2 == 0) continue\n    if (num == 1) {\n      ans.push(num)\n      continue\n    }\n    while (num > 0) {\n      num = num / 10\n      ans.push(num)\n    }\n  }\n  return ans\n}\n\n/*\n  Given two numbers a and b, \n  return the smallest number that can be written as the sum of a and b, \n  such that the number doesn't contain any digit that is both odd and even.\n  \n  For example:\n  >>> addOddEven([-2, 3, -6, 9])\n  3\n  >>> addOddEven([-2, -6, 9])\n  6\n  >>> addOddEven([-2, -6, -9])\n  6\n  >>> addOddEven([-6, 9])\n  9\n  */\nconst addOddEven = (nums) => {\n  let min = nums[0]\n  let sum = nums[0]\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i]\n    }\n    sum += nums[i]\n  }\n  if (sum == 0) return 0\n  let ans = min + 1\n  while (ans < sum) {\n    let cnt = 0\n    for (let i = 0; i < nums.length; i++) {\n      if (ans % nums[i] == 0) {\n        cnt += 1\n      }\n    }\n    if (cnt % 2 == 0) {\n      ans += 1\n    } else {\n      break\n    }\n  }\n  return ans\n}\n\n/*\n  Given a number n, return True if it is a happy number or False otherwise.\n  \n  A happy number is defined as a number for which the sum of its proper divisors is equal to the number.\n  For example:\n  >>> isHappy(13)\n  True\n  >>> isHappy(19)\n  False\n  >>> isHappy(20)\n  False\n  >>> isHappy(100)\n  False\n  >>> isHappy(0)\n  True\n  >>> isHappy(-1)\n  False\n  >>> isHappy(-2)\n  False\n  >>> isHappy(-3)\n  False\n  */\nconst isHappy = (n) => {\n  if (n <= 1) return n == 1\n  let sum = 0\n  while (n > 1) {\n    sum += n % 10\n    n = Math.floor(n / 10)\n  }\n  return sum == n\n}\n\n/*\n  Given two numbers n and m, return the largest number that can be written as the sum of n and m.\n  \n  For example:\n  >>> addTwoNumbers(1, 2)\n  3\n  >>> addTwoNumbers(2, 2)\n  4\n  >>> addTwoNumbers(1, 3)\n  6\n  >>> addTwoNumbers(0, 0)\n  0\n  >>> addTwoNumbers(-1, 1)\n  1\n  >>> addTwoNumbers(-2, 2)\n  3\n  */\nconst addTwoNumbers = (n, m) => {\n  let sum = n + m\n  if (sum < 0) return 0\n  let ans = sum\n  while (ans < sum) {\n    let num = sum - ans\n    let cnt = 0\n    while (num > 0) {\n      let div = num % 10\n      if (num / div == ans / div) {\n        cnt += 1\n      }\n      num = num / 10\n    }\n    if (cnt % 2 == 0) {\n      ans += 1\n    } else {\n      break\n    }\n  }\n  return ans\n}\n\n/*\n  Given two numbers n and m, return the sum of the largest numbers that can be written as the sum of n and m.\n  \n  For example:\n  >>> addTwoNumbers(1, 2)\n  3\n  >>> addTwoNumbers(2, 2)\n  4\n  >>> addTwoNumbers(1, 3)\n  6\n  >>> addTwoNumbers(0, 0)\n  0\n  >>> addTwoNumbers(-1, 1)\n  1\n  >>> addTwoNumbers(-2, 2)\n  3\n  */\nconst addTwoNumbersMax = (n, m) => {\n  let sum = n + m\n  if (sum < 0) return 0\n  let ans = sum\n  while (ans < sum) {\n    let num = sum - ans\n    let cnt = 0\n    while (num > 0) {\n      let div = num % 10\n      if (num / div == ans / div) {\n        cnt += 1\n      }\n      num = num / 10\n    }\n    if (cnt % 2 == 0) {\n      ans += 1\n    } else {\n      break\n    }\n  }\n  return ans\n}\n\n/*\n  Given two numbers n and m, return the sum of the smallest numbers that can be written as the sum of n and m.\n  \n  For example:\n  >>> addTwoNumbers(1, 2)\n  3\n  >>> addTwoNumbers(2, 2)\n  4\n  >>> addTwoNumbers(1, 3)\n  6\n  >>> addTwoNumbers(0, 0)\n  0\n  >>> addTwoNumbers(-1, 1)\n  1\n  >>> addTwoNumbers(-2, 2)\n  3\n  */\nconst addTwoNumbersMin = (n, m) => {\n  let sum = n + m\n  if (sum < 0) return 0\n  let ans = sum\n  while (ans < sum) {\n    let num = sum - ans\n    let cnt = 0\n    while (num > 0) {\n      let div = num % 10\n      if (num / div == ans / div) {\n        cnt += 1\n      }\n"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  if(!arr ||!arr.length) {\n    return [];\n  }\n\n  // Sort by duration.\n  arr = arr.sort((a, b) => {\n    return a - b;\n  });\n\n  // Reverse the order.\n  arr = arr.reverse();\n\n  // Replace the digits with their respective names.\n  let nums = arr.map((n) => {\n    return n < 10? \"Zero\" + n : \"Nine\" + n;\n  });\n\n  return nums;\n}\n\nconst byName = (arr) => {\n  if(!arr ||!arr.length) {\n    return [];\n  }\n\n  // Sort by name.\n  arr = arr.sort((a, b) => {\n    return a - b;\n  });\n\n  // Reverse the order.\n  arr = arr.reverse();\n\n  // Replace the digits with their respective names.\n  let nums = arr.map((n) => {\n    return n < 10? \"Zero\" + n : \"Nine\" + n;\n  });\n\n  return nums;\n}\n\n// const byName = (arr) => {\n//   if(!arr ||!arr.length) {\n//     return [];\n//   }\n\n//   // Sort by name.\n//   arr = arr.sort((a, b) => {\n//     return a - b;\n//   });\n\n//   // Reverse the order.\n//   arr = arr.reverse();\n\n//   // Replace the digits with their respective names.\n//   let nums = arr.map((n) => {\n//     return n < 10? \"Zero\" + n : \"Nine\" + n;\n//   });\n\n//   return nums;\n// }\n\nconst byLength = (arr) => {\n  if(!arr ||!arr.length) {\n    return [];\n  }\n\n  // Sort by length.\n  arr = arr.sort((a, b) => {\n    return a.length - b.length;\n  });\n\n  // Reverse the order.\n  arr = arr.reverse();\n\n  // Replace the digits with their respective names.\n  let nums = arr.map((n) => {\n    return n.length < 10? \"Zero\" + n.length : \"Nine\" + n.length;\n  });\n\n  return nums;\n}\n\nconst byNumber = (arr) => {\n  if(!arr ||!arr.length) {\n    return [];\n  }\n\n  // Sort by number.\n  arr = arr.sort((a, b) => {\n    return a - b;\n  });\n\n  // Reverse the order.\n  arr = arr.reverse();\n\n  // Replace the digits with their respective names.\n  let nums = arr.map((n) => {\n    return n.length < 10? \"Zero\" + n.length : \"Nine\" + n.length;\n  });\n\n  return nums;\n}\n\nconst byScore = (arr) => {\n  if(!arr ||!arr.length) {\n    return [];\n  }\n\n  // Sort by score.\n  arr = arr.sort((a, b) => {\n    return a.score - b.score;\n  });\n\n  // Reverse the order.\n  arr = arr.reverse();\n\n  // Replace the digits with their respective names.\n  let nums = arr.map((n) => {\n    return n.score < 10? \"Zero\" + n.score : \"Nine\" + n.score;\n  });\n\n  return nums;\n}\n\nconst byNameThenScore = (arr) => {\n  if(!arr ||!arr.length) {\n    return [];\n  }\n\n  // Sort by name.\n  arr = arr.sort((a, b) => {\n    return a.name - b.name;\n  });\n\n  // Reverse the order.\n  arr = arr.reverse();\n\n  // Sort by score.\n  arr = arr.sort((a, b) => {\n    return a.score - b.score;\n  });\n\n  // Replace the digits with their respective names.\n  let nums = arr.map((n) => {\n    return n.score < 10? \"Zero\" + n.score : \"Nine\" + n.score;\n  });\n\n  return nums;\n}\n\nconst byScoreThenName = (arr) => {\n  if(!arr ||!arr.length) {\n    return [];\n  }\n\n  // Sort by score.\n  arr = arr.sort((a, b) => {\n    return a.score - b.score;\n  });\n\n  // Reverse the order.\n  arr = arr.reverse();\n\n  // Sort by name.\n  arr = arr.sort((a, b) => {\n    return a.name - b.name;\n  });\n\n  // Replace the digits with their respective names.\n  let nums = arr.map((n) => {\n    return n.score < 10? \"Zero\" + n.score : \"Nine\" + n.score;\n  });\n\n  return nums;\n}\n\nmodule.exports = {\n  byDuration,\n  byName,\n  byLength,\n  byNumber,\n  byScore,\n  byNameThenScore,\n  byScoreThenName\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [1]\n\n  for (let i = 2; i <= n; i += 2) {\n    const even = i % 2 === 0\n    result.push(result[i - 1] * i)\n    if (!even) {\n      result.push(result[i - 1] + result[i - 2])\n    }\n  }\n\n  return result\n}\n\n// f(5)\nconsole.log(f(5))\n// [1, 2, 6, 24, 15]\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const maxPalindrome = Math.pow(10, n)\n    const halfMaxPalindrome = maxPalindrome / 2\n    const palindromes = []\n\n    for (let i = 1; i < maxPalindrome; i++) {\n        if (isPalindrome(i)) {\n            palindromes.push(i)\n        }\n    }\n\n    for (let i = halfMaxPalindrome; i < maxPalindrome; i++) {\n        if (isPalindrome(i)) {\n            palindromes.push(i)\n        }\n    }\n\n    return (palindromes.filter(isEven).length, palindromes.filter(isOdd).length)\n}\n\nfunction isPalindrome(n) {\n    return n === parseInt(n, 10) && n.toString() === n.toString(10)\n}\n\nconst isOdd = (n) => n % 2 === 1\nconst isEven = (n) => n % 2 === 0\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  const sum = arr.reduce((a, b) => a + b, 0)\n  const nums = arr.filter((num) => num > 0)\n  const numsWithSignedDigits = nums.filter((num) => {\n    let isNeg = false\n    const digits = num.toString().split('').map((digit) => {\n      if (digit.length === 1) {\n        return digit\n      } else if (digit.length === 2) {\n        return parseInt(digit, 10)\n      } else if (digit.length === 3) {\n        return parseInt(digit, 10) * 10\n      }\n    })\n    const sumOfDigits = digits.reduce((a, b) => a + b, 0)\n    isNeg = sumOfDigits < 0\n    return isNeg\n  })\n  return numsWithSignedDigits.length\n}\n\nconst test = require('tape')\n\ntest('Test with empty array', function (t) {\n  t.equal(considerNums([1, 1, 2]), 3)\n  t.end()\n})\n\ntest('Test with non-empty array', function (t) {\n  t.equal(considerNums([-1, 11, -11]), 1)\n  t.equal(considerNums([1, 1, 2]), 3)\n  t.end()\n})\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  // Complete this function\n  let start = 0;\n  let end = arr.length - 1;\n  let start = arr[start];\n  let end = arr[end];\n  let arrCopy = arr.slice(0);\n  let min = arrCopy[0];\n  let max = arrCopy[arrCopy.length - 1];\n  let arrCopy2 = arrCopy.slice(0);\n  let k = 0;\n  while (true) {\n    if (start > end) {\n      return false;\n    }\n    arrCopy.splice(start, 1);\n    arrCopy.splice(end, 1);\n    if (min > arrCopy[0] && max < arrCopy[arrCopy.length - 1]) {\n      return true;\n    }\n    if (arrCopy.length === 0) {\n      return true;\n    }\n    if (arrCopy[0] > min) {\n      start++;\n    } else if (arrCopy[arrCopy.length - 1] < max) {\n      end--;\n    } else if (arrCopy[arrCopy.length - 1] === min) {\n      start++;\n      end--;\n    } else if (arrCopy[0] === max) {\n      start--;\n      end++;\n    } else if (arrCopy[0] === min) {\n      start++;\n      end--;\n    } else if (arrCopy[arrCopy.length - 1] === max) {\n      start--;\n      end++;\n    } else {\n      start++;\n      end--;\n    }\n    k++;\n  }\n};\n\nconsole.log(affectOneTestis([3, 4, 5, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return \"NO\";\n  }\n  const lst2Length = lst2.length;\n  const lst1Length = lst1.length;\n  const max = Math.max(lst1Length, lst2Length);\n  let min = Math.min(lst1Length, lst2Length);\n  for (let i = min; i < max; i++) {\n    if (lst1[i] % 2!== 0 || lst2[i] % 2!== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};\n\nexport default central;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let test = test.toLowerCase();\n  const hash = {};\n  const max = {};\n  for (let i = 0; i < test.length; i++) {\n    const char = test[i];\n    if (hash[char] === undefined) {\n      hash[char] = 1;\n      max[char] = 1;\n    } else {\n      hash[char]++;\n      max[char] = Math.max(max[char], hash[char]);\n    }\n  }\n  return { hash, max };\n};\n\nmodule.exports = histogram;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  // check the string is not empty\n  if (s.length === 0) {\n    return (s, false)\n  }\n\n  // check the c is not empty\n  if (c.length === 0) {\n    return (s, false)\n  }\n\n  // create the dictionary\n  const dict = new Map()\n  for (let i = 0; i < c.length; i++) {\n    dict.set(c[i], true)\n  }\n\n  // loop through the string and invert the c\n  let index = 0\n  let length = s.length\n  while (index < length) {\n    if (dict.has(s[index])) {\n      s = s.substring(0, index) + s.substring(index + 1)\n      length--\n    } else {\n      index++\n    }\n  }\n  return (s, dict.size === 0)\n}\n\nconst test = (t) => {\n  const s = \"abcdedcba\"\n  const c = \"ab\"\n\n  const { result, isPalindrome } = invertDelete(s, c)\n  console.log(`s = ${s}, c = ${c}, result = ${result}, isPalindrome = ${isPalindrome}`)\n}\n\ntest((\"abcdedcba\", \"ab\"))\ntest((\"abcdedcba\", \"abcd\"))\ntest((\"abcdedcba\", \"b\"))\ntest((\"abcdedcba\", \"abce\"))\ntest((\"abcdedcba\", \"abc\"))\ntest((\"abcdedcba\", \"abcdef\"))\ntest((\"abcdedcba\", \"abcdee\"))\ntest((\"abcdedcba\", \"acded\"))\ntest((\"abcdedcba\", \"acdedc\"))\ntest((\"abcdedcba\", \"ae\"))\ntest((\"abcdedcba\", \"abcde\"))\ntest((\"abcdedcba\", \"abcdedc\"))\ntest((\"abcdedcba\", \"abced\"))\ntest((\"abcdedcba\", \"abcedc\"))\ntest((\"abcdedcba\", \"acdedc\"))\ntest((\"abcdedcba\", \"acdedcba\"))\ntest((\"abcdedcba\", \"acdedcbaee\"))\ntest((\"abcdedcba\", \"acdedcbaaee\"))\ntest((\"abcdedcba\", \"acdedcbaaaee\"))\ntest((\"abcdedcba\", \"acdedcbaeee\"))\ntest((\"abcdedcba\", \"acdedcbaaaaee\"))\ntest((\"abcdedcba\", \"acdedcbaaaaaee\"))\ntest((\"abcdedcba\", \"acdedcbaaaaaaee\"))\ntest((\"abcdedcba\", \"acdedcbaaaaaaaee\"))\ntest((\"abcdedcba\", \"acdedcbaaaaaaaaaee\"))\ntest((\"abcdedcba\", \"acdedcbaaaaaaaaaaaee\"))\ntest((\"abcdedcba\", \"acdedcbaaaaaaaaaaaaaee\"))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  if (lst.length === 0) return []\n\n  const oddCount = lst.map(digit => {\n    return (digit.length % 2 === 1)? `${digit}` : digit\n  })\n\n  return lst.map(digit => {\n    return `the number of odd elements ${oddCount.indexOf(digit)} of the str4ng ${digit} of the ${oddCount.indexOf(digit)}nput.`\n  })\n}\n\nmodule.exports = curiousCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n    const numsLength = nums.length;\n    let i = 0;\n    let minSum = nums[i];\n    let sum = nums[i];\n    for (i = 1; i < numsLength; i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n}\n\nconsole.log(minuteSubArraySum([2, 3, 4, 1, 2, 4]) === 1);\nconsole.log(minuteSubArraySum([-1, -2, -3]) === -6);\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  const numRows = grid.length;\n  const numCols = grid[0].length;\n  const rows = grid.map(row => row.length);\n  const cols = grid[0].map(col => col.length);\n\n  const bucket = [];\n  for (let i = 0; i < numRows; i += 1) {\n    for (let j = 0; j < numCols; j += 1) {\n      if (grid[i][j] === 1) {\n        bucket.push({\n          row: i,\n          col: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n\n  const [lowest] = bucket;\n\n  const buckets = [];\n  const bucketIndex = [];\n\n  while (bucket.length > 0) {\n    const next = bucket.shift();\n    const row = next.row;\n    const col = next.col;\n    const [current] = bucket;\n    const currentCapacity = current.capacity;\n\n    while (currentCapacity > 0) {\n      const bucketCapacity = capacity - currentCapacity;\n      const nextBucket = bucket.shift();\n      const nextRow = nextBucket.row;\n      const nextCol = nextBucket.col;\n\n      const rowDiff = nextRow - row;\n      const colDiff = nextCol - col;\n      const rowBucketCapacity = currentCapacity - rowCapacity(row, col, rowDiff, colDiff);\n      const colBucketCapacity = currentCapacity - colCapacity(row, col, rowDiff, colDiff);\n\n      if (rowBucketCapacity > 0) {\n        const newBucket = {\n          row: row + rowDiff,\n          col: col + colDiff,\n          capacity: rowBucketCapacity\n        };\n        bucket.push(newBucket);\n        buckets.push(newBucket);\n        bucketIndex.push(bucket.length - 1);\n      }\n\n      if (colBucketCapacity > 0) {\n        const newBucket = {\n          row: row + rowDiff,\n          col: col + colDiff,\n          capacity: colBucketCapacity\n        };\n        bucket.push(newBucket);\n        buckets.push(newBucket);\n        bucketIndex.push(bucket.length - 1);\n      }\n\n      currentCapacity -= currentCapacity;\n    }\n\n    lowest.capacity -= currentCapacity;\n  }\n\n  return buckets.length;\n};\n\nconst bucketCapacity = (grid, capacity) => grid.reduce(function (memo, row, rowIdx) {\n  row.reduce(function (memo, col, colIdx) {\n    if (rowIdx === 0 || colIdx === 0) {\n      memo += capacity;\n    } else {\n      memo += grid[rowIdx - 1][colIdx - 1];\n    }\n    return memo;\n  }, 0);\n  return memo;\n}, 0);\n\nconst rowCapacity = (row, col, rowDiff, colDiff) => rowDiff > 0 && colDiff > 0? rowDiff + colDiff : 0;\n\nconst colCapacity = (row, col, rowDiff, colDiff) => rowDiff > 0 && colDiff > 0? colDiff + rowDiff : 0;\n\nconst bucketCapacity = (grid, capacity) => grid.reduce(function (memo, row, rowIdx) {\n  row.reduce(function (memo, col, colIdx) {\n    if (rowIdx === 0 || colIdx === 0) {\n      memo += capacity;\n    } else {\n      memo += grid[rowIdx - 1][colIdx - 1];\n    }\n    return memo;\n  }, 0);\n  return memo;\n}, 0);\n\n// TESTS\n// [\n//   [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n//   [[0, 0, 0], [0, 0, 0]],\n//   [[1, 1, 1, 1], [0, 1, 1, 1]]\n// ]\nconsole.log(soapFill([\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n], 1));\n\n// TESTS\n// [\n//   [[0, 0, 0], [0, 0, 0]],\n//   [[0, 0, 1, 1], [0, 1, 1, 1]],\n//   [[1, 1, 1, 1], [1, 1, 1, 1]],\n//   [[0, 0, 0], [0, 0, 0]],\n//   [[0, 0, 1, 1], [1, 1, 1, 1]]\n// ]\nconsole.log(soapFill([\n  [0, 0, 0],\n  [0, 0, 0],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1]\n], 2));\n\n// TESTS\n// [\n//   [["}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = []\n  const sortedArray = arr.slice()\n\n  sortedArray.forEach(number => {\n    const binaryString = number.toString(2)\n    const intValue = parseInt(binaryString, 2)\n    sorted.push(intValue)\n  })\n\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n\n    if (a < b) {\n      return -1\n    }\n\n    return 0\n  })\n\n  return sorted\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  if(!s) return [];\n  const list = [];\n  for(let i = 0; i < s.length; i++){\n    if(n === 0){\n      list.push(s.slice(i));\n      break;\n    }\n    if(s[i].match(/[bcdfghjklmnpqrstvwxyz]/)){\n      list.push(s.slice(i));\n      n--;\n    }\n  }\n  return list;\n};\n\nconst words = [\n  \"a\",\n  \"ab\",\n  \"abc\",\n  \"abcd\",\n  \"abcde\",\n  \"abcdef\",\n  \"abcdefg\",\n  \"abcdefgh\",\n  \"abcdefghi\",\n  \"abcdefghij\",\n  \"abcdefghijk\",\n  \"abcdefghijkl\",\n  \"abcdefghijklm\",\n  \"abcdefghijklmn\",\n  \"abcdefghijklmno\",\n  \"abcdefghijklmnop\",\n  \"abcdefghijklmnopq\",\n  \"abcdefghijklmnopqr\",\n  \"abcdefghijklmnopqrst\",\n  \"abcdefghijklmnopqrstu\",\n  \"abcdefghijklmnopqrstuv\",\n  \"abcdefghijklmnopqrstuvw\",\n  \"abcdefghijklmnopqrstuvwx\",\n  \"abcdefghijklmnopqrstuvwxy\",\n  \"abcdefghijklmnopqrstuvwxyz\"\n];\nconst result = [];\n\nfor(let i = 0; i < words.length; i++){\n  for(let j = 0; j < words[i].length; j++){\n    for(let k = 0; k < words.length; k++){\n      if(k!== i && j!== words[i].length - 1){\n        result.push(words[i].slice(0, j + 1) + words[k].slice(0, j + 1) + words[i].slice(j + 1));\n      }\n    }\n  }\n}\n\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  let wordWithoutVowel = word.split('').reverse().join('');\n  let vowel = wordWithoutVowel.replace(/[^A-Za-z]/g, '');\n  let consonant = wordWithoutVowel.replace(/[A-Za-z]/g, '');\n  let currentVowel = wordWithoutVowel.split('').reverse().join('');\n  let vowelList = [vowel, consonant];\n  return vowelList.find((vowel) => {\n    return vowelList.indexOf(vowel) > 0 && vowelList.indexOf(vowel) < consonant;\n  }) || '';\n};\n\n/*\n  Find the largest substring that can be obtained by deleting two characters.\n\n  Example:\n  removeTwoChars(\"abc\", \"b\") ==> \"a\"\n  removeTwoChars(\"aaabcc\", \"bc\") ==> \"aaa\"\n  removeTwoChars(\"abbc\", \"cb\") ==> \"\"\n  removeTwoChars(\"a\", \"a\") ==> \"\"\n  removeTwoChars(\"\", \"\") ==> \"\"\n*/\nconst removeTwoChars = (string, stringToRemove) => {\n  if (string.length === 0 || stringToRemove.length === 0) {\n    return '';\n  }\n  if (string.length === 1) {\n    return stringToRemove;\n  }\n  let lastChar = string.charAt(string.length - 1);\n  let currentString = string.slice(0, string.length - 1);\n  let leftChar = currentString.charAt(currentString.length - 1);\n  let rightChar = currentString.charAt(currentString.length - 2);\n  if (leftChar === rightChar && lastChar === stringToRemove.charAt(0)) {\n    return removeTwoChars(currentString, stringToRemove.slice(1));\n  }\n  return currentString;\n};\n\nmodule.exports = {\n  catchClosestVowel: catchClosestVowel,\n  removeTwoChars: removeTwoChars\n};<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  if (lst.length === 0) return 'No'\n  const stack = []\n  lst.forEach((c, i) => {\n    if (c === '(') {\n      stack.push(i)\n    } else {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  })\n  if (stack.length === 0) return 'Yes'\n  return 'No'\n}\n\nconsole.log(catchParens(['()(', ')']))\nconsole.log(catchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const len = arr.length;\n  let max = arr[0];\n  let index = 0;\n  let min = 0;\n  let temp = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n\n  for (let i = 0; i < k; i++) {\n    temp = arr[i];\n    arr[i] = max;\n    max = temp;\n  }\n\n  return arr.slice(index, index + k);\n};\n\nexport default maximal;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let sum = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nconsole.log(solution([5, 8, 7, 1, 0, 3, 3, 3, 3, 3]))<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const [min, max] = [1, k]\n  return arr.slice(min, max + 1).reduce((a, b) => a + b)\n}\n\nexport const test = () => {\n  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  const k = 4\n\n  console.log('lendElement(arr, k) =', lendElement(arr, k))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let result = []\n  let counter = n\n  while(counter > 1) {\n    if(counter % 2 === 0) {\n      counter = counter / 2\n    } else {\n      counter = 3 * counter + 1\n    }\n    result.push(counter)\n  }\n  result.push(1)\n  return result\n}\n\n// test\n// console.log(catchOddCollatz(2))\n// console.log(catchOddCollatz(3))\n// console.log(catchOddCollatz(4))\n// console.log(catchOddCollatz(5))\n// console.log(catchOddCollatz(7))\n// console.log(catchOddCollatz(11))\n// console.log(catchOddCollatz(20))\n// console.log(catchOddCollatz(21))\n// console.log(catchOddCollatz(22))\n// console.log(catchOddCollatz(23))\n// console.log(catchOddCollatz(30))\n// console.log(catchOddCollatz(31))\n// console.log(catchOddCollatz(32))\n// console.log(catchOddCollatz(33))\n// console.log(catchOddCollatz(35))\n// console.log(catchOddCollatz(36))\n// console.log(catchOddCollatz(37))\n// console.log(catchOddCollatz(38))\n// console.log(catchOddCollatz(39))\n// console.log(catchOddCollatz(40))\n// console.log(catchOddCollatz(41))\n// console.log(catchOddCollatz(42))\n// console.log(catchOddCollatz(43))\n// console.log(catchOddCollatz(44))\n// console.log(catchOddCollatz(45))\n// console.log(catchOddCollatz(46))\n// console.log(catchOddCollatz(47))\n// console.log(catchOddCollatz(48))\n// console.log(catchOddCollatz(49))\n// console.log(catchOddCollatz(50))\n// console.log(catchOddCollatz(51))\n// console.log(catchOddCollatz(52))\n// console.log(catchOddCollatz(53))\n// console.log(catchOddCollatz(54))\n// console.log(catchOddCollatz(55))\n// console.log(catchOddCollatz(56))\n// console.log(catchOddCollatz(57))\n// console.log(catchOddCollatz(58))\n// console.log(catchOddCollatz(59))\n// console.log(catchOddCollatz(60))\n// console.log(catchOddCollatz(61))\n// console.log(catchOddCollatz(62))\n// console.log(catchOddCollatz(63))\n// console.log(catchOddCollatz(64))\n// console.log(catchOddCollatz(65))\n// console.log(catchOddCollatz(66))\n// console.log(catchOddCollatz(67))\n// console.log(catchOddCollatz(68))\n// console.log(catchOddCollatz(69))\n// console.log(catchOddCollatz(70))\n// console.log(catchOddCollatz(71))\n// console.log(catchOddCollatz(72))\n// console.log(catchOddCollatz(73))\n// console.log(catchOddCollatz(74))\n// console.log(catchOddCollatz(75))\n// console.log(catchOddCollatz(76))\n// console.log(catchOddCollatz(77))\n// console.log(catchOddCollatz(78))\n// console.log(catchOddCollatz(79))\n// console.log(catchOddCollatz(80))\n// console.log(catchOddCollatz(81))\n// console.log(catchOddCollatz(82))\n// console.log(catchOddCollatz(83))\n// console.log(catchOddCollatz(84))\n// console.log(catchOddCollatz(85))\n// console.log(catchOddCollatz(86))\n// console.log(catchOddCollatz(87))\n// console.log(catchOddCollatz(88))\n// console.log(catchOddCollatz(89))\n// console.log(catchOddCollatz(90))\n// console.log(catchOddCollatz(91))\n// console.log(catchOddCollatz(92))\n// console.log(catchOddCollatz(93))\n// console.log(catchOddCollatz(94))\n// console.log(catchOddCollatz(95))\n// console.log(catchOddCollatz(96))\n// console.log(catchOddCollatz(97))\n// console.log(catchOddCollatz(98))\n// console.log(catchOddCollatz(99))\n// console.log(catchOddCollatz(100))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  if (dateArray[2].length === 2) {\n    const month = parseInt(dateArray[1], 10);\n    const day = parseInt(dateArray[2], 10);\n    if (month <= 12 && month > 0) {\n      if (day <= 31) {\n        if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (day <= 30) {\n          if (month === 4 || month === 6 || month === 9 || month === 11) {\n            return true;\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate2 = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  if (dateArray[2].length === 2) {\n    const month = parseInt(dateArray[1], 10);\n    const day = parseInt(dateArray[2], 10);\n    if (month <= 12 && month > 0) {\n      if (day <= 31) {\n        if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (day <= 30) {\n          if (month === 4 || month === 6 || month === 9 || month === 11) {\n            return true;\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nexport default validDate;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  let words = txt.split(/\\s+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let sub = words[i];\n    let start = 0;\n    let count = 0;\n    let hasSpace = false;\n    while (true) {\n      let j = sub.indexOf(' ', start);\n      if (j == -1) {\n        j = sub.length;\n        hasSpace = false;\n      } else {\n        hasSpace = true;\n      }\n      if (count == 0) {\n        result.push(sub.substr(start, j - start));\n        if (hasSpace) {\n          result.push(\" \");\n        }\n        start = j + 1;\n        count++;\n      } else {\n        if (j == sub.length) {\n          result.push(sub.substr(start, j - start));\n          break;\n        } else {\n          result.push(sub.substr(start, j - start));\n          if (hasSpace) {\n            result.push(\" \");\n          }\n          start = j + 1;\n          count++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst connectedWords = (txt) => {\n  let words = txt.split(/\\s+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let sub = words[i];\n    let start = 0;\n    let count = 0;\n    while (true) {\n      let j = sub.indexOf(' ', start);\n      if (j == -1) {\n        j = sub.length;\n        break;\n      }\n      let k = sub.indexOf(' ', j + 1);\n      if (k == -1) {\n        k = sub.length;\n      }\n      if (count == 0) {\n        result.push(sub.substr(start, j - start));\n        start = j + 1;\n        count++;\n      } else {\n        if (j == sub.length) {\n          result.push(sub.substr(start, j - start));\n          break;\n        } else {\n          result.push(sub.substr(start, j - start));\n          start = j + 1;\n          count++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nexport default {\n  disconnectedWords,\n  connectedWords,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  const n = lst.length;\n  if(n === 0) return true;\n  let isSorted = true;\n  let i = 1;\n  while(i < n) {\n    if(lst[i] <= lst[i - 1]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n  }\n  return isSorted;\n};\n\nexport default isScreen;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n    let start1 = interval1[0],\n        end1 = interval1[1];\n\n    let start2 = interval2[0],\n        end2 = interval2[1];\n\n    if (start1 > start2) {\n        start1 = interval2[0];\n        start2 = interval2[1];\n    }\n    if (end1 > end2) {\n        end1 = interval2[1];\n        end2 = interval2[1];\n    }\n\n    if (start1 >= end2 || end1 <= start2) {\n        return \"NO\";\n    }\n\n    let length = end2 - start2;\n    return (Math.pow(length, 2) === length)? \"YES\" : \"NO\";\n};\n\nlet test_cases = [\n    [(-1, 1), (0, 4)],\n    [(-3, -1), (-5, 5)],\n    [(-3, -1), (2, 4)]\n];\n\nlet test_results = [\n    \"NO\",\n    \"NO\",\n    \"YES\"\n];\n\nfor (let i = 0; i < test_cases.length; i++) {\n    console.log(overlap(test_cases[i][0], test_cases[i][1]));\n    if (test_results[i] === \"YES\") {\n        console.log(`overlap(${test_cases[i][0]}, ${test_cases[i][1]}) = ${test_results[i]}`);\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  const signs = arr.reduce((acc, num) => {\n    const sign = num > 0? 1 : num < 0? -1 : 0;\n    return acc + sign;\n  }, 0);\n\n  return Math.abs(signs) * Math.pow(Math.abs(signs), arr.length);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const N = grid.length;\n  let prev = [];\n  let dp = [];\n\n  // find the dp array\n  for (let i = 0; i < N; i++) {\n    dp[i] = [grid[i][0]];\n    for (let j = 1; j < N; j++) {\n      const [prev1, prev2] = prev;\n      const [next1, next2] = grid[i][j];\n      const cost = prev1 + prev2 + next1 + next2;\n      if (cost < k) {\n        dp[i].push(cost);\n      }\n    }\n  }\n\n  // find the path\n  let min = dp[0][0];\n  let minIdx = 0;\n  for (let i = 1; i < N; i++) {\n    if (dp[i][0] < min) {\n      min = dp[i][0];\n      minIdx = i;\n    }\n  }\n\n  prev = [minIdx, minIdx];\n  for (let i = 0; i < N; i++) {\n    if (prev[1]!= i) {\n      prev.push(i);\n      min = dp[prev[1]][minIdx];\n      minIdx = i;\n    }\n  }\n\n  return dp[minIdx];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if(n === 0) {\n    return [1];\n  } else if(n === 1) {\n    return [3];\n  } else if(n === 2) {\n    return [1, 3, 2, 8];\n  } else {\n    return [1, 3, 2, tri(n - 1), tri(n - 2), tri(n + 1)];\n  }\n};\n\nconst tri2 = (n) => {\n  if(n === 0) {\n    return [1];\n  } else if(n === 1) {\n    return [3];\n  } else if(n === 2) {\n    return [1, 3, 2];\n  } else {\n    return [1, 3, 2, tri2(n - 1), tri2(n - 2), tri2(n + 1)];\n  }\n};\n\nconst tri3 = (n) => {\n  if(n === 0) {\n    return [1];\n  } else if(n === 1) {\n    return [3];\n  } else if(n === 2) {\n    return [1, 3, 2];\n  } else {\n    return [1, 3, 2, tri3(n - 1), tri3(n - 2), tri3(n + 1)];\n  }\n};\n\nconst testTri = (n, expected) => {\n  const actual = tri(n);\n  if(actual.length === expected.length) {\n    actual.forEach((val, i) => {\n      if(val!== expected[i]) {\n        return false;\n      }\n    });\n    return true;\n  }\n  return false;\n};\n\nconst testTri2 = (n, expected) => {\n  const actual = tri2(n);\n  if(actual.length === expected.length) {\n    actual.forEach((val, i) => {\n      if(val!== expected[i]) {\n        return false;\n      }\n    });\n    return true;\n  }\n  return false;\n};\n\nconst testTri3 = (n, expected) => {\n  const actual = tri3(n);\n  if(actual.length === expected.length) {\n    actual.forEach((val, i) => {\n      if(val!== expected[i]) {\n        return false;\n      }\n    });\n    return true;\n  }\n  return false;\n};\n\nconst testAll = () => {\n  const n = 8;\n  const expected = [1, 3, 2, 8, 5, 13, 11, 19];\n  if(testTri(n, expected)) {\n    console.log('tri(' + n + ') ='+ expected.join(' '));\n  } else {\n    console.log('tri(' + n + ') ='+ expected.join(' '));\n    console.log('FAILED');\n  }\n\n  if(testTri2(n, expected)) {\n    console.log('tri2(' + n + ') ='+ expected.join(' '));\n  } else {\n    console.log('tri2(' + n + ') ='+ expected.join(' '));\n    console.log('FAILED');\n  }\n\n  if(testTri3(n, expected)) {\n    console.log('tri3(' + n + ') ='+ expected.join(' '));\n  } else {\n    console.log('tri3(' + n + ') ='+ expected.join(' '));\n    console.log('FAILED');\n  }\n};\n\ntestAll();<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  if (n == 0) return 1\n  return n % 2 == 1? n : 0\n}\n\nconst digitSum = (n) => {\n  const a = n % 10\n  const b = n % 100\n  return (a * digit(b) + b * digitSum(n / b))\n}\n\nconst result = (n) => {\n  return (digitSum(n) + n * n)\n}\n\nconsole.log(digit(1))\nconsole.log(digit(2))\nconsole.log(digit(3))\nconsole.log(digit(4))\nconsole.log(digit(5))\nconsole.log(digit(6))\nconsole.log(digit(7))\nconsole.log(digit(8))\nconsole.log(digit(9))\nconsole.log(digit(10))\nconsole.log(digit(11))\nconsole.log(digit(12))\nconsole.log(digit(13))\nconsole.log(digit(14))\nconsole.log(digit(15))\nconsole.log(digit(16))\nconsole.log(digit(17))\nconsole.log(digit(18))\nconsole.log(digit(19))\nconsole.log(digit(20))\nconsole.log(digit(21))\nconsole.log(digit(22))\nconsole.log(digit(23))\nconsole.log(digit(24))\nconsole.log(digit(25))\nconsole.log(digit(26))\nconsole.log(digit(27))\nconsole.log(digit(28))\nconsole.log(digit(29))\nconsole.log(digit(30))\nconsole.log(digit(31))\nconsole.log(digit(32))\nconsole.log(digit(33))\nconsole.log(digit(34))\nconsole.log(digit(35))\nconsole.log(digit(36))\nconsole.log(digit(37))\nconsole.log(digit(38))\nconsole.log(digit(39))\nconsole.log(digit(40))\nconsole.log(digit(41))\nconsole.log(digit(42))\nconsole.log(digit(43))\nconsole.log(digit(44))\nconsole.log(digit(45))\nconsole.log(digit(46))\nconsole.log(digit(47))\nconsole.log(digit(48))\nconsole.log(digit(49))\nconsole.log(digit(50))\nconsole.log(digit(51))\nconsole.log(digit(52))\nconsole.log(digit(53))\nconsole.log(digit(54))\nconsole.log(digit(55))\nconsole.log(digit(56))\nconsole.log(digit(57))\nconsole.log(digit(58))\nconsole.log(digit(59))\nconsole.log(digit(60))\nconsole.log(digit(61))\nconsole.log(digit(62))\nconsole.log(digit(63))\nconsole.log(digit(64))\nconsole.log(digit(65))\nconsole.log(digit(66))\nconsole.log(digit(67))\nconsole.log(digit(68))\nconsole.log(digit(69))\nconsole.log(digit(70))\nconsole.log(digit(71))\nconsole.log(digit(72))\nconsole.log(digit(73))\nconsole.log(digit(74))\nconsole.log(digit(75))\nconsole.log(digit(76))\nconsole.log(digit(77))\nconsole.log(digit(78))\nconsole.log(digit(79))\nconsole.log(digit(80))\nconsole.log(digit(81))\nconsole.log(digit(82))\nconsole.log(digit(83))\nconsole.log(digit(84))\nconsole.log(digit(85))\nconsole.log(digit(86))\nconsole.log(digit(87))\nconsole.log(digit(88))\nconsole.log(digit(89))\nconsole.log(digit(90))\nconsole.log(digit(91))\nconsole.log(digit(92))\nconsole.log(digit(93))\nconsole.log(digit(94))\nconsole.log(digit(95))\nconsole.log(digit(96))\nconsole.log(digit(97))\nconsole.log(digit(98))\nconsole.log(digit(99))\nconsole.log(digit(100))\nconsole.log(digit(101))\nconsole.log(digit(102))\nconsole.log(digit(103))\nconsole.log(digit(104))\nconsole.log(digit(105))\nconsole.log(digit(106))\nconsole.log(digit(107))\nconsole.log(digit(108))\nconsole.log(digit(109))\nconsole.log(digit(110))\nconsole.log(digit(111))\nconsole.log(digit(112))\nconsole.log(digit(113))\nconsole.log(digit(114))\nconsole.log(digit(115))\nconsole.log(digit(116))\nconsole.log(digit(117))\nconsole.log(digit(118))\nconsole.log(digit(119))\nconsole.log(digit(120))\nconsole.log(digit(121))\nconsole.log(digit(122))\nconsole.log(digit(123))\nconsole.log(digit(124))\nconsole.log(digit(125))\nconsole.log(digit(126))\nconsole.log(digit(127))\nconsole.log(digit(128))\nconsole.log(digit(129))\nconsole.log(digit(130))\nconsole.log(digit(131))\nconsole.log(digit(132))\nconsole.log(digit(133))\nconsole.log(digit(134))\nconsole.log(digit(135))\nconsole.log(digit(136))\nconsole.log(digit(137))\nconsole.log(digit(138))\nconsole.log(digit(139))\nconsole.log(digit(140))\nconsole.log(digit(141))\nconsole.log(digit(142))\nconsole.log(digit(143))\nconsole.log(digit(144))\nconsole.log(digit(145))\nconsole.log(digit(146))\nconsole.log(digit(147))\nconsole.log(digit(148))\nconsole.log(digit(149))\nconsole.log(digit(150))\nconsole.log(digit(151))\nconsole.log(digit(152))"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  return string.reduce((previous, current, index) => {\n    if (previous === current) {\n      return previous;\n    } else if (index === 0) {\n      return current;\n    }\n    return previous;\n  }, false);\n};\n\nconsole.log(isNest('[[]]'));\nconsole.log(isNest('[]]]]]]][[[[[]'));\nconsole.log(isNest('[][]'));\nconsole.log(isNest('[]'));\nconsole.log(isNest('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let squares = []\n  for (let i = 0; i < lst.length; i++) {\n    let val = Math.round(lst[i] * 10) / 10\n    squares.push(val * val)\n  }\n  return squares.reduce((a, b) => a + b)\n}\n\nconst test = summarizeSquare([1, 2, 3, 4, 5, 6])\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  return txt.split(' ').reduce((prev, curr, index) => {\n    if(isALetter(curr) && index === txt.length - 1) {\n      return prev;\n    }\n    return prev && curr.length >= 2;\n  }, false);\n};\n\n// Determines if a word contains a certain character\nconst containsChar = (txt, char) => {\n  return txt.indexOf(char)!== -1;\n};\n\nconst getNumberOfLetters = (txt) => {\n  return txt.split(' ').reduce((prev, curr, index) => {\n    if(isALetter(curr)) {\n      return prev + 1;\n    }\n    return prev;\n  }, 0);\n};\n\n/*\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ true\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ false\n*/\nconst determineIfConcludingCharConstituteALetter2 = (txt) => {\n  return txt.split(' ').reduce((prev, curr, index) => {\n    if(isALetter(curr) && index === txt.length - 1) {\n      return prev;\n    }\n    return prev && curr.length >= 2;\n  }, false);\n};\n\n/*\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ true\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ false\n*/\nconst determineIfConcludingCharConstituteALetter3 = (txt) => {\n  return txt.split(' ').reduce((prev, curr, index) => {\n    if(isALetter(curr) && index === txt.length - 1) {\n      return prev;\n    }\n    return prev && curr.length >= 2 && curr.length <= 3;\n  }, false);\n};\n\n/*\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ true\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ false\n*/\nconst determineIfConcludingCharConstituteALetter4 = (txt) => {\n  return txt.split(' ').reduce((prev, curr, index) => {\n    if(isALetter(curr) && index === txt.length - 1) {\n      return prev;\n    }\n    return prev && curr.length >= 2 && curr.length <= 3 && curr.length % 2 === 1;\n  }, false);\n};\n\n/*\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ true\n*/\nconst determineIfConcludingCharConstituteALetter5 = (txt) => {\n  return txt.split(' ').reduce((prev, curr, index) => {\n    if(isALetter(curr) && index === txt.length - 1) {\n      return prev;\n    }\n    return prev && curr.length >= 2 && curr.length <= 3 && curr.length % 2 === 0;\n  }, false);\n};\n\n// Determines if the given word is all alphabetical characters\nconst isALetter = (txt) => {\n  return txt.match(/^[a-zA-Z]+$/);\n};\n\n/*\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ true\n*/\nconst determineIfConcludingCharConstituteALetter6 = (txt) => {\n  return txt.split(' ').reduce((prev, curr, index) => {\n    if(isALetter(curr) && index === txt.length - 1) {\n      return prev;\n    }\n    return prev && curr.length === 1;\n  }, false);\n};\n\n/*\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ true\n  determineIfConcludingCharConstituteALetter(\"abc def gh i k \") ➞ false\n*/\nconst determineIfConcludingCharConstituteALetter7 = (txt) => {\n  return txt.split(' ').reduce((prev, curr, index) => {\n    if(isALetter(curr) && index === txt.length - 1) {\n      return prev;\n    }\n    return prev && curr.length === 1 && index % 2 === 0;\n  }, false);\n};\n\n// Determines if the given word contains only capital letters\nconst isCapitalized = (txt) => {\n  return txt.match(/^[A-Z]+$/);\n};\n\n// Determines if the given word is a consonant\nconst isConsonant = (txt) => {\n  return txt.match(/^[BCDFGHJKLM"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  let index = -1\n  while (low < high) {\n    const mid = (low + high) >>> 1\n    const elem = arr[mid]\n    if (elem > arr[mid - 1]) {\n      index = mid\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return index\n}\n\n/*\n  Create a function which returns the largest element which is less than\n  or equal to the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage2 = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  let index = -1\n  while (low < high) {\n    const mid = (low + high) >>> 1\n    const elem = arr[mid]\n    if (elem > arr[mid - 1]) {\n      index = mid\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return index\n}\n\n/*\n  Create a function which returns the largest element which is less than\n  or equal to the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage3 = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  let index = -1\n  while (low < high) {\n    const mid = (low + high) >>> 1\n    const elem = arr[mid]\n    if (elem > arr[mid - 1]) {\n      index = mid\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return index\n}\n\n/*\n  Create a function which returns the largest element which is less than\n  or equal to the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage4 = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  let index = -1\n  while (low < high) {\n    const mid = (low + high) >>> 1\n    const elem = arr[mid]\n    if (elem < arr[mid - 1]) {\n      index = mid\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return index\n}\n\n/*\n  Create a function which returns the largest element which is less than\n  or equal to the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage5 = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  let index = -1\n  while (low < high) {\n    const mid = (low + high) >>> 1\n    const elem = arr[mid]\n    if (elem < arr[mid - 1]) {\n      index = mid\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return index\n}\n\n/*\n  Create a function which returns the largest element which is less than\n  or equal to the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage6 = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  let index = -1\n  while (low < high) {\n    const mid = (low + high) >>> 1\n    const elem = arr[mid]\n    if (elem < arr[mid - 1]) {\n      index = mid\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return index\n}\n\nconst canStage7 = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  let index = -1\n  while (low < high) {\n    const mid = (low + high) >>> 1\n    const elem = arr[mid]\n    if (elem < arr[mid - 1]) {\n      index = mid\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return index\n}\n\nconst canStage8 = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  let index = -1\n  while (low < high) {\n    const mid = (low + high) >>> 1\n    const elem = arr[mid]\n    if (elem < arr[mid - 1]) {\n      index = mid\n      high = mid - 1\n    } else {\n      low = mid + 1\n    }\n  }\n  return index\n}\n\nconst canStage9 = (arr) => {\n  const n = arr.length\n  let low = 0\n  let high = n - 1\n  "}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  const sorted = lst.sort();\n  const [left, right] = [0, 0];\n  for (let i = 0; i < sorted.length; i++) {\n    const x = sorted[i];\n    if (x < 0) {\n      if (left === 0) {\n        left = x;\n      }\n      else {\n        right = x;\n        break;\n      }\n    }\n    else {\n      if (right === 0) {\n        right = x;\n      }\n      else {\n        left = x;\n        break;\n      }\n    }\n  }\n  return [left, right];\n};\n\nconsole.log(\n  bigSmallIntegers([2, 4, 1, 3, 5, 7])\n);\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  const typeA = typeof a;\n  const typeB = typeof b;\n\n  if (typeA === typeB) {\n    if (a === b) {\n      return null;\n    }\n\n    if (typeA ==='string') {\n      return a > b? b : a;\n    }\n\n    return a > b? a : b;\n  }\n\n  if (typeA === 'number' && typeB ==='string') {\n    return a > b? b : a;\n  }\n\n  if (typeA ==='string' && typeB === 'number') {\n    return a > b? a : b;\n  }\n\n  return null;\n};\n\nconsole.log(compareOne(1, 2.5));\nconsole.log(compareOne(1, '2,3'));\nconsole.log(compareOne('5,1', '6'));\nconsole.log(compareOne('1', 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  return (\n    Array(n).every((x) => x % 2 === 0 && x > 0) &&\n    Math.floor(n / 2) % 2 === 0\n  );\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isAdequateToSumEven(5) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(7) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  return (\n    Array(n).every((x) => x % 2 === 0 && x > 0) &&\n    Math.floor(n / 2) % 2 === 0 &&\n    isAdequateToSumEven(Math.floor(n / 2))\n  );\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  isAdequateToSumEven(7) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  return (\n    Array(n).every((x) => x % 2 === 0 && x > 0) &&\n    Math.floor(n / 2) % 2 === 0 &&\n    isAdequateToSumEven(Math.floor(n / 2)) &&\n    isAdequateToSumEven(Math.floor(n / 4)) &&\n    isAdequateToSumEven(Math.floor(n / 3))\n  );\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n  Example\n  isAdequateToSumEven(9) == true\n  isAdequateToSumEven(10) == true\n  isAdequateToSumEven(11) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  return (\n    Array(n).every((x) => x % 2 === 0 && x > 0) &&\n    Math.floor(n / 2) % 2 === 0 &&\n    isAdequateToSumEven(Math.floor(n / 2)) &&\n    isAdequateToSumEven(Math.floor(n / 4)) &&\n    isAdequateToSumEven(Math.floor(n / 3)) &&\n    isAdequateToSumEven(Math.floor(n / 6)) &&\n    isAdequateToSumEven(Math.floor(n / 5))\n  );\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 11 positive even numbers\n  Example\n  isAdequateToSumEven(11) == false\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  return (\n    Array(n).every((x) => x % 2 === 0 && x > 0) &&\n    Math.floor(n / 2) % 2 === 0 &&\n    isAdequateToSumEven(Math.floor(n / 2)) &&\n    isAdequateToSumEven(Math.floor(n / 4)) &&\n    isAdequateToSumEven(Math.floor(n / 3)) &&\n    isAdequateToSumEven(Math.floor(n / 6)) &&\n    isAdequateToSumEven(Math.floor(n / 5)) &&\n    isAdequateToSumEven(Math.floor(n / 7)) &&\n    isAdequateToSumEven(Math.floor(n / 9))\n  );\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 13 positive even numbers\n  Example\n  isAdequateToSumEven(13) == true\n  isAdequateToSumEven(14) == false\n  */\nconst isAdequateToSumEven = (n) => {\n  return (\n    Array(n).every((x) => x % 2 === 0 && x > 0) &&\n    Math.floor(n / 2) % 2 === 0 &&\n    isAdequateToSumEven(Math.floor(n / 2)) &&\n    isAdequateToSumEven(Math.floor(n / 4)) &&\n    isAdequateToSumEven(Math.floor(n / 3)) &&\n    isAdequateToSumEven(Math.floor(n / 6)) &&\n    isAdequateToSumEven(Math.floor(n / 5)) &&\n    isAdequateToSumEven(Math.floor(n / 7)) &&\n    isAdequateToSumEven(Math.floor(n / 9)) &&\n    isAdequateToSumEven(Math.floor(n / 11)) &&\n    isAdequateToSumEven(Math.floor(n / 13))\n  );\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 17 positive even numbers\n  Example\n  isAdequateToSumEven(17) == false\n  isAdequateToSumEven(18) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  return (\n    Array(n).every((x) => x % 2 === 0 && x > 0) &&\n    Math.floor(n / 2) % 2 === 0 &&\n    isAdequateToSumEven(Math.floor(n / 2)) &&\n    isAdequateToSumEven(Math.floor(n / 4)) &&\n    isAdequateToSumEven(Math.floor(n / 3)) &&\n    isAdequateToSumEven(Math.floor(n / 6)) &&\n    isAdequateToSumEven(Math.floor(n / 5)) &&\n    isAdequateToSumEven(Math.floor(n / 7)) &&\n    isAdequateToSumEven(Math.floor(n / 9)) &&\n    isAdequateToSumEven(Math.floor(n / 11)) &&\n    isAdequateToSumEven(Math.floor(n / 13)) &&\n    isAdequateToSumEven(Math.floor(n / 15)) &&\n    isAdequateToSumEven(Math.floor(n /"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial = factorial * i\n  }\n  return factorial\n}\n\n/*The prime factorization of a number n is defined as:\n  prime_factorization(n) = [1]*n + [2]*n +... + [n]*n\n  \n  For example:\n  >>> prime_factorization(24)\n  [2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 2, 2, 2, 3]\n\n  The function will receive an integer as input and should return the prime\n  factorization of this integer.\n  */\nconst prime_factorization = (n) => {\n  const factors = []\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return factors\n}\n\n/*The nth term of the sequence of prime numbers is defined as:\n  prime_sequence(n) = (n + 1) * (n + 2) *... * (n + n)\n  \n  For example:\n  >>> prime_sequence(4)\n  9\n\n  The function will receive an integer as input and should return the nth term\n  of the prime number sequence of this integer.\n  */\nconst prime_sequence = (n) => {\n  let p = n + 1\n  for (let i = 1; i <= n; i++) {\n    p = p * (n + i)\n  }\n  return p\n}\n\n/*The nth term of the sequence of prime numbers is defined as:\n  prime_sequence(n) = (n + 1) * (n + 2) *... * (n + n)\n  \n  For example:\n  >>> prime_sequence(4)\n  9\n\n  The function will receive an integer as input and should return the nth term\n  of the prime number sequence of this integer.\n  */\nconst getPrimeSequence = (n) => {\n  let p = n + 1\n  for (let i = 1; i <= n; i++) {\n    p = p * (n + i)\n  }\n  return p\n}\n\n/*The sum of all prime numbers below 1000 is defined as:\n  sum_of_primes(n) = 2 * (n + 1) * (n + 2) *... * (n + n)\n  \n  For example:\n  >>> sum_of_primes(1000)\n  153421\n\n  The function will receive an integer as input and should return the sum of\n  all prime numbers below the input integer.\n  */\nconst sum_of_primes = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*The sum of the primes below n is defined as:\n  sum_of_primes(n) = 2 * (n + 1) * (n + 2) *... * (n + n)\n  \n  For example:\n  >>> sum_of_primes(1000)\n  153421\n\n  The function will receive an integer as input and should return the sum of\n  all prime numbers below the input integer.\n  */\nconst sum_of_primes_by_nth_term = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*The sum of the primes below n is defined as:\n  sum_of_primes(n) = 2 * (n + 1) * (n + 2) *... * (n + n)\n  \n  For example:\n  >>> sum_of_primes(1000)\n  153421\n\n  The function will receive an integer as input and should return the sum of\n  all prime numbers below the input integer.\n  */\nconst getSumOfPrimesByNthTerm = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/* The sum of the primes below n is defined as:\n  sum_of_primes(n) = 2 * (n + 1) * (n + 2) *... * (n + n)\n  \n  For example:\n  >>> sum_of_primes(1000)\n  153421\n\n  The function will receive an integer as input and should return the sum of\n  all prime numbers below the input integer.\n  */\nconst getSumOfPrimes = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*The number of distinct prime numbers below n is defined as:\n  number_of_distinct_primes(n) = n + 1 - count_primes(n)\n  \n  For example:\n  >>> number_of_distinct_primes(1000)\n  999\n\n  The function will receive an integer as input and should return the number\n  of distinct prime numbers below the input integer.\n  */\nconst number_of_distinct_primes = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += 1\n    }\n  }\n  return n + 1 - sum\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  for (let i ="}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n    text = text.replace(/\\s+/g, '_');\n    if(text.substr(text.length-1) ==''){\n        text = text.substr(0, text.length-1);\n        text = text.substr(0, text.length-2) + '_';\n    }\n    return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  repairUnderscore(\"Example\") == \"Example\"\n  repairUnderscore(\"Example_1\") == \"Example 1\"\n  repairUnderscore(\" Example_2\") == \"Example2\"\n  repairUnderscore(\" Example   3\") == \"Example 3\"\n  */\nconst repairUnderscore = (text) => {\n    text = text.replace(/_+/g,'');\n    if(text.substr(text.length-1) == '_'){\n        text = text.substr(0, text.length-1);\n        text = text.substr(0, text.length-2) +'';\n    }\n    return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with a space, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with a dash - \n  \n  repairUnderscore(\"Example\") == \"Example\"\n  repairUnderscore(\"Example_1\") == \"Example 1\"\n  repairUnderscore(\" Example_2\") == \"Example 2\"\n  repairUnderscore(\" Example   3\") == \"Example 3\"\n  */\nconst repairDash = (text) => {\n    text = text.replace(/\\_+/g,'');\n    if(text.substr(text.length-1) == '_'){\n        text = text.substr(0, text.length-1);\n        text = text.substr(0, text.length-2) +'';\n    }\n    return text;\n}\n\n/*\n  Given a string text, replace all the dashes in it with underscores, \n  and if a string has more than 2 consecutive dashes, \n  then replace all consecutive dashes with a dash - \n  \n  repairDash(\"Example\") == \"Example\"\n  repairDash(\"Example_1\") == \"Example 1\"\n  repairDash(\" Example_2\") == \"Example 2\"\n  repairDash(\" Example   3\") == \"Example 3\"\n  */\nconst repairDash2 = (text) => {\n    text = text.replace(/\\-+/g,'');\n    if(text.substr(text.length-1) == '-'){\n        text = text.substr(0, text.length-1);\n        text = text.substr(0, text.length-2) +'';\n    }\n    return text;\n}\n\n/*\n  Given a string text, replace all the dashes in it with underscores, \n  and if a string has more than 2 consecutive dashes, \n  then replace all consecutive dashes with a dash - \n  \n  repairDash2(\"Example\") == \"Example\"\n  repairDash2(\"Example_1\") == \"Example 1\"\n  repairDash2(\" Example_2\") == \"Example 2\"\n  repairDash2(\" Example   3\") == \"Example 3\"\n  */\nconst repairDash3 = (text) => {\n    text = text.replace(/-+/g,'');\n    if(text.substr(text.length-1) == '-'){\n        text = text.substr(0, text.length-1);\n        text = text.substr(0, text.length-2) +'';\n    }\n    return text;\n}\n\nmodule.exports = {\n    repairSpace,\n    repairUnderscore,\n    repairDash,\n    repairDash2,\n    repairDash3\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  return /^([a-zA-Z][a-zA-Z0-9_]*\\.[a-zA-Z][a-zA-Z0-9_\\.]*)(?=\\.[a-zA-Z0-9_\\.]*$)/.test(file_name)\n}\n\nconst fileNameRegex = /^([a-zA-Z][a-zA-Z0-9_]*\\.[a-zA-Z][a-zA-Z0-9_\\.]*)(?=\\.[a-zA-Z0-9_\\.]*$)/.test\n\nconst validate = (file_name, file_size, file_type) => {\n  if(file_type == 'pdf' && file_size < 10) {\n    return 'You must upload a pdf file with a size of at least 10 KB'\n  }\n  else if(file_type == 'doc' && file_size < 20) {\n    return 'You must upload a document file with a size of at least 20 KB'\n  }\n  else if(file_type == 'xls' && file_size < 30) {\n    return 'You must upload a spreadsheet file with a size of at least 30 KB'\n  }\n  else if(file_type == 'ppt' && file_size < 40) {\n    return 'You must upload a presentation file with a size of at least 40 KB'\n  }\n  else if(file_type == 'docx' && file_size < 50) {\n    return 'You must upload a document file with a size of at least 50 KB'\n  }\n  else if(file_type == 'xlsx' && file_size < 60) {\n    return 'You must upload a spreadsheet file with a size of at least 60 KB'\n  }\n  else if(file_type == 'pptx' && file_size < 70) {\n    return 'You must upload a presentation file with a size of at least 70 KB'\n  }\n  else if(file_type == 'zip' && file_size < 70) {\n    return 'You must upload a zip file with a size of at least 70 KB'\n  }\n  else if(file_type == 'pdf' && file_name == '') {\n    return 'You must upload a pdf file'\n  }\n  else if(file_type == 'doc' && file_name == '') {\n    return 'You must upload a document file'\n  }\n  else if(file_type == 'xls' && file_name == '') {\n    return 'You must upload a spreadsheet file'\n  }\n  else if(file_type == 'ppt' && file_name == '') {\n    return 'You must upload a presentation file'\n  }\n  else if(file_type == 'docx' && file_name == '') {\n    return 'You must upload a document file'\n  }\n  else if(file_type == 'xlsx' && file_name == '') {\n    return 'You must upload a spreadsheet file'\n  }\n  else if(file_type == 'pptx' && file_name == '') {\n    return 'You must upload a presentation file'\n  }\n  else if(file_type == 'zip' && file_name == '') {\n    return 'You must upload a zip file'\n  }\n  else if(file_type == 'pdf' &&!fileNameRegex(file_name)) {\n    return 'The filename must start with a latin alphapet letter'\n  }\n  else if(file_type == 'doc' &&!fileNameRegex(file_name)) {\n    return 'The filename must start with a latin alphapet letter'\n  }\n  else if(file_type == 'xls' &&!fileNameRegex(file_name)) {\n    return 'The filename must start with a latin alphapet letter'\n  }\n  else if(file_type == 'ppt' &&!fileNameRegex(file_name)) {\n    return 'The filename must start with a latin alphapet letter'\n  }\n  else if(file_type == 'docx' &&!fileNameRegex(file_name)) {\n    return 'The filename must start with a latin alphapet letter'\n  }\n  else if(file_type == 'xlsx' &&!fileNameRegex(file_name)) {\n    return 'The filename must start with a latin alphapet letter'\n  }\n  else if(file_type == 'pptx' &&!fileNameRegex(file_name)) {\n    return 'The filename must start with a latin alphapet letter'\n  }\n  else if(file_type == 'zip' &&!fileNameRegex(file_name)) {\n    return 'The filename must start with a latin alphapet letter'\n  }\n  else {\n    return true\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n    const list = Array.from(lst)\n    const result = 0\n    for (let i = 0; i < list.length; i++) {\n        const num = list[i]\n        if (i % 3 === 0 && i % 4 === 0) {\n            result += num * num\n        } else if (i % 3 === 0) {\n            result += num * num * num\n        } else if (i % 4 === 0) {\n            result += num * num * num * num\n        }\n    }\n    return result\n}\n\nconst test = [1,2,3,4,5,6,7,8,9,10]\nconsole.log(summarizeSquare(test))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  let words = sentence.split(\" \")\n  return words.reduce((arr, word) => {\n    let newArr = []\n    let newWord = word.toLowerCase()\n    let index = 0\n    while (index < arr.length) {\n      let char = arr[index]\n      if (newWord.indexOf(char) === -1) {\n        newArr.push(char)\n      } else {\n        break\n      }\n      index++\n    }\n    return newArr\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split('/');\n  const isInt = (x) => {\n    const num = parseInt(numerator, 10);\n    const den = parseInt(denominator, 10);\n    return num >= 0 && den >= 0 && den > 0 && num % den === 0;\n  };\n  if (isInt) {\n    return true;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const sortedNums = []\n\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const sum = num.toString(10).split('').reduce((a, b) => {\n      return a + parseInt(b, 10)\n    })\n\n    if (sum.length === 1) {\n      sortedNums.push(num)\n    } else {\n      const index = sortedNums.indexOf(sum)\n\n      if (index === -1) {\n        sortedNums.push(num)\n      } else {\n        sortedNums.splice(index, 1)\n        sortedNums.push(num)\n      }\n    }\n  }\n\n  return sortedNums\n}\n\nmodule.exports = holyOrderByPoint\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  return nums.filter((num) => {\n    return num > 10 && (num % 2 === 1 || num % 3 === 1 || num % 5 === 1 || num % 7 === 1 || num % 9 === 1);\n  });\n};\n\nconsole.log(extraFilter([15, -73, 14, -15]));\nconsole.log(extraFilter([33, -2, -3, 45, 21, 109]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n    let a = [1, 2, 3, 4, 5];\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        let j = i;\n        while (j < n) {\n            if (a[i] + a[j] + a[k] % 3 === 0) {\n                count++;\n            }\n            j++;\n        }\n    }\n    return count;\n}\n\n// let a = [1, 3, 7, 13, 21];\n// console.log(catchMaxTriples(5));\n\n// let a = [1, 2, 3, 4, 5, 6];\n// console.log(catchMaxTriples(6));\n\n// let a = [1, 2, 3, 4, 5, 6, 7];\n// console.log(catchMaxTriples(7));\n\n// let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n// console.log(catchMaxTriples(20));\n\n// let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];\n// console.log(catchMaxTriples(40));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toUpperCase()\n  const planet2Name = planet2.toUpperCase()\n  const result = []\n  if (planet1Name === \"JUPITER\" || planet1Name === \"SATURN\" || planet1Name === \"URANUS\" || planet1Name === \"NEPTUNE\") {\n    result.push(planet1Name)\n    return result\n  }\n  if (planet2Name === \"JUPITER\" || planet2Name === \"SATURN\" || planet2Name === \"URANUS\" || planet2Name === \"NEPTUNE\") {\n    result.push(planet2Name)\n    return result\n  }\n  if (planet1Name === \"MERCURY\" || planet1Name === \"VENUS\") {\n    if (planet2Name === \"MERCURY\" || planet2Name === \"VENUS\") {\n      result.push(\"MERCURY\")\n      result.push(\"VENUS\")\n      return result\n    }\n    if (planet2Name === \"JUPITER\" || planet2Name === \"SATURN\" || planet2Name === \"URANUS\" || planet2Name === \"NEPTUNE\") {\n      result.push(\"JUPITER\")\n      result.push(\"SATURN\")\n      result.push(\"URANUS\")\n      result.push(\"NEPTUNE\")\n      return result\n    }\n    if (planet2Name === \"MARS\" || planet2Name === \"JULIUS\" || planet2Name === \"AUGUSTA\" || planet2Name === \"OCCULTATION\") {\n      result.push(\"JULIUS\")\n      result.push(\"AUGUSTA\")\n      result.push(\"OCCULTATION\")\n      return result\n    }\n  }\n  if (planet1Name === \"MERCURY\" || planet1Name === \"VENUS\" || planet1Name === \"JUPITER\" || planet1Name === \"SATURN\") {\n    if (planet2Name === \"MERCURY\" || planet2Name === \"VENUS\" || planet2Name === \"JUPITER\" || planet2Name === \"SATURN\") {\n      result.push(\"MERCURY\")\n      result.push(\"VENUS\")\n      result.push(\"JUPITER\")\n      result.push(\"SATURN\")\n      return result\n    }\n    if (planet2Name === \"MARS\" || planet2Name === \"JULIUS\" || planet2Name === \"AUGUSTA\" || planet2Name === \"OCCULTATION\") {\n      result.push(\"MARS\")\n      result.push(\"JULIUS\")\n      result.push(\"AUGUSTA\")\n      result.push(\"OCCULTATION\")\n      return result\n    }\n  }\n  if (planet1Name === \"MARS\" || planet1Name === \"JULIUS\" || planet1Name === \"AUGUSTA\" || planet1Name === \"OCCULTATION\") {\n    if (planet2Name === \"MARS\" || planet2Name === \"JULIUS\" || planet2Name === \"AUGUSTA\" || planet2Name === \"OCCULTATION\") {\n      result.push(\"MARS\")\n      result.push(\"JULIUS\")\n      result.push(\"AUGUSTA\")\n      result.push(\"OCCULTATION\")\n      return result\n    }\n    if (planet2Name === \"MERCURY\" || planet2Name === \"VENUS\" || planet2Name === \"JUPITER\" || planet2Name === \"SATURN\") {\n      result.push(\"MERCURY\")\n      result.push(\"VENUS\")\n      result.push(\"JUPITER\")\n      result.push(\"SATURN\")\n      return result\n    }\n  }\n  if (planet1Name === \"MARS\" || planet1Name === \"JULIUS\" || planet1Name === \"AUGUSTA\" || planet1Name === \"OCCULTATION\") {\n    if (planet2Name === \"MERCURY\" || planet2Name === \"VENUS\" || planet2Name === \"JUPITER\" || planet2Name === \"SATURN\") {\n      result.push(\"MERCURY\")\n      result.push(\"VENUS\")\n      result.push(\"JUPITER\")\n      result.push(\"SATURN\")\n      return result\n    }\n    if (planet2Name === \"MARS\" || planet2Name === \"JULIUS\" || planet2Name === \"AUGUSTA\" || planet2Name === \"OCCULTATION\") {\n      result.push(\"MARS\")\n      result.push(\"JULIUS\")\n      result.push(\"AUGUSTA\")\n      result.push(\"OCCULTATION\")\n      return result\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const sum = () => {\n    const result = [];\n    for (let i = 0; i < lst.length; i += 2) {\n      const [l, r] = lst[i].split(\" \");\n      const [l1, r1] = lst[i + 1].split(\" \");\n      if (l === r && l1 === r1) {\n        continue;\n      }\n      if (l < r) {\n        result.push(`${l}${r}`);\n      } else {\n        result.push(`${r}${l}`);\n      }\n    }\n    return result.sort((a, b) => {\n      if (a < b) {\n        return -1;\n      }\n      if (a > b) {\n        return 1;\n      }\n      return 0;\n    });\n  };\n  return sum(lst);\n};\nconsole.log(screenTiltSum([\n  \"aa\",\n  \"a\",\n  \"aaa\",\n  \"ab\",\n  \"a\",\n  \"b\",\n  \"cd\"\n]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconsole.log(xOrYttrium(7, 34, 12))\nconsole.log(xOrYttrium(15, 8, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  const doubleList = lst.map(x => x * x)\n  const sum = sumList(doubleList)\n  return sum\n}\n\nexport default doubleTheDeviation\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const game = [...game].sort((a, b) => a - b)\n  const guess = [...guess].sort((a, b) => a - b)\n  const diff = [0, 0, 0, 0, 0, 0]\n  let i = 0\n  let j = 0\n  let x = 0\n  const len = game.length\n  while (i < len && j < len) {\n    if (game[i] === guess[j]) {\n      diff[x] = 0\n      i++\n      j++\n    } else {\n      if (game[i] < guess[j]) {\n        diff[x] = game[i] - guess[j]\n        i++\n      } else {\n        diff[x] = guess[j] - game[i]\n        j++\n      }\n    }\n    x++\n  }\n  return diff\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  extensions = extensions.sort((a, b) => a.toUpperCase().length - b.toUpperCase().length)\n  return class_name.split('.').join(`.${extensions[0]}`)\n}\n\n/*\n  This function will return the full name of the class given the name of the\n  class and the list of extensions.\n  It is assumed that the class exists.\n  For example, given class_name 'Slices' and extensions ['SErviNGSliCes', 'Cheese', 'StuFfed']\n  the function will return 'Slices.SErviNGSliCes.Cheese.StuFfed'\n  Example:\n  for class_name('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes.Cheese.StuFfed'\n  */\nconst fullName = (class_name, extensions) => {\n  extensions = extensions.sort((a, b) => a.toUpperCase().length - b.toUpperCase().length)\n  return class_name.split('.').concat(extensions).join('.')\n}\n\nmodule.exports = {\n  hardExtension,\n  fullName,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  if (a === b) return true\n  const d = new Set(b)\n  for (let i = 0; i < a.length; i++) {\n    const x = a[i]\n    if (d.has(x) || d.has(x.toUpperCase())) return true\n    if (x === x.toUpperCase()) {\n      const c = a.slice(0, i + 1)\n      if (cycpatternCheck(c, b)) return true\n    }\n  }\n  return false\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"))\nconsole.log(cycpatternCheck(\"hello\",\"ell\"))\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"))\nconsole.log(cycpatternCheck(\"abab\",\"baa\"))\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"))\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"))\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    }\n    num = num / 2;\n  }\n  return [count, num];\n};\n\nconsole.log(evenOddCount(12)); // => (1, 2)\nconsole.log(evenOddCount(123)); // => (1, 2)\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = []\n  for (let i = 1; i <= number; i++) {\n    let digit = number - i\n    switch (digit) {\n      case 1:\n        result.push('I')\n        break\n      case 2:\n        result.push('II')\n        break\n      case 3:\n        result.push('III')\n        break\n      case 4:\n        result.push('IV')\n        break\n      case 5:\n        result.push('V')\n        break\n      case 6:\n        result.push('VI')\n        break\n      case 7:\n        result.push('VII')\n        break\n      case 8:\n        result.push('VIII')\n        break\n      case 9:\n        result.push('IX')\n        break\n      case 10:\n        result.push('X')\n        break\n    }\n  }\n  return result.join('').toLowerCase()\n}\n\nconsole.log(intToMiniRoman(19))\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n    return a + b > c && a + c > b && b + c > a;\n};\n\n/*\n Given the length of a segment and the length of the other segment, return true if\n  the two segments intersect, false otherwise.\n  Example:\n  segmentsIntersect(2, 3, 4) == true\n  segmentsIntersect(1, 3, 4) == false\n  segmentsIntersect(1, 2, 3) == false\n  segmentsIntersect(3, 2, 4) == false\n  segmentsIntersect(4, 2, 3) == false\n  */\nconst segmentsIntersect = (segmentLength1, segmentLength2, segmentLength3) => {\n    return segmentLength1 + segmentLength2 > segmentLength3 && segmentLength2 + segmentLength3 > segmentLength1 && segmentLength3 + segmentLength1 > segmentLength2;\n};\n\nconst main = () => {\n    const [lengthOfTriangle1, lengthOfTriangle2, lengthOfTriangle3] = [3, 4, 5];\n\n    console.log(goodSlantTriangle(lengthOfTriangle1, lengthOfTriangle2, lengthOfTriangle3));\n    console.log(segmentsIntersect(lengthOfTriangle1, lengthOfTriangle2, lengthOfTriangle3));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  if (!words || words.length === 0) {\n    return \"\";\n  }\n\n  let maxLength = 0;\n  let maxUnique = \"\";\n  let uniqueCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let uniqueChars = words[i].split('').filter((x, index) => {\n      return index === i;\n    }).length;\n    if (uniqueChars > maxLength) {\n      maxLength = uniqueChars;\n      maxUnique = words[i];\n      uniqueCount = 1;\n    } else if (uniqueChars === maxLength) {\n      uniqueCount++;\n    }\n  }\n  return uniqueCount === 1? maxUnique : receiveMax(words.slice(0, words.indexOf(maxUnique)).concat(words.slice(words.indexOf(maxUnique) + 1)));\n};\n\nconsole.log(receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]));\nconsole.log(receiveMax([\"name\", \"of\", \"string\"]));\nconsole.log(receiveMax([\"name\", \"enam\", \"game\"]));<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  if (number < need) {\n    return [0, need - number];\n  } else {\n    return [need, number - need];\n  }\n}\n\nconsole.log(feed(5, 6, 10));\nconsole.log(feed(4, 8, 9));\nconsole.log(feed(1, 10, 10));\nconsole.log(feed(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const opLength = operator.length\n  const operandLength = operand.length\n  let result = 0\n  for (let i = 0; i < opLength; i++) {\n    result += operator[i][0] * operand[i]\n    if (operator[i][1] === '*') {\n      result *= operand[i + 1]\n    }\n    if (operator[i][1] === '-') {\n      result -= operand[i + 1]\n    }\n    if (operator[i][1] === '/') {\n      result /= operand[i + 1]\n    }\n    if (operator[i][1] === '**') {\n      result = Math.pow(result, operand[i + 1])\n    }\n  }\n  return result\n}\n\nconsole.log(sufficeAlgebra([2, 3, 4, 5], [1, 2, 3, 4, 5])) // => 9\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra2 = (operator, operand) => {\n  const opLength = operator.length\n  const operandLength = operand.length\n  let result = 0\n  for (let i = 0; i < opLength; i++) {\n    result += operator[i][0] * operand[i]\n    if (operator[i][1] === '*') {\n      result *= operand[i + 1]\n    }\n    if (operator[i][1] === '-') {\n      result -= operand[i + 1]\n    }\n    if (operator[i][1] === '/') {\n      result /= operand[i + 1]\n    }\n    if (operator[i][1] === '**') {\n      result = Math.pow(result, operand[i + 1])\n    }\n  }\n  return result\n}\n\nconsole.log(sufficeAlgebra2([2, 3, 4, 5], [1, 2, 3, 4, 5])) // => 9\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let x = s.split('').reverse().join('');\n  return x.toLowerCase();\n}\n\nconst test = resolve(\"ab\");\n\nconsole.log(test);<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst stringToSha1 = (text) => {\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\nconst stringToSha256 = (text) => {\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\nconst stringToSha512 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n  stringToSha512,\n  bowedStringedInstrumentToMd5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const res = [];\n  for (let i = a; i <= b; i++) {\n    res.push(i);\n  }\n  return res;\n};\n\ndescribe('renderInteger', () => {\n  it('should render a positive integer', () => {\n    expect(renderInteger(2, 8)).toEqual([2, 4, 6, 8]);\n  });\n  it('should render a negative integer', () => {\n    expect(renderInteger(-1, -3)).toEqual([-1, -2, -3]);\n  });\n  it('should render an empty array', () => {\n    expect(renderInteger(5, 4)).toEqual([]);\n  });\n});\n\ndescribe('isInteger', () => {\n  it('should check if an integer is valid', () => {\n    expect(isInteger(12)).toBe(true);\n    expect(isInteger(23)).toBe(true);\n    expect(isInteger(34)).toBe(false);\n    expect(isInteger(-1)).toBe(false);\n    expect(isInteger(12.34)).toBe(false);\n  });\n});\n\ndescribe('sumInteger', () => {\n  it('should sum a positive integer', () => {\n    expect(sumInteger(3, 4)).toEqual(9);\n  });\n  it('should sum a negative integer', () => {\n    expect(sumInteger(-2, -4)).toEqual(-8);\n  });\n  it('should sum an empty array', () => {\n    expect(sumInteger(3, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1)).toEqual(0);\n  });\n});\n\ndescribe('removeEvenDigits', () => {\n  it('should remove all even digits', () => {\n    expect(removeEvenDigits(12)).toEqual(8);\n    expect(removeEvenDigits(23)).toEqual(12);\n    expect(removeEvenDigits(34)).toEqual(34);\n    expect(removeEvenDigits(-1)).toEqual(-1);\n    expect(removeEvenDigits(12.34)).toEqual(12.34);\n  });\n});\n<|endoftext|>"}
