{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  return numbers.reduce((prev, current) => {\n    const prevDiff = prev - current;\n    const currentDiff = current - prev;\n    const isCloserThanThreshold = Math.abs(prevDiff) < Math.abs(currentDiff);\n    return isCloserThanThreshold;\n  }, false);\n};\n\nexport {hasCloselEements};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const regex = /\\(([^()]*)\\)/g\n  const groups = paren_string.match(regex)\n\n  let result = []\n  let temp = []\n\n  if(groups === null) {\n    return result\n  }\n\n  groups.forEach(group => {\n    const braces = group.match(/\\(([^()]*)\\)/g)\n\n    braces.forEach(brac => {\n      const braces_brac = brac.match(/\\(([^()]*)\\)/g)\n      const nested_braces = braces_brac.filter(nested => nested[0] === '(' && nested[1] === ')')\n      const nested_braces_2 = braces_brac.filter(nested => nested[0] === '(' && nested[1] === '(' && nested[2] === ')')\n      const nested_braces_3 = braces_brac.filter(nested => nested[0] === '(' && nested[1] === '(' && nested[2] === '(')\n      const nested_braces_4 = braces_brac.filter(nested => nested[0] === '(' && nested[1] === '(' && nested[2] === ')')\n\n      if(nested_braces.length > 0) {\n        const nested_paren_string = nested_braces.join('')\n        temp.push(nested_paren_string)\n      } else if(nested_braces_2.length > 0) {\n        const nested_paren_string_2 = nested_braces_2.join('')\n        temp.push(nested_paren_string_2)\n      } else if(nested_braces_3.length > 0) {\n        const nested_paren_string_3 = nested_braces_3.join('')\n        temp.push(nested_paren_string_3)\n      } else if(nested_braces_4.length > 0) {\n        const nested_paren_string_4 = nested_braces_4.join('')\n        temp.push(nested_paren_string_4)\n      }\n    })\n\n    const nested_paren_string = temp.join('')\n    temp = []\n\n    const regex_2 = /\\(([^()]*)\\)/g\n    const groups_2 = nested_paren_string.match(regex_2)\n\n    if(groups_2 === null) {\n      return result\n    }\n\n    groups_2.forEach(group => {\n      const braces = group.match(/\\(([^()]*)\\)/g)\n\n      braces.forEach(brac => {\n        const braces_brac = brac.match(/\\(([^()]*)\\)/g)\n        const nested_braces = braces_brac.filter(nested => nested[0] === '(' && nested[1] === ')')\n        const nested_braces_2 = braces_brac.filter(nested => nested[0] === '(' && nested[1] === '(' && nested[2] === ')')\n        const nested_braces_3 = braces_brac.filter(nested => nested[0] === '(' && nested[1] === '(' && nested[2] === '(')\n        const nested_braces_4 = braces_brac.filter(nested => nested[0] === '(' && nested[1] === '(' && nested[2] === ')')\n\n        if(nested_braces.length > 0) {\n          const nested_paren_string = nested_braces.join('')\n          temp.push(nested_paren_string)\n        } else if(nested_braces_2.length > 0) {\n          const nested_paren_string_2 = nested_braces_2.join('')\n          temp.push(nested_paren_string_2)\n        } else if(nested_braces_3.length > 0) {\n          const nested_paren_string_3 = nested_braces_3.join('')\n          temp.push(nested_paren_string_3)\n        } else if(nested_braces_4.length > 0) {\n          const nested_paren_string_4 = nested_braces_4.join('')\n          temp.push(nested_paren_string_4)\n        }\n      })\n    })\n\n    result.push(temp.join(''))\n    temp = []\n  })\n\n  return result\n}\n\nmodule.exports = separateParenGrousp\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const isInteger = (number) => number % 1 === 0\n  const integerPart = number.toFixed().split('.')[0]\n  if (isInteger(number)) {\n    return integerPart\n  } else {\n    const decimalPart = number.toFixed().split('.')[1]\n    return decimalPart\n  }\n}\n\n/**\n  Given a decimal number (in the form of a string) and the minimum and maximum\n  decimal numbers, it can be adjusted so that the decimal number is within\n  the bounds.\n\n  Return the adjusted decimal number.\n  >>> adjustDecimal(3.5, 0, 5)\n  3.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n  >>> adjustDecimal(3.5, -1, -5)\n  2.5\n"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  const {\n    deposit,\n    withdraw,\n  } = operations;\n\n  const balance = 0;\n\n  for (let i = 0; i < operations.length; i += 1) {\n    if (balance < 0) {\n      return true;\n    }\n\n    balance = deposit(balance) - withdraw(balance);\n  }\n\n  return false;\n};\n\nexport default belowZeor;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const sum = sum(numbers);\n    return Math.abs(sum - mean);\n  }\n  const mad = mean(deviation(numbers));\n  return mad;\n}\n\n/* For a given list of input numbers, calculate standard deviation\n  around the mean of this dataset.\n  Standard Deviation is the average of the squares of the differences\n  between each element and a centerpoint (mean in this case):\n  Std = (sum of squares of differences) - (2 * mean * sum)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  return Math.sqrt(sumOfSquares - Math.pow(2 * mean, 2));\n}\n\n/* For a given list of input numbers, calculate the skewness\n  around the mean of this dataset.\n  Skewness is the average of the third order of the differences\n  between each element and a centerpoint (mean in this case):\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  0.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  const sumOfProducts = sumOfProducts(numbers);\n  return (sumOfProducts - 3 * sumOfSquares) / (Math.pow(sumOfSquares, 3));\n}\n\n/* For a given list of input numbers, calculate the kurtosis\n  around the mean of this dataset.\n  Kurtosis is the average of the fourth order of the differences\n  between each element and a centerpoint (mean in this case):\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  const sumOfProducts = sumOfProducts(numbers);\n  const sumOfProductsSquares = sumOfProductsSquares(numbers);\n  return (sumOfProductsSquares - 4 * sumOfProducts + 6 * sumOfSquares) /\n    (Math.pow(sumOfSquares, 4));\n}\n\n/* For a given list of input numbers, calculate the Pearson's Correlation Coefficient\n  around the mean of this dataset.\n  Pearson's Correlation Coefficient is the covariance of the dataset divided by the\n  standard deviation of the dataset, and is calculated as the Pearson's product\n  of the two datasets.\n  >>> pearsonCorrelationCoefficient([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst pearsonCorrelationCoefficient = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfProducts = sumOfProducts(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  const sumOfProductsSquares = sumOfProductsSquares(numbers);\n  return sumOfProducts / Math.pow(sumOfSquares, 0.5);\n}\n\n/* For a given list of input numbers, calculate the Pearson's Product Moment\n  around the mean of this dataset.\n  Pearson's Product Moment is the average of the squares of the differences\n  between each element and a centerpoint (mean in this case):\n  >>> pearsonProductMoment([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst pearsonProductMoment = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  return sumOfSquares - 2 * mean * sumOfProducts;\n}\n\n/* For a given list of input numbers, calculate the Gini Coefficient\n  around the mean of this dataset.\n  Gini Coefficient is the average of the squares of the differences\n  between each element and a centerpoint (mean in this case):\n  >>> giniCoefficient([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst giniCoefficient = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  return (sumOfSquares - mean * mean) / sumOfSquares;\n}\n\n/* For a given list of input numbers, calculate the entropy\n  around the mean of this dataset.\n  Entropy is the sum of the squares of the differences\n  between each element and a centerpoint (mean in this case):\n  >>> entropy([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entropy = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  return sumOfSquares - Math.pow(mean, 2);\n}\n\n/* For a given list of input numbers, calculate the variance\n  around the mean of this dataset.\n  Variance is the average of the squares of the differences\n  between each element and a centerpoint (mean in this case):\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const sumOfSquares = sumOfSquares(numbers);\n  return sumOfSquares - Math.pow(mean, 2);\n}\n\n/* For a given list of input numbers, calculate the variance\n  around the mean of this dataset.\n  Variance is the average of the squares of the differences\n  between each element and a centerpoint (mean in this case):\n  >>> sample"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let len = numbers.length\n  let result = []\n  let idx = 0\n  while (idx < len - 1) {\n    result.push(numbers[idx])\n    idx += 1\n    if (idx % delimeter === 0) {\n      result.push(delimeter)\n    }\n  }\n  result.push(numbers[idx])\n  return result\n}\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], [4, 5, 6])\n  [1, 4, 2, 5, 3, 6]\n  >>> interpserse([1, 2, 3], [4, 5, 6, 7, 8])\n  [1, 4, 2, 5, 3, 6, 7, 8]\n  */\nconst interpserse2 = (numbers, delimeter) => {\n  let len = numbers.length\n  let result = []\n  let idx = 0\n  while (idx < len - 1) {\n    result.push(numbers[idx])\n    idx += 1\n    if (idx % delimeter.length === 0) {\n      result.push(delimeter)\n    }\n  }\n  result.push(numbers[idx])\n  return result\n}\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], [4, 5, 6])\n  [1, 4, 2, 5, 3, 6]\n  >>> interpserse([1, 2, 3], [4, 5, 6, 7, 8])\n  [1, 4, 2, 5, 3, 6, 7, 8]\n  */\nconst interpserse3 = (numbers, delimeter) => {\n  let len = numbers.length\n  let result = []\n  let idx = 0\n  while (idx < len - 1) {\n    result.push(numbers[idx])\n    idx += 1\n    if (idx % delimeter.length === 0) {\n      result.push(delimeter)\n    }\n  }\n  result.push(numbers[idx])\n  return result\n}\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([1, 2, 3, 4, 5], 6)\n  [1, 6, 2, 6, 3, 6, 4, 6, 5]\n  >>> interpserse([1, 2, 3, 4, 5], [6, 7, 8])\n  [1, 6, 2, 7, 3, 8, 4, 7, 5]\n  >>> interpserse([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])\n  [1, 6, 2, 7, 3, 8, 4, 9, 5, 10]\n  */\nconst interpserse4 = (numbers, delimeter) => {\n  let len = numbers.length\n  let result = []\n  let idx = 0\n  while (idx < len - 1) {\n    result.push(numbers[idx])\n    idx += 1\n    if (idx % delimeter.length === 0) {\n      result.push(delimeter)\n    }\n  }\n  result.push(numbers[idx])\n  return result\n}\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([1, 2, 3, 4, 5], 6)\n  [1, 6, 2, 6, 3, 6, 4, 6, 5]\n  >>> interpserse([1, 2, 3, 4, 5], [6, 7, 8])\n  [1, 6, 2, 7, 3, 8, 4, 7, 5]\n  >>> interpserse([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])\n  [1, 6, 2, 7, 3, 8, 4, 9, 5, 10]\n  */\nconst interpserse5 = (numbers, delimeter) => {\n  let len = numbers.length\n  let result = []\n  let idx = 0\n  while (idx < len - 1) {\n    result.push(numbers[idx])\n    idx += 1\n    if (idx % delimeter.length === 0) {\n      result.push(delimeter)\n    }\n  }\n  result.push(numbers[idx])\n  return result\n}\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([1, 2, 3, 4, 5], 6)\n  [1, 6, 2, 6, 3, 6, 4, 6, 5]\n  >>> interpserse([1, 2, 3, 4, 5], [6, 7, 8])\n  [1, 6, 2, 7, 3, 8, 4, 7, 5]\n  >>> interpserse([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])\n  [1, 6, 2, 7, 3, 8, 4, 9, 5, 10]\n  */\nconst interpserse6 = (numbers, delimeter) => {\n  let len = numbers.length\n  let result = []\n  let idx = 0\n  while (idx < len - 1) {\n    result.push(numbers[idx])\n    idx += 1\n    if (idx % delimeter.length === 0) {\n      result.push(delimeter)\n    }\n  }\n  result.push(numbers[idx])\n  return result\n}\n\n/* Insert a number 'delimeter' between every two consecutive elements of input"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  paren_string = paren_string.replace(/\\(/g,'').replace(/\\)/g,'')\n  const all_pairs = paren_string.split(/\\s+/g).map((pair) => {\n    return pair.split(/\\)/g)\n  })\n  const len = all_pairs.length\n  const max_level = all_pairs[0].length - 1\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const current_level = all_pairs[i][0].length - 1\n    if (current_level > max_level) {\n      max_level = current_level\n    }\n  }\n  return result.sort((a, b) => a - b).slice(0, max_level + 1)\n}\n\n/*\n  Takes in a string of nested parentheses and returns the\n  string without the parentheses.\n  E.g. '((()))' becomes '()()()'\n  */\nconst unNest = (paren_string) => {\n  paren_string = paren_string.replace(/\\(/g,'').replace(/\\)/g,'')\n  const all_pairs = paren_string.split(/\\s+/g).map((pair) => {\n    return pair.split(/\\)/g)\n  })\n  const len = all_pairs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const current_level = all_pairs[i][0].length - 1\n    result.push(all_pairs[i][0].substring(1, current_level + 1))\n    result.push(all_pairs[i][1].substring(1, current_level + 1))\n  }\n  return result.join('')\n}\n\n// Print a group of parentheses.\n// E.g. printParentheses('((()))') -> '(()())'\nconst printParentheses = (paren_string) => {\n  paren_string = paren_string.replace(/\\(/g,'').replace(/\\)/g,'')\n  const all_pairs = paren_string.split(/\\s+/g).map((pair) => {\n    return pair.split(/\\)/g)\n  })\n  const len = all_pairs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(all_pairs[i][0].substring(1, all_pairs[i][0].length - 1))\n    result.push(all_pairs[i][1].substring(1, all_pairs[i][1].length - 1))\n  }\n  return result.join('')\n}\n\n// Print a group of parentheses.\n// E.g. printParentheses('((()))') -> '(()())'\nconst printNestedParentheses = (paren_string) => {\n  paren_string = paren_string.replace(/\\(/g,'').replace(/\\)/g,'')\n  const all_pairs = paren_string.split(/\\s+/g).map((pair) => {\n    return pair.split(/\\)/g)\n  })\n  const len = all_pairs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(all_pairs[i][0].substring(1, all_pairs[i][0].length - 1))\n    result.push(all_pairs[i][1].substring(1, all_pairs[i][1].length - 1))\n    result.push(all_pairs[i][0].substring(1, all_pairs[i][0].length - 1))\n  }\n  return result.join('')\n}\n\n// Print a group of parentheses.\n// E.g. printParentheses('((()))') -> '(()())'\nconst printNestedNestedParentheses = (paren_string) => {\n  paren_string = paren_string.replace(/\\(/g,'').replace(/\\)/g,'')\n  const all_pairs = paren_string.split(/\\s+/g).map((pair) => {\n    return pair.split(/\\)/g)\n  })\n  const len = all_pairs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(all_pairs[i][0].substring(1, all_pairs[i][0].length - 1))\n    result.push(all_pairs[i][1].substring(1, all_pairs[i][1].length - 1))\n    result.push(all_pairs[i][0].substring(1, all_pairs[i][0].length - 1))\n    result.push(all_pairs[i][0].substring(1, all_pairs[i][0].length - 1))\n  }\n  return result.join('')\n}\n\n// Print a group of parentheses.\n// E.g. printParentheses('((()))') -> '(()())'\nconst printUnNestedParentheses = (paren_string) => {\n  paren_string = paren_string.replace(/\\(/g,'').replace(/\\)/g,'')\n  const all_pairs = paren_string.split(/\\s+/g).map((pair) => {\n    return pair.split(/\\)/g)\n  })\n  const len = all_pairs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(all_pairs[i][0].substring(1, all_pairs[i][0].length - 1))\n  }"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  return strings.filter((str) => str.includes(substring));\n};\n\n/**\n  * Find and return the index of a substring in a given input list of strings\n  * @param {string[]} strings - List of strings\n  * @param {string} substr - Substring to search for\n  * @return {int} - Index of a substring in a given input list of strings\n  *\n  * Usage:\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'a')\n  *   0\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'c')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'd')\n  *   -1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'a', 'bac')\n  *   -1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'b')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'c', 'bac')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'd', 'bac')\n  *   -1\n  *\n  * Filter an input list of strings only for ones that contain given substring\n  * and return their index in a given input list of strings\n  *\n  * Usage:\n  *   >>> filteBrySubstringIndex([], 'a')\n  *   -1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'a')\n  *   0\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'c')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'd')\n  *   -1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'a', 'bac')\n  *   -1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'b')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'c', 'bac')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'd', 'bac')\n  *   -1\n  *\n  * Filter an input list of strings only for ones that contain given substring\n  * and return their index in a given input list of strings\n  *\n  * Usage:\n  *   >>> filteBrySubstringIndex([], 'a')\n  *   -1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'a')\n  *   0\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'c')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'd')\n  *   -1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'a', 'bac')\n  *   -1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'b')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'c', 'bac')\n  *   1\n  *   >>> filteBrySubstringIndex(['abc', 'bacd', 'cde', 'array'], 'd', 'bac')\n  *   -1\n  *\n  */\nconst filteBrySubstringIndex = (strings, substr, index) => {\n  if (index === undefined) {\n    return -1;\n  }\n\n  const arr = index.split('-');\n\n  return strings.findIndex((str, i) => {\n    const substrPos = str.indexOf(substr);\n\n    if (substrPos === -1) {\n      return -1;\n    }\n\n    return substrPos === i? index : -1;\n  });\n};\n\nmodule.exports = {\n  filteBrySubstring,\n  filteBrySubstringIndex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return {sum, product};\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const length = numbers.length;\n  let max = numbers[0];\n  let min = numbers[0];\n  let i = 1;\n  while (i < length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    i++;\n  }\n  const maxRolling = max;\n  const minRolling = min;\n  return [maxRolling, minRolling];\n};\n\nconst test = require('tape');\n\ntest('exercise-01-03-rolling-max', function(t) {\n  const numbers = [1, 2, 3, 2, 3, 4, 2];\n  const expected = [1, 2, 3, 3, 3, 4, 4];\n  t.deepEqual(rollingMax(numbers), expected,'should return the rolling max list');\n  t.end();\n});\n\ntest('exercise-01-03-rolling-max', function(t) {\n  const numbers = [1, 2, 3, 2, 3, 4, 2];\n  const expected = [1, 2, 3, 3, 3, 4, 4];\n  t.deepEqual(rollingMax(numbers), expected,'should return the rolling max list');\n  t.end();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string;\n  while (!isPalindrome(prefix)) {\n    prefix = prefix.substr(1, string.length - 1) + string.substr(0, string.length - 1);\n  }\n  return prefix;\n}\n\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('');\n}\n\nmodule.exports = {\n  isPalindrome: isPalindrome,\n  makePalindrome: makePalindrome\n}<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const len = a.length > b.length? a.length : b.length\n  const res = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    res[i] = a[i] ^ b[i]\n  }\n\n  return res.join('')\n}\n\nexport {\n  strinXgor,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const list = Array.isArray(strings)? strings : [strings];\n  if (list.length === 0) {\n    return null;\n  }\n  return list.sort((a, b) => a.length - b.length).pop();\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  const x = a;\n  const y = b;\n  const d = gcd(x, y);\n  return x / d;\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * (http://en.wikipedia.org/wiki/Least_common_multiple)\n  * @param a\n  * @param b\n  * @returns {number}\n  * @example\n  * rgeatestLeastCommonMultiple(1, 2)\n  * // => 2\n  * @example\n  * rgeatestLeastCommonMultiple(2, 5)\n  * // => 10\n  * @example\n  * rgeatestLeastCommonMultiple(15, 24)\n  * // => 60\n  * @example\n  * rgeatestLeastCommonMultiple(30, 15)\n  * // => 45\n  */\nconst rgeatestLeastCommonMultiple = (a, b) => {\n  return Math.abs(a * b / rgeatestCommonDivisor(a, b));\n};\n\nmodule.exports = {\n  rgeatestCommonDivisor,\n  rgeatestLeastCommonMultiple\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const prefix = string.slice(0, i + 1);\n    result.push(prefix);\n  }\n  return result;\n};\n\n/* Return list of all prefixes of the input string, from shortest to longest.\n  >>> allPrefixes('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allPrefixesFromShortestToLongest = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  let currentPrefix = string.slice(0, len);\n  while (currentPrefix.length) {\n    result.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, len - 1);\n  }\n  return result;\n};\n\n/* Return list of all prefixes from longest to shortest of the input string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesFromLongestToShortest = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  let currentPrefix = string.slice(0, len);\n  while (currentPrefix.length) {\n    result.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(1);\n  }\n  return result;\n};\n\n/* Return list of all suffixes of the input string, from longest to shortest.\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  let currentSuffix = string.slice(1, len);\n  while (currentSuffix.length) {\n    result.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(0, len - 1);\n  }\n  return result;\n};\n\n/* Return list of all suffixes of the input string, from shortest to longest.\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesFromShortestToLongest = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  let currentSuffix = string.slice(1, len);\n  while (currentSuffix.length) {\n    result.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(1);\n  }\n  return result;\n};\n\n/* Return list of all suffixes of the input string, from longest to shortest.\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesFromLongestToShortest = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  let currentSuffix = string.slice(1, len);\n  while (currentSuffix.length) {\n    result.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(0, len - 1);\n  }\n  return result;\n};\n\n/* Return list of all prefixes and suffixes of the input string, from shortest to longest.\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesAndPrefixes = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  let currentSuffix = string.slice(1, len);\n  while (currentSuffix.length) {\n    result.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(1);\n  }\n  let currentPrefix = string.slice(0, len - 1);\n  while (currentPrefix.length) {\n    result.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, len - 1);\n  }\n  return result;\n};\n\n/* Return list of all suffixes and prefixes of the input string, from shortest to longest.\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesAndPrefixesFromShortestToLongest = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  let currentSuffix = string.slice(1, len);\n  while (currentSuffix.length) {\n    result.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(1);\n  }\n  let currentPrefix = string.slice(0, len - 1);\n  while (currentPrefix.length) {\n    result.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, len - 1);\n  }\n  return result;\n};\n\n/* Return list of all suffixes and prefixes of the input string, from longest to shortest.\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', '"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    const res = []\n    for (let i = 0; i <= n; i++) {\n        res.push(`${i}`)\n    }\n    return res.join(' ')\n}\n\n/* Return a string containing a sequence of random numbers from 0 upto n inclusive.\n  >>> stringSequence(4)\n  '0 1 2 3'\n  >>> stringSequence(5)\n  '0 1 2 3 4'\n  */\nconst stringSequence = (n) => {\n    let res = ''\n    for (let i = 0; i < n; i++) {\n        res += `${Math.floor(Math.random() * 10) + 1}`\n    }\n    return res\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by the\n  given separator.\n  >>> stringSequence(3, ',')\n  '0,1,2'\n  >>> stringSequence(3, 'x')\n  '0x1x2x3'\n  >>> stringSequence(4, ',')\n  '0,1,2,3'\n  */\nconst stringSequence = (n, separator) => {\n    let res = ''\n    for (let i = 0; i < n; i++) {\n        res += `${i}${separator}`\n    }\n    return res\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by spaces.\n  >>> stringSequence(3)\n  '0 1 2'\n  >>> stringSequence(4)\n  '0 1 2 3'\n  >>> stringSequence(5)\n  '0 1 2 3 4'\n  */\nconst stringSequence = (n) => {\n    return stringSequence(n,'')\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by the\n  given separator.\n  >>> stringSequence(3, ',')\n  '0,1,2'\n  >>> stringSequence(3, 'x')\n  '0x1x2x3'\n  >>> stringSequence(4, ',')\n  '0,1,2,3'\n  */\nconst stringSequence = (n, separator) => {\n    return stringSequence(n, `${separator}`)\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by spaces.\n  >>> stringSequence(3)\n  '0 1 2'\n  >>> stringSequence(4)\n  '0 1 2 3'\n  >>> stringSequence(5)\n  '0 1 2 3 4'\n  */\nconst stringSequence = (n) => {\n    return stringSequence(n,'')\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by the\n  given separator.\n  >>> stringSequence(3, ',')\n  '0,1,2'\n  >>> stringSequence(3, 'x')\n  '0x1x2x3'\n  >>> stringSequence(4, ',')\n  '0,1,2,3'\n  */\nconst stringSequence = (n, separator) => {\n    return stringSequence(n, `${separator}`)\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by spaces.\n  >>> stringSequence(3)\n  '0 1 2'\n  >>> stringSequence(4)\n  '0 1 2 3'\n  >>> stringSequence(5)\n  '0 1 2 3 4'\n  */\nconst stringSequence = (n) => {\n    return stringSequence(n,'')\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by the\n  given separator.\n  >>> stringSequence(3, ',')\n  '0,1,2'\n  >>> stringSequence(3, 'x')\n  '0x1x2x3'\n  >>> stringSequence(4, ',')\n  '0,1,2,3'\n  */\nconst stringSequence = (n, separator) => {\n    return stringSequence(n, `${separator}`)\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by spaces.\n  >>> stringSequence(3)\n  '0 1 2'\n  >>> stringSequence(4)\n  '0 1 2 3'\n  >>> stringSequence(5)\n  '0 1 2 3 4'\n  */\nconst stringSequence = (n) => {\n    return stringSequence(n,'')\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by the\n  given separator.\n  >>> stringSequence(3, ',')\n  '0,1,2'\n  >>> stringSequence(3, 'x')\n  '0x1x2x3'\n  >>> stringSequence(4, ',')\n  '0,1,2,3'\n  */\nconst stringSequence = (n, separator) => {\n    return stringSequence(n, `${separator}`)\n}\n\n/* Return a string containing the numbers 0 to n inclusive, delimited by spaces.\n  >>> stringSequence(3)\n  '0 1 2'\n  >>> stringSequence(4)\n  '0 1 2 3'\n  >>> stringSequence(5)\n  '0 1 2 3 4'\n  */\nconst stringSequence = (n) => {\n    return stringSequence(n,'')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characterMap = new Map()\n  const count = (char) => {\n    if (characterMap.has(char.toLowerCase())) {\n      return characterMap.get(char.toLowerCase()) + 1\n    } else {\n      characterMap.set(char.toLowerCase(), 1)\n      return 1\n    }\n  }\n  const countCharacters = string.split('').map(count)\n  return Math.max(...characterMap.values())\n}\n\n/* Given a string, print out how many times each character occurs in it\n  >>> printCountCharacters('xyzXYZ')\n  ['x', 'y', 'z', 'X', 'Y', 'Z']\n  */\nconst printCountCharacters = (string) => {\n  const characterMap = new Map()\n  const count = (char) => {\n    if (characterMap.has(char.toLowerCase())) {\n      return characterMap.get(char.toLowerCase()) + 1\n    } else {\n      characterMap.set(char.toLowerCase(), 1)\n      return 1\n    }\n  }\n  const countCharacters = string.split('').map(count)\n  return characterMap.values()\n}\n\n/* Given a string, find out how many times each letter occurs in it\n  >>> printLetterCount('xyzXYZ')\n  ['x', 'y', 'z', 'X', 'Y', 'Z']\n  */\nconst printLetterCount = (string) => {\n  const letterMap = new Map()\n  const count = (char) => {\n    if (letterMap.has(char.toLowerCase())) {\n      return letterMap.get(char.toLowerCase()) + 1\n    } else {\n      letterMap.set(char.toLowerCase(), 1)\n      return 1\n    }\n  }\n  const countLetters = string.split('').map(count)\n  return letterMap.values()\n}\n\n/* Given a string, count how many times each word occurs in it\n  >>> printWordCount('xyzXYZ')\n  {'xyz': 1, 'Xyz': 1, 'XYz': 1, 'XYZ': 1, 'XyZ': 1, 'XyZ': 1, 'XyZ': 1}\n  */\nconst printWordCount = (string) => {\n  const wordMap = new Map()\n  const count = (word) => {\n    if (wordMap.has(word)) {\n      return wordMap.get(word) + 1\n    } else {\n      wordMap.set(word, 1)\n      return 1\n    }\n  }\n  const countWords = string.split('').map(count)\n  return wordMap\n}\n\n/* Given a string, find out how many times each word occurs in it\n  >>> printWordCount('xyzXYZ')\n  {'xyz': 1, 'Xyz': 1, 'XYz': 1, 'XYZ': 1, 'XyZ': 1, 'XyZ': 1, 'XyZ': 1}\n  */\nconst printWordCount2 = (string) => {\n  const wordMap = new Map()\n  const count = (word) => {\n    if (wordMap.has(word)) {\n      return wordMap.get(word) + 1\n    } else {\n      wordMap.set(word, 1)\n      return 1\n    }\n  }\n  const countWords = string.split('').map(count)\n  return wordMap\n}\n\n/* Given a string, find out how many times each pair of characters occurs in it\n  >>> printPairCount('xyzXYZ')\n  {'xy': 1, 'xY': 1, 'xz': 1, 'zY': 1, 'XY': 1, 'Xy': 1, 'yz': 1, 'Yz': 1, 'XYZ': 1}\n  */\nconst printPairCount = (string) => {\n  const pairMap = new Map()\n  const count = (pair) => {\n    if (pairMap.has(pair)) {\n      return pairMap.get(pair) + 1\n    } else {\n      pairMap.set(pair, 1)\n      return 1\n    }\n  }\n  const countPairs = string.split('').map(count)\n  return pairMap\n}\n\n/* Given a string, find out how many times each triplet occurs in it\n  >>> printTripletCount('xyzXYZ')\n  {'xyz': 1, 'xyzXY': 1, 'xyzXy': 1, 'xyzXz': 1, 'xyzYz': 1, 'XyZ': 1, 'XyZY': 1, 'XyZz': 1}\n  */\nconst printTripletCount = (string) => {\n  const tripletMap = new Map()\n  const count = (triplet) => {\n    if (tripletMap.has(triplet)) {\n      return tripletMap.get(triplet) + 1\n    } else {\n      tripletMap.set(triplet, 1)\n      return 1\n    }\n  }\n  const countTriplets = string.split('').map(count)\n  return tripletMap\n}\n\n/* Given a string, find out how many times each quadruplet occurs in it\n  >>> printQuadrupletCount('xyzXYZ')\n  {'xyzxyz': 1, 'xyzxyzXY': 1, 'xyzxyzXy': 1, 'xyzxyzXz': 1, 'xyzxyzYz': 1, 'xyzXYZYz': 1, 'xyzXYZyz': 1, 'xyzXYZXy': 1, 'xyzXYZXz': 1, 'xyzXYZYz': 1, 'xyzXYZXyZ': 1, 'XyZYZYzZ': 1, 'XyZYZYzZY': 1, 'XyZYZYzZz': 1, 'XyZYZYzZzY': 1, 'XyZYZYzZzZ': 1, 'XyZYZYzZzZz': 1, 'XyZYZYzZzZzY': 1}\n  */\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  return music_string.split('').map((char, index) => {\n    if (char === 'o') {\n      return 4;\n    }\n    if (char === '|') {\n      return 2;\n    }\n    if (char === '.') {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n// Your implementation of `parseMusic`.\nconst parseMusic = (music_string) => {\n  let beats = [4, 4];\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      beats[0] += 1;\n    } else if (music_string[i] === '|') {\n      beats[1] += 1;\n    } else if (music_string[i] === '.') {\n      beats[2] += 1;\n    } else {\n      throw new Error('Invalid character in music_string');\n    }\n  }\n  return beats;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.indexOf(substring, i) > -1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(howManyTimes('aaa', 'aa'));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  return sortNumbersHelper(numbers);\n}\n\n/**\n  * @param {string} numbers\n  * @return {string}\n  * @description Takes a string of numbers from 'zero' to 'nine' and returns the string with the numbers sorted from smallest to largest.\n  * @example\n  * sortNumbers('three one five')\n  * // 'one three five'\n  * @example\n  * sortNumbers('three one')\n  * // 'one three'\n  */\nfunction sortNumbersHelper(numbers) {\n  if (!numbers) return;\n\n  const sortedNumbers = splitString(numbers);\n  const sortedNumbersArray = sortedNumbers.sort();\n  return sortedNumbersArray.join('');\n}\n\n/**\n  * @param {string} numbers\n  * @return {string}\n  * @description Takes a string of numbers from 'zero' to 'nine' and returns the string with the numbers sorted from largest to smallest.\n  * @example\n  * sortNumbers('three one five')\n  * // 'five three one'\n  */\nfunction sortNumbersReverse(numbers) {\n  if (!numbers) return;\n\n  const sortedNumbers = splitString(numbers);\n  const sortedNumbersArray = sortedNumbers.sort((a, b) => b.length - a.length);\n  return sortedNumbersArray.join('');\n}\n\n/**\n  * @param {string} numbers\n  * @return {string}\n  * @description Takes a string of numbers from 'zero' to 'nine' and returns the string with the numbers sorted from smallest to largest, in reverse order.\n  * @example\n  * sortNumbersReverse('three one five')\n  * // 'five three one'\n  */\nfunction sortNumbersReverseHelper(numbers) {\n  if (!numbers) return;\n\n  const sortedNumbers = splitString(numbers);\n  const sortedNumbersArray = sortedNumbers.sort((a, b) => b.length - a.length, (a, b) => a.length - b.length);\n  return sortedNumbersArray.join('');\n}\n\nexport {\n  sortNumbers,\n  sortNumbersReverse,\n  sortNumbersReverseHelper\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const result = [...new Array(2)].fill().map((x, i) => {\n    return findClosestElement(numbers, x);\n  });\n  return [...result[0],...result[1]];\n};\n\n// const findClosestElements = (numbers) => {\n//   const sortedNumbers = numbers.slice().sort((a, b) => {\n//     return a - b;\n//   });\n//   const result = sortedNumbers.slice(0, 2).map((x, i) => {\n//     return findClosestElement(numbers, x);\n//   });\n//   return [...result[0],...result[1]];\n// };\n\n// const findClosestElement = (numbers, number) => {\n//   const distances = numbers.map(x => Math.abs(x - number));\n//   const closestIndex = distances.indexOf(Math.min(...distances));\n//   return numbers[closestIndex];\n// };\n\nconst findClosestElement = (numbers, number) => {\n  return [...new Array(2)].fill().map((x, i) => {\n    return findClosestElement(numbers, number, x);\n  });\n};\n\n// const findClosestElement = (numbers, number, index) => {\n//   const distances = numbers.map(x => Math.abs(x - number));\n//   return numbers[index];\n// };\n\n// const findClosestElement = (numbers, number, index) => {\n//   const distances = numbers.map(x => Math.abs(x - number));\n//   return Math.min(...distances);\n// };\n\nconst findClosestElement = (numbers, number, index) => {\n  return findClosestElement(numbers, number, index, numbers.slice());\n};\n\nconst findClosestElement = (numbers, number, index, numbers) => {\n  const distances = numbers.map(x => Math.abs(x - number));\n  const closestIndex = distances.indexOf(Math.min(...distances));\n  return numbers[closestIndex];\n};\n\n// const findClosestElement = (numbers, number, index, numbers) => {\n//   const distances = numbers.map(x => Math.abs(x - number));\n//   return Math.min(...distances);\n// };\n\n// const findClosestElement = (numbers, number, index, numbers) => {\n//   const distances = numbers.map(x => Math.abs(x - number));\n//   return Math.min(...distances);\n// };\n\nconst findClosestElement = (numbers, number, index, numbers) => {\n  const distances = numbers.map(x => Math.abs(x - number));\n  return Math.min(...distances);\n};\n\nconst findClosestElement = (numbers, number, index, numbers) => {\n  const distances = numbers.map(x => Math.abs(x - number));\n  return Math.min(...distances);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const transformed = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    transformed.push(numbers[i] / (numbers.length - 1));\n  }\n  return transformed;\n};\n\nexport default rescaleTonUit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter((value) => {\n    if (value === null) {\n      return false;\n    }\n    if (typeof value === 'number') {\n      return (typeof value!== 'boolean');\n    }\n    return true;\n  });\n};\n\nmodule.exports = filetrItnegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n};\n\n/**\n  * Returns the number of bytes in the given string\n  * @param {String} string\n  * @returns {Number}\n  *\n  * Example:\n  *\n  * ```javascript\n  * // returns 4\n  * strlen('abcd')\n  * ```\n  *\n  * @example\n  * ```javascript\n  * // returns 3\n  * strlen('abc')\n  * ```\n  */\nconst strlen_ = (string) => {\n    return string.length;\n};\n\nexport {\n    strlen,\n    strlen_\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    let i = 1,\n        j = n,\n        answer = n;\n    while (i < j) {\n        if (n % i === 0) {\n            answer = Math.max(answer, i);\n        }\n        i++;\n    }\n    return answer;\n};\n\nconsole.log(largestDivisor(15));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    let f = [];\n    for (let i = 2; i <= n; i++) {\n        let p = n % i;\n        if (p === 0) {\n            f.push(i);\n            n = n / i;\n            if (n === 0) {\n                break;\n            }\n        }\n    }\n    if (n!== 0) {\n        f.push(n);\n    }\n    return f;\n};\n\n/*\n  Calculate the product of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  14\n  >>> factorize(12)\n  2\n  >>> factorize(1)\n  1\n  >>> factorize(0)\n  1\n  >>> factorize(-1)\n  1\n  >>> factorize(10)\n  10\n  >>> factorize(-10)\n  10\n  >>> factorize(-3)\n  3\n  >>> factorize(-3)\n  3\n  >>> factorize(3)\n  3\n  >>> factorize(4)\n  4\n  >>> factorize(-4)\n  4\n  >>> factorize(9)\n  9\n  >>> factorize(15)\n  15\n  >>> factorize(1000)\n  9007199254740992\n  >>> factorize(2000)\n  9007199254740992\n  >>> factorize(3000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(300000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(300000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(20000000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(20000000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(100000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(100000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(10000000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(100000000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(1000000000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(100000000000000000)\n  92274186511138626356479780021894272000000000\n  >>> factorize(1000000000000)\n  9007199254740992\n  >>> factorize(100000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(10000000)\n  9007199254740992\n  >>> factorize(100000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>> factorize(1000000)\n  9007199254740992\n  >>>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let previous;\n  for (let i = 0; i < numbers.length; i++) {\n    if (previous) {\n      if (previous === numbers[i]) {\n        continue;\n      }\n    }\n    newArray.push(numbers[i]);\n    previous = numbers[i];\n  }\n  return newArray;\n};\n\nexport {removeDuplicates};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/^([A-Z])/, (match, x) => (x.toUpperCase()))\n}\n\nexport default flipCase<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, x) => acc + x, '');\n};\n\n/* Check if a list contains a specific string\n  >>> contains(['a', 'b', 'c'], 'a')\n  true\n  >>> contains(['a', 'b', 'c'], 'x')\n  false\n  >>> contains(['a', 'b', 'c'], 'a', 'b', 'c')\n  true\n  */\nconst contains = (list, string) => {\n  return list.indexOf(string)!== -1;\n};\n\n/* Returns the last element of a list\n  >>> last(['a', 'b', 'c'])\n  'c'\n  */\nconst last = (list) => {\n  return list[list.length - 1];\n};\n\n/* Returns a list without a specific element\n  >>> remove(['a', 'b', 'c', 'a'], 'a')\n  ['b', 'c']\n  >>> remove(['a', 'b', 'c', 'a'], 'x')\n  ['a', 'b', 'c']\n  */\nconst remove = (list, element) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== element) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n};\n\n/* Check if a string is a palindrome\n  >>> is_palindrome('abc')\n  true\n  >>> is_palindrome('a')\n  true\n  >>> is_palindrome('abcd')\n  true\n  >>> is_palindrome('abcc')\n  false\n  */\nconst is_palindrome = (str) => {\n  return str.split('').reverse().join('') === str;\n};\n\n/* Count how many times a string occurs in a list\n  >>> count('abc', ['a', 'b', 'c', 'c'])\n  2\n  >>> count('a', ['a', 'b', 'c', 'c'])\n  1\n  >>> count('aa', ['a', 'b', 'c', 'c'])\n  0\n  >>> count('x', ['x', 'x', 'x'])\n  3\n  */\nconst count = (str, list) => {\n  const result = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === str) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/* Check if a string is a permutation of a palindrome\n  >>> is_permutation('a', ['a'])\n  true\n  >>> is_permutation('ab', ['ab'])\n  true\n  >>> is_permutation('ab', ['ba'])\n  false\n  >>> is_permutation('ab', ['aa', 'ab'])\n  true\n  */\nconst is_permutation = (str, list) => {\n  let i = 0;\n  let j = list.length - 1;\n  let permutation = true;\n  while (i < list.length && j >= 0) {\n    if (list[i]!== str[j]) {\n      permutation = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return permutation;\n};\n\n/* Check if a string is a permutation of a palindrome\n  >>> is_permutation('a', ['a'])\n  true\n  >>> is_permutation('ab', ['ab'])\n  true\n  >>> is_permutation('ab', ['ba'])\n  false\n  >>> is_permutation('ab', ['aa', 'ab'])\n  true\n  */\nconst is_permutation_palindrome = (str, list) => {\n  const result = is_permutation(str, list);\n  if (result) {\n    const reversed = list.slice().reverse().join('');\n    return str === reversed;\n  }\n  return false;\n};\n\n/* Check if a string is a permutation of a palindrome\n  >>> is_permutation('ab', ['ab'])\n  true\n  >>> is_permutation('ab', ['ba'])\n  false\n  >>> is_permutation('ab', ['aa', 'ab'])\n  true\n  */\nconst is_permutation_palindrome_nested = (str, list) => {\n  const result = is_permutation_palindrome(str, list);\n  if (result) {\n    const reversed = list.slice().reverse().join('');\n    return str === reversed;\n  }\n  return false;\n};\n\n/* Returns the number of occurrences of a string in a list\n  >>> count('ab', ['a', 'a', 'b'])\n  2\n  >>> count('a', ['a', 'a', 'b'])\n  1\n  >>> count('a', ['a', 'b', 'c', 'a'])\n  1\n  >>> count('x', ['x', 'x', 'x'])\n  3\n  */\nconst count_occurrence = (str, list) => {\n  const result = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === str) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/* Returns the length of a string\n  >>> len('abc')\n  3\n  >>> len('a')\n  1\n  >>> len('a')\n  1\n  */\nconst len = (str) => {\n  return str.length;\n};\n\nexport {\n  conactenate,\n  contains,\n  count,\n  count_occurrence,\n  is_palindrome,\n  is_permutation,\n  is_permutation_palindrome,\n  is_permutation_palindrome_nested,\n  last,\n  remove,\n  len,\n  str_replace\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return (strings || []).filter(x => x.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given sub-string.\n  * @param {Array} strings List of strings.\n  * @param {String} subStr Sub-string to look for.\n  * @returns {Array} Filtered list of strings.\n  * @example\n  * iflterStrContains([], 'a')\n  * // => []\n  * iflterStrContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  * // => ['abc', 'array']\n  * iflterStrContains(['abc', 'bcd', 'cde', 'array'], 'abc')\n  * // => ['abc']\n  */\nconst iflterStrContains = (strings, subStr) => {\n  return (strings || []).filter(x => x.includes(subStr));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given sub-string.\n  * @param {Array} strings List of strings.\n  * @param {String} subStr Sub-string to look for.\n  * @returns {Array} Filtered list of strings.\n  * @example\n  * iflterStrContains([], 'a')\n  * // => []\n  * iflterStrContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  * // => ['abc', 'bcd', 'cde', 'array']\n  * iflterStrContains(['abc', 'bcd', 'cde', 'array'], 'abc')\n  * // => ['abc']\n  */\nconst iflterStrNotContains = (strings, subStr) => {\n  return (strings || []).filter(x =>!x.includes(subStr));\n};\n\n/**\n  * Filter an input list of strings only for ones that end with a given suffix.\n  * @param {Array} strings List of strings.\n  * @param {String} subStr Sub-string to look for.\n  * @returns {Array} Filtered list of strings.\n  * @example\n  * iflterStrEndsWith([], 'a')\n  * // => []\n  * iflterStrEndsWith(['abc', 'bcd', 'cde', 'array'], 'a')\n  * // => ['abc', 'array']\n  * iflterStrEndsWith(['abc', 'bcd', 'cde', 'array'], 'abc')\n  * // => ['abc']\n  */\nconst iflterStrEndsWith = (strings, subStr) => {\n  return (strings || []).filter(x => x.endsWith(subStr));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not end with a given suffix.\n  * @param {Array} strings List of strings.\n  * @param {String} subStr Sub-string to look for.\n  * @returns {Array} Filtered list of strings.\n  * @example\n  * iflterStrEndsWith([], 'a')\n  * // => []\n  * iflterStrEndsWith(['abc', 'bcd', 'cde', 'array'], 'a')\n  * // => ['abc', 'bcd', 'cde', 'array']\n  * iflterStrEndsWith(['abc', 'bcd', 'cde', 'array'], 'abc')\n  * // => []\n  */\nconst iflterStrNotEndsWith = (strings, subStr) => {\n  return (strings || []).filter(x =>!x.endsWith(subStr));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given prefix.\n  * @param {Array} strings List of strings.\n  * @param {String} subStr Sub-string to look for.\n  * @returns {Array} Filtered list of strings.\n  * @example\n  * iflterStrContains([], 'a')\n  * // => []\n  * iflterStrContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  * // => ['abc', 'array']\n  * iflterStrContains(['abc', 'bcd', 'cde', 'array'], 'abc')\n  * // => ['abc']\n  */\nconst iflterStrStartsWith = (strings, subStr) => {\n  return (strings || []).filter(x => x.startsWith(subStr));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given prefix.\n  * @param {Array} strings List of strings.\n  * @param {String} subStr Sub-string to look for.\n  * @returns {Array} Filtered list of strings.\n  * @example\n  * iflterStrContains([], 'a')\n  * // => []\n  * iflterStrContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  * // => ['abc', 'bcd', 'cde', 'array']\n  * iflterStrContains(['abc', 'bcd', 'cde', 'array'], 'abc')\n  * // => []\n  */\nconst iflterStrNotStartsWith = (strings, subStr) => {\n  return (strings || []).filter(x =>!x.startsWith(subStr));\n};\n\nexport default {\n  iflterByrPefix,\n  iflterStrContains,\n  iflterStrNotContains,\n  iflterStrEndsWith,\n  iflterStrNotEndsWith,\n  iflterStrStartsWith,\n  iflterStrNotStartsWith\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const filteredList = l.filter((x) => x > 0);\n  return filteredList.length === l.length? filteredList : null;\n};\n\n/*\n  Returns a list of all the permutations of the input list\n  >>> getPermutations([1, 2, 3])\n  [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n  >>> getPermutations([1, 2, 3, 4])\n  [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]\n  >>> getPermutations([1, 2, 3, 4, 5, 6, 7])\n  [[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 5, 4, 6, 7], [1, 2, 3, 5, 6, 4, 7], [1, 2, 3, 4, 6, 5, 7], [1, 2, 3, 6, 4, 5, 7], [1, 2, 3, 6, 5, 4, 7], [1, 2, 4, 3, 5, 6, 7], [1, 2, 4, 5, 3, 6, 7], [1, 2, 4, 5, 6, 3, 7], [1, 2, 6, 3, 4, 5, 7], [1, 2, 6, 4, 5, 3, 7], [1, 2, 6, 5, 4, 3, 7], [1, 5, 3, 4, 6, 7], [1, 5, 4, 6, 7], [1, 4, 6, 5, 7], [1, 5, 6, 3, 4], [1, 5, 6, 4, 3], [1, 6, 3, 4, 5], [1, 6, 4, 5, 3], [1, 6, 5, 3, 4], [1, 6, 5, 4, 3]]\n  >>> getPermutations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 7, 6, 8, 9, 10], [1, 2, 3, 5, 4, 6, 7, 8, 9, 10], [1, 2, 3, 5, 6, 4, 7, 8, 9, 10], [1, 2, 3, 6, 4, 5, 7, 8, 9, 10], [1, 2, 3, 6, 5, 4, 7, 8, 9, 10], [1, 2, 4, 3, 5, 6, 7, 8, 9, 10], [1, 2, 4, 5, 3, 6, 7, 8, 9, 10], [1, 2, 4, 5, 6, 3, 7, 8, 9, 10], [1, 2, 4, 5, 6, 7, 3, 8, 9, 10], [1, 2, 4, 6, 3, 5, 7, 8, 9, 10], [1, 2, 4, 6, 5, 3, 7, 8, 9, 10], [1, 2, 4, 6, 7, 3, 5, 8, 9, 10], [1, 2, 4, 7, 3, 5, 6, 8, 9, 10], [1, 2, 5, 3, 4, 6, 7, 8, 9, 10], [1, 2, 5, 4, 6, 7, 8, 9, 10], [1, 2, 5, 6, 3, 4, 7, 8, 9, 10], [1, 2, 5, 6, 7, 3, 4, 8, 9, 10], [1, 2, 5, 6, 7, 8, 3, 4, 9, 10], [1, 2, 6, 3, 4, 5, 7, 8, 9, 10], [1, 2, 6, 4, 5, 3, 7, 8, 9, 10], [1, 2, 6, 5, 3, 4, 7, 8, 9, 10], [1, 2, 6, 5, 4, 3, 7, 8, 9, 10], [1, 5, 3, 4, 6, 7, 8, 9, 10], [1, 5, 4, 6, 7, 8, 9, 10], [1, 4, 6, 5, 7, 8, 9, 10], [1, 5, 6, 3, 4, 8, 9, 10], [1, 5, 6, 4, 3, 8, 9, 10], [1, 6, 3, 4, 5, 8, 9, 10], [1, 6, 4, 5, 3, 8, 9, 10], [1, 6, 5, 3, 4, 8, 9, 10], [1, 6, 5, 4, 3, 8, 9, 10], [1, 5, 6, 7, 8, 9, 10], [1, 6, 7, 3, 4, 8, 9, 10], [1, 6, 7, 8, 3, 4, 9, 10], [1, 6, 7, 8, 9, 3, 4, 10], [1, 6, 7, 9, 3, 4, 8, 10], [1, 7, 3, 4, 5, 6, 8, 9, 10], [1, 7, 4, 5, 3, 6, 8, 9, 10"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false\n    }\n    if (n === 2) {\n      return true\n    }\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  return isPrime(n)\n}\n\n/**\n  * @method isPrime\n  * @description\n  * This method returns true if the given number is prime, and false otherwise.\n  * @param {number} n The number to check if it is prime.\n  * @returns {boolean} True if the given number is prime, and false otherwise.\n  * @example\n  * // Test a given number if it is prime\n  * const isPrime = (n) => {\n  *   if (n === 1) {\n  *     return false\n  *   }\n  *   if (n === 2) {\n  *     return true\n  *   }\n  *   if (n % 2 === 0) {\n  *     return false\n  *   }\n  *   return isPrime(n)\n  * }\n  * isPrime(101)\n  * // => true\n  * isPrime(11)\n  * // => true\n  * isPrime(13441)\n  * // => true\n  * isPrime(61)\n  * // => true\n  * isPrime(4)\n  * // => false\n  * isPrime(1)\n  * // => false\n  */\nexport default siPrime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const polyZero = poly(xs, 0);\n  if (polyZero === 0) {\n    return 0;\n  }\n  const x = Math.min(...xs.map(x => Math.abs(x)));\n  return x - polyZero / poly(xs, x);\n}\n\n/*\n  x is a number in the range [1, 10]\n  xs are coefficients of a polynomial.\n  findMaxZero returns only the largest zero point, even if there are many.\n  >>> round(findMaxZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMaxZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findMaxZero([-1, -1, -1, 1]), 2) # x^4 = -1 + x^4\n  4.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = -1 + x\n  -1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(findMaxZero([-1, 1]), 2) # x = 1 + x\n  1.0\n  >>> round(find"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => {\n    if (a % 3 === b % 3) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sorted.map(x => x + 3);\n}\n\n/*\n  >>> sortThird([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n*/\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => {\n    if (a % 3 === b % 3) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sorted.map(x => x + 3);\n}\n\n//console.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniq = [];\n  const seen = [];\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (seen.indexOf(l[i]) === -1) {\n      uniq.push(l[i]);\n      seen.push(l[i]);\n    }\n  }\n  return uniq;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 == 0 && i % 5 == 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the number appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzzNumber = (n) => {\n  const count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 == 0 || i % 5 == 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the sum of the even integers less than n.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzzSum = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Return the sum of the even integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzzSumNumber = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 == 0 || i % 5 == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst test = () => {\n  const n = 50;\n  console.log(fizzBuzz(n));\n  console.log(fizzBuzzNumber(n));\n  console.log(fizzBuzzSum(n));\n  console.log(fizzBuzzSumNumber(n));\n};\n\nif (process.argv.length > 2) {\n  test();\n} else {\n  console.log(`Enter a number to test:`);\n  process.stdin.resume();\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', (data) => {\n    let n = parseInt(data);\n    console.log(fizzBuzz(n));\n    console.log(fizzBuzzNumber(n));\n    console.log(fizzBuzzSum(n));\n    console.log(fizzBuzzSumNumber(n));\n  });\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  return l.slice().sort((a, b) => (a % 2 === b % 2)? a - b : b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrOdd([1, 2, 3])\n  [2, 3, 1]\n  >>> sotrOdd([5, 6, 3, 4])\n  [4, 3, 5, 6]\n  */\nconst sotrOdd = (l) => {\n  return l.slice().sort((a, b) => (a % 2 === b % 2)? a - b : b - a);\n};\n\nexport default {\n  sotrEven,\n  sotrOdd,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeBase36 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    groups2.push(encodeBase36Helper(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeBase36 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(decodeBase36Helper(s.slice(3 * i, Math.min((3 * i + 3), s.length))));\n  }\n  for (const group of groups) {\n    groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeBase64 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    groups2.push(encodeBase64Helper(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeBase64 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(decodeBase64Helper(s.slice(3 * i, Math.min((3 * i + 3), s.length))));\n  }\n  for (const group of groups) {\n    groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeHex = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    groups2.push(encodeHexHelper(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeHex = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(decodeHexHelper(s.slice(3 * i, Math.min((3 * i + 3), s.length))));\n  }\n  for (const group of groups) {\n    groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeUTF8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    groups2.push(encodeUTF8Helper(group));\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeUTF8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(decodeUTF8Helper(s.slice(3 * i, Math.min((3 * i + 3), s.length))));\n  }\n  for (const group of groups) {\n    groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  encodeBase36,\n  decodeBase36,\n  encodeBase64,\n  decodeBase64,\n  encodeHex,\n  decodeHex,\n  encodeUTF8,"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = (n) => fib(n-1) + fib(n-2)\n  let fibo = 1\n  let isPrime = true\n  while (fibo < n) {\n    let prime = false\n    for (let i = 2; i < fibo; i++) {\n      if (fib(i) === fibo) {\n        prime = true\n        break\n      }\n    }\n    if (prime === true) {\n      isPrime = false\n      break\n    }\n    fibo += 1\n  }\n  return fibo\n}\n\nconsole.log(primeFib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const isTriples = l.every((el) => l.indexOf(el) < l.lastIndexOf(el));\n  return isTriples;\n};\n\n/*\n  triplesSumToZero takes a list of numbers as an input.\n  it returns true if there are three distinct numbers in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const isTriples = l.every((el) => l.indexOf(el) < l.lastIndexOf(el));\n  return isTriples;\n};\n\nexport default {\n  triplesSumToZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  var leftCnt = 0;\n  var rightCnt = 0;\n  for (var i = 0; i < n; i++) {\n    var leftCar = Math.random() * n - 1;\n    var rightCar = Math.random() * n - 1;\n    var dist = Math.abs(leftCar - rightCar);\n    var delta = Math.abs(leftCar - rightCar);\n    if (delta >= n - 2) {\n      continue;\n    }\n    if (dist <= 1) {\n      leftCnt++;\n    }\n    if (dist >= n - 1) {\n      rightCnt++;\n    }\n  }\n  return leftCnt + rightCnt;\n};\n\n// ---------------------------------------------------------------------------\n\n// Number of collisions = (2n-1)^2\nconst acrRacelColision1 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision2 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision3 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision4 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision5 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\n// ---------------------------------------------------------------------------\n\nconst acrRacelColision7 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision8 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision9 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision10 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\n// ---------------------------------------------------------------------------\n\nconst acrRacelColision11 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision12 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision13 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision14 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision15 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\n// ---------------------------------------------------------------------------\n\nconst acrRacelColision16 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision17 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision18 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision19 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\n// ---------------------------------------------------------------------------\n\nconst acrRacelColision20 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision21 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision22 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision23 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision24 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision25 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\n// ---------------------------------------------------------------------------\n\nconst acrRacelColision26 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision27 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision28 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision29 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\n// ---------------------------------------------------------------------------\n\nconst acrRacelColision30 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision31 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision32 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision33 = (n) => {\n  return (Math.pow(2 * n - 1, 2));\n};\n\nconst acrRacelColision"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incrList = (l) => {\n    let incrList = []\n    for (let i = 0; i < l.length; i++) {\n      incrList[i] = l[i]\n    }\n    return incrList\n  }\n  return incrList(l)\n}\n\n/* Return list with elements in reverse order.\n  >>> reverseList([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverseList([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> reverseList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst reverseList = (l) => {\n  const reverseList = (l) => {\n    let reverseList = []\n    for (let i = l.length - 1; i >= 0; i--) {\n      reverseList[i] = l[i]\n    }\n    return reverseList\n  }\n  return reverseList(l)\n}\n\n/* Return a list with elements in random order.\n  >>> randomList(4)\n  [3, 1, 0, 2]\n  >>> randomList(4)\n  [1, 3, 2, 0]\n  >>> randomList(4)\n  [2, 0, 1, 3]\n  >>> randomList(4)\n  [3, 0, 2, 1]\n  >>> randomList(4)\n  [2, 3, 1, 0]\n  >>> randomList(4)\n  [1, 0, 2, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [0, 2, 3, 1]\n  >>> randomList(4)\n  [2, 1, 3, 0]\n  >>> randomList(4)\n  [1, 0, 3, 2]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 1, 2]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 2, 3]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 2, 1]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 0, 2, 3]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 1, 2]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 2, 1]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 1, 2]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 2, 1]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 1, 2]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 2, 1]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 1, 2]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> randomList(4)\n  [2, 3, 0, 1]\n  >>> randomList(4)\n  [0, 3, 2, 1]\n  >>> randomList(4)\n  [0, 2, 1, 3]\n  >>> randomList(4)\n  [0, 1, 3, 2]\n  >>> randomList(4)\n  [1, 2, 3, 0]\n  >>> random"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let a = l.filter(v => v % 2 === 0)\n  let b = l.filter(v => v % 2!== 0)\n  return a.length > 1 || b.length > 1\n}\n\n/*\n  apirSsumoTOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> apirSsumoTOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTOne([1])\n  false\n  */\nconst apirSsumoTOne = (l) => {\n  let a = l.filter(v => v % 2 === 1)\n  let b = l.filter(v => v % 2!== 1)\n  return a.length > 1 || b.length > 1\n}\n\n/*\n  apirSumOfDigits takes an integer as an input.\n  it returns the sum of the digits of the integer.\n  >>> apirSumOfDigits(1)\n  1\n  >>> apirSumOfDigits(3)\n  6\n  >>> apirSumOfDigits(5)\n  10\n  >>> apirSumOfDigits(7)\n  13\n  >>> apirSumOfDigits(8)\n  16\n  >>> apirSumOfDigits(9)\n  21\n  >>> apirSumOfDigits(15)\n  21\n  >>> apirSumOfDigits(16)\n  22\n  >>> apirSumOfDigits(1000)\n  1000\n  >>> apirSumOfDigits(1001)\n  1001\n  >>> apirSumOfDigits(1002)\n  1002\n  >>> apirSumOfDigits(10000)\n  10000\n  >>> apirSumOfDigits(1000000)\n  1000000\n  >>> apirSumOfDigits(1000000)\n  1000000\n  >>> apirSumOfDigits(2000000)\n  2000000\n  >>> apirSumOfDigits(2500000)\n  2500000\n  >>> apirSumOfDigits(2500000)\n  2500000\n  >>> apirSumOfDigits(100000000)\n  100000000\n  >>> apirSumOfDigits(100000000)\n  100000000\n  >>> apirSumOfDigits(1000000000)\n  1000000000\n  >>> apirSumOfDigits(10000000000)\n  10000000000\n  >>> apirSumOfDigits(10000000000)\n  10000000000\n  >>> apirSumOfDigits(20000000000)\n  20000000000\n  >>> apirSumOfDigits(1000000000)\n  1000000000\n  >>> apirSumOfDigits(20000000000)\n  20000000000\n  >>> apirSumOfDigits(20000000000)\n  20000000000\n  >>> apirSumOfDigits(10000000000)\n  10000000000\n  >>> apirSumOfDigits(20000000000)\n  20000000000\n  >>> apirSumOfDigits(2500000000)\n  2500000000\n  >>> apirSumOfDigits(2500000000)\n  2500000000\n  >>> apirSumOfDigits(2500000000)\n  2500000000\n  >>> apirSumOfDigits(1000000000000)\n  1000000000000\n  >>> apirSumOfDigits(1000000000000)\n  1000000000000\n  >>> apirSumOfDigits(1000000000000)\n  1000000000000\n  >>> apirSumOfDigits(10000000000000)\n  10000000000000\n  >>> apirSumOfDigits(10000000000000)\n  10000000000000\n  >>> apirSumOfDigits(10000000000000)\n  10000000000000\n  >>> apirSumOfDigits(100000000000000)\n  100000000000000\n  >>> apirSumOfDigits(100000000000000)\n  100000000000000\n  >>> apirSumOfDigits(100000000000000)\n  100000000000000\n  >>> apirSumOfDigits(100000000000000)\n  100000000000000\n  >>> apirSumOfDigits(1000000000000000)\n  1000000000000000\n  >>> apirSumOfDigits(1000000000000000)\n  1000000000000000\n  >>> apirSumOfDigits(1000000000000000)\n  1000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(100000000000000000)\n  100000000000000000\n  >>> apirSumOfDigits(100000000000000000)\n  100000000000000000\n  >>> apirSumOfDigits(100000000000000000)\n  100000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> apirSumOfDigits(1000000000000000000)\n  1000000000000000000\n  >>> ap"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if(base === 1) {\n    return x.toString();\n  }\n  return changeBase(x * base, base - 1);\n}\n\n/*\n  Convert a string to a number.\n  >>> stringToNumber('abc')\n  NaN\n  >>> stringToNumber('1')\n  1\n  >>> stringToNumber('a')\n  NaN\n  >>> stringToNumber('1a')\n  NaN\n  >>> stringToNumber('11')\n  11\n  >>> stringToNumber('123')\n  123\n  >>> stringToNumber('1-1')\n  NaN\n  >>> stringToNumber('1-2-3')\n  NaN\n  >>> stringToNumber('1a2b3c')\n  NaN\n  >>> stringToNumber('11 12')\n  NaN\n  >>> stringToNumber('11 12 13')\n  NaN\n  >>> stringToNumber('11 12 13 14')\n  NaN\n  >>> stringToNumber('11 12 13 14 15')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49')\n  NaN\n  >>> stringToNumber('11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/**\nGiven two points, return the hypotenuse of a triangle.\n  >>> triangleHypotenuse(2, 3)\n  5\n  */\nconst triangleHypotenuse = (x, y) => {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea = (a, b) => {\n  return triangleArea(a, b) / 2;\n};\n\n/**\nGiven a triangle with sides a and b, return the area of the triangle.\n  >>> triangleArea(2, 3)\n  3.0\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let result = 0;\n  let mid;\n\n  if (l.length === 0) {\n    return null;\n  }\n\n  l.sort((a, b) => (a - b));\n\n  if (l.length % 2) {\n    mid = l.length / 2;\n  } else {\n    mid = Math.floor(l.length / 2);\n  }\n\n  result = l[mid];\n\n  if (l.length % 2 === 0) {\n    result += (l[mid - 1] + l[mid]) / 2;\n  }\n\n  return result;\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text === undefined || text === null) {\n    return false;\n  }\n  return (text.split('').reverse().join('') === text);\n};\n\n/*\n  Return length of string\n  >>> len('abc')\n  3\n  >>> len('')\n  0\n  >>> len('abcde')\n  5\n  */\nconst len = (text) => {\n  if (text === undefined || text === null) {\n    return 0;\n  }\n  return text.split('').length;\n};\n\n/*\n  Return upper case of a string\n  >>> upper('abc')\n  'ABC'\n  >>> upper('')\n  ''\n  >>> upper('Abc')\n  'ABC'\n  */\nconst upper = (text) => {\n  if (text === undefined || text === null) {\n    return '';\n  }\n  return text.toUpperCase();\n};\n\n/*\n  Return lower case of a string\n  >>> lower('ABC')\n  'abc'\n  >>> lower('')\n  ''\n  >>> lower('Abc')\n  'abc'\n  */\nconst lower = (text) => {\n  if (text === undefined || text === null) {\n    return '';\n  }\n  return text.toLowerCase();\n};\n\n/*\n  Return number of vowels in a string\n  >>> countVowels('abc')\n  1\n  >>> countVowels('')\n  0\n  >>> countVowels('aaaaa')\n  1\n  >>> countVowels('zabc')\n  2\n  >>> countVowels('cbbb')\n  1\n  */\nconst countVowels = (text) => {\n  if (text === undefined || text === null) {\n    return 0;\n  }\n  let vowel = 0;\n  let consonant = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[a-z]/i)) {\n      consonant++;\n    } else {\n      vowel++;\n    }\n  }\n  return vowel;\n};\n\n/*\n  Return number of consonants in a string\n  >>> countConsonants('abc')\n  1\n  >>> countConsonants('')\n  0\n  >>> countConsonants('aaaaa')\n  3\n  >>> countConsonants('zabc')\n  2\n  >>> countConsonants('cbbb')\n  2\n  */\nconst countConsonants = (text) => {\n  if (text === undefined || text === null) {\n    return 0;\n  }\n  let vowel = 0;\n  let consonant = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[a-z]/i)) {\n      consonant++;\n    } else {\n      vowel++;\n    }\n  }\n  return consonant;\n};\n\n/*\n  Return number of words in a string\n  >>> countWords('abc')\n  1\n  >>> countWords('')\n  0\n  >>> countWords('aaaaa')\n  1\n  >>> countWords('abc def')\n  2\n  >>> countWords('abc def ghi')\n  3\n  >>> countWords('abc def ghi jkl')\n  4\n  */\nconst countWords = (text) => {\n  if (text === undefined || text === null) {\n    return 0;\n  }\n  let word = 0;\n  let space = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[a-z]/i)) {\n      word++;\n    } else {\n      space++;\n    }\n  }\n  return word + space;\n};\n\n/*\n  Return number of lower case letters in a string\n  >>> countLowerLetters('abc')\n  1\n  >>> countLowerLetters('')\n  0\n  >>> countLowerLetters('aaaaa')\n  1\n  >>> countLowerLetters('abc def')\n  2\n  >>> countLowerLetters('abc def ghi')\n  3\n  >>> countLowerLetters('abc def ghi jkl')\n  4\n  */\nconst countLowerLetters = (text) => {\n  if (text === undefined || text === null) {\n    return 0;\n  }\n  let lowerLetter = 0;\n  let upperLetter = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[a-z]/i)) {\n      lowerLetter++;\n    } else {\n      upperLetter++;\n    }\n  }\n  return lowerLetter + upperLetter;\n};\n\n/*\n  Return number of upper case letters in a string\n  >>> countUpperLetters('abc')\n  0\n  >>> countUpperLetters('')\n  0\n  >>> countUpperLetters('aaaaa')\n  1\n  >>> countUpperLetters('abc def')\n  1\n  >>> countUpperLetters('abc def ghi')\n  2\n  >>> countUpperLetters('abc def ghi jkl')\n  3\n  */\nconst countUpperLetters = (text) => {\n  if (text === undefined || text === null) {\n    return 0;\n  }\n  let upperLetter = 0;\n  let lowerLetter = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[a-z]/i)) {\n      lowerLetter++;\n    } else {\n      upperLetter++;\n    }\n  }\n  return upperLetter + lowerLetter;\n};\n\n/*\n  Return number of vowels in a string\n  >>> countVowels('abc')\n  1\n  >>> countVowels('')\n  0\n  >>> countVowels('aaaaa')\n  1\n  >>> countVowels('abc def')\n  1\n  >>> countVowels('abc def ghi')\n  1\n  "}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p\n}\n\nmodule.exports = modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (26 - (ch.charCodeAt(0) - \"a\".charCodeAt(0))) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string and returns encoded string with base26\n  */\nconst encodeBase26 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = (((r * 26) + String.fromCharCode(s.charCodeAt(i) + \"a\".charCodeAt(0)).charCodeAt(0)) % 26);\n  }\n  return String.fromCharCode(r);\n}\n\n/*\n  takes as input string and returns decoded string with base26\n  */\nconst decodeBase26 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = (((r * 26) + String.fromCharCode(s.charCodeAt(i) - \"a\".charCodeAt(0)).charCodeAt(0)) % 26);\n  }\n  return String.fromCharCode(r);\n}\n\n/*\n  takes as input string and returns encoded string with base36\n  */\nconst encodeBase36 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = (((r * 36) + String.fromCharCode(s.charCodeAt(i) + \"a\".charCodeAt(0)).charCodeAt(0)) % 36);\n  }\n  return String.fromCharCode(r);\n}\n\n/*\n  takes as input string and returns decoded string with base36\n  */\nconst decodeBase36 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = (((r * 36) + String.fromCharCode(s.charCodeAt(i) - \"a\".charCodeAt(0)).charCodeAt(0)) % 36);\n  }\n  return String.fromCharCode(r);\n}\n\n/*\n  takes as input string and returns encoded string with base62\n  */\nconst encodeBase62 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = (((r * 62) + String.fromCharCode(s.charCodeAt(i) + \"a\".charCodeAt(0)).charCodeAt(0)) % 62);\n  }\n  return String.fromCharCode(r);\n}\n\n/*\n  takes as input string and returns decoded string with base62\n  */\nconst decodeBase62 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = (((r * 62) + String.fromCharCode(s.charCodeAt(i) - \"a\".charCodeAt(0)).charCodeAt(0)) % 62);\n  }\n  return String.fromCharCode(r);\n}\n\n/*\n  takes as input string and returns encoded string with base64\n  */\nconst encodeBase64 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = (((r * 64) + String.fromCharCode(s.charCodeAt(i) + \"a\".charCodeAt(0)).charCodeAt(0)) % 64);\n  }\n  return String.fromCharCode(r);\n}\n\n/*\n  takes as input string and returns decoded string with base64\n  */\nconst decodeBase64 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = (((r * 64) + String.fromCharCode(s.charCodeAt(i) - \"a\".charCodeAt(0)).charCodeAt(0)) % 64);\n  }\n  return String.fromCharCode(r);\n}\n\nmodule.exports = {\n  encode_shift,\n  decode_shift,\n  encode_base26,\n  decode_base26,\n  encode_base36,\n  decode_base36,\n  encode_base62,\n  decode_base62,\n  encode_base64,\n  decode_base64,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  const vowels = ['a','e','i','o','u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n}\n\n/*\n  findVowels is a function that takes string and returns array of vowels.\n  >>> findVowels('')\n  []\n  >>> findVowels(\"abcdef\\nghijklm\")\n  ['a','e','i','o','u']\n  >>> findVowels('abcdef')\n  ['a','e','i','o','u']\n  >>> findVowels('aaaaa')\n  []\n  >>> findVowels('aaBAA')\n  ['a','e','i','o','u']\n  >>> findVowels('zbcd')\n  ['z','b','c','d']\n  */\nconst findVowels = (text) => {\n  const vowels = ['a','e','i','o','u'];\n  const wordArray = text.split(' ');\n  const newWordArray = [];\n  for (let i = 0; i < wordArray.length; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (wordArray[i].indexOf(vowels[j]) === 0) {\n        newWordArray.push(wordArray[i]);\n      }\n    }\n  }\n  return newWordArray;\n}\n\n/*\n  replaceVowels is a function that takes string and returns string with vowels.\n  >>> replaceVowels('')\n  ''\n  >>> replaceVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> replaceVowels('abcdef')\n  'abcdef'\n  >>> replaceVowels('aaaaa')\n  ''\n  >>> replaceVowels('aaBAA')\n  'BAA'\n  >>> replaceVowels('zbcd')\n  'zcd'\n  */\nconst replaceVowels = (text) => {\n  const vowels = ['a','e','i','o','u'];\n  const wordArray = text.split(' ');\n  const newWordArray = [];\n  for (let i = 0; i < wordArray.length; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (wordArray[i].indexOf(vowels[j]) === 0) {\n        newWordArray.push(vowels[j] + wordArray[i].substring(1));\n      } else {\n        newWordArray.push(wordArray[i]);\n      }\n    }\n  }\n  return newWordArray.join(' ');\n}\n\n/*\n  main is the main function.\n  >>> main()\n  ''\n  >>> main(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> main(\"abcdef\")\n  'abcdef'\n  >>> main(\"aaaaa\")\n  ''\n  >>> main(\"aaBAA\")\n  'BAA'\n  >>> main(\"zbcd\")\n  'zcd'\n  */\nconst main = () => {\n  const text = input();\n  const vowels = findVowels(text);\n  const output = remoevVowels(text);\n  const output = replaceVowels(output);\n  console.log(output);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const sum = l.reduce((acc, num) => acc + num, 0)\n  return sum < t\n}\n\nexport {\n  belowThreshold\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/**\n  * Subtract two numbers\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  *\n  * @example\n  *   //Add two numbers\n  *   >>> subtract(5, 7)\n  *   4\n  *\n  * @example\n  *   //Subtract two numbers\n  *   >>> subtract(3, 2)\n  *   1\n  *\n  * @example\n  *   //Subtract two numbers\n  *   >>> subtract(2, 3)\n  *   -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/**\n  * Divide two numbers\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  *\n  * @example\n  *   //Divide two numbers\n  *   >>> divide(5, 7)\n  *   2\n  *\n  * @example\n  *   //Divide two numbers\n  *   >>> divide(3, 2)\n  *   0.5\n  *\n  * @example\n  *   //Divide two numbers\n  *   >>> divide(2, 3)\n  *   0.6666666666666666\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n  * Multiply two numbers\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  *\n  * @example\n  *   //Multiply two numbers\n  *   >>> multiply(2, 3)\n  *   6\n  *\n  * @example\n  *   //Multiply two numbers\n  *   >>> multiply(5, 7)\n  *   35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/**\n  * Divide two numbers\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  *\n  * @example\n  *   //Divide two numbers\n  *   >>> divide(3, 2)\n  *   1.5\n  *\n  * @example\n  *   //Divide two numbers\n  *   >>> divide(2, 3)\n  *   0.6666666666666666\n  */\nconst divideInt = (x, y) => {\n  return x / y;\n};\n\n/**\n  * Returns a new function that calls f1 before calling f2.\n  *\n  * @param {Function} f1\n  * @param {Function} f2\n  * @returns {Function}\n  *\n  * @example\n  *   //Returns a new function that calls f1 before calling f2.\n  *   >>> f1 = (x, y) => {\n  *  ...   console.log(`f1: ${x} - ${y}`);\n  *  ...   return x - y;\n  *  ... }\n  *   >>> f2 = (x, y) => {\n  *  ...   console.log(`f2: ${x} - ${y}`);\n  *  ...   return x - y;\n  *  ... }\n  *   >>> f3 = function (x, y) {\n  *  ...   console.log(`f3: ${x} - ${y}`);\n  *  ...   return x - y;\n  *  ... }\n  *   >>> multiply(f1, f2)()\n  *   f1: 3 - 2\n  *   >>> multiply(f1, f3)()\n  *   f1: 3 - 2\n  *   >>> multiply(f3, f2)()\n  *   f3: 3 - 2\n  *   >>> multiply(f3, f3)()\n  *   f3: 3 - 2\n  */\nconst before = (f1, f2) => {\n  return (...args) => f1(...args) < f2(...args);\n};\n\n/**\n  * Returns a new function that calls f1 after calling f2.\n  *\n  * @param {Function} f1\n  * @param {Function} f2\n  * @returns {Function}\n  *\n  * @example\n  *   //Returns a new function that calls f1 after calling f2.\n  *   >>> f1 = (x, y) => {\n  *  ...   console.log(`f1: ${x} - ${y}`);\n  *  ...   return x - y;\n  *  ... }\n  *   >>> f2 = (x, y) => {\n  *  ...   console.log(`f2: ${x} - ${y}`);\n  *  ...   return x - y;\n  *  ... }\n  *   >>> f3 = function (x, y) {\n  *  ...   console.log(`f3: ${x} - ${y}`);\n  *  ...   return x - y;\n  *  ... }\n  *   >>> multiply(f1, f2)()\n  *   f1: 3 - 2\n  *   >>> multiply(f1, f3)()\n  *   f2: 3 - 2\n  *   >>> multiply(f3, f2)()\n  *   f3: 3 - 2\n  *   >>> multiply(f3, f3)()\n  *   f3: 3 - 2\n  */\nconst after = (f1, f2) => {\n  return (...args) => f2(...args) < f1(...args);\n};\n\n/**\n  * Returns a new function that calls f1 before calling f2.\n  *\n  * @param {Function} f1\n  * @param {Function} f2\n  * @returns {Function}\n  *\n  * @example\n  *   //Returns a new function that calls f1 before calling f2.\n  *   >>> f1 = (x, y) => {\n  *  ...   console.log(`f1: ${x} - ${y}`);\n  *  ...   return x - y;\n  *  ..."}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const n = s0.length;\n    if (n!== s1.length) return false;\n    const hash0 = new Map();\n    const hash1 = new Map();\n    for (let i = 0; i < n; i++) {\n        hash0.set(s0[i], i);\n        hash1.set(s1[i], i);\n    }\n    for (let i = 0; i < n; i++) {\n        if (hash0.get(s0[i])!== hash1.get(s1[i])) return false;\n    }\n    return true;\n};\n\n/*\n  Check if a word contains all the characters of another word.\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('abcd', 'ddddddd')\n  true\n  >>> sameChars('abcd', 'dddddddz')\n  true\n  >>> sameChars('abcd', 'dddddddzz')\n  true\n  >>> sameChars('abcd', 'dddddddzzz')\n  true\n  >>> sameChars('abcd', 'ddddddd')\n  true\n  >>> sameChars('abcd', 'dddddddzzz')\n  true\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'ddddddd')\n  true\n  >>> sameChars('eabcd', 'dddddddz')\n  true\n  >>> sameChars('eabcd', 'dddddddzz')\n  true\n  >>> sameChars('eabcd', 'dddddddzzz')\n  true\n  >>> sameChars('eabcd', 'ddddddd')\n  true\n  >>> sameChars('eabcd', 'dddddddzzz')\n  true\n  */\nconst containsAll = (s0, s1) => {\n    const n = s0.length;\n    if (n!== s1.length) return false;\n    const hash0 = new Map();\n    const hash1 = new Map();\n    for (let i = 0; i < n; i++) {\n        hash0.set(s0[i], i);\n        hash1.set(s1[i], i);\n    }\n    for (let i = 0; i < n; i++) {\n        if (hash0.get(s0[i])!== hash1.get(s1[i])) return false;\n    }\n    return true;\n};\n\n/*\n  Check if a word contains only the characters of another word.\n  >>> sameChars('abcd', 'ddddddd')\n  true\n  >>> sameChars('abcd', 'dddddddz')\n  true\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabce')\n  false\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  true\n  >>> sameChars('eabcd', 'ddddddd')\n  true\n  >>> sameChars('eabcd', 'dddddddz')\n  true\n  >>> sameChars('eabcd', 'dddddddzz')\n  true\n  >>> sameChars('eabcd', 'dddddddzzz')\n  true\n  >>> sameChars('eabcd', 'ddddddd')\n  true\n  >>> sameChars('eabcd', 'dddddddzzz')\n  true\n  >>> sameChars('abcd', 'ddddddd')\n  false\n  >>> sameChars('abcd', 'dddddddzzz')\n  false\n  */\nconst containsOnly = (s0, s1) => {\n    const n = s0.length;\n    if (n!== s1.length) return false;\n    const hash0 = new Map();\n    const hash1 = new Map();\n    for (let i = 0; i < n; i++) {\n        hash0.set(s0[i], i);\n        hash1.set(s1[i], i);\n    }\n    for (let i = 0; i < n; i++) {\n        if (hash0.get(s0[i])!== hash1.get(s1[i])) return false;\n    }\n    return true;\n};\n\nexport {\n    containsAll,\n    containsOnly,\n    sameChars\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\nconsole.log(fib(10))\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n    let open = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '<') {\n            open++;\n        }\n        if (brackets[i] === '>') {\n            if (open === 0) {\n                return false;\n            }\n            open--;\n        }\n    }\n    return open === 0;\n}\n\n/*\n  If parentheses are correct, returns true.\n  If parentheses are not correct, returns false.\n\n  >>> checkParentheses(\"(((())))\")\n  true\n  >>> checkParentheses(\"(()()())\")\n  true\n  >>> checkParentheses(\"(((())\")\n  false\n  >>> checkParentheses(\"(((())\")\n  false\n  >>> checkParentheses(\"(((()()))\")\n  true\n  */\nconst checkParentheses = (input) => {\n    let stack = [];\n    for (let i = 0; i < input.length; i++) {\n        if (input[i] === '(') {\n            stack.push(input[i]);\n        } else if (input[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\n/*\n  Returns the number of brackets needed to match the brackets in brackets.\n  For example, \"{{{}}}\", has 3 brackets: 1 opening, 1 closing, and 1\n  brackets for each.\n\n  >>> numberOfBrackets(\"{{{}}}\")\n  3\n  >>> numberOfBrackets(\"{{{{}\")\n  2\n  >>> numberOfBrackets(\"{{{{}\")\n  2\n  >>> numberOfBrackets(\"{}\")\n  1\n  >>> numberOfBrackets(\"{}}\")\n  1\n  >>> numberOfBrackets(\"{}}{}\")\n  2\n  >>> numberOfBrackets(\"{}}{}\")\n  2\n  >>> numberOfBrackets(\"{{{{{{{{}}\")\n  4\n  >>> numberOfBrackets(\"{{{{{{{{{{}}}}}}}}\")\n  6\n  >>> numberOfBrackets(\"{{{{{{{{{{{{{{{}}}}}}}}}}}}}\")\n  10\n  >>> numberOfBrackets(\"{}{}\")\n  1\n  */\nconst numberOfBrackets = (brackets) => {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '{') {\n            count++;\n        } else if (brackets[i] === '}') {\n            count--;\n        }\n    }\n    return count;\n}\n\n/*\n  If parentheses are correct, returns the number of brackets in parentheses\n  needed to match the brackets in brackets.\n  If parentheses are not correct, returns -1.\n\n  >>> checkParentheses(\"{{{}}}\")\n  3\n  >>> checkParentheses(\"{{{}}\")\n  1\n  >>> checkParentheses(\"{{{}}}\")\n  -1\n  >>> checkParentheses(\"{{{}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{}}\")\n  -1\n  >>> checkParentheses(\"{}}\")\n  -1\n  >>> checkParentheses(\"{}}{}\")\n  -1\n  >>> checkParentheses(\"{}}{}\")\n  -1\n  >>> checkParentheses(\"{}}{}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{{{}}}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{}{}\")\n  -1\n  */\nconst checkParenthesesCount = (brackets) => {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '{') {\n            count++;\n        } else if (brackets[i] === '}') {\n            count--;\n        }\n    }\n    return count;\n}\n\n/*\n  If brackets are correct, returns the number of open and closing brackets in\n  the brackets.\n  If brackets are not correct, returns -1.\n\n  >>> checkParentheses(\"{{{}}}\")\n  3\n  >>> checkParentheses(\"{}{}\")\n  -1\n  >>> checkParentheses(\"{{{}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{{{}}}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{{{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}\")\n  -1\n  >>> checkParentheses(\"{}{}\")\n  -1\n  */\nconst checkParenthesesCount = (brackets) => {\n    let count = 0;\n    for ("}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n    let prev = l[0]\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < prev) {\n            return false\n        }\n        prev = l[i]\n    }\n    return true\n}\n\n/*Return true iff the list contains only even numbers.\n  >>> even([2, 4, 6, 8])\n  true\n  >>> even([1, 2, 4, 5])\n  false\n  */\nconst even = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2!== 0) {\n            return false\n        }\n    }\n    return true\n}\n\n/*Return true iff the list contains only odd numbers.\n  >>> odd([2, 4, 6, 8])\n  false\n  >>> odd([1, 2, 4, 5])\n  true\n  */\nconst odd = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 === 0) {\n            return false\n        }\n    }\n    return true\n}\n\n/*Return true iff the list contains all elements of another list.\n  >>> all([1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> all([1, 2, 3, 4, 5, 6, 7, 8])\n  true\n  */\nconst all = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        if (l.indexOf(l[i]) === -1) {\n            return false\n        }\n    }\n    return true\n}\n\n/*Return true iff the list contains no elements of another list.\n  >>> none([1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> none([1, 2, 3, 4, 5, 6, 7, 8])\n  true\n  */\nconst none = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        if (l.indexOf(l[i])!== -1) {\n            return false\n        }\n    }\n    return true\n}\n\n/*Return true iff the list contains no elements of another list.\n  >>> none([1, 2, 3, 4, 5, 6, 7, 8])\n  true\n  >>> none([1, 2, 3, 4, 5, 6, 7])\n  false\n  */\nconst any = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        if (l.indexOf(l[i])!== -1) {\n            return true\n        }\n    }\n    return false\n}\n\n/*Return true iff the list contains at least one element of another list.\n  >>> one([1, 2, 3, 4, 5, 6, 7])\n  true\n  >>> one([1, 2, 3, 4, 5, 6, 7, 8])\n  true\n  >>> one([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  */\nconst one = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        if (l.indexOf(l[i])!== -1) {\n            return true\n        }\n    }\n    return false\n}\n\n/*Return true iff the list contains at least two elements of another list.\n  >>> two([1, 2, 3, 4, 5, 6, 7])\n  true\n  >>> two([1, 2, 3, 4, 5, 6, 7, 8])\n  true\n  >>> two([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  */\nconst two = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        if (l.indexOf(l[i])!== -1 && l.indexOf(l[i])!== -1) {\n            return true\n        }\n    }\n    return false\n}\n\n/*Return the largest element of the list.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  >>> max([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> max([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  */\nconst max = (l) => {\n    let max = 0\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n/*Return the smallest element of the list.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  >>> min([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> min([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  */\nconst min = (l) => {\n    let min = Number.MAX_VALUE\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i]\n        }\n    }\n    return min\n}\n\nmodule.exports = {\n    even,\n    odd,\n    all,\n    none,\n    any,\n    one,\n    two,\n    max,\n    min\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len = l1.length;\n  const arr = new Array(len);\n  let i = 0;\n  while (i < len) {\n    arr[i] = l1[i];\n    i++;\n  }\n  i = 0;\n  while (i < len) {\n    if (arr[i]!== l2[i]) {\n      let index = arr.indexOf(l2[i], i);\n      if (index!== -1) {\n        arr.splice(index, 1);\n      }\n    }\n    i++;\n  }\n  return arr;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 2;\n  let j = n;\n  while (j % i === 0) {\n    j = j / i;\n    i++;\n  }\n  return j;\n};\n\nconsole.log(largetsPrimeFactor(13195)); // 29\nconsole.log(largetsPrimeFactor(2048)); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  while (sum <= n) {\n    sum += 1;\n  }\n  return sum;\n};\n\n/*\n  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n  Find the sum of all the primes below two million.\n  */\n\nconst sumPrimes = (n) => {\n  const result = [];\n  const prime = (num) => {\n    let sum = 1;\n    for (let i = 2; i <= num; i++) {\n      if (num % i === 0) {\n        sum += num / i;\n      }\n    }\n    return sum;\n  };\n  const isPrime = (num) => {\n    let i = 2;\n    while (i <= num) {\n      if (num % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  let primeCount = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primeCount++;\n    }\n  }\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(prime(i))) {\n      result.push(prime(i));\n    }\n  }\n  return result;\n};\n\n/*\n  Find the difference between the sum of the squares of the first one hundred\n  natural numbers and the square of the sum.\n  >>> squareDifference(100)\n  25164150\n  >>> squareDifference(1000)\n  9997567\n  >>> squareDifference(5000)\n  49872490\n  */\nconst squareDifference = (n) => {\n  let result = 0;\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  for (let i = 1; i <= n; i++) {\n    result += (i * i);\n  }\n  return result - sum * sum;\n};\n\n/*\n  The sum of the squares of the first one hundred natural numbers is,\n  1^2 + 2^2 +... + 100^2 = ((1+100)^2) - (1^2) = ((1+100)^2) - 1 =\n  (1+100)(1+100) - 1 = (1+100)^2 - 1.\n  Find the sum of the first one hundred natural numbers which\n  cannot be written as the sum of two square numbers.\n  */\nconst sumOfSquares = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i += 1;\n  }\n  for (let i = 1; i <= n; i++) {\n    if (sum - i * i!= sum) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\nconst solve = (n) => {\n  const primes = sumPrimes(n);\n  const sumOfSquares = sumOfSquares(n);\n  let i = 1;\n  while (i <= n) {\n    const sum = sumToN(i);\n    const squareDifference = squareDifference(sum);\n    if (squareDifference === sumOfSquares) {\n      const squareSum = sum * sum;\n      if (squareSum > sum) {\n        console.log(sum);\n      }\n    }\n    i++;\n  }\n};\n\nsolve(1);\nsolve(2);\nsolve(3);\nsolve(4);\nsolve(5);\nsolve(6);\nsolve(7);\nsolve(8);\nsolve(9);\nsolve(10);\nsolve(11);\nsolve(12);\nsolve(13);\nsolve(14);\nsolve(15);\nsolve(16);\nsolve(17);\nsolve(18);\nsolve(19);\nsolve(20);\nsolve(21);\nsolve(22);\nsolve(23);\nsolve(24);\nsolve(25);\nsolve(26);\nsolve(27);\nsolve(28);\nsolve(29);\nsolve(30);\nsolve(31);\nsolve(32);\nsolve(33);\nsolve(34);\nsolve(35);\nsolve(36);\nsolve(37);\nsolve(38);\nsolve(39);\nsolve(40);\nsolve(41);\nsolve(42);\nsolve(43);\nsolve(44);\nsolve(45);\nsolve(46);\nsolve(47);\nsolve(48);\nsolve(49);\nsolve(50);\nsolve(51);\nsolve(52);\nsolve(53);\nsolve(54);\nsolve(55);\nsolve(56);\nsolve(57);\nsolve(58);\nsolve(59);\nsolve(60);\nsolve(61);\nsolve(62);\nsolve(63);\nsolve(64);\nsolve(65);\nsolve(66);\nsolve(67);\nsolve(68);\nsolve(69);\nsolve(70);\nsolve(71);\nsolve(72);\nsolve(73);\nsolve(74);\nsolve(75);\nsolve(76);\nsolve(77);\nsolve(78);\nsolve(79);\nsolve(80);\nsolve(81);\nsolve(82);\nsolve(83);\nsolve(84);\nsolve(85);\nsolve(86);\nsolve(87);\nsolve(88);\nsolve(89);\nsolve(90);\nsolve(91);\nsolve(92);\nsolve(93);\nsolve(94);\nsolve(95);\nsolve(96);\nsolve(97);\nsolve(98);\nsolve(99);\nsolve(100);\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  if (typeof brackets!=='string') {\n    throw new Error('input should be a string')\n  }\n\n  const len = brackets.length\n  if (len === 0) {\n    return true\n  }\n  let openingBrackets = 0\n  let lastOpeningBracket = 0\n  for (let i = 0; i < len; i++) {\n    if (brackets[i] === '(') {\n      openingBrackets++\n      lastOpeningBracket = i\n    } else if (brackets[i] === ')') {\n      if (openingBrackets === 0) {\n        return false\n      }\n      openingBrackets--\n    }\n  }\n  return openingBrackets === 0\n}\n\nexport default correctBracketnig\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const length = xs.length\n  const derivative = []\n  for (let i = 1; i < length; i++) {\n    derivative.push(xs[i] * (length - i))\n  }\n  return derivative\n}\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> eval([3, 1, 2, 4, 5], 5)\n  22\n  >>> eval([1, 2, 3], -1)\n  0\n  >>> eval([1, 2, 3], 1)\n  6\n  >>> eval([1, 2, 3], 2)\n  10\n  >>> eval([1, 2, 3], 3)\n  12\n  >>> eval([1, 2, 3], 4)\n  16\n  >>> eval([1, 2, 3], 5)\n  22\n  >>> eval([1, 2, 3], 6)\n  26\n  >>> eval([1, 2, 3], 7)\n  30\n  >>> eval([1, 2, 3], 8)\n  34\n  >>> eval([1, 2, 3], 9)\n  38\n  >>> eval([1, 2, 3], 10)\n  42\n  >>> eval([1, 2, 3], 11)\n  46\n  >>> eval([1, 2, 3], 12)\n  50\n  >>> eval([1, 2, 3], 13)\n  54\n  >>> eval([1, 2, 3], 14)\n  58\n  >>> eval([1, 2, 3], 15)\n  62\n  >>> eval([1, 2, 3], 16)\n  66\n  >>> eval([1, 2, 3], 17)\n  70\n  >>> eval([1, 2, 3], 18)\n  74\n  >>> eval([1, 2, 3], 19)\n  78\n  >>> eval([1, 2, 3], 20)\n  82\n  >>> eval([1, 2, 3], 21)\n  86\n  >>> eval([1, 2, 3], 22)\n  90\n  >>> eval([1, 2, 3], 23)\n  94\n  >>> eval([1, 2, 3], 24)\n  98\n  >>> eval([1, 2, 3], 25)\n  102\n  >>> eval([1, 2, 3], 26)\n  106\n  >>> eval([1, 2, 3], 27)\n  110\n  >>> eval([1, 2, 3], 28)\n  114\n  >>> eval([1, 2, 3], 29)\n  118\n  >>> eval([1, 2, 3], 30)\n  122\n  >>> eval([1, 2, 3], 31)\n  126\n  >>> eval([1, 2, 3], 32)\n  130\n  >>> eval([1, 2, 3], 33)\n  134\n  >>> eval([1, 2, 3], 34)\n  138\n  >>> eval([1, 2, 3], 35)\n  142\n  >>> eval([1, 2, 3], 36)\n  146\n  >>> eval([1, 2, 3], 37)\n  150\n  >>> eval([1, 2, 3], 38)\n  154\n  >>> eval([1, 2, 3], 39)\n  158\n  >>> eval([1, 2, 3], 40)\n  162\n  >>> eval([1, 2, 3], 41)\n  166\n  >>> eval([1, 2, 3], 42)\n  170\n  >>> eval([1, 2, 3], 43)\n  174\n  >>> eval([1, 2, 3], 44)\n  178\n  >>> eval([1, 2, 3], 45)\n  182\n  >>> eval([1, 2, 3], 46)\n  186\n  >>> eval([1, 2, 3], 47)\n  190\n  >>> eval([1, 2, 3], 48)\n  194\n  >>> eval([1, 2, 3], 49)\n  198\n  >>> eval([1, 2, 3], 50)\n  202\n  >>> eval([1, 2, 3], 51)\n  206\n  >>> eval([1, 2, 3], 52)\n  210\n  >>> eval([1, 2, 3], 53)\n  214\n  >>> eval([1, 2, 3], 54)\n  218\n  >>> eval([1, 2, 3], 55)\n  222\n  >>> eval([1, 2, 3], 56)\n  226\n  >>> eval([1, 2, 3], 57)\n  230\n  >>> eval([1, 2, 3], 58)\n  234\n  >>> eval([1, 2, 3], 59)\n  238\n  >>> eval([1, 2, 3], 60)\n  242\n  >>> eval([1, 2, 3], 61)\n  246\n  >>> eval([1, 2, 3], 62)\n  250\n  >>> eval([1, 2, 3], 63)\n  254\n  >>> eval([1, 2, 3], 64)\n  258\n  >>> eval([1, 2, 3], 65)\n  262\n  >>> eval([1, 2, 3], 66)\n  266\n  >>> eval([1, 2, 3], 67)\n  270\n  >>> eval([1, 2, 3], 68)\n  274\n  >>> eval([1, 2, 3], 69)\n  278\n  >>> eval([1, 2, 3], 70)\n  282\n  >>> eval([1, 2, 3], 71)\n  286\n  >>> eval([1, 2, 3], 72)\n  290\n  >>> eval([1, 2, 3], 73)\n  294\n  >>> eval([1, 2, 3], 74)\n  298\n  >>> eval([1, 2, 3], 75)\n  302\n  >>> eval([1, 2, 3], 76)\n  306\n  >>> eval([1, 2, 3], 77)\n  310\n  >>> eval([1, 2, 3], 78)\n  314\n  >>> eval([1, 2, 3], 79)\n  318\n  >>> eval([1, 2, 3], 80)\n  322\n  >>> eval([1, 2, 3], 81)\n  326\n  >>> eval([1, 2, 3], 82)\n  330"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nconsole.log(fibfib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      cnt++;\n    }\n    if (i === s.length - 1 && s[i] === 'y') {\n      cnt++;\n    }\n  }\n  return cnt;\n};\n\nmodule.exports = vowelsConut;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  const length = x.length\n  const mod = length % shift\n  const reversed = mod === 0? x : x.slice(0, length - mod).concat(x.slice(length - mod, length))\n  return reversed.reverse()\n}\n\n/*\n  Reverse the digits of the number x, then multiply all digits by d.\n  If d > 1, multiply all digits by d - 1.\n  >>> reverseDigits(3)\n  3\n  >>> reverseDigits(3, 2)\n  9\n  >>> reverseDigits(3, 3)\n  3\n  >>> reverseDigits(9, 2)\n  7\n  >>> reverseDigits(9, 3)\n  3\n  >>> reverseDigits(9, 4)\n  3\n  */\nconst reverseDigits = (x, d = 1) => {\n  let result = 0\n  const len = x.length\n  for (let i = len - 1; i >= 0; i--) {\n    result = result * 10 + x[i]\n    if (d > 1) result *= d - 1\n  }\n  return result\n}\n\n/*\n  Return the number of bits set to 1 in the binary representation of x.\n  >>> countBits(0)\n  0\n  >>> countBits(2)\n  1\n  >>> countBits(3)\n  2\n  >>> countBits(7)\n  3\n  >>> countBits(10)\n  2\n  >>> countBits(11)\n  3\n  >>> countBits(12)\n  4\n  >>> countBits(20)\n  5\n  >>> countBits(255)\n  8\n  >>> countBits(256)\n  9\n  >>> countBits(65535)\n  16\n  >>> countBits(65536)\n  17\n  >>> countBits(2147483647)\n  31\n  >>> countBits(2147483648)\n  32\n  >>> countBits(4294967295)\n  32\n  >>> countBits(4294967296)\n  33\n  >>> countBits(9223372036854775807)\n  63\n  >>> countBits(9223372036854775808)\n  64\n  >>> countBits(18446744073709551615)\n  64\n  >>> countBits(18446744073709551616)\n  65\n  >>> countBits(4294967295, 4)\n  9\n  >>> countBits(4294967296, 4)\n  9\n  >>> countBits(4294967295, 5)\n  16\n  >>> countBits(4294967296, 5)\n  16\n  >>> countBits(9223372036854775807, 5)\n  32\n  >>> countBits(9223372036854775808, 5)\n  32\n  >>> countBits(9223372036854775807, 6)\n  64\n  >>> countBits(9223372036854775808, 6)\n  64\n  >>> countBits(18446744073709551615, 6)\n  64\n  >>> countBits(18446744073709551616, 6)\n  64\n  */\nconst countBits = (x, bits = 32) => {\n  let result = 0\n  for (let i = bits - 1; i >= 0; i--) {\n    result += (x >>> i) & 1\n  }\n  return result\n}\n\n/*\n  Return the number of set bits in the binary representation of x.\n  >>> countBits(0)\n  0\n  >>> countBits(2)\n  1\n  >>> countBits(3)\n  2\n  >>> countBits(7)\n  3\n  >>> countBits(10)\n  2\n  >>> countBits(11)\n  3\n  >>> countBits(12)\n  4\n  >>> countBits(20)\n  5\n  >>> countBits(255)\n  8\n  >>> countBits(256)\n  9\n  >>> countBits(65535)\n  16\n  >>> countBits(65536)\n  17\n  >>> countBits(2147483647)\n  31\n  >>> countBits(2147483648)\n  32\n  >>> countBits(4294967295)\n  32\n  >>> countBits(4294967296)\n  33\n  >>> countBits(9223372036854775807)\n  63\n  >>> countBits(9223372036854775808)\n  64\n  >>> countBits(18446744073709551615)\n  64\n  >>> countBits(18446744073709551616)\n  65\n  >>> countBits(4294967295, 4)\n  9\n  >>> countBits(4294967296, 4)\n  9\n  >>> countBits(4294967295, 5)\n  16\n  >>> countBits(4294967296, 5)\n  16\n  >>> countBits(9223372036854775807, 5)\n  32\n  >>> countBits(9223372036854775808, 5)\n  32\n  >>> countBits(18446744073709551615, 5)\n  32\n  >>> countBits(18446744073709551616, 5)\n  32\n  */\nconst countBits = (x, bits = 32) => {\n  let result = 0\n  for (let i = bits - 1; i >= 0; i--) {\n    result += (x >>> i) & 1\n  }\n  return result\n}\n\nmodule.exports = {\n  circularSihft,\n  reverseDigits,\n  countBits,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const distribution = {\n    apples: 0,\n    oranges: 0,\n    mango: 0,\n    fruit: 0,\n    fruitType: 0,\n  };\n\n  const totalFruit = parseInt(s);\n  const totalFruitType = parseInt(n);\n  const totalFruitApples = parseInt(s.slice(0, s.indexOf('apples')));\n  const totalFruitOranges = parseInt(s.slice(s.indexOf('apples') + 'apples'.length + 1, s.indexOf('oranges')));\n  const totalFruitMango = parseInt(s.slice(s.indexOf('oranges') + 'oranges'.length + 1, s.indexOf('mango')));\n\n  if (totalFruitType === 0) {\n    distribution.fruit = totalFruit - totalFruitApples - totalFruitOranges;\n  } else if (totalFruitType === 1) {\n    distribution.fruit = totalFruit - totalFruitApples;\n  } else if (totalFruitType === 2) {\n    distribution.fruit = totalFruit - totalFruitOranges;\n  } else if (totalFruitType === 3) {\n    distribution.fruit = totalFruit - totalFruitMango;\n  }\n\n  return distribution;\n};\n\nexport default fruitDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  let minValue = -1;\n  let minIndex = -1;\n  let currentIndex = -1;\n  let currentValue = -1;\n  arr.forEach((node, index) => {\n    if (node === 0) {\n      currentIndex = index;\n      currentValue = 0;\n    } else {\n      if (currentValue < node) {\n        currentIndex = index;\n        currentValue = node;\n      }\n    }\n  });\n  if (currentIndex!== -1) {\n    result.push([currentValue, currentIndex]);\n  }\n  return result;\n};\n\nconst find = (arr, value) => {\n  let result = [];\n  arr.forEach((node, index) => {\n    if (node === value) {\n      result.push(index);\n    }\n  });\n  return result;\n};\n\nconst main = async () => {\n  let input = [4, 2, 3];\n  let output = pluck(input);\n  console.log(`${JSON.stringify(output)}`);\n  let result = find(output, 2);\n  console.log(`${JSON.stringify(result)}`);\n  input = [1, 2, 3];\n  output = pluck(input);\n  console.log(`${JSON.stringify(output)}`);\n  result = find(output, 2);\n  console.log(`${JSON.stringify(result)}`);\n  input = [];\n  output = pluck(input);\n  console.log(`${JSON.stringify(output)}`);\n  result = find(output, 2);\n  console.log(`${JSON.stringify(result)}`);\n  return 'ok';\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const getMin = (a, b) => a < b? a : b\n  const frequency = (val, arr) => arr.filter((x) => x === val)\n  const greaterThanZero = (arr) => arr.filter((x) => x > 0)\n\n  const max = (a, b) => a > b? a : b\n  const min = (a, b) => a < b? a : b\n\n  const maxFrequency = (arr) => arr.map(frequency).reduce((max, f) => max(f, max))\n  const minFrequency = (arr) => arr.map(frequency).reduce((min, f) => min(f, min))\n\n  const maxGreaterThanZero = (arr) => arr.map(greaterThanZero).reduce((max, f) => max(f, max))\n  const minGreaterThanZero = (arr) => arr.map(greaterThanZero).reduce((min, f) => min(f, min))\n\n  const maxGreaterThanMinFrequency = (arr) => arr.map(greaterThanZero).reduce((max, f) => max(f, max), minFrequency)\n  const minGreaterThanMinFrequency = (arr) => arr.map(greaterThanZero).reduce((min, f) => min(f, min), maxFrequency)\n\n  const maxGreaterThanMinGreaterThanZero = (arr) => arr.map(greaterThanZero).reduce((max, f) => max(f, max), minGreaterThanZero)\n  const minGreaterThanMinGreaterThanZero = (arr) => arr.map(greaterThanZero).reduce((min, f) => min(f, min), maxGreaterThanZero)\n\n  const maxGreaterThanMinGreaterThanMinFrequency = (arr) => arr.map(greaterThanZero).reduce((max, f) => max(f, max), minGreaterThanMinFrequency)\n  const minGreaterThanMinGreaterThanMinFrequency = (arr) => arr.map(greaterThanZero).reduce((min, f) => min(f, min), maxGreaterThanMinFrequency)\n\n  const maxGreaterThanMinGreaterThanMinGreaterThanZero = (arr) => arr.map(greaterThanZero).reduce((max, f) => max(f, max), minGreaterThanMinGreaterThanZero)\n  const minGreaterThanMinGreaterThanMinGreaterThanZero = (arr) => arr.map(greaterThanZero).reduce((min, f) => min(f, min), maxGreaterThanMinGreaterThanZero)\n\n  const maxGreaterThanMinGreaterThanMinGreaterThanMinFrequency = (arr) => arr.map(greaterThanZero).reduce((max, f) => max(f, max), minGreaterThanMinGreaterThanMinFrequency)\n  const minGreaterThanMinGreaterThanMinGreaterThanMinFrequency = (arr) => arr.map(greaterThanZero).reduce((min, f) => min(f, min), maxGreaterThanMinGreaterThanMinFrequency)\n\n  const maxGreaterThanMinGreaterThanMinGreaterThanMinGreaterThanZero = (arr) => arr.map(greaterThanZero).reduce((max, f) => max(f, max), minGreaterThanMinGreaterThanMinGreaterThanZero)\n  const minGreaterThanMinGreaterThanMinGreaterThanMinGreaterThanZero = (arr) => arr.map(greaterThanZero).reduce((min, f) => min(f, min), maxGreaterThanMinGreaterThanMinGreaterThanZero)\n\n  const maxGreaterThanMinGreaterThanMinGreaterThanMinGreaterThanMinFrequency = (arr) => arr.map(greaterThanZero).reduce((max, f) => max(f, max), minGreaterThanMinGreaterThanMinGreaterThanMinFrequency)\n  const minGreaterThanMinGreaterThanMinGreaterThanMinGreaterThanMinFrequency = (arr) => arr.map(greaterThanZero).reduce((min, f) => min(f, min), maxGreaterThanMinGreaterThanMinGreaterThanMinFrequency)\n\n  let maxIdx = -1\n  let minIdx = -1\n\n  let maxFreq = 0\n  let minFreq = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    const frequency = frequency(lst[i], lst)\n    const greaterThanZero = greaterThanZero(lst[i])\n    const greaterThanMinFrequency = greaterThanMinFrequency(lst[i])\n    const greaterThanMinGreaterThanZero = greaterThanMinGreaterThanZero(lst[i])\n    const greaterThanMinGreaterThanMinFrequency = greaterThanMinGreaterThanMinFrequency(lst[i])\n\n    if (greaterThanZero) {\n      if (greaterThanMinFrequency) {\n        if (greaterThanMinGreaterThanZero) {\n          if (greaterThanMinGreaterThanMinFrequency) {\n            if (greaterThanMinGreaterThanMinGreaterThanZero) {\n              maxIdx = i\n              maxFreq = frequency(lst[i], lst)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (maxIdx === -1) return -1\n\n  for (let i = 0; i <"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  if (lst.length === 0) {\n    return []\n  }\n  const len = lst.length\n  const arr = new Array(len)\n  let i = 0\n  let min = lst[0]\n  let max = lst[0]\n  for (let j = 1; j < len; j++) {\n    if (lst[j] < min) {\n      min = lst[j]\n    }\n    if (lst[j] > max) {\n      max = lst[j]\n    }\n    arr[i++] = Math.min(min, max)\n  }\n  return arr\n}\n\n// const stranegoSrtList = (lst) => {\n//   if (lst.length === 0) {\n//     return []\n//   }\n//   const len = lst.length\n//   const arr = new Array(len)\n//   let min = lst[0]\n//   let max = lst[0]\n//   for (let j = 1; j < len; j++) {\n//     if (lst[j] < min) {\n//       min = lst[j]\n//     }\n//     if (lst[j] > max) {\n//       max = lst[j]\n//     }\n//     arr[j] = Math.min(min, max)\n//   }\n//   return arr\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a + b <= c) {\n    return -1\n  }\n\n  const s1 = a + b;\n  const s2 = b + c;\n  const s3 = c + a;\n\n  if (s1 > s2) {\n    if (s2 > s3) {\n      return Math.round((s1 * s2) / 2)\n    }\n    else {\n      return Math.round((s1 * s3) / 2)\n    }\n  }\n  else {\n    if (s1 > s3) {\n      return Math.round((s2 * s1) / 2)\n    }\n    else {\n      return Math.round((s2 * s3) / 2)\n    }\n  }\n}\n\nconst main = () => {\n  const a = parseInt(process.argv[2])\n  const b = parseInt(process.argv[3])\n  const c = parseInt(process.argv[4])\n\n  console.log(triangleArea(a, b, c))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length\n  if (len % 2) return false\n  const sum = q.reduce((acc, elem) => acc + elem, 0)\n  if (sum > w) return false\n  let result = true\n  let i = 0\n  let j = len - 1\n  let k = 0\n  while (i < len / 2) {\n    if (q[i] > q[j]) {\n      result = result && (q[i] + q[j]) <= w\n      i++\n      j--\n    } else {\n      result = result && (q[j] + q[i]) <= w\n      j--\n      i++\n    }\n  }\n  return result\n}\n\nconsole.log(willItFly([3, 2, 3], 9))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  const len = arr.length\n  let change = 0\n  for (let i = 0; i < len / 2; i++) {\n    if (arr[i]!== arr[len - 1 - i]) {\n      change++\n    }\n  }\n  return change\n}\n\nconsole.log(msallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(msallestChange([1, 2, 3, 2, 1]))\nconsole.log(msallestChange([1, 2, 3, 4, 3, 2, 2, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  let result = [];\n  if(lst1.length === lst2.length) {\n    result = lst1;\n  } else if(lst1.length > lst2.length) {\n    result = lst1.slice(0, lst2.length);\n  } else {\n    result = lst2.slice(0, lst1.length);\n  }\n  return result;\n}\n\nconst ottalMatchTest = [\n  ['hi', 'hI'],\n  ['hi', 'Hi'],\n  ['hi', 'hI', 'hi', 'Hi'],\n  ['hi', 'hi', 'Hi', 'hi', 'Hi']\n];\n\nconsole.log(ottalMatchTest);\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  the highest total number of chars in the all strings of the list less than the\n  other list.\n\n  if the two lists have the same total number of chars, return the first list.\n\n  Examples\n  ottalMax([], []) ➞ []\n  ottalMax(['hi', 'admin'], ['hI', 'Hi']) ➞ [ 'hi', 'hI']\n  ottalMax(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMax(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMax(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMax = (lst1, lst2) => {\n  let result = [];\n  if(lst1.length === lst2.length) {\n    result = lst1;\n  } else if(lst1.length > lst2.length) {\n    result = lst1.slice(0, lst2.length);\n  } else {\n    result = lst2.slice(0, lst1.length);\n  }\n  return result;\n}\n\nconst ottalMaxTest = [\n  ['hi', 'hI'],\n  ['hi', 'Hi'],\n  ['hi', 'hI', 'hi', 'Hi'],\n  ['hi', 'hi', 'Hi', 'hi', 'Hi']\n];\n\nconsole.log(ottalMaxTest);\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let sum = 0;\n  for (let i = 0; i < a; i++) {\n    sum += Math.pow(2, i);\n  }\n  let j = 1;\n  for (let i = 0; i < a; i++) {\n    if (sum % j === 0) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n};\n\nconsole.log(isMultiplyPirme(30));\n\n/*Write a function that returns true if the given number is the multiplication of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme2 = (a) => {\n  let sum = 0;\n  for (let i = 0; i < a; i++) {\n    sum += Math.pow(2, i);\n  }\n  let j = 1;\n  let count = 0;\n  while (j < a) {\n    if (sum % j === 0) {\n      count++;\n      if (count === 2) {\n        return true;\n      }\n    }\n    j++;\n  }\n  return false;\n};\n\nconsole.log(isMultiplyPirme2(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  return x * Math.pow(n, x) === x\n}\n\nconsole.log(isSimplePwoer(1, 4))\nconsole.log(isSimplePwoer(2, 2))\nconsole.log(isSimplePwoer(8, 2))\nconsole.log(isSimplePwoer(3, 2))\nconsole.log(isSimplePwoer(3, 1))\nconsole.log(isSimplePwoer(5, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const num = Math.floor(Math.sqrt(a));\n  return num > 1 && num === Math.pow(a, 3);\n};\n\nconsole.log(iscube(5));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let digits = num.split('')\n  let numOfPrimes = 0\n  let primes = []\n\n  for (let i = 0; i < digits.length; i++) {\n    let char = digits[i]\n    let primesDigits = char.match(/(\\d{2}|\\d{3}|\\d{4}|\\d{5}|\\d{6}|\\d{7}|\\d{8}|\\d{9}|A|B|C|D|E|F)$/i)\n    if (primesDigits) {\n      primes.push(primesDigits[1])\n      numOfPrimes += 1\n    }\n  }\n\n  return numOfPrimes\n}\n\nexport default hexKey\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  for (let i = decimal; i > 0; i = Math.floor(i / 2)) {\n    if (i % 2) {\n      binary += \"1\";\n    } else {\n      binary += \"0\";\n    }\n  }\n  binary += \"db\";\n  return binary;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal2 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal3 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal4 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal5 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal6 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal7 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal8 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal9 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal10 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal11 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal12 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal13 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal14 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal15 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal16 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal17 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal18 = (binary) => {\n  let decimal = 0;\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n//BinaryToDecimal\nconst binaryToDecimal19 = (binary) => {\n  let decimal = 0;\n  for ("}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const map = {};\n  let length = 0;\n  let count = 0;\n  let previous = s[0];\n  while (s.length) {\n    let num = parseInt(s.substring(0, 1));\n    if (previous === num) {\n      count++;\n    } else {\n      count = 0;\n    }\n    map[num] = count;\n    length += count;\n    s = s.substring(1);\n    previous = num;\n  }\n  return length >= 3 && map[previous] === count;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  //TODO\n};\n\n//const nmueriaclLetterGrade = (grades) => {\n//  if (grades.length === 1) {\n//    if (grades[0] >= 4.0) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D', 'E'];\n//    }\n//    if (grades[0] >= 3.7) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 3.3) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 3.0) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 2.7) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 2.3) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 2.0) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 1.7) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 1.3) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 1.0) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 0.7) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//    if (grades[0] >= 0.0) {\n//      return ['A+', 'A', 'A-', 'B', 'C+', 'C', 'C-', 'D+', 'D'];\n//    }\n//  }\n//  return [];\n//};\n\nconst nmueriaclLetterGrade = (grades) => {\n  //TODO\n};\n\nmodule.exports = nmueriaclLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  const length = string.length;\n  const str = string.split('');\n  let i = 0;\n  while (i < length) {\n    if (str[i] === '0') {\n      isPrime = false;\n      break;\n    }\n    for (let j = i + 1; j < length; j++) {\n      if (str[i] + str[j] > '9') {\n        break;\n      }\n      if (str[i] === str[j]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      i++;\n    }\n  }\n  return isPrime;\n};\n\nexport default primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  const count = 1\n  for (let i = 2; i <= n; i++) {\n    count = count + 1\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1.\n  */\nconst startsOne = (n) => {\n  const count = 1\n  for (let i = 2; i <= n; i++) {\n    count = count + 1\n  }\n  return count\n}\n\nconst findN = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i)\n  }\n  return count\n}\n\nconst findN_2 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOneEnds(i)\n  }\n  return count\n}\n\n/*\n  Let's call the first one startsOne(i) the number of numbers of i-digit\n  positive integers that start with 1 and the second one startsOneEnds(i) the\n  number of numbers of i-digit positive integers that end with 1. Then the\n  n-digit positive integers that start with 1 or end with 1 is the sum of\n  startsOne(i) and startsOneEnds(i).\n  */\nconst findN_3 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + (startsOne(i) + startsOneEnds(i))\n  }\n  return count\n}\n\nconst findN_4 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_5 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + (startsOne(i) + startsOneEnds(i))\n  }\n  return count\n}\n\n/*\n  Let's call the first one startsOne(i) the number of numbers of i-digit\n  positive integers that start with 1 and the second one startsOneEnds(i) the\n  number of numbers of i-digit positive integers that end with 1. Then the\n  n-digit positive integers that start with 1 or end with 1 is the sum of\n  startsOne(i) and startsOneEnds(i).\n  */\nconst findN_6 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\n/*\n  Let's call the first one startsOne(i) the number of numbers of i-digit\n  positive integers that start with 1 and the second one startsOneEnds(i) the\n  number of numbers of i-digit positive integers that end with 1. Then the\n  n-digit positive integers that start with 1 or end with 1 is the sum of\n  startsOne(i) and startsOneEnds(i).\n  */\nconst findN_7 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_8 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_9 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_10 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_11 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_12 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_13 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_14 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_15 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_16 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_17 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count = count + startsOne(i) + startsOneEnds(i)\n  }\n  return count\n}\n\nconst findN_18 = (n) => {\n  let"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    const sum = new Array(N+1).join('0').slice(0, N);\n    return sum.replace(/^0/, '');\n};\n\nmodule.exports = solve;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7])); //2\n\n/**\n  Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n*/\nconst addOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(addOdd([4, 2, 6, 7])); //8\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const chars = word.split('')\n    for (let j = 0; j < chars.length; j++) {\n      const char = chars[j]\n      const ascii = char.charCodeAt(0)\n      let charOrdered = ''\n      while (ascii > charOrdered.charCodeAt(0)) {\n        charOrdered = charOrdered + String.fromCharCode(ascii)\n        ascii--\n      }\n      result.push(charOrdered)\n    }\n  }\n  return result.join(' ')\n}\n\nmodule.exports = antSihuffle\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = [];\n  for (let i = 0; i < lst.length; i++) {\n    const columns = lst[i];\n    const count = columns.length;\n    for (let j = 0; j < count; j++) {\n      row.push([i, j]);\n    }\n  }\n  const sortedRow = row.sort((a, b) => a[0] - b[0]);\n  let ret = [];\n  for (let i = 0; i < sortedRow.length; i++) {\n    const row = sortedRow[i];\n    ret.push([x, row[1]]);\n  }\n  ret.sort((a, b) => b[0] - a[0]);\n  return ret;\n};\n\nconst getRow2 = (lst, x) => {\n  const row = [];\n  for (let i = 0; i < lst.length; i++) {\n    const count = lst[i].length;\n    for (let j = 0; j < count; j++) {\n      row.push([i, j]);\n    }\n  }\n  const sortedRow = row.sort((a, b) => a[0] - b[0]);\n  let ret = [];\n  for (let i = 0; i < sortedRow.length; i++) {\n    const row = sortedRow[i];\n    ret.push([x, row[1]]);\n  }\n  ret.sort((a, b) => b[0] - a[0]);\n  return ret;\n};\n\nconst getRow3 = (lst, x) => {\n  const row = [];\n  for (let i = 0; i < lst.length; i++) {\n    const count = lst[i].length;\n    for (let j = 0; j < count; j++) {\n      row.push([i, j]);\n    }\n  }\n  const sortedRow = row.sort((a, b) => a[0] - b[0]);\n  let ret = [];\n  for (let i = 0; i < sortedRow.length; i++) {\n    const row = sortedRow[i];\n    ret.push([x, row[1]]);\n  }\n  ret.sort((a, b) => b[0] - a[0]);\n  return ret;\n};\n\nconst getRow4 = (lst, x) => {\n  const row = [];\n  for (let i = 0; i < lst.length; i++) {\n    const count = lst[i].length;\n    for (let j = 0; j < count; j++) {\n      row.push([i, j]);\n    }\n  }\n  const sortedRow = row.sort((a, b) => a[0] - b[0]);\n  let ret = [];\n  for (let i = 0; i < sortedRow.length; i++) {\n    const row = sortedRow[i];\n    ret.push([x, row[1]]);\n  }\n  ret.sort((a, b) => b[0] - a[0]);\n  return ret;\n};\n\nconst getRow5 = (lst, x) => {\n  const row = [];\n  for (let i = 0; i < lst.length; i++) {\n    const count = lst[i].length;\n    for (let j = 0; j < count; j++) {\n      row.push([i, j]);\n    }\n  }\n  const sortedRow = row.sort((a, b) => a[0] - b[0]);\n  let ret = [];\n  for (let i = 0; i < sortedRow.length; i++) {\n    const row = sortedRow[i];\n    ret.push([x, row[1]]);\n  }\n  ret.sort((a, b) => b[0] - a[0]);\n  return ret;\n};\n\nconst getRow6 = (lst, x) => {\n  const row = [];\n  for (let i = 0; i < lst.length; i++) {\n    const count = lst[i].length;\n    for (let j = 0; j < count; j++) {\n      row.push([i, j]);\n    }\n  }\n  const sortedRow = row.sort((a, b) => a[0] - b[0]);\n  let ret = [];\n  for (let i = 0; i < sortedRow.length; i++) {\n    const row = sortedRow[i];\n    ret.push([x, row[1]]);\n  }\n  ret.sort((a, b) => b[0] - a[0]);\n  return ret;\n};\n\nconst getRow7 = (lst, x) => {\n  const row = [];\n  for (let i = 0; i < lst.length; i++) {\n    const count = lst[i].length;\n    for (let j = 0; j < count; j++) {\n      row.push([i, j]);\n    }\n  }\n  const sortedRow = row.sort((a, b) => a[0] - b[0]);\n  let ret = [];\n  for (let i = 0; i < sortedRow.length; i++) {\n    const row = sortedRow[i];\n    ret.push([x, row[1]]);\n  }\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array.slice();\n  const sorted = array.slice();\n  let i = 0;\n  const sum = (array[i]) * (array[i]);\n  while (i < arr.length - 1) {\n    if (sum % 2 === 1) {\n      arr[i + 1] = array[i + 1];\n      sorted[i + 1] = array[i + 1];\n      i += 1;\n    } else {\n      arr[i] = array[i];\n      sorted[i] = array[i];\n      i -= 1;\n    }\n    sum = (array[i]) * (array[i]);\n  }\n  return sorted;\n};\n\nexport { sortArray };\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const s2 = s.toLowerCase();\n  let a = \"\";\n  let b = \"\";\n  for(let i = 0; i < s2.length; i++){\n    let char = s2[i];\n    if(char.length === 1){\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    } else if(char.length === 2){\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    } else {\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    }\n  }\n  return a + b;\n};\n\nconst encrypt2 = (s) => {\n  const s2 = s.toLowerCase();\n  let a = \"\";\n  let b = \"\";\n  for(let i = 0; i < s2.length; i++){\n    let char = s2[i];\n    if(char.length === 1){\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    } else if(char.length === 2){\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    } else {\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    }\n  }\n  return a + b;\n};\n\nconst encrypt3 = (s) => {\n  const s2 = s.toLowerCase();\n  let a = \"\";\n  let b = \"\";\n  for(let i = 0; i < s2.length; i++){\n    let char = s2[i];\n    if(char.length === 1){\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    } else if(char.length === 2){\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    } else {\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n      a += char;\n      b += char;\n    }\n  }\n  return a + b;\n};\n\nconsole.log(encrypt(\"hi\"));\nconsole.log(encrypt(\"asdfghjkl\"));\nconsole.log(encrypt(\"gf\"));\nconsole.log(encrypt(\"et\"));\nconsole.log(encrypt(\"\"));\nconsole.log(encrypt2(\"hi\"));\nconsole.log(encrypt2(\"asdfghjkl\"));\nconsole.log(encrypt2(\"gf\"));\nconsole.log(encrypt2(\"et\"));\nconsole.log(encrypt2(\"\"));\nconsole.log(encrypt3(\"hi\"));\nconsole.log(encrypt3(\"asdfghjkl\"));\nconsole.log(encrypt3(\"gf\"));\nconsole.log(encrypt3(\"et\"));\nconsole.log(encrypt3(\"\"));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  const min = Math.min.apply(null, lst)\n  return lst.reduce((acc, val, i) => {\n    if (acc == null || val < acc) {\n      return val\n    } else {\n      return acc\n    }\n  }, null)\n}\n\nmodule.exports = nextSmallset\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  const [start, end] = S.match(/^([A-Za-z]+)\\.([A-Za-z]+)\\.([A-Za-z]+)(\\?|\\.|!)$/);\n  const [wordStart, wordEnd] = S.match(/^([A-Za-z]+)\\.([A-Za-z]+)(\\?|\\.|!)$/);\n  const start = start || wordStart;\n  const end = end || wordEnd;\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    const c = S.charAt(i);\n    if (start && c === start.charAt(0)) {\n      if (i === 0) {\n        continue;\n      }\n      if (S.charAt(i - 1) === '.' || S.charAt(i - 1) === '?' || S.charAt(i - 1) === '!') {\n        count++;\n      }\n    }\n    if (end && c === end.charAt(0)) {\n      count--;\n    }\n  }\n  return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y && x === y ** z && x === z ** y && x === Math.abs(y) && x === Math.abs(z) && x === Math.log(y) && x === Math.log(z) && x === Math.log10(y) && x === Math.log10(z) && x === Math.log1p(y) && x === Math.log1p(z) && x === Math.sqrt(y) && x === Math.sqrt(z) && x === Math.tan(y) && x === Math.tan(z) && x === Math.tanh(y) && x === Math.tanh(z) && x === Math.acos(y) && x === Math.acos(z) && x === Math.asin(y) && x === Math.asin(z) && x === Math.atan(y) && x === Math.atan(z) && x === Math.atan2(y, z) && x === Math.cbrt(y) && x === Math.cbrt(z) && x === Math.ceil(y) && x === Math.ceil(z) && x === Math.cos(y) && x === Math.cos(z) && x === Math.exp(y) && x === Math.exp(z) && x === Math.expm1(y) && x === Math.expm1(z) && x === Math.floor(y) && x === Math.floor(z) && x === Math.hypot(y, z) && x === Math.hypot(y, z) && x === Math.log(y) && x === Math.log(z) && x === Math.log10(y) && x === Math.log10(z) && x === Math.log1p(y) && x === Math.log1p(z) && x === Math.log2(y) && x === Math.log2(z) && x === Math.max(y, z) && x === Math.max(y, z) && x === Math.min(y, z) && x === Math.min(y, z) && x === Math.pow(y, z) && x === Math.pow(y, z) && x === Math.random() && x === Math.round(y) && x === Math.round(z) && x === Math.sign(y) && x === Math.sign(z) && x === Math.sin(y) && x === Math.sin(z) && x === Math.sinh(y) && x === Math.sinh(z) && x === Math.sqrt(y) && x === Math.sqrt(z) && x === Math.tan(y) && x === Math.tan(z) && x === Math.tanh(y) && x === Math.tanh(z) && x === Math.trunc(y) && x === Math.trunc(z);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    return message.toLowerCase()\n       .replace(/[a-z]/g, (match) => {\n            switch (match.toLowerCase()) {\n                case 'a':\n                    return '2'\n                case 'b':\n                    return '2'\n                case 'c':\n                    return '1'\n                case 'd':\n                    return '3'\n                case 'e':\n                    return '3'\n                case 'f':\n                    return '4'\n                case 'g':\n                    return '4'\n                case 'h':\n                    return '1'\n                case 'i':\n                    return '2'\n                case 'j':\n                    return '5'\n                case 'k':\n                    return '6'\n                case 'l':\n                    return '5'\n                case'm':\n                    return '7'\n                case 'n':\n                    return '7'\n                case 'o':\n                    return '4'\n                case 'p':\n                    return '8'\n                case 'q':\n                    return '8'\n                case 'r':\n                    return '5'\n                case's':\n                    return '9'\n                case 't':\n                    return '9'\n                case 'u':\n                    return '7'\n                case 'v':\n                    return '4'\n                case 'w':\n                    return '6'\n                case 'x':\n                    return '9'\n                case 'y':\n                    return '8'\n                case 'z':\n                    return '9'\n                default:\n                    return '9'\n            }\n        })\n       .replace(/[aeiou]/g, (match) => {\n            switch (match.toLowerCase()) {\n                case 'a':\n                    return '9'\n                case 'e':\n                    return '9'\n                case 'i':\n                    return '7'\n                case 'o':\n                    return '7'\n                case 'u':\n                    return '8'\n                case 'y':\n                    return '8'\n                default:\n                    return '7'\n            }\n        })\n       .replace(/[0-9]/g, (match) => {\n            switch (match) {\n                case '1':\n                    return '9'\n                case '2':\n                    return '8'\n                case '3':\n                    return '7'\n                case '4':\n                    return '6'\n                case '5':\n                    return '5'\n                case '6':\n                    return '4'\n                case '7':\n                    return '3'\n                case '8':\n                    return '2'\n                case '9':\n                    return '1'\n                default:\n                    return '9'\n            }\n        })\n       .replace(/[^a-z]/g, (match) => {\n            return '9'\n        })\n       .replace(/[^0-9]/g, (match) => {\n            return '9'\n        })\n}<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  let max = 0;\n  let largest = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = parseInt(lst[i]);\n    let k = n;\n    while (k > 0) {\n      if (k >= 10) {\n        largest += k % 10;\n        max = Math.max(largest, max);\n      }\n      k = k / 10;\n    }\n  }\n  return max;\n};\n\nconsole.log(ksjkasddk([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(ksjkasddk([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(ksjkasddk([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(ksjkasddk([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(ksjkasddk([0,81,12,3,1,21]));\nconsole.log(ksjkasddk([0,8,1,2,1,7]));<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  return Object.keys(dict).every(key => {\n    return typeof key ==='string'\n      && (key.toLowerCase() === key || key.toUpperCase() === key);\n  });\n}\n\n/*\n  Given a list of strings, return true if every string is a number, else return false.\n  Example:\n  checkList([\"1\", \"2\", \"3\"]) should return true.\n  checkList([\"a\", \"b\", \"c\"]) should return false.\n  */\nconst checkList = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]*$/));\n}\n\n/*\n  Given a list of strings, return true if every string is an integer, else return false.\n  Example:\n  checkList([\"1\", \"2\", \"3\"]) should return true.\n  checkList([\"1\", \"2\", \"3.0\"]) should return false.\n  checkList([\"1\", \"2\", \"a\"]) should return false.\n  */\nconst checkListInt = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\n/*\n  Given a list of strings, return true if every string is an float, else return false.\n  Example:\n  checkList([\"1\", \"2\", \"3.0\"]) should return true.\n  checkList([\"1\", \"2\", \"a\"]) should return false.\n  checkList([\"1\", \"2\", \"3\"]) should return false.\n  */\nconst checkListFloat = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\n/*\n  Given a list of strings, return true if every string is an bool, else return false.\n  Example:\n  checkList([\"true\", \"false\"]) should return true.\n  checkList([\"true\", \"false\", \"true\"]) should return false.\n  */\nconst checkListBool = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\n/*\n  Given a list of strings, return true if every string is an integer, else return false.\n  Example:\n  checkList([\"1\", \"2\", \"3\"]) should return true.\n  checkList([\"1\", \"2\", \"3.0\"]) should return false.\n  checkList([\"1\", \"2\", \"a\"]) should return false.\n  */\nconst checkListIntBool = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\nconst checkListFloatBool = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\nconst checkListIntFloat = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\n/*\n  Given a list of strings, return true if every string is an boolean, else return false.\n  Example:\n  checkList([\"true\", \"false\"]) should return true.\n  checkList([\"true\", \"false\", \"true\"]) should return false.\n  */\nconst checkListBoolBool = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\n/*\n  Given a list of strings, return true if every string is a list, else return false.\n  Example:\n  checkList([\"1\", \"2\", \"3\"]) should return true.\n  checkList([\"1\", \"2\", \"3.0\"]) should return false.\n  checkList([\"1\", \"2\", \"a\"]) should return false.\n  */\nconst checkListList = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\n/*\n  Given a list of strings, return true if every string is a dict, else return false.\n  Example:\n  checkList([\"1\", \"2\", \"3\"]) should return true.\n  checkList([\"1\", \"2\", \"3.0\"]) should return false.\n  checkList([\"1\", \"2\", \"a\"]) should return false.\n  */\nconst checkListDict = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\n/*\n  Given a list of strings, return true if every string is a number or a float, else return false.\n  Example:\n  checkList([\"1\", \"2\", \"3\"]) should return true.\n  checkList([\"1\", \"2\", \"3.0\"]) should return true.\n  checkList([\"1\", \"2\", \"a\"]) should return false.\n  */\nconst checkListNumber = (list) => {\n  return list.every(x => typeof x ==='string' && x.match(/^[0-9]+$/));\n}\n\n/*\n  Given a list of strings, return true if every string is a number or a float or a bool, else return false.\n  Example:\n  checkList([\"1\", \"2\", \"3\"]"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) return [];\n  const p = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) p.push(i)\n  }\n  return p;\n}\n\n/*Implement a function that returns the largest prime number that is less than n.\n  for example:\n  findSmallestPrime(2) => 2\n  findSmallestPrime(3) => 2\n  findSmallestPrime(4) => 3\n  findSmallestPrime(10) => 5\n  findSmallestPrime(20) => 7\n  findSmallestPrime(30) => 11\n  findSmallestPrime(100) => 17\n  findSmallestPrime(500) => 1397\n  findSmallestPrime(1000) => 4607\n  findSmallestPrime(10000) => 998483\n  findSmallestPrime(20000) => 14050033\n  findSmallestPrime(30000) => 18286895\n  findSmallestPrime(50000) => 29576733\n  findSmallestPrime(70000) => 45238523\n  findSmallestPrime(80000) => 60583667\n  findSmallestPrime(90000) => 81188327\n  findSmallestPrime(100000) => 101180411\n  findSmallestPrime(200000) => 12451765\n  findSmallestPrime(300000) => 138857471\n  findSmallestPrime(500000) => 1458172691\n  findSmallestPrime(700000) => 15396422293\n  findSmallestPrime(800000) => 161536574095\n  findSmallestPrime(900000) => 169638486627\n  findSmallestPrime(1000000) => 179536251807\n  findSmallestPrime(1500000) => 19165270543\n  findSmallestPrime(200000) => 2039073\n  findSmallestPrime(3000000) => 2182567\n  findSmallestPrime(4000000) => 234740\n  findSmallestPrime(5000000) => 244900\n  findSmallestPrime(6000000) => 256580\n  findSmallestPrime(7000000) => 269500\n  findSmallestPrime(8000000) => 283300\n  findSmallestPrime(9000000) => 296900\n  findSmallestPrime(10000000) => 310830\n  findSmallestPrime(20000000) => 325680\n  findSmallestPrime(30000000) => 348280\n  findSmallestPrime(40000000) => 359980\n  findSmallestPrime(50000000) => 373780\n  findSmallestPrime(60000000) => 390780\n  findSmallestPrime(70000000) => 407080\n  findSmallestPrime(80000000) => 428280\n  findSmallestPrime(90000000) => 451780\n  findSmallestPrime(100000000) => 477280\n  findSmallestPrime(150000000) => 495880\n  findSmallestPrime(200000000) => 524280\n  findSmallestPrime(300000000) => 547280\n  findSmallestPrime(400000000) => 567280\n  findSmallestPrime(500000000) => 589280\n  findSmallestPrime(600000000) => 622280\n  findSmallestPrime(700000000) => 647280\n  findSmallestPrime(800000000) => 673780\n  findSmallestPrime(900000000) => 690780\n  findSmallestPrime(1000000000) => 716280\n  findSmallestPrime(2000000000) => 736280\n  findSmallestPrime(3000000000) => 769280\n  findSmallestPrime(4000000000) => 789280\n  findSmallestPrime(5000000000) => 814280\n  findSmallestPrime(6000000000) => 836280\n  findSmallestPrime(7000000000) => 858280\n  findSmallestPrime(8000000000) => 879280\n  findSmallestPrime(9000000000) => 912280\n  findSmallestPrime(10000000000) => 925280\n  findSmallestPrime(20000000000) => 943780\n  findSmallestPrime(30000000000) => 961780\n  findSmallestPrime(40000000000) => 987180\n  findSmallestPrime(50000000000) => 1003880\n  findSmallestPrime(60000000000) => 1029280\n  findSmallestPrime(70000000000) => 1053180\n  findSmallestPrime(80000000000) => 1072680\n  findSmallestPrime(90000000000) => 1098280\n  findSmallestPrime(1000000000000) => 1116180\n  findSmallestPrime(200000000000) => 1129780\n  findSmallestPrime(3000000000000) => 1150380\n  findSmallestPrime(4000000000000) => 1170680\n  findSmallestPrime(5000000000000) => 1192980\n  findSmallestPrime(6000000000000) => 1218180\n  findSmallestPrime(7000000000000) => 1234380\n  findSmallestPrime(8000000000000) => 1249680\n  findSmallestPrime(9000000000000) => 1263780\n  findSmallestPrime(100000000000000) => 1279680\n  findSmallestPrime(20000000000000) => 1295380\n  findSmallestPrime(300000000000000) => 1311180\n  findSmallestPrime(400000000000000) => 1328380\n  findSmallestPrime(500000000000000) => 1347680\n  findSmallestPrime(600000000000000) => 1364380\n  findSmallestPrime(700000000000000) => 1374680\n  findSmallestPrime(800000000000000) => 1388680\n  findSmallestPrime(900000000000000) => 1407380\n  findSmallestPrime(1000000000000000) => 1418180\n  findSmallestPrime(2000000000000000) => 1428380\n  findSmallestPrime(300000000"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let carry = 0;\n  while (a > 0) {\n    let digit = a % 10;\n    carry += b * digit;\n    a /= 10;\n    result += carry;\n    carry = result / 10;\n    result %= 10;\n  }\n  return result;\n}\n\n/*Write a function that takes two strings and returns the length of the longest common prefix.\n  Assume that the input is always valid.\n  Examples:\n  longestCommonPrefix(\"cat\", \"dog\") should return 2\n  longestCommonPrefix(\"cat\", \"t\") should return 0\n  longestCommonPrefix(\"cat\", \"tcat\") should return 1\n  longestCommonPrefix(\"cate\", \"cat\") should return 3\n  longestCommonPrefix(\"cat\", \"cate\") should return 2\n  longestCommonPrefix(\"cat\", \"tcat\") should return 2\n  longestCommonPrefix(\"cat\", \"cate\") should return 2\n  */\nconst longestCommonPrefix = (s1, s2) => {\n  let i = 0;\n  while (s1[i] === s2[i]) {\n    i++;\n  }\n  return i;\n}\n\n/*Write a function that takes two strings and returns the length of the longest common suffix.\n  Assume that the input is always valid.\n  Examples:\n  longestCommonPrefix(\"cat\", \"dog\") should return 2\n  longestCommonPrefix(\"cat\", \"t\") should return 1\n  longestCommonPrefix(\"cat\", \"tcat\") should return 3\n  longestCommonPrefix(\"cate\", \"cat\") should return 0\n  longestCommonPrefix(\"cat\", \"cate\") should return 1\n  longestCommonPrefix(\"cat\", \"tcat\") should return 3\n  longestCommonPrefix(\"cat\", \"cate\") should return 0\n  */\nconst longestCommonSuffix = (s1, s2) => {\n  let i = 0;\n  while (s1[s1.length - 1 - i] === s2[s2.length - 1 - i]) {\n    i++;\n  }\n  return s1.length - 1 - i;\n}\n\n/*Write a function that takes two strings and returns the common prefix and common suffix.\n  Assume that the input is always valid.\n  Examples:\n  commonPrefixAndSuffix(\"cat\", \"dog\") should return \"cat\"\n  commonPrefixAndSuffix(\"cat\", \"t\") should return \"\"\n  commonPrefixAndSuffix(\"cat\", \"tcat\") should return \"cat\"\n  commonPrefixAndSuffix(\"cate\", \"cat\") should return \"\"\n  commonPrefixAndSuffix(\"cat\", \"cate\") should return \"cat\"\n  commonPrefixAndSuffix(\"cat\", \"tcat\") should return \"cat\"\n  commonPrefixAndSuffix(\"cat\", \"cate\") should return \"cat\"\n  */\nconst commonPrefixAndSuffix = (s1, s2) => {\n  let prefix = longestCommonPrefix(s1, s2);\n  let suffix = longestCommonSuffix(s1, s2);\n  return s1.slice(0, prefix) + s2.slice(prefix + suffix);\n}\n\n/*Write a function that takes two strings and returns the same string with each character in upper case.\n  Assume that the input is always valid.\n  Examples:\n  upperCase(\"cat\") should return \"CAT\"\n  upperCase(\"t\") should return \"T\"\n  upperCase(\"tcat\") should return \"TCAT\"\n  */\nconst upperCase = (s) => {\n  return s.toUpperCase();\n}\n\n/*Write a function that takes two strings and returns the same string with each character in lower case.\n  Assume that the input is always valid.\n  Examples:\n  lowerCase(\"cat\") should return \"cat\"\n  lowerCase(\"t\") should return \"t\"\n  lowerCase(\"tcat\") should return \"tcat\"\n  */\nconst lowerCase = (s) => {\n  return s.toLowerCase();\n}\n\n/*Write a function that takes two strings and returns the same string with each character in reverse.\n  Assume that the input is always valid.\n  Examples:\n  reverse(\"cat\") should return \"tac\"\n  reverse(\"t\") should return \"tt\"\n  reverse(\"tcat\") should return \"cata\"\n  */\nconst reverse = (s) => {\n  return s.split('').reverse().join('');\n}\n\n/*Write a function that takes two strings and returns the same string with each character reversed.\n  Assume that the input is always valid.\n  Examples:\n  reverse(\"cat\") should return \"tac\"\n  reverse(\"t\") should return \"tt\"\n  reverse(\"tcat\") should return \"cata\"\n  */\nconst reverse = (s) => {\n  return s.split('').reverse().join('');\n}\n\n/*Write a function that takes two strings and returns the same string with each character in reverse order.\n  Assume that the input is always valid.\n  Examples:\n  reverse(\"cat\") should return \"tac\"\n  reverse(\"t\") should return \"tt\"\n  reverse(\"tcat\") should return \"cata\"\n  */\nconst reverse = (s) => {\n  return s.split('').reverse().join('');\n}\n\n/*Write a function that takes two strings and returns the same string with each character in upper case.\n  Assume that the input is always valid.\n  Examples:\n  upperCase(\"cat\") should return \"CAT\"\n  upperCase(\"t\") should return \"T\"\n  upperCase(\"tcat\") should return \"TCAT\"\n  */\nconst reverse = (s) => {\n  return s.split('').reverse().join('');\n}\n\n/*Write a function that takes two strings and returns the same string with each character in lower case.\n  Assume that the input is always valid.\n  Examples:\n  lowerCase(\"cat\") should return \"cat\"\n  lowerCase"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, count the number of consonant-vowel pairs in s.\n\n  For example:\n  countVowel('aBcDeF') returns 2\n  countVowel('abcdE') returns 0\n  countVowel('aBbCcD') returns 1\n  */\nconst countVowel = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, count the number of consonant-vowel pairs in s.\n\n  For example:\n  countVowel('aBcDeF') returns 2\n  countVowel('abcdE') returns 0\n  countVowel('aBbCcD') returns 1\n  */\nconst countConsonant = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, return the number of vowel-consonant pairs in s.\n\n  For example:\n  countConsonant('aBcDeF') returns 2\n  countConsonant('abcdE') returns 0\n  countConsonant('aBbCcD') returns 1\n  */\nconst countVowelConsonant = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, return the number of consonant-vowel pairs in s.\n\n  For example:\n  countConsonant('aBcDeF') returns 2\n  countConsonant('abcdE') returns 0\n  countConsonant('aBbCcD') returns 1\n  */\nconst countConsonantVowel = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, return the number of consonant-vowel pairs in s.\n\n  For example:\n  countConsonant('aBcDeF') returns 2\n  countConsonant('abcdE') returns 0\n  countConsonant('aBbCcD') returns 1\n  */\nconst countConsonantVowel2 = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, return the number of consonant-vowel pairs in s.\n\n  For example:\n  countConsonant('aBcDeF') returns 2\n  countConsonant('abcdE') returns 0\n  countConsonant('aBbCcD') returns 1\n  */\nconst countConsonantVowel3 = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, return the number of consonant-vowel pairs in s.\n\n  For example:\n  countConsonant('aBcDeF') returns 2\n  countConsonant('abcdE') returns 0\n  countConsonant('aBbCcD') returns 1\n  */\nconst countConsonantVowel4 = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, return the number of consonant-vowel pairs in s.\n\n  For example:\n  countConsonant('aBcDeF') returns 2\n  countConsonant('abcdE') returns 0\n  countConsonant('aBbCcD') returns 1\n  */\nconst countConsonantVowel5 = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, return the number of consonant-vowel pairs in s.\n\n  For example:\n  countConsonant('aBcDeF') returns 2\n  countConsonant('abcdE') returns 0\n  countConsonant('aBbCcD') returns 1\n  */\nconst countConsonantVowel6 = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*\n  Given a string s, return the number of consonant-v"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  let valueString = value.toString();\n  let numberOfZeroes = numberOfZeroes(valueString);\n\n  if (numberOfZeroes === 0) {\n    return parseInt(valueString);\n  }\n\n  if (numberOfZeroes === 1) {\n    const firstNumber = parseInt(valueString.slice(1));\n    const secondNumber = parseInt(valueString.slice(1));\n    if (valueString.slice(0, 1) === '.') {\n      // the number is at the end\n      return Math.round(firstNumber + 0.5);\n    }\n\n    return Math.round(firstNumber + (secondNumber - firstNumber) / 2);\n  }\n\n  if (numberOfZeroes === 2) {\n    const firstNumber = parseInt(valueString.slice(1));\n    const secondNumber = parseInt(valueString.slice(2));\n    if (valueString.slice(0, 1) === '.') {\n      // the number is at the end\n      return Math.round(firstNumber + 0.5);\n    }\n\n    return Math.round(firstNumber + (secondNumber - firstNumber) / 2);\n  }\n\n  return value;\n};\n\nmodule.exports = closestInetger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n\n  for (let i = 1; i <= n; i += 2) {\n    pile.push(i)\n  }\n\n  let i = 0\n  while (i < pile.length) {\n    pile[i] += pile[i + 1]\n    i += 2\n  }\n\n  return pile\n}\n\nconsole.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n};\n\nconsole.log(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x\n  }\n\n  const min = Math.min(x, y)\n  const max = Math.max(x, y)\n  const num = (min + max) / 2 | 0\n\n  if (min!== max && (min % 2!== 0 || max % 2!== 0)) {\n    return -1\n  }\n\n  if (min === max) {\n    return num\n  }\n\n  return chooseNum(min, num)\n}\n\nexport default chooseNum\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Number(avg.toString(2))\n}\n\n// console.log(roundedAvg(1, 5))\n// //=> 0b11\n// console.log(roundedAvg(7, 5))\n// //=> -1\n// console.log(roundedAvg(10, 20))\n// //=> 0b1111\n// console.log(roundedAvg(20, 33))\n// //=> 0b11010\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  return x.filter((item) => item % 2 === 0)\n   .sort((a, b) => a - b)\n}\n\nmodule.exports = uniqueDigtis\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res.push(arr[i])\n    }\n  }\n  \n  return res\n}\n\nconst ybSort = (arr) => {\n  let res = ybLength(arr)\n  res.sort()\n  return res\n}\n\nconst ybReverse = (arr) => {\n  let res = ybSort(arr)\n  res.reverse()\n  return res\n}\n\nconst ybReplaceDigits = (arr) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res.push(arr[i])\n      res.push(arr[i].toUpperCase())\n    }\n  }\n  \n  return res\n}\n\nconst ybIsEmpty = (arr) => {\n  let i = 0\n  let len = arr.length\n  let res = false\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res = false\n      break\n    }\n  }\n  \n  return res\n}\n\nconst ybAppend = (arr, val) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res.push(arr[i])\n      res.push(val)\n    }\n  }\n  \n  return res\n}\n\nconst ybInsert = (arr, val) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res.push(val)\n      res.push(arr[i])\n    }\n  }\n  \n  return res\n}\n\nconst ybRemove = (arr, val) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i]!= val) {\n      res.push(arr[i])\n    }\n  }\n  \n  return res\n}\n\nconst ybArray = (arr) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res = ybAppend(res, arr[i])\n    }\n  }\n  \n  return res\n}\n\nconst ybArrayReverse = (arr) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res = ybInsert(res, arr[i])\n    }\n  }\n  \n  return res\n}\n\nconst ybArrayRemove = (arr, val) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i]!= val) {\n      res = ybRemove(res, arr[i])\n    }\n  }\n  \n  return res\n}\n\nconst ybArrayLength = (arr) => {\n  let i = 0\n  let len = arr.length\n  let res = 0\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      res += 1\n    }\n  }\n  \n  return res\n}\n\nconst ybArrayConcat = (arr) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    res = ybAppend(res, arr[i])\n  }\n  \n  return res\n}\n\nconst ybArrayReverseConcat = (arr) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    res = ybInsert(res, arr[i])\n  }\n  \n  return res\n}\n\nconst ybArrayRemoveConcat = (arr, val) => {\n  let i = 0\n  let len = arr.length\n  let res = []\n  \n  for (i = 0; i < len; i++) {\n    if (arr[i]!= val) {\n      res = ybRemove(res, arr[i])\n    }\n  }\n  \n  return res\n"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [1]\n  let i = 2\n  while (i <= n) {\n    factorials.push(i * factorials[i - 1])\n    i += 1\n  }\n  return factorials\n}\n\n// ------------------------------------------------\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the factorials of the numbers from 1 to i.\n  i starts from 1.\n  the sum of the factorials of the numbers from 1 to i is the number that is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const sums = [1]\n  let i = 2\n  while (i <= n) {\n    sums.push(sums[i - 1] + (i - 1) * sums[i - 2])\n    i += 1\n  }\n  return sums\n}\n\n// ------------------------------------------------\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the numbers from 1 to i.\n  i starts from 1.\n  the sum of the numbers from 1 to i is the number that is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const sums = [1]\n  let i = 2\n  while (i <= n) {\n    sums.push(sums[i - 1] + (n - i + 1) * sums[i - 2])\n    i += 1\n  }\n  return sums\n}\n\n// ------------------------------------------------\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the numbers from 1 to i and the sum of the numbers from 1 to i-1.\n  i starts from 1.\n  the sum of the numbers from 1 to i is the number that is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const sums = [1]\n  let i = 2\n  while (i <= n) {\n    sums.push(sums[i - 1] + sums[i - 2] + (n - i + 1) * sums[i - 3])\n    i += 1\n  }\n  return sums\n}\n\n// ------------------------------------------------\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the numbers from 1 to i and the sum of the numbers from 1 to i-1, plus the sum of the numbers from 1 to i-2.\n  i starts from 1.\n  the sum of the numbers from 1 to i is the number that is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const sums = [1]\n  let i = 2\n  while (i <= n) {\n    sums.push(sums[i - 1] + sums[i - 2] + sums[i - 3] + (n - i + 1) * sums[i - 4])\n    i += 1\n  }\n  return sums\n}\n\n// ------------------------------------------------\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the numbers from 1 to i and the sum of the numbers from 1 to i-1, plus the sum of the numbers from 1 to i-2, plus the sum of the numbers from 1 to i-3.\n  i starts from 1.\n  the sum of the numbers from 1 to i is the number that is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const sums = [1]\n  let i = 2\n  while (i <= n) {\n    sums.push(sums[i - 1] + sums[i - 2] + sums[i - 3] + sums[i - 4] + (n - i + 1) * sums[i - 5])\n    i += 1\n  }\n  return sums\n}\n\n// ------------------------------------------------\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the numbers from 1 to i and the sum of the numbers from 1 to i-1, plus the sum of the numbers from 1 to i-2, plus the sum of the numbers from 1 to i-3, plus the sum of the numbers from 1 to i-4.\n  i starts from 1.\n  the sum of the numbers from 1 to i is the number that is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const sums = [1]\n  let i = 2\n  while (i <= n) {\n    sums.push(sums[i - 1] + sums[i - 2] + sums[i - 3] + sums[i - 4] + sums[i - 5] + (n - i + 1) * sums[i - 6])\n    i += 1\n  }\n  return sums\n}\n\n// ------------------------------------------------"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const odd = 0;\n    const even = 0;\n    const i = 1;\n\n    while (i <= n) {\n        const j = i;\n        let k = i;\n        while (j <= n) {\n            if (isPalindrome(j)) {\n                if (k % 2 === 0) {\n                    even += 1;\n                } else {\n                    odd += 1;\n                }\n            }\n            k += 1;\n            j += 1;\n        }\n        i += 1;\n    }\n    return [even, odd];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i], 10)\n    if (num > 0) {\n      n += 1\n    }\n  }\n  return n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const N = arr.length;\n  const sortedArr = new Array(N);\n  let i = 0;\n  let j = N - 1;\n  while (i < j) {\n    sortedArr[i] = arr[i];\n    while (j > i && sortedArr[j] >= sortedArr[j - 1]) {\n      j--;\n    }\n    if (j > i) {\n      sortedArr[j] = sortedArr[i];\n    }\n    while (i < j && sortedArr[i] <= sortedArr[i + 1]) {\n      i++;\n    }\n    if (i < j) {\n      sortedArr[i] = sortedArr[j];\n    }\n  }\n  return sortedArr.every(num => num >= sortedArr[0]);\n};\n\nconst test = moveOneBall([3, 4, 5, 1, 2]);\nconsole.log(`Test:${test}`);\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  let result = true;\n  for (let i = 0; i < lst1.length; i++) {\n    let xechange = lst2[i] - lst1[i];\n    if (lst1[i] % 2 === 0) {\n      result = result && (xechange % 2 === 0);\n    } else {\n      result = result && (xechange % 2!== 0);\n    }\n  }\n  return result? \"YES\" : \"NO\";\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  test = test.toLowerCase().split(\" \");\n  const dictionary = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (dictionary[letter] === undefined) {\n      dictionary[letter] = 1;\n    } else {\n      dictionary[letter]++;\n    }\n  }\n  return dictionary;\n};\n\n/*Given a string, return the maximum length of a word that contains at least two letters.\n  Example:\n  maxLength('a b c') == 3\n  maxLength('b b a') == 3\n  maxLength('a b c a') == 4\n  maxLength('b b b') == 2\n  maxLength('ab cd') == 4\n  maxLength('bcd') == 2\n  maxLength('a b c b c') == 5\n  maxLength('a b c b c d') == 4\n  maxLength('a b c b c d') == 5\n  maxLength('a b c b c d e') == 5\n  maxLength('a b c b c d e') == 6\n  maxLength('a b c b c d e f') == 6\n  maxLength('a b c b c d e f') == 7\n  maxLength('a b c b c d e f g') == 7\n  maxLength('a b c b c d e f g') == 8\n  maxLength('a b c b c d e f g') == 8\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f g') == 9\n  maxLength('a b c b c d e f"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  // console.log(s,c);\n  let deleteCount = 0;\n  let sCopy = s.slice();\n  let cCopy = c.slice();\n  let deleteIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === cCopy[deleteIndex]) {\n      deleteCount++;\n      deleteIndex++;\n      if (deleteIndex === c.length) {\n        deleteIndex = 0;\n      }\n    }\n  }\n  // console.log(sCopy,deleteCount);\n  if (deleteCount % 2 === 1) {\n    // console.log(sCopy,deleteCount);\n    return [sCopy.slice(deleteCount), true];\n  } else {\n    return [sCopy.slice(0, deleteCount), false];\n  }\n};\n\n// const c = \"ae\";\n// const s = \"abcdedcba\";\n// const s = \"abcdef\";\n// const s = \"abcde\";\n// const s = \"abcd\";\n// const s = \"bc\";\n// const s = \"a\";\n// const s = \"\";\n// const s = \"a\";\n// const c = \"e\";\n// const c = \"ae\";\n// const c = \"b\";\n// const c = \"ab\";\n// const c = \"c\";\n// const c = \"\";\n// const c = \"\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"\";\n// const c = \"a\";\n// const c = \"b\";\n// const c = \"e\";\n// const c = \"c\";\n// const c = \"b\";\n// const c = \"c\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";\n// const c = \"e\";\n// const c = \"d\";\n// const c = \"e\";\n// const c = \"a\";\n// const c = \"a\";"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = lst.map(s => {\n    return oddDigits(s);\n  });\n  return oddCount;\n};\n\nconst oddDigits = (str) => {\n  return str.match(/[\\d]+/g).filter(n => n % 2 === 1).length;\n};\n\nconst strLen = (str) => {\n  return str.length;\n};\n\nconst num2str = (num) => {\n  return num.toString();\n};\n\nconst oddCount2 = (lst) => {\n  const oddCount = lst.map(s => {\n    return oddDigits(s);\n  });\n  return oddCount;\n};\n\nmodule.exports = {\n  oddCount,\n  strLen,\n  num2str,\n  oddCount2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = 0;\n  const sum = 0;\n  const minLength = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (sum < 0) {\n      sum = 0;\n      minLength = i + 1;\n    }\n\n    sum += nums[i];\n\n    if (sum > minSum) {\n      minSum = sum;\n    }\n  }\n\n  return minSum;\n};\n\nconsole.log(minSubArraySum([-1, -2, -3]));\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        let row = grid[i];\n        let maxFill = 0;\n        for (let j = 0; j < row.length; j++) {\n            if (row[j] == 1) {\n                let c = Math.min(j + 1, capacity - 1);\n                maxFill = Math.max(maxFill, c);\n            }\n        }\n        count += maxFill;\n    }\n    return count;\n};\n\nconst solve = (grid, capacity) => {\n    let cnt = 0;\n    let row = 0;\n    for (let i = 0; i < grid.length; i++) {\n        let col = 0;\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] == 1) {\n                row = i;\n                col = j;\n                break;\n            }\n        }\n        if (col == grid[i].length - 1) {\n            cnt += grid[row][col]? 0 : 1;\n            row = 0;\n        }\n    }\n    return cnt;\n};\n\nconsole.log(solve([\n    [1,0,1,1],\n    [1,0,0,0],\n    [1,1,1,1],\n    [0,1,1,1],\n], 3));\n\nconsole.log(solve([\n    [1,0,0,0,0,0],\n    [1,1,1,1,1,1],\n    [0,0,0,0,0,0],\n], 5));\n\nconsole.log(solve([\n    [0,0,1,1],\n    [0,1,1,0],\n    [1,0,0,1],\n    [0,0,1,1],\n], 2));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const n = arr.length;\n  const tempArr = arr.slice();\n  const tempArrIndex = tempArr.length - 1;\n  let cnt = 0;\n\n  while (tempArrIndex >= 0) {\n    while (cnt < n) {\n      if (tempArr[tempArrIndex] === 1) {\n        tempArrIndex--;\n        break;\n      }\n      cnt++;\n    }\n    while (cnt < n) {\n      if (tempArr[tempArrIndex] === 0) {\n        tempArrIndex--;\n        break;\n      }\n      cnt++;\n    }\n    tempArrIndex--;\n    let min = 0;\n    let minIndex = 0;\n    let minLength = 0;\n    for (let i = 0; i < n; i++) {\n      if (tempArr[i] === 0) {\n        if (min === 0) {\n          min = tempArr[i];\n          minIndex = i;\n          minLength = 1;\n        } else if (min > tempArr[i]) {\n          min = tempArr[i];\n          minIndex = i;\n          minLength = 1;\n        } else if (min === tempArr[i]) {\n          minLength++;\n        }\n      }\n    }\n\n    if (minLength === n) {\n      tempArr[minIndex] = min;\n      cnt = 0;\n    } else if (minLength > n) {\n      tempArr[minIndex] = min;\n      cnt = 0;\n    }\n  }\n\n  return tempArr;\n};\n\nconst test = [\n  [1, 5, 2, 3, 4],\n  [-2, -3, -4, -5, -6],\n  [1, 0, 2, 3, 4],\n  [1, 0, 2, 3, 4, 0]\n];\n\nconst expected = [\n  [1, 2, 3, 4, 5],\n  [-6, -5, -4, -3, -2],\n  [1, 0, 2, 3, 4],\n  [1, 0, 2, 3, 4, 0]\n];\n\nconsole.log(`TESTS`);\n\nfor (let i = 0; i < test.length; i++) {\n  console.log(`Test #${i + 1}:`);\n  console.log(`Expected: ${expected[i]}`);\n  console.log(`Actual:   ${sortArray(test[i])}`);\n  console.log();\n}\n\nconsole.log(`Passed!`);\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  let arr = [];\n  let len = s.length;\n  for (let i = 0; i < len; i += 1) {\n    let sub = s.slice(i);\n    if (sub.length === n) {\n      arr.push(sub);\n    }\n  }\n  return arr;\n};\n\n/*\nGiven a string s and a non-empty string p, you have been tasked to implement a \nfunction that returns true if the string s contains all the substrings of p, \nor false otherwise.\nExamples:\nselectStrings(\"Hello world\", \"world\") ==> true\nselectStrings(\"Hello world\", \"foo\") ==> false\nselectStrings(\"Hello world\", \"bar\") ==> false\nselectStrings(\"Hello world\", \"hellow\") ==> true\nselectStrings(\"Hello world\", \"Hello\") ==> true\n*/\nconst selectStrings = (s, p) => {\n  let arr = [];\n  let len = p.length;\n  let sub = s.slice(0);\n  for (let i = 0; i < len; i += 1) {\n    let sub = s.slice(i);\n    if (sub.length === len) {\n      arr.push(sub);\n    }\n  }\n  return arr.indexOf(p)!== -1;\n};\n\n/*\nGiven a string s and a string p, you have been tasked to implement a function \nthat returns the index of the first position in the string s that matches the \nsubstring p, or -1 if there is no such position.\nExamples:\nfindInStr(\"Hello world\", \"world\") ==> 1\nfindInStr(\"Hello world\", \"foo\") ==> -1\nfindInStr(\"Hello world\", \"bar\") ==> -1\nfindInStr(\"Hello world\", \"hellow\") ==> 0\nfindInStr(\"Hello world\", \"Hello\") ==> 0\n*/\nconst findInStr = (s, p) => {\n  let len = p.length;\n  let sub = s.slice(0);\n  for (let i = 0; i < len; i += 1) {\n    let sub = s.slice(i);\n    if (sub.length === len) {\n      if (sub === p) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\nGiven a string s, you have been tasked to implement a function that returns \nthe index of the first position in the string s that is a substring of the \nstring p, or -1 if there is no such position.\nExamples:\nfindInStr(\"Hello world\", \"world\") ==> 1\nfindInStr(\"Hello world\", \"foo\") ==> -1\nfindInStr(\"Hello world\", \"bar\") ==> -1\nfindInStr(\"Hello world\", \"hellow\") ==> 0\nfindInStr(\"Hello world\", \"Hello\") ==> 0\n*/\nconst findInStr = (s, p) => {\n  let len = p.length;\n  let sub = s.slice(0);\n  for (let i = 0; i < len; i += 1) {\n    let sub = s.slice(i);\n    if (sub.length === len) {\n      if (sub.indexOf(p)!== -1) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\nGiven a string s and a string p, you have been tasked to implement a function \nthat returns true if the string s contains at least one of the substrings of \np, or false otherwise.\nExamples:\ncontainsStr(\"Hello world\", \"world\") ==> true\ncontainsStr(\"Hello world\", \"foo\") ==> false\ncontainsStr(\"Hello world\", \"bar\") ==> false\ncontainsStr(\"Hello world\", \"hellow\") ==> true\ncontainsStr(\"Hello world\", \"Hello\") ==> true\n*/\nconst containsStr = (s, p) => {\n  let len = p.length;\n  let sub = s.slice(0);\n  for (let i = 0; i < len; i += 1) {\n    let sub = s.slice(i);\n    if (sub.length === len) {\n      if (sub.indexOf(p)!== -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\nGiven two strings s and t, you have been tasked to implement a function that \nreturns true if t is a anagram of s, or false otherwise.\nExamples:\nanagram(\"cat\", \"cog\") ==> false\nanagram(\"dog\", \"god\") ==> true\nanagram(\"dog\", \"dog\") ==> true\nanagram(\"dog\", \"dog\") ==> true\nanagram(\"cat\", \"cat\") ==> true\nanagram(\"cat\", \"bat\") ==> false\nanagram(\"cat\", \"dog\") ==> false\nanagram(\"dog\", \"dog\") ==> false\nanagram(\"dog\", \"cat\") ==> false\nanagram(\"dog\", \"dog\") ==> false\nanagram(\"cat\", \"dog\") ==> false\nanagram(\"cat\", \"dog\") ==> false\n*/\nconst anagram = (s, t) => {\n  let len = s.length;\n  let sub = s.slice(0);\n  for (let i = 0; i < len; i += 1) {\n    let sub = s.slice(i);\n    if (sub.length === len) {\n      if (sub!== t) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\nGiven two strings s and t, you have been tasked to implement a function that \nreturns true if"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  if (word === '') {\n    return '';\n  }\n\n  const lastConsonant = word.lastIndexOf(/(\\w)/);\n  const firstVowel = word.indexOf(/(\\w)/, lastConsonant + 1);\n\n  if (firstVowel === -1) {\n    return '';\n  }\n\n  let i = firstVowel;\n  while (i < lastConsonant) {\n    if (word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i] === 'u') {\n      return word[i];\n    }\n    i++;\n  }\n\n  return '';\n};\n\nmodule.exports = getClossetVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n\n  for (const i of lst) {\n    if (i === ')') {\n      if (stack.length === 0) return 'No';\n      if (stack[stack.length - 1]!== '(') return 'No';\n      stack.pop();\n    } else {\n      stack.push(i);\n    }\n  }\n\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nexport default matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  if (k === 1) {\n    return [arr[0]]\n  }\n  const max_index = arr.length - 1\n  const k_index = k - 1\n  const max_sum = arr[max_index]\n  const sum = arr[0]\n\n  const result = [arr[0]]\n  while (k_index > 0) {\n    if (sum + arr[k_index] > max_sum) {\n      max_sum = sum + arr[k_index]\n      max_index = k_index\n    }\n    sum += arr[k_index]\n    k_index--\n  }\n  result.push(max_sum)\n  return result\n}\n\nconsole.log(maxmium([-3, -4, 5], 3))\nconsole.log(maxmium([4, -4, 4], 2))\nconsole.log(maxmium([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % 2 === 1? lst[i] : 0;\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let total = 0;\n  for (let i = 0; i < k; i++) {\n    total += arr[i];\n  }\n  return total;\n}\n\nmodule.exports = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = [];\n  const next = (n, odd) => {\n    if (odd) {\n      oddCollatz.push(n);\n      return n + (n % 2 == 0? 1 : 3);\n    }\n    return next(n / 2,!odd);\n  };\n  next(n, true);\n  return oddCollatz;\n};\n\nconsole.log(getOddCollatz(10)); // [1, 5, 16, 8, 4, 2, 1]<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (typeof date!=='string') {\n    return false;\n  }\n\n  const parts = date.split('-');\n  const month = parseInt(parts[1], 10);\n  const day = parseInt(parts[2], 10);\n  const year = parseInt(parts[0], 10);\n\n  const monthValid = month <= 12;\n  const dayValid = day <= 31;\n  const yearValid = year <= 2100;\n\n  const valid = monthValid && dayValid && yearValid;\n  return valid;\n};\n\n/*\n  Write a function to check if a given string is a valid ip address.\n  The function should return true if a given string is a valid ip address otherwise false.\n  The given string can contain dots or dashes, but should not contain any leading zeros.\n  For example:\n  validIp('255.255.255.255') => true\n  validIp('256.255.255.255') => false\n  validIp('1.1.1.1') => false\n  validIp('1.1.1.1.') => false\n  validIp('1.1.1.1.1') => false\n  validIp('1.1.1.1.1.1') => false\n  validIp('1.1.1.1.1.1.1') => true\n\n  validIp('255.255.255.255') => true\n  validIp('256.255.255.255') => true\n  validIp('1.1.1.1') => true\n  validIp('1.1.1.1.') => true\n  validIp('1.1.1.1.1') => true\n  validIp('1.1.1.1.1.1') => true\n  validIp('1.1.1.1.1.1.1') => true\n  */\nconst validIp = (ip) => {\n  if (!ip) {\n    return false;\n  }\n  return /(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n   .test(ip);\n};\n\n/*\n  Write a function to check if a given string is a valid MAC address.\n  The function should return true if a given string is a valid MAC address otherwise false.\n  The given string should contain only hexadecimal characters and no spaces.\n  For example:\n  validMac('00:01:02:03:04:05') => true\n  validMac('00:01:02:03:04:05:06') => true\n  validMac('00:01:02:03:04:05:06:07') => true\n  validMac('00:01:02:03:04:05:06:07:08') => true\n  validMac('00:01:02:03:04:05:06:07:08:09') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19:20') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19:20:21') => true\n  validMac('00:01:02:03:04:05:06:07:08:09:10:11:12:13:14:15:16:17:18:19:20:21:22') => true\n  validMac('00:01:02:03:04:"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  if (!txt) {\n    return []\n  }\n\n  const words = txt.split(/\\s+/g)\n  return words\n}\n\n/*\n  Given a list of words and a number n, return all n-length combinations of the words.\n  Examples\n  allCombinations(\"abc\", 3) ➞ [[\"abc\", \"abc\", \"abc\"], [\"abc\", \"abc\", \"abc\"], [\"abc\", \"abc\", \"abc\"]]\n  allCombinations(\"abc\", 1) ➞ [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"b\", \"c\"]]\n  allCombinations(\"abc\", 2) ➞ [[\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"]]\n  allCombinations(\"abc\", 0) ➞ []\n  */\nconst allCombinations = (txt, n) => {\n  if (!txt ||!n) {\n    return []\n  }\n\n  if (n === 0) {\n    return []\n  }\n\n  let result = []\n  allCombinations(txt.slice(1), n - 1)\n   .forEach(combination => {\n      if (combination.length === n) {\n        result.push(combination)\n      }\n      combination.push(txt[0])\n      allCombinations(combination, n - 1)\n       .forEach(combination => {\n          result.push(combination)\n        })\n    })\n\n  return result\n}\n\n/*\n  Given a string of words, return a list of words, each of which is a palindrome.\n  Examples\n  isPalindrome(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  isPalindrome(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  */\nconst isPalindrome = (txt) => {\n  if (!txt) {\n    return []\n  }\n\n  const words = splitWords(txt)\n  return words.map(word => {\n    const rev = word.split('').reverse().join('')\n    return word === rev? word : ''\n  })\n}\n\n/*\n  Given a list of words, return a list of words that are not a palindrome.\n  Examples\n  notPalindrome(\"Hello world!\") ➞ [\"Hello world!\"]\n  notPalindrome(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  */\nconst notPalindrome = (txt) => {\n  if (!txt) {\n    return []\n  }\n\n  const words = splitWords(txt)\n  return words.filter(word =>!isPalindrome(word))\n}\n\n/*\n  Given a string of words, return a list of words that are not a palindrome, but are anagrams of each other.\n  Examples\n  notAnagram(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  notAnagram(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  */\nconst notAnagram = (txt) => {\n  if (!txt) {\n    return []\n  }\n\n  const words = splitWords(txt)\n  return words.filter(word =>!isPalindrome(word))\n   .filter(word => {\n      const a = word.split('').join('')\n      const b = a.split('').reverse().join('')\n      return word === b\n    })\n}\n\n/*\n  Given a string of words, return a list of all palindrome words that are anagrams of each other.\n  Examples\n  anagrams(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  anagrams(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  */\nconst anagrams = (txt) => {\n  if (!txt) {\n    return []\n  }\n\n  const words = splitWords(txt)\n  return words.filter(word => isPalindrome(word))\n   .filter(word => {\n      const a = word.split('').join('')\n      const b = a.split('').reverse().join('')\n      return word === b\n    })\n}\n\n/*\n  Given a string of words, return a list of words that are not anagrams of each other.\n  Examples\n  notAnagram(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  notAnagram(\"Hello world!\") ➞ [\"Hello world!\", \"olleH\", \"Hellowd\", \"dHellow\"]\n  */\nconst notAnagrams = (txt) => {\n  if (!txt) {\n    return []\n  }\n\n  const words = splitWords(txt)\n  return words.filter(word =>!isPalindrome(word))\n   .filter(word => {\n      const a = word.split('').join('')\n      const b = a.split('').reverse().join('')\n      return word === b\n    })\n}\n\nmodule.exports = {\n  splitWords,\n  allCombinations,\n  isPalindrome,\n  notPalindrome,\n  notAnagram,\n  anagrams\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  return lst.every((elem, index) => {\n    const prev = lst[index - 1];\n    return elem >= prev;\n  });\n};\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1.start, end1 = interval1.end,\n        start2 = interval2.start, end2 = interval2.end;\n  \n  if (start1 > end2 || start2 > end1) return false;\n  \n  if (start1 === end2) return start1 < end1;\n  \n  const result = [start1, end2];\n  \n  if (result.includes(start2) || result.includes(end1)) return false;\n  \n  return true;\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  return arr.reduce((prod, number) => {\n    if (number > 0) {\n      return prod + number;\n    } else if (number < 0) {\n      return prod + number * -1;\n    } else {\n      return null;\n    }\n  }, 0);\n};\n\nexport {\n  prodSigsn\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [n, m] = grid.length;\n  const [x, y] = grid[0].length;\n  const [v, p] = dp(grid, [0, 0], [x, y], k);\n  return v;\n};\n\nfunction dp(grid, [x, y], [i, j], k) {\n  const [n, m] = grid.length;\n  const [v, p] = [Infinity, []];\n  const [x, y] = grid[0].length;\n  for (let i = 0; i <= k; i++) {\n    for (let j = 0; j <= k; j++) {\n      const next = [x, y];\n      const path = p.slice();\n      const neighbors = [\n        [-1, 0], [1, 0], [0, -1], [0, 1],\n        [-1, -1], [-1, 1], [1, -1], [1, 1]\n      ];\n      for (let a = 0; a < 4; a++) {\n        const [dx, dy] = neighbors[a];\n        next[0] += dx;\n        next[1] += dy;\n        const [x2, y2] = grid[next[0]][next[1]];\n        const [v2, p2] = dp(grid, next, [x2, y2], i);\n        if (v2 < v) {\n          v = v2;\n          next[0] = x2;\n          next[1] = y2;\n          path = p2;\n        }\n      }\n      p.push(next);\n    }\n  }\n  return [v, p];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  const t = [];\n  for (let i = 0; i <= n; i++) {\n    if (i % 2 === 0) {\n      t.push(i + 1);\n    } else {\n      t.push(t[i - 1] + t[i - 2] + t[i + 1]);\n    }\n  }\n  return t;\n};\n\nconsole.log(tir(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += n % 10;\n        n = n / 10;\n    }\n    return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let open = 0, i, j;\n  for (i = 0; i < string.length; i++) {\n    if (string[i] === '[') open++;\n    else if (string[i] === ']') open--;\n  }\n\n  if (open === 0) return true;\n  else if (open < 0) return false;\n\n  let stack = [];\n\n  for (i = 0; i < string.length; i++) {\n    if (string[i] === '[') stack.push(i);\n    else if (string[i] === ']') {\n      if (stack.length > 0 && stack[stack.length - 1] < i) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]]]]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.map(x => x * x).reduce((a, b) => a + b)\n}\n\nconst sumSquaredDiff = (lst1, lst2) => {\n  return sumSquares(lst1) - sumSquares(lst2)\n}\n\nmodule.exports = sumSquaredDiff\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[a-zA-Z]+$/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  alphabetic characters.\n  Examples:\n  containsOnlyAlpha(\"abc123\") ➞ true\n  containsOnlyAlpha(\"asdf\") ➞ true\n  containsOnlyAlpha(\"asdf!@#$\") ➞ false\n  */\nconst containsOnlyAlpha = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[a-zA-Z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  numeric characters.\n  Examples:\n  containsOnlyNumeric(\"123\") ➞ true\n  containsOnlyNumeric(\"asdf\") ➞ false\n  containsOnlyNumeric(\"asdf!@#$\") ➞ false\n  */\nconst containsOnlyNumeric = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[0-9]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  lowercase letters.\n  Examples:\n  containsOnlyLowerCase(\"abc123\") ➞ true\n  containsOnlyLowerCase(\"asdf\") ➞ true\n  containsOnlyLowerCase(\"asdf!@#$\") ➞ false\n  */\nconst containsOnlyLowerCase = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[a-z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  uppercase letters.\n  Examples:\n  containsOnlyUpperCase(\"ABC123\") ➞ true\n  containsOnlyUpperCase(\"ASDF\") ➞ true\n  containsOnlyUpperCase(\"ASDF!@#$\") ➞ false\n  */\nconst containsOnlyUpperCase = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[A-Z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  alphanumeric characters.\n  Examples:\n  containsOnlyAlphaNumeric(\"123\") ➞ true\n  containsOnlyAlphaNumeric(\"asdf\") ➞ true\n  containsOnlyAlphaNumeric(\"asdf!@#$\") ➞ true\n  */\nconst containsOnlyAlphaNumeric = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[0-9a-zA-Z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  alphanumeric letters.\n  Examples:\n  containsOnlyAlphaNumeric(\"123\") ➞ true\n  containsOnlyAlphaNumeric(\"asdf\") ➞ false\n  containsOnlyAlphaNumeric(\"asdf!@#$\") ➞ false\n  */\nconst containsOnlyAlphaNumericLower = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[0-9a-z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  alphanumeric letters and numbers.\n  Examples:\n  containsOnlyAlphaNumericNumeric(\"123\") ➞ true\n  containsOnlyAlphaNumericNumeric(\"asdf\") ➞ true\n  containsOnlyAlphaNumericNumeric(\"asdf!@#$\") ➞ true\n  */\nconst containsOnlyAlphaNumericNumeric = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[0-9a-zA-Z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  alphabetic letters and numbers.\n  Examples:\n  containsOnlyAlphaNumericNumeric(\"123\") ➞ true\n  containsOnlyAlphaNumericNumeric(\"asdf\") ➞ false\n  containsOnlyAlphaNumericNumeric(\"asdf!@#$\") ➞ false\n  */\nconst containsOnlyAlphaNumericLowerNumeric = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[0-9a-z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  alphanumeric letters and numbers.\n  Examples:\n  containsOnlyAlphaNumericNumeric(\"123\") ➞ true\n  containsOnlyAlphaNumericNumeric(\"asdf\") ➞ false\n  containsOnlyAlphaNumericNumeric(\"asdf!@#$\") ➞ false\n  */\nconst containsOnlyAlphaNumericUpperNumeric = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[A-Z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  alphanumeric letters and numbers.\n  Examples:\n  containsOnlyAlphaNumericNumeric(\"123\") ➞ true\n  containsOnlyAlphaNumericNumeric(\"asdf\") ➞ false\n  containsOnlyAlphaNumericNumeric(\"asdf!@#$\") ➞ false\n  */\nconst containsOnlyAlphaNumericUpperLowerNumeric = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return /[A-Za-z]+/.test(txt);\n};\n\n/*\n  Create a function that checks if a string contains only\n  letters.\n  Examples:\n  containsOnlyLetters(\"abc123\") ➞ true\n  "}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1\n  let minIndex = 0\n\n  arr.forEach((element, index) => {\n    if (index === arr.length - 1) return\n\n    if (index === 0) {\n      maxIndex = element\n      minIndex = element\n    } else {\n      if (element >= maxIndex) {\n        maxIndex = element\n      }\n      if (element < minIndex) {\n        minIndex = element\n      }\n    }\n  })\n\n  if (maxIndex === -1) return -1\n  return maxIndex\n}\n\nexport default canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const maxNeg = findMaxNegInt(lst)\n  const minPos = findMinPosInt(lst)\n  if (maxNeg) {\n    return [maxNeg, minPos]\n  } else if (minPos) {\n    return [minPos, null]\n  } else {\n    return [null, null]\n  }\n}\n\nconst findMaxNegInt = (lst) => {\n  let largestNeg = 0\n  lst.forEach(num => {\n    if (num < 0) {\n      if (largestNeg < num) {\n        largestNeg = num\n      }\n    }\n  })\n  return largestNeg\n}\n\nconst findMinPosInt = (lst) => {\n  let smallestPos = Infinity\n  lst.forEach(num => {\n    if (num > 0) {\n      if (smallestPos > num) {\n        smallestPos = num\n      }\n    }\n  })\n  return smallestPos\n}\n\nmodule.exports = lagrestSmallestIntgeers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  let aType = typeof a\n  let bType = typeof b\n  if (aType ==='string' && bType ==='string') {\n    return a > b? a : b\n  } else if (aType === 'number' && bType === 'number') {\n    return a > b? a : b\n  } else if (aType ==='string' && bType === 'number') {\n    return a > b? a : b\n  } else if (aType === 'number' && bType ==='string') {\n    return a > b? a : b\n  } else {\n    return null\n  }\n}\n\nconst compaerTwo = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerTwo(1, 2.5) ➞ 2.5\n  compaerTwo(1, \"2,3\") ➞ \"2,3\"\n  compaerTwo(\"5,1\", \"6\") ➞ \"5,1\"\n  compaerTwo(\"1\", 1) ➞ null\n  */\nconst compaerThree = (a, b) => {\n  let aType = typeof a\n  let bType = typeof b\n  if (aType ==='string' && bType ==='string') {\n    return a < b? a : b\n  } else if (aType === 'number' && bType === 'number') {\n    return a < b? a : b\n  } else if (aType ==='string' && bType === 'number') {\n    return a < b? a : b\n  } else if (aType === 'number' && bType ==='string') {\n    return a < b? a : b\n  } else {\n    return null\n  }\n}\n\nconst compaerFour = (a, b) => {\n  if (a < b) {\n    return a\n  } else {\n    return b\n  }\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerFour(1, 2.5) ➞ 2.5\n  compaerFour(1, \"2,3\") ➞ \"2,3\"\n  compaerFour(\"5,1\", \"6\") ➞ \"6\"\n  compaerFour(\"1\", 1) ➞ null\n  */\nconst compaerFive = (a, b) => {\n  let aType = typeof a\n  let bType = typeof b\n  if (aType ==='string' && bType ==='string') {\n    return a > b? a : b\n  } else if (aType === 'number' && bType === 'number') {\n    return a > b? a : b\n  } else if (aType ==='string' && bType === 'number') {\n    return a > b? a : b\n  } else if (aType === 'number' && bType ==='string') {\n    return a > b? a : b\n  } else {\n    return null\n  }\n}\n\nconst compaerSix = (a, b) => {\n  if (a < b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerSeven = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerEight = (a, b) => {\n  if (a > b) {\n    return b\n  } else {\n    return a\n  }\n}\n\nconst compaerNine = (a, b) => {\n  if (a < b) {\n    return b\n  } else {\n    return a\n  }\n}\n\nconst compaerTen = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerEleven = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerTwelve = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerThirteen = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerFourteen = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerFifteen = (a, b) => {\n  if (a > b) {\n    return b\n  } else {\n    return a\n  }\n}\n\nconst compaerSixteen = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerSeventeen = (a, b) => {\n  if (a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst compaerEighteen = (a, b) => {\n  if (a > b) {\n    return b\n  } else {\n    return a\n  }\n}\n\nconst"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n;\n  let count = 0;\n  while (sum >= 4) {\n    if (sum % 2 === 0) {\n      count++;\n    }\n    sum -= 2;\n  }\n  return count === 4;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    // factorial of n - 1\n    let factorial = 1;\n    for (let i = n - 1; i >= 1; i--) {\n        factorial *= i;\n    }\n    // factorial of n - 2\n    factorial *= n - 1;\n    return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the factorial of\n  that integer.\n  */\nconst factorial = (n) => {\n    if (n < 0) {\n        throw new Error(`factorial() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of that integer.\n  */\nconst specialFactorial = (n) => {\n    if (n < 0) {\n        throw new Error(`specialFactorial() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 1;\n    }\n    return n * specialFactorial(n - 1);\n};\n\nconst factorial = (n) => {\n    if (n < 0) {\n        throw new Error(`factorial() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n};\n\nconst sum = (n) => {\n    if (n < 0) {\n        throw new Error(`sum() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    return n + sum(n - 1);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0) {\n        throw new Error(`fibonacci() can't work with negative numbers`);\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci = (n) => {\n    if (n < 0"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  let output = text.split(\" \")\n  output = output.map(text => {\n    if (text.length > 2) {\n      let last = text.substring(text.length - 1)\n      if (last === \" \") {\n        output.splice(output.length - 1, 1)\n      }\n      if (text.substring(0, 2) === \"  \") {\n        return \"-\" + text.substring(2)\n      } else {\n        return text.substring(0, text.length - 1)\n      }\n    } else {\n      return text\n    }\n  })\n  return output.join(\" \")\n}\n\n/*\n  Given a string text, replace all newlines with newline-space,\n  and if a string has more than 2 consecutive newlines,\n  then replace all consecutive newlines with -\n*/\nconst fixNewlines = (text) => {\n  let output = text.split(\"\\n\")\n  output = output.map(text => {\n    if (text.length > 2) {\n      let last = text.substring(text.length - 1)\n      if (last === \"\\n\") {\n        output.splice(output.length - 1, 1)\n      }\n      if (text.substring(0, 2) === \"\\n\\n\") {\n        return \"--\" + text.substring(2)\n      } else {\n        return text.substring(0, text.length - 1)\n      }\n    } else {\n      return text\n    }\n  })\n  return output.join(\"\\n\")\n}\n\nconst format = (text, options) => {\n  options = options || {}\n  text = fixSpacse(text)\n  text = fixNewlines(text)\n  let output = \"\"\n  let newline = true\n  for (let line of text.split(\"\\n\")) {\n    if (newline) {\n      output += line + \"\\n\"\n    } else {\n      output += \"   \" + line + \"\\n\"\n    }\n    newline =!newline\n  }\n  return output\n}\n\nmodule.exports = format\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let re = /(?=.*\\d{3})(?=.*\\.)(?=.*[a-zA-Z])[^\\.]+\\.\\w{1,3}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  let re = /(?=.*\\d{3})(?=.*\\.)(?=.*[a-zA-Z])[^\\.]+\\.\\w{1,3}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  let re = /(?=.*\\d{3})(?=.*\\.)(?=.*[a-zA-Z])[^\\.]+\\.\\w{1,3}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  let re = /(?=.*\\d{3})(?=.*\\.)(?=.*[a-zA-Z])[^\\.]+\\.\\w{1,3}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck5 = (file_name) => {\n  let re = /(?=.*\\d{3})(?=.*\\.)(?=.*[a-zA-Z])[^\\.]+\\.\\w{1,3}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const n = lst.length\n  const res = 0\n  for (let i = 0; i < n; i += 1) {\n    if ((i % 3) === 0) {\n      res += lst[i] * lst[i]\n    }\n    if ((i % 4) === 0) {\n      res += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n    const words = sentence.split(\" \");\n    const wordsLength = words.length;\n    let primeNumber = 0;\n    for (let i = 0; i < wordsLength; i++) {\n        for (let j = i + 1; j < wordsLength; j++) {\n            let min = Math.min(words[i].length, words[j].length);\n            primeNumber += min;\n        }\n    }\n    return words.map(word => {\n        const len = Math.floor(primeNumber / word.length);\n        const primeNumber = primeNumber % word.length;\n        const newWord = `${word}${len}`;\n        return newWord.substr(0, primeNumber);\n    }).join(\" \");\n};\n\nmodule.exports = wrodsInSentenec;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  return (parseInt(x) * parseInt(n)) % 1 === 0;\n}\n\nexport default simpilfy;\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const len = nums.length\n  const sorted = []\n\n  for (let i = 0; i < len; i++) {\n    sorted.push(nums[i])\n  }\n\n  for (let i = 0; i < len - 1; i++) {\n    const left = sorted[i]\n    const right = sorted[i + 1]\n    const sum = left + right\n    const diff = sum - left - right\n    const leftSum = sum.toString().slice(0, sum.toString().length - 1)\n    const rightSum = sum.toString().slice(1, sum.toString().length)\n    const leftDiff = diff.toString().slice(0, diff.toString().length - 1)\n    const rightDiff = diff.toString().slice(1, diff.toString().length)\n\n    if (sum > 0 && leftSum === rightSum && leftDiff === rightDiff) {\n      sorted.splice(i, 1)\n      sorted.splice(i + 1, 0, left)\n    }\n  }\n\n  return sorted\n}\n\nexport default roderByPoints\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  nums.forEach((n) => {\n    if (n > 10 && n % 10 === 1 && n % 11 === 1) {\n      result.push(n);\n    }\n  });\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (0, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0\n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter2 = (nums) => {\n  const result = [];\n  nums.forEach((n) => {\n    if (n > 10 && n % 10 === 0 && n % 11 === 0) {\n      result.push(n);\n    }\n  });\n  return result.length;\n};\n\nconsole.log(specialFilter2([15, -73, 14, -15])); // 0\nconsole.log(specialFilter2([33, -2, -3, 45, 21, 109])); // 3<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  let res = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i < j && j < k) {\n          if (a[i] + a[j] + a[k] % 3 === 0) {\n            res++;\n          }\n        }\n      }\n    }\n  }\n  return res;\n};\n\nconsole.log(getMaxTrpiles(10));<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (typeof planet1!=='string') {\n    return [];\n  }\n  if (typeof planet2!=='string') {\n    return [];\n  }\n  let list = [];\n  for (let i = 0; i < 8; i++) {\n    let j = i + 1;\n    let a = Math.pow(Math.cos(Math.PI / (j + 0.5) * (j - 1)), 2);\n    let b = Math.pow(Math.sin(Math.PI / (j + 0.5) * (j - 1)), 2);\n    let c = (Math.pow(Math.cos(Math.PI / j * j), 2) + Math.pow(Math.sin(Math.PI / j * j), 2)) / a;\n    let d = (Math.pow(Math.cos(Math.PI / j * j), 2) - Math.pow(Math.sin(Math.PI / j * j), 2)) / b;\n    if (a >= b && c >= d) {\n      list.push(planet1);\n    }\n    if (a <= b && c <= d) {\n      list.push(planet2);\n    }\n  }\n  return list;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let map = {}\n  for (let i = 0; i < lst.length; i++) {\n    map[lst[i].length] = (map[lst[i].length] || 0) + 1\n  }\n\n  return Object.keys(map)\n   .filter(length => (map[length] > 1))\n   .sort((a, b) => (a < b? -1 : 1))\n   .map(length => lst.filter(word => word.length === length))\n}\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"aa\", \"aaa\", \"cd\"]\n]\n\nconsole.log(sortedListSum(test))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return y\n    } else {\n        return x\n    }\n};\n\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  const sum = (a) => {\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] > 0 && a[i] % 2 === 1) {\n        result += a[i];\n      }\n    }\n    return result;\n  };\n  const len = lst.length;\n  if (len === 0) {\n    return 0;\n  }\n  const odd = (x) => x % 2 === 1;\n  const even = (x) => x % 2 === 0;\n  const oddSum = sum(lst.filter(odd));\n  const evenSum = sum(lst.filter(even));\n  return oddSum + evenSum;\n};\n\nconsole.log(doublehTeDifference([1, 3, 2, 0]));\nconsole.log(doublehTeDifference([-1, -2, 0]));\nconsole.log(doublehTeDifference([9, -2]));\nconsole.log(doublehTeDifference([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const length = game.length;\n  const score = game.map((score, index) => score);\n  const guess = guess.map((guess, index) => guess);\n  const difference = [];\n  for (let i = 0; i < length; i++) {\n    difference.push(guess[i] - score[i]);\n  }\n  return difference;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let class_name_parts = class_name.split('.')\n  let strong_extension = class_name_parts[0]\n  for (let i = 1; i < class_name_parts.length; i++) {\n    let extension = class_name_parts[i]\n    let extension_strength = strength(extension)\n    if (extension_strength < 0) {\n      strong_extension = extension\n      break\n    }\n  }\n  return `${class_name}.${strong_extension}`\n}\n\nmodule.exports = strongestExtension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  const n = a.length, m = b.length\n  for (let i = 0; i <= n - m; i++) {\n    const sub = a.slice(i, i + m)\n    if (sub.indexOf(b) > -1) return true\n  }\n  return false\n}\n\n/*\n  ccypatternCheck(\"a\",\"b\") => false\n  ccypatternCheck(\"a\",\"b\") => false\n  ccypatternCheck(\"abc\",\"abd\") => true\n  ccypatternCheck(\"abc\",\"abd\") => true\n  ccypatternCheck(\"abc\",\"bca\") => true\n  ccypatternCheck(\"abc\",\"bca\") => true\n  ccypatternCheck(\"abcd\",\"abc\") => false\n  ccypatternCheck(\"abcd\",\"abd\") => true\n  ccypatternCheck(\"abcd\",\"bcda\") => true\n  ccypatternCheck(\"abcd\",\"bcda\") => true\n  ccypatternCheck(\"abcd\",\"dabcd\") => true\n  ccypatternCheck(\"abcd\",\"dabcd\") => true\n  ccypatternCheck(\"abcd\",\"cdabcd\") => false\n  ccypatternCheck(\"abcd\",\"cdabcd\") => false\n  ccypatternCheck(\"abcd\",\"cdabcd\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  ccypatternCheck(\"abcdef\",\"ef\") => false\n  "}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = []\n  const oddDigits = []\n  for (let i = 0; i < num.toString().length; i++) {\n    const remainder = num % 2\n    if (remainder == 0) {\n      evenDigits.push(num)\n    } else {\n      oddDigits.push(num)\n    }\n    num = num / 2\n  }\n  return (evenDigits, oddDigits)\n}\n\nexport default evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  number = parseInt(number, 10);\n  let str = '',\n    i,\n    current,\n    previous = 0;\n\n  for (i = 1; i <= number; i++) {\n    current = number - i;\n    if (current % 10 == 0) {\n      str += 'c';\n    } else if (current % 10 == 1) {\n      str += 'd';\n    } else if (current % 10 == 2) {\n      str += 'e';\n    } else if (current % 10 == 3) {\n      str += 'f';\n    } else if (current % 10 == 4) {\n      str += 'g';\n    } else if (current % 10 == 5) {\n      str += 'h';\n    } else if (current % 10 == 6) {\n      str += 'i';\n    } else if (current % 10 == 7) {\n      str += 'j';\n    } else if (current % 10 == 8) {\n      str += 'k';\n    } else if (current % 10 == 9) {\n      str += 'l';\n    }\n\n    if (current % 100 > 0) {\n      str += 'x';\n      previous = current;\n    }\n  }\n\n  str = str.replace(/[xcl]/g, (match, number) => {\n    return number == previous? match : match.toUpperCase();\n  });\n  return str.toLowerCase();\n};\n\nexport { intToMinRioman };\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  if (a + b > c) {\n    return false;\n  }\n  if (b + c > a) {\n    return false;\n  }\n  if (c + a > b) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle = (a, b, c) => {\n  if (a > b && a > c) {\n    return false;\n  }\n  if (b > c && b > a) {\n    return false;\n  }\n  if (c > a && c > b) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle2 = (a, b, c) => {\n  if (a > b && b > c) {\n    return false;\n  }\n  if (a > c && c > b) {\n    return false;\n  }\n  if (b > c && c > a) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle3 = (a, b, c) => {\n  if (a > b && a > c && b > c) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle4 = (a, b, c, d) => {\n  if (a > b && a > c && b > c) {\n    return false;\n  }\n  if (a > d && a > b && b > d && c > d) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle5 = (a, b, c, d, e) => {\n  if (a > b && a > c && b > c) {\n    return false;\n  }\n  if (a > d && a > b && b > d && c > d) {\n    return false;\n  }\n  if (a > e && a > b && b > e && c > e && d > e) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle6 = (a, b, c, d, e, f) => {\n  if (a > b && a > c && b > c) {\n    return false;\n  }\n  if (a > d && a > b && b > d && c > d) {\n    return false;\n  }\n  if (a > e && a > b && b > e && c > e && d > e) {\n    return false;\n  }\n  if (a > f && a > b && b > f && c > f && d > f && e > f) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle7 = (a, b, c, d, e, f, g) => {\n  if (a > b && a > c && b > c) {\n    return false;\n  }\n  if (a > d && a > b && b > d && c > d) {\n    return false;\n  }\n  if (a > e && a > b && b > e && c > e && d > e) {\n    return false;\n  }\n  if (a > f && a > b && b > f && c > f && d > f && e > f) {\n    return false;\n  }\n  if (a > g && a > b && b > g && c > g && d > g && e > g && f > g) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle8 = (a, b, c, d, e, f, g, h) => {\n  if (a > b && a > c && b > c) {\n    return false;\n  }\n  if (a > d && a > b && b > d && c > d) {\n    return false;\n  }\n  if (a > e && a > b && b > e && c > e && d > e) {\n    return false;\n  }\n  if (a > f && a > b && b > f && c > f && d > f && e > f) {\n    return false;\n  }\n  if (a > g && a > b && b > g && c > g && d > g && e > g && f > g) {\n    return false;\n  }\n  if (a > h && a > b && b > h && c > h && d > h && e > h && f > h && g > h) {\n    return false;\n  }\n  return true;\n};\n\nconst triangle9 = (a, b, c, d, e, f, g, h, i) => {\n  if (a > b && a > c && b > c) {\n    return false;\n  }\n  if (a > d && a > b && b > d && c > d) {\n    return false;\n  }\n  if (a > e && a > b && b > e && c > e && d > e) {\n    return false;\n  }\n  if (a > f && a > b && b > f && c > f && d > f && e > f) {\n    return false;\n  }\n  if (a > g && a > b && b > g && c > g && d > g && e > g && f > g) {\n    return false;\n  }\n  if (a > h && a > b && b > h && c > h && d > h && e > h && f > h && g > h) {\n    return false;\n  }\n  if (a > i && a > b && b > i && c > i && d > i && e > i && f > i && g > i && h > i) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = {\n  triangle,\n  triangle2,\n  triangle3,\n  triangle4,\n  triangle5,\n  triangle6,\n  triangle7,\n  triangle8,\n  triangle9,\n  rightAngelTriangle,\n  triangle10,\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const map = new Map()\n  let max = 0\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (map.has(word)) {\n      if (map.get(word) > max) {\n        max = map.get(word)\n      }\n    } else {\n      map.set(word, 1)\n    }\n  }\n  return map.get(max)\n}\n\nconsole.log(findMax([\"name\", \"enam\", \"game\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number >= need) {\n        return [need, 0];\n    }\n    if (number >= remaining) {\n        return [number, remaining];\n    }\n    return [number, remaining];\n}\n\nexport {eat};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const lenOperator = operator.length\n  const lenOperand = operand.length - 1\n  const array = []\n  const result = 0\n\n  if (lenOperand === 0) {\n    console.log(operator + ': the first operand')\n    return operator + ': the first operand'\n  }\n\n  if (lenOperand === 1) {\n    if (lenOperator === 1) {\n      return operator + ': the first operand'\n    } else {\n      return operator[1] + ': the second operand'\n    }\n  }\n\n  if (lenOperand === 2) {\n    for (let i = 0; i < lenOperator; i++) {\n      array.push(operator[i])\n    }\n\n    for (let i = 0; i < lenOperand; i++) {\n      array.push(operand[i])\n    }\n\n    for (let i = 0; i < lenOperator; i++) {\n      if (i === lenOperator - 1) {\n        result += array[i] * array[i + 1]\n      } else {\n        result += array[i] * array[i + 1]\n      }\n    }\n  }\n\n  return result\n}\n\nconsole.log(doAlgebra(['+', '*', '-'], ['2', '3', '4', '5']))\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  let isLower = false;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      isLower = true;\n    } else if (s[i].toUpperCase() === s[i]) {\n      isLower = false;\n    } else {\n      isLower = false;\n    }\n    result += isLower? s[i].toUpperCase() : s[i].toLowerCase();\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text) {\n        return MD5(text).toString();\n    }\n    return null;\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a64f6f8d5a07d2e9fc9d9e7d9d8e097d7f1f2d9b0eef2d7d7eef3d7d9d9e7d9d8e9f2d7d7f3d7d9d9e7d9d8e9f2d7d7f3d7d9d9e7d9d9e7d9d8e9f2d7d7d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d7d7f3d7d9d9e9f2d"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const start = a;\n  const end = b;\n  const result = [];\n\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
