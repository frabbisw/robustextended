{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_stack = [];\n  const stack_pointer = 0;\n  const split_string = paren_string.split('(');\n  const split_string_length = split_string.length;\n  const split_string_first = split_string[0];\n  const split_string_second = split_string[1];\n\n  for (let i = 0; i < split_string_length; i++) {\n    if (split_string[i] === '(') {\n      paren_stack.push(i);\n    } else if (split_string[i] === ')') {\n      const index = paren_stack.pop();\n      if (index!== undefined) {\n        paren_stack.push(index);\n        const string = paren_stack.pop();\n        const string_length = split_string[string].length;\n        const split_string_second = split_string[string_length - 1];\n\n        if (split_string_second === ')') {\n          const sub_string = split_string[string].slice(1, -1);\n          const split_string_second = split_string_second.slice(1, -1);\n          split_string[string] = sub_string;\n          split_string[string_length - 1] = split_string_second;\n          split_string.splice(string, 1);\n          split_string.splice(string_length - 1, 1);\n        }\n      }\n    }\n  }\n  return split_string;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateInteger = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateDecimal = (number) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateDecimal2 = (number) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return decimal;\n};\n\nconst truncateDecimal3 = (number) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3.5\n  */\nconst truncateNubmer2 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer3 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer4 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer5 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer6 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer7 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer8 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer9 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer10 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer11 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer12 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer13 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer14 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer15 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer16 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer17 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer18 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer19 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer20 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer21 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer22 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer23 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer24 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer25 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer26 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer27 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer28 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer29 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer30 = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\nconst truncateNubmer31 = (number) => {\n  let"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  if (operations.length === 0) return false;\n  let currOp = 0;\n  let currValue = 0;\n  while (currOp < operations.length) {\n    currValue = operations[currOp];\n    if (currValue < 0) return true;\n    currOp++;\n  }\n  return false;\n};\n\nmodule.exports = belowZeor;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const average = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - average));\n  return average;\n};\n\n/*\n  In order to compare our algorithm to the one in the book,\n  we will need to calculate a standard deviation of the input numbers.\n  To get the standard deviation of the list, we can use the\n  variance function:\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  The standard deviation of a list is equal to the square root of the variance.\n  >>> Math.sqrt(variance([1.0, 2.0, 3.0, 4.0]))\n  1.25\n  */\nconst variance = (numbers) => {\n  const average = mean(numbers);\n  return sum(\n    numbers.map((x) => Math.pow(x - average, 2)),\n  ) / numbers.length;\n};\n\n/*\n  In order to compare our algorithm to the one in the book,\n  we will need to calculate the median of the input numbers.\n  The median is the number in the middle of the list,\n  divided by 2.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  The median is the average of the two middle numbers.\n  >>> mean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const size = numbers.length;\n  if (size % 2 === 0) {\n    return (numbers[(size - 1) / 2] + numbers[size / 2]) / 2;\n  } else {\n    return numbers[size / 2];\n  }\n};\n\n/*\n  In order to compare our algorithm to the one in the book,\n  we will need to calculate the mode of the input numbers.\n  The mode is the number that appears most frequently in the list.\n  >>> mode([1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 4.0, 4.0])\n  2.0\n  The mode is the number that appears the most in the list.\n  >>> mode([1.0, 2.0, 3.0, 4.0, 2.0, 4.0, 1.0, 1.0])\n  4.0\n  */\nconst mode = (numbers) => {\n  const counts = new Map();\n  numbers.forEach((x) => {\n    counts.set(x, counts.get(x) || 0);\n    counts.set(x, counts.get(x) + 1);\n  });\n  const maxCount = Math.max(...counts.values());\n  return counts.get(maxCount);\n};\n\n/*\n  Now that we have our algorithm implemented,\n  we will need to see how well it does on some sample data.\n  The following is an example of the data from the book:\n  >>> data = [\n ...   1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\n ...   11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0,\n ...   21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0,\n ...   31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0,\n ... ]\n  >>> meanAbsoltueDeviation(data)\n  4.09\n  >>> variance(data)\n  0.9\n  >>> median(data)\n  10.0\n  >>> mode(data)\n  13.0\n  */\n\n/*\n  To get the Mean Absolute Deviation of a list,\n  we will need to calculate the median of the input list.\n  Then, we will use the median as the centerpoint,\n  and the mean of the input list as the offset.\n  >>> data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0]\n  >>> MAD(data)\n  2.9\n  >>> median(data)\n  7.0\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0])\n  1.0\n  >>> MAD([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0])\n  3.0\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  for (let i = 0; i < len; i += 1) {\n    result.push(numbers[i])\n    if (i!== len - 1) {\n      result.push(delimeter)\n    }\n  }\n  return result\n}\n\n/*\n  *  Returns the number of times that an element appears in an array.\n  *  >>> count([1, 2, 3], 3)\n  *  2\n  *  >>> count([1, 2, 3, 3, 3], 3)\n  *  3\n  */\nconst count = (values, element) => {\n  const len = values.length\n  const count = 0\n  for (let i = 0; i < len; i += 1) {\n    if (values[i] === element) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  *  Returns the sum of all elements in an array.\n  *  >>> sum([1, 2, 3, 4, 5])\n  *  15\n  *  >>> sum([])\n  *  0\n  */\nconst sum = (values) => {\n  const len = values.length\n  let sum = 0\n  for (let i = 0; i < len; i += 1) {\n    sum += values[i]\n  }\n  return sum\n}\n\n/*\n  *  Returns the sum of all elements in an array, excluding the element in position i.\n  *  >>> sum([1, 2, 3, 4, 5], 1)\n  *  6\n  *  >>> sum([], 1)\n  *  0\n  */\nconst sum = (values, index) => {\n  const len = values.length\n  let sum = 0\n  for (let i = 0; i < len; i += 1) {\n    if (i!== index) {\n      sum += values[i]\n    }\n  }\n  return sum\n}\n\n/*\n  *  Returns the product of all elements in an array.\n  *  >>> product([1, 2, 3, 4, 5])\n  *  24\n  *  >>> product([])\n  *  1\n  */\nconst product = (values) => {\n  const len = values.length\n  let product = 1\n  for (let i = 0; i < len; i += 1) {\n    product *= values[i]\n  }\n  return product\n}\n\n/*\n  *  Returns the sum of all elements in an array, excluding the element in position i.\n  *  >>> product([1, 2, 3, 4, 5], 1)\n  *  6\n  *  >>> product([], 1)\n  *  1\n  */\nconst product = (values, index) => {\n  const len = values.length\n  let product = 1\n  for (let i = 0; i < len; i += 1) {\n    if (i!== index) {\n      product *= values[i]\n    }\n  }\n  return product\n}\n\n/*\n  *  Returns the maximum value in an array.\n  *  >>> max([1, 2, 3])\n  *  3\n  *  >>> max([])\n  *  0\n  */\nconst max = (values) => {\n  const len = values.length\n  let max = values[0]\n  for (let i = 1; i < len; i += 1) {\n    if (values[i] > max) {\n      max = values[i]\n    }\n  }\n  return max\n}\n\n/*\n  *  Returns the minimum value in an array.\n  *  >>> min([1, 2, 3])\n  *  1\n  *  >>> min([])\n  *  0\n  */\nconst min = (values) => {\n  const len = values.length\n  let min = values[0]\n  for (let i = 1; i < len; i += 1) {\n    if (values[i] < min) {\n      min = values[i]\n    }\n  }\n  return min\n}\n\n/*\n  *  Returns the sum of all elements in an array, excluding the element in position i.\n  *  >>> min([1, 2, 3, 4, 5], 1)\n  *  6\n  *  >>> min([], 1)\n  *  0\n  */\nconst min = (values, index) => {\n  const len = values.length\n  let min = values[0]\n  for (let i = 1; i < len; i += 1) {\n    if (i!== index) {\n      min += values[i]\n    }\n  }\n  return min\n}\n\n/*\n  *  Returns the minimum number in an array.\n  *  >>> min([1, 2, 3, 4, 5])\n  *  1\n  *  >>> min([])\n  *  0\n  */\nconst min = (values) => {\n  const len = values.length\n  let min = values[0]\n  for (let i = 1; i < len; i += 1) {\n    if (values[i] < min) {\n      min = values[i]\n    }\n  }\n  return min\n}\n\n/*\n  *  Returns the maximum number in an array.\n  *  >>> max([1, 2, 3, 4, 5])\n  *  5\n  *  >>> max([])\n  *  0\n  */\nconst max = (values) => {\n  const len = values.length\n  let max = values[0]\n  for (let i = 1; i < len; i += 1) {\n    if (values[i] > max) {\n      max = values[i]\n    }\n  }\n  return max\n}\n\n/*\n  *  Returns the sum of all elements in an array, excluding the element in position i.\n  *  >>> max([1, 2, 3, 4, 5], 1)\n  *  6\n  *  >>> max([], 1)\n  *  0\n  */\nconst max = (values, index) => {\n  const len = values"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const brackets = paren_string.match(/[()]/g);\n  const levels = brackets.length;\n  const stack = [1];\n  const stack_max = levels + 1;\n  const max_stack = levels;\n  const current_level = 1;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i];\n    const is_opening = char === '(';\n    if (is_opening) {\n      stack.push(current_level);\n    } else {\n      const is_closing = char === ')';\n      if (is_closing) {\n        const level = stack.pop();\n        if (level === stack_max) {\n          return max_stack;\n        }\n      }\n    }\n    current_level = Math.max(current_level, stack[stack.length - 1]);\n  }\n\n  return max_stack;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the depth of the deepest nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens2 = (paren_string) => {\n  const brackets = paren_string.match(/[()]/g);\n  const levels = brackets.length;\n  const stack = [];\n  const stack_max = levels + 1;\n  const current_level = 1;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i];\n    const is_opening = char === '(';\n    if (is_opening) {\n      stack.push(current_level);\n    } else {\n      const is_closing = char === ')';\n      if (is_closing) {\n        const level = stack.pop();\n        if (level === stack_max) {\n          return max_stack;\n        }\n      }\n    }\n    current_level = Math.max(current_level, stack[stack.length - 1]);\n  }\n\n  return max_stack;\n};\n\nconst parseNetsedParens3 = (paren_string) => {\n  const brackets = paren_string.match(/[()]/g);\n  const levels = brackets.length;\n  const stack = [];\n  const stack_max = levels + 1;\n  const current_level = 1;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i];\n    const is_opening = char === '(';\n    if (is_opening) {\n      stack.push(current_level);\n    } else {\n      const is_closing = char === ')';\n      if (is_closing) {\n        const level = stack.pop();\n        if (level === stack_max) {\n          return max_stack;\n        }\n      }\n    }\n    current_level = Math.max(current_level, stack[stack.length - 1]);\n  }\n\n  return max_stack;\n};\n\nexport {\n  parseNetsedParens,\n  parseNetsedParens2,\n  parseNetsedParens3,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) >= 0\n  })\n}\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstringIn = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) >= 0\n  })\n}\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filteBrySubstringNot = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) < 0\n  })\n}\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filteBrySubstringNotIn = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) < 0\n  })\n}\n\n/* Filter an input list of strings only for ones that start with given substring\n  >>> filteBrySubstring([], 'abc')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstringStart = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) === 0\n  })\n}\n\n/* Filter an input list of strings only for ones that do not start with given substring\n  >>> filteBrySubstring([], 'abc')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  []\n  */\nconst filteBrySubstringStartNot = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) < 0 && string.indexOf(substring) === 0\n  })\n}\n\n/* Filter an input list of strings only for ones that do not start with given substring\n  >>> filteBrySubstring([], 'abc')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  []\n  */\nconst filteBrySubstringStartNotIn = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) < 0 && string.indexOf(substring) === 0\n  })\n}\n\n/* Filter an input list of strings only for ones that end with given substring\n  >>> filteBrySubstring([], 'abc')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  ['abc', 'bacd']\n  */\nconst filteBrySubstringEnd = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) === string.length - substring.length\n  })\n}\n\n/* Filter an input list of strings only for ones that do not end with given substring\n  >>> filteBrySubstring([], 'abc')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  []\n  */\nconst filteBrySubstringEndNot = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) < 0 && string.indexOf(substring) === string.length - substring.length\n  })\n}\n\n/* Filter an input list of strings only for ones that do not end with given substring\n  >>> filteBrySubstring([], 'abc')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  []\n  */\nconst filteBrySubstringEndNotIn = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) < 0 && string.indexOf(substring) === string.length - substring.length\n  })\n}\n\n/* Filter an input list of strings only for ones that contains given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filteBrySubstringContains = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) >= 0\n  })\n}\n\n/* Filter an input list of strings only for ones that does not contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBrySubstringNotContains = (strings, substring) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) < 0\n  })\n}\n\n/* Filter an input list of strings only for ones that does not contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1]\n  }\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const product = numbers.reduce((acc, n) => acc * n, 1)\n  return [sum, product]\n}\n\n// console.log(sumProduct([], 1))\n// console.log(sumProduct([1, 2, 3, 4], 1))\n// console.log(sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 11))\n// console.log(sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20))\n// console.log(sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567,"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let result = [];\n  let max;\n\n  while(numbers.length > 0) {\n    max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n      }\n    }\n    result.push(max);\n    numbers.shift();\n  }\n  return result;\n}\n\nexport {rollingMax}\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.split('').reverse().join('');\n  const longest = string.substring(0, string.length - palindrome.length);\n  if (!isPalindrome(longest)) return longest;\n\n  const prefix = makePalindrome(string.substring(0, string.length - palindrome.length));\n  return prefix + palindrome;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  let rev = '';\n  for (let i = 0; i < string.length; i++) {\n    rev += string[string.length - i - 1];\n  }\n  return string == rev;\n}\n\n/* Find the longest palindrome in a string */\nconst longestPalindrome = (string) => {\n  let result = '';\n  let longest = 0;\n  let palindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    palindrome += string[i];\n    if (isPalindrome(palindrome)) {\n      if (palindrome.length > longest) {\n        result = palindrome;\n        longest = palindrome.length;\n      }\n    }\n    palindrome = palindrome.slice(0, -1);\n  }\n  return result;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  let rev = '';\n  for (let i = 0; i < string.length; i++) {\n    rev += string[string.length - i - 1];\n  }\n  return string == rev;\n}\n\n/* Find the longest palindrome in a string */\nconst longestPalindrome = (string) => {\n  let result = '';\n  let longest = 0;\n  let palindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    palindrome += string[i];\n    if (isPalindrome(palindrome)) {\n      if (palindrome.length > longest) {\n        result = palindrome;\n        longest = palindrome.length;\n      }\n    }\n    palindrome = palindrome.slice(0, -1);\n  }\n  return result;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  let rev = '';\n  for (let i = 0; i < string.length; i++) {\n    rev += string[string.length - i - 1];\n  }\n  return string == rev;\n}\n\n/* Find the longest palindrome in a string */\nconst longestPalindrome = (string) => {\n  let result = '';\n  let longest = 0;\n  let palindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    palindrome += string[i];\n    if (isPalindrome(palindrome)) {\n      if (palindrome.length > longest) {\n        result = palindrome;\n        longest = palindrome.length;\n      }\n    }\n    palindrome = palindrome.slice(0, -1);\n  }\n  return result;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  let rev = '';\n  for (let i = 0; i < string.length; i++) {\n    rev += string[string.length - i - 1];\n  }\n  return string == rev;\n}\n\n/* Find the longest palindrome in a string */\nconst longestPalindrome = (string) => {\n  let result = '';\n  let longest = 0;\n  let palindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    palindrome += string[i];\n    if (isPalindrome(palindrome)) {\n      if (palindrome.length > longest) {\n        result = palindrome;\n        longest = palindrome.length;\n      }\n    }\n    palindrome = palindrome.slice(0, -1);\n  }\n  return result;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  let rev = '';\n  for (let i = 0; i < string.length; i++) {\n    rev += string[string.length - i - 1];\n  }\n  return string == rev;\n}\n\n/* Find the longest palindrome in a string */\nconst longestPalindrome = (string) => {\n  let result = '';\n  let longest = 0;\n  let palindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    palindrome += string[i];\n    if (isPalindrome(palindrome)) {\n      if (palindrome.length > longest) {\n        result = palindrome;\n        longest = palindrome.length;\n      }\n    }\n    palindrome = palindrome.slice(0, -1);\n  }\n  return result;\n}\n\n/* Test if the string is a palindrome */\nconst isPalindrome = (string) => {\n  let rev = '';\n  for (let i = 0; i < string.length; i++) {\n    rev += string[string.length - i - 1];\n  }\n  return string == rev;\n}\n\n/* Find the longest palindrome in a string */\nconst longestPalindrome = (string) => {\n  let result = '';\n  let longest = 0"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const A = a.split('');\n  const B = b.split('');\n  const c = [];\n  for (let i = 0; i < A.length; i++) {\n    c.push(A[i] ^ B[i]);\n  }\n  return c.join('');\n};\n\n// Invert a string.\nconst strinInvert = (a) => {\n  const c = [];\n  for (let i = 0; i < a.length; i++) {\n    c.push(~a.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n// Return number of occurrences of char in a string.\nconst strinCount = (a, b) => {\n  let c = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a.charAt(i) === b.charAt(i)) {\n      c++;\n    }\n  }\n  return c;\n};\n\n// Return array of all unique characters in a string.\nconst strinUnique = (a) => {\n  const c = [];\n  for (let i = 0; i < a.length; i++) {\n    if (c.indexOf(a.charAt(i)) === -1) {\n      c.push(a.charAt(i));\n    }\n  }\n  return c;\n};\n\n// Return a random element from a string.\nconst strinRandom = (a) => {\n  const c = [];\n  for (let i = 0; i < a.length; i++) {\n    c.push(a.charAt(Math.floor(Math.random() * a.length)));\n  }\n  return c.join('');\n};\n\n// Return an array of all permutations of a string.\nconst strinPermutations = (a) => {\n  const c = [];\n  for (let i = 0; i < a.length; i++) {\n    c.push(a.charAt(i));\n  }\n  let tmp = c.slice();\n  while (c.length) {\n    let k = Math.floor(Math.random() * c.length);\n    c.splice(k, 1);\n    tmp = strinPermutations(tmp);\n    c = tmp.concat(c);\n  }\n  return c;\n};\n\n// Return string made of concatenating each string in a set.\nconst strinConcat = (a) => {\n  const c = [];\n  for (let i = 0; i < a.length; i++) {\n    c.push(a[i]);\n  }\n  return c.join('');\n};\n\n// Return string made of concatenating each string in a set.\nconst strinReverse = (a) => {\n  const c = [];\n  for (let i = 0; i < a.length; i++) {\n    c.push(a[a.length - i - 1]);\n  }\n  return c.join('');\n};\n\n// Return true if a string is a palindrome.\nconst strinPalindrome = (a) => {\n  const c = a.split('');\n  for (let i = 0; i < c.length / 2; i++) {\n    if (c[i]!== c[c.length - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if a string contains only 1s and 0s.\nconst strinOnesAndZeros = (a) => {\n  for (let i = 0; i < a.length; i++) {\n    if (a.charCodeAt(i)!== 0 && a.charCodeAt(i)!== 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if a string contains only 1s and 0s.\nconst strinOnes = (a) => {\n  for (let i = 0; i < a.length; i++) {\n    if (a.charCodeAt(i)!== 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if a string contains only 0s and 1s.\nconst strinZeros = (a) => {\n  for (let i = 0; i < a.length; i++) {\n    if (a.charCodeAt(i)!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if a string is empty.\nconst strinEmpty = (a) => {\n  return a.length === 0;\n};\n\n// Return true if a string is not empty.\nconst strinNotEmpty = (a) => {\n  return a.length > 0;\n};\n\n// Return true if a string contains any of the characters in set.\nconst strinContains = (a, b) => {\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a.charAt(i))!== -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Return true if a string contains all of the characters in set.\nconst strinContainsAll = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (strinContains(a, b.charAt(i)) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if a string contains all of the characters in set.\nconst strinContainsOnly = (a, b) => {\n  for (let i = 0; i < a.length; i++) {\n    if (strinContains(a.charAt(i), b) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if a string contains all of the characters in set.\nconst strinDoesNotContain = (a, b) => {\n  for (let i = 0; i < a.length; i++) {\n    if (str"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    return strings.reduce((previous, current) => {\n        if (current.length > previous.length) {\n            return current;\n        } else {\n            return previous;\n        }\n    }, strings[0]);\n};\n\n// --------------------------------------------------------------------\n\nconst test = (string, expected) => {\n    let result = longest(string);\n    console.log(`Longest of ${string} is ${result}`);\n    console.log(`Expected: ${expected}`);\n    console.log(`Your answer: ${result}`);\n    console.log(\"\");\n    if (result === expected) {\n        process.exit(0);\n    } else {\n        process.exit(1);\n    }\n};\n\n// --------------------------------------------------------------------\n\ntest([], undefined);\ntest(['a', 'b', 'c'], 'a');\ntest(['a', 'bb', 'ccc'], 'ccc');\ntest(['aaa', 'bbb', 'cccc'], 'cccc');\ntest(['aaa', 'bbb', 'cccc', 'dddd'], 'cccc');\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a === b) {\n    return a;\n  }\n  return Math.floor(Math.min(a, b) / Math.abs(Math.max(a, b) - Math.min(a, b)));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  const lastIndex = string.length - 1;\n  for (let i = 0; i <= lastIndex; i++) {\n    const prefix = string.slice(0, i + 1);\n    if (prefix) {\n      result.push(prefix);\n    }\n  }\n  return result;\n};\n\nexport default allPrefixes;\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let string = '';\n  for (let i = 0; i < n; i++) {\n    string += i;\n  }\n  return string;\n};\n\n/* Return the number of permutations of the given string.\n  >>> permutationCount('')\n  1\n  >>> permutationCount('a')\n  1\n  >>> permutationCount('abc')\n  3\n  >>> permutationCount('abcd')\n  2\n  */\nconst permutationCount = (str) => {\n  let n = str.length;\n  let count = 1;\n  for (let i = 0; i < n; i++) {\n    count *= (n - i);\n  }\n  return count;\n};\n\n/* Return a permutation of the given string.\n  >>> permutation('')\n  []\n  >>> permutation('a')\n  ['a']\n  >>> permutation('abc')\n  ['a', 'b', 'c', 'c', 'b', 'a']\n  >>> permutation('abcd')\n  ['a', 'b', 'c', 'd', 'a', 'b']\n  */\nconst permutation = (str) => {\n  const n = str.length;\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(str[i]);\n  }\n  let index = 0;\n  do {\n    const permutation = result.slice();\n    for (let i = 0; i < n; i++) {\n      const idx = (n - 1) - i;\n      permutation[i] = permutation[idx];\n      permutation[idx] = result[index];\n    }\n    index++;\n  } while (index < n);\n  return result;\n};\n\n/* Return a list of permutations of the given string.\n  >>> permutations('')\n  []\n  >>> permutations('a')\n  ['a']\n  >>> permutations('abc')\n  ['a', 'b', 'c', 'c', 'b', 'a']\n  >>> permutations('abcd')\n  ['a', 'b', 'c', 'd', 'a', 'b']\n  >>> permutations('abcde')\n  ['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']\n  */\nconst permutations = (str) => {\n  const n = str.length;\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(str.slice());\n  }\n  do {\n    const permutation = result.slice();\n    let index = 0;\n    do {\n      const idx = (n - 1) - index;\n      permutation[index] = permutation[idx];\n      permutation[idx] = result[index];\n      index++;\n    } while (index < n);\n    result.push(permutation);\n  } while (result.length < n);\n  return result;\n};\n\n/* Return a string containing all permutations of the given string.\n  >>> allPermutations('')\n  ''\n  >>> allPermutations('a')\n  'a'\n  >>> allPermutations('abc')\n  'abc'\n  >>> allPermutations('abcd')\n  'abcd'\n  >>> allPermutations('abcde')\n  'abcde'\n  */\nconst allPermutations = (str) => {\n  const n = str.length;\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < permutationCount(str.slice(0, i)); j++) {\n      result += str.slice(i, i + 1);\n    }\n  }\n  return result;\n};\n\n/* Return the number of permutations of the given string.\n  >>> permutationCount('')\n  1\n  >>> permutationCount('a')\n  1\n  >>> permutationCount('abc')\n  3\n  >>> permutationCount('abcd')\n  2\n  */\nconst permutationCount = (str) => {\n  const n = str.length;\n  let count = 1;\n  for (let i = 0; i < n; i++) {\n    count *= (n - i);\n  }\n  return count;\n};\n\n/* Return a permutation of the given string.\n  >>> permutation('')\n  []\n  >>> permutation('a')\n  ['a']\n  >>> permutation('abc')\n  ['a', 'b', 'c', 'c', 'b', 'a']\n  >>> permutation('abcd')\n  ['a', 'b', 'c', 'd', 'a', 'b']\n  */\nconst permutation = (str) => {\n  const n = str.length;\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(str[i]);\n  }\n  let index = 0;\n  do {\n    const permutation = result.slice();\n    for (let i = 0; i < n; i++) {\n      const idx = (n - 1) - i;\n      permutation[i] = permutation[idx];\n      permutation[idx] = result[index];\n    }\n    index++;\n  } while (index < n);\n  return result;\n};\n\n/* Return a list of permutations of the given string.\n  >>> permutations('')\n  []\n  >>> permutations('a')\n  ['a']\n  >>> permutations('abc')\n  ['a', 'b', 'c', 'c', 'b', 'a']\n  >>> permutations('abcd')\n  ['a', 'b', 'c', 'd', 'a', 'b']\n  >>> permutations('abcde')\n  ['a', 'b', 'c', 'd', 'e"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    const arr = string.split('')\n    const arrLength = arr.length\n    const result = []\n    let i = 0\n    let j = 0\n    let k = 0\n    while (i < arrLength) {\n        let count = 0\n        while (j < arrLength && arr[i] === arr[j]) {\n            count += 1\n            j += 1\n        }\n        result.push(count)\n        i += 1\n        j = 0\n    }\n    return result.length\n}\n\n/* Given a string, return the number of distinct words in the string\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  */\nconst countWords = (string) => {\n    let result = 0\n    let str = string\n    let array = str.split(' ')\n    let length = array.length\n    while (result < length) {\n        let count = 0\n        let i = result\n        while (i < length) {\n            if (array[i]!== array[i + 1]) {\n                break\n            }\n            i += 2\n            count += 1\n        }\n        result += count + 1\n    }\n    return result\n}\n\n/* Given a string, return the number of words in the string\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  >>> countWords('this is a string')\n  2\n  */\nconst countWordsInString = (string) => {\n    let result = 0\n    let array = string.split(' ')\n    let length = array.length\n    while (result < length) {\n        let count = 0\n        let i = result\n        while (i < length) {\n            if (array[i]!== array[i + 1]) {\n                break\n            }\n            i += 2\n            count += 1\n        }\n        result += count\n    }\n    return result\n}\n\n/* Given a string, return the number of times the string occurs in the string\n  >>> countOccurrences('this is a string', 'i')\n  2\n  >>> countOccurrences('this is a string', 'i')\n  2\n  >>> countOccurrences('this is a string', 'i')\n  2\n  >>> countOccurrences('this is a string', 'i')\n  2\n  */\nconst countOccurrences = (string, value) => {\n    let result = 0\n    let array = string.split(value)\n    let length = array.length\n    while (result < length) {\n        let count = 0\n        let i = result\n        while (i < length) {\n            if (array[i]!== array[i + 1]) {\n                break\n            }\n            i += 2\n            count += 1\n        }\n        result += count\n    }\n    return result\n}\n\n/* Given a string, return a list of the two words that occur in the string.\n  >>> countOccurrences('this is a string', 'i')\n  [1, 2]\n  >>> countOccurrences('this is a string', 'i')\n  [1, 2]\n  >>> countOccurrences('this is a string', 'i')\n  [1, 2]\n  >>> countOccurrences('this is a string', 'i')\n  [1, 2]\n  */\nconst findTwoOccurrences = (string, value) => {\n    let array = string.split(value)\n    let result = []\n    let length = array.length\n    while (result.length < 2) {\n        let count = 0\n        let i = 0\n        while (i < length) {\n            if (array[i]!== array[i + 1]) {\n                break\n            }\n            i += 2\n            count += 1\n        }\n        result.push(count)\n    }\n    return result\n}\n\n/* Given a string, return a list of the pairs of words that occur in the string.\n  >>> countOccurrences('this is a string', 'i')\n  [1, 2]\n  >>> countOccurrences('this is a string', 'i')\n  [1, 2]\n  >>> countOccurrences('this is a string', 'i')\n  [1, 2]\n  >>> countOccurrences('this is a string', 'i')\n  [1, 2]\n  */\nconst findTwoPairs = (string, value) => {\n    let array = string.split(value)\n    let result = []\n    let length = array.length\n    while (result.length < 2) {\n        let count = 0\n        let i = 0\n        while (i < length) {\n            if (array[i]!== array[i + 1]) {\n                break\n            }\n            i += 2\n            count += 1\n        }\n        result.push([count, i])\n    }\n    return result\n}\n\n/* Given a string, return the number of unique words in the string\n  >>> countUniqueWords('this is a string')\n  2\n  >>> countUniqueWords('this is a string')\n  2\n  >>> countUniqueWords('this is a string')\n  2\n  >>> countUniqueWords('this is a string')\n  2\n  >>> countUniqueWords('this is a string')\n  2\n  */\nconst countUniqueWords = (string) => {\n    let result = 0\n    let array = string.split(' ')\n    let length = array.length\n    while (result < length) {\n        let count = 0\n        let i = result\n        while (i < length) {\n            if (array[i]!== array[i + 1]) {\n                break\n            }\n            i += 2\n            count += 1\n        }\n        result += count\n    }\n    return result\n}\n\n/* Given a string, return the number of"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    const music_array = music_string.split('');\n    const beat_length = (music_array.length - 1) / 4;\n    return music_array.map((note) => {\n        let note_number = parseInt(note);\n        if (note_number === 7) {\n            return beat_length;\n        } else if (note_number === 8) {\n            return beat_length + 2;\n        } else if (note_number === 9) {\n            return beat_length + 1;\n        } else if (note_number === 10) {\n            return beat_length + 3;\n        }\n        return beat_length;\n    });\n};\n\n/*\n  This function takes in a list of strings representing musical notes in a special ASCII format.\n  Your task is to convert this list into the corresponding list of numbers, so that the first note lasts\n  the longest time, then the second note lasts the second longest, and so on.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> convert_to_beats([ 'o o|.| o| o|.|.|.|.| o o' ])\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst convert_to_beats = (music_list) => {\n    let current_time = 0;\n    let previous_time = 0;\n    return music_list.reduce((current_beat_list, beat_string) => {\n        const beat_array = beat_string.split(' ');\n        const beat_list = parseMusic(beat_array[0]);\n        const beat_length = beat_list[beat_list.length - 1];\n        for (let i = 0; i < beat_list.length; i++) {\n            const new_beat_time = previous_time + beat_length;\n            current_beat_list.push(new_beat_time);\n            previous_time = new_beat_time;\n        }\n        return current_beat_list;\n    }, []);\n};\n\n/*\n  Write a function to find the most frequent character in a string.\n  Your code should first split the string into a list of strings, and then count the frequency of each\n  character in the list. The frequency of a character should be counted only once, even if the character\n  appears multiple times in the string.\n\n  >>> count_characters(['a','a','b','b','a','a','a'])\n  {'a': 3, 'b': 2}\n  >>> count_characters(['a','b','c','b'])\n  {'a': 1, 'b': 2, 'c': 1}\n  */\nconst count_characters = (string) => {\n    const string_list = string.split('');\n    const result = {};\n    for (let i = 0; i < string_list.length; i++) {\n        const character = string_list[i];\n        if (result[character] === undefined) {\n            result[character] = 1;\n        } else {\n            result[character]++;\n        }\n    }\n    return result;\n};\n\n/*\n  Write a function to count the number of vowels in a string. A vowel is any of the vowels 'a', 'e', 'i',\n  'o' or 'u'. A consonant is any other character.\n\n  >>> count_vowels('hello world')\n  3\n  >>> count_vowels('aeiou')\n  5\n  >>> count_vowels('aa')\n  0\n  */\nconst count_vowels = (string) => {\n    const vowel_list = ['a', 'e', 'i', 'o', 'u'];\n    const string_list = string.split('');\n    const result = {};\n    for (let i = 0; i < string_list.length; i++) {\n        const character = string_list[i];\n        if (vowel_list.indexOf(character)!== -1) {\n            if (result[character] === undefined) {\n                result[character] = 1;\n            } else {\n                result[character]++;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Write a function to count the number of consonants in a string. A consonant is any other character\n  except for vowels.\n\n  >>> count_consonants('hello world')\n  2\n  >>> count_consonants('aeiou')\n  5\n  >>> count_consonants('aa')\n  0\n  */\nconst count_consonants = (string) => {\n    const consonant_list = ['a', 'e', 'i', 'o', 'u'];\n    const string_list = string.split('');\n    const result = {};\n    for (let i = 0; i < string_list.length; i++) {\n        const character = string_list[i];\n        if (consonant_list.indexOf(character)!== -1) {\n            if (result[character] === undefined) {\n                result[character] = 1;\n            } else {\n                result[character]++;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Write a function to count the number of consonants and vowels in a string.\n\n  >>> count_consonants_and_vowels('aeiou')\n  2\n  >>> count_consonants_and_vowels('hello world')\n  4\n  >>> count_consonants_and_vowels('aa')\n  0\n  */\nconst count_consonants_and_vowels = (string) => {\n    const vowel"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const length = string.length\n  const times = 0\n  for (let i = 0; i < length; i++) {\n    times += string.indexOf(substring, i)!== -1\n  }\n  return times\n}\n\n/* Find the index of the given substring in the original string.\n  >>> indexOf('', 'a')\n  -1\n  >>> indexOf('aaa', 'a')\n  0\n  >>> indexOf('aaaa', 'aa')\n  2\n  */\nconst indexOf = (string, substring) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Find the index of the first instance of the given substring in the original string.\n  >>> indexOfFirst('', 'a')\n  -1\n  >>> indexOfFirst('aaa', 'a')\n  0\n  >>> indexOfFirst('aaaa', 'aa')\n  2\n  */\nconst indexOfFirst = (string, substring) => {\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Find the index of the last instance of the given substring in the original string.\n  >>> indexOfLast('', 'a')\n  -1\n  >>> indexOfLast('aaa', 'a')\n  0\n  >>> indexOfLast('aaaa', 'aa')\n  2\n  */\nconst indexOfLast = (string, substring) => {\n  const length = string.length\n  for (let i = length - 1; i >= 0; i--) {\n    if (string.indexOf(substring, i)!== -1) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return a new string with the given substring replaced by the given replacement string.\n  >>> replace('a', 'b', 'aa')\n  'ab'\n  >>> replace('aaa', 'a', 'b')\n  'bbb'\n  */\nconst replace = (string, substring, replacement) => {\n  return string.replace(substring, replacement)\n}\n\n/* Return the substring of the original string that follows the given index.\n  >>> next('abcdefg', 2)\n  'cde'\n  */\nconst next = (string, index) => {\n  return string.substring(index + 1)\n}\n\n/* Return the substring of the original string that precedes the given index.\n  >>> prev('abcdefg', 2)\n  'ab'\n  */\nconst prev = (string, index) => {\n  return string.substring(0, index)\n}\n\n/* Return the substring of the original string that contains the given index.\n  >>> last('abcdefg', 2)\n  'c'\n  */\nconst last = (string, index) => {\n  return string.substring(index)\n}\n\n/* Return the substring of the original string that contains the given index.\n  >>> first('abcdefg', 2)\n  'ab'\n  */\nconst first = (string, index) => {\n  return string.substring(0, index)\n}\n\n/* Return the length of the given string.\n  >>> length('abc')\n  3\n  */\nconst length = (string) => {\n  return string.length\n}\n\n/* Return the number of times a given substring can be found in the original string.\n  >>> count('', 'a')\n  0\n  >>> count('aaa', 'a')\n  3\n  */\nconst count = (string, substring) => {\n  return string.split(substring).length - 1\n}\n\n/* Return the first index of the given substring in the original string.\n  >>> index('', 'a')\n  -1\n  >>> index('aaa', 'a')\n  0\n  */\nconst index = (string, substring) => {\n  return string.indexOf(substring)\n}\n\n/* Return the first index of the given substring in the original string.\n  >>> indexFirst('', 'a')\n  -1\n  >>> indexFirst('aaa', 'a')\n  0\n  */\nconst indexFirst = (string, substring) => {\n  return string.indexOf(substring)\n}\n\n/* Return the last index of the given substring in the original string.\n  >>> indexLast('', 'a')\n  -1\n  >>> indexLast('aaa', 'a')\n  2\n  */\nconst indexLast = (string, substring) => {\n  return string.lastIndexOf(substring)\n}\n\n/* Return a new string with the given substring replaced by the given replacement string.\n  >>> replaceFirst('a', 'b', 'aa')\n  'aa'\n  >>> replaceFirst('aaa', 'a', 'b')\n  'bbb'\n  */\nconst replaceFirst = (string, substring, replacement) => {\n  return string.replace(substring, replacement)\n}\n\n/* Return a new string with the given substring replaced by the given replacement string.\n  >>> replaceLast('a', 'b', 'aa')\n  'aa'\n  >>> replaceLast('aaa', 'a', 'b')\n  'bbb'\n  */\nconst replaceLast = (string, substring, replacement) => {\n  return string.replace(substring, replacement)\n}\n\nmodule.exports = {\n  replace,\n  replaceFirst,\n  replaceLast,\n  next,\n  prev,\n  first,\n  last,\n  length,\n  count,\n  index,\n  indexFirst,\n  indexLast,\n  index,\n  indexFirst\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (numbers) => {\n  return (numbers.toString()\n   .split('')\n   .sort((a, b) => {\n      const numA = parseInt(a, 10);\n      const numB = parseInt(b, 10);\n      return numA - numB;\n    })\n   .join('')\n  );\n};\n\nconst sortNumbers = (n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    // Find the smallest number\n    const smallest = Math.min.apply(null, numbers);\n\n    // Find the largest number\n    const largest = Math.max.apply(null, numbers);\n\n    // Find the number in the middle\n    const middle = Math.floor((numbers.length - 1) / 2);\n\n    // Find the closest two numbers\n    const closest1 = Math.abs(numbers[middle] - smallest);\n    const closest2 = Math.abs(numbers[middle + 1] - largest);\n\n    // Return the two closest numbers\n    return [closest1, closest2];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  [2.0, 2.2]\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [2.0, 2.0]\n  */\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]));\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const smallest = Math.min(...numbers)\n  const largest = Math.max(...numbers)\n  return numbers.map(num => (num - smallest) / (largest - smallest))\n}\n\n/* Given a list of strings, return a new list with the strings\n  concatenated with the first letter capitalized.\n  >>> capitalize([\"Hello\", \"World\"])\n  [\"Hello\", \"World\"]\n  */\nconst capitalize = (strings) => strings.map(str => (str.charAt(0).toUpperCase() + str.slice(1)))\n\n/* Given a list of strings, return a new list with the strings\n  concatenated with the first letter lower-cased.\n  >>> lowercase([\"Hello\", \"World\"])\n  [\"hello\", \"world\"]\n  */\nconst lowercase = (strings) => strings.map(str => (str.charAt(0).toLowerCase() + str.slice(1)))\n\n/* Given a list of strings, return a new list with the first letter\n  capitalized and the remaining letters lower-cased.\n  >>> firstUpperCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"Hello\", \"World\"]\n  */\nconst firstUpperCase = (strings) => strings.map(str => (str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  capitalized and the remaining letters lower-cased.\n  >>> firstLowerCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"hello\", \"world\"]\n  */\nconst firstLowerCase = (strings) => strings.map(str => (str.charAt(0).toLowerCase() + str.slice(1).toLowerCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  capitalized and the remaining letters upper-cased.\n  >>> firstUpperCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"Hello\", \"World\"]\n  */\nconst firstUpperCase = (strings) => strings.map(str => (str.charAt(0).toUpperCase() + str.slice(1).toUpperCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  lower-cased and the remaining letters upper-cased.\n  >>> firstLowerCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"hello\", \"world\"]\n  */\nconst firstLowerCase = (strings) => strings.map(str => (str.charAt(0).toLowerCase() + str.slice(1).toUpperCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  capitalized and the remaining letters upper-cased.\n  >>> firstUpperCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"Hello\", \"World\"]\n  */\nconst firstUpperCase = (strings) => strings.map(str => (str.charAt(0).toUpperCase() + str.slice(1).toUpperCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  lower-cased and the remaining letters lower-cased.\n  >>> firstLowerCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"hello\", \"world\"]\n  */\nconst firstLowerCase = (strings) => strings.map(str => (str.charAt(0).toLowerCase() + str.slice(1).toLowerCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  capitalized and the remaining letters upper-cased.\n  >>> firstUpperCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"Hello\", \"World\"]\n  */\nconst firstUpperCase = (strings) => strings.map(str => (str.charAt(0).toUpperCase() + str.slice(1).toUpperCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  lower-cased and the remaining letters upper-cased.\n  >>> firstLowerCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"hello\", \"world\"]\n  */\nconst firstLowerCase = (strings) => strings.map(str => (str.charAt(0).toLowerCase() + str.slice(1).toUpperCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  capitalized and the remaining letters lower-cased.\n  >>> firstUpperCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"Hello\", \"World\"]\n  */\nconst firstUpperCase = (strings) => strings.map(str => (str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  lower-cased and the remaining letters lower-cased.\n  >>> firstLowerCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"hello\", \"world\"]\n  */\nconst firstLowerCase = (strings) => strings.map(str => (str.charAt(0).toLowerCase() + str.slice(1).toLowerCase()))\n\n/* Given a list of strings, return a new list with the first letter\n  capitalized and the remaining letters upper-cased.\n  >>> firstUpperCase([\n ...  \"Hello\",\n ...  \"World\"\n ... ])\n  [\"Hello\", \"World\"]\n  */\nconst firstUpperCase = (strings) => strings.map(str => (str.charAt(0).toUpperCase() + str.slice(1).toUpperCase()))\n\n/* Given a list of strings, return"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'number';\n  });\n};\n\nexport default filetrItnegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const length = string.length\n  const currentIndex = 0\n  const i = 0\n  while (i < length) {\n    if (string.charCodeAt(i) === 0) {\n      return currentIndex\n    }\n    i++\n    currentIndex++\n  }\n  return currentIndex\n}\n\n/* Convert string to hex\n  >>> strToHex('abc')\n  '616263'\n  */\nconst strToHex = (string) => {\n  const length = string.length\n  const currentIndex = 0\n  const hex = ''\n  let i = 0\n  while (i < length) {\n    hex += string.charCodeAt(i).toString(16)\n    i++\n    if (i % 2 === 1) {\n      hex +=''\n    }\n  }\n  return hex\n}\n\n/* Return the base64 representation of the given string\n  >>> base64(strToHex('abc'))\n  'YWJj'\n  >>> base64(strToHex('hello world'))\n  'SGVsbG8gV29ybGQh'\n  */\nconst base64 = (string) => {\n  const length = string.length\n  const currentIndex = 0\n  const encoded = ''\n  let i = 0\n  while (i < length) {\n    const b1 = string.charCodeAt(i)\n    const b2 = string.charCodeAt(i + 1)\n    const b3 = string.charCodeAt(i + 2)\n    const b4 = string.charCodeAt(i + 3)\n    const c1 = b1 >> 2\n    const c2 = ((b1 & 3) << 4) | (b2 >> 4)\n    const c3 = ((b2 & 15) << 2) | (b3 >> 6)\n    const c4 = b3 & 63\n    encoded += BASE64[c1] + BASE64[c2] + BASE64[c3] + BASE64[c4]\n    i += 4\n  }\n  return encoded\n}\n\n/* Return the base64 representation of the given string\n  >>> base64('abc')\n  'YWJj'\n  >>> base64('hello world')\n  'SGVsbG8gV29ybGQh'\n  */\nconst base64URL = (string) => {\n  const length = string.length\n  const currentIndex = 0\n  const encoded = ''\n  let i = 0\n  while (i < length) {\n    const b1 = string.charCodeAt(i)\n    const b2 = string.charCodeAt(i + 1)\n    const b3 = string.charCodeAt(i + 2)\n    const b4 = string.charCodeAt(i + 3)\n    const c1 = b1 >> 2\n    const c2 = ((b1 & 3) << 4) | (b2 >> 4)\n    const c3 = ((b2 & 15) << 2) | (b3 >> 6)\n    const c4 = b3 & 63\n    encoded += BASE64URL[c1] + BASE64URL[c2] + BASE64URL[c3] + BASE64URL[c4]\n    i += 4\n  }\n  return encoded\n}\n\nexport default {\n  strlen,\n  strToHex,\n  base64,\n  base64URL\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n === 1) return 1\n  const l = largestDivisor(n / 2)\n  if (n % l === 0) return l\n  else return largestDivisor(n)\n}\n\nexport default largestDivisor\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 1;\n  let j = 1;\n  let factorsArr = [];\n  let primeFactors = [];\n\n  for (; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      j++;\n    }\n  }\n\n  for (i = 0; i < factors.length; i++) {\n    for (j = 0; j < factorsArr.length; j++) {\n      if (factors[i] === factorsArr[j]) {\n        factorsArr[j] = factorsArr[j] * (factorsArr.length - j);\n        break;\n      }\n    }\n  }\n\n  for (i = 0; i < factorsArr.length; i++) {\n    if (primeFactors.indexOf(factorsArr[i]) === -1) {\n      primeFactors.push(factorsArr[i]);\n    }\n  }\n\n  return primeFactors;\n};\n\nmodule.exports = factorize;<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const { length } = numbers;\n\n  for (let i = 0; i < length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      result.push(numbers[i]);\n    }\n  }\n\n  return result;\n};\n\nexport { removeDuplicates };\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, c => c.toUpperCase())\n}\n\n/*\n  Convert a string to uppercase.\n  >>> toUpper('Hello')\n  'HELLO'\n  >>> toUpper('world')\n  'WORLD'\n  */\nconst toUpper = (string) => {\n  return string.toUpperCase()\n}\n\n/*\n  Convert a string to lowercase.\n  >>> toLower('Hello')\n  'hello'\n  >>> toLower('WORLD')\n  'world'\n  */\nconst toLower = (string) => {\n  return string.toLowerCase()\n}\n\n/*\n  Add two numbers together.\n  >>> add(1, 2)\n  3\n  >>> add(3, 4)\n  7\n  >>> add(1, 4)\n  5\n  >>> add(1, 0)\n  1\n  >>> add(1, -1)\n  0\n  >>> add(1, -4)\n  -3\n  >>> add(4, -1)\n  3\n  */\nconst add = (num1, num2) => {\n  return num1 + num2\n}\n\n/*\n  Subtract two numbers.\n  >>> subtract(3, 4)\n  1\n  >>> subtract(1, 0)\n  1\n  >>> subtract(1, -1)\n  0\n  >>> subtract(1, -4)\n  -3\n  >>> subtract(4, -1)\n  3\n  */\nconst subtract = (num1, num2) => {\n  return num1 - num2\n}\n\n/*\n  Multiply two numbers.\n  >>> multiply(3, 4)\n  12\n  >>> multiply(3, 4)\n  12\n  >>> multiply(1, 4)\n  4\n  >>> multiply(1, 0)\n  0\n  >>> multiply(1, -1)\n  -1\n  >>> multiply(1, -4)\n  -12\n  >>> multiply(4, -1)\n  -4\n  */\nconst multiply = (num1, num2) => {\n  return num1 * num2\n}\n\n/*\n  Divide two numbers.\n  >>> divide(4, 3)\n  2\n  >>> divide(1, 0)\n  1\n  >>> divide(1, -1)\n  -1\n  >>> divide(1, -4)\n  -2\n  >>> divide(4, -1)\n  -4\n  */\nconst divide = (num1, num2) => {\n  return num1 / num2\n}\n\n/*\n  Find the greatest common divisor of two numbers.\n  >>> gcd(4, 3)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, -1)\n  1\n  >>> gcd(1, -4)\n  1\n  >>> gcd(4, -1)\n  1\n  */\nconst gcd = (num1, num2) => {\n  return Math.abs(num1) * Math.abs(num2)\n   .reduce((acc, curr) => {\n      if (curr === 0) return acc\n      return curr > 0? acc + curr : acc - curr\n    }, Math.abs(num1))\n}\n\n/*\n  Find the greatest common divisor of two strings.\n  >>> gcd('a', 'b')\n  1\n  >>> gcd('a', 'b')\n  1\n  >>> gcd('a', 'a')\n  1\n  >>> gcd('a', 'b')\n  1\n  >>> gcd('a', 'aa')\n  1\n  >>> gcd('a', 'bb')\n  1\n  >>> gcd('aa', 'bb')\n  1\n  >>> gcd('ab', 'bb')\n  1\n  >>> gcd('ab', 'bc')\n  1\n  >>> gcd('ab', 'c')\n  1\n  >>> gcd('abc', 'ab')\n  1\n  >>> gcd('abc', 'ac')\n  1\n  >>> gcd('abc', 'ab')\n  1\n  >>> gcd('abc', 'ac')\n  1\n  >>> gcd('abc', 'acd')\n  1\n  >>> gcd('abcd', 'abc')\n  1\n  >>> gcd('abcd', 'acd')\n  1\n  >>> gcd('abcd', 'abd')\n  1\n  >>> gcd('abcd', 'abc')\n  1\n  >>> gcd('abcd', 'ab')\n  1\n  >>> gcd('abcd', 'abcd')\n  1\n  */\nconst gcd = (string1, string2) => {\n  if (string1 === string2) return string1\n  if (string1.length === 0) return string2\n  if (string2.length === 0) return string1\n\n  const digits = string1.split('').concat(string2.split(''))\n  const result = digits.reduce((acc, curr) => {\n    if (curr === 0) return acc\n    return curr > 0? acc + curr : acc - curr\n  }, Math.abs(string1.charCodeAt(0) - string2.charCodeAt(0)))\n  return result\n}\n\n/*\n  Find the least common multiple of two numbers.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 4)\n  12\n  >>> lcm(1, 0)\n  0\n  >>> lcm(1, -1)\n  0\n  >>> lcm(1, -4)\n  0\n  >>> lcm(4, -1)\n  0\n  */\nconst lcm = (num1, num2) => {\n  return num1 * num2 / gcd(num1, num2)\n}\n\n/*\n  Find the difference of two numbers.\n  >>> subtract(4, 3)\n  1\n  >>> subtract(1, 0)\n  1\n  >>> subtract(1, -1)\n  0\n  >>> subtract(1, -4)\n  0\n  >>> subtract(4, -1)\n  -3\n  */\nconst subtract = (num1, num2)"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  const len = strings.length\n  if (len === 0) {\n    return ''\n  }\n  const concat = strings[0]\n  for (let i = 1; i < len; i++) {\n    concat += strings[i]\n  }\n  return concat\n}\n\n/* Concatenate all the strings in the array of strings, using the `concatenate` function\n  >>> concat(['a', 'b', 'c'])\n  'abc'\n  */\nconst concat = (strings) => {\n  return conactenate(strings)\n}\n\nmodule.exports = {\n  conactenate,\n  concat\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.startsWith(prefix);\n  });\n};\n\n/*\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.startsWith(prefix);\n  });\n};\n\n/*\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.startsWith(prefix);\n  });\n};\n\n/*\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.startsWith(prefix);\n  });\n};\n\n/*\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.startsWith(prefix);\n  });\n};\n\n/*\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.startsWith(prefix);\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/**\n  * Finds the largest number in a list of numbers.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMax = (numbers) => {\n  return Math.max.apply(Math, numbers)\n}\n\n/**\n  * Finds the smallest number in a list of numbers.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMin = (numbers) => {\n  return Math.min.apply(Math, numbers)\n}\n\n/**\n  * Finds the average of the numbers in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findAverage = (numbers) => {\n  return getPositive(numbers).reduce((total, number) => total + number, 0) / numbers.length\n}\n\n/**\n  * Finds the average of the numbers in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMedian = (numbers) => {\n  return getPositive(numbers).length / 2\n}\n\n/**\n  * Finds the number with the highest difference between its two largest\n  * adjacent numbers.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMaxDifference = (numbers) => {\n  const max = findMax(numbers)\n  const min = findMin(numbers)\n\n  return max - min\n}\n\n/**\n  * Finds the difference between the largest number in a list and its\n  * smallest number.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findDifference = (numbers) => {\n  const max = findMax(numbers)\n  const min = findMin(numbers)\n\n  return max - min\n}\n\n/**\n  * Finds the mean of the numbers in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMean = (numbers) => {\n  const sum = getPositive(numbers).reduce((total, number) => total + number, 0)\n  return sum / numbers.length\n}\n\n/**\n  * Finds the number with the lowest difference between its two smallest\n  * adjacent numbers.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMinDifference = (numbers) => {\n  const max = findMax(numbers)\n  const min = findMin(numbers)\n\n  return min - max\n}\n\n/**\n  * Finds the sum of the numbers in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findSum = (numbers) => {\n  return getPositive(numbers).reduce((total, number) => total + number, 0)\n}\n\n/**\n  * Finds the sum of the numbers in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findProduct = (numbers) => {\n  return getPositive(numbers).reduce((total, number) => total * number, 1)\n}\n\n/**\n  * Finds the square root of the number.\n  *\n  * @param {number} number\n  * @returns {number}\n  */\nconst findSquareRoot = (number) => {\n  return Math.sqrt(number)\n}\n\n/**\n  * Finds the sum of the numbers in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findSumOfSquares = (numbers) => {\n  return getPositive(numbers).reduce((total, number) => total + number * number, 0)\n}\n\n/**\n  * Finds the number with the lowest square difference between its two\n  * smallest adjacent numbers.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMinSquareDifference = (numbers) => {\n  const max = findMax(numbers)\n  const min = findMin(numbers)\n\n  return min * min - max\n}\n\n/**\n  * Finds the difference between the largest number in a list and its\n  * smallest number.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findSquareDifference = (numbers) => {\n  const max = findMax(numbers)\n  const min = findMin(numbers)\n\n  return min * min - max\n}\n\n/**\n  * Finds the number with the highest square difference between its two\n  * largest adjacent numbers.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMaxSquareDifference = (numbers) => {\n  const max = findMax(numbers)\n  const min = findMin(numbers)\n\n  return max * max - min\n}\n\n/**\n  * Finds the sum of the numbers in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findSumOfProducts = (numbers) => {\n  return getPositive(numbers).reduce((total, number) => total * number, 1)\n}\n\n/**\n  * Finds the number with the highest product in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  */\nconst findMaxProduct = (numbers) => {\n  return findMax(getPositive(numbers))\n}\n\n/**\n  * Finds the number with the lowest product in a list.\n  *\n  * @param {array} numbers\n  * @returns {number}\n  "}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if(n === 1 || n === 2) return false;\n  let prime = true;\n  for(let i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 === 0) {\n    // even number of coefficents\n    const n = xs.length;\n    const max = xs.reduce((prev, item, index) => {\n      return item > prev? item : prev;\n    }, -Infinity);\n    const min = xs.reduce((prev, item, index) => {\n      return item < prev? item : prev;\n    }, +Infinity);\n    const y = (max + min) / 2;\n    return xs.indexOf(y) === -1?\n      findZero(xs.slice(0, n - 1)) :\n      y;\n  } else {\n    // odd number of coefficents\n    const n = xs.length;\n    const x = xs[Math.floor(n / 2)];\n    return xs.indexOf(x) === -1?\n      findZero(xs.slice(0, n - 1)) :\n      x;\n  }\n}\n\n/*\n  Given two polynomials, a and b, find the common zero.\n  In case of multiple roots, one of them is chosen arbitrarily.\n  >>> round(findCommonZero([1, 1]), 1) # f(x) = 1 + x\n  0.0\n  >>> round(findCommonZero([1, 2]), 1) # f(x) = 1 + 2x\n  0.5\n  >>> round(findCommonZero([1, 1, 1]), 1) # f(x) = 1 + x + x^2\n  1.0\n  >>> round(findCommonZero([1, -1]), 1) # f(x) = 1 - x\n  -0.5\n  >>> round(findCommonZero([1, -1, 1]), 1) # f(x) = 1 - 1x + x^2\n  1.0\n  >>> round(findCommonZero([1, -1, -1]), 1) # f(x) = 1 - 1x - x^2\n  -0.5\n  >>> round(findCommonZero([1, -1, 1, -1]), 1) # f(x) = 1 - 1x + x^2 - x^3\n  1.0\n  >>> round(findCommonZero([1, 1, 1, -1]), 1) # f(x) = 1 + x + x^2 - x^3\n  1.0\n  >>> round(findCommonZero([1, 1, -1, 1]), 1) # f(x) = 1 + x - 1x^2 + x^3\n  1.0\n  >>> round(findCommonZero([1, -1, -1, 1]), 1) # f(x) = 1 - 1x - 1x^2 + x^3\n  1.0\n  >>> round(findCommonZero([1, -1, -1, -1]), 1) # f(x) = 1 - 1x - 1x^2 - x^3\n  -0.5\n  >>> round(findCommonZero([1, -1, -1, 1, 1]), 1) # f(x) = 1 - 1x - 1x^2 + x^3 + x^4\n  1.0\n  >>> round(findCommonZero([1, -1, -1, -1, 1]), 1) # f(x) = 1 - 1x - 1x^2 - 1x^3 + x^4\n  1.0\n  >>> round(findCommonZero([1, 1, -1, 1, 1]), 1) # f(x) = 1 + 1x - 1x^2 + x^3 + x^4\n  1.0\n  >>> round(findCommonZero([1, 1, 1, -1, 1]), 1) # f(x) = 1 + 1x + x^2 - 1x^3 + x^4\n  1.0\n  >>> round(findCommonZero([1, 1, 1, 1, 1]), 1) # f(x) = 1 + 1x + 1x^2 + 1x^3 + 1x^4\n  1.0\n  >>> round(findCommonZero([1, 1, 1, 1, 1, 1]), 1) # f(x) = 1 + 1x + 1x^2 + 1x^3 + 1x^4 + 1x^5\n  1.0\n  >>> round(findCommonZero([1, 1, 1, 1, 1, 1, 1]), 1) # f(x) = 1 + 1x + 1x^2 + 1x^3 + 1x^4 + 1x^5 + 1x^6\n  1.0\n  >>> round(findCommonZero([1, 1, 1, 1, 1, 1, 1, 1]), 1) # f(x) = 1 + 1x + 1x^2 + 1x^3 + 1x^4 + 1x^5 + 1x^6 + 1x^7\n  1.0\n  >>> round(findCommonZero([1, 1, 1, 1, 1, 1, 1, 1, 1]), 1) # f(x) = 1 + 1x + 1x^2 + 1x^3 + 1x^4 + 1x^5 + 1x^6 + 1x^7 + 1x^8\n  1.0\n  >>> round(findCommonZero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.reduce((res, curr) => {\n    if (curr % 3 === 0) {\n      res.push(curr);\n    }\n    return res;\n  }, []);\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = []\n  const v = {}\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i)\n      v[i] = true\n    }\n  }\n  return u.sort().filter(v)\n}\n\nmodule.exports = unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((previous, current) => {\n    if (previous >= current) {\n      return previous;\n    } else {\n      return current;\n    }\n  });\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let div = n;\n  let mod = n;\n  let counter = 0;\n  while (div >= 1) {\n    if (div % 3 === 0) {\n      counter++;\n      if (div % 5 === 0) {\n        counter++;\n        if (div % 7 === 0) {\n          counter++;\n        }\n      }\n    }\n    div--;\n  }\n  return counter;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  let lNew = [];\n  for (let i = 0; i < l.length; i += 2) {\n    lNew.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    lNew.push(l[i]);\n  }\n  return lNew;\n};\n\n// test\nsotrEven([1, 2, 3]);\nsotrEven([5, 6, 3, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nexport {\n  encodeCyclic,\n  decodeCyclic,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    const isPrime = (n) => {\n        if (n % 2 === 0) {\n            return false\n        }\n\n        const max = Math.floor(Math.sqrt(n))\n\n        for (let i = 3; i <= max; i += 2) {\n            if (n % i === 0) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n    let fib = 1\n    let prime = 1\n\n    while (!isPrime(fib)) {\n        fib += prime\n        prime = fib\n\n        if (isPrime(fib)) {\n            return fib\n        }\n    }\n\n    return fib\n}\n\nmodule.exports = primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set();\n  const arr = l.slice(0);\n\n  for (let i = 0; i < arr.length; i++) {\n    const val = arr[i];\n    const triple = val * (val - 1) * (val - 2);\n    if (triple === 0) {\n      set.add(val);\n    } else {\n      const val2 = val - 1;\n      const val3 = val - 2;\n      const val4 = val + 1;\n      const val5 = val + 2;\n      const triple2 = val2 * (val2 - 1) * (val2 - 2);\n      const triple3 = val3 * (val3 - 1) * (val3 - 2);\n      const triple4 = val4 * (val4 - 1) * (val4 - 2);\n      const triple5 = val5 * (val5 - 1) * (val5 - 2);\n\n      if ((triple2 + triple3 + triple4 + triple5) === 0) {\n        set.add(val);\n      }\n    }\n  }\n\n  return set.size === 3;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  const x1 = 0;\n  const x2 = n;\n  const y1 = 0;\n  const y2 = n;\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (Math.abs(x1 - i) <= Math.abs(x2 - j) && Math.abs(y1 - j) <= Math.abs(y2 - i)) {\n        collision += 1;\n      }\n    }\n  }\n  return collision;\n};\n\nconsole.log(acrRacelColision(10));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    let i = 1;\n    return l.concat(l.slice(1).map((x) => x + i));\n};\n\n// Exports\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0\n  l.forEach((e, i) => {\n    sum += e\n  })\n  return sum === 0\n}\n\n/*\n  apirSumoTZero returns true iff the sum of the input list equals zero.\n  >>> apirSumoTZero([1, 2, 3])\n  false\n  >>> apirSumoTZero([-2, 1])\n  true\n  >>> apirSumoTZero([1, 2, 3, 7])\n  true\n  >>> apirSumoTZero([2, 4, -5, 3, 5, 7])\n  false\n  >>> apirSumoTZero([1])\n  true\n  */\nconst apirSumoTZero = (l) => {\n  let sum = 0\n  l.forEach((e) => {\n    sum += e\n  })\n  return sum === 0\n}\n\n/*\n  apirSumoTZero returns true iff the sum of the input list equals zero.\n  >>> apirSumoTZero([1, 2, 3])\n  false\n  >>> apirSumoTZero([-2, 1])\n  true\n  >>> apirSumoTZero([1, 2, 3, 7])\n  true\n  >>> apirSumoTZero([2, 4, -5, 3, 5, 7])\n  false\n  >>> apirSumoTZero([1])\n  true\n  */\nconst apirSumoTZero = (l) => {\n  let sum = 0\n  l.forEach((e) => {\n    sum += e\n  })\n  return sum === 0\n}\n\nexport {\n  apirSsumoTZero,\n  apirSumoTZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  //TODO: implement\n};\n\n//task 5\n/*\n  Convert string representation of a number to a number.\n  Numbers can be represented in decimal, binary, or hexadecimal.\n  Input number is represented in a given base.\n  The base must be between 2 and 36 inclusive.\n  >>> convertToDecimal('10')\n  10\n  >>> convertToDecimal('10', 2)\n  4\n  >>> convertToDecimal('10', 16)\n  26\n  >>> convertToDecimal('10', 8)\n  144\n  >>> convertToDecimal('10', 5)\n  10\n  >>> convertToDecimal('10', 3)\n  9\n  >>> convertToDecimal('10', 36)\n  3\n  */\nconst convertToDecimal = (x, base) => {\n  //TODO: implement\n};\n\n//task 6\n/*\n  Given a string representing a file name, return true if the file name\n  contains a directory.\n  >>> containsDirectory('/usr/bin/')\n  True\n  >>> containsDirectory('usr/bin/')\n  False\n  >>> containsDirectory('bin/')\n  False\n  >>> containsDirectory('usr')\n  False\n  >>> containsDirectory('/')\n  False\n  >>> containsDirectory('/usr/')\n  True\n  >>> containsDirectory('usr/bin/')\n  True\n  >>> containsDirectory('usr/bin/gcc')\n  False\n  >>> containsDirectory('/')\n  True\n  >>> containsDirectory('/usr')\n  True\n  */\nconst containsDirectory = (x) => {\n  //TODO: implement\n};\n\n//task 7\n/*\n  Given a string representing a file name, return true if the file name\n  ends in a certain extension.\n  >>> endsWith('.txt')\n  True\n  >>> endsWith('.TXT')\n  True\n  >>> endsWith('txt')\n  False\n  >>> endsWith('txt.txt')\n  True\n  >>> endsWith('txt.txt.txt')\n  False\n  >>> endsWith('txt.txt')\n  True\n  >>> endsWith('txt.txt')\n  True\n  >>> endsWith('txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  False\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  True\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  True\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt')\n  True\n  >>> endsWith('txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt."}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    return a * Math.sqrt(1 - (h * h) / (a * a));\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(2, 3)\n  1.5\n  */\nconst triangleArea2 = (a, h) => {\n    return (a * h) / 2;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(4, 3)\n  8\n  */\nconst triangleArea3 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 4)\n  11\n  */\nconst triangleArea4 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(6, 5)\n  18\n  */\nconst triangleArea5 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(7, 6)\n  25\n  */\nconst triangleArea6 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(8, 7)\n  34\n  */\nconst triangleArea7 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 8)\n  45\n  */\nconst triangleArea8 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(10, 9)\n  55\n  */\nconst triangleArea9 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(11, 10)\n  66\n  */\nconst triangleArea10 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 11)\n  77\n  */\nconst triangleArea11 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(13, 12)\n  90\n  */\nconst triangleArea12 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(14, 13)\n  102\n  */\nconst triangleArea13 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(15, 14)\n  119\n  */\nconst triangleArea14 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(16, 15)\n  135\n  */\nconst triangleArea15 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(17, 16)\n  153\n  */\nconst triangleArea16 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(18, 17)\n  180\n  */\nconst triangleArea17 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(19, 18)\n  205\n  */\nconst triangleArea18 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(20, 19)\n  229\n  */\nconst triangleArea19 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(21, 20)\n  262\n  */\nconst triangleArea20 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(22, 21)\n  290\n  */\nconst triangleArea21 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(23, 22)\n  314\n  */\nconst triangleArea22 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(24, 23)\n  350\n  */\nconst triangleArea23 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(25, 24)\n  379\n  */\nconst triangleArea24 = (a, h) => {\n    return a * (h * h) / 12;\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n  >>> triangleArea(26, 25)\n  404\n  */\nconst triangleArea25 = ("}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    let [a, b] = [0, 1];\n    while (n--) {\n        [a, b] = [b, a + b];\n    }\n    return a;\n}\n\n/*\n  Given a set of unique integers, return the largest subset that sums to a given number.\n  >>> given_sum(3, [1, 2, 3, 4, 5])\n  [1, 2, 3]\n  >>> given_sum(4, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4]\n  >>> given_sum(5, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> given_sum(0, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(6, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(7, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(8, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(9, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(10, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(11, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(12, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(13, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(14, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(15, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(16, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(17, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(18, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(19, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(20, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(21, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(22, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(23, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(24, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(25, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(26, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(27, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(28, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(29, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(30, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(31, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(32, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(33, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(34, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(35, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(36, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(37, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(38, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(39, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(40, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(41, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(42, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(43, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(44, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(45, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(46, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(47, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(48, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(49, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(50, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(51, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(52, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(53, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(54, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(55, [1, 2, 3, 4, 5])\n  []\n  >>> given_sum(56, [1, 2, 3, 4, 5])\n  "}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const l = l.slice();\n  l.sort();\n  const mid = l.length / 2;\n  const left = l.length % 2;\n  if (left === 0) {\n    return (l[mid] + l[mid - 1]) / 2;\n  } else {\n    return l[mid];\n  }\n};\n\n/* Return the nth-element of a list.\n  >>> nth([1, 2, 3, 4], 2)\n  3\n  >>> nth([1, 2, 3, 4], 4)\n  Traceback (most recent call last):\n   ...\n  IndexError: list index out of range\n  >>> nth([1, 2, 3, 4], 5)\n  Traceback (most recent call last):\n   ...\n  IndexError: list index out of range\n  */\nconst nth = (l, n) => {\n  if (n < 0) {\n    throw new IndexError('list index out of range');\n  }\n  if (n === 0) {\n    return l[0];\n  }\n  const mid = l.length / 2;\n  let count = 0;\n  while (count < mid) {\n    if (l[count] === n - 1) {\n      return l[count];\n    }\n    count++;\n  }\n  return l[mid];\n};\n\n/* Return a list containing the nth-element of every pair (k, v)\n  >>> kv(1, 2)\n  [1, 2]\n  >>> kv(1, 3)\n  [1, 2, 3]\n  >>> kv(1, 4)\n  [1, 2, 3, 4]\n  */\nconst kv = (k, v) => {\n  const result = [];\n  for (let i = 0; i < v; i++) {\n    result.push([k, i]);\n  }\n  return result;\n};\n\n/* Return a list of all the permutations of a list.\n  >>> permutations([1, 2, 3])\n  [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n  >>> permutations([1, 2, 3, 4])\n  [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 2, 1, 4], [3, 1, 4, 2], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]\n  >>> permutations([1, 2, 3, 4, 5])\n  Traceback (most recent call last):\n   ...\n  IndexError: list index out of range\n  */\nconst permutations = (l) => {\n  const result = [];\n  const perm = [];\n  for (let i = 0; i < l.length; i++) {\n    perm.push(l[i]);\n  }\n  const n = perm.length;\n  const nfact = Math.pow(n, n);\n  for (let i = 1; i <= nfact; i++) {\n    const index = i;\n    const permResult = kv(perm, index);\n    result.push(permResult);\n  }\n  return result;\n};\n\n/* Return a list of all the permutations of a list of lists.\n  >>> permutations([[1, 2, 3], [4, 5, 6]])\n  [[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 6, 5]], [[1, 3, 2], [4, 5, 6]], [[1, 3, 2], [4, 6, 5]], [[1, 3, 5], [2, 4, 6]], [[1, 3, 5], [2, 4, 6]], [[1, 5, 2], [3, 4, 6]], [[1, 5, 2], [3, 4, 6]], [[1, 5, 2], [3, 6, 4]], [[1, 5, 2], [3, 6, 4]], [[1, 5, 4], [2, 3, 6]], [[1, 5, 4], [2, 3, 6]], [[1, 5, 4], [2, 6, 3]], [[1, 5, 4], [2, 6, 3]], [[1, 6, 3], [2, 4, 5]], [[1, 6, 3], [2, 4, 5]], [[1, 6, 3], [2, 5, 4]], [[1, 6, 3], [2, 5, 4]], [[1, 6, 5], [2, 3, 4]], [[1, 6, 5], [2, 3, 4]], [[1, 6, 5], [2, 4, 3]], [[1, 6, 5], [2, 4, 3]], [[1, 6, 5], [2, 4, 6]], [[1, 6, 5], [2, 4, 6]]]\n  >>> permutations([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  [[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 6, 5]], [[1, 3, 2], [4, 5, 6]], [[1, 3, 2], [4, 6, 5]], [[1, 3, 5], [2, 4, 6]], [[1, 3, 5], [2, 4, 6]], [[1, 5, 2], [3, 4, 6]], [[1, 5"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a single line (no line breaks)\nconst isSingleLine = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a single word\nconst isSingleWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a double word\nconst isDoubleWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a triple word\nconst isTripleWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a quadruple word\nconst isQuadrupleWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 5-letter word\nconst isFiveLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 6-letter word\nconst isSixLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 7-letter word\nconst isSevenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 8-letter word\nconst isEightLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 9-letter word\nconst isNineLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 10-letter word\nconst isTenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 11-letter word\nconst isElevenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 12-letter word\nconst isTwelveLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 13-letter word\nconst isThirteenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 14-letter word\nconst isFourteenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 15-letter word\nconst isFifteenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 16-letter word\nconst isSixteenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 17-letter word\nconst isSeventeenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 18-letter word\nconst isEighteenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 19-letter word\nconst isNineteenLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n\n// Checks if given string is a 20-letter word\nconst isTwentyLetterWord = (text) => {\n  if (!text) return false;\n  return text.split('').map(x => x === x.toUpperCase()).every(x => x);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n * n) % p;\n}\n\n/*Return the number of divisors of n.\n  >>> div(1)\n  1\n  >>> div(2)\n  2\n  >>> div(3)\n  3\n  >>> div(4)\n  2\n  >>> div(5)\n  5\n  >>> div(6)\n  3\n  >>> div(7)\n  7\n  >>> div(8)\n  2\n  >>> div(9)\n  3\n  >>> div(10)\n  5\n  >>> div(11)\n  11\n  >>> div(12)\n  2\n  >>> div(13)\n  2\n  >>> div(14)\n  2\n  >>> div(15)\n  3\n  >>> div(16)\n  4\n  >>> div(17)\n  17\n  >>> div(18)\n  2\n  >>> div(19)\n  3\n  >>> div(20)\n  5\n  >>> div(21)\n  7\n  >>> div(22)\n  2\n  >>> div(23)\n  2\n  >>> div(24)\n  2\n  >>> div(25)\n  3\n  >>> div(26)\n  5\n  >>> div(27)\n  3\n  >>> div(28)\n  7\n  >>> div(29)\n  11\n  >>> div(30)\n  2\n  >>> div(31)\n  2\n  >>> div(32)\n  2\n  >>> div(33)\n  3\n  >>> div(34)\n  5\n  >>> div(35)\n  7\n  >>> div(36)\n  2\n  >>> div(37)\n  2\n  >>> div(38)\n  2\n  >>> div(39)\n  3\n  >>> div(40)\n  5\n  >>> div(41)\n  3\n  >>> div(42)\n  7\n  >>> div(43)\n  11\n  >>> div(44)\n  2\n  >>> div(45)\n  2\n  >>> div(46)\n  2\n  >>> div(47)\n  3\n  >>> div(48)\n  5\n  >>> div(49)\n  3\n  >>> div(50)\n  7\n  >>> div(51)\n  11\n  >>> div(52)\n  2\n  >>> div(53)\n  2\n  >>> div(54)\n  2\n  >>> div(55)\n  3\n  >>> div(56)\n  5\n  >>> div(57)\n  3\n  >>> div(58)\n  7\n  >>> div(59)\n  11\n  >>> div(60)\n  2\n  >>> div(61)\n  2\n  >>> div(62)\n  2\n  >>> div(63)\n  3\n  >>> div(64)\n  5\n  >>> div(65)\n  3\n  >>> div(66)\n  7\n  >>> div(67)\n  11\n  >>> div(68)\n  2\n  >>> div(69)\n  2\n  >>> div(70)\n  2\n  >>> div(71)\n  3\n  >>> div(72)\n  5\n  >>> div(73)\n  3\n  >>> div(74)\n  7\n  >>> div(75)\n  11\n  >>> div(76)\n  2\n  >>> div(77)\n  2\n  >>> div(78)\n  2\n  >>> div(79)\n  3\n  >>> div(80)\n  5\n  >>> div(81)\n  3\n  >>> div(82)\n  7\n  >>> div(83)\n  11\n  >>> div(84)\n  2\n  >>> div(85)\n  2\n  >>> div(86)\n  2\n  >>> div(87)\n  3\n  >>> div(88)\n  5\n  >>> div(89)\n  3\n  >>> div(90)\n  7\n  >>> div(91)\n  11\n  >>> div(92)\n  2\n  >>> div(93)\n  2\n  >>> div(94)\n  2\n  >>> div(95)\n  3\n  >>> div(96)\n  5\n  >>> div(97)\n  3\n  >>> div(98)\n  7\n  >>> div(99)\n  11\n  >>> div(100)\n  2\n  >>> div(101)\n  2\n  >>> div(102)\n  2\n  >>> div(103)\n  3\n  >>> div(104)\n  5\n  >>> div(105)\n  3\n  >>> div(106)\n  7\n  >>> div(107)\n  11\n  >>> div(108)\n  2\n  >>> div(109)\n  2\n  >>> div(110)\n  2\n  >>> div(111)\n  3\n  >>> div(112)\n  5\n  >>> div(113)\n  3\n  >>> div(114)\n  7\n  >>> div(115)\n  11\n  >>> div(116)\n  2\n  >>> div(117)\n  2\n  >>> div(118)\n  2\n  >>> div(119)\n  3\n  >>> div(120)\n  5\n  >>> div(121)\n  3\n  >>> div(122)\n  7\n  >>> div(123)\n  11\n  >>> div(124)\n  2\n  >>> div(125)\n  2\n  >>> div(126)\n  2\n  >>> div(127)\n  3\n  >>> div(128)\n  5\n  >>> div(129)\n  3\n  >>> div(130)\n  7\n  >>> div(131)\n  11\n  >>> div(132)\n  2\n  >>> div(133)\n  2\n  >>> div(134)\n  2\n  >>> div(135)\n  3\n  >>> div(136)\n  5\n  >>> div(137)\n  3\n  >>> div(138)\n  7\n  >>> div(139)\n  11\n  >>> div(140)\n  2\n  >>> div(141)\n  2\n  >>> div"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0))).join(\"\");\n}\n\nconst encrypt = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c + key);\n  });\n}\n\nconst decode = (s, key) => {\n  return decodeShift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nconst encode = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c + key);\n  });\n}\n\nconst decode_shift = (s, key) => {\n  return decodeShift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nconst encode_shift = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c + key);\n  });\n}\n\nconst encrypt_shift = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c + key);\n  });\n}\n\nconst decode_encrypt = (s, key) => {\n  return decodeShift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nconst encode_encrypt = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c + key);\n  });\n}\n\nconst encrypt_encrypt = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c + key);\n  });\n}\n\nconst decode_decrypt = (s, key) => {\n  return decodeShift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nconst encode_decrypt = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nconst encrypt_decrypt = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nconst encrypt_decrypt_encrypt = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nconst decode_decrypt_encrypt = (s, key) => {\n  return decodeShift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nconst encrypt_decrypt_decrypt = (s, key) => {\n  return encodSehift(s).replace(/[a-z]/g, (m) => {\n    const c = m.charCodeAt(0);\n    return String.fromCharCode(c - key);\n  });\n}\n\nmodule.exports = {\n  encode_shift,\n  encode_decrypt,\n  encode_encrypt,\n  encode_decrypt_encrypt,\n  encode_decrypt_decrypt,\n  decode_shift,\n  decode_decrypt,\n  decode_encrypt,\n  decode_decrypt_encrypt,\n  decode_decrypt_decrypt,\n  encrypt_shift,\n  encrypt_decrypt,\n  encrypt_decrypt_encrypt,\n  encrypt_decrypt_decrypt,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  return text.replace(new RegExp(`[${vowels.join('|')}]`, 'g'), '')\n}\n\nexport default remoevVowels\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/* Return the longest common prefix of two lists.\n  >>> longestCommonPrefix([1, 2, 3, 4, 5], [2, 3, 4, 5])\n  [2, 3, 4]\n  >>> longestCommonPrefix([1, 2, 3, 4, 5], [3, 4, 5])\n  [3, 4, 5]\n  >>> longestCommonPrefix([1, 2, 3, 4, 5], [3, 4])\n  [3, 4]\n  >>> longestCommonPrefix([1, 2, 3, 4], [2, 3, 4, 5])\n  []\n  >>> longestCommonPrefix([1, 2, 3, 4], [2, 3])\n  [2, 3]\n  */\nconst longestCommonPrefix = (l1, l2) => {\n  let i = 0;\n  let common = [];\n  while (l1[i] === l2[i]) {\n    common.push(l1[i]);\n    i++;\n  }\n  return common;\n};\n\n/* Return the longest common suffix of two lists.\n  >>> longestCommonSuffix([1, 2, 3, 4, 5], [2, 3, 4, 5])\n  [2, 3, 4, 5]\n  >>> longestCommonSuffix([1, 2, 3, 4, 5], [3, 4, 5])\n  [3, 4, 5]\n  >>> longestCommonSuffix([1, 2, 3, 4], [2, 3, 4, 5])\n  [2, 3, 4]\n  >>> longestCommonSuffix([1, 2, 3, 4], [2, 3])\n  [2, 3]\n  */\nconst longestCommonSuffix = (l1, l2) => {\n  let i = 0;\n  let common = [];\n  while (l1[l1.length - 1 - i] === l2[l2.length - 1 - i]) {\n    common.push(l1[l1.length - 1 - i]);\n    i++;\n  }\n  return common;\n};\n\n/* Return the intersection of two lists.\n  >>> intersection([1, 2, 3, 4, 5], [2, 3, 4, 5])\n  [2, 3]\n  >>> intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> intersection([1, 2, 3, 4, 5], [1, 2, 3])\n  [1, 2, 3]\n  >>> intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst intersection = (l1, l2) => {\n  let i = 0;\n  let common = [];\n  while (l1[i] === l2[i]) {\n    common.push(l1[i]);\n    i++;\n  }\n  return common;\n};\n\n/* Return the sum of two lists.\n  >>> sum([1, 2, 3, 4, 5], [2, 3, 4, 5])\n  [3, 4, 5]\n  >>> sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sum([1, 2, 3, 4, 5], [1, 2, 3])\n  [1, 2, 3]\n  >>> sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst sum = (l1, l2) => {\n  let sum = [];\n  for (let i = 0; i < l1.length; i++) {\n    sum.push(l1[i] + l2[i]);\n  }\n  return sum;\n};\n\n/* Return the union of two lists.\n  >>> union([1, 2, 3, 4, 5], [2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> union([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> union([1, 2, 3, 4, 5], [1, 2, 3])\n  [1, 2, 3]\n  >>> union([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst union = (l1, l2) => {\n  let sum = [];\n  for (let i = 0; i < l1.length; i++) {\n    sum.push(l1[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    sum.push(l2[i]);\n  }\n  return sum;\n};\n\n/* Return true if two lists are equal.\n  >>> equal([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> equal([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n  false\n  */\nconst equal = (l1, l2) => {\n  return l1.length === l2.length && l1.every(x => x === l2[x]);\n};\n\nmodule.exports = {\n  sum,\n  intersection,\n  union,\n  equal,\n  longestCommonPrefix,\n  longestCommonSuffix,\n  belowThreshold,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/*\n  * Divide two numbers x and y\n  >>> divide(6, 3)\n  2\n  >>> divide(35, 7)\n  5\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\n/*\n  * Modulo two numbers x and y\n  >>> modulo(6, 3)\n  0\n  >>> modulo(35, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n}\n\n/*\n  * Return the factorial of x\n  *\n  * factorial(1) => 1\n  * factorial(2) => 2\n  *...\n  * factorial(6) => 720\n  *\n  * @param x\n  * @returns {number}\n  */\nconst factorial = (x) => {\n  if (x === 1) return 1;\n  return x * factorial(x - 1);\n}\n\n/*\n  * Return the sum of the squares of the first n numbers\n  *\n  * @param n\n  * @returns {number}\n  */\nconst sumSquares = (n) => {\n  if (n === 1) return 1;\n  return n * n * sumSquares(n - 1);\n}\n\n/*\n  * Return the sum of the n numbers\n  *\n  * @param n\n  * @returns {number}\n  */\nconst sum = (n) => {\n  if (n === 1) return 1;\n  return n * sum(n - 1);\n}\n\n/*\n  * Return the sum of the squares of the first n numbers\n  *\n  * @param n\n  * @returns {number}\n  */\nconst sumSquares = (n) => {\n  if (n === 1) return 1;\n  return n * n * sumSquares(n - 1);\n}\n\n/*\n  * Return the sum of the n numbers\n  *\n  * @param n\n  * @returns {number}\n  */\nconst sum = (n) => {\n  if (n === 1) return 1;\n  return n * sum(n - 1);\n}\n\n/*\n  * Given two sorted arrays, write a function to merge them into one sorted array\n  *\n  * merge([1, 3], [2, 4]) => [1, 2, 3, 4]\n  * merge([1, 3], [2]) => [1, 2, 3]\n  * merge([1, 3], [2, 4]) => [1, 2, 3, 4]\n  *\n  * @param {array} arr1\n  * @param {array} arr2\n  * @returns {array}\n  */\nconst merge = (arr1, arr2) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) {\n      result.push(arr1[i]);\n      i++;\n    } else {\n      result.push(arr2[j]);\n      j++;\n    }\n  }\n\n  while (i < arr1.length) {\n    result.push(arr1[i]);\n    i++;\n  }\n\n  while (j < arr2.length) {\n    result.push(arr2[j]);\n    j++;\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  add, subtract, multiply, divide, modulo, factorial, sumSquares, sum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nexport default sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if(n == 1) {\n    return 1;\n  }\n  if(n == 2) {\n    return 2;\n  }\n  return fib(n-1) + fib(n-2);\n};\n\nconst fibs = [...new Array(101)];\nfibs[0] = 0;\nfibs[1] = 1;\nfibs[2] = 1;\nfibs[3] = 2;\n\nfor(let i = 4; i <= 100; i++) {\n  fibs[i] = fibs[i-1] + fibs[i-2];\n}\n\nconst fibsSum = (n) => {\n  if(n == 1) {\n    return 1;\n  }\n  if(n == 2) {\n    return 2;\n  }\n  return fibsSum(n-1) + fibsSum(n-2);\n};\n\nconst fibsSumSquared = (n) => {\n  if(n == 1) {\n    return 1;\n  }\n  if(n == 2) {\n    return 2;\n  }\n  return fibsSumSquared(n-1) + fibsSumSquared(n-2);\n};\n\nconst fibsSumCubed = (n) => {\n  if(n == 1) {\n    return 1;\n  }\n  if(n == 2) {\n    return 2;\n  }\n  return fibsSumCubed(n-1) + fibsSumCubed(n-2);\n};\n\nconst fibsSumSquaredCubed = (n) => {\n  if(n == 1) {\n    return 1;\n  }\n  if(n == 2) {\n    return 2;\n  }\n  return fibsSumSquaredCubed(n-1) + fibsSumSquaredCubed(n-2);\n};\n\nconst fibsSumCubedSquared = (n) => {\n  if(n == 1) {\n    return 1;\n  }\n  if(n == 2) {\n    return 2;\n  }\n  return fibsSumCubedSquared(n-1) + fibsSumCubedSquared(n-2);\n};\n\nconst fibsSumCubedSquaredDiv = (n) => {\n  if(n == 1) {\n    return 1;\n  }\n  if(n == 2) {\n    return 2;\n  }\n  return fibsSumCubedSquaredDiv(n-1) + fibsSumCubedSquaredDiv(n-2);\n};\n\nconst fibsSumCubedSquaredMod = (n) => {\n  if(n == 1) {\n    return 1;\n  }\n  if(n == 2) {\n    return 2;\n  }\n  return fibsSumCubedSquaredMod(n-1) + fibsSumCubedSquaredMod(n-2);\n};\n\nconsole.log(fibs(10));\nconsole.log(fibsSum(10));\nconsole.log(fibsSumSquared(10));\nconsole.log(fibsSumCubed(10));\nconsole.log(fibsSumSquaredCubed(10));\nconsole.log(fibsSumCubedSquared(10));\nconsole.log(fibsSumCubedSquaredDiv(10));\nconsole.log(fibsSumCubedSquaredMod(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  let open = 0\n  let close = 0\n  brackets.forEach(char => {\n    if (char === '<') {\n      open += 1\n    }\n    if (char === '>') {\n      close += 1\n    }\n  })\n\n  return (open === close)\n}\n\n// ## Main\nconst main = () => {\n  const input = readInput()\n\n  // if it's empty, then return an empty string\n  if (!input) {\n    return \"\"\n  }\n\n  // convert the input to a stack of brackets\n  const stack = convertToBracketStack(input)\n\n  // find the longest matching sequence\n  let result = findLongestSequence(stack)\n\n  // if there is no matching sequence, return false\n  if (!result) {\n    return false\n  }\n\n  // find the corresponding opening and closing brackets\n  const opening = brackets.indexOf(result.open)\n  const closing = brackets.indexOf(result.close)\n\n  // if it's not possible to find opening and closing brackets, return false\n  if (opening < 0 || closing < 0) {\n    return false\n  }\n\n  // return the matching sequence, with opening and closing brackets\n  return brackets.substr(opening, closing + 1)\n}\n\n// ## Test\nconst test = () => {\n  // console.log(\"Hello\")\n  // console.log(main())\n  // console.log(findLongestSequence([\">\"]))\n  // console.log(findLongestSequence([\">\", \"<\"]))\n  // console.log(findLongestSequence([\">\", \"<\", \">\"], [\">\"]))\n  // console.log(findLongestSequence([\">\", \"<\", \">\"], [\">\", \"<\"]))\n  // console.log(findLongestSequence([\">\", \"<\", \">\"], [\">\", \"<\", \">\"], [\"<\", \"<\", \">\"], [\"<\", \"<\", \"<\"]))\n  // console.log(findLongestSequence([\">\", \"<\", \">\"], [\"<\", \"<\", \">\"], [\"<\", \"<\", \"<\"], [\"<\", \"<\", \"<\"]))\n}\n\n// ## Helper\nconst convertToBracketStack = (input) => {\n  const stack = []\n  let current = \"\"\n  for (let i = 0; i < input.length; i += 1) {\n    if (input[i] === '<') {\n      current = \">\"\n    } else {\n      current = \"\"\n    }\n    stack.push(current)\n  }\n  return stack\n}\n\nconst findLongestSequence = (stack, result = []) => {\n  // if there are no brackets, return false\n  if (!stack.length) {\n    return false\n  }\n\n  // get the last item in the stack\n  const lastItem = stack[stack.length - 1]\n\n  // if the last item is the same as the last item of the previous result, return the previous result\n  if (lastItem === result[result.length - 1]) {\n    return result\n  }\n\n  // otherwise, try to match a matching pair\n  let matchingPair = null\n  stack.forEach(char => {\n    if (char === lastItem) {\n      matchingPair = char\n    }\n  })\n\n  // if there is a matching pair, then try to find the longest matching sequence\n  if (matchingPair) {\n    const newResult = findLongestSequence(stack.slice(0, -1), result.concat(matchingPair))\n    if (newResult) {\n      return newResult\n    }\n  }\n\n  // otherwise, there is no matching pair, so return false\n  return false\n}\n\n// ## Execute\n// console.log(test())\n\n// console.log(main())\n\n// console.log(test())\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let res = l.every((e) => {\n    let m = Math.min(e, 0);\n    let c = Math.max(e, 0);\n    return (m === e)? (m == c) : false;\n  })\n  return res\n}\n\n/* Return true is number is prime or false otherwise.\n  >>> prime(2)\n  true\n  >>> prime(3)\n  false\n  >>> prime(4)\n  false\n  >>> prime(5)\n  true\n  >>> prime(10)\n  false\n  >>> prime(100)\n  false\n  >>> prime(101)\n  false\n  >>> prime(1000)\n  false\n  >>> prime(1001)\n  false\n  >>> prime(2000)\n  false\n  >>> prime(10000)\n  false\n  >>> prime(101000)\n  false\n  */\nconst prime = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/* Return true if number is perfect.\n  >>> perfect(5)\n  true\n  >>> perfect(8)\n  true\n  >>> perfect(4)\n  false\n  >>> perfect(10)\n  false\n  >>> perfect(1)\n  false\n  >>> perfect(3)\n  true\n  >>> perfect(0)\n  false\n  >>> perfect(-1)\n  false\n  >>> perfect(-3)\n  false\n  >>> perfect(2)\n  true\n  */\nconst perfect = (n) => {\n  return n === Math.floor(n)\n}\n\n/* Return true if number is perfect power.\n  >>> perfectPower(1)\n  false\n  >>> perfectPower(2)\n  true\n  >>> perfectPower(3)\n  true\n  >>> perfectPower(4)\n  true\n  >>> perfectPower(5)\n  false\n  >>> perfectPower(6)\n  false\n  >>> perfectPower(7)\n  false\n  >>> perfectPower(8)\n  false\n  >>> perfectPower(9)\n  false\n  >>> perfectPower(10)\n  false\n  >>> perfectPower(11)\n  false\n  >>> perfectPower(12)\n  false\n  >>> perfectPower(13)\n  false\n  >>> perfectPower(14)\n  false\n  >>> perfectPower(15)\n  true\n  >>> perfectPower(16)\n  false\n  >>> perfectPower(17)\n  false\n  >>> perfectPower(18)\n  false\n  >>> perfectPower(19)\n  false\n  >>> perfectPower(20)\n  false\n  >>> perfectPower(21)\n  false\n  >>> perfectPower(22)\n  false\n  >>> perfectPower(23)\n  false\n  >>> perfectPower(24)\n  false\n  >>> perfectPower(25)\n  false\n  >>> perfectPower(26)\n  false\n  >>> perfectPower(27)\n  false\n  >>> perfectPower(28)\n  false\n  >>> perfectPower(29)\n  false\n  >>> perfectPower(30)\n  false\n  >>> perfectPower(31)\n  false\n  >>> perfectPower(32)\n  false\n  >>> perfectPower(33)\n  false\n  >>> perfectPower(34)\n  false\n  >>> perfectPower(35)\n  false\n  >>> perfectPower(36)\n  false\n  >>> perfectPower(37)\n  false\n  >>> perfectPower(38)\n  false\n  >>> perfectPower(39)\n  false\n  >>> perfectPower(40)\n  false\n  >>> perfectPower(41)\n  false\n  >>> perfectPower(42)\n  false\n  >>> perfectPower(43)\n  false\n  >>> perfectPower(44)\n  false\n  >>> perfectPower(45)\n  false\n  >>> perfectPower(46)\n  false\n  >>> perfectPower(47)\n  false\n  >>> perfectPower(48)\n  false\n  >>> perfectPower(49)\n  false\n  >>> perfectPower(50)\n  false\n  >>> perfectPower(51)\n  false\n  >>> perfectPower(52)\n  false\n  >>> perfectPower(53)\n  false\n  >>> perfectPower(54)\n  false\n  >>> perfectPower(55)\n  false\n  >>> perfectPower(56)\n  false\n  >>> perfectPower(57)\n  false\n  >>> perfectPower(58)\n  false\n  >>> perfectPower(59)\n  false\n  >>> perfectPower(60)\n  false\n  >>> perfectPower(61)\n  false\n  >>> perfectPower(62)\n  false\n  >>> perfectPower(63)\n  false\n  >>> perfectPower(64)\n  false\n  >>> perfectPower(65)\n  false\n  >>> perfectPower(66)\n  false\n  >>> perfectPower(67)\n  false\n  >>> perfectPower(68)\n  false\n  >>> perfectPower(69)\n  false\n  >>> perfectPower(70)\n  false\n  >>> perfectPower(71)\n  false\n  >>> perfectPower(72)\n  false\n  >>> perfectPower(73)\n  false\n  >>> perfectPower(74)\n  false\n  >>> perfectPower(75)\n  false\n  >>> perfectPower(76)\n  false\n  >>> perfectPower(77)\n  false\n  >>> perfectPower(78)\n  false\n  >>> perfectPower(79)\n  false\n  >>> perfectPower(80)\n  false\n  >>> perfectPower(81)\n  false\n  >>> perfectPower(82)\n  false\n  >>> perfectPower(83)\n  false\n  >>> perfectPower(84)\n  false\n  >>> perfectPower(85)\n  false\n  >>> perfectPower(86)\n  false\n  >>> perfectPower(87)\n  false\n  >>> perfectPower(88)\n  false\n  >>> perfectPower(89)\n  false\n  >>> perfectPower(90)\n  false\n  >>> perfectPower(91)\n  false\n  >>> perfectPower(92)\n  false\n  >>> perfectPower(93)\n  false\n  >>> perfectPower(94)\n  false\n  >>> perfectPower(95)\n"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    let l1 = l1.concat([]);\n    let l2 = l2.concat([]);\n\n    while (l1.length && l2.length) {\n        let l1_it = l1.shift();\n        let l2_it = l2.shift();\n\n        if (l1_it === l2_it) {\n            return [l1_it];\n        }\n    }\n\n    return [];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let largest = 1;\n  while (largest * largest < n) {\n    if (n % largest === 0) {\n      return largest;\n    }\n    largest = largest * 2;\n  }\n  return largest;\n};\n\nexport { largetsPrimeFactor };\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nexport default sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n    if (!brackets) {\n        return false;\n    }\n    const stack = [],\n        stackSize = 0,\n        bracketsLength = brackets.length;\n\n    for (let i = 0; i < bracketsLength; i++) {\n        const char = brackets[i];\n\n        if (char === '(') {\n            stack.push(char);\n            stackSize++;\n        } else if (char === ')') {\n            if (stack.length === stackSize) {\n                stack.pop();\n                stackSize--;\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === stackSize;\n};\n\nmodule.exports = correctBracketnig;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.slice(1, xs.length - 1).reduce((a, b) => {\n    return a + b;\n  });\n};\n\n/**\n  Returns the roots of a polynomial.\n  If the polynomial is a constant function, return []\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -2, -3, -4]\n  >>> roots([1, 2, 3])\n  []\n  >>> roots(derivative([3, 1, 2, 4, 5]))\n  [-1, -2, -3, -4]\n  >>> roots(derivative([1, 2, 3]))\n  []\n  */\nconst roots = (xs) => {\n  if (xs.length === 1) return [];\n  let d = derivative(xs);\n  return d.map((x) => {\n    return Math.sqrt(-d);\n  });\n};\n\nexport default {\n  derivative,\n  roots\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nfibfib(5)\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let length = s.length\n  let i = 0\n  let result = 0\n\n  while (i < length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      result++\n    }\n    i++\n  }\n\n  return result\n}\n\nexport default vowelsConut\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  if (shift > x.length) return x.split('').reverse().join('');\n  let arr = x.split('');\n  let result = arr.slice(shift).concat(arr.slice(0, shift));\n  return result.join('');\n}\n\n/*\n  Circular shift the digits of the integer x, shift the digits left by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"02\"\n  */\nconst circularSihftR = (x, shift) => {\n  if (shift > x.length) return x.split('').reverse().join('');\n  let arr = x.split('');\n  let result = arr.slice(0, shift).concat(arr.slice(shift, x.length));\n  return result.join('');\n}\n\n/*\n  Calculate the power of the number x to the power of n.\n  >>> power(2, 3)\n  8\n  >>> power(2, 4)\n  16\n  >>> power(4, 2)\n  16\n  >>> power(4, 3)\n  81\n  >>> power(4, 4)\n  64\n  */\nconst power = (x, n) => {\n  let result = 1;\n  for (let i = 0; i < n; i++) result *= x;\n  return result;\n}\n\n/*\n  Multiply the number x by n.\n  >>> multiply(2, 3)\n  6\n  >>> multiply(2, 4)\n  16\n  >>> multiply(4, 2)\n  16\n  >>> multiply(4, 3)\n  81\n  */\nconst multiply = (x, n) => x * n;\n\n/*\n  Divide the number x by n.\n  >>> divide(4, 2)\n  2\n  >>> divide(16, 4)\n  4\n  >>> divide(16, 3)\n  3\n  >>> divide(81, 4)\n  9\n  */\nconst divide = (x, n) => x / n;\n\n/*\n  Return a list of the first n digits of the number x.\n  >>> firstn(3, 10)\n  [3, 4, 5]\n  >>> firstn(5, 3)\n  []\n  */\nconst firstn = (n, x) => x.split('').slice(0, n).join('');\n\n/*\n  Return a list of the first n digits of the number x.\n  >>> firstn(3, 10)\n  [3, 4, 5]\n  >>> firstn(5, 3)\n  []\n  */\nconst firstnR = (n, x) => x.split('').slice(n).join('');\n\n/*\n  Return the number x, with the first n digits reversed.\n  >>> revn(3, 10)\n  7\n  >>> revn(5, 3)\n  3\n  */\nconst revn = (n, x) => x.split('').reverse().join('');\n\n/*\n  Return the number x, with the first n digits reversed.\n  >>> revn(3, 10)\n  7\n  >>> revn(5, 3)\n  3\n  */\nconst revnR = (n, x) => x.split('').reverse().join('');\n\n/*\n  Return the number x, with the first n digits reversed,\n  then the first n digits of the reversed number reversed.\n  >>> revn(3, 10)\n  7\n  >>> revn(5, 3)\n  3\n  >>> revnR(3, 10)\n  5\n  >>> revnR(5, 3)\n  3\n  */\nconst revnR2 = (n, x) => x.split('').reverse().join('');\n\n/*\n  Return the number x, with the first n digits reversed,\n  then the first n digits of the reversed number reversed.\n  >>> revn(3, 10)\n  7\n  >>> revn(5, 3)\n  3\n  >>> revnR2(3, 10)\n  5\n  >>> revnR2(5, 3)\n  3\n  */\nconst revnR3 = (n, x) => x.split('').reverse().join('');\n\n/*\n  Return the number x, with the first n digits reversed,\n  then the first n digits of the reversed number reversed.\n  >>> revn(3, 10)\n  7\n  >>> revn(5, 3)\n  3\n  >>> revnR3(3, 10)\n  5\n  >>> revnR3(5, 3)\n  3\n  */\nconst revnR4 = (n, x) => x.split('').reverse().join('');\n\n/*\n  Return the number x, with the first n digits reversed,\n  then the first n digits of the reversed number reversed.\n  >>> revn(3, 10)\n  7\n  >>> revn(5, 3)\n  3\n  >>> revnR4(3, 10)\n  5\n  >>> revnR4(5, 3)\n  3\n  */\nconst revnR5 = (n, x) => x.split('').reverse().join('');\n\n/*\n  Return the number x, with the first n digits reversed,\n  then the first n digits of the reversed number reversed.\n  >>> revn(3, 10)\n  7\n  >>> revn(5, 3)\n  3\n  >>> revnR5(3, 10)\n  5\n  >>> revnR5(5, 3)\n  3\n  */\nconst revnR6 = (n, x) => x.split('').reverse().join('');\n\n/*\n  Return the number x, with the first n digits reversed,\n  then the first n digits of the reversed number reversed.\n  >>> revn(3, 10)\n  7\n  >>> revn(5, 3)\n  3\n  >>> rev"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for(let i = 0; i < s.length; i++){\n    sum += s.charCodeAt(i) - 'A'.charCodeAt(0);\n  }\n  return sum;\n}\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let num = parseInt(s, 10);\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (fruitBasket.indexOf(i)!= -1) {\n      count++;\n    }\n  }\n  return num - count;\n};\n\nfruitBasket = ['apples', 'oranges','mango'];\nfruitBasket.forEach(fruit => {\n  let num = parseInt(fruit, 10);\n  fruitCount.push(num);\n});\n\nfruitCount = fruitCount.concat(fruitBasket);\nfruitCount.sort(function(a, b) {\n  return a - b;\n});\nfruitCount = fruitCount.filter((a, index) => {\n  return index % 2 === 0;\n});\nfruitCount.forEach(fruit => {\n  fruitCount2.push(fruit);\n});\n\nfruitCount2 = fruitCount2.concat(fruitBasket);\nfruitCount2.sort(function(a, b) {\n  return a - b;\n});\nfruitCount2.forEach(fruit => {\n  fruitCount3.push(fruit);\n});\n\nfruitCount3 = fruitCount3.concat(fruitBasket);\nfruitCount3.sort(function(a, b) {\n  return a - b;\n});\nfruitCount3.forEach(fruit => {\n  fruitCount4.push(fruit);\n});\n\nfruitCount4 = fruitCount4.concat(fruitBasket);\nfruitCount4.sort(function(a, b) {\n  return a - b;\n});\nfruitCount4.forEach(fruit => {\n  fruitCount5.push(fruit);\n});\nfruitCount5 = fruitCount5.concat(fruitBasket);\nfruitCount5.sort(function(a, b) {\n  return a - b;\n});\nfruitCount5.forEach(fruit => {\n  fruitCount6.push(fruit);\n});\n\nfruitCount6 = fruitCount6.concat(fruitBasket);\nfruitCount6.sort(function(a, b) {\n  return a - b;\n});\nfruitCount6.forEach(fruit => {\n  fruitCount7.push(fruit);\n});\n\nfruitCount7 = fruitCount7.concat(fruitBasket);\nfruitCount7.sort(function(a, b) {\n  return a - b;\n});\nfruitCount7.forEach(fruit => {\n  fruitCount8.push(fruit);\n});\n\nfruitCount8 = fruitCount8.concat(fruitBasket);\nfruitCount8.sort(function(a, b) {\n  return a - b;\n});\nfruitCount8.forEach(fruit => {\n  fruitCount9.push(fruit);\n});\n\nfruitCount9 = fruitCount9.concat(fruitBasket);\nfruitCount9.sort(function(a, b) {\n  return a - b;\n});\nfruitCount9.forEach(fruit => {\n  fruitCount10.push(fruit);\n});\n\nfruitCount10 = fruitCount10.concat(fruitBasket);\nfruitCount10.sort(function(a, b) {\n  return a - b;\n});\nfruitCount10.forEach(fruit => {\n  fruitCount11.push(fruit);\n});\n\nfruitCount11 = fruitCount11.concat(fruitBasket);\nfruitCount11.sort(function(a, b) {\n  return a - b;\n});\nfruitCount11.forEach(fruit => {\n  fruitCount12.push(fruit);\n});\n\nfruitCount12 = fruitCount12.concat(fruitBasket);\nfruitCount12.sort(function(a, b) {\n  return a - b;\n});\nfruitCount12.forEach(fruit => {\n  fruitCount13.push(fruit);\n});\n\nfruitCount13 = fruitCount13.concat(fruitBasket);\nfruitCount13.sort(function(a, b) {\n  return a - b;\n});\nfruitCount13.forEach(fruit => {\n  fruitCount14.push(fruit);\n});\n\nfruitCount14 = fruitCount14.concat(fruitBasket);\nfruitCount14.sort(function(a, b) {\n  return a - b;\n});\nfruitCount14.forEach(fruit => {\n  fruitCount15.push(fruit);\n});\n\nfruitCount15 = fruitCount15.concat(fruitBasket);\nfruitCount15.sort(function(a, b) {\n  return a - b;\n});\nfruitCount15.forEach(fruit => {\n  fruitCount16.push(fruit);\n});\n\nfruitCount16 = fruitCount16.concat(fruitBasket);\nfruitCount16.sort(function(a, b) {\n  return a - b;\n});\nfruitCount16.forEach(fruit => {\n  fruitCount17.push(fruit);\n});\n\nfruitCount17 = fruitCount17.concat(fruitBasket);\nfruitCount17.sort(function(a, b) {\n  return a - b;\n});\nfruitCount17.forEach(fruit => {\n  fruitCount18.push(fruit);\n});\n\nfruitCount18 = fruitCount18.concat(fruitBasket);\nfruitCount18.sort(function(a, b) {\n  return a - b;\n});\nfruitCount18.forEach(fruit => {\n  fruitCount19.push(fruit);\n});\n\nfruitCount19 = fruitCount19.concat(fruitBasket);\nfruitCount19.sort(function(a, b) {\n  return a - b;\n});\nfruitCount19.forEach(fruit => {\n  fruitCount20.push("}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  arr = arr.filter(i => i > 0);\n  if (!arr.length) return [];\n  let min = arr.reduce((a, b) => a > b? b : a);\n  let index = -1;\n  arr.forEach(i => {\n    if (i == min) index = arr.indexOf(i);\n  });\n  return [min, index];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\nconst search2 = (lst) => {\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] === max) {\n      max++\n    }\n  }\n  return max\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\nconsole.log(search2([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const srt = lst.sort((a, b) => a - b)\n  const min = srt[0]\n  const max = srt[srt.length - 1]\n  let result = [min]\n  for (let i = 0; i < srt.length - 1; i++) {\n    if (srt[i] === max) {\n      break\n    }\n    result.push(max)\n  }\n  return result.concat(srt.slice(i + 1).sort((a, b) => a - b))\n}\n\nmodule.exports = stranegoSrtList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0) {\n    return -1;\n  }\n\n  return (Math.abs(a * (c / 2) + b * (b / 2) + c * (c / 2)));\n};\n\n//\n//  Main\n//\n\nconst validTriangle = triangleArea(3, 4, 5);\nconst invalidTriangle = triangleArea(1, 2, 10);\n\nconsole.log(`Triangle Area: ${validTriangle}`);\nconsole.log(`Triangle Area: ${invalidTriangle}`);\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  return new Array(q.length).fill(0).reduce((acc, i) => {\n    const left = acc[i] + q[i];\n    const right = acc[i + q.length - 1] + q[q.length - 1 - i];\n    return left <= w && right <= w;\n  }, false);\n};\n\n// TEST\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n    let max = arr.length;\n    let min = 0;\n\n    // Find the minimum and maximum element index in the array\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            max = i + 1;\n            min = i;\n        } else if (arr[i] < arr[i + 1]) {\n            max = i;\n            min = i + 1;\n        }\n    }\n\n    // Start the loop for all possible combinations\n    let current = arr.length;\n    let currentMin = arr.length;\n    let changeCount = 0;\n    while (current < arr.length) {\n        // Find the length of the longest palindrome\n        let longestPalindrome = 0;\n        for (let i = current; i < arr.length; i++) {\n            if (arr[i] === arr[i - current]) {\n                longestPalindrome += 1;\n            } else {\n                break;\n            }\n        }\n\n        // Find the number of elements that need to be changed to make the array palindromic\n        let numberOfChanges = longestPalindrome + current - 1;\n        if (numberOfChanges < min) {\n            min = numberOfChanges;\n            currentMin = current;\n        }\n\n        current += 1;\n        changeCount += 1;\n    }\n\n    return changeCount;\n};\n\nconsole.log(msallestChange([1, 2, 3, 2, 1])); // 4\nconsole.log(msallestChange([1, 2, 3, 2, 1, 3, 2, 1, 2, 1, 3])); // 5\nconsole.log(msallestChange([1, 2, 3, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 1])); // 5\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (!lst1 ||!lst2) {\n    return lst1 || lst2;\n  }\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1!== len2) {\n    return lst1;\n  }\n  return lst1.filter(i => lst2.indexOf(i) >= 0);\n};\n\nexport default ottalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 3 == 0 && m % 5 == 0) {\n      i += 1;\n    }\n    m = m / 3;\n  }\n  return i == 3;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 5 * 5 * 5\n  */\nconst isMultiplyPirme2 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 5 == 0) {\n      i += 1;\n    }\n    m = m / 5;\n  }\n  return i == 5;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 7 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 7 * 7 * 7 * 7 * 7 * 7\n  */\nconst isMultiplyPirme3 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 7 == 0) {\n      i += 1;\n    }\n    m = m / 7;\n  }\n  return i == 7;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 11 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 11 * 11 * 11 * 11 * 11 * 11 * 11\n  */\nconst isMultiplyPirme4 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 11 == 0) {\n      i += 1;\n    }\n    m = m / 11;\n  }\n  return i == 11;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 13 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 13 * 13 * 13 * 13 * 13 * 13 * 13 * 13\n  */\nconst isMultiplyPirme5 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 13 == 0) {\n      i += 1;\n    }\n    m = m / 13;\n  }\n  return i == 13;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 17 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 17 * 17 * 17 * 17 * 17 * 17 * 17 * 17 * 17\n  */\nconst isMultiplyPirme6 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 17 == 0) {\n      i += 1;\n    }\n    m = m / 17;\n  }\n  return i == 17;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 19 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 19 * 19 * 19 * 19 * 19 * 19 * 19 * 19 * 19\n  */\nconst isMultiplyPirme7 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 19 == 0) {\n      i += 1;\n    }\n    m = m / 19;\n  }\n  return i == 19;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 23 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 23 * 23 * 23 * 23 * 23 * 23 * 23 * 23 * 23\n  */\nconst isMultiplyPirme8 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 23 == 0) {\n      i += 1;\n    }\n    m = m / 23;\n  }\n  return i == 23;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 29 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29 * 29\n  */\nconst isMultiplyPirme9 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 29 == 0) {\n      i += 1;\n    }\n    m = m / 29;\n  }\n  return i == 29;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 31 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31 * 31\n  */\nconst isMultiplyPirme10 = (a) => {\n  let m = a,\n    i = 0;\n  while (m!= 0) {\n    if (m % 31 == 0) {\n      i += 1;"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  return n * Math.pow(x, n - 1) === x\n}\n\n/*\n  Given a number n, return the number of divisors of n.\n  divisors(5) => 1\n  divisors(7) => 1\n  divisors(10) => 2\n  divisors(15) => 2\n  divisors(18) => 3\n  divisors(22) => 2\n  divisors(30) => 5\n  */\nconst divisors = n => {\n  const isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  if (isPrime(n)) {\n    return 1\n  }\n  let result = 2\n  while (n > 1) {\n    result += n / n\n    n = Math.floor(n / 2)\n  }\n  return result\n}\n\n/*\n  Given a number, return the sum of its digits.\n  sumDigits(11) => 4\n  sumDigits(19) => 8\n  sumDigits(9) => 9\n  sumDigits(2) => 2\n  sumDigits(4) => 4\n  sumDigits(8) => 8\n  */\nconst sumDigits = n => {\n  return n % 10\n}\n\n/*\n  Given two numbers, a and b, return their sum, as a string.\n  sum('1', '3') => '6'\n  sum('4', '9') => '1'\n  sum('8', '9') => '9'\n  sum('10', '11') => '1'\n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/*\n  Given two numbers, a and b, return their product, as a string.\n  product('4', '2') => '8'\n  product('1', '3') => '9'\n  product('5', '2') => '10'\n  product('9', '3') => '3'\n  product('10', '5') => '15'\n  */\nconst product = (a, b) => {\n  return a * b\n}\n\n/*\n  Given two numbers, a and b, return their difference, as a string.\n  difference('3', '8') => '5'\n  difference('1', '7') => '2'\n  difference('1', '3') => '0'\n  difference('5', '4') => '1'\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/*\n  Given two numbers, a and b, return their quotient, as a string.\n  quotient('4', '2') => '2'\n  quotient('2', '9') => '1'\n  quotient('2', '3') => '0'\n  quotient('9', '5') => '2'\n  */\nconst quotient = (a, b) => {\n  return a / b\n}\n\n/*\n  Given two numbers, a and b, return their remainder when divided by\n  the given divisor, as a string.\n  remainder('4', '2') => '0'\n  remainder('2', '9') => '1'\n  remainder('2', '3') => '1'\n  remainder('9', '5') => '4'\n  */\nconst remainder = (a, b) => {\n  return a % b\n}\n\n/*\n  Given a string, return the length of the string.\n  length('Hello') => 5\n  length('Hello world') => 11\n  length('A') => 1\n  length(' ') => 1\n  length('Hello world') => 11\n  */\nconst length = s => {\n  return s.length\n}\n\n/*\n  Given two strings, return the string that is obtained by concatenating\n  them.\n  concatenate('Hello','world') => 'Hello world'\n  concatenate('Hello','') => 'Hello'\n  concatenate('Hello','world','') => 'Hello world'\n  */\nconst concatenate = (a, b) => {\n  return a + b\n}\n\n/*\n  Given a string, return the string with all occurrences of the given\n  string in reverse order.\n  reverse('abc') => 'cba'\n  reverse('abc') => 'cba'\n  reverse('abcd') => 'dcba'\n  */\nconst reverse = s => {\n  return s.split('').reverse().join('')\n}\n\n/*\n  Given a string, return the string with all occurrences of the given\n  string in sorted order.\n  sort('abc') => 'abc'\n  sort('abcd') => 'dcba'\n  sort('abcd') => 'dcba'\n  */\nconst sort = s => {\n  return s.split('').sort().join('')\n}\n\n/*\n  Given a string, return the index of the first occurrence of the given\n  string in the given string. Return -1 if the string does not exist.\n  index('abc', 'c') => 0\n  index('abc', 'z') => -1\n  index('abcd', 'd') => 1\n  */\nconst index = (a, b) => {\n  const start = 0\n  const end = a.length - 1\n  let index = -1\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2)\n    if (a.charAt(mid) < b) {\n      start = mid + 1\n    } else if (a.charAt(mid) > b) {\n      end = mid - 1"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    let sum = a;\n    for (let i = 1; i < a; i++) {\n        sum = sum * a;\n        if (sum > a) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(iscube(4));\nconsole.log(iscube(8));\nconsole.log(iscube(81));\nconsole.log(iscube(16));\nconsole.log(iscube(3));\nconsole.log(iscube(6));\nconsole.log(iscube(4));\nconsole.log(iscube(9));\nconsole.log(iscube(16));\nconsole.log(iscube(81));\nconsole.log(iscube(32));\nconsole.log(iscube(128));\nconsole.log(iscube(64));\nconsole.log(iscube(256));\nconsole.log(iscube(1024));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let dec = num.toString(16).toUpperCase();\n  let numDigits = dec.length;\n\n  const isPrime = (n) => {\n    if (n === 2 || n === 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n      if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n  };\n\n  const primeArray = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let isPrimeNumber = 0;\n  for (let i = 0; i < primeArray.length; i++) {\n    if (numDigits === primeArray[i]) {\n      isPrimeNumber++;\n    }\n  }\n\n  return isPrimeNumber;\n};\n\nexport default hexKey;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const number = parseInt(decimal, 10)\n  const bin = number.toString(2)\n  const binLength = number.toString(2).length\n\n  const pad = (num, length) => {\n    while (num.length < length) {\n      num = '0' + num\n    }\n    return num\n  }\n\n  return [pad(bin, binLength), 'db'].join('')\n}\n\nconsole.log(decimalToBinary(15))\nconsole.log(decimalToBinary(32))\nconsole.log(decimalToBinary(0))\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let i = 0\n  let count = 1\n  let result = 1\n\n  while (i < len) {\n    count = 1\n    let j = i + 1\n    while (j < len) {\n      if (s[i] === s[j]) {\n        count++\n      } else {\n        count = 1\n      }\n      j++\n    }\n    result = result * count\n    i++\n  }\n  return result >= 3 && result % 1 === 0\n}\n\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  // create an array of grades\n  // then sort it in ascending order\n  // then use an for loop to create an array of grades in ascending order\n  // then convert grades to an array of string\n  // then use a for loop to create a letter grade array\n  // then use a for loop to create an array of strings from grades\n  // then use an for loop to create an array of string from letter grades\n  const sortedGrades = sortBy(grades, (grade) => grade);\n  const letterGrades = [];\n  for (let i = 0; i < sortedGrades.length; i++) {\n    letterGrades.push(`${sortedGrades[i]}`);\n  }\n  return letterGrades;\n};\n\n// const sortBy = (array, property) => {\n//   let sort = array.slice(0);\n//   sort.sort((a, b) => a[property] > b[property]? 1 : -1);\n//   return sort;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  return string.length > 1 &&\n    (string.length === 2 ||\n      (string.length % 2 === 0 &&\n        string.charAt(0) === string.charAt(1)));\n};\n\nconst prime = (string) => {\n  let prime = true;\n  let i = 0;\n  while (primeLength(string)) {\n    prime = false;\n    for (i = 2; i < string.length; i += 1) {\n      if (string.charAt(i) === string.charAt(i - 1) &&\n        string.charAt(i) === string.charAt(i + 1)) {\n        prime = true;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\nmodule.exports = prime;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0\n  while (n > 0) {\n    let i = n - 1\n    while (i >= 0) {\n      count += n % 10 == 1? 1 : 0\n      n = Math.floor(n / 10)\n      i--\n    }\n    n = n - 1\n  }\n  return count\n}\n\nexport default startsOneEnds\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let result = 0\n  while (N) {\n    result = result + (N % 2)\n    N = N / 2\n  }\n  return result.toString(2)\n}\n\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    var res = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] % 2) {\n            res += lst[i];\n        }\n    }\n    return res;\n}\n\n/*Given two lists, return the union of the lists as a new list.\n\n\n  Examples:\n      union([1, 2, 3, 4, 5], [2, 3, 4]) ==> [1, 2, 3, 4, 5] \n  */\nconst union = (a, b) => {\n    var result = [];\n    for (var i = 0; i < a.length; i++) {\n        result.push(a[i]);\n    }\n    for (var j = 0; j < b.length; j++) {\n        result.push(b[j]);\n    }\n    return result;\n}\n\n/*Given a list of numbers, return the sum of the elements.\n\n\n  Examples:\n      sum([1, 2, 3, 4, 5]) ==> 15\n  */\nconst sum = (lst) => {\n    var res = 0;\n    for (var i = 0; i < lst.length; i++) {\n        res += lst[i];\n    }\n    return res;\n}\n\n/*Given a list of numbers, return the largest number in the list.\n\n\n  Examples:\n      max([4, 8, 1, 2, 5, 7, 6, 3]) ==> 8\n  */\nconst max = (lst) => {\n    return Math.max.apply(null, lst);\n}\n\n/*Given a list of numbers, return the smallest number in the list.\n\n\n  Examples:\n      min([4, 8, 1, 2, 5, 7, 6, 3]) ==> 1\n  */\nconst min = (lst) => {\n    return Math.min.apply(null, lst);\n}\n\n/*Given two lists, return the intersection of the lists as a new list.\n\n\n  Examples:\n      intersection([1, 2, 3, 4, 5], [2, 3, 4]) ==> [2, 3]\n  */\nconst intersection = (a, b) => {\n    var res = [];\n    for (var i = 0; i < a.length; i++) {\n        if (b.indexOf(a[i])!= -1) {\n            res.push(a[i]);\n        }\n    }\n    return res;\n}\n\n/*Given a list of strings, return the length of the longest string in the list.\n\n\n  Examples:\n      length([1, 2, 3, 4, 5, 6, 7]) ==> 7\n  */\nconst length = (lst) => {\n    var max = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length > max) {\n            max = lst[i].length;\n        }\n    }\n    return max;\n}\n\n/*Given a list of strings, return the index of the longest string in the list.\n\n\n  Examples:\n      index([1, 2, 3, 4, 5, 6, 7]) ==> 4\n  */\nconst index = (lst) => {\n    var max = 0;\n    var maxIndex = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length > max) {\n            max = lst[i].length;\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\n/*Given a list of strings, return the list of the longest strings in the list.\n\n\n  Examples:\n      longest([1, 2, 3, 4, 5, 6, 7]) ==> [1, 2, 3, 4, 5, 6, 7]\n  */\nconst longest = (lst) => {\n    var max = 0;\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length > max) {\n            max = lst[i].length;\n            result = [lst[i]];\n        } else if (lst[i].length == max) {\n            result.push(lst[i]);\n        }\n    }\n    return result;\n}\n\n/*Given a list of strings, return the list of the shortest strings in the list.\n\n\n  Examples:\n      shortest([1, 2, 3, 4, 5, 6, 7]) ==> [1, 2, 3, 4, 5, 6, 7]\n  */\nconst shortest = (lst) => {\n    var min = 99999999;\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            result = [lst[i]];\n        } else if (lst[i].length == min) {\n            result.push(lst[i]);\n        }\n    }\n    return result;\n}\n\n/*Given two lists, return a list with the elements in the first list but not in the second list.\n\n\n  Examples:\n      notIn([1, 2, 3, 4, 5, 6, 7], [2, 3, 4]) ==> [1, 5, 6, 7]\n  */\nconst notIn = (a, b) => {\n    var result = [];\n    for (var i = 0; i < a.length; i++) {\n        if (b.indexOf(a[i]) == -1) {\n            result.push(a[i]);\n        }\n    }\n    return result;\n}\n\n/*Given a list of strings, return a list with the elements in the first list but not in the second list.\n\n\n  Examples:\n      notIn([1, 2, 3, 4, 5, 6, 7], [2, 3, 4]) ==> [1, 5, 6, 7]\n  */\nconst notIn2 = (a, b) => {\n    var result = [];\n    for (var i = 0; i < a.length; i++) {\n        if (b.indexOf(a[i]) == -"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let arr = s.split(' ')\n  let output = ''\n\n  for (let i = 0; i < arr.length; i += 1) {\n    output += `${arr[i]} `\n  }\n\n  return output\n}\n\nmodule.exports = antSihuffle\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let result = []\n  const row = lst.shift()\n  const col = row.shift()\n  if (row.length === 1) {\n    const cols = row[0].length\n    for (let i = 0; i < cols; i++) {\n      result.push([x, i])\n    }\n  } else {\n    for (let i = 0; i < row.length; i++) {\n      const cols = row[i].length\n      for (let j = 0; j < cols; j++) {\n        result.push([x, i, j])\n      }\n    }\n  }\n  return result\n}\n\nmodule.exports = getRow\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (!array) {\n    return array;\n  }\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const copy = array.slice(0);\n\n  let index = 0;\n  let sum = 0;\n\n  while (index < array.length - 1) {\n    sum = array[index] + array[index + 1];\n\n    if (sum % 2 === 1) {\n      array[index] = array[index + 1];\n      array[index + 1] = copy[index];\n    } else {\n      array[index] = copy[index];\n      array[index + 1] = array[index + 1];\n    }\n\n    index++;\n  }\n\n  return array;\n};\n\ndescribe('sortArray', () => {\n  it('sortArray([5]) => [5]', () => {\n    expect(sortArray([5])).toEqual([5]);\n  });\n\n  it('sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]', () => {\n    expect(sortArray([2, 4, 3, 0, 1, 5])).toEqual([0, 1, 2, 3, 4, 5]);\n  });\n\n  it('sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]', () => {\n    expect(sortArray([2, 4, 3, 0, 1, 5, 6])).toEqual([6, 5, 4, 3, 2, 1, 0]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  if(!s) throw new Error('Input string is not valid.')\n  if(s.length < 2) throw new Error('Input string is too short.')\n  \n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const num = alphabet.length - 1\n  const length = s.length\n\n  let str = ''\n  for(let i = 0; i < length; i++) {\n    str += alphabet[s.charCodeAt(i) - s.charCodeAt(length - i - 1) % num]\n  }\n\n  return str\n}\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  if(!s) throw new Error('Input string is not valid.')\n  if(s.length < 2) throw new Error('Input string is too short.')\n  \n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const num = alphabet.length - 1\n  const length = s.length\n\n  let str = ''\n  for(let i = 0; i < length; i++) {\n    str += alphabet[s.charCodeAt(length - i - 1) - s.charCodeAt(i) % num]\n  }\n\n  return str\n}\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst shift = (s) => {\n  if(!s) throw new Error('Input string is not valid.')\n  if(s.length < 2) throw new Error('Input string is too short.')\n\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const num = alphabet.length - 1\n  const length = s.length\n\n  let str = ''\n  for(let i = 0; i < length; i++) {\n    str += alphabet[s.charCodeAt(length - i - 1) - (s.charCodeAt(i) + num) % num]\n  }\n\n  return str\n}\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst shift2 = (s) => {\n  if(!s) throw new Error('Input string is not valid.')\n  if(s.length < 2) throw new Error('Input string is too short.')\n\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const num = alphabet.length - 1\n  const length = s.length\n\n  let str = ''\n  for(let i = 0; i < length; i++) {\n    str += alphabet[s.charCodeAt(i) - (s.charCodeAt(i) + num) % num]\n  }\n\n  return str\n}\n\nmodule.exports = {\n  encrypt,\n  decrypt,\n  shift,\n  shift2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\n/*\n  Write a function nextSmallset() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 5\n  nextSmallset([5, 1, 4, 3, 2]) == 5\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);\n}\n\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el!== last);\n}\n\nconst nextLargest = (lst) => {\n  const sorted = lst.sort();\n  if (sorted.length === 0) return null;\n  const last = sorted[sorted.length - 1];\n  return sorted.find(el => el > last);"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"?\" || S[i] === \".\" || S[i] === \"!\") {\n      count++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z;\n  } else {\n    return false;\n  }\n};\n\n// Test it out!\n\n// anyInt(3, 2, 2)\n// anyInt(3.6, -2.2, 2)\n// anyInt(5, 2, 7)\n// anyInt(3, 2, 2)\n// anyInt(3.6, -2.2, 1)\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const str = message.toUpperCase()\n  const vowel = /[AEIOU]/\n  const length = str.length\n  const output = []\n  let count = 0\n  while (count < length) {\n    let char = str[count]\n    let newChar = str[count]\n    if (vowel.test(char)) {\n      newChar = char.charAt(1)\n    }\n    output.push(newChar)\n    count = count + 1\n  }\n  return output.join('')\n}\n\nencode('test')\nencode('This is a message')\nencode('THIS IS A MESSAGE')\nencode('THIS IS A message')\nencode('This is a message')\nencode('This is a Message')\nencode('This is a mEsSAge')\nencode('This is a mEsSAGE')\nencode('This is a MESSAGE')\nencode('This is a message')\nencode('This is a message')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAge')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSAGE')\nencode('This is a mEsSA"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  const prime = (n) => {\n    const isPrime = (n) => {\n      const isEven = (n) => {\n        return n % 2 === 0? false : true;\n      }\n\n      let num = 3;\n      let isEven = false;\n      while (num <= Math.sqrt(n)) {\n        if (n % num === 0) {\n          return false;\n        }\n        num += 2;\n      }\n      return true;\n    }\n\n    return n === 2? true : isPrime(n);\n  };\n\n  const largest = (lst) => {\n    let result = 0;\n    lst.forEach((x) => {\n      result += largestPrime(x);\n    });\n    return result;\n  };\n\n  const largestPrime = (n) => {\n    let maxPrime = 0;\n    let count = 0;\n    while (true) {\n      if (prime(n)) {\n        count++;\n        if (count > maxPrime) {\n          maxPrime = count;\n        }\n        if (n === 1) {\n          break;\n        }\n        n -= 2;\n      } else {\n        break;\n      }\n    }\n    return maxPrime;\n  };\n\n  return largest(lst);\n};\n\nmodule.exports = ksjkasddk;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const dictCase = {}\n  const keys = Object.keys(dict)\n  keys.forEach(key => {\n    dictCase[key.toLowerCase()] = dict[key]\n  })\n  return Object.keys(dictCase).every(key => {\n    return (\n      dictCase[key.toUpperCase()] === dict[key]\n      || dictCase[key.toLowerCase()] === dict[key]\n    )\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const dictCase = {}\n  const keys = Object.keys(dict)\n  keys.forEach(key => {\n    dictCase[key.toLowerCase()] = dict[key]\n  })\n  return Object.keys(dictCase).every(key => {\n    return (\n      dictCase[key.toLowerCase()] === dict[key]\n      || dictCase[key.toUpperCase()] === dict[key]\n    )\n  })\n}\n\nconst dictCase = {\n  a: 'apple',\n  A: 'banana',\n  b: 'banana',\n  B: 'banana'\n}\n\nconsole.log(checkDictCase(dictCase))\n\nconst dictCase2 = {\n  \"Name\": \"John\",\n  \"Age\": \"36\",\n  \"City\": \"Houston\"\n}\n\nconsole.log(checkDictCase(dictCase2))\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n\n  const results = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      results.push(i);\n    }\n\n    i += 1;\n  }\n\n  return results;\n};\n\n/*\nImplement a function that takes an integer and returns a string representing the\nnumber in base 10.\nFor example:\n  base10(5) => \"5\"\n  base10(11) => \"1+1+1+1+1\"\n  base10(0) => \"\"\n  base10(20) => \"10+0+0+0+0\"\n*/\nconst base10 = (n) => {\n  if (n === 0) {\n    return \"\";\n  }\n\n  const numStr = n.toString();\n  const numChars = numStr.split(\"\").map(v => v === \"\"? 0 : v);\n  const base10Str = numChars.map((v, i) => {\n    if (i === numChars.length - 1) {\n      return v;\n    }\n\n    const isPrime = isPrime(v);\n    if (isPrime) {\n      return v;\n    }\n\n    return v + numChars[i + 1];\n  }).join(\"\");\n\n  return base10Str;\n};\n\n/*\nImplement a function that takes an integer and returns a string representing the\nnumber in base n.\nFor example:\n  baseN(5, 2) => \"101\"\n  baseN(11, 2) => \"1011\"\n  baseN(0, 2) => \"\"\n  baseN(20, 2) => \"10100\"\n*/\nconst baseN = (n, b) => {\n  if (n === 0 || b === 1) {\n    return \"\";\n  }\n\n  const baseNStr = n.toString(b);\n  const numChars = baseNStr.split(\"\").map(v => v === \"\"? 0 : v);\n  const baseNStr = numChars.map((v, i) => {\n    if (i === numChars.length - 1) {\n      return v;\n    }\n\n    const isPrime = isPrime(v);\n    if (isPrime) {\n      return v;\n    }\n\n    return v + baseNStr[i + 1];\n  }).join(\"\");\n\n  return baseNStr;\n};\n\nmodule.exports = {\n  countUpTo,\n  base10,\n  baseN\n};\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let ret = 0;\n  if (b < 0) {\n    let tmp = Math.abs(b);\n    for (let i = 0; i < tmp; i++) {\n      ret += Math.pow(a, tmp) * (Math.pow(-1, i) - 1);\n    }\n  } else {\n    for (let i = 0; i < Math.pow(a, b); i++) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  return s.split('').every((char) => char.match(/[A-Z]/))?\n    s.split('').filter((char, i) => i % 2 === 0).length : 0;\n}\n\nexport default countUpper;<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  // TODO: Use RegExp to ensure the number is a valid integer.\n  const number = parseInt(value, 10);\n  // TODO: Use RegExp to ensure that the number is a valid number.\n  if (number < 0) {\n    return -closestInetger(-number);\n  }\n  const floor = Math.floor(number);\n  const ceiling = Math.ceil(number);\n  // If the number is equidistant from the two numbers,\n  // round it away from zero.\n  if (number === floor || number === ceiling) {\n    return number;\n  } else {\n    return Math.abs(floor - number) < Math.abs(ceiling - number)? floor : ceiling;\n  }\n};\n\nexport { closestInetger };\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 1) return [1];\n  return [n].concat(makeAPile(n - 1));\n}\n\nexport default makeAPile(n);\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/(\\s+|,+)/g);\n  return words;\n};\n\n/*\n  Given an array of integers, return the maximum sum of contiguous sub-arrays.\n  \n  For example:\n  arrayToMaxSum([1, 2, 3, 4, 5]) == 10\n  arrayToMaxSum([1, 2, 3, 4]) == 6\n  arrayToMaxSum([1, 2, 3, 4, 5, 6]) == 21\n  */\nconst arrayToMaxSum = (a) => {\n  let sum = 0;\n  let maxSum = 0;\n  let i = 0;\n  \n  while (i < a.length - 1) {\n    sum = a[i] + a[i + 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n    i += 2;\n  }\n  \n  if (a.length % 2) {\n    sum = a[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  \n  return maxSum;\n};\n\n/*\n  Given a list of words, return the sum of the length of the longest string.\n  \n  For example:\n  wordsToLongestString([\"hi\", \"there\", \"my\", \"name\", \"is\", \"John\"]) == 14\n  wordsToLongestString([\"hi\", \"there\", \"my\", \"name\", \"is\", \"John\", \"hello\", \"world\"]) == 14\n  */\nconst wordsToLongestString = (s) => {\n  let longestStringLength = 0;\n  let i = 0;\n  \n  while (i < s.length) {\n    if (s[i].length > longestStringLength) {\n      longestStringLength = s[i].length;\n    }\n    i++;\n  }\n  \n  return longestStringLength;\n};\n\n/*\n  Given a list of words, return the sum of the length of the shortest string.\n  \n  For example:\n  wordsToShortestString([\"hi\", \"there\", \"my\", \"name\", \"is\", \"John\"]) == 5\n  wordsToShortestString([\"hi\", \"there\", \"my\", \"name\", \"is\", \"John\", \"hello\", \"world\"]) == 9\n  */\nconst wordsToShortestString = (s) => {\n  let shortestStringLength = 0;\n  let i = 0;\n  \n  while (i < s.length) {\n    if (s[i].length < shortestStringLength) {\n      shortestStringLength = s[i].length;\n    }\n    i++;\n  }\n  \n  return shortestStringLength;\n};\n\n/*\n  Given an array of strings, return the string which has the maximum number of\n  contiguous words.\n  \n  For example:\n  wordsToMaxContiguousString([\"hi\", \"there\", \"my\", \"name\", \"is\", \"John\", \"good\"]) == \"John\"\n  wordsToMaxContiguousString([\"hi\", \"there\", \"my\", \"name\", \"is\", \"John\", \"good\", \"hello\", \"world\"]) == \"John\"\n  */\nconst wordsToMaxContiguousString = (s) => {\n  let wordsLength = 0;\n  let maxContiguousString = \"\";\n  let i = 0;\n  \n  while (i < s.length) {\n    if (s[i].length > wordsLength) {\n      wordsLength = s[i].length;\n    }\n    i++;\n  }\n  \n  for (let j = 0; j < wordsLength; j++) {\n    let contiguousString = \"\";\n    let currentWord = \"\";\n    let j = 0;\n    \n    while (j < s.length) {\n      if (s[j].length >= j && s[j].length <= j + wordsLength) {\n        contiguousString += s[j];\n        currentWord += s[j];\n      }\n      j++;\n    }\n    \n    if (contiguousString.length > maxContiguousString.length) {\n      maxContiguousString = contiguousString;\n    }\n  }\n  \n  return maxContiguousString;\n};\n\n/*\n  Given a string, return the sum of the length of all words that are contained in\n  the string.\n  \n  For example:\n  stringToWordsContainedSum(\"hi there my name is John\") == 14\n  stringToWordsContainedSum(\"hi there my name is John hello world\") == 14\n  */\nconst stringToWordsContainedSum = (s) => {\n  let sum = 0;\n  let i = 0;\n  \n  while (i < s.length) {\n    let words = wordsString(s.substring(i));\n    sum += words.length;\n    i += words.length + 1;\n  }\n  \n  return sum;\n};\n\n/*\n  Given a string, return the sum of the length of all words that are not contained\n  in the string.\n  \n  For example:\n  stringToWordsNotContainedSum(\"hi there my name is John\") == 12\n  stringToWordsNotContainedSum(\"hi there my name is John hello world\") == 0\n  */\nconst stringToWordsNotContainedSum = (s) => {\n  let sum = 0;\n  let i = 0;\n  \n  while (i < s.length) {\n    let words = wordsString(s.substring(i));\n    sum += words.length;\n    i += words.length + 1;\n  }\n  \n  return sum;\n};\n\n/*\n  Given a string, return the sum of the length of all words that are contained in\n  the string and are not also contained in the other string.\n  \n  For example:\n  stringToWordsContainedNotContainedSum(\"hi there my name is John\") == 6\n  stringToWordsContainedNotContainedSum(\"hi there my name is John hello world\") == 0\n  */\nconst stringToWordsContainedNot"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = -1\n  for (let i = x; i <= y; i += 2) {\n    if (i > max) {\n      max = i\n    }\n  }\n  return max\n}\n\n// const chooseNum = (x, y) => {\n//   let max = -1\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   let max = -1\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   let max = -1\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\nconst chooseNum = (x, y) => {\n  for (let i = x; i <= y; i += 2) {\n    if (i > max) {\n      max = i\n    }\n  }\n  return max\n}\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   let max = -1\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\nconst chooseNum = (x, y) => {\n  let max = -1\n  for (let i = x; i <= y; i += 2) {\n    if (i > max) {\n      max = i\n    }\n  }\n  return max\n}\n\nconst chooseNum = (x, y) => {\n  for (let i = x; i <= y; i += 2) {\n    if (i > max) {\n      max = i\n    }\n  }\n  return max\n}\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x, y) => {\n//   for (let i = x; i <= y; i += 2) {\n//     if (i > max) {\n//       max = i\n//     }\n//   }\n//   return max\n// }\n\n// const chooseNum = (x,"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= m) {\n    return (Math.floor((n + m) / 2) + 'b');\n  }\n  return -1;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let unique = [];\n  for(let i = 0; i < x.length; i++) {\n    let temp = x[i];\n    while(temp >= 10) {\n      temp = temp - 10;\n    }\n    if(temp % 2 === 0) {\n      break;\n    } else {\n      unique.push(temp);\n    }\n  }\n  return unique.sort();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  const max = 9\n  const length = arr.length\n  if (length === 0) {\n    return []\n  }\n  const start = arr[0]\n  if (start === 1) {\n    return [max]\n  }\n  const min = start - 1\n  const range = max - min\n  if (range === 0) {\n    return [min]\n  }\n  const result = []\n  let i = 1\n  while (i < length) {\n    const cur = arr[i]\n    if (cur > min && cur <= max) {\n      result.push(cur)\n    }\n    i++\n  }\n  return result.reverse()\n}\n\nconst ybSort = (arr) => {\n  const length = arr.length\n  const sort = ybLength(arr)\n  if (length === 0) {\n    return []\n  }\n  const sortResult = sort.slice()\n  const result = []\n  let i = 1\n  while (i < length) {\n    const cur = arr[i]\n    const index = sortResult.indexOf(cur)\n    if (index === -1) {\n      return []\n    }\n    const tmp = arr[i]\n    arr[i] = sort[index]\n    arr[index] = tmp\n    i++\n  }\n  return arr\n}\n\nexport {\n  ybSort\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n      result.push(factorial(i));\n    } else {\n      result.push(i);\n      result.push(factorial(i) + sum(1, i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n < 0) {\n    throw new Error('factorial function needs a positive integer as a parameter');\n  }\n  return (n === 0)? 1 : n * factorial(n - 1);\n};\n\nconst sum = (from, to) => {\n  if (from > to) {\n    throw new Error('from must be less than or equal to to');\n  }\n  return to - from + 1;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns the nth number in the sequence.\n  The number of the first element is 1.\n  Example:\n  f(5) == 5\n  */\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns the nth number in the sequence.\n  The number of the first element is 1.\n  Example:\n  f(5) == 5\n  */\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i <= n / 2) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns the nth number in the sequence.\n  The number of the first element is 1.\n  Example:\n  f(5) == 5\n  */\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns the nth number in the sequence.\n  The number of the first element is 1.\n  Example:\n  f(5) == 5\n  */\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns the nth number in the sequence.\n  The number of the first element is 1.\n  Example:\n  f(5) == 5\n  */\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if (n < 0) {\n    throw new Error('f function needs a positive integer as a parameter');\n  }\n  return n;\n};\n\nconst f = (n) => {\n  if ("}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0, sum = 0, i = 0;\n  while (i < n) {\n    sum += 2 * (i + 1);\n    if (sum % 2 === 0) {\n      even += 1;\n    }\n    if (sum % 2!== 0) {\n      odd += 1;\n    }\n    i += 1;\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  const n = arr.length;\n  const d = (arr[i], n) => {\n    if (i === n) {\n      return 1;\n    }\n    return arr[i + 1] - arr[i];\n  };\n  const c = (i, j, n) => {\n    if (i === n) {\n      return 1;\n    }\n    return j - i + 1;\n  };\n  const nn = (i, j, n) => {\n    if (i === n) {\n      return 1;\n    }\n    return j - i;\n  };\n  const nnm = (i, j, n) => {\n    if (i === n) {\n      return 1;\n    }\n    return j - i + 1;\n  };\n  const nnmn = (i, j, n) => {\n    if (i === n) {\n      return 1;\n    }\n    return j - i + 1;\n  };\n  const nnmn = (i, j, n) => {\n    if (i === n) {\n      return 1;\n    }\n    return j - i;\n  };\n  const nnn = (i, j, n) => {\n    if (i === n) {\n      return 1;\n    }\n    return j - i;\n  };\n  const nnnn = (i, j, n) => {\n    if (i === n) {\n      return 1;\n    }\n    return j - i + 1;\n  };\n  const nnnnn = (i, j, n) => {\n    if (i === n) {\n      return 1;\n    }\n    return j - i + 1;\n  };\n  return arr.reduce((acc, x) => {\n    let n = 0;\n    if (x > 0) {\n      n = 0;\n      if (x < 10) {\n        n = 1;\n      } else if (x < 100) {\n        n = 2;\n      } else if (x < 1000) {\n        n = 3;\n      }\n      acc.push(n);\n    } else {\n      if (x > -10) {\n        n = -1;\n        if (x < -10) {\n          n = -2;\n        } else if (x < -100) {\n          n = -3;\n        } else if (x < -1000) {\n          n = -4;\n        }\n        acc.push(n);\n      }\n    }\n    return acc;\n  }, []);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if (!arr || arr.length === 0) return true\n    const dp = [[arr[0]], [arr[1]], [arr[2]]]\n    for (let i = 3; i < arr.length; i++) {\n        dp[0].push(arr[i])\n        dp[1].push(arr[i - 1])\n        dp[2].push(arr[i - 2])\n    }\n    for (let i = 3; i < dp.length; i++) {\n        if (dp[i - 1][0] <= dp[i][0] && dp[i][0] < dp[i - 1][1]) {\n            dp[i - 1].push(dp[i][0])\n            dp[i][0] = dp[i - 1][0]\n            dp[i - 1].shift()\n            dp[i].shift()\n        }\n    }\n    return dp[dp.length - 1][0] <= dp[dp.length - 2][0]\n}\n\nconsole.log(moveOneBall([3, 5, 4, 1, 2]))\nconsole.log(moveOneBall([3, 4, 5, 1, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n    const len = lst1.length;\n    let i = 0;\n    while (i < len) {\n        if (lst1[i] % 2!== 0) {\n            return 'NO';\n        }\n        if (lst2[i] % 2!== 0) {\n            return 'NO';\n        }\n        if (lst1[i]!== lst2[i]) {\n            return 'NO';\n        }\n        i++;\n    }\n    return 'YES';\n};\n\nxechange([1, 2, 3, 4], [1, 2, 3, 4]);\nxechange([1, 2, 3, 4], [1, 5, 3, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(\" \")\n  const result = {}\n  \n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i]\n    let count = result[letter]\n    if (count === undefined) {\n      count = 0\n    }\n    result[letter] = count + 1\n  }\n\n  return result\n}\n\nconsole.log(histogram(\"a b c a b\"))\n\n/*\n  Given a string representing a space separated list of numbers, return a list of the numbers\n  in ascending order. The number may be preceded by a + or - sign, and the list may be\n  separated by commas.\n\n  Examples:\n  sortedList(\"1, 2, 3, 4, -5, -1\") == [1, 2, 3, 4, -5, -1]\n  sortedList(\"-1, -2, -3, 1, 2, 3\") == [-1, -2, -3, 1, 2, 3]\n  sortedList(\"1, 2, 3, 4, -5, -1, -2\") == [1, 2, 3, 4, -5, -1, -2]\n  */\nconst sortedList = (test) => {\n  const numbers = test.split(\" \")\n  const result = []\n\n  for (let i = 0; i < numbers.length; i++) {\n    let number = parseInt(numbers[i])\n    if (number < 0) {\n      number = -number\n      result.unshift(number)\n    } else {\n      result.push(number)\n    }\n  }\n\n  return result\n}\n\nconsole.log(sortedList(\"1, 2, 3, 4, -5, -1, -2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  const cLen = c.length\n  const len = s.length\n  const result = []\n\n  for (let i = 0; i < len; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i])\n    }\n  }\n\n  if (result.length === len) {\n    return (result.join(''), true)\n  } else {\n    return (result.join(''), false)\n  }\n}\n\nconst isPalindrome = (str) => {\n  let left = str.split('')\n  let right = left.reverse()\n\n  for (let i = 0; i < left.length / 2; i++) {\n    if (left[i]!== right[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconst main = (s, c) => {\n  const result = reveresDelete(s, c)\n\n  if (isPalindrome(result.join(''))) {\n    return result\n  }\n\n  return (null, false)\n}\n\nconsole.log(main('abcdef', 'b'))\nconsole.log(main('abcdef', 'ab'))\nconsole.log(main('abcdedcba', 'ab'))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.reduce((acc, v) => {\n    const isOdd = (acc, i) => {\n      const digits = i.split('');\n      const num = digits.reduce((prev, curr, idx) => {\n        return prev + (curr === '1'? 1 : 0);\n      }, 0);\n      return num % 2 === 1;\n    };\n\n    const isEven = (acc, i) => {\n      const digits = i.split('');\n      const num = digits.reduce((prev, curr, idx) => {\n        return prev + (curr === '1'? 1 : 0);\n      }, 0);\n      return num % 2 === 0;\n    };\n\n    if (isEven(acc, v)) {\n      return [`the number of odd elements ${acc} the str4ng ${v} of the ${acc}put.`];\n    } else {\n      return [`the number of odd elements ${acc}n the str1ng ${v} of the ${acc}put.`];\n    }\n  }, []);\n};\n\nexport {oddCount};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let result = Number.POSITIVE_INFINITY;\n  let sum = 0;\n  let index = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < result) {\n      result = sum;\n      index = i;\n    }\n  }\n  return result;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let dp = [0]\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                dp[i] += capacity\n            }\n        }\n    }\n\n    let cur = 0\n    let n = grid.length\n    while (cur < dp.length) {\n        for (let i = 0; i < n; i++) {\n            if (dp[i] > 0) {\n                dp[i]--\n                dp[i] = dp[i] > 0? dp[i] : 0\n                cur++\n            }\n        }\n        n--\n    }\n    return dp\n}\n\n// Time:  O(n)\n// Space: O(1)\n// http://www.geeksforgeeks.org/count-ways-to-fill-buckets-using-buckets/\nconst fillWithBuckets = (grid, capacity) => {\n    let dp = [0]\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                dp[i] += capacity\n            }\n        }\n    }\n\n    let cur = 0\n    let n = grid.length\n    while (cur < dp.length) {\n        for (let i = 0; i < n; i++) {\n            if (dp[i] > 0) {\n                dp[i]--\n                dp[i] = dp[i] > 0? dp[i] : 0\n                cur++\n            }\n        }\n        n--\n    }\n    return dp\n}\n\n// Time:  O(n)\n// Space: O(1)\n// https://www.hackerearth.com/practice/algorithms/leetcode/algorithm-fill-the-buckets/\nconst fillWithBuckets2 = (grid, capacity) => {\n    let dp = [0]\n    let bucketCapacity = capacity\n    let numOfBuckets = 1\n\n    for (let i = 0; i < grid.length; i++) {\n        dp[i] = 0\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                dp[i] += capacity\n                bucketCapacity -= capacity\n                numOfBuckets += 1\n            }\n        }\n    }\n\n    let cur = 0\n    while (cur < dp.length) {\n        for (let i = 0; i < grid.length; i++) {\n            if (dp[i] > 0) {\n                dp[i]--\n                dp[i] = dp[i] > 0? dp[i] : 0\n                cur++\n            }\n        }\n        bucketCapacity -= bucketCapacity\n        numOfBuckets -= 1\n    }\n\n    return numOfBuckets\n}\n\n// Time:  O(n)\n// Space: O(n)\n// https://www.hackerearth.com/practice/algorithms/leetcode/algorithm-fill-the-buckets/\nconst fillWithBuckets3 = (grid, capacity) => {\n    let dp = [0]\n    let numOfBuckets = 1\n    let bucketCapacity = capacity\n\n    for (let i = 0; i < grid.length; i++) {\n        dp[i] = 0\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                dp[i] += capacity\n                bucketCapacity -= capacity\n                numOfBuckets += 1\n            }\n        }\n    }\n\n    let cur = 0\n    while (cur < dp.length) {\n        for (let i = 0; i < grid.length; i++) {\n            if (dp[i] > 0) {\n                dp[i]--\n                dp[i] = dp[i] > 0? dp[i] : 0\n                cur++\n            }\n        }\n        bucketCapacity -= bucketCapacity\n        numOfBuckets -= 1\n    }\n\n    return numOfBuckets\n}\n\n// Time:  O(n)\n// Space: O(1)\nconst fillWithBuckets4 = (grid, capacity) => {\n    let dp = [0]\n    let numOfBuckets = 1\n\n    for (let i = 0; i < grid.length; i++) {\n        dp[i] = 0\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                dp[i] += capacity\n            }\n        }\n    }\n\n    let cur = 0\n    while (cur < dp.length) {\n        for (let i = 0; i <"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  if (arr.length === 0) {\n    return arr\n  }\n\n  let sortedArr = []\n\n  arr.forEach((element, index) => {\n    let currentBit = element.toString(2)\n    let lastIndex = sortedArr.length - 1\n    while (sortedArr[lastIndex] > currentBit) {\n      lastIndex--\n    }\n    sortedArr.splice(lastIndex + 1, 0, element)\n  })\n\n  return sortedArr\n}\n\ndescribe('sortArray', () => {\n  it('should sort array in ascending order', () => {\n    expect(sortArray([1, 5, 2, 3, 4])).toEqual([1, 2, 3, 4, 5])\n  })\n\n  it('should sort array in descending order', () => {\n    expect(sortArray([-2, -3, -4, -5, -6])).toEqual([-6, -5, -4, -3, -2])\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n    const words = s.split(\" \")\n    const result = []\n\n    words.forEach(word => {\n        if (word.length === n) {\n            result.push(word)\n        } else if (word.length > n) {\n            result = result.concat(selectWdors(word.substring(n), n))\n        }\n    })\n\n    return result\n}\n\n/*Given a list of words and a natural number n, your task is to count the \n  number of words that contain exactly n consonants.\n  If the number of words is less than n, return 0.\n  If the number of words is equal to n, return the number of words that contain\n  exactly n consonants.\n  If the number of words is greater than n, return the number of words that\n  contain exactly n consonants in the first n consonants.\n  Examples:\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 2) ==> 2\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 3) ==> 2\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 4) ==> 1\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 5) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 6) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 7) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 8) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 9) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 10) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 11) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 12) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 13) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 14) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 15) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 16) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 17) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 18) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 19) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 20) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 21) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 22) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 23) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 24) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 25) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 26) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 27) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 28) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 29) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 30) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 31) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 32) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 33) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 34) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 35) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 36) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 37) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 38) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 39) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 40) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 41) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 42) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 43) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 44) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 45) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 46) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 47) ==> 0\n  countConsonants([\"cat\", \"hat\", \"dad\", \"mad\"], 48) ==> 0\n  countCons"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  if(!word || word.length <= 1) {\n    return '';\n  }\n  const wordArray = word.split(' ');\n  const wordLength = wordArray.length;\n  let leftLength = 0;\n  let rightLength = wordLength - 1;\n  let leftIndex = 0;\n  let rightIndex = rightLength;\n  while (leftIndex <= rightIndex) {\n    const left = wordArray[leftIndex];\n    const right = wordArray[rightIndex];\n    if (isVowel(left) &&!isVowel(right)) {\n      return left;\n    }\n    if (!isVowel(left) && isVowel(right)) {\n      return right;\n    }\n    if (isVowel(left) && isVowel(right)) {\n      leftLength = leftIndex;\n      rightLength = rightIndex;\n    }\n    leftIndex++;\n    rightIndex--;\n  }\n  return '';\n}\n\nfunction isVowel(char) {\n  return char.toUpperCase() === char.toLowerCase();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < lst.length && j < lst.length) {\n    if (lst[i] === '(') {\n      result.push(lst[j])\n      i++\n      j++\n    } else if (lst[i] === ')') {\n      if (result.length === 0) {\n        result.push(lst[j])\n        i++\n        j++\n      } else {\n        if (result[result.length - 1] === '(') {\n          result.pop()\n          j++\n        }\n      }\n    }\n  }\n  return result.length === 0\n}\n\nconsole.log(matchParens(['()', '())']))\nconsole.log(matchParens(['())']))\nconsole.log(matchParens(['(())']))\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  let result = [],\n      temp = 0;\n  while (arr.length > 0) {\n    temp = arr.shift();\n    if (result.length === k) {\n      result.unshift(temp);\n    } else if (result.length < k) {\n      result.push(temp);\n    }\n  }\n  return result;\n}\n\nexport {maxmium};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const oddSum = (lst, pos) => lst[pos] * 2\n  const evenSum = (lst, pos) => lst[pos]\n  const oddPos = (lst) => {\n    let pos = 0\n    while (pos < lst.length) {\n      if (oddSum(lst, pos)) {\n        break\n      }\n      pos += 1\n    }\n    return pos\n  }\n  const evenPos = (lst) => {\n    let pos = lst.length - 1\n    while (pos >= 0) {\n      if (evenSum(lst, pos)) {\n        break\n      }\n      pos -= 1\n    }\n    return pos\n  }\n  return sum(lst.slice(oddPos(lst), evenPos(lst)))\n}\n\nfunction sum(lst) {\n  return lst.reduce((acc, elem) => acc + elem, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1])) // 12\nconsole.log(solution([3, 3, 3, 3, 3])) // 9\nconsole.log(solution([30, 13, 24, 321])) //0<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const [start, end] = [1, k];\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[end]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const [start, end] = [1, k];\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[end]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2] && current === arr[k + 3]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2] && current === arr[k + 3] && current === arr[k + 4]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2] && current === arr[k + 3] && current === arr[k + 4] && current === arr[k + 5]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2] && current === arr[k + 3] && current === arr[k + 4] && current === arr[k + 5] && current === arr[k + 6]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2] && current === arr[k + 3] && current === arr[k + 4] && current === arr[k + 5] && current === arr[k + 6] && current === arr[k + 7]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2] && current === arr[k + 3] && current === arr[k + 4] && current === arr[k + 5] && current === arr[k + 6] && current === arr[k + 7] && current === arr[k + 8]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2] && current === arr[k + 3] && current === arr[k + 4] && current === arr[k + 5] && current === arr[k + 6] && current === arr[k + 7] && current === arr[k + 8] && current === arr[k + 9]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = arr.reduce((carry, current) => {\n    if (current === arr[k] && current === arr[k + 1] && current === arr[k + 2] && current === arr[k + 3] && current === arr[k + 4] && current === arr[k + 5] && current === arr[k + 6] && current === arr[k + 7] && current === arr[k + 8] && current === arr[k + 9] && current === arr[k + 10]) {\n      return carry + current;\n    }\n    return carry;\n  }, 0);\n  return sum;\n};\n\nconst add"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n, odd = []) => {\n    if (n === 1) {\n      return odd;\n    }\n    const p = n;\n    while (p!== 1) {\n      if (p % 2 === 1) {\n        odd.push(p);\n        p = p / 2;\n      } else {\n        p = (p - 1) / 2;\n      }\n    }\n    return collatz(n, odd);\n  };\n  return collatz(n);\n};\n\nconst collatz = (n, odd = []) => {\n  if (n === 1) {\n    return odd;\n  }\n  const p = n;\n  while (p!== 1) {\n    if (p % 2 === 1) {\n      odd.push(p);\n      p = p / 2;\n    } else {\n      p = (p - 1) / 2;\n    }\n  }\n  return collatz(n, odd);\n};\n\nconst oddCollatz = (n) => {\n  const odd = [];\n  collatz(n, odd);\n  return odd;\n};\n\nconst test = () => {\n  console.log(oddCollatz(1));\n  console.log(oddCollatz(2));\n  console.log(oddCollatz(3));\n  console.log(oddCollatz(4));\n  console.log(oddCollatz(5));\n  console.log(oddCollatz(6));\n  console.log(oddCollatz(7));\n  console.log(oddCollatz(8));\n  console.log(oddCollatz(9));\n  console.log(oddCollatz(10));\n  console.log(oddCollatz(11));\n  console.log(oddCollatz(12));\n  console.log(oddCollatz(13));\n  console.log(oddCollatz(14));\n  console.log(oddCollatz(15));\n  console.log(oddCollatz(16));\n  console.log(oddCollatz(17));\n  console.log(oddCollatz(18));\n  console.log(oddCollatz(19));\n  console.log(oddCollatz(20));\n  console.log(oddCollatz(21));\n  console.log(oddCollatz(22));\n  console.log(oddCollatz(23));\n  console.log(oddCollatz(24));\n  console.log(oddCollatz(25));\n  console.log(oddCollatz(26));\n  console.log(oddCollatz(27));\n  console.log(oddCollatz(28));\n  console.log(oddCollatz(29));\n  console.log(oddCollatz(30));\n  console.log(oddCollatz(31));\n  console.log(oddCollatz(32));\n  console.log(oddCollatz(33));\n  console.log(oddCollatz(34));\n  console.log(oddCollatz(35));\n  console.log(oddCollatz(36));\n  console.log(oddCollatz(37));\n  console.log(oddCollatz(38));\n  console.log(oddCollatz(39));\n  console.log(oddCollatz(40));\n  console.log(oddCollatz(41));\n  console.log(oddCollatz(42));\n  console.log(oddCollatz(43));\n  console.log(oddCollatz(44));\n  console.log(oddCollatz(45));\n  console.log(oddCollatz(46));\n  console.log(oddCollatz(47));\n  console.log(oddCollatz(48));\n  console.log(oddCollatz(49));\n  console.log(oddCollatz(50));\n  console.log(oddCollatz(51));\n  console.log(oddCollatz(52));\n  console.log(oddCollatz(53));\n  console.log(oddCollatz(54));\n  console.log(oddCollatz(55));\n  console.log(oddCollatz(56));\n  console.log(oddCollatz(57));\n  console.log(oddCollatz(58));\n  console.log(oddCollatz(59));\n  console.log(oddCollatz(60));\n  console.log(oddCollatz(61));\n  console.log(oddCollatz(62));\n  console.log(oddCollatz(63));\n  console.log(oddCollatz(64));\n  console.log(oddCollatz(65));\n  console.log(oddCollatz(66));\n  console.log(oddCollatz(67));\n  console.log(oddCollatz(68));\n  console.log(oddCollatz(69));\n  console.log(oddCollatz(70));\n  console.log(oddCollatz(71));\n  console.log(oddCollatz(72));\n  console.log(oddCollatz(73));\n  console.log(oddCollatz(74));\n  console.log(oddCollatz(75));\n  console.log(oddCollatz(76));\n  console.log(oddCollatz(77));\n  console.log(oddCollatz(78));\n  console.log(oddCollatz(79));\n  console.log(oddCollatz(80));\n  console.log(oddCollatz(81));\n  console.log(oddCollatz(82));\n  console.log(oddCollatz(83));\n  console.log(oddCollatz(84));\n  console.log(oddCollatz(85));\n  console.log(oddCollatz(86));\n  console."}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateParts = date.split('-');\n  let year = parseInt(dateParts[0]);\n  let month = parseInt(dateParts[1]);\n  let day = parseInt(dateParts[2]);\n  if (isNaN(year) || isNaN(month) || isNaN(day)) {\n    return false;\n  }\n  return (year >= 1900 && year <= 2020 && month >= 1 && month <= 12 && day >= 1 && day <= 31) || (year >= 2000 && year <= 2040 && month >= 1 && month <= 12 && day >= 1 && day <= 30) || (year >= 2000 && year <= 2040 && month >= 1 && month <= 12 && day >= 1 && day <= 29);\n};\n\n/*\n  Write a function which returns the sum of all the numbers in the array.\n  It should return -1 if the array is empty.\n\n  example: sum([1,2,3,4]) => 10\n*/\nconst sum = (nums) => {\n  if (!nums || nums.length === 0) {\n    return -1;\n  }\n  return nums.reduce((pre, cur) => pre + cur, 0);\n};\n\n/*\n  Write a function which returns the difference between the first two numbers in the array.\n  It should return -1 if the array is empty.\n\n  example: diff([1,2,3,4]) => 1\n*/\nconst diff = (nums) => {\n  if (!nums || nums.length < 2) {\n    return -1;\n  }\n  return nums[1] - nums[0];\n};\n\n/*\n  Write a function which returns the product of the first two numbers in the array.\n  It should return -1 if the array is empty.\n\n  example: product([1,2,3,4]) => 12\n*/\nconst product = (nums) => {\n  if (!nums || nums.length < 2) {\n    return -1;\n  }\n  return nums[0] * nums[1];\n};\n\nconst solution = (input) => {\n  let nums = input.split(' ');\n  if (nums.length < 3) {\n    return -1;\n  }\n  return sum(nums.slice(1, 3)) - diff(nums.slice(1, 3));\n};\n\nconsole.log(solution('3 5 1 5 3'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(\" \");\n  let split = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let word_splits = word.split(\"\");\n    for (let j = 0; j < word_splits.length; j++) {\n      split.push(word_splits[j]);\n    }\n  }\n  return split;\n};\n\n/*\n  Given a string of words, return a list of words split on commas ',' if no commas exists you should return the number of\n  lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsByCommas = (txt) => {\n  let words = txt.split(\",\");\n  let split = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let word_splits = word.split(\"\");\n    for (let j = 0; j < word_splits.length; j++) {\n      split.push(word_splits[j]);\n    }\n  }\n  return split;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split\n  on lower-case letters 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l''m' 'n' 'o' 'p' 'q' 'r''s' 't' 'u' 'v' 'w' 'x' 'y' 'z'\n  Example\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWordsByLowerCase = (txt) => {\n  let words = txt.split(\" \");\n  let split = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let word_splits = word.split(\"\");\n    for (let j = 0; j < word_splits.length; j++) {\n      split.push(word_splits[j]);\n    }\n  }\n  return split;\n};\n\n/*\n  Given a string of words, return a list of words split on lower-case letters 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l''m' 'n' 'o' 'p' 'q' 'r''s' 't' 'u' 'v' 'w' 'x' 'y' 'z'\n  Example\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWordsByUpperCase = (txt) => {\n  let words = txt.split(\" \");\n  let split = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let word_splits = word.split(\"\");\n    for (let j = 0; j < word_splits.length; j++) {\n      split.push(word_splits[j]);\n    }\n  }\n  return split;\n};\n\n/*\n  Given a string of words, return a list of words split on upper-case letters 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z'\n  Example\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWordsByUpperCaseWithNumbers = (txt) => {\n  let words = txt.split(\" \");\n  let split = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let word_splits = word.split(\"\");\n    for (let j = 0; j < word_splits.length; j++) {\n      split.push(word_splits[j]);\n    }\n  }\n  return split;\n};\n\n/*\n  Given a string of words, return a list of words split on lower-case and upper-case letters 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l''m' 'n' 'o' 'p' 'q' 'r''s' 't' 'u' 'v' 'w' 'x' 'y' 'z'\n  Example\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWordsByUpperCaseAndLowerCase = (txt) => {\n  let words = txt.split"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  //console.log(lst);\n  const lstSize = lst.length;\n  const lstLast = lst[lstSize - 1];\n  const lstPrev = lst[0];\n  //console.log(lstPrev);\n  for (let i = 1; i < lstSize; i++) {\n    const lstCur = lst[i];\n    //console.log(lstPrev);\n    //console.log(lstCur);\n    //console.log(lstLast);\n    if (lstCur <= lstLast) {\n      return false;\n    }\n    lstPrev = lstCur;\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  const lstSize = lst.length;\n  for (let i = 1; i < lstSize; i++) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  const lstSize = lst.length;\n  let prev = lst[0];\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= prev) {\n      return false;\n    }\n    prev = cur;\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  const lstSize = lst.length;\n  let prev = lst[0];\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= prev) {\n      return false;\n    }\n    prev = cur;\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  const lstSize = lst.length;\n  let prev = lst[0];\n  let cur = lst[1];\n  for (let i = 2; i < lstSize; i++) {\n    if (cur <= prev) {\n      return false;\n    }\n    prev = cur;\n    cur = lst[i];\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  const lstSize = lst.length;\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  const lstSize = lst.length;\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  const lstSize = lst.length;\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  const lstSize = lst.length;\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  const lstSize = lst.length;\n  let prev = lst[0];\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= prev) {\n      return false;\n    }\n    prev = cur;\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  const lstSize = lst.length;\n  let prev = lst[0];\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= prev) {\n      return false;\n    }\n    prev = cur;\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  const lstSize = lst.length;\n  let prev = lst[0];\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= prev) {\n      return false;\n    }\n    prev = cur;\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  const lstSize = lst.length;\n  let prev = lst[0];\n  for (let i = 1; i < lstSize; i++) {\n    const cur = lst[i];\n    if (cur <= prev) {\n      return false;\n    }\n    prev = cur;\n  }\n  return true;\n};\n\nconst isSorted14 = (lst) => {\n  const lstSize = lst.length;\n  let"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start = interval1[0]\n  let end = interval1[1]\n  let start2 = interval2[0]\n  let end2 = interval2[1]\n  let intersect = end - start\n  let intersect2 = end2 - start2\n  if (start >= end2 || start2 >= end) {\n    return \"NO\"\n  }\n  if (intersect2 === 0) {\n    return \"NO\"\n  }\n  if (intersect2 < 0) {\n    return \"YES\"\n  }\n  if (intersect2 % 2 === 0) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\n// [output]\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += Math.pow(arr[i], 2);\n    } else if (arr[i] < 0) {\n      result -= Math.pow(arr[i], 2);\n    }\n  }\n  return result;\n};\n\nconst sign = (x) => {\n  if (x < 0) {\n    return -1;\n  } else if (x > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconsole.log(prodSigsn([1, 2, 2, -4]));\nconsole.log(prodSigsn([0, 1]));\nconsole.log(prodSigsn([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  // k == 1, we can start from any cell and get the answer.\n  if (k === 1) return [grid[0][0]];\n\n  // find the minimum path in the first row.\n  const row = findMinPath(grid[0], 1, 0, cols);\n  const firstRow = row[0];\n\n  // the minimum path in the first row is not unique.\n  if (firstRow.length!== k) return [];\n\n  // find the minimum path in the last row.\n  const lastRow = findMinPath(grid[rows - 1], 1, rows - 1, cols);\n  const lastRow = lastRow[lastRow.length - k - 1];\n\n  // combine the last row and the first row.\n  const answer = firstRow.concat(lastRow);\n\n  // sort the answer.\n  return answer.sort();\n};\n\n// find the minimum path in the first row.\nconst findMinPath = (grid, k, row, cols) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  // for each column, we can start from any cell and get the answer.\n  const answers = [];\n  for (let col = 0; col < cols; col++) {\n    // the path is already unique.\n    if (k === 1) {\n      answers.push(grid[row][col]);\n      continue;\n    }\n\n    const path = findMinPath(grid, k - 1, row, col);\n    answers = answers.concat(path);\n  }\n\n  return answers;\n};\n\nmodule.exports = minPath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  let sequence = []\n  let index = 1\n\n  while (index <= n) {\n    sequence.push(1)\n    if (index % 2 == 0) {\n      sequence.push(2)\n    }\n    sequence.push(3)\n\n    index += 1\n  }\n\n  return sequence\n}\n\nconsole.log(tir(5))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  let current = n;\n  while (current > 0) {\n    product *= current % 10;\n    current = Math.floor(current / 10);\n  }\n  return product;\n};\n\n// console.log(digits(1));\n// console.log(digits(4));\n// console.log(digits(235));\n\nconst countDigits = (n) => {\n  let count = 0;\n  while (n > 0) {\n    count += 1;\n    n -= n % 10;\n  }\n  return count;\n};\n\n// console.log(countDigits(5));\n// console.log(countDigits(11));\n// console.log(countDigits(101));\n\nconst allDigits = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return product;\n};\n\n// console.log(allDigits(5));\n// console.log(allDigits(11));\n// console.log(allDigits(101));\n\nconst countDigits2 = (n) => {\n  let count = 0;\n  while (n > 0) {\n    count += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return count;\n};\n\n// console.log(countDigits2(5));\n// console.log(countDigits2(11));\n// console.log(countDigits2(101));\n\nconst allDigits2 = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product *= n;\n    n = Math.floor(n / 10);\n  }\n  return product;\n};\n\n// console.log(allDigits2(5));\n// console.log(allDigits2(11));\n// console.log(allDigits2(101));\n\nconst sum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n// console.log(sum(5));\n// console.log(sum(11));\n// console.log(sum(101));\n\nconst allDigits3 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n// console.log(allDigits3(5));\n// console.log(allDigits3(11));\n// console.log(allDigits3(101));\n\nconst allDigits4 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n// console.log(allDigits4(5));\n// console.log(allDigits4(11));\n// console.log(allDigits4(101));\n\nconst allDigits5 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 100);\n  }\n  return sum;\n};\n\n// console.log(allDigits5(5));\n// console.log(allDigits5(11));\n// console.log(allDigits5(101));\n\nconst allDigits6 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 1000);\n  }\n  return sum;\n};\n\n// console.log(allDigits6(5));\n// console.log(allDigits6(11));\n// console.log(allDigits6(101));\n\nconst allDigits7 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 10000);\n  }\n  return sum;\n};\n\n// console.log(allDigits7(5));\n// console.log(allDigits7(11));\n// console.log(allDigits7(101));\n\nconst allDigits8 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 100000);\n  }\n  return sum;\n};\n\n// console.log(allDigits8(5));\n// console.log(allDigits8(11));\n// console.log(allDigits8(101));\n\nconst allDigits9 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 1000000);\n  }\n  return sum;\n};\n\n// console.log(allDigits9(5));\n// console.log(allDigits9(11));\n// console.log(allDigits9(101));\n\nconst allDigits10 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 10000000);\n  }\n  return sum;\n};\n\n// console.log(allDigits10(5));\n// console.log(allDigits10(11));\n// console.log(allDigits10(101));\n\nconst allDigits11 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n = Math.floor(n / 100000000);\n  }\n  return sum;\n};\n\n// console.log(allDigits11(5));\n// console.log(allDigits11(11));\n// console.log(allDigits11(101));\n\nconst allDigits12 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    "}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let bracket = 0, bracketLevel = 0, current = '', next = '';\n  let openBrackets = [];\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      if (bracketLevel === 0) {\n        openBrackets.push(i);\n      }\n      bracketLevel += 1;\n    } else if (string[i] === ']') {\n      bracketLevel -= 1;\n      if (bracketLevel === 0) {\n        openBrackets.pop();\n      }\n    }\n    next = string[i + 1];\n    if (next === '[') {\n      bracket += 1;\n    } else if (next === ']') {\n      bracket -= 1;\n    }\n    current = string[i];\n  }\n\n  return openBrackets.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.map(x => Math.pow(x, 2)).reduce((a, b) => a + b, 0);\n};\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let chars = txt.split(\" \")\n  let char = chars[chars.length - 1]\n  return (char.match(/[a-zA-Z]+/g) === null)\n}\n\n// Function to check if a given string contains a letter\nconst containsALetter = (txt) => {\n  let chars = txt.split(\" \")\n  let char = chars[chars.length - 1]\n  return (char.match(/[a-zA-Z]+/g)!== null)\n}\n\nconst getText = (txt) => {\n  let chars = txt.split(\" \")\n  let text = \"\"\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i]\n    text += char.toLowerCase()\n  }\n  return text\n}\n\n// Function to check if a given string is a valid number\nconst isNumber = (txt) => {\n  return (/^(\\-?\\d+(\\.\\d+)?|\\.\\d+)([eE][\\-+]?\\d+)?$/.test(txt))\n}\n\nconst getNumber = (txt) => {\n  let chars = txt.split(\" \")\n  let num = \"\"\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i]\n    num += char\n  }\n  return num\n}\n\n// Function to check if a given string is a valid number\nconst isInteger = (txt) => {\n  return (/^\\-?\\d+$/.test(txt))\n}\n\nconst getInteger = (txt) => {\n  let chars = txt.split(\" \")\n  let num = \"\"\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i]\n    num += char\n  }\n  return num\n}\n\nconst isAlphabetic = (txt) => {\n  return (/[a-zA-Z]+/.test(txt))\n}\n\nconst isAlphaNum = (txt) => {\n  return (/[a-zA-Z0-9]+/.test(txt))\n}\n\n// Function to check if a given string contains a letter\nconst isALetter = (txt) => {\n  return (/[a-zA-Z]+/.test(txt))\n}\n\n// Function to check if a given string contains a number\nconst isANumber = (txt) => {\n  return (/\\d+/.test(txt))\n}\n\n// Function to check if a given string contains a letter\nconst isALetterOrANumber = (txt) => {\n  return (isALetter(txt) || isANumber(txt))\n}\n\nconst isALetterOrANumberOrSpace = (txt) => {\n  return (isALetter(txt) || isANumber(txt) || isSpace(txt))\n}\n\nconst isSpace = (txt) => {\n  return (/\\s+/.test(txt))\n}\n\n// Function to check if a given string is an alpha numeric string\nconst isAlphaNumeric = (txt) => {\n  return (/[a-zA-Z0-9]+/.test(txt))\n}\n\nconst isAlphaNumericOrSpace = (txt) => {\n  return (isAlphaNumeric(txt) || isSpace(txt))\n}\n\n// Function to check if a given string contains any of the given words\nconst containsWord = (txt, words) => {\n  let chars = txt.split(\" \")\n  let word = \"\"\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i]\n    word += char\n  }\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    if (word === \"\") {\n      return true\n    } else if (word === word.toLowerCase()) {\n      return true\n    }\n  }\n  return false\n}\n\n// Function to check if a given string contains any of the given words\nconst containsWordIgnoreCase = (txt, words) => {\n  let chars = txt.split(\" \")\n  let word = \"\"\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i]\n    word += char\n  }\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    if (word === \"\") {\n      return true\n    } else if (word === word.toLowerCase()) {\n      return true\n    }\n  }\n  return false\n}\n\n// Function to check if a given string contains any of the given words\nconst containsWordOrSpace = (txt, words) => {\n  let chars = txt.split(\" \")\n  let word = \"\"\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i]\n    word += char\n  }\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    if (word === \"\") {\n      return true\n    } else if (word === word.toLowerCase()) {\n      return true\n    }\n  }\n  return false\n}\n\n// Function to check if a given string contains any of the given words\nconst containsWordOrSpaceIgnoreCase = (txt, words) => {\n  let chars = txt.split(\" \")\n  let word = \"\"\n  for (let i = 0; i < chars.length; i++) {\n    let char = chars[i]\n    word += char\n  }\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    if (word === \"\") {\n      return true\n    } else if (word === word.toLower"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  arr.forEach((item, i) => {\n    if (index == -1) {\n      if (i > 0) {\n        if (arr[i - 1] < item) {\n          index = i;\n        }\n      }\n    } else {\n      if (arr[i] < item) {\n        index = i;\n      }\n    }\n  });\n  return index;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the largest\n  element that is less than the given target.\n  \n  Examples:\n  findLargerIndex([1,2,3], 3) = 1\n  findLargerIndex([1,2,3], 4) = 2\n  findLargerIndex([1,2,3], 5) = 3\n  findLargerIndex([1,2,3], 6) = -1\n  */\nconst findLargerIndex = (arr, target) => {\n  let index = -1;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] >= target) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the largest\n  element that is less than or equal to the given target.\n  \n  Examples:\n  findLargerIndex([1,2,3,4], 3) = 1\n  findLargerIndex([1,2,3,4], 4) = 2\n  findLargerIndex([1,2,3,4], 5) = 3\n  findLargerIndex([1,2,3,4], 6) = 4\n  */\nconst findLargerEqualIndex = (arr, target) => {\n  let index = -1;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > target) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the smallest\n  element that is greater than or equal to the given target.\n  \n  Examples:\n  findLargerIndex([1,2,3,4], 3) = 2\n  findLargerIndex([1,2,3,4], 4) = 3\n  findLargerIndex([1,2,3,4], 5) = 4\n  findLargerIndex([1,2,3,4], 6) = -1\n  */\nconst findSmallerEqualIndex = (arr, target) => {\n  let index = -1;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < target) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array and a target value, return the index of the largest\n  element that is less than or equal to the given target.\n  \n  Examples:\n  findSmallerIndex([1,2,3,4], 3) = 1\n  findSmallerIndex([1,2,3,4], 4) = 2\n  findSmallerIndex([1,2,3,4], 5) = 3\n  findSmallerIndex([1,2,3,4], 6) = -1\n  */\nconst findSmallerIndex = (arr, target) => {\n  let index = -1;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < target) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array and a target value, return the index of the largest\n  element that is less than the given target.\n  \n  Examples:\n  findSmallerIndex([1,2,3,4], 3) = 2\n  findSmallerIndex([1,2,3,4], 4) = 3\n  findSmallerIndex([1,2,3,4], 5) = 4\n  findSmallerIndex([1,2,3,4], 6) = -1\n  */\nconst findLesserIndex = (arr, target) => {\n  let index = -1;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < target) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array and a target value, return the index of the smallest\n  element that is greater than or equal to the given target.\n  \n  Examples:\n  findLargerIndex([1,2,3,4], 3) = 2\n  findLargerIndex([1,2,3,4], 4) = 3\n  findLargerIndex([1,2,3,4], 5) = 4\n  findLargerIndex([1,2,3,4], 6) = -1\n  */\nconst findGreaterEqualIndex = (arr, target) => {\n  let index = -1;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] >= target) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array and a target value, return the index of the smallest\n  element that is greater than the given target.\n  \n  Examples:\n  findGreaterIndex([1,2,3,4], 3) = 2\n  findGreaterIndex([1,2,3,4], 4) = 3\n  findGreaterIndex([1,2,3,4], 5) = 4\n  findGreaterIndex([1,2,3,4], 6) = -1\n  */\nconst findGreaterIndex = (arr, target"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const a = null;\n  const b = null;\n  if (lst.length === 0) {\n    return (a, b);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      b = lst[i];\n      continue;\n    }\n    if (a === null) {\n      a = lst[i];\n    } else if (lst[i] < 0) {\n      a = Math.min(a, lst[i]);\n    }\n  }\n  return (a, b);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (isNaN(a)) {\n    return b\n  }\n  if (isNaN(b)) {\n    return a\n  }\n\n  const aStr = typeof a === \"string\"? a.replace(\",\", \".\") : a\n  const bStr = typeof b === \"string\"? b.replace(\",\", \".\") : b\n  const aNumber = parseFloat(aStr)\n  const bNumber = parseFloat(bStr)\n  if (aNumber === bNumber) {\n    return null\n  }\n  if (aNumber < bNumber) {\n    return a\n  }\n  return b\n}\n\nexport default compaerOne\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const isEven = (x) => x % 2 === 0;\n  const isSumEven = (a, b) => a + b === n;\n  return Array.from(Array(n).keys()).every(isEven) && Array.from(Array(n).keys()).every(isSumEven);\n};\n\nexport default isEqualToSumEven;<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n\n  let result = 1\n  for (let i = 3; i <= n; i++) {\n    result *= i\n  }\n\n  return result\n}\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n\n  let result = 1\n  for (let i = 3; i <= n; i++) {\n    result *= i\n  }\n\n  return result\n}\n\nconst findFactorial = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n\n  let result = 1\n  let prev = 1\n  for (let i = 3; i <= n; i++) {\n    result += prev\n    prev *= i\n  }\n\n  return result\n}\n\nconst findSpecialFactorial = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n\n  let result = 1\n  let prev = 1\n  for (let i = 3; i <= n; i++) {\n    result += prev\n    prev *= i\n  }\n\n  return result\n}\n\nconst sum = (n) => {\n  let result = 0\n  for (let i = 1; i <= n; i++) {\n    result += i\n  }\n\n  return result\n}\n\nconst sumSpecial = (n) => {\n  let result = 0\n  for (let i = 1; i <= n; i++) {\n    result += specialFactorial(i)\n  }\n\n  return result\n}\n\nmodule.exports = {\n  factorial,\n  specialFactorial,\n  findFactorial,\n  findSpecialFactorial,\n  sum,\n  sumSpecial\n}\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n    if (text.length > 2) {\n        return text.replace(/\\s+/g, '-').replace(/^-*|-*$/g, '');\n    }\n    return text;\n}\n\n/*\n  Given a string text, return a string that has the same number of \n  spaces in the original text, but has a similar number of spaces \n  in the final output\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \" _Example_2\"\n  fixSpaces(\" Example   3\") == \" _Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text.replace(/^ +| +$/g, '').replace(/ +/g,'').replace(/ +/g,'').replace(/^ +| +$/g, '');\n}\n\n/*\n  Given a string text, return a string that has the same number of \n  spaces in the original text, but has a similar number of spaces \n  in the final output, and all spaces are converted to underscores\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \" _Example_2\"\n  fixSpaces(\" Example   3\") == \" _Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n    return text.replace(/\\s+/g, '_').replace(/^_|_$/g, '');\n}\n\n/*\n  Given a string text, return a string that has the same number of \n  spaces in the original text, but has a similar number of spaces \n  in the final output, and all spaces are converted to underscores\n  and all -s are changed to _\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \" _Example_2\"\n  fixSpaces(\" Example   3\") == \" _Example-3\"\n  */\nconst fixSpaces3 = (text) => {\n    return text.replace(/\\s+/g, '_').replace(/\\-+/g, '_').replace(/-+/g, '_').replace(/^_|_$/g, '');\n}\n\n/*\n  Given a string text, return a string that has the same number of \n  spaces in the original text, but has a similar number of spaces \n  in the final output, and all spaces are converted to underscores\n  and all -s are changed to _\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \" _Example_2\"\n  fixSpaces(\" Example   3\") == \" _Example-3\"\n  */\nconst fixSpaces4 = (text) => {\n    return text.replace(/\\s+/g, '_').replace(/\\-+/g, '_').replace(/-+/g, '_').replace(/^_|_$/g, '');\n}\n\n/*\n  Given a string text, return a string that has the same number of \n  spaces in the original text, but has a similar number of spaces \n  in the final output, and all spaces are converted to underscores\n  and all -s are changed to _\n  and all consecutive -s are changed to _-\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \" _Example_2\"\n  fixSpaces(\" Example   3\") == \" _Example-3\"\n  */\nconst fixSpaces5 = (text) => {\n    return text.replace(/\\s+/g, '_').replace(/\\-+/g, '_').replace(/-+/g, '_').replace(/^_|_$/g, '');\n}\n\n/*\n  Given a string text, return a string that has the same number of \n  spaces in the original text, but has a similar number of spaces \n  in the final output, and all spaces are converted to underscores\n  and all -s are changed to _\n  and all consecutive -s are changed to _-\n  and all consecutive _s are changed to -_\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \" _Example_2\"\n  fixSpaces(\" Example   3\") == \" _Example-3\"\n  */\nconst fixSpaces6 = (text) => {\n    return text.replace(/\\s+/g, '_').replace(/\\-+/g, '_').replace(/-+/g, '_').replace(/^_|_$/g, '');\n}\n\n/*\n  Given a string text, return a string that has the same number of \n  spaces in the original text, but has a similar number of spaces \n  in the final output, and all spaces are converted to underscores\n  and all -s are changed to _\n  and all consecutive -s are changed to _-\n  and all consecutive _s are changed to -_\n  and all consecutive -_ are changed to _-_\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \" _Example_2\"\n  fixSpaces(\" Example   3\") == \" _Example-3\"\n  */\nconst fixSpaces7 = (text) => {\n    return text.replace(/\\s+/g, '_').replace(/\\-+/g, '_').replace(/-+/g, '_').replace(/^_|_$/g, '');\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  var length = file_name.length;\n  if (length <= 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.')!= -1) {\n    return 'No';\n  }\n  var substring = file_name.substring(0, file_name.indexOf('.'));\n  if (substring == '' ||!(substring.match(/[a-zA-Z]/))) {\n    return 'No';\n  }\n  var lastChar = file_name.charAt(length - 1);\n  if (lastChar == 't' || lastChar == 'x' || lastChar == 'e' || lastChar == 'd' || lastChar == 'l') {\n    return 'Yes';\n  }\n  return 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  var length = file_name.length;\n  if (length <= 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.')!= -1) {\n    return 'No';\n  }\n  var substring = file_name.substring(0, file_name.indexOf('.'));\n  if (substring == '' ||!(substring.match(/[a-zA-Z]/))) {\n    return 'No';\n  }\n  var lastChar = file_name.charAt(length - 1);\n  if (lastChar == 't' || lastChar == 'x' || lastChar == 'e' || lastChar == 'd' || lastChar == 'l') {\n    return 'Yes';\n  }\n  return 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  var length = file_name.length;\n  if (length <= 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.')!= -1) {\n    return 'No';\n  }\n  var substring = file_name.substring(0, file_name.indexOf('.'));\n  if (substring == '' ||!(substring.match(/[a-zA-Z]/))) {\n    return 'No';\n  }\n  var lastChar = file_name.charAt(length - 1);\n  if (lastChar == 't' || lastChar == 'x' || lastChar == 'e' || lastChar == 'd' || lastChar == 'l') {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nmodule.exports = {\n  fileNameCheck: fileNameCheck,\n  fileNameCheck2: fileNameCheck2,\n  fileNameCheck3: fileNameCheck3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0);\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function will then multiply the list with a number \n  specified by the user. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  For lst = [-1,-5,2,-1,-5] and num = 8 the output should be -126 * 8 = -1188\n  */\nconst product = (lst, num) => {\n  return lst.reduce((prev, curr) => prev * curr, 1);\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function will then multiply the list with a number \n  specified by the user. The function will then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  For lst = [-1,-5,2,-1,-5] and num = 8 the output should be -126 * 8 = -1188\n  */\nconst sum = (lst, num) => {\n  return lst.reduce((prev, curr) => prev + curr, 0);\n};\n\nconst sumSquaresNumbers = (lst, num) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0);\n};\n\nconst productNumbers = (lst, num) => {\n  return lst.reduce((prev, curr) => prev * curr, 1);\n};\n\nconst sumNumbers = (lst, num) => {\n  return lst.reduce((prev, curr) => prev + curr, 0);\n};\n\n// console.log(sumNumbers([1,2,3], 8));\n\nconsole.log(sumNumbers([-1,-5,2,-1,-5], 8));\nconsole.log(sumSquaresNumbers([-1,-5,2,-1,-5], 8));\nconsole.log(sumNumbers([-1,-5,2,-1,-5], 8));\nconsole.log(productNumbers([-1,-5,2,-1,-5], 8));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const words = sentence.split(\" \")\n  const result = []\n  for (const word of words) {\n    const newWord = primesInWord(word)\n    result.push(newWord)\n  }\n  return result.join(\" \")\n}\n\nexport default wrodsInSentenec\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  const num = x.split('/').shift()\n  const den = n.split('/').shift()\n\n  return parseInt(num) === parseInt(den)\n}\n\nmodule.exports = simpilfy\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  return nums.sort((a, b) => a - b)\n}\n\n/*\n  Write a function which sorts the given list of strings\n  according to the sum of their letters.\n\n  For example:\n  >>> roderByLetters('AAB') == ['AAB', 'ABB', 'BBB', 'ABC']\n  >>> roderByLetters('A') == ['A', 'B', 'C', 'D']\n  >>> roderByLetters('') == []\n  */\nconst roderByLetters = (str) => {\n  return str.split('').sort((a, b) => a - b)\n}\n\n/*\n  Write a function which sorts the given list of strings\n  according to the length of their characters.\n\n  For example:\n  >>> roderByLength('ABC') == ['ABC', 'BCD', 'BDF', 'CDE']\n  >>> roderByLength('A') == ['A', 'B', 'C', 'D']\n  >>> roderByLength('') == []\n  */\nconst roderByLength = (str) => {\n  return str.split('').sort((a, b) => a.length - b.length)\n}\n\n/*\n  Write a function which sorts the given list of strings\n  according to the index of their first character.\n\n  For example:\n  >>> roderByIndex('AAB') == ['A', 'B', 'C', 'D', 'E', 'F']\n  >>> roderByIndex('ABC') == ['A', 'B', 'C', 'D', 'E', 'F']\n  >>> roderByIndex('A') == ['A', 'B', 'C', 'D', 'E', 'F']\n  >>> roderByIndex('') == []\n  */\nconst roderByIndex = (str) => {\n  return str.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n}\n\n/*\n  Write a function which sorts the given list of strings\n  according to the alphabetical order of their characters.\n\n  For example:\n  >>> roderByAlpha('AAB') == ['A', 'B', 'C', 'D', 'E', 'F']\n  >>> roderByAlpha('ABC') == ['A', 'B', 'C', 'D', 'E', 'F']\n  >>> roderByAlpha('A') == ['A', 'B', 'C', 'D', 'E', 'F']\n  >>> roderByAlpha('') == []\n  */\nconst roderByAlpha = (str) => {\n  return str.split('').sort((a, b) => a.toLowerCase() > b.toLowerCase())\n}\n\n/*\n  Write a function which sorts the given list of strings\n  according to the descending order of their lengths.\n\n  For example:\n  >>> roderByLengthDesc('ABC') == ['C', 'D', 'E', 'F', 'B', 'A']\n  >>> roderByLengthDesc('A') == ['D', 'E', 'F', 'B', 'A']\n  >>> roderByLengthDesc('') == []\n  */\nconst roderByLengthDesc = (str) => {\n  return str.split('').sort((a, b) => b.length - a.length)\n}\n\n/*\n  Write a function which sorts the given list of strings\n  according to the descending order of their letters.\n\n  For example:\n  >>> roderByLengthDesc('AAB') == ['C', 'D', 'E', 'F', 'B', 'A']\n  >>> roderByLengthDesc('A') == ['B', 'A']\n  >>> roderByLengthDesc('') == []\n  */\nconst roderByLengthDesc = (str) => {\n  return str.split('').sort((a, b) => b.toLowerCase().length - a.toLowerCase().length)\n}\n\n/*\n  Write a function which sorts the given list of strings\n  according to the descending order of their first letters.\n\n  For example:\n  >>> roderByIndexDesc('AAB') == ['E', 'F', 'B', 'A', 'C', 'D']\n  >>> roderByIndexDesc('A') == ['B', 'A']\n  >>> roderByIndexDesc('') == []\n  */\nconst roderByIndexDesc = (str) => {\n  return str.split('').sort((a, b) => b.toLowerCase().charCodeAt(0) - a.toLowerCase().charCodeAt(0))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num > 10 && (num % 2 === 1 || num % 2 === 3)) {\n      result++;\n    }\n  })\n  return result;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are less than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter2 = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num < 10 && (num % 2 === 1 || num % 2 === 3)) {\n      result++;\n    }\n  })\n  return result;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are less than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialFilter3 = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num < 10 && (num % 2 === 0)) {\n      result++;\n    }\n  })\n  return result;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are less than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter4 = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num > 10 && (num % 2 === 0)) {\n      result++;\n    }\n  })\n  return result;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are less than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialFilter5 = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num < 10 && (num % 2 === 1 || num % 2 === 3)) {\n      result++;\n    }\n  })\n  return result;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are less than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter6 = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num > 10 && (num % 2 === 0)) {\n      result++;\n    }\n  })\n  return result;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are less than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter7 = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num < 10 && (num % 2 === 1 || num % 2 === 3)) {\n      result++;\n    }\n  })\n  return result;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are less than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialFilter8 = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num > 10 && (num % 2 === 0)) {\n      result++;\n    }\n  })\n  return result;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are less than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 0 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialFilter9 = (nums) => {\n  let result = 0;\n  nums.forEach(num => {\n    if(num < 10 && (num % 2 === 1 || num % 2 === 3)) {\n      result++;\n    }\n  })\n  return result;\n}\n\nconst specialFilter = (nums) => {\n  let"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  let max = 0\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i!== j && i!== k && j!== k) {\n          if (i + j + k % 3 === 0) {\n            max++\n          }\n        }\n      }\n    }\n  }\n  return max\n}\n\nconsole.log(getMaxTrpiles(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const distance = (planet1, planet2) => {\n    let d = 0;\n    let s1 = Math.cos(planet1.orbit.ecliptic.latitude);\n    let s2 = Math.cos(planet2.orbit.ecliptic.latitude);\n    let r = planet1.orbit.radius + planet2.orbit.radius;\n    let a = planet1.orbit.radius;\n    let b = planet2.orbit.radius;\n    while (a <= r) {\n      d += Math.pow(a * s1 + b * s2 - a * b * s1 * s2, 2) / (2 * a * b);\n      a += planet1.orbit.radius;\n      b += planet2.orbit.radius;\n    }\n    return d;\n  }\n  let planet = []\n  let distance = 0;\n  let p = [planet1, planet2];\n  for (let i = 0; i < p.length; i++) {\n    for (let j = i + 1; j < p.length; j++) {\n      distance = bf(p[i], p[j]);\n      if (distance > 0) {\n        planet.push([p[i], p[j], distance]);\n      }\n    }\n  }\n  return planet;\n}\n\nlet test = bf(\"Mercury\", \"Earth\");\nconsole.log(JSON.stringify(test));\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let l = lst.length\n  let s = 0\n  let i = 0\n  let j = 0\n  const nums = []\n\n  while (i < l) {\n    if (lst[i].length % 2!== 0) {\n      lst.splice(i, 1)\n      s = lst.length\n      l -= 1\n      i -= 1\n      j += 1\n    } else {\n      nums.push(lst[i])\n      i += 1\n    }\n  }\n\n  l = nums.length\n  for (i = 0; i < l; i += 1) {\n    s += nums[i]\n  }\n  return [...lst,...nums].sort()\n}\n\nconst list_sort = (lst) => {\n  let sorted_list = sortedListSum(lst)\n  return sorted_list\n}\n\n/*\n  Given a list of words and a string s,\n  return all starting and ending indices of s in the list of words,\n  e.g. s = \"catsanddog\" and words = [\"cats\", \"dog\", \"and\", \"sand\"]\n  Return [[0, 3], [5, 8]]\n  */\nconst findIndices = (words, s) => {\n  let i = 0\n  let j = 0\n  let len = words.length\n  let start = -1\n  let end = -1\n  while (i < len) {\n    if (words[i] === s) {\n      if (start === -1) {\n        start = i\n      } else if (start === i) {\n        end = i\n      }\n    } else {\n      if (start!== -1) {\n        return [start, end]\n      }\n      start = -1\n    }\n    i += 1\n  }\n  if (start!== -1) {\n    return [start, end]\n  }\n  return []\n}\n\nconst list_find = (words, s) => {\n  return findIndices(words, s)\n}\n\n/*\n  Given a list of words, return a list of all the words that\n  can be formed by taking s_1, s_2... s_n words\n  and concatenating them,\n  e.g. s_1 = \"cats\", s_2 = \"dog\", s_3 = \"sand\"\n  and words = [\"cats\", \"dog\", \"and\", \"sand\"]\n  Return [\"catsdog\", \"catsand\", \"dogsand\"]\n  */\nconst list_concat = (words) => {\n  let i = 0\n  let j = 0\n  let l = words.length\n  let res = []\n  while (i < l) {\n    res.push(words[i] + words[j])\n    i += 1\n    j += 1\n  }\n  return res\n}\n\nconst list_concat_sorted = (words) => {\n  return list_concat(words).sort()\n}\n\n/*\n  Given a list of words, return a list of all the words that\n  can be formed by taking s_1, s_2... s_n words\n  and concatenating them,\n  s_1 = \"cats\", s_2 = \"dog\", s_3 = \"sand\"\n  and words = [\"cats\", \"dog\", \"and\", \"sand\"]\n  Return [\"catsdog\", \"catsand\", \"dogsand\"]\n  */\nconst list_concat_sorted_all = (words) => {\n  return list_concat(words).sort()\n}\n\nconst list_concat_sorted_all_2 = (words) => {\n  let res = list_concat_sorted(words)\n  res = res.filter((x) => {\n    return x.length > 1\n  })\n  return res\n}\n\nconst list_concat_sorted_all_3 = (words) => {\n  let res = list_concat_sorted_all(words)\n  res = res.filter((x) => {\n    return x.length > 2\n  })\n  return res\n}\n\nconst list_concat_sorted_all_4 = (words) => {\n  let res = list_concat_sorted_all_2(words)\n  res = res.filter((x) => {\n    return x.length > 3\n  })\n  return res\n}\n\nconst list_concat_sorted_all_5 = (words) => {\n  let res = list_concat_sorted_all_3(words)\n  res = res.filter((x) => {\n    return x.length > 4\n  })\n  return res\n}\n\nconst list_concat_sorted_all_6 = (words) => {\n  let res = list_concat_sorted_all_4(words)\n  res = res.filter((x) => {\n    return x.length > 5\n  })\n  return res\n}\n\nconst list_concat_sorted_all_7 = (words) => {\n  let res = list_concat_sorted_all_5(words)\n  res = res.filter((x) => {\n    return x.length > 6\n  })\n  return res\n}\n\nconst list_concat_sorted_all_8 = (words) => {\n  let res = list_concat_sorted_all_6(words)\n  res = res.filter((x) => {\n    return x.length > 7\n  })\n  return res\n}\n\nconst list_concat_sorted_all_9 = (words) =>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\nexport default xOrY;<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => (a + b), 0)\n  return sum * sum\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 2, 3, 4, 5]) == 1 + 4 + 9 + 16 + 25 = 70\n  doublehTeDifference([-1, -2, -3, -4, -5]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEven = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => (a + b), 0)\n  return sum * sum\n}\n\nconst doublehTeDifferenceOdd = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((a, b) => (a + b), 0)\n  return sum * sum\n}\n\n/* Given a list of numbers, return the difference between the sum of squares\n  of the numbers in the list that are odd and the sum of squares of the\n  numbers in the list that are even.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 - 70\n  doublehTeDifference([-1, -2, 0]) == -1 + -2 + 0 - 0\n  doublehTeDifference([9, -2]) == 81 - 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceOddEven = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = doublehTeDifferenceEven(lst)\n  return sum - doublehTeDifferenceOdd(lst)\n}\n\n/* Given a list of numbers, return the largest number in the list.\n  doublehTeDifference([1, 2, 3, 4, 5]) == 5\n  doublehTeDifference([-1, -2, -3, -4, -5]) == -1\n  doublehTeDifference([9, -2]) == 9\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceMax = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((a, b) => Math.max(a, b), -Infinity)\n}\n\n/* Given a list of numbers, return the smallest number in the list.\n  doublehTeDifference([1, 2, 3, 4, 5]) == 1\n  doublehTeDifference([-1, -2, -3, -4, -5]) == -5\n  doublehTeDifference([9, -2]) == -2\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceMin = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((a, b) => Math.min(a, b), Infinity)\n}\n\n/* Given a list of numbers, return the largest number in the list\n  without removing the largest number.\n  doublehTeDifference([1, 2, 3, 4, 5]) == 5\n  doublehTeDifference([-1, -2, -3, -4, -5]) == -1\n  doublehTeDifference([9, -2]) == 9\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceMaxWithoutRemovingMax = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((a, b) => Math.max(a, b), -Infinity)\n}\n\n/* Given a list of numbers, return the smallest number in the list\n  without removing the smallest number.\n  doublehTeDifference([1, 2, 3, 4, 5]) == 1\n  doublehTeDifference([-1, -2, -3, -4, -5]) == -5\n  doublehTeDifference([9, -2]) == -2\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceMinWithoutRemovingMin = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((a, b) => Math.min(a, b), Infinity)\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list.\n  doublehTeDifference([1, 2, 3, 4, 5]) == 1 + 2 + 3 + 4 + 5\n  doublehTeDifference([-1, -2, -3, -4, -5]) == -1 + -2 + -3 + -4 + -5\n  doublehTeDifference([9, -2]) == 9 - 2\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceSum = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((a, b) => a + b, 0)\n}\n\n/* Given a list of numbers, return the product of the numbers in the list.\n  doublehTeDifference([1, 2, 3, 4, 5]) == 1 * 2 * 3 * 4 * 5\n  doublehTeDifference([-1, -"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : num - guess)\n  return score\n}\n\nconst compare2 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare3 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare4 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare5 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare6 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare7 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare8 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare9 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare10 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare11 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare12 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare13 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare14 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare15 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare16 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare17 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare18 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare19 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare20 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare21 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare22 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare23 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare24 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare25 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare26 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare27 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare28 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare29 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num - guess))\n  return score\n}\n\nconst compare30 = (game, guess) => {\n  const score = game.map(num => num === guess? 0 : Math.abs(num"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const classes = Object.keys(extensions)\n  const strength = {}\n  const classes_array = classes.sort()\n  let str = class_name\n  classes_array.forEach(class_name => {\n    const extension = extensions[class_name]\n    const cap_strength = extension.split('.').map(x => x.toUpperCase()).reduce((x, y) => x - y)\n    const lower_strength = extension.split('.').map(x => x.toLowerCase()).reduce((x, y) => x - y)\n    strength[class_name] = cap_strength - lower_strength\n  })\n  for (const key in strength) {\n    if (strength[key] === 0) {\n      return key\n    }\n  }\n  return str\n}\n\n// test\nconsole.log(strongestExtension('my_class', ['aa', 'be', 'cc']))\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  let str = b.split('').map(x => x.charCodeAt(0));\n  let i = 0;\n  while (i < a.length) {\n    if (str.indexOf(a.charCodeAt(i))!== -1) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    var count = 0;\n    var odd = false;\n    var even = false;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            count++;\n            if (odd) {\n                return (odd, count);\n            }\n        }\n        else {\n            count++;\n            if (even) {\n                return (even, count);\n            }\n            odd = true;\n            even = false;\n        }\n        num--;\n    }\n    return (even, count);\n};\n\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(-12));<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n    if (number <= 0) return '';\n    let result = [];\n    let prev = 1;\n    let last = 0;\n    let i = 1;\n    while (number > 0) {\n        if (number >= prev) {\n            last = number % prev;\n            number -= last;\n            result.push(last.toString());\n        } else {\n            last = 0;\n            result.push(prev.toString());\n        }\n        prev = prev * 10;\n        i++;\n    }\n    return result.reverse().join('');\n};\n\n// test\nconst test = (number, expected) => {\n    let result = intToMinRioman(number);\n    if (result === expected) {\n        console.log(`OK: ${number} => ${expected}`);\n    } else {\n        console.log(`ERROR: ${number} => ${result}`);\n    }\n};\n\ntest(19, 'xix');\ntest(152, 'clii');\ntest(426, 'cdxxvi');\ntest(1234, 'cxli');\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n    return ((a*a + b*b - c*c) > 0)\n};\n\n// Given a triangle, return the second smallest side length.\n//\n// Note:\n//  Assume the given array is a triangle.\n//  The given triangle does not need to be a valid triangle.\nconst secondSmallestSideLength = (a, b, c) => {\n    let smallestSideLength = Math.min(a, Math.min(b, c));\n    let secondSmallestSideLength = Math.min(Math.min(a, b), c);\n    return secondSmallestSideLength < smallestSideLength? secondSmallestSideLength : smallestSideLength;\n};\n\n// Given a triangle, return the second largest side length.\n//\n// Note:\n//  Assume the given array is a triangle.\n//  The given triangle does not need to be a valid triangle.\nconst secondLargestSideLength = (a, b, c) => {\n    let largestSideLength = Math.max(a, Math.max(b, c));\n    let secondLargestSideLength = Math.max(Math.max(a, b), c);\n    return secondLargestSideLength > largestSideLength? secondLargestSideLength : largestSideLength;\n};\n\n// Given a triangle, return the third largest side length.\n//\n// Note:\n//  Assume the given array is a triangle.\n//  The given triangle does not need to be a valid triangle.\nconst thirdLargestSideLength = (a, b, c) => {\n    let largestSideLength = Math.max(a, Math.max(b, c));\n    let thirdLargestSideLength = Math.max(Math.max(Math.max(a, b), c), largestSideLength);\n    return thirdLargestSideLength > largestSideLength? thirdLargestSideLength : largestSideLength;\n};\n\n// Given a triangle, return the hypotenuse of the triangle.\n//\n// Note:\n//  Assume the given array is a triangle.\n//  The given triangle does not need to be a valid triangle.\nconst hypotenuse = (a, b, c) => {\n    return Math.sqrt(a*a + b*b + c*c);\n};\n\n// Return the sum of the three sides of a triangle.\n//\n// Note:\n//  Assume the given array is a triangle.\n//  The given triangle does not need to be a valid triangle.\nconst triangleSum = (a, b, c) => {\n    return a + b + c;\n};\n\n// Return the perimeter of a triangle.\n//\n// Note:\n//  Assume the given array is a triangle.\n//  The given triangle does not need to be a valid triangle.\nconst perimeter = (a, b, c) => {\n    return a + b + c;\n};\n\n// Return the area of a triangle.\n//\n// Note:\n//  Assume the given array is a triangle.\n//  The given triangle does not need to be a valid triangle.\nconst area = (a, b, c) => {\n    return 0.5 * hypotenuse(a, b, c);\n};\n\n// Return true if the given triangle is a right-angled triangle, false otherwise.\nconst isRightAngledTriangle = (a, b, c) => {\n    return rightAngelTriangle(a, b, c);\n};\n\n// Return true if the given triangle is a equilateral triangle, false otherwise.\nconst isEquilateralTriangle = (a, b, c) => {\n    return a === b && b === c && a === c;\n};\n\n// Return the second smallest side length of the given triangle.\nconst secondSmallestSideLength = (a, b, c) => {\n    return secondSmallestSideLength(a, b, c);\n};\n\n// Return the second largest side length of the given triangle.\nconst secondLargestSideLength = (a, b, c) => {\n    return secondLargestSideLength(a, b, c);\n};\n\n// Return the third largest side length of the given triangle.\nconst thirdLargestSideLength = (a, b, c) => {\n    return thirdLargestSideLength(a, b, c);\n};\n\n// Return the hypotenuse of the given triangle.\nconst hypotenuse = (a, b, c) => {\n    return hypotenuse(a, b, c);\n};\n\n// Return the sum of the three sides of the given triangle.\nconst triangleSum = (a, b, c) => {\n    return triangleSum(a, b, c);\n};\n\n// Return the area of the given triangle.\nconst area = (a, b, c) => {\n    return area(a, b, c);\n};\n\n// Return true if the given triangle is a right-angled triangle, false otherwise.\nconst isRightAngledTriangle = (a, b, c) => {\n    return isRightAngledTriangle(a, b, c);\n};\n\n// Return true if the given triangle is a equilateral triangle, false otherwise.\nconst isEquilateralTriangle = (a, b, c) => {\n    return isEquilateralTriangle(a, b, c);\n};\n\n// Return the second smallest side length of the given triangle.\nconst secondSmallestSideLength = (a, b, c) => {\n    return secondSmallestSideLength(a, b, c);\n};\n\n// Return the second largest side length of the given triangle.\nconst secondLargestSideLength = (a, b, c) => {\n    return secondLargestSideLength(a, b, c);\n};\n\n// Return the third largest side length of the given triangle.\nconst thirdLargestSideLength = (a, b, c) => {\n    return thirdLargestSideLength(a, b, c);\n};\n\n// Return the hypotenuse of the given triangle.\nconst hypotenuse = (a, b, c) => {\n    return hypotenuse(a, b, c);\n};\n\n// Return the sum of the three sides of the given triangle.\nconst triangle"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const hashMap = {};\n  const max = {\n    index: -1,\n    value: ''\n  };\n\n  for (const i of words) {\n    const value = getUniqueChars(i);\n\n    if (hashMap[value] === undefined) {\n      hashMap[value] = 1;\n    } else {\n      hashMap[value] += 1;\n    }\n    \n    if (hashMap[value] > max.value) {\n      max.value = hashMap[value];\n      max.index = i;\n    }\n  }\n\n  return max.value;\n}\n\nfunction getUniqueChars(str) {\n  const chars = new Set();\n  let uniqueChars = '';\n\n  for (let i = 0; i < str.length; i++) {\n    if (chars.has(str[i])) {\n      continue;\n    }\n\n    chars.add(str[i]);\n    uniqueChars += str[i];\n  }\n\n  return uniqueChars;\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    //TODO: add more cases\n    if(number === 0) {\n        return [0, need];\n    }\n    if(need === 0) {\n        return [number, 0];\n    }\n    if(remaining < need) {\n        return [number, remaining];\n    }\n    return [number + need, remaining - need];\n};\n\nconsole.log(eat(4, 10, 2));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length - 1; i++) {\n    result = result + operand[i];\n  }\n  result = result + operand[i];\n  return result;\n};\n\n/*\n  Given a list of lists, return the first element of the list.\n*/\nconst first = (list) => {\n  return list[0];\n};\n\n/*\n  Given a list of lists, return the second element of the list.\n*/\nconst second = (list) => {\n  return list[1];\n};\n\n/*\n  Given two lists, return a list of lists that is the result of applying the basic \n  algebra operations on the first list and the second list.\n\n  Example:\n  operator = ['+', '-', '*', '**']\n  operand = [2, 3, 4, 5]\n  => operator['+', '-', '*', '**']\n  => [2 + 3 * 4 - 5, 2 - 3 * 4 + 5, 2 * 3 - 4 * 5, 2 ** 3 * 4 ** 5]\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n*/\nconst doOperations = (operator, operand) => {\n  let result = [];\n  for (let i = 0; i < operator.length - 1; i++) {\n    result.push(operator[i] + operand[i]);\n  }\n  result.push(operator[i] + operand[i]);\n  return result;\n};\n\n/*\n  Given two lists, return a list of lists that is the result of applying the basic \n  algebra operations on the first list and the second list.\n\n  Example:\n  operator = ['+', '-', '*', '**']\n  operand = [2, 3, 4, 5]\n  => operator['+', '-', '*', '**']\n  => [2 + 3 * 4 - 5, 2 - 3 * 4 + 5, 2 * 3 - 4 * 5, 2 ** 3 * 4 ** 5]\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n*/\nconst doOperations2 = (operator, operand) => {\n  let result = [];\n  for (let i = 0; i < operator.length; i++) {\n    let left = operand[i];\n    for (let j = i + 1; j < operator.length; j++) {\n      let right = operand[j];\n      result.push(left + operator[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists, return a list of lists that is the result of applying the basic \n  algebra operations on the first list and the second list.\n\n  Example:\n  operator = ['+', '-', '*', '**']\n  operand = [2, 3, 4, 5]\n  => operator['+', '-', '*', '**']\n  => [2 + 3 * 4 - 5, 2 - 3 * 4 + 5, 2 * 3 - 4 * 5, 2 ** 3 * 4 ** 5]\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n*/\nconst doOperations3 = (operator, operand) => {\n  let result = [];\n  let result_operator = [];\n  let result_operand = [];\n  for (let i = 0; i < operator.length; i++) {\n    let current_result = [];\n    let current_operator = [];\n    let current_operand = [];\n    let operator_item = operator[i];\n    for (let j = 0; j < operand.length; j++) {\n      let current_operand_item = operand[j];\n      current_operand.push(current_operand_item);\n      if (j === 0) {\n        current_operator.push(operator_item);\n      }\n    }\n    current_result.push(current_operator);\n    result.push(current_result);\n  }\n  return result;\n};\n\n/*\n  Given two lists, return the result of applying the basic algebra operations on the first\n  list and the second list.\n\n  Example:\n  operator = ['+', '-', '*', '**']\n  operand = [2, 3, 4, 5]\n  => operator['+', '-', '*', '**']\n  => [2 + 3 * 4 - 5, 2 - 3 * 4 + 5, 2 * 3 - 4 * 5, 2 ** 3 * 4 ** 5]\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n*/\nconst doOperations4 = (operator, operand) => {\n  let result = [];\n  let result_operator = [];\n  let result_operand = [];\n  for (let i = 0; i < operator.length; i++) {\n    "}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let k = 0\n  let c = 0\n  let res = \"\"\n  while (i < j) {\n    c = s[i]\n    if (c === \"A\" || c === \"a\") {\n      c = \"A\"\n      if (k === 0) {\n        k = 1\n      } else {\n        k = 0\n      }\n    }\n    res += c\n    i++\n    j--\n  }\n  while (k < len) {\n    c = s[k]\n    if (c === \"A\" || c === \"a\") {\n      c = \"A\"\n    } else {\n      c = \"a\"\n    }\n    res += c\n    k++\n  }\n  return res\n}\n\n// console.log(solve(\"1234\"))\n// console.log(solve(\"ab\"))\n// console.log(solve(\"#a@C\"))\nconsole.log(solve(\"Aa\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let hash = crypto.createHash('md5');\n  if (text) {\n    hash.update(text);\n  }\n  return hash.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (b <= a) {\n    return []\n  }\n  const range = (a - b + 1)\n  let current = b\n  const even = []\n  while (current <= a) {\n    even.push(current)\n    current += 2\n  }\n  return even\n}\n\nconst testGenerateIntegers = async () => {\n  let a = 2\n  let b = 8\n  const even = await generateIntegers(a, b)\n  console.log(`${a} -> ${b} -> ${even}`)\n  a = 8\n  b = 2\n  const even2 = await generateIntegers(a, b)\n  console.log(`${a} -> ${b} -> ${even2}`)\n  a = 10\n  b = 14\n  const even3 = await generateIntegers(a, b)\n  console.log(`${a} -> ${b} -> ${even3}`)\n}\n\ntestGenerateIntegers()\n<|endoftext|>"}
