{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  let len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/* Check if given list of numbers, are all the same.\n  >>> hasSame([1, 2, 3, 4, 5])\n  false\n  >>> hasSame([1, 1, 1])\n  true\n  >>> hasSame([1, 2, 3, 4, 5, 5])\n  true\n  */\nconst hasSame = (numbers) => {\n  let len = numbers.length\n  let first = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i]!== first) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Check if given list of numbers, are all the same.\n  >>> hasSame([1, 2, 3, 4, 5])\n  false\n  >>> hasSame([1, 1, 1])\n  true\n  >>> hasSame([1, 2, 3, 4, 5, 5])\n  true\n  */\nconst hasDifferent = (numbers) => {\n  let len = numbers.length\n  let first = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] === first) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Given a list of numbers, return an array of list of unique numbers.\n  >>> unique([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 2, 3, 4, 5, 5])\n  [1, 2, 3, 4, 5, 5]\n  >>> unique([1, 2, 2, 3, 4, 5, 5])\n  [1, 2, 3, 4, 5, 5]\n  >>> unique([1, 2, 3, 4, 5, 5, 1])\n  [1, 2, 3, 4, 5, 5]\n  */\nconst unique = (numbers) => {\n  let uniqueNumbers = []\n  let len = numbers.length\n  let uniqueNumber = undefined\n  for (let i = 0; i < len; i++) {\n    uniqueNumber = numbers[i]\n    if (uniqueNumbers.indexOf(uniqueNumber) === -1) {\n      uniqueNumbers.push(uniqueNumber)\n    }\n  }\n  return uniqueNumbers\n}\n\n/* Given a list of numbers, return the max of the list.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  >>> max([1, 2, 3, 4, 5, 5])\n  5\n  >>> max([1, 2, 3, 4, 5, 5, 1])\n  5\n  */\nconst max = (numbers) => {\n  let len = numbers.length\n  let maxNumber = undefined\n  let max = undefined\n  for (let i = 0; i < len; i++) {\n    if (max === undefined || numbers[i] > max) {\n      max = numbers[i]\n      maxNumber = numbers[i]\n    }\n  }\n  return maxNumber\n}\n\n/* Given a list of numbers, return the min of the list.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  >>> min([1, 2, 3, 4, 5, 5])\n  1\n  >>> min([1, 2, 3, 4, 5, 5, 1])\n  1\n  */\nconst min = (numbers) => {\n  let len = numbers.length\n  let minNumber = undefined\n  let min = undefined\n  for (let i = 0; i < len; i++) {\n    if (min === undefined || numbers[i] < min) {\n      min = numbers[i]\n      minNumber = numbers[i]\n    }\n  }\n  return minNumber\n}\n\n/* Given a list of numbers, return the sum of the list.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 5, 1])\n  15\n  */\nconst sum = (numbers) => {\n  let len = numbers.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += numbers[i]\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the average of the list.\n  >>> avg([1, 2, 3, 4, 5])\n  3.0\n  >>> avg([1, 2, 3, 4, 5, 5])\n  3.0\n  >>> avg([1, 2, 3, 4, 5, 5, 1])\n  3.0\n  */\nconst avg = (numbers) => {\n  let len = numbers.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += numbers[i]\n  }\n  return sum / len\n}\n\nmodule.exports = {\n  min,\n  max,\n  sum,\n  avg,\n  hasSame,\n  hasDifferent,\n  unique,\n  hasCloselEements,\n  hasSame,\n  hasDifferent,\n  unique,\n  hasCloselEements,\n  hasSame,\n  hasDifferent,\n  unique,\n  hasCloselEements,\n  hasSame,\n  hasDifferent,\n  unique,\n  hasCloselEements,\n  hasSame,\n  hasDifferent,\n  unique,\n  hasCloselEements,\n  hasSame,\n  hasDifferent,\n  unique,\n  hasCloselEements,\n  hasSame,\n  hasDifferent,\n  unique,\n  hasCloselE"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n    const balanced = (s) => {\n        const stack = [];\n        let last = '(';\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] === '(') {\n                stack.push(last);\n                last = '(';\n            } else if (s[i] === ')') {\n                if (stack.length === 0) {\n                    throw 'invalid parentheses'\n                }\n                last = stack.pop();\n            }\n        }\n        if (stack.length > 0) {\n            throw 'invalid parentheses'\n        }\n        return '(' + last + ')';\n    };\n    const split = (s) => {\n        const stack = [];\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] === '(') {\n                stack.push(i);\n            } else if (s[i] === ')') {\n                if (stack.length === 0) {\n                    throw 'invalid parentheses'\n                }\n                const index = stack.pop();\n                return [s.slice(0, index), s.slice(index + 1, i)];\n            }\n        }\n        if (stack.length > 0) {\n            throw 'invalid parentheses'\n        }\n        return [s, ''];\n    };\n    const result = [];\n    const stack = [];\n    let next = '(';\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            stack.push(next);\n            next = '(';\n        } else if (paren_string[i] === ')') {\n            if (stack.length === 0) {\n                throw 'invalid parentheses'\n            }\n            next = stack.pop();\n        } else if (next === '(') {\n            result.push(balanced(paren_string.slice(stack.length, i + 1)));\n            stack.push(i + 1);\n            next = paren_string[i];\n        }\n    }\n    if (stack.length > 0) {\n        throw 'invalid parentheses'\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  return Math.trunc(number);\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer2 = (number) => {\n  return (number - truncateNubmer(number)) * 10;\n}\n\nmodule.exports = {\n  truncateNubmer,\n  truncateNubmer2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  const [low, high] = [0, 0]\n  let current = 0\n\n  for (let i = 0; i < operations.length; i++) {\n    const [amount, op] = operations[i]\n    if (op === 'withdraw') {\n      current -= amount\n      if (current < low) low = current\n    } else if (op === 'deposit') {\n      current += amount\n      if (current > high) high = current\n    }\n  }\n\n  return low < 0 || high < 0\n}\n\nexport default belowZeor\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviations = [...numbers]\n   .map(x => Math.abs(x - mean))\n   .reduce((a, b) => a + b)\n   .toFixed(2)\n  return deviations.length? Math.abs(mean - deviations.reduce(sum => sum / deviations.length) / deviations.length) : 0\n}\n\n/*\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  0.83333333\n  */\nconst meanAbsolutedDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviations = [...numbers]\n   .map(x => Math.abs(x - mean))\n   .reduce((a, b) => a + b)\n  return deviations.length? Math.abs(mean - deviations.reduce(sum => sum / deviations.length) / deviations.length) : 0\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation of\n  this dataset.\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = [...numbers]\n   .map(x => Math.pow(x - mean, 2))\n   .reduce((a, b) => a + b)\n   .toFixed(2)\n  return deviation.length? Math.sqrt(deviation) : 0\n}\n\n/*\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst stdDeviationInBase = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = [...numbers]\n   .map(x => Math.pow(x - mean, 2))\n   .reduce((a, b) => a + b)\n   .toFixed(2)\n  return deviation.length? Math.sqrt(deviation) : 0\n}\n\n/*\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst stdDeviationBase = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = [...numbers]\n   .map(x => Math.pow(x - mean, 2))\n   .reduce((a, b) => a + b)\n   .toFixed(2)\n  return deviation.length? Math.sqrt(deviation) : 0\n}\n\n/*\n  For a given list of input numbers, calculate the kth-order\n  standard deviation of this dataset.\n  >>> kStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.7\n  */\nconst kStandardDeviation = (numbers, k) => {\n  const mean = mean(numbers)\n  const deviation = [...numbers]\n   .map(x => Math.pow(x - mean, 2))\n   .reduce((a, b) => a + b)\n   .toFixed(2)\n  return deviation.length? Math.sqrt(deviation / k) : 0\n}\n\n/*\n  >>> kStandardDeviation([1.0, 2.0, 3.0, 4.0], 2)\n  1.4\n  */\nconst kStandardDeviationBase = (numbers, k) => {\n  const mean = mean(numbers)\n  const deviation = [...numbers]\n   .map(x => Math.pow(x - mean, 2))\n   .reduce((a, b) => a + b)\n   .toFixed(2)\n  return deviation.length? Math.sqrt(deviation / k) : 0\n}\n\n/*\n  For a given list of input numbers, calculate the mean absolute deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsolutedDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const deviations = [...numbers]\n   .map(x => Math.abs(x - mean))\n   .reduce((a, b) => a + b)\n   .toFixed(2)\n  return deviations.length? Math.abs(mean - deviations.reduce(sum => sum / deviations.length) / deviations.length) : 0\n}\n\n/*\n  >>> meanAbsolutedDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsolutedDeviationBase = (numbers) => {\n  const mean = mean(numbers)\n  const deviations = [...numbers]\n   .map(x => Math.abs(x - mean))\n   .reduce((a, b) => a + b)\n  return deviations.length? Math.abs(mean - deviations.reduce(sum => sum / deviations.length) / deviations.length) : 0\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation of\n  this dataset.\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst stdDeviationBase = (numbers) => {\n  const mean = mean(numbers)\n  const deviation = [...numbers]\n   .map(x => Math.pow(x - mean, 2))\n   .reduce((a, b) => a + b)\n   .toFixed(2)\n  return deviation."}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const output = [];\n  let current = null;\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === 0) {\n      current = numbers[i];\n    } else {\n      if (current === delimeter) {\n        output.push(current);\n        current = numbers[i];\n      } else {\n        output.push(current);\n        output.push(numbers[i]);\n        current = numbers[i];\n      }\n    }\n  }\n  if (current!== null) {\n    output.push(current);\n  }\n  return output;\n};\n\nmodule.exports = interpserse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const depth = 1\n  const max_depth = -1\n  const stack = []\n  const result = []\n  const stack_size = 0\n  const next = () => {\n    stack.pop()\n    depth--\n    result.push(depth)\n  }\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(i)\n      stack_size++\n    } else if (paren_string[i] === ')') {\n      if (stack_size > 0) {\n        next()\n      } else {\n        stack.push(i)\n      }\n    }\n  }\n  if (stack_size === 0) {\n    result.push(max_depth)\n  }\n  return result\n}\n\n/* Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the longest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseLongestNetsedParens = (paren_string) => {\n  const depth = 1\n  const max_depth = -1\n  const stack = []\n  const result = []\n  const stack_size = 0\n  const next = () => {\n    stack.pop()\n    depth--\n    result.push(depth)\n  }\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(i)\n      stack_size++\n    } else if (paren_string[i] === ')') {\n      if (stack_size > 0) {\n        next()\n      } else {\n        stack.push(i)\n      }\n    }\n  }\n  if (stack_size === 0) {\n    result.push(max_depth)\n  }\n  return result\n}\n\n/* Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseDeepestNetsedParens = (paren_string) => {\n  const depth = 1\n  const max_depth = -1\n  const stack = []\n  const result = []\n  const stack_size = 0\n  const next = () => {\n    stack.pop()\n    depth--\n    result.push(depth)\n  }\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(i)\n      stack_size++\n    } else if (paren_string[i] === ')') {\n      if (stack_size > 0) {\n        next()\n      } else {\n        stack.push(i)\n      }\n    }\n  }\n  if (stack_size === 0) {\n    result.push(max_depth)\n  }\n  return result\n}\n\nmodule.exports = {\n  parseNetsedParens,\n  parseLongestNetsedParens,\n  parseDeepestNetsedParens\n}\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  let index = -1\n  return [...strings].filter(\n    (string, i) =>\n      index = string.indexOf(substring, index + 1) >= 0\n  )\n}\n\nexport default filteBrySubstring\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let result = [];\n  let max = numbers[0];\n  let tempMax;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (numbers[i + 1] > max) {\n      max = numbers[i + 1];\n    }\n  }\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else if (numbers[i + 1] === max) {\n      result.push(max);\n      tempMax = numbers[i];\n      while (numbers[i + 1] === tempMax) {\n        result.push(tempMax);\n        i++;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longest = 0;\n  let found = false;\n  let foundStr = '';\n  let suffix = '';\n  for (let i = 0; i < string.length; i++) {\n    let ch = string[i];\n    if (isPalindrome(ch)) {\n      found = true;\n      suffix = string.slice(i);\n      break;\n    }\n  }\n  if (found) {\n    foundStr = string.slice(0, i);\n    longest = i;\n  }\n  for (let i = 0; i < longest; i++) {\n    foundStr += string[i];\n  }\n  return foundStr;\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that is a substring of a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  - Remove the string prefix from the supplied string.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('ccata')\n  'ccat'\n  >>> makePalindrome('cataa')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  let longest = 0;\n  let found = false;\n  let foundStr = '';\n  let suffix = '';\n  for (let i = 0; i < string.length; i++) {\n    let ch = string[i];\n    if (isPalindrome(ch)) {\n      found = true;\n      suffix = string.slice(i);\n      break;\n    }\n  }\n  if (found) {\n    foundStr = string.slice(i);\n    longest = i;\n  }\n  for (let i = 0; i < longest; i++) {\n    foundStr += string[i];\n  }\n  return foundStr;\n}\n\n/* Test if a string is a palindrome. */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that is a substring of a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  - Remove the string prefix from the supplied string.\n  - Remove the string suffix from the supplied string.\n  - Repeat steps 2, 3, 4 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the beginning of the string.\n  - Repeat steps 1, 2, 3 from the end of the string.\n  - Repeat steps 1, 2, 3 from the"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  let xor = a.split('').map((char) => {\n    return (char === '1')? '0' : '1';\n  }).reduce((a, b) => {\n    return a ^ b;\n  });\n  return xor.toString();\n};\n\n/*\n  Input: two numbers, a and b\n  Output: the sum of these two numbers\n  >>> addTwoNumbers(1, 2)\n  3\n  >>> addTwoNumbers(0, 1)\n  1\n  >>> addTwoNumbers(9, 9)\n  18\n  >>> addTwoNumbers(6, 3)\n  9\n  >>> addTwoNumbers(1, 9)\n  10\n  >>> addTwoNumbers(2, 7)\n  15\n  >>> addTwoNumbers(3, 5)\n  8\n  >>> addTwoNumbers(5, 5)\n  10\n  >>> addTwoNumbers(7, 7)\n  14\n  >>> addTwoNumbers(2, 3)\n  5\n  >>> addTwoNumbers(3, 4)\n  7\n  */\nconst addTwoNumbers = (a, b) => {\n  let sum = a + b;\n  if (sum % 2 === 1) {\n    return sum + 1;\n  }\n  return sum;\n};\n\n/*\n  Input: two strings, a and b\n  Output: the string made from concatenating these two strings\n  >>> concatTwoStrings('Hello', 'World')\n  'HelloWorld'\n  >>> concatTwoStrings('Hello', 'World')\n  'HelloWorld'\n  >>> concatTwoStrings('Hello', 'World')\n  'HelloWorld'\n  >>> concatTwoStrings('Hello', 'World')\n  'HelloWorld'\n  >>> concatTwoStrings('Hello', 'World')\n  'HelloWorld'\n  >>> concatTwoStrings('Hello', 'World')\n  'HelloWorld'\n  >>> concatTwoStrings('Hello', 'World')\n  'HelloWorld'\n  */\nconst concatTwoStrings = (a, b) => {\n  return a + b;\n};\n\n/*\n  Input: a number\n  Output: the number raised to the power of 2\n  >>> powerTwo(1)\n  2\n  >>> powerTwo(2)\n  4\n  >>> powerTwo(3)\n  8\n  >>> powerTwo(4)\n  16\n  >>> powerTwo(5)\n  32\n  >>> powerTwo(6)\n  64\n  */\nconst powerTwo = (n) => {\n  let x = 1;\n  for (let i = 1; i < n; i++) {\n    x = x * 2;\n  }\n  return x;\n};\n\n/*\n  Input: a string\n  Output: the string reversed\n  >>> reverseString('Hello')\n  'olleH'\n  >>> reverseString('Hello')\n  'olleH'\n  >>> reverseString('Hello')\n  'olleH'\n  >>> reverseString('Hello')\n  'olleH'\n  */\nconst reverseString = (s) => {\n  let len = s.length;\n  let rev = '';\n  for (let i = len - 1; i >= 0; i--) {\n    rev += s[i];\n  }\n  return rev;\n};\n\n/*\n  Input: an array\n  Output: the sum of the elements of the array\n  >>> sumOfArray([1, 2, 3])\n  6\n  >>> sumOfArray([1, 2, 3])\n  6\n  >>> sumOfArray([1, 2, 3])\n  6\n  >>> sumOfArray([1, 2, 3])\n  6\n  */\nconst sumOfArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Input: two strings, a and b\n  Output: the number of characters in common between a and b\n  >>> countCommonChars('Hello', 'World')\n  4\n  >>> countCommonChars('Hello', 'World')\n  4\n  >>> countCommonChars('Hello', 'World')\n  4\n  >>> countCommonChars('Hello', 'World')\n  4\n  */\nconst countCommonChars = (a, b) => {\n  let len = a.length;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else {\n      break;\n    }\n  }\n  return i;\n};\n\n/*\n  Input: two numbers, a and b\n  Output: the number of digits in the largest number\n  >>> largestDigits(1, 1)\n  1\n  >>> largestDigits(1, 2)\n  1\n  >>> largestDigits(1, 3)\n  1\n  >>> largestDigits(1, 4)\n  1\n  >>> largestDigits(1, 5)\n  2\n  >>> largestDigits(1, 6)\n  3\n  >>> largestDigits(1, 7)\n  4\n  >>> largestDigits(1, 8)\n  5\n  >>> largestDigits(1, 9)\n  6\n  >>> largestDigits(1, 10)\n  7\n  >>> largestDigits(1, 11)\n  8\n  >>> largestDigits(1, 12)\n  9\n  >>> largestDigits(1, 13)\n  10\n  >>> largestDigits(1, 14)\n  11\n  >>> largestDigits(1, 15)\n  12\n  >>> largestDigits(1, 16)\n  13\n  >>> largestDigits(1, 17)\n  14\n  >>> largestDigits(1, 18)\n  15\n  >>> largestDigits(1, 19)\n  16\n  >>> largestDigits(1, 20)\n  17\n  >>> largestDigits(1, 21)\n  18\n  >>> largestDigits(1, 22)\n  19\n  >>> largestDigits(1, 23)\n  20\n  >>> largestDigits(1, 24)\n  "}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n    const result = strings.reduce((acc, string) => {\n        if (acc.length < string.length) {\n            return string;\n        }\n        return acc;\n    }, null);\n    return result? result.length : null;\n};\n\n// Tests\n\n// console.log(longest(['a', 'bb', 'ccc']));\n// //=> 'ccc'\n\n// console.log(longest(['a', 'bb', 'ccc', 'ddd']));\n// //=> 'ddd'\n\n// console.log(longest([]));\n// //=> null\n// console.log(longest(['a', 'b', 'c']));\n// //=> 'a'\n// console.log(longest(['a', 'b', 'c', 'a']));\n// //=> 'a'\n// console.log(longest(['a', 'b', 'c', 'd', 'e', 'f', 'g']));\n// //=> 'g'\n// console.log(longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'g', 'h', 'i', 'j']));\n// //=> 'j'\n// console.log(longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']));\n// //=> 'p'\n// console.log(longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v']));\n// //=> 'v'\n// console.log(longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']));\n// //=> 'z'\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n    // a > b\n    if (a > b) {\n        return rgeatestCommonDivisor(b, a);\n    }\n    // a < b\n    let x = a;\n    while (b > 0) {\n        if (x % b == 0) {\n            return b;\n        }\n        x -= x % b;\n        b--;\n    }\n    return x;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonGcd = (a, b) => {\n    return b === 0? a : rgeatestCommonGcd(b, a % b);\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonSqrt = (n) => {\n    // x^2 - n = 0\n    let x = n;\n    while (x * x - n === 0) {\n        x += 1;\n    }\n    return x;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonFactorial = (n) => {\n    // fact(n) = n!\n    let i = 1;\n    while (i <= n) {\n        i++;\n    }\n    return i;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonIsPrime = (n) => {\n    // n is prime if and only if all of the following are true:\n    // n is an integer\n    // n is greater than 1\n    // n is not equal to 1 or 2\n    // n is not equal to 3 or 5\n    // n is not equal to 7, 11, or 13\n    if (typeof n!== 'number' || n < 1 || n === 1 || n === 2 || n === 3 || n === 5 || n === 7 || n === 11 || n === 13) {\n        return false;\n    }\n    if (n === 4) {\n        return true;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonPrimeFactors = (n) => {\n    // primeFactors(n) = [1, n,..., n]\n    let factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonDivisors = (a, b) => {\n    // divisors(a, b) = [1, a, b, a^2, b^2, ab,..., ab^2]\n    let divisors = [];\n    let divisor = 1;\n    while (divisor <= Math.sqrt(a * b)) {\n        if (a % divisor === 0 && b % divisor === 0) {\n            divisors.push(divisor);\n            divisor *= 2;\n        }\n    }\n    if (a!== 1 && b!== 1) {\n        divisors.push(a * b);\n    }\n    return divisors;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonPermutation = (a, b) => {\n    // permutation(a, b) = [a, b, a^2, b^2,..., a^k, b^k]\n    let permutation = [];\n    for (let i = 1; i <= Math.pow(a, b); i++) {\n        permutation.push(i);\n    }\n    return permutation;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonPermutationCyclic = (a, b) => {\n    // permutationCyclic(a, b) = [a, b, a^2, b^2,..., a^k, b^k, a^(b-1), b^(a-1),..., a^(b-1)^(a-1), b^(a-1)^(b-1)]\n    let permutation = [];\n    let bPrime = b;\n    while (bPrime > 1) {\n        let aPrime = Math.pow(a, bPrime);\n        permutation.push(aPrime);\n        bPrime--;\n    }\n    permutation.push(bPrime);\n    return permutation;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonPermutationUnique = (a, b) => {\n    // permutationUnique(a, b) = [a, b, a^2, b^2,..., a^k, b^k, a^(b-1), b^(a-1),..., a^(b-1)^(a-1), b^(a-1)^(b-1)]\n    let permutationUnique = [];\n    let bPrime = b;\n    while (bPrime > 1) {\n        let aPrime = Math.pow(a, bPrime);\n        for (let i = 0; i < permutationUnique.length; i++) {\n            if (permutationUnique[i] === aPrime) {\n                return false;\n            }\n        }\n        permutationUnique.push(aPrime);\n        bPrime--;\n    }\n    permutationUnique.push(bPrime);\n    return permutationUnique;\n};\n\n//-----------------------------------------------------------------------------\n\nconst rgeatestCommonPermutationCyclicUnique = (a, b) => {\n    // permutationCyclicUnique(a, b) = [a, b, a^2, b^2,..., a^k, b^k, a^(b-1), b^(a-1),..., a^(b-1)^(a-1), b^(a-1)^(b-1)]\n    let permutationUnique = [];\n    let bPrime = b;\n    while (bPrime > 1) {\n        let aPrime = Math.pow(a, bPrime);"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const currentPrefix = []\n  for (let i = 0; i < string.length; i++) {\n    currentPrefix.push(string[i])\n    if (string.length - i >= 1) {\n      const nextString = string.slice(i + 1)\n      for (let j = 0; j < currentPrefix.length; j++) {\n        if (nextString.includes(currentPrefix[j])) {\n          prefixes.push(currentPrefix.slice(0, j + 1))\n          break\n        }\n      }\n    }\n  }\n  return prefixes\n}\n\nexport default {\n  allPrefixes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const sequence = Array(n + 1).fill(0);\n  for (let i = 1; i <= n; i++) {\n    sequence[i] = i;\n  }\n  return sequence.join(' ');\n};\n\n// Simplify a list of numbers by sorting and removing duplicates\n//\n// @param list - a list of numbers\n// @return sorted list without duplicates\nconst uniqueList = (list) => {\n  return list.sort((a, b) => a - b).filter((x, i, list) => list.indexOf(x) === i);\n};\n\n// Simplify a list of numbers by removing the largest number\n//\n// @param list - a list of numbers\n// @return list without largest number\nconst largest = (list) => {\n  const max = list.reduce((a, b) => b > a? b : a);\n  return list.filter((x, i, list) => x!== max);\n};\n\n// Return a string containing the characters of a list\n//\n// @param list - a list of characters\n// @return string containing characters in the list\nconst stringList = (list) => {\n  const characters = list.join('');\n  return characters.replace(/\\n/g, '');\n};\n\n// Return a string containing the words of a list\n//\n// @param list - a list of words\n// @return string containing words in the list\nconst stringListWords = (list) => {\n  const words = list.reduce((a, b) => a + b.join(' '), '');\n  return words.replace(/\\n/g, '');\n};\n\n// Return a string containing the characters of a list\n//\n// @param list - a list of words\n// @return string containing characters in the list\nconst stringListWordsCharacters = (list) => {\n  const characters = list.reduce((a, b) => a + b, '');\n  return characters.replace(/\\n/g, '');\n};\n\n// Simplify a list of words by sorting and removing duplicates\n//\n// @param list - a list of words\n// @return sorted list without duplicates\nconst uniqueWords = (list) => {\n  return list.sort((a, b) => b.localeCompare(a)).filter((x, i, list) => list.indexOf(x) === i);\n};\n\n// Simplify a list of words by removing the largest word\n//\n// @param list - a list of words\n// @return list without largest word\nconst largestWords = (list) => {\n  const max = list.reduce((a, b) => b.length > a? b.length : a);\n  return list.filter((x, i, list) => x.length!== max);\n};\n\n// Simplify a list of words by removing all but the largest one\n//\n// @param list - a list of words\n// @return list with largest word removed\nconst largestWordsAndRemove = (list) => {\n  const max = list.reduce((a, b) => b.length > a? b.length : a);\n  return list.filter((x, i, list) => x.length!== max);\n};\n\n// Simplify a list of numbers by removing all but the largest one\n//\n// @param list - a list of numbers\n// @return list with largest number removed\nconst largestNumbers = (list) => {\n  const max = list.reduce((a, b) => b > a? b : a);\n  return list.filter((x, i, list) => x!== max);\n};\n\n// Simplify a list of numbers by removing all but the largest two\n//\n// @param list - a list of numbers\n// @return list with largest two removed\nconst largestNumbersAndRemove = (list) => {\n  const max = list.reduce((a, b) => b > a? b : a);\n  return list.filter((x, i, list) => x!== max);\n};\n\n// Simplify a list of numbers by removing all but the largest three\n//\n// @param list - a list of numbers\n// @return list with largest three removed\nconst largestNumbersAndRemove = (list) => {\n  const max = list.reduce((a, b) => b > a? b : a);\n  return list.filter((x, i, list) => x!== max);\n};\n\n// Simplify a list of numbers by removing all but the largest three\n//\n// @param list - a list of numbers\n// @return list with largest three removed\nconst largestNumbersAndRemove = (list) => {\n  const max = list.reduce((a, b) => b > a? b : a);\n  return list.filter((x, i, list) => x!== max);\n};\n\n// Simplify a list of numbers by removing all but the largest three\n//\n// @param list - a list of numbers\n// @return list with largest three removed\nconst largestNumbersAndRemove = (list) => {\n  const max = list.reduce((a, b) => b > a? b : a);\n  return list.filter((x, i, list) => x!== max);\n};\n\n// Simplify a list of numbers by removing all but the largest three\n//\n// @param list - a list of numbers\n// @return list with largest three removed\nconst largestNumbersAndRemove = (list) => {\n  const max = list.reduce((a, b) => b > a? b : a);\n  return list.filter((x, i, list) => x!== max);\n};\n\n// Simplify a list of words by removing all but the largest two\n//\n// @param list - a list of words\n// @return list with largest two removed\nconst largestWordsAndRemove = (list) => {\n  const max = list.reduce((a, b) => b.length > a? b.length : a);\n  return list.filter((x, i, list) => x.length!== max);\n};\n\n// Simplify a list of words by removing all but the largest three\n//\n// @param list - a list of words\n// @return list with largest three removed\nconst largestWordsAndRemove = (list) => {\n  const max = list.reduce((a, b) => b.length >"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterSet = {};\n  string.split('').forEach(char => characterSet[char] = true);\n  return Object.keys(characterSet).length;\n};\n\n/*\n  Given a string, return a boolean indicating if it contains the same character(s) regardless of case.\n  >>> containsAllUppercase('JERRY')\n  true\n  >>> containsAllUppercase('jerry')\n  false\n  >>> containsAllUppercase('jERRY')\n  false\n  >>> containsAllUppercase('JERRY')\n  true\n  >>> containsAllUppercase('JERRYX')\n  false\n  >>> containsAllUppercase('JERRYJERRY')\n  false\n  >>> containsAllUppercase('JERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRYJERRY')\n  true\n  >>> containsAllUppercase('JER"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let beat_list = [];\n  let last_beat = 0;\n  let current_beat = 0;\n  let current_note = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      beat_list.push(current_beat);\n      last_beat = current_beat;\n      current_beat = 0;\n      current_note = 0;\n    } else if (music_string[i] === '|') {\n      beat_list.push(current_beat);\n      last_beat = current_beat;\n      current_beat = 0;\n      current_note = current_note + 1;\n    } else {\n      current_beat = current_beat + 1;\n      current_note = current_note + 1;\n    }\n  }\n  beat_list.push(current_beat);\n  beat_list.push(current_note);\n  return beat_list;\n};\n\n/*\n  Input to this function is a list of integers.\n  Your task is to convert this list to a string representing musical notes in a special ASCII format.\n  \n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> convertToMusic(['4', '2', '1', '2', '2', '1', '1', '1', '4', '4'])\n  'o o| o| o| o| o| o| o| o| o o|'\n  */\nconst convertToMusic = (note_list) => {\n  let beat_string = '';\n  let beat = 0;\n  for (let i = 0; i < note_list.length; i++) {\n    if (note_list[i] === 4) {\n      beat = beat + 4;\n      beat_string += 'o';\n    } else if (note_list[i] === 2) {\n      beat = beat + 2;\n      beat_string += 'o|';\n    } else if (note_list[i] === 1) {\n      beat = beat + 1;\n      beat_string += '.';\n    }\n  }\n  return beat_string;\n};\n\n/*\n  Input to this function is a list of lists, where each inner list represents a set of notes.\n  Your task is to convert the list to a string representing musical notes in a special ASCII format.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> convertToMusic(\n ...     [[4, 2, 1, 2, 2, 1, 1, 1, 4, 4], [2, 2, 1, 2, 1, 2, 1, 2, 1, 1]])\n  'o o| o| o| o| o| o| o| o| o o|'\n  */\nconst convertToMusic2 = (note_list) => {\n  let beat_string = '';\n  for (let i = 0; i < note_list.length; i++) {\n    for (let j = 0; j < note_list[i].length; j++) {\n      if (note_list[i][j] === 4) {\n        beat_string += 'o';\n      } else if (note_list[i][j] === 2) {\n        beat_string += 'o|';\n      } else if (note_list[i][j] === 1) {\n        beat_string += '.';\n      }\n    }\n  }\n  return beat_string;\n};\n\nconst test = () => {\n  console.log(convertToMusic([4, 2, 1, 2, 2, 1, 1, 1, 4, 4]));\n  console.log(convertToMusic([4, 2, 1, 2, 2, 1, 1, 1, 4, 4, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 4, 4]));\n};\n\n//test();\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = string.split(substring).filter(x => x).length;\n  return count;\n};\n\n// Find the longest substring that appears an odd number of times in the original string.\nconst findLongestOdd = (string) => {\n  const all = string.split('');\n  const odd = all.filter(x => x === '?').length;\n  const longest = all.filter(x => x === '?').length;\n  return longest;\n};\n\n/*\n  Find the longest substring that does not appear an odd number of times in the original string.\n  >>> findLongestEven('')\n  ''\n  >>> findLongestEven('aa?')\n  ''\n  >>> findLongestEven('aabb?')\n  'b'\n  >>> findLongestEven('aa?a')\n  ''\n  >>> findLongestEven('aab')\n  'a'\n  */\nconst findLongestEven = (string) => {\n  const all = string.split('');\n  const odd = all.filter(x => x === '?').length;\n  const longest = all.filter(x => x!== '?').reduce((previous, current) => {\n    if (previous.length === longest) {\n      return current;\n    } else {\n      return previous;\n    }\n  }, '');\n  return longest;\n};\n\n// Find the longest substring that contains at least one letter.\nconst findLongestContainingLetters = (string) => {\n  const all = string.split('');\n  const containsLetters = all.filter(x => x.match(/[a-z]/i)).length;\n  const longest = all.reduce((previous, current) => {\n    if (previous.length === longest) {\n      return current;\n    } else {\n      return previous;\n    }\n  }, '');\n  return longest;\n};\n\n/*\n  Find the longest substring that does not contain any letters.\n  >>> findLongestWithoutLetters('')\n  ''\n  >>> findLongestWithoutLetters('a')\n  ''\n  >>> findLongestWithoutLetters('aab')\n  ''\n  >>> findLongestWithoutLetters('abaa')\n  'a'\n  */\nconst findLongestWithoutLetters = (string) => {\n  const all = string.split('');\n  const containsLetters = all.filter(x => x.match(/[a-z]/i)).length;\n  const longest = all.reduce((previous, current) => {\n    if (previous.length === longest) {\n      return current;\n    } else {\n      return previous;\n    }\n  }, '');\n  return longest;\n};\n\n/*\n  Find the longest substring that contains at least one number.\n  >>> findLongestContainingNumbers('')\n  ''\n  >>> findLongestContainingNumbers('a')\n  ''\n  >>> findLongestContainingNumbers('a1')\n  ''\n  >>> findLongestContainingNumbers('a1b2c')\n  '1'\n  */\nconst findLongestContainingNumbers = (string) => {\n  const all = string.split('');\n  const containsNumbers = all.filter(x => x.match(/[0-9]/i)).length;\n  const longest = all.reduce((previous, current) => {\n    if (previous.length === longest) {\n      return current;\n    } else {\n      return previous;\n    }\n  }, '');\n  return longest;\n};\n\n/*\n  Find the longest substring that contains at least one lowercase letter.\n  >>> findLongestContainingLetters('a')\n  'a'\n  >>> findLongestContainingLetters('aa')\n  'aa'\n  >>> findLongestContainingLetters('a1')\n  'a'\n  >>> findLongestContainingLetters('a1b2c')\n  'a'\n  */\nconst findLongestContainingLetters = (string) => {\n  const all = string.split('');\n  const containsLetters = all.filter(x => x.match(/[a-z]/i)).length;\n  const longest = all.reduce((previous, current) => {\n    if (previous.length === longest) {\n      return current;\n    } else {\n      return previous;\n    }\n  }, '');\n  return longest;\n};\n\n/*\n  Find the longest substring that contains at least one uppercase letter.\n  >>> findLongestContainingLetters('A')\n  'A'\n  >>> findLongestContainingLetters('AA')\n  'AA'\n  >>> findLongestContainingLetters('A1')\n  'A'\n  >>> findLongestContainingLetters('A1b2c')\n  'A'\n  */\nconst findLongestContainingLetters = (string) => {\n  const all = string.split('');\n  const containsLetters = all.filter(x => x.match(/[A-Z]/i)).length;\n  const longest = all.reduce((previous, current) => {\n    if (previous.length === longest) {\n      return current;\n    } else {\n      return previous;\n    }\n  }, '');\n  return longest;\n};\n\n/*\n  Find the longest substring that contains at least one uppercase letter.\n  >>> findLongestContainingLetters('A')\n  'A'\n  >>> findLongestContainingLetters('AA')\n  'AA'\n  >>> findLongestContainingLetters('A1')\n  'A1'\n  >>> findLongestContainingLetters('A1b2c')\n  'A1b2c'\n  */\nconst findLongestContainingLetters = (string) => {\n  const all = string.split('');\n  const containsLetters = all.filter(x => x.match(/[A-Z]/i)).length;\n  const longest = all.reduce((previous, current) => {\n    if ("}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  return numbersArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  Input is a string of all uppercase letters.\n  Return the string with uppercase letters sorted from A to Z\n  >>> sortLetters('D')\n  'A'\n  >>> sortLetters('d')\n  'B'\n  >>> sortLetters('Z')\n  'C'\n  >>> sortLetters('z')\n  'D'\n  */\nconst sortLetters = (characters) => {\n  const charactersArray = characters.split('')\n  return charactersArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  Input is a string of all lowercase letters.\n  Return the string with lowercase letters sorted from a to z\n  >>> sortLetters('d')\n  'a'\n  >>> sortLetters('z')\n  'c'\n  >>> sortLetters('a')\n  'b'\n  */\nconst sortLowerCaseLetters = (characters) => {\n  const charactersArray = characters.split('')\n  return charactersArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  Input is a string of all uppercase letters.\n  Return the string with uppercase letters sorted from A to Z\n  >>> sortUpperCaseLetters('D')\n  'A'\n  >>> sortUpperCaseLetters('d')\n  'B'\n  >>> sortUpperCaseLetters('Z')\n  'C'\n  >>> sortUpperCaseLetters('z')\n  'D'\n  */\nconst sortUpperCaseLetters = (characters) => {\n  const charactersArray = characters.split('')\n  return charactersArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  Input is a string of all digits.\n  Return the string with digits sorted from 0 to 9\n  >>> sortDigits('3')\n  '0'\n  >>> sortDigits('9')\n  '1'\n  >>> sortDigits('9')\n  '2'\n  >>> sortDigits('2')\n  '3'\n  */\nconst sortDigits = (characters) => {\n  const charactersArray = characters.split('')\n  return charactersArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  Input is a string of all lowercase letters.\n  Return the string with lowercase letters sorted from a to z\n  >>> sortLowerCaseLetters('d')\n  'a'\n  >>> sortLowerCaseLetters('z')\n  'c'\n  >>> sortLowerCaseLetters('a')\n  'b'\n  */\nconst sortLowerCaseLetters = (characters) => {\n  const charactersArray = characters.split('')\n  return charactersArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  Input is a string of all uppercase letters.\n  Return the string with uppercase letters sorted from A to Z\n  >>> sortUpperCaseLetters('D')\n  'A'\n  >>> sortUpperCaseLetters('d')\n  'B'\n  >>> sortUpperCaseLetters('Z')\n  'C'\n  >>> sortUpperCaseLetters('z')\n  'D'\n  */\nconst sortUpperCaseLetters = (characters) => {\n  const charactersArray = characters.split('')\n  return charactersArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  Input is a string of all digits.\n  Return the string with digits sorted from 0 to 9\n  >>> sortDigits('3')\n  '0'\n  >>> sortDigits('9')\n  '1'\n  >>> sortDigits('9')\n  '2'\n  >>> sortDigits('2')\n  '3'\n  */\nconst sortDigits = (characters) => {\n  const charactersArray = characters.split('')\n  return charactersArray.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closestElements = []\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let x = numbers[i]\n    let y = numbers[i + 1]\n\n    let distance = Math.abs(x - y)\n\n    if (closestElements.length === 0) {\n      closestElements.push([x, y])\n    } else if (distance < Math.abs(closestElements[0][0] - x)) {\n      closestElements.unshift([x, y])\n    } else if (distance > Math.abs(closestElements[closestElements.length - 1][0] - x)) {\n      closestElements.push([x, y])\n    }\n  }\n\n  return closestElements\n}\n\n/*\n  Given a set of numbers, find the largest one and return it.\n  >>> largestNumber([1, 2, 3, 4])\n  4\n  >>> largestNumber([1, 2, 3, 4, 5, 7, 9, 11])\n  9\n  >>> largestNumber([])\n  []\n  */\nconst largestNumber = (numbers) => {\n  let largestNumber = 0\n  let largestNumberIndex = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largestNumber) {\n      largestNumber = numbers[i]\n      largestNumberIndex = i\n    }\n  }\n\n  return largestNumber\n}\n\n/*\n  Given a set of numbers, find the smallest one and return it.\n  >>> smallestNumber([1, 2, 3, 4])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 7, 9, 11])\n  1\n  >>> smallestNumber([])\n  []\n  */\nconst smallestNumber = (numbers) => {\n  let smallestNumber = 9999\n  let smallestNumberIndex = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < smallestNumber) {\n      smallestNumber = numbers[i]\n      smallestNumberIndex = i\n    }\n  }\n\n  return smallestNumber\n}\n\n/*\n  Given a list of numbers (in order) and a number x, return the index of the\n  number that is closest to x.\n  >>> closestIndexTo(0, [1, 2, 3, 4])\n  2\n  >>> closestIndexTo(0, [1, 2, 3, 4, 5, 7, 9, 11])\n  2\n  >>> closestIndexTo(1, [1, 2, 3, 4])\n  0\n  >>> closestIndexTo(1, [1, 2, 3, 4, 5, 7, 9, 11])\n  2\n  >>> closestIndexTo(2, [1, 2, 3, 4])\n  1\n  >>> closestIndexTo(2, [1, 2, 3, 4, 5, 7, 9, 11])\n  1\n  >>> closestIndexTo(3, [1, 2, 3, 4])\n  0\n  >>> closestIndexTo(3, [1, 2, 3, 4, 5, 7, 9, 11])\n  3\n  >>> closestIndexTo(4, [1, 2, 3, 4])\n  0\n  >>> closestIndexTo(4, [1, 2, 3, 4, 5, 7, 9, 11])\n  4\n  >>> closestIndexTo(5, [1, 2, 3, 4])\n  1\n  >>> closestIndexTo(5, [1, 2, 3, 4, 5, 7, 9, 11])\n  5\n  >>> closestIndexTo(6, [1, 2, 3, 4])\n  2\n  >>> closestIndexTo(6, [1, 2, 3, 4, 5, 7, 9, 11])\n  6\n  >>> closestIndexTo(7, [1, 2, 3, 4])\n  2\n  >>> closestIndexTo(7, [1, 2, 3, 4, 5, 7, 9, 11])\n  7\n  >>> closestIndexTo(8, [1, 2, 3, 4])\n  2\n  >>> closestIndexTo(8, [1, 2, 3, 4, 5, 7, 9, 11])\n  8\n  >>> closestIndexTo(9, [1, 2, 3, 4])\n  1\n  >>> closestIndexTo(9, [1, 2, 3, 4, 5, 7, 9, 11])\n  9\n  >>> closestIndexTo(10, [1, 2, 3, 4])\n  1\n  >>> closestIndexTo(10, [1, 2, 3, 4, 5, 7, 9, 11])\n  10\n  >>> closestIndexTo(11, [1, 2, 3, 4])\n  0\n  >>> closestIndexTo(11, [1, 2, 3, 4, 5, 7, 9, 11])\n  11\n  >>> closestIndexTo(12, [1, 2, 3, 4])\n  0\n  >>> closestIndexTo(12, [1, 2, 3, 4, 5, 7, 9, 11])\n  12\n  */\nconst closestIndexTo = (x, numbers) => {\n  let closestIndex = 0\n  let distance = 9999\n\n  for (let i = 0; i < numbers.length; i++) {\n    let n = numbers[i]\n    let distance = Math.abs(x - n)\n\n    if (distance < distance) {\n      distance = distance\n      closestIndex = i\n    }\n  }\n\n  return closestIndex\n}\n\nexport { findClosestElements, largestNumber, smallestNumber, closestIndexTo }\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const length = numbers.length\n  const transformed = []\n  for (let i = 0; i < length; i++) {\n    const value = numbers[i]\n    if (value <= 1) {\n      transformed.push(value)\n    } else {\n      transformed.push(length - 1)\n    }\n  }\n  return transformed\n}\n\n/*\nGiven list of numbers (of at least two elements), apply a non-linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.5, 1.0, 1.5, 2.0]\n*/\nconst rescaleTonUitNonLinear = (numbers) => {\n  const length = numbers.length\n  const transformed = []\n  for (let i = 0; i < length; i++) {\n    const value = numbers[i]\n    if (value <= 1) {\n      transformed.push(value)\n    } else {\n      transformed.push(Math.pow(length - 1, 2) * (length - 1) + value)\n    }\n  }\n  return transformed\n}\n\n/*\nGiven list of numbers (of at least two elements), apply a non-linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.5, 1.0, 1.5, 2.0]\n*/\nconst rescaleTonUitNonLinearNonLinear = (numbers) => {\n  const length = numbers.length\n  const transformed = []\n  for (let i = 0; i < length; i++) {\n    const value = numbers[i]\n    if (value <= 1) {\n      transformed.push(value)\n    } else {\n      transformed.push(Math.pow(length - 1, 2) * (length - 1) + value)\n    }\n  }\n  return transformed\n}\n\n/*\nGiven list of numbers (of at least two elements), apply a non-linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.5, 1.0, 1.5, 2.0]\n*/\nconst rescaleTonUitNonLinearNonLinearNonLinear = (numbers) => {\n  const length = numbers.length\n  const transformed = []\n  for (let i = 0; i < length; i++) {\n    const value = numbers[i]\n    if (value <= 1) {\n      transformed.push(value)\n    } else {\n      transformed.push(Math.pow(length - 1, 2) * (length - 1) + value)\n    }\n  }\n  return transformed\n}\n\n/*\nGiven list of numbers (of at least two elements), apply a non-linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.5, 1.0, 1.5, 2.0]\n*/\nconst rescaleTonUitNonLinearNonLinearNonLinear = (numbers) => {\n  const length = numbers.length\n  const transformed = []\n  for (let i = 0; i < length; i++) {\n    const value = numbers[i]\n    if (value <= 1) {\n      transformed.push(value)\n    } else {\n      transformed.push(Math.pow(length - 1, 2) * (length - 1) + value)\n    }\n  }\n  return transformed\n}\n\n/*\nGiven list of numbers (of at least two elements), apply a non-linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.5, 1.0, 1.5, 2.0]\n*/\nconst rescaleTonUitNonLinearNonLinearNonLinear = (numbers) => {\n  const length = numbers.length\n  const transformed = []\n  for (let i = 0; i < length; i++) {\n    const value = numbers[i]\n    if (value <= 1) {\n      transformed.push(value)\n    } else {\n      transformed.push(Math.pow(length - 1, 2) * (length - 1) + value)\n    }\n  }\n  return transformed\n}\n\nmodule.exports = {\n  rescaleTonUit,\n  rescaleTonUitNonLinear,\n  rescaleTonUitNonLinearNonLinear,\n  rescaleTonUitNonLinearNonLinearNonLinear,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter((item) => {\n    return!isNaN(parseInt(item));\n  });\n};\n\n/*\n  * @returns {array}\n  * @description\n  * Filters given list of all integers\n  * @param {array} list\n  * @returns {array}\n  */\nconst filetrAllInts = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all numbers\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllNumbers = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all values\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllValues = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item)) ||!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllStrings = (list) => {\n  return list.filter((item) => {\n    return isNaN(parseInt(item)) && isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAll = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item)) ||!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllNumbers = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all numbers\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllInts = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllStrings = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item)) ||!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAll = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item)) ||!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllNumbers = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllInts = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllStrings = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item)) ||!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAll = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseInt(item)) ||!isNaN(parseFloat(item));\n  });\n};\n\n/*\n * @returns {array}\n * @description\n * Filters given list of all strings\n * @param {array} list\n * @returns {array}\n */\nconst filetrAllNumbers = (list) => {\n  return list.filter((item) => {\n    return!isNaN(parseFloat(item));\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return first character of given string\n  >>> first_char('abc')\n  'a'\n  >>> first_char('')\n  ''\n  */\nconst first_char = (string) => {\n  return string.charAt(0)\n}\n\n/* Return last character of given string\n  >>> last_char('abc')\n  'c'\n  >>> last_char('')\n  ''\n  */\nconst last_char = (string) => {\n  return string.charAt(string.length - 1)\n}\n\n/* Return reversed string\n  >>> rev('abc')\n  'cba'\n  >>> rev('')\n  ''\n  */\nconst rev = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/* Return reversed string with spaces\n  >>> rev_space('abc')\n 'cba'\n  >>> rev_space('')\n  ''\n  */\nconst rev_space = (string) => {\n  return string.split('').reverse().join(' ')\n}\n\n/* Return string with all letters reversed\n  >>> rev_all('abc')\n  'cba'\n  >>> rev_all('')\n  ''\n  */\nconst rev_all = (string) => {\n  return string.split('').map(letter => {\n    if (letter.length === 1) {\n      return letter\n    }\n    return letter.split('').reverse().join('')\n  }).join('')\n}\n\n/* Return string with all letters reversed with spaces\n  >>> rev_all_space('abc')\n 'cba'\n  >>> rev_all_space('')\n  ''\n  */\nconst rev_all_space = (string) => {\n  return string.split('').map(letter => {\n    if (letter.length === 1) {\n      return letter\n    }\n    return letter.split('').reverse().join(' ')\n  }).join('')\n}\n\n/* Return concatenated string\n  >>> concat('abc', 'def')\n  'abcdef'\n  >>> concat('')\n  ''\n  */\nconst concat = (string1, string2) => {\n  return string1 + string2\n}\n\n/* Return concatenated string with spaces\n  >>> concat_space('abc', 'def')\n  'abc def'\n  >>> concat_space('')\n  ''\n  */\nconst concat_space = (string1, string2) => {\n  return string1 +'' + string2\n}\n\n/* Return string with all letters removed\n  >>> delete_all('abc')\n  'a'\n  >>> delete_all('')\n  ''\n  */\nconst delete_all = (string) => {\n  return string.replace(/[^a-z]+/gi, '')\n}\n\n/* Return string with all letters removed with spaces\n  >>> delete_all_space('abc')\n  'a'\n  >>> delete_all_space('')\n  ''\n  */\nconst delete_all_space = (string) => {\n  return string.replace(/[^a-z ]+/gi, '')\n}\n\n/* Return substring starting from index\n  >>> substr('abc', 0)\n  'abc'\n  >>> substr('abc', 2)\n  'c'\n  >>> substr('abc', 4)\n  ''\n  */\nconst substr = (string, index) => {\n  return string.substr(index)\n}\n\n/* Return substring starting from index with spaces\n  >>> substr_space('abc', 0)\n  'abc'\n  >>> substr_space('abc', 2)\n  'c'\n  >>> substr_space('abc', 4)\n  ''\n  */\nconst substr_space = (string, index) => {\n  return string.substr(index)\n}\n\n/* Return substring ending with index\n  >>> substr_end('abc', 0)\n  'abc'\n  >>> substr_end('abc', 2)\n  'c'\n  >>> substr_end('abc', 4)\n  ''\n  */\nconst substr_end = (string, index) => {\n  return string.substr(0, index)\n}\n\n/* Return substring ending with index with spaces\n  >>> substr_end_space('abc', 0)\n  'abc'\n  >>> substr_end_space('abc', 2)\n  'c'\n  >>> substr_end_space('abc', 4)\n  ''\n  */\nconst substr_end_space = (string, index) => {\n  return string.substr(0, index)\n}\n\n/* Return substring starting at given index and ending with index\n  >>> substr_start_end('abc', 1, 2)\n  'bc'\n  >>> substr_start_end('abc', 1, 4)\n  'bc'\n  >>> substr_start_end('abc', 2, 4)\n  ''\n  */\nconst substr_start_end = (string, index, length) => {\n  return string.substr(index, length)\n}\n\n/* Return substring starting at given index with spaces\n  >>> substr_start_end_space('abc', 1, 2)\n  'bc'\n  >>> substr_start_end_space('abc', 1, 4)\n  'bc'\n  >>> substr_start_end_space('abc', 2, 4)\n  ''\n  */\nconst substr_start_end_space = (string, index, length) => {\n  return string.substr(index, length)\n}\n\n/* Return substring starting at given index and ending with index\n  >>> substr_start('abc', 1, 2)\n  'bc'\n  >>> substr_start('abc', 1, 4)\n  'bc'\n  >>> substr_start('abc', 2, 4)\n  ''\n  */\nconst substr_start = (string, index, length) => {\n  return string.substr(index)\n}\n\n/* Return substring starting with index with spaces\n  >>> substr_start_space('abc', 1, 2)\n  'bc'\n  >>> substr_start_space('abc', 1, 4)\n  'bc'\n  >>> substr_start_space('abc', 2, 4)\n  ''\n  */\nconst substr"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res = Math.max(res, i);\n    }\n  }\n  return res;\n};\n\n// ### Solution 1\n// Let's use the largest divisor to find the smallest factor.\n// We don't need to worry about the fact that 1 is a factor\n// of n, because n is not divisible by 1.\n//\n// For example, for n = 15, largest divisor is 5.\n// Let's say we found the largest divisor.\n//\n// Now we can just start adding numbers until we find the number\n// that is evenly divisible by all the factors.\n//\n// Let's start with largestDivisor = 5.\n//\n// We can add 1 to 5, since 5 is evenly divisible by 1.\n// Let's add 2 to 5, since 5 is evenly divisible by 2.\n//\n// We can add 3 to 5, since 5 is evenly divisible by 3.\n//\n// We can add 4 to 5, since 5 is evenly divisible by 4.\n//\n// We can add 6 to 5, since 5 is evenly divisible by 6.\n//\n// We can add 7 to 5, since 5 is evenly divisible by 7.\n//\n// We can add 8 to 5, since 5 is evenly divisible by 8.\n//\n// We can add 9 to 5, since 5 is evenly divisible by 9.\n//\n// We can add 10 to 5, since 5 is evenly divisible by 10.\n//\n// We can add 11 to 5, since 5 is evenly divisible by 11.\n//\n// We can add 12 to 5, since 5 is evenly divisible by 12.\n//\n// We can add 13 to 5, since 5 is evenly divisible by 13.\n//\n// We can add 14 to 5, since 5 is evenly divisible by 14.\n//\n// We can add 15 to 5, since 5 is evenly divisible by 15.\n//\n// We are done!\n//\n// For example, for n = 15, largest divisor is 5.\n// Let's say we found the largest divisor.\n//\n// Now we can start adding numbers until we find the number\n// that is evenly divisible by all the factors.\n//\n// Let's start with largestDivisor = 5.\n//\n// We can add 1 to 5, since 5 is evenly divisible by 1.\n// Let's add 2 to 5, since 5 is evenly divisible by 2.\n//\n// We can add 3 to 5, since 5 is evenly divisible by 3.\n//\n// We can add 4 to 5, since 5 is evenly divisible by 4.\n//\n// We can add 6 to 5, since 5 is evenly divisible by 6.\n//\n// We can add 7 to 5, since 5 is evenly divisible by 7.\n//\n// We can add 8 to 5, since 5 is evenly divisible by 8.\n//\n// We can add 9 to 5, since 5 is evenly divisible by 9.\n//\n// We can add 10 to 5, since 5 is evenly divisible by 10.\n//\n// We can add 11 to 5, since 5 is evenly divisible by 11.\n//\n// We can add 12 to 5, since 5 is evenly divisible by 12.\n//\n// We can add 13 to 5, since 5 is evenly divisible by 13.\n//\n// We can add 14 to 5, since 5 is evenly divisible by 14.\n//\n// We can add 15 to 5, since 5 is evenly divisible by 15.\n//\n// We are done!\n//\n// For example, for n = 15, largest divisor is 5.\n// Let's say we found the largest divisor.\n//\n// Now we can start adding numbers until we find the number\n// that is evenly divisible by all the factors.\n//\n// Let's start with largestDivisor = 5.\n//\n// We can add 1 to 5, since 5 is evenly divisible by 1.\n// Let's add 2 to 5, since 5 is evenly divisible by 2.\n//\n// We can add 3 to 5, since 5 is evenly divisible by 3.\n//\n// We can add 4 to 5, since 5 is evenly divisible by 4.\n//\n// We can add 6 to 5, since 5 is evenly divisible by 6.\n//\n// We can add 7 to 5, since 5 is evenly divisible by 7.\n//\n// We can add 8 to 5, since 5 is evenly divisible by 8.\n//\n// We can add 9 to 5, since 5 is evenly divisible by 9.\n//\n// We can add 10 to 5, since 5 is evenly divisible by 10.\n//\n// We can add 11 to 5, since 5 is evenly divisible by 11.\n//\n// We can add 12 to 5, since 5 is evenly divisible by 12.\n//\n// We can add 13 to 5, since 5 is evenly divisible by 13.\n//\n// We can add 14 to 5, since 5 is evenly divisible by 14.\n//\n// We can add 15 to 5, since 5 is evenly divisible by 15.\n//\n// We are done!\n//\n// For example, for n = 15, largest divisor is 5.\n// Let's say we found the largest divisor.\n//\n// Now we can start adding numbers until we find the number\n// that is evenly divisible by all the factors.\n//\n// Let's start with largestDivisor = 5.\n//\n// We can add 1 to 5, since 5 is evenly divisible by 1.\n// Let's add 2 to 5, since 5 is evenly divisible by 2.\n//\n// We can add 3 to 5, since 5 is evenly divisible by 3.\n//\n// We can add 4 to 5, since 5 is evenly divisible by 4.\n//\n// We can add 6 to 5, since 5 is evenly divisible by 6.\n//\n// We can add 7 to 5, since 5 is evenly divisible by 7.\n//\n// We can add 8 to 5, since 5 is evenly divisible by 8.\n//\n// We can add 9 to 5, since 5 is evenly divisible by 9.\n//\n// We can add 10 to 5, since 5 is evenly divisible by 10.\n//\n// We can add 11 to 5, since 5 is evenly divisible by 11.\n//\n// We can add 12 to 5, since 5 is evenly divisible by 12.\n//\n// We"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let factor = (x) => {\n    let y = x\n    while(y > 1) {\n      let next = y\n      while(next > 1) {\n        if(next % y === 0) {\n          let z = next\n          while(z > 1) {\n            factors.push(z)\n            z = z / y\n          }\n          break\n        }\n        next = next / y\n      }\n      y = y / x\n    }\n  }\n  factor(n)\n  return factors\n}\n\n/* Return all the prime factors of a number n.\n  Note that n can be of any type.\n  >>> prime_factors(1)\n  []\n  >>> prime_factors(1)\n  [1]\n  >>> prime_factors(2)\n  [2]\n  >>> prime_factors(4)\n  [2, 2]\n  >>> prime_factors(7)\n  [7]\n  >>> prime_factors(8)\n  [2, 2, 2]\n  */\nconst prime_factors = (n) => {\n  let factors = []\n  let factor = (x) => {\n    let y = x\n    while(y > 1) {\n      if(is_prime(y)) {\n        factors.push(y)\n        break\n      }\n      y = y / x\n    }\n  }\n  factor(n)\n  return factors\n}\n\n/* Return list of numbers that are not prime.\n  Input number should be equal to the product of all prime factors\n  >>> non_prime_numbers(8)\n  [2, 5]\n  >>> non_prime_numbers(10)\n  [2, 5, 7]\n  >>> non_prime_numbers(30)\n  [2, 3, 5, 7, 11]\n  */\nconst non_prime_numbers = (n) => {\n  let factors = prime_factors(n)\n  let numbers = []\n  let non_prime = (x) => {\n    let y = x\n    while(y > 1) {\n      if(!is_prime(y)) {\n        numbers.push(y)\n        break\n      }\n      y = y / x\n    }\n  }\n  non_prime(factors[0])\n  for(let i = 1; i < factors.length; i++) {\n    non_prime(factors[i])\n  }\n  return numbers\n}\n\n/* Return the number of prime numbers that divide n.\n  Input number should be equal to the product of all prime factors\n  >>> divide(8)\n  4\n  >>> divide(10)\n  5\n  >>> divide(30)\n  8\n  >>> divide(100)\n  15\n  >>> divide(1000)\n  35\n  */\nconst divide = (n) => {\n  let factors = prime_factors(n)\n  let total = 1\n  for(let i = 0; i < factors.length; i++) {\n    total *= factors[i]\n  }\n  return total\n}\n\n/* Return the number of numbers that are not prime numbers that divide n.\n  Input number should be equal to the product of all prime factors\n  >>> divide_non_prime(8)\n  2\n  >>> divide_non_prime(10)\n  2\n  >>> divide_non_prime(30)\n  2\n  >>> divide_non_prime(100)\n  2\n  >>> divide_non_prime(1000)\n  2\n  */\nconst divide_non_prime = (n) => {\n  let factors = prime_factors(n)\n  let total = 1\n  for(let i = 0; i < factors.length; i++) {\n    total *= factors[i]\n  }\n  let non_prime_numbers = non_prime_numbers(n)\n  let total_non_prime = 1\n  for(let i = 0; i < non_prime_numbers.length; i++) {\n    total_non_prime *= non_prime_numbers[i]\n  }\n  return total / total_non_prime\n}\n\n/* Return the sum of all the multiples of n that are not prime.\n  Input number should be equal to the product of all prime factors\n  >>> sum_non_prime(8)\n  8\n  >>> sum_non_prime(10)\n  20\n  >>> sum_non_prime(30)\n  120\n  >>> sum_non_prime(100)\n  800\n  >>> sum_non_prime(1000)\n  3200\n  */\nconst sum_non_prime = (n) => {\n  let factors = prime_factors(n)\n  let total = 1\n  for(let i = 0; i < factors.length; i++) {\n    total *= factors[i]\n  }\n  let non_prime_numbers = non_prime_numbers(n)\n  let total_non_prime = 1\n  for(let i = 0; i < non_prime_numbers.length; i++) {\n    total_non_prime *= non_prime_numbers[i]\n  }\n  return total * total_non_prime\n}\n\n/* Return the product of all the multiples of n that are not prime.\n  Input number should be equal to the product of all prime factors\n  >>> product_non_prime(8)\n  64\n  >>> product_non_prime(10)\n  10240\n  >>> product_non_prime(30)\n  30240\n  >>> product_non_prime(100)\n  100800\n  >>> product_non_prime(1000)\n  10400000\n  */\nconst product_non_prime = (n) => {\n  let factors = prime_factors(n)\n  let total = 1\n  for(let i = 0; i < factors.length; i++) {\n    total *= factors[i]\n  }\n  let non_prime_numbers = non_prime_n"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (set.has(numbers[i])) {\n      continue;\n    }\n    set.add(numbers[i]);\n  }\n  return [...set];\n};\n\n// From a list of strings, remove all elements that appear more than once.\nconst removeDuplicates = (strings) => {\n  const set = new Set();\n  for (let i = 0; i < strings.length; i++) {\n    if (set.has(strings[i])) {\n      continue;\n    }\n    set.add(strings[i]);\n  }\n  return [...set];\n};\n\nmodule.exports = {\n  removeDuplicates\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => {\n    return letter.toUpperCase();\n  });\n};\n\n/*\n  Returns the string, with spaces at the beginning of each line.\n  >>> stringWithSpaces('Hello')\n '  Hello'\n  */\nconst stringWithSpaces = (string) => {\n  return string.split('\\n').map(string => {\n    return `${string}   `;\n  }).join('\\n');\n};\n\nmodule.exports = {\n  flipCase,\n  stringWithSpaces\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  const list = Array.isArray(strings)? strings : [strings];\n  return list.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Given a list of strings, return a list of tuples.\n  The tuples are constructed using a function.\n  The function takes a string and returns a tuple.\n  >>> tuplelist([], (x) => (x, x))\n  []\n  >>> tuplelist(['a', 'b', 'c'], (x) => (x, x))\n  [('a', 'a'), ('b', 'b'), ('c', 'c')]\n  */\nconst tuplelist = (strings, f) => {\n  const list = Array.isArray(strings)? strings : [strings];\n  return list.map(f);\n};\n\n/*\n  Given a list of tuples, return a list of strings.\n  The tuples are constructed using a function.\n  The function takes a tuple and returns a string.\n  >>> strlist(tuplelist([], (x, y) => (x, y)))\n  []\n  >>> strlist(tuplelist([('a', 'a'), ('b', 'b'), ('c', 'c')], (x, y) => (x, y)))\n  ['a', 'b', 'c']\n  */\nconst strlist = (tuples, f) => {\n  const list = Array.isArray(tuples)? tuples : [tuples];\n  return list.map(f);\n};\n\n/*\n  Given a list of strings, return a list of words.\n  A word is a string that contains no whitespace.\n  The words are constructed using a function.\n  The function takes a string and returns a boolean.\n  >>> wordlist(['a', 'b', 'c'], (x) => x.match(/[a-z]+/i))\n  [true, true, true]\n  >>> wordlist(['a', 'b', 'c'], (x) => x.match(/[a-z]+/))\n  [true, true, true]\n  */\nconst wordlist = (strings, f) => {\n  const list = Array.isArray(strings)? strings : [strings];\n  return list.map(f);\n};\n\n/*\n  Given a list of words, return a list of tuples.\n  The tuples are constructed using a function.\n  The function takes a string and a boolean.\n  If the boolean is true, then the string is considered to be a word.\n  Otherwise, the string is considered to be a word.\n  >>> twordlist(['a', 'b', 'c'], (x, isword) => (isword? (x, x) : (x, x)))\n  [('a', 'a'), ('b', 'b'), ('c', 'c')]\n  */\nconst twordlist = (words, f) => {\n  const list = Array.isArray(words)? words : [words];\n  return list.map(f);\n};\n\n/*\n  Given a list of words, return a list of tuples.\n  The tuples are constructed using a function.\n  The function takes a tuple and a boolean.\n  If the boolean is true, then the tuple is considered to be a word.\n  Otherwise, the tuple is considered to be a word.\n  >>> twordlist(['a', 'b', 'c'], (x, isword) => (isword? (x, x) : (x, x)))\n  [('a', 'a'), ('b', 'b'), ('c', 'c')]\n  */\nconst twordlist = (words, f) => {\n  const list = Array.isArray(words)? words : [words];\n  return list.map(f);\n};\n\n/*\n  Given a list of words, return a list of lists.\n  The lists are constructed using a function.\n  The function takes a string and a boolean.\n  If the boolean is true, then the string is considered to be a word.\n  Otherwise, the string is considered to be a word.\n  >>> twordlistlist(['a', 'b', 'c'], (x, isword) => (isword? [x, x] : [x, x]))\n  [['a', 'a'], ['b', 'b'], ['c', 'c']]\n  */\nconst twordlistlist = (words, f) => {\n  const list = Array.isArray(words)? words : [words];\n  return list.map(f);\n};\n\n/*\n  Given a list of tuples, return a list of lists.\n  The lists are constructed using a function.\n  The function takes a tuple and a boolean.\n  If the boolean is true, then the tuple is considered to be a word.\n  Otherwise, the tuple is considered to be a word.\n  >>> twordlistlist(['a', 'b', 'c'], (x, isword) => (isword? [x, x] : [x, x]))\n  [[['a', 'a'], ['b', 'b']], [['c', 'c']]]\n  */\nconst twordlistlist = (tuples, f) => {\n  const list = Array.isArray(tuples)? tuples : [tuples];\n  return list.map(f);\n};\n\n/*\n  Given a list of lists, return a list of lists.\n  The lists are constructed using a function.\n  The function takes a list and a boolean.\n  If the boolean is true, then the list is considered to be a word.\n  Otherwise, the list is considered to be a word.\n  >>> twordlistlistlist([['a', 'a'], ['b', 'b'], ['c', 'c']], (x, isword) => (isword? x : x))\n  [[['a', 'a'], ['b', 'b']], [['c', 'c']]]\n  */\nconst twordlistlistlist = (lists, f) => {\n  const list = Array.isArray(lists)? lists : [lists];\n  return list.map(f);\n};\n\n/*\n  Given a list of words, return a list of strings.\n  The strings are constructed using a function.\n  The function takes"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n    return (strings || []).filter(str => str.indexOf(prefix) === 0)\n}\n\n/*\n  * Filter an input list of objects for those who match a predicate.\n  *\n  * @param {Array} list\n  * @param {Function} predicate\n  *\n  * @returns {Array}\n  *\n  * @example\n  * const isEmpty = list => list.length === 0\n  * const isEmptyArray = list => list.every(el => el === null)\n  * const isEmptyString = list => list.every(el => el === '')\n  *\n  * isEmpty([1, 2, 3])\n  * // => false\n  *\n  * isEmptyArray([1, 2, 3])\n  * // => false\n  *\n  * isEmptyString([1, 2, 3])\n  * // => false\n  *\n  * isEmpty(['a', 'b', 'c'])\n  * // => true\n  *\n  * isEmpty(['a', 'b', 'c', null])\n  * // => false\n  */\nconst iflterPredicate = (list, predicate) => {\n    return (list || []).filter(predicate)\n}\n\n/*\n  * Filter an input list of objects for those who match a predicate and\n  * return an array of their indexes.\n  *\n  * @param {Array} list\n  * @param {Function} predicate\n  *\n  * @returns {Array}\n  *\n  * @example\n  * const isEmpty = list => list.length === 0\n  * const isEmptyArray = list => list.every(el => el === null)\n  * const isEmptyString = list => list.every(el => el === '')\n  *\n  * isEmpty([1, 2, 3])\n  * // => false\n  *\n  * isEmptyArray([1, 2, 3])\n  * // => false\n  *\n  * isEmptyString([1, 2, 3])\n  * // => false\n  *\n  * isEmpty(['a', 'b', 'c'])\n  * // => true\n  *\n  * isEmpty(['a', 'b', 'c', null])\n  * // => false\n  */\nconst iflterIndexPredicate = (list, predicate) => {\n    return (list || []).filter(predicate).map(el => el.index)\n}\n\n/*\n  * Filter an input list of objects for those who match a predicate and\n  * return an array of their indexes.\n  *\n  * @param {Array} list\n  * @param {Function} predicate\n  *\n  * @returns {Array}\n  *\n  * @example\n  * const isEmpty = list => list.length === 0\n  * const isEmptyArray = list => list.every(el => el === null)\n  * const isEmptyString = list => list.every(el => el === '')\n  *\n  * isEmpty([1, 2, 3])\n  * // => false\n  *\n  * isEmptyArray([1, 2, 3])\n  * // => false\n  *\n  * isEmptyString([1, 2, 3])\n  * // => false\n  *\n  * isEmpty(['a', 'b', 'c'])\n  * // => true\n  *\n  * isEmpty(['a', 'b', 'c', null])\n  * // => false\n  */\nconst iflterIndexPredicate2 = (list, predicate) => {\n    return (list || []).filter(predicate).map(el => el.index)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = []\n  l.forEach((e) => {\n    if (e > 0) {\n      positive.push(e)\n    }\n  })\n  return positive\n}\n\nmodule.exports = getPositive\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/**\n * Given a list of primes, return the sum of all the primes in that list.\n *\n *  >>> siPrimeSum(6, 10)\n *  20\n *  >>> siPrimeSum(6, 1)\n *  6\n *  >>> siPrimeSum(6, 3)\n *  7\n *  >>> siPrimeSum(6, 4)\n *  9\n *  >>> siPrimeSum(6, 11)\n *  20\n *  >>> siPrimeSum(6, 12)\n *  21\n *  >>> siPrimeSum(6, 13)\n *  24\n *  >>> siPrimeSum(6, 14)\n *  25\n *  >>> siPrimeSum(6, 15)\n *  30\n *  >>> siPrimeSum(6, 16)\n *  31\n *  >>> siPrimeSum(6, 17)\n *  34\n *  >>> siPrimeSum(6, 18)\n *  35\n *  >>> siPrimeSum(6, 19)\n *  38\n *  >>> siPrimeSum(6, 20)\n *  39\n *  >>> siPrimeSum(6, 21)\n *  42\n *  >>> siPrimeSum(6, 22)\n *  43\n *  >>> siPrimeSum(6, 23)\n *  46\n *  >>> siPrimeSum(6, 24)\n *  47\n *  >>> siPrimeSum(6, 25)\n *  50\n *  >>> siPrimeSum(6, 26)\n *  51\n *  >>> siPrimeSum(6, 27)\n *  54\n *  >>> siPrimeSum(6, 28)\n *  55\n *  >>> siPrimeSum(6, 29)\n *  58\n *  >>> siPrimeSum(6, 30)\n *  59\n *  >>> siPrimeSum(6, 31)\n *  62\n *  >>> siPrimeSum(6, 32)\n *  63\n *  >>> siPrimeSum(6, 33)\n *  66\n *  >>> siPrimeSum(6, 34)\n *  67\n *  >>> siPrimeSum(6, 35)\n *  70\n *  >>> siPrimeSum(6, 36)\n *  71\n *  >>> siPrimeSum(6, 37)\n *  74\n *  >>> siPrimeSum(6, 38)\n *  75\n *  >>> siPrimeSum(6, 39)\n *  78\n *  >>> siPrimeSum(6, 40)\n *  79\n *  >>> siPrimeSum(6, 41)\n *  82\n *  >>> siPrimeSum(6, 42)\n *  83\n *  >>> siPrimeSum(6, 43)\n *  86\n *  >>> siPrimeSum(6, 44)\n *  87\n *  >>> siPrimeSum(6, 45)\n *  90\n *  >>> siPrimeSum(6, 46)\n *  91\n *  >>> siPrimeSum(6, 47)\n *  94\n *  >>> siPrimeSum(6, 48)\n *  95\n *  >>> siPrimeSum(6, 49)\n *  98\n *  >>> siPrimeSum(6, 50)\n *  99\n *  >>> siPrimeSum(6, 51)\n *  102\n *  >>> siPrimeSum(6, 52)\n *  103\n *  >>> siPrimeSum(6, 53)\n *  106\n *  >>> siPrimeSum(6, 54)\n *  107\n *  >>> siPrimeSum(6, 55)\n *  110\n *  >>> siPrimeSum(6, 56)\n *  111\n *  >>> siPrimeSum(6, 57)\n *  114\n *  >>> siPrimeSum(6, 58)\n *  115\n *  >>> siPrimeSum(6, 59)\n *  118\n *  >>> siPrimeSum(6, 60)\n *  119\n *  >>> siPrimeSum(6, 61)\n *  122\n *  >>> siPrimeSum(6, 62)\n *  123\n *  >>> siPrimeSum(6, 63)\n *  126\n *  >>> siPrimeSum(6, 64)\n *  127\n *  >>> siPrimeSum(6, 65)\n *  130\n *  >>> siPrimeSum(6, 66)\n *  131\n *  >>> siPrimeSum(6, 67)\n *  134\n *  >>> siPrimeSum(6, 68)\n *  135\n *  >>> siPrimeSum(6, 69)\n *  138\n *  >>> siPrimeSum(6, 70)\n *  139\n *  >>> siPrimeSum(6, 71)\n *  142\n *  >>> siPrimeSum(6, 72)\n *  143\n *  >>> siPrimeSum(6, 73)\n *  146\n *  >>> siPrimeSum(6, 74)\n *  147\n *  >>> siPrimeSum(6, 75)\n *  150\n *  >>> siPrimeSum(6, 76)\n *  151\n *  >>> siPrimeSum(6, 77)\n *  154\n *  >>> siPrimeSum(6, 78)\n *  155\n *  >>> siPrimeSum(6, 79)\n *  158\n *  >>> siPrimeSum(6, 80)\n *  159\n *  >>> siPrimeSum(6, 81)\n *  162\n *  >>> siPrimeSum(6, 82)\n *  163\n *  >>> siPrimeSum(6, 83)\n *  166\n *  >>> siPrimeSum(6, 84)\n *  167\n *  >>> siPrimeSum(6, 85)\n *  170\n *  >>> siPrimeSum(6, 86)\n *  171\n *  >>> siPrimeSum(6, 87)\n *  174\n *  >>> siPrimeSum(6, 88)\n *  175\n *  >>> siPrimeSum(6, 89)\n *  178\n *  >>> siPrimeSum(6, 90)\n *  179\n *  >>> siPrimeSum(6, 91)"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  if (len % 2!= 0) {\n    return null\n  }\n  const poly = poly(xs, 1)\n  if (poly === 0) {\n    return 1\n  }\n  let index = 0\n  let x = 2\n  while (poly!== 0) {\n    if (poly === -1) {\n      return x\n    }\n    index++\n    x += 1\n    poly = poly(xs, x)\n  }\n  return null\n}\n\n/*\n  Find root of the polynomial with the given coefficients.\n  This function takes only list of coefficients and returns\n  only root of the polynomial.\n  >>> round(findRoot([2, -1, 2, 3]), 2)\n  1.5\n  >>> round(findRoot([2, -1, 2, 3, 1]), 2)\n  1.0\n  >>> round(findRoot([2, -1, 2, 3, 1, 1]), 2)\n  1.5\n  >>> round(findRoot([1, -1, 2, -2]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.5\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 2)\n  -1.0\n  >>> round(findRoot([1, -1, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = [],\n    i,\n    j,\n    temp,\n    k,\n    temp2;\n  for (i = 0; i < l.length - 1; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  for (i = l.length - 1; i > 0; i--) {\n    if (i % 3 === 0) {\n      sorted.push(l[i]);\n    }\n  }\n  return sorted;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  if (!l) {\n    return []\n  }\n  let sorted = l.sort()\n  let uniq = []\n  for (let i = 0; i < sorted.length; i++) {\n    if (uniq.indexOf(sorted[i]) === -1) {\n      uniq.push(sorted[i])\n    }\n  }\n  return uniq\n}\n\n/*Return list of all numbers from start to end (inclusive)\n  >>> range(1, 10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> range(1, 9, 2)\n  [1, 3, 5, 7, 9]\n  */\nconst range = (start, end) => {\n  if (typeof start === 'number') {\n    start = start < 0? start + end : start\n    end = end || start\n  }\n  let result = []\n  for (let i = start; i < end; i++) {\n    result.push(i)\n  }\n  return result\n}\n\n/*Return random element from list\n  >>> shuffle([1, 2, 3, 4, 5])\n  2\n  >>> shuffle([1, 2, 3, 4, 5])\n  4\n  >>> shuffle([])\n  >>>\n  */\nconst shuffle = (l) => {\n  let r = l.slice()\n  let temp = r.splice(0, 1)\n  while (temp.length) {\n    let rIndex = Math.floor(Math.random() * (r.length))\n    let rItem = r.splice(rIndex, 1)\n    let tempItem = temp.splice(0, 1)\n    let tempIndex = Math.floor(Math.random() * (temp.length))\n    temp.splice(tempIndex, 0, rItem[0])\n  }\n  return r[0]\n}\n\n/*Return shuffled copy of list\n  >>> shuffle([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> shuffle([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> shuffle([])\n  >>>\n  */\nconst shuffleInPlace = (l) => {\n  let r = l.slice()\n  let temp = r.splice(0, 1)\n  while (temp.length) {\n    let rIndex = Math.floor(Math.random() * (r.length))\n    let rItem = r.splice(rIndex, 1)\n    let tempItem = temp.splice(0, 1)\n    let tempIndex = Math.floor(Math.random() * (temp.length))\n    temp.splice(tempIndex, 0, rItem[0])\n  }\n  return r\n}\n\nmodule.exports = {\n  findIndex,\n  findLastIndex,\n  find,\n  findLast,\n  every,\n  all,\n  some,\n  sum,\n  min,\n  max,\n  flatten,\n  uniq,\n  range,\n  shuffle,\n  shuffleInPlace\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  return l.reduce((acc, x) => Math.max(acc, x), 0);\n};\n\n/*\n  >>> isPrime([1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  true\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251])\n  false\n  >>> isPrime([2, 3, 5, 7, 11"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 1\n  return 0\n}\n\nconsole.log(fizzBuzz(100))\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  const l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l2.push(l[i])\n    } else {\n      l2.push(l[i])\n    }\n  }\n  return l2\n}\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l2.push(l[i])\n    } else {\n      l2.push(l[i])\n    }\n  }\n  l2.sort()\n  return l2\n}\n\nconst test = () => {\n  console.log(sotrEven([1, 2, 3]))\n  console.log(sortEven([1, 2, 3]))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  return groups.join('');\n}\n\nconst encode = (s) => encode_cyclic(s);\nconst decode = (s) => decodeCyclic(s);\n\nexport { encode, decode };\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  return n + fib(n - 1) + fib(n - 2)\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) {\n    return false;\n  }\n\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum = l[i] + sum;\n    if (sum === 0) {\n      result.push(l[i]);\n    }\n  }\n\n  if (result.length === 3) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let colliding = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (acrRacel(i, j)) {\n        colliding += 1;\n      }\n    }\n  }\n  return colliding;\n}\n\nexport default acrRacelColision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [...l];\n  for (let i = 0; i < newList.length - 1; i++) {\n    newList[i + 1] = newList[i] + 1;\n  }\n  return newList;\n};\n\nexport default incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n    let sum = 0;\n    let i = 0;\n    for (; i < l.length - 1; i++) {\n        sum += l[i];\n    }\n    if (sum === 0) {\n        sum = l[i];\n    }\n    else if (sum!== 0) {\n        return false;\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n\n  let number = x;\n  while (number >= base) {\n    number -= base;\n  }\n  number = number.toString();\n  while (number.length < base.length) {\n    number = '0' + number;\n  }\n  return number;\n};\n\n/*\n  Given a string and an integer n, return a string of n upper-case\n  characters.\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], 3)\n  'DEFG'\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], 5)\n  'ABCDEFGHI'\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], 0)\n  ''\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], -1)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], 4)\n  'ABCD'\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], 2)\n  'abcd'\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], 1)\n  'a'\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], 3)\n  'DEF'\n  >>> upperCaseStrings(['abc', 'def', 'ghi'], 10)\n  'ABCDEFGHI'\n  */\nconst upperCaseStrings = (strings, n) => {\n  if (n < 0 || n > strings.length) {\n    throw new IndexError('string index out of range');\n  }\n\n  if (n === 0) {\n    return '';\n  }\n\n  let stringsUpperCase = [];\n  for (let i = 0; i < n; i++) {\n    stringsUpperCase.push(strings[i].toUpperCase());\n  }\n  return stringsUpperCase.join('');\n};\n\n/*\n  Given a string and an integer n, return a string of n lower-case\n  characters.\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], 3)\n  'abcdef'\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], 5)\n  'abcdefghi'\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], 0)\n  ''\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], -1)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], 4)\n  'abcd'\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], 2)\n  'abcd'\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], 1)\n  'a'\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], 3)\n  'abc'\n  >>> lowerCaseStrings(['ABC', 'DEF', 'GHI'], 10)\n  'abcdefghi'\n  */\nconst lowerCaseStrings = (strings, n) => {\n  if (n < 0 || n > strings.length) {\n    throw new IndexError('string index out of range');\n  }\n\n  if (n === 0) {\n    return '';\n  }\n\n  let stringsLowerCase = [];\n  for (let i = 0; i < n; i++) {\n    stringsLowerCase.push(strings[i].toLowerCase());\n  }\n  return stringsLowerCase.join('');\n};\n\n/*\n  Given a string and an integer n, return a string of n pairs of\n  upper-case and lower-case characters, with n equal to the length\n  of the string.\n  >>> pairStrings(['abc', 'def', 'ghi'], 3)\n  'ABCdefGHI'\n  >>> pairStrings(['abc', 'def', 'ghi'], 5)\n  'ABCDEFGHI'\n  >>> pairStrings(['abc', 'def', 'ghi'], 0)\n  ''\n  >>> pairStrings(['abc', 'def', 'ghi'], -1)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> pairStrings(['abc', 'def', 'ghi'], 4)\n  'abcd'\n  >>> pairStrings(['abc', 'def', 'ghi'], 2)\n  'abcd'\n  >>> pairStrings(['abc', 'def', 'ghi'], 1)\n  'a'\n  >>> pairStrings(['abc', 'def', 'ghi'], 3)\n  'ABCdefGHI'\n  >>> pairStrings(['abc', 'def', 'ghi'], 10)\n  'ABCDEFGHI'\n  */\nconst pairStrings = (strings, n) => {\n  if (n < 0 || n > strings.length) {\n    throw new IndexError('string index out of range');\n  }\n\n  if (n === 0) {\n    return '';\n  }\n\n  let stringsPair = [];\n  for (let i = 0; i < n; i++) {\n    stringsPair.push(strings[i].toUpperCase() + strings[i].toLowerCase());\n  }\n  return stringsPair.join('');\n};\n\n/*\n  Given a string and an integer n, return a string of n space characters.\n  >>> spaces(3)\n '  '\n  >>> spaces(5)\n '    '\n  >>> spaces(0)\n  ''\n  >>> spaces(1)\n ''\n  >>> spaces(2)\n ' '\n  >>> spaces(3)\n '  '\n  >>> spaces(10)\n '       '\n  */\nconst spaces = ("}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 2) return n;\n  return fib4(n - 2) + fib4(n - 1) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = Array.from(l).sort();\n  const middle = Math.floor(sorted.length / 2);\n  const min = sorted[middle - 1];\n  const max = sorted[middle];\n  if (sorted.length % 2) {\n    return (min + max) / 2;\n  }\n  return (min + max) / 2;\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let start = 0;\n    let end = textLength - 1;\n    while (start <= end) {\n        if (text[start]!== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n\n/*\n  Computes the reverse of the given string\n  >>> reverse('abba')\n  'ccbba'\n  >>> reverse('12345')\n  '453211'\n  >>> reverse('aa')\n  'aa'\n  >>> reverse('a')\n  'a'\n  >>> reverse('z')\n  'z'\n  >>> reverse('1')\n  '1'\n  >>> reverse('abcd')\n  'dcba'\n  */\nconst reverse = (text) => {\n    let textLength = text.length;\n    let newText = '';\n    for (let i = textLength - 1; i >= 0; i--) {\n        newText += text[i];\n    }\n    return newText;\n};\n\n/*\n  Converts given string to an array of strings\n  >>> split('a')\n  ['a']\n  >>> split('ab')\n  ['a', 'b']\n  >>> split('abc')\n  ['a', 'b', 'c']\n  >>> split('a')\n  ['a']\n  >>> split('a')\n  ['a']\n  >>> split('abc')\n  ['a', 'b', 'c']\n  */\nconst split = (text) => {\n    let textLength = text.length;\n    let newText = [];\n    for (let i = 0; i < textLength; i++) {\n        newText.push(text[i]);\n    }\n    return newText;\n};\n\n/*\n  Returns the given string with spaces between each word\n  >>> separate('a')\n  'a'\n  >>> separate('ab')\n  'ab'\n  >>> separate('abc')\n  'abc'\n  >>> separate('a')\n  'a'\n  >>> separate('a')\n  'a'\n  >>> separate('ab')\n  'ab'\n  >>> separate('abc')\n  'abc'\n  */\nconst separate = (text) => {\n    let textLength = text.length;\n    let newText = '';\n    for (let i = 0; i < textLength; i++) {\n        newText += text[i];\n        if (i < textLength - 1) {\n            newText +='';\n        }\n    }\n    return newText;\n};\n\nmodule.exports = {\n    isPalindrome: isPalindrome,\n    reverse: reverse,\n    split: split,\n    separate: separate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    return n % p;\n}\n\n/*\n  Return n+1 modulo p\n  >>> modp_next(2, 3)\n  2\n  >>> modp_next(1, 3)\n  2\n  >>> modp_next(5, 3)\n  2\n  >>> modp_next(7, 3)\n  2\n  >>> modp_next(5, 5)\n  4\n  >>> modp_next(8, 5)\n  4\n  >>> modp_next(5, 11)\n  8\n  >>> modp_next(8, 11)\n  8\n  >>> modp_next(7, 11)\n  8\n  >>> modp_next(1, 1)\n  1\n  >>> modp_next(2, 1)\n  1\n  >>> modp_next(4, 1)\n  1\n  */\nconst modp_next = (n, p) => {\n    return (n + 1) % p;\n}\n\n/*\n  Returns the sum of all elements in the array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([-1, 2, 3, 4, 5, 6, 7])\n  28\n  */\nconst sum = (numbers) => {\n    return (\n        numbers.reduce((acc, n) => acc + n, 0)\n    );\n}\n\n/*\n  Returns the product of all elements in the array.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  >>> product([])\n  1\n  >>> product([1, 2, 3, 4, 5, 6, 7])\n  72600\n  >>> product([-1, 2, 3, 4, 5, 6, 7])\n  72600\n  */\nconst product = (numbers) => {\n    return (\n        numbers.reduce((acc, n) => acc * n, 1)\n    );\n}\n\n/*\n  Returns the maximum of all elements in the array.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  >>> max([])\n  NaN\n  >>> max([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> max([-1, 2, 3, 4, 5, 6, 7])\n  7\n  */\nconst max = (numbers) => {\n    return (\n        numbers.reduce((acc, n) => (acc > n? acc : n), -Infinity)\n    );\n}\n\n/*\n  Returns the minimum of all elements in the array.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  >>> min([])\n  NaN\n  >>> min([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> min([-1, 2, 3, 4, 5, 6, 7])\n  -1\n  */\nconst min = (numbers) => {\n    return (\n        numbers.reduce((acc, n) => (acc < n? acc : n), Infinity)\n    );\n}\n\n/*\n  Returns the index of the first element in the array that matches the predicate.\n  >>> index_of(1, [1, 2, 3, 4, 5, 6, 7])\n  0\n  >>> index_of(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  0\n  >>> index_of(2, [1, 2, 3, 4, 5, 6, 7])\n  4\n  >>> index_of(1, [])\n  -1\n  >>> index_of(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  -1\n  */\nconst index_of = (element, array) => {\n    let i = 0;\n    while (i < array.length) {\n        if (array[i] === element) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\n/*\n  Returns the index of the last element in the array that matches the predicate.\n  >>> last_index_of(1, [1, 2, 3, 4, 5, 6, 7])\n  4\n  >>> last_index_of(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  9\n  >>> last_index_of(2, [1, 2, 3, 4, 5, 6, 7])\n  4\n  >>> last_index_of(1, [])\n  -1\n  >>> last_index_of(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  -1\n  */\nconst last_index_of = (element, array) => {\n    let i = array.length - 1;\n    while (i >= 0) {\n        if (array[i] === element) {\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nexport {\n    modp,\n    modp_next,\n    sum,\n    product,\n    max,\n    min,\n    index_of,\n    last_index_of\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    parseInt((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) / 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decode = (s) => {\n  return decodeShift(s.replace(/(.)/g, \"$1\"));\n}\n\nconst encode = (s) => {\n  return encodeShift(s.replace(/(.)/g, \"$1\"));\n}\n\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\nmodule.exports = {\n  decode: decode,\n  encode: encode,\n  encode_shift: encode_shift,\n  decode_shift: decode_shift\n}<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  text = text.toLowerCase()\n  let removals = []\n  let vowelRegex = /[aeiou]/\n  for (let i = 0; i < text.length; i++) {\n    if (vowelRegex.test(text[i])) {\n      removals.push(text[i])\n    }\n  }\n  return removals.join('')\n}\n\nmodule.exports = remoevVowels\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}')\n  '(1)2[3][4](5)6(7)8[9]10'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '([]){}')\n  '()[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}')\n  '()[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '([]){}')\n  '([]){}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '(){}')\n  '(){}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '[]{}')\n  '[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}')\n  '{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()')\n  '()'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}')\n  '{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}')\n  '()[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[]')\n  '{}[]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '[]{}[]')\n  '[]{}[]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[][]')\n  '{}[][]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '[]{}[]{}')\n  '[]{}[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[]{}[]')\n  '{}[]{}[]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[][][]')\n  '{}[][][]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '[]{}[]{}[]')\n  '[]{}[]{}[]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[]{}[]{}')\n  '{}[]{}[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}[]{}')\n  '()[]{}[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[]{}[]{}')\n  '{}[]{}[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}[][]')\n  '()[]{}[][]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[]{}[]{}')\n  '{}[]{}[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}[]{}[]')\n  '()[]{}[]{}[]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[]{}[]{}[]')\n  '{}[]{}[]{}[]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}[][]{}')\n  '()[]{}[][]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[]{}[]{}[]')\n  '{}[]{}[]{}[]'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}[]{}[]{}')\n  '()[]{}[]{}[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '{}[]{}[]{}[]{}')\n  '{}[]{}[]{}[]{}'\n  >>> findMatchingBrackets('(1)2[3][4](5)6(7)8[9]10', '()[]{}[]{}[]{}[]')\n  '()[]{}[]{}[]{}[]'\n  >>> findMatchingBrackets('(1)"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new Error('TypeError: Add requires two number inputs')\n  }\n  return x + y\n}\n\n/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new Error('TypeError: Subtract requires two number inputs')\n  }\n  return x - y\n}\n\n/*Add two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new Error('TypeError: Multiply requires two number inputs')\n  }\n  return x * y\n}\n\n/*Add two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new Error('TypeError: Divide requires two number inputs')\n  }\n  return x / y\n}\n\nmodule.exports = {\n  add,\n  subtract,\n  multiply,\n  divide\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const len = s0.length;\n    if (s1.length!== len) {\n        return false;\n    }\n\n    for (let i = 0; i < len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n === 1) {\n        return 1;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\n/*Return the nth prime number.\n  >>> prime(10)\n  17\n  >>> prime(1)\n  2\n  >>> prime(8)\n  13\n  */\nconst prime = (n) => {\n    let m = 2;\n    while (m < n) {\n        if (isPrime(m)) {\n            return m;\n        } else {\n            m = m + 1;\n        }\n    }\n    return m;\n}\n\n/*Return the sum of all prime numbers less than n.\n  >>> primeSum(10)\n  55\n  >>> primeSum(1)\n  1\n  >>> primeSum(8)\n  17\n  */\nconst primeSum = (n) => {\n    let m = 1;\n    while (m < n) {\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n    }\n    return m;\n}\n\n/*Return the sum of all prime numbers less than n,\n  starting from 2 instead of 1.\n  >>> primeSum2(10)\n  55\n  >>> primeSum2(1)\n  2\n  >>> primeSum2(8)\n  17\n  */\nconst primeSum2 = (n) => {\n    let m = 2;\n    while (m < n) {\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n    }\n    return m;\n}\n\n/*Return the sum of all numbers less than n,\n  using the Fibonacci sequence.\n  >>> fibSum(10)\n  55\n  >>> fibSum(1)\n  1\n  >>> fibSum(8)\n  21\n  */\nconst fibSum = (n) => {\n    let m = 1;\n    while (m < n) {\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n    }\n    return m;\n}\n\n/*Return the sum of all numbers less than n,\n  using the Fibonacci sequence,\n  starting from 2 instead of 1.\n  >>> fibSum2(10)\n  55\n  >>> fibSum2(1)\n  2\n  >>> fibSum2(8)\n  21\n  */\nconst fibSum2 = (n) => {\n    let m = 1;\n    while (m < n) {\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n    }\n    return m;\n}\n\n/*Return the sum of all numbers less than n,\n  using the Fibonacci sequence,\n  starting from 2 instead of 1,\n  for the first 10 numbers.\n  >>> fibSum3(10)\n  55\n  >>> fibSum3(1)\n  2\n  >>> fibSum3(8)\n  21\n  */\nconst fibSum3 = (n) => {\n    let m = 1;\n    while (m < n) {\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n    }\n    return m;\n}\n\n/*Return the sum of all prime numbers less than n,\n  for the first 10 numbers.\n  >>> primeSum3(10)\n  55\n  >>> primeSum3(1)\n  2\n  >>> primeSum3(8)\n  17\n  */\nconst primeSum3 = (n) => {\n    let m = 1;\n    while (m < n) {\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n    }\n    return m;\n}\n\n/*Return the sum of all prime numbers less than n,\n  for the first 10 numbers,\n  starting from 2 instead of 1.\n  >>> primeSum3(10)\n  55\n  >>> primeSum3(1)\n  2\n  >>> primeSum3(8)\n  17\n  */\nconst primeSum3b = (n) => {\n    let m = 1;\n    while (m < n) {\n        if (isPrime(m)) {\n            m = m + 1;\n        }\n    }\n    return m;\n}\n\nexport default { fib, primeSum, fibSum, fibSum2, fibSum3, primeSum3, primeSum3b, fibSum3b };\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const opening = brackets.split(\"<\");\n  const closing = brackets.split(\">\");\n  const openingIndex = Array.from(new Set(opening.map((c) => c.length)));\n  const closingIndex = Array.from(new Set(closing.map((c) => c.length)));\n  return openingIndex.every((openingIndexItem, i) =>\n    closingIndex.every((closingIndexItem, j) => {\n      if (openingIndexItem === 0 && closingIndexItem === 0) {\n        return true;\n      }\n      if (openingIndexItem === 1 && closingIndexItem === 0) {\n        return true;\n      }\n      if (openingIndexItem === 0 && closingIndexItem === 1) {\n        return true;\n      }\n      return openingIndexItem === closingIndexItem;\n    }),\n  );\n};\n\n// --------------------------------------------------\n// ---------- Test Functions ----------\n// --------------------------------------------------\n\ndescribe(\"The Correct Bracketnig\", () => {\n  it(\"should return true for <>\", () => {\n    expect(correctBracketnig(\"<>\")).toBe(true);\n  });\n\n  it(\"should return true for <>\", () => {\n    expect(correctBracketnig(\"<>\")).toBe(true);\n  });\n\n  it(\"should return true for <>\", () => {\n    expect(correctBracketnig(\"<>\")).toBe(true);\n  });\n\n  it(\"should return false for <>\", () => {\n    expect(correctBracketnig(\"<\")).toBe(false);\n  });\n\n  it(\"should return false for <>\", () => {\n    expect(correctBracketnig(\"<>\")).toBe(false);\n  });\n\n  it(\"should return false for <>\", () => {\n    expect(correctBracketnig(\"<>\")).toBe(false);\n  });\n\n  it(\"should return false for <>\", () => {\n    expect(correctBracketnig(\"<>\")).toBe(false);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  if (l.length === 0) return false;\n  if (l.length === 1) return true;\n  if (l.length === 2) return l[0] < l[1];\n  const sorted = l.sort((a, b) => a - b);\n  let last = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i]!== last) return true;\n    last = sorted[i];\n  }\n  return false;\n};\n\n/*Return a random integer in [0, n).\n  >>> randint(0, 5)\n  1\n  >>> randint(0, 5)\n  4\n  >>> randint(0, 5)\n  0\n  >>> randint(0, 5)\n  3\n  */\nconst randint = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return true if the first and second integers are equal.\n  >>> same(1, 1)\n  true\n  >>> same(1, 2)\n  false\n  >>> same(1, 2.0)\n  false\n  >>> same(1, \"1\")\n  false\n  >>> same(1, {})\n  false\n  >>> same(1, \"1\", 2)\n  false\n  >>> same(1, \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\")\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", 2.0)\n  false\n  >>> same(1, \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l = {};\n  for (let i = 0; i < l1.length; i++) {\n    if (l.hasOwnProperty(l1[i])) {\n      l[l1[i]]++;\n    } else {\n      l[l1[i]] = 1;\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l.hasOwnProperty(l2[i])) {\n      l[l2[i]]++;\n    } else {\n      l[l2[i]] = 1;\n    }\n  }\n  let sorted = [];\n  for (let i in l) {\n    sorted.push(l[i]);\n  }\n  return sorted.sort();\n};\n\n/*Return the length of the shortest path between two nodes in the given graph.\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'd')\n  2\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'e')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'a')\n  0\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'b')\n  2\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'c')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'e')\n  2\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'f')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'b')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'd')\n  2\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'f')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'g')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'c')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'e')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'f')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'd')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'c')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'b')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'e')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'f')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'g')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'b')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'd')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'c')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d: 1}], 'a', 'e')\n  1\n  >>> pathLength([{a: 0, b: 1, c: 1, d: 0}, {a: 1, b: 0, c: 0, d"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  const a = []\n  const b = []\n  for (let i = 2; i < n; i++) {\n    const t = n % i\n    if (t === 0) {\n      a.push(i)\n    }\n    else {\n      b.push(i)\n    }\n  }\n  if (b.length === 0) {\n    return a[0]\n  }\n  return largetsPrimeFactor(b[0])\n}\n\nexport {\n  largetsPrimeFactor\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(0)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(-1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(5.3)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN('a')\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(null)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(undefined)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(NaN)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(1.1)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(0.1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(-1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(5.3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN('a')\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(null)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(undefined)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(NaN)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(1.1)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(0.1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(-1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(5.3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN('a')\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(null)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(undefined)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(NaN)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(1.1)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(0.1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(-1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(5.3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN('a')\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(null)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(undefined)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(NaN)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(1.1)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  >>> sumToN(0.1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(-1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n  >>> sumToN(5.3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be a positive integer\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  let openBracket = 1, closeBracket = 1;\n  brackets.split('').forEach((char) => {\n    if (char === '(') {\n      openBracket++;\n    }\n    if (char === ')') {\n      closeBracket--;\n    }\n  });\n  return openBracket === closeBracket;\n};\n\n// @include../../../lib/ts/basics/basic_checks.js\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let len = xs.length\n  let deriv = new Array(len + 1)\n\n  for (let i = 0; i < len; i++) {\n    deriv[i] = i + 1\n    for (let j = 0; j < i; j++) {\n      deriv[i] = deriv[i] * (len - i)\n    }\n  }\n\n  deriv[len] = 0\n  return deriv\n}\n\n/*\n  Given an array of numbers, return the square of the sum of the squares of\n  the numbers in the array.\n\n  >>> sumOfSquares([1, 2, 3])\n  15\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  80\n  >>> sumOfSquares([])\n  0\n  >>> sumOfSquares([-1, 2, 3, 4, 5])\n  0\n  >>> sumOfSquares([1, -2, 3, 4, 5])\n  0\n  >>> sumOfSquares([1, 2, 3, 4, -5])\n  0\n  >>> sumOfSquares([-1, 2, 3, 4, -5])\n  0\n  */\nconst sumOfSquares = (xs) => {\n  let len = xs.length\n  let sumOfSquares = 0\n\n  for (let i = 0; i < len; i++) {\n    sumOfSquares = sumOfSquares + xs[i] * xs[i]\n  }\n\n  return sumOfSquares\n}\n\n/*\n  Given an array of numbers, return the average of the numbers in the array.\n  If there are no numbers, return 0.\n\n  >>> average([1, 2, 3])\n  2\n  >>> average([1, 2, 3, 4, 5])\n  3\n  >>> average([])\n  0\n  >>> average([-1, 2, 3, 4, 5])\n  0\n  >>> average([1, -2, 3, 4, 5])\n  0\n  >>> average([1, 2, 3, 4, -5])\n  0\n  */\nconst average = (xs) => {\n  let len = xs.length\n  let average = 0\n\n  for (let i = 0; i < len; i++) {\n    average = average + xs[i]\n  }\n\n  return average / len\n}\n\n/*\n  Given an array of numbers, return the number of the number that appears\n  most frequently in the array. If there is a tie, return the first number\n  in the array that appears most.\n\n  >>> frequency([1, 2, 3, 2, 1, 3])\n  2\n  >>> frequency([1, 2, 3, 2, 1, 3, 2])\n  3\n  >>> frequency([])\n  0\n  >>> frequency([1, 2, 3, 2, 1, 3])\n  2\n  >>> frequency([1, 2, 3, 2, 1, 3, 2, 3])\n  1\n  >>> frequency([-1, 2, 3, 2, 1, 3, 2, 3])\n  2\n  */\nconst frequency = (xs) => {\n  let count = {}\n  let len = xs.length\n\n  for (let i = 0; i < len; i++) {\n    if (!count.hasOwnProperty(xs[i])) {\n      count[xs[i]] = 1\n    } else {\n      count[xs[i]]++\n    }\n  }\n\n  let max = 0\n  let maxCount = 0\n  let maxIndex = 0\n\n  for (let key in count) {\n    if (count[key] > maxCount) {\n      maxCount = count[key]\n      maxIndex = key\n      max = count[key]\n    }\n  }\n\n  return maxIndex\n}\n\n/*\n  Given an array of numbers, return the median of the numbers in the array.\n  If there is a tie, return the number that is in the middle of the array.\n\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([])\n  0\n  >>> median([-1, 2, 3, 4, 5])\n  0\n  >>> median([1, -2, 3, 4, 5])\n  0\n  >>> median([1, 2, 3, 4, -5])\n  0\n  */\nconst median = (xs) => {\n  let len = xs.length\n  let median = 0\n\n  for (let i = 0; i < len; i++) {\n    median = median + xs[i]\n  }\n\n  median = median / len\n\n  if (len % 2) {\n    return median\n  } else {\n    return (median + xs[len / 2]) / 2\n  }\n}\n\nexport default {\n  average,\n  derivative,\n  frequency,\n  median,\n  sumOfSquares\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const f = fibfib(n-2) + fibfib(n-3);\n  return (n-1) == 0? f : f + fibfib(n-1);\n};\n\n// const fibfib = (n) => {\n//   const f = fibfib(n-2) + fibfib(n-3);\n//   return (n-1) == 0? f : f + fibfib(n-1);\n// };\n\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = vowelsConut;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  if (x == 0) return ''\n  let digits = []\n  for (let i = x; i > 0; i /= 10) {\n    digits.unshift(i % 10)\n  }\n  return digits.reverse().join('')\n}\n\nexport default {\n  circularSihft\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const d = new Map();\n  for (let i = 0; i < s.length; i++) {\n    const ch = s[i];\n    const upper = ch.charCodeAt(0) - 32;\n    if (!d.has(upper)) {\n      d.set(upper, 0);\n    }\n    d.set(upper, d.get(upper) + 1);\n  }\n  let res = 0;\n  for (let i = 0; i < s.length; i++) {\n    const ch = s[i];\n    const upper = ch.charCodeAt(0) - 32;\n    res += d.get(upper);\n  }\n  return res;\n};\n\nconsole.log(digitSum(\"abAB\")); //131\nconsole.log(digitSum(\"abcCd\")); //67\nconsole.log(digitSum(\"helloE\")); //69\nconsole.log(digitSum(\"woArBld\")); //131\nconsole.log(digitSum(\"aAaaaXa\")); //153\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(' ')\n  let a = arr.shift()\n  let b = arr.shift()\n  let c = arr.shift()\n  let m = parseInt(n)\n  if (a === 'apples' && b === 'oranges' && c ==='mango') {\n    m -= a - b - c\n  }\n  return m\n}\n\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(' ')\n  let a = arr.shift()\n  let b = arr.shift()\n  let c = arr.shift()\n  let m = parseInt(n)\n  if (a === 'apples' && b === 'oranges' && c ==='mango') {\n    m -= a - b - c\n  }\n  return m\n}\n\nmodule.exports = fruitDistribution<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min_node = arr[0];\n  let min_index = 0;\n\n  arr.forEach(node => {\n    if (node.value % 2 === 0) {\n      if (node.value < min_node.value) {\n        min_node = node;\n        min_index = arr.indexOf(node);\n      }\n    }\n  });\n\n  return [min_node, min_index];\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  // return lst[0] + 1\n  // for (const x of lst) {\n  //   if (x > 0 && x > lst[0]) {\n  //     return x;\n  //   }\n  // }\n  // return -1;\n  let max = -1;\n  for (const x of lst) {\n    if (x > 0 && x > max) {\n      max = x;\n    }\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  if (lst.length < 1) {\n    return lst\n  }\n  let sorted = lst.slice(0)\n  let min = sorted[0]\n  let max = sorted[sorted.length - 1]\n  sorted.sort((a, b) => a - b)\n  sorted.forEach(num => {\n    if (num < min) {\n      min = num\n    }\n    if (num > max) {\n      max = num\n    }\n  })\n  sorted = sorted.concat(sorted.slice(sorted.indexOf(min), sorted.indexOf(max) + 1))\n  return sorted\n}\n\nconst isPalindrome = (str) => {\n  if (str.length < 2) {\n    return true\n  }\n  const reverse = str.split('').reverse().join('')\n  return reverse === str\n}\n\nmodule.exports = {\n  stranegoSrtList,\n  isPalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if(a+b>c || b+c>a || c+a>b) {\n    return -1;\n  }\n  return Math.sqrt(a*b*c/2);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    let x = q[0];\n    let y = q[1];\n    let z = q[2];\n    let sum = x + y + z;\n    if (sum > w) return false;\n    else if (sum < w) return true;\n    else {\n        if (x == y && x == z) return true;\n        else if (x!= y && x!= z && y!= z) return true;\n        else return false;\n    }\n};\n\nexport default willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = 0;\n  let i = 0;\n  let j = 0;\n  let counter = 0;\n\n  while (i < arr.length) {\n    counter++;\n    while (j < arr.length) {\n      if (arr[i] > arr[j]) {\n        counter--;\n      } else if (arr[i] < arr[j]) {\n        j++;\n      } else {\n        counter--;\n        j++;\n      }\n    }\n    i++;\n  }\n  return counter;\n}\n\nconsole.log(msallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return lst1;\n  const lst1Count = lst1.reduce((sum, value) => sum + value.length, 0);\n  const lst2Count = lst2.reduce((sum, value) => sum + value.length, 0);\n  if (lst1Count === lst2Count) return lst1;\n  else return lst2;\n};\n\nconst test = [\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi', 'hi', 'hi'],\n  ['hi',"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  const n = a;\n  let prime = 2;\n  const count = 0;\n  for (prime = 2; prime * prime <= n; prime++) {\n    if (n % prime === 0) {\n      count++;\n      if (count > 2) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = isMultiplyPirme;<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  const xInt = parseInt(x);\n  const nInt = parseInt(n);\n  if (nInt === 0) return false;\n  if (x === Math.pow(nInt, xInt)) return true;\n  return false;\n};\n\nconsole.log(isSimplePwoer(1, 4));\nconsole.log(isSimplePwoer(2, 2));\nconsole.log(isSimplePwoer(8, 2));\nconsole.log(isSimplePwoer(3, 2));\nconsole.log(isSimplePwoer(3, 1));\nconsole.log(isSimplePwoer(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (Math.pow(a, 3) == a)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst issquare = (a) => {\n  return (Math.pow(a, 2) == a)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a square of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isquare(1) ==> true\n  isquare(2) ==> true\n  isquare(4) ==> true\n  isquare(-1) ==> false\n  isquare(64) ==> false\n  isquare(0) ==> false\n  */\nconst isquare = (a) => {\n  return (Math.pow(a, 2) == a)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> true\n  isperfectcube(3) ==> true\n  isperfectcube(4) ==> true\n  isperfectcube(5) ==> true\n  isperfectcube(6) ==> true\n  isperfectcube(7) ==> true\n  isperfectcube(8) ==> true\n  isperfectcube(9) ==> true\n  isperfectcube(16) ==> true\n  isperfectcube(32) ==> true\n  isperfectcube(128) ==> true\n  isperfectcube(81) ==> false\n  isperfectcube(128) ==> false\n  isperfectcube(0) ==> false\n  isperfectcube(-1) ==> false\n  isperfectcube(64) ==> false\n  isperfectcube(180) ==> false\n  */\nconst isperfectcube = (a) => {\n  return (Math.pow(a, 3) == a)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect square of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isperfectsquare(1) ==> false\n  isperfectsquare(2) ==> true\n  isperfectsquare(4) ==> true\n  isperfectsquare(5) ==> true\n  isperfectsquare(6) ==> true\n  isperfectsquare(7) ==> true\n  isperfectsquare(8) ==> true\n  isperfectsquare(9) ==> true\n  isperfectsquare(16) ==> true\n  isperfectsquare(32) ==> true\n  isperfectsquare(128) ==> true\n  isperfectsquare(81) ==> true\n  isperfectsquare(128) ==> true\n  isperfectsquare(0) ==> false\n  isperfectsquare(-1) ==> false\n  isperfectsquare(64) ==> false\n  isperfectsquare(180) ==> false\n  */\nconst isperfectsquare = (a) => {\n  return (Math.pow(a, 2) == a)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect power of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isperfectpower(1) ==> false\n  isperfectpower(2) ==> true\n  isperfectpower(3) ==> true\n  isperfectpower(4) ==> true\n  isperfectpower(5) ==> true\n  isperfectpower(6) ==> true\n  isperfectpower(7) ==> true\n  isperfectpower(8) ==> true\n  isperfectpower(9) ==> true\n  isperfectpower(16) ==> true\n  isperfectpower(32) ==> true\n  isperfectpower(128) ==> true\n  isperfectpower(81) ==> true\n  isperfectpower(128) ==> true\n  isperfectpower(0) ==> false\n  isperfectpower(-1) ==> false\n  isperfectpower(64) ==> false\n  isperfectpower(180) ==> false\n  */\nconst isperfectpower = (a) => {\n  return (Math.pow(a, a - 1) == a)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect power of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isperfectpower(1) ==> false\n  isperfectpower(2) ==> true\n  isperfectpower(3) ==> true\n  isperfectpower(4) ==> true\n  isperfectpower(5) ==> true\n  isperfectpower(6) ==> true\n  isperfectpower(7) ==> true\n  isperfectpower(8) ==> true\n  isperfectpower(9) ==> true\n  isperfectpower(16) ==> true\n  isperfectpower(32) ==> true\n  isperfectpower(128) ==> true\n  isperfectpower(81) ==> true\n  isperfectpower(128) ==> true\n  isperfectpower(0) ==> false\n  isperfectpower(-1) ==> false\n  isperfectpower(64) ==> false\n  isperfectpower(180) ==> false\n  */\nconst isperfectpower = (a) => {\n  return (Math.pow(a, a - 1) == a)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const digits = [\n    parseInt(num.substring(0, 1), 16),\n    parseInt(num.substring(1, 2), 16)\n  ];\n  let count = 0;\n  for (let i = 0; i < 2; i++) {\n    for (let j = 2; j < 7; j++) {\n      if (digits[i] % j === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n\n  while (decimal > 0) {\n    if (decimal % 2 === 1) {\n      binary = `${binary}1`;\n    } else {\n      binary = `${binary}0`;\n    }\n    decimal = decimal / 2;\n  }\n\n  return `${binary}db`;\n};\n\nexport {\n  decimalToBinary\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    if(s.length < 3)\n        return false;\n    let previous = s[0];\n    let current = 1;\n    while(current < s.length){\n        if(s[current] === s[current-1] && s[current] === s[current+1])\n            return false;\n        previous = current;\n        current += 2;\n    }\n    return true;\n}\n\n// Test Code\nconsole.log(isHappy(\"abcde\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  let letterGrades = []\n  for (let i = 0; i < grades.length; i++) {\n    let currentGrade = grades[i]\n    let letterGrade = 'E'\n    let numberOfPoints = 0\n\n    if (currentGrade >= 4.0) {\n      letterGrade = 'A+'\n      numberOfPoints = 3\n    } else if (currentGrade >= 3.7) {\n      letterGrade = 'A'\n      numberOfPoints = 2\n    } else if (currentGrade >= 3.3) {\n      letterGrade = 'A-'\n      numberOfPoints = 1\n    } else if (currentGrade >= 3.0) {\n      letterGrade = 'B+'\n      numberOfPoints = 2\n    } else if (currentGrade >= 2.7) {\n      letterGrade = 'B'\n      numberOfPoints = 1\n    } else if (currentGrade >= 2.3) {\n      letterGrade = 'B-'\n      numberOfPoints = 0\n    } else if (currentGrade >= 2.0) {\n      letterGrade = 'C+'\n      numberOfPoints = 1\n    } else if (currentGrade >= 1.7) {\n      letterGrade = 'C'\n      numberOfPoints = 0\n    } else if (currentGrade >= 1.3) {\n      letterGrade = 'C-'\n      numberOfPoints = 0\n    } else if (currentGrade >= 1.0) {\n      letterGrade = 'D+'\n      numberOfPoints = 1\n    } else if (currentGrade >= 0.7) {\n      letterGrade = 'D'\n      numberOfPoints = 0\n    } else if (currentGrade >= 0.0) {\n      letterGrade = 'D-'\n      numberOfPoints = 0\n    }\n\n    if (numberOfPoints === 1) {\n      letterGrade += '+'\n    }\n\n    letterGrades.push(letterGrade)\n  }\n\n  return letterGrades\n}\n\nconst main = () => {\n  const grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]\n\n  console.log(nmueriaclLetterGrade(grades))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const numbers = [...string]\n  const length = Math.sqrt(numbers.reduce((acc, n) => acc + n, numbers[0]))\n  for (let i = 2; i <= length; i++) {\n    if (numbers.reduce((acc, n) => acc * n, i)!== 1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a palindrome or not\n  Examples\n  isPalindrome('Hello') == true\n  isPalindrome('abcd') == true\n  isPalindrome('a') == false\n  isPalindrome('ab') == true\n  isPalindrome('a') == true\n  */\nconst isPalindrome = (string) => {\n  const length = Math.sqrt(string.reduce((acc, n) => acc + n, string[0]))\n  for (let i = 0; i < length / 2; i++) {\n    if (string[i]!== string[length - i - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a permutation of another string or not\n  Examples\n  permutation('Hello') == false\n  permutation('abcd') == false\n  permutation('a') == true\n  permutation('ab') == true\n  permutation('aa') == true\n  */\nconst permutation = (string) => {\n  const length = string.length\n  const letters = string.split('').filter(x => x === x.toLowerCase())\n  if (length!== letters.length) {\n    return false\n  }\n  let permutations = [...new Array(length).fill('')].map((arr, i) => [...arr,...letters].map(s => s.toUpperCase()))\n  for (let i = 0; i < permutations.length; i++) {\n    if (string.toUpperCase() === permutations[i].join('')) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a palindrome or not\n  Examples\n  palindrome('Hello') == true\n  palindrome('abcd') == false\n  palindrome('a') == false\n  palindrome('ab') == true\n  */\nconst palindrome = (string) => {\n  return string.split('').every(x => x === x.toLowerCase())\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a permutation of another string or not\n  Examples\n  permutation('Hello') == true\n  permutation('abcd') == true\n  permutation('a') == true\n  permutation('ab') == false\n  */\nconst isPermutation = (string) => {\n  const length = string.length\n  const letters = string.split('').filter(x => x === x.toLowerCase())\n  if (length!== letters.length) {\n    return false\n  }\n  let permutations = [...new Array(length).fill('')].map((arr, i) => [...arr,...letters].map(s => s.toUpperCase()))\n  for (let i = 0; i < permutations.length; i++) {\n    if (string.toUpperCase()!== permutations[i].join('')) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a palindrome or not\n  Examples\n  palindrome('Hello') == true\n  palindrome('abcd') == false\n  palindrome('a') == true\n  palindrome('ab') == false\n  */\nconst isPalindrome = (string) => {\n  return string.split('').every(x => x === x.toLowerCase())\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a permutation of another string or not\n  Examples\n  permutation('Hello') == false\n  permutation('abcd') == true\n  permutation('a') == true\n  permutation('ab') == true\n  */\nconst isPermutation = (string) => {\n  return string.split('').every(x => x === x.toLowerCase())\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a palindrome or not\n  Examples\n  palindrome('Hello') == true\n  palindrome('abcd') == false\n  palindrome('a') == true\n  palindrome('ab') == false\n  */\nconst isPalindrome = (string) => {\n  return string.split('').every(x => x === x.toLowerCase())\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a permutation of another string or not\n  Examples\n  permutation('Hello') == true\n  permutation('abcd') == true\n  permutation('a') == true\n  permutation('ab') == false\n  */\nconst isPermutation = (string) => {\n  return string.split('').every(x => x === x.toLowerCase())\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a palindrome or not\n  Examples\n  palindrome('Hello') == true\n  palindrome('abcd') == false\n  palindrome('a') == true\n  palindrome('ab') == false\n  */\nconst isPalindrome = (string) => {\n  return string.split('').every(x => x === x.toLowerCase())\n}\n\n/*\n  Write a function that takes a string and returns a boolean\n  if the string is a permutation of another string or not\n  Examples\n  permutation('Hello') == true"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i.toString().charAt(0) === '1' && i.toString().charAt(i.toString().length - 1) === '1') {\n      count++\n    }\n  }\n  return count\n}\n\ndescribe('#startsOneEnds', () => {\n  it('should return 2', () => {\n    expect(startsOneEnds(10)).toBe(2)\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let total = 0;\n  while (N > 0) {\n    total += N % 2;\n    N = N / 2;\n  }\n  return total;\n};\n\nexport default solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let count = 0\n    lst.forEach((item) => {\n        if (item % 2 === 1) {\n            count += item\n        }\n    })\n    return count\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  const words = s.split(' ')\n  let result = ''\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const wordLetters = word.split('')\n    let wordLength = wordLetters.length\n    let order = []\n    for (let j = 0; j < wordLength; j++) {\n      const current = wordLetters[j]\n      const index = current.charCodeAt()\n      order.push(index)\n    }\n    const sorted = order.sort((a, b) => a - b)\n    result += word.replace(/\\S/g, (s) => {\n      return sorted.find((x) => x === s.charCodeAt())\n    })\n    result +=''\n  }\n  return result.trim()\n}\n\nconsole.log(antSihuffle('Hi'))\nconsole.log(antSihuffle('hello'))\nconsole.log(antSihuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  let row = lst[0];\n  let start = 0;\n  while (row.length) {\n    let column = row[0];\n    let i = start;\n    while (column.length) {\n      if (column[0] === x) {\n        result.push(row.map(row => row.slice(1)));\n        return result;\n      }\n      i++;\n      column = column[1];\n    }\n    row = row[1];\n    start = i;\n  }\n  return result;\n};\n\nconst test = [\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n  ],\n  [],\n  [1],\n  [1, 2, 3]\n];\n\nconsole.log(getRow(test, 1));\nconsole.log(getRow(test, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length <= 1) return array;\n\n  const sum = array.reduce((sum, val) => sum + val, 0);\n\n  let index = 0;\n  if (sum % 2 === 1) {\n    array.sort((a, b) => a - b);\n    index = 0;\n  } else {\n    array.sort((a, b) => b - a);\n    index = array.length - 1;\n  }\n\n  const sorted = array.slice(0, index).concat(array.slice(index + 1));\n  return sorted;\n};\n\nconst test = () => {\n  const array = [5, 4, 3, 2, 1, 0];\n  console.log(sortArray(array));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let letters = [...alphabet];\n  let encrypted = [];\n  \n  // Rotate the alphabet by two times\n  letters = letters.map((l) => {\n    let nl = letters.splice(Math.floor(letters.length / 2), 1);\n    nl.unshift(l);\n    return nl;\n  });\n  \n  // Loop through each letter\n  for (let i = 0; i < s.length; i++) {\n    let sIndex = letters.indexOf(s[i]);\n    \n    // If the letter is not in the alphabet, add a space\n    if (sIndex === -1) {\n      sIndex = encrypted.length;\n      encrypted.push('');\n    }\n    \n    // Add the letter to the encrypted string\n    encrypted[sIndex] += s[i];\n  }\n  \n  // Return the encrypted string\n  return encrypted;\n}\n\n/* Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let letters = [...alphabet];\n  let decrypted = [];\n  \n  // Rotate the alphabet by two times\n  letters = letters.map((l) => {\n    let nl = letters.splice(Math.floor(letters.length / 2), 1);\n    nl.unshift(l);\n    return nl;\n  });\n  \n  // Loop through each letter\n  for (let i = 0; i < s.length; i++) {\n    let sIndex = letters.indexOf(s[i]);\n    \n    // If the letter is not in the alphabet, add a space\n    if (sIndex === -1) {\n      sIndex = decrypted.length;\n      decrypted.push('');\n    }\n    \n    // Add the letter to the decrypted string\n    decrypted[sIndex] += s[i];\n  }\n  \n  // Return the decrypted string\n  return decrypted;\n}\n\n// Test the functions\nconsole.log(encrypt('asdfghjkl'));\nconsole.log(decrypt('kj'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  const len = lst.length\n  const result = lst[0]\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < result) {\n      result = lst[i]\n    }\n  }\n  return result\n}\n\n/*\n  Write a function nextLargeset() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nextLargeset([1, 2, 3, 4, 5]) == 4\n  nextLargeset([5, 1, 4, 3, 2]) == 4\n  nextLargeset([]) == null\n  nextLargeset([1, 1]) == null\n  */\nconst nextLargeSet = (lst) => {\n  const len = lst.length\n  const result = lst[0]\n  for (let i = 1; i < len; i++) {\n    if (lst[i] > result) {\n      result = lst[i]\n    }\n  }\n  return result\n}\n\n/*\n  Write a function nextNextSmallset() that returns the 3rd largest element of the list.\n  Return null if there is no such element.\n  \n  nextNextSmallset([1, 2, 3, 4, 5]) == 5\n  nextNextSmallset([5, 1, 4, 3, 2]) == 5\n  nextNextSmallset([]) == null\n  nextNextSmallset([1, 1]) == null\n  */\nconst nextNextSmallset = (lst) => {\n  const len = lst.length\n  const result = lst[0]\n  for (let i = 1; i < len; i++) {\n    if (lst[i] > result) {\n      result = lst[i]\n    }\n  }\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < result) {\n      result = lst[i]\n    }\n  }\n  return result\n}\n\n/*\n  Write a function nextNextLargeset() that returns the 3rd largest element of the list.\n  Return null if there is no such element.\n  \n  nextNextLargeset([1, 2, 3, 4, 5]) == 5\n  nextNextLargeset([5, 1, 4, 3, 2]) == 5\n  nextNextLargeset([]) == null\n  nextNextLargeset([1, 1]) == null\n  */\nconst nextNextLargeSet = (lst) => {\n  const len = lst.length\n  const result = lst[0]\n  for (let i = 1; i < len; i++) {\n    if (lst[i] > result) {\n      result = lst[i]\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  nextSmallset,\n  nextLargeSet,\n  nextNextSmallset,\n  nextNextLargeSet\n}<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n    let isBoarded = 0;\n    let words = S.split('.');\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].toLowerCase() === 'i') {\n            isBoarded++;\n        }\n    }\n    return isBoarded;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of happy words. A happy word is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isHappy(\"I love this weather\")\n  1\n  >>> isHappy(\"Hello world\")\n  0\n  >>> isHappy(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappy = (S) => {\n    let isHappy = 0;\n    let words = S.split('.');\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].toLowerCase() === 'i') {\n            isHappy++;\n        }\n    }\n    return isHappy;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoring(\"I love this weather\")\n  0\n  >>> isBoring(\"Hello world\")\n  1\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  */\nconst isBoring = (S) => {\n    let isBoring = 0;\n    let words = S.split('.');\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].toLowerCase() === 'i') {\n            isBoring++;\n        }\n    }\n    return isBoring;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a vowel.\n \n  For example:\n  >>> isVowel(\"I love this weather\")\n  1\n  >>> isVowel(\"Hello world\")\n  0\n  >>> isVowel(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isVowel = (S) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < S.length; i++) {\n        if (vowels.includes(S[i].toLowerCase())) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that end with a consonant.\n \n  For example:\n  >>> isConsonant(\"I love this weather\")\n  1\n  >>> isConsonant(\"Hello world\")\n  0\n  >>> isConsonant(\"The sky is blue. The sun is shining. I love this weather\")\n  0\n  */\nconst isConsonant = (S) => {\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n    let count = 0;\n    for (let i = 0; i < S.length; i++) {\n        if (consonants.includes(S[i].toLowerCase())) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a vowel and end with a consonant.\n \n  For example:\n  >>> isVowelConsonant(\"I love this weather\")\n  1\n  >>> isVowelConsonant(\"Hello world\")\n  0\n  >>> isVowelConsonant(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isVowelConsonant = (S) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n    let count = 0;\n    for (let i = 0; i < S.length; i++) {\n        if (vowels.includes(S[i].toLowerCase()) && consonants.includes(S[i].toLowerCase())) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of words that start with a vowel, end with a consonant and contain a\n  vowel or consonant.\n \n  For example:\n  >>> isVowelConsonantContains(\"I love this weather\")\n  1\n  >>> isVowelConsonantContains(\"Hello world\")\n  0\n  >>> isVowelConsonantContains(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isVowelConsonantContains = (S) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const n1 = x;\n  const n2 = y;\n  const n3 = z;\n\n  if ((typeof n1 === 'number' && n1 >= 0) || (typeof n2 === 'number' && n2 >= 0) || (typeof n3 === 'number' && n3 >= 0)) {\n    if (n1 + n2 === n3) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the sum of the other number, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  intSum(5, 2) ➞ true\n  intSum(3, 2) ➞ false\n  intSum(3.6, 2.2) ➞ true\n  */\nconst intSum = (x, y) => {\n  const n1 = x;\n  const n2 = y;\n\n  if ((typeof n1 === 'number' && n1 >= 0) || (typeof n2 === 'number' && n2 >= 0)) {\n    if (n1 + n2 === n1) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all 3 numbers are primes, and false otherwise.\n  Examples\n  prime(5, 2, 7) ➞ false\n  prime(3, 2, 2) ➞ true\n  prime(3.6, -2.2, 2) ➞ true\n  */\nconst prime = (x, y, z) => {\n  const n1 = x;\n  const n2 = y;\n  const n3 = z;\n\n  if ((typeof n1 === 'number' && n1 >= 0) || (typeof n2 === 'number' && n2 >= 0) || (typeof n3 === 'number' && n3 >= 0)) {\n    if (isPrime(n1) && isPrime(n2) && isPrime(n3)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is a prime, and false otherwise.\n  Examples\n  prime(5, 2) ➞ true\n  prime(3, 2) ➞ false\n  prime(3.6, 2.2) ➞ true\n  */\nconst prime2 = (x, y) => {\n  const n1 = x;\n  const n2 = y;\n\n  if ((typeof n1 === 'number' && n1 >= 0) || (typeof n2 === 'number' && n2 >= 0)) {\n    if (isPrime(n1) || isPrime(n2)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is a prime, and the other two are not, and false otherwise.\n  Examples\n  prime(5, 2, 7) ➞ true\n  prime(3, 2, 2) ➞ false\n  prime(3.6, -2.2, 2) ➞ true\n  */\nconst prime3 = (x, y, z) => {\n  const n1 = x;\n  const n2 = y;\n  const n3 = z;\n\n  if ((typeof n1 === 'number' && n1 >= 0) || (typeof n2 === 'number' && n2 >= 0) || (typeof n3 === 'number' && n3 >= 0)) {\n    if (isPrime(n1) || isPrime(n2) || isPrime(n3)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is a prime, and the other number is an integer, and false otherwise.\n  Examples\n  prime(5, 2) ➞ true\n  prime(3, 2) ➞ false\n  prime(3.6, 2.2) ➞ false\n  */\nconst prime4 = (x, y) => {\n  const n1 = x;\n  const n2 = y;\n\n  if ((typeof n1 === 'number' && n1 >= 0) || (typeof n2 === 'number' && n2 >= 0)) {\n    if (isPrime(n1) && (typeof n2 === 'number' && n2 >= 0)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is an integer, and the other is a prime, and false otherwise.\n  Examples\n  prime(5, 2) ➞ false\n  prime(3, 2) ➞ false\n  prime(3.6, 2.2) ➞ false\n  */\nconst prime5 = (x, y) => {\n  const n1 = x;\n  const n2 = y;\n\n  if ((typeof n1 === 'number' && n1 >= 0) || (typeof n2 === 'number' && n2 >= 0)) {\n    if ((typeof n1 === 'number' && n1 >= 0) && isPrime(n2)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is a prime, and the other number is an integer, and false otherwise.\n  Examples\n  prime(5, 2) ➞ false"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let chars = message.split('');\n    for (let i = 0; i < chars.length; i += 2) {\n        chars[i] = chars[i + 1];\n        chars[i + 1] = chars[i];\n    }\n    return chars.join('');\n}\n\nconst decode = (message) => {\n    let chars = message.split('');\n    for (let i = 0; i < chars.length; i += 2) {\n        chars[i] = chars[i + 1];\n        chars[i + 1] = chars[i];\n    }\n    return chars.join('');\n}\n\nconst test = () => {\n    let message = encode('This is a message');\n    console.log(message);\n    console.log(decode(message));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  let max = 0;\n  let ans = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let len = 0;\n    while (lst[i] > 0) {\n      len += 1;\n      lst[i] -= 1;\n    }\n    if (len > max) {\n      max = len;\n      ans = lst[i];\n    }\n  }\n  return ans;\n};\n\nconst primes = (n) => {\n  let result = [];\n  for (let i = 2; i <= n; i++) {\n    if (Array.isArray(isPrime(i))) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  let isPrime = [1, 0];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      isPrime.push(0);\n    } else {\n      isPrime.push(1);\n    }\n    i++;\n  }\n  if (isPrime[n - 1] === 0) {\n    isPrime.push(1);\n  }\n  return isPrime;\n};\n\nconst countPrime = (n) => {\n  let countPrime = 0;\n  let i = 0;\n  while (i < n) {\n    if (isPrime[i]) {\n      countPrime++;\n    }\n    i++;\n  }\n  return countPrime;\n};\n\nconst primes2 = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    let prime = true;\n    for (let j = 0; j < result.length; j++) {\n      if (result[j] * i === n) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime2 = (n) => {\n  let isPrime = [1, 0];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      isPrime.push(0);\n    } else {\n      isPrime.push(1);\n    }\n    i++;\n  }\n  if (isPrime[n - 1] === 0) {\n    isPrime.push(1);\n  }\n  return isPrime;\n};\n\nconst countPrime2 = (n) => {\n  let countPrime = 0;\n  let i = 0;\n  while (i < n) {\n    if (isPrime2[i]) {\n      countPrime++;\n    }\n    i++;\n  }\n  return countPrime;\n};\n\nconsole.log(ksjkasddk(primes2(1000)));\nconsole.log(ksjkasddk(primes(100000)));\nconsole.log(ksjkasddk(primes(10000)));\nconsole.log(ksjkasddk(primes(1000)));\nconsole.log(ksjkasddk(primes(100)));\nconsole.log(ksjkasddk(primes(10)));\nconsole.log(ksjkasddk(primes(1)));\nconsole.log(ksjkasddk(primes(0)));\nconsole.log(ksjkasddk(primes2(1000)));\nconsole.log(ksjkasddk(primes2(100000)));\nconsole.log(ksjkasddk(primes2(10000)));\nconsole.log(ksjkasddk(primes2(1000)));\nconsole.log(ksjkasddk(primes2(100)));\nconsole.log(ksjkasddk(primes2(10)));\nconsole.log(ksjkasddk(primes2(1)));\nconsole.log(ksjkasddk(primes2(0)));\nconsole.log(ksjkasddk(primes2(100)));\nconsole.log(ksjkasddk(primes2(10000)));\nconsole.log(ksjkasddk(primes2(1000)));\nconsole.log(ksjkasddk(primes2(100)));\nconsole.log(ksjkasddk(primes2(10)));\nconsole.log(ksjkasddk(primes2(1)));\nconsole.log(ksjkasddk(primes2(0)));\nconsole.log(ksjkasddk(primes2(100)));\nconsole.log(ksjkasddk(primes2(10000)));\nconsole.log(ksjkasddk(primes2(1000)));\nconsole.log(ksjkasddk(primes2(100)));\nconsole.log(ksjkasddk(primes2(10)));\nconsole.log(ksjkasddk(primes2(1)));\nconsole.log(ksjkasddk(primes2(0)));\nconsole.log(ksjkasddk(primes2(100)));\nconsole.log(ksjkasddk(primes2(10000)));"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    return Object.keys(dict).every(key => {\n        return (\n            typeof dict[key] ==='string' &&\n            (dict[key].toLowerCase().indexOf(key.toLowerCase()) >= 0 ||\n            dict[key].toUpperCase().indexOf(key.toUpperCase()) >= 0)\n        )\n    });\n}\n\n/*\n  Given a string, return true if the string contains all lower case characters\n  or all upper case characters, else return false.\n  Examples:\n  containsLowerCase(\"abc\") should return true.\n  containsLowerCase(\"AaBb\") should return false.\n  containsLowerCase(\"a\") should return true.\n*/\nconst containsLowerCase = (str) => {\n    return (\n        str.toLowerCase().indexOf(str.toLowerCase()) >= 0 ||\n        str.toUpperCase().indexOf(str.toUpperCase()) >= 0\n    )\n}\n\n/*\n  Given a string, return true if the string contains all upper case characters\n  or all lower case characters, else return false.\n  Examples:\n  containsUpperCase(\"abc\") should return false.\n  containsUpperCase(\"AaBb\") should return true.\n  containsUpperCase(\"a\") should return false.\n*/\nconst containsUpperCase = (str) => {\n    return (\n        str.toUpperCase().indexOf(str.toUpperCase()) >= 0 ||\n        str.toLowerCase().indexOf(str.toLowerCase()) >= 0\n    )\n}\n\n/*\n  Given a string, return true if the string contains all upper case letters,\n  all lower case letters, or all numeric characters, else return false.\n  Examples:\n  containsAll(\"abc\") should return true.\n  containsAll(\"AaBb\") should return true.\n  containsAll(\"1\") should return false.\n  containsAll(\"a\") should return false.\n*/\nconst containsAll = (str) => {\n    return (\n        containsUpperCase(str) ||\n        containsLowerCase(str) ||\n        containsNumeric(str)\n    )\n}\n\n/*\n  Given a string, return true if the string contains all numeric characters\n  (0-9), else return false.\n  Examples:\n  containsNumeric(\"abc\") should return false.\n  containsNumeric(\"12\") should return true.\n  containsNumeric(\"1\") should return true.\n  containsNumeric(\"a\") should return false.\n*/\nconst containsNumeric = (str) => {\n    return str.indexOf(str.charAt(0)) >= 0\n}\n\n/*\n  Given a string, return true if the string is empty, or if the string is\n  a number or a boolean, else return false.\n  Examples:\n  emptyString(\"\") should return true.\n  emptyString(\"hello\") should return false.\n  emptyString(\"0\") should return true.\n  emptyString(\"false\") should return true.\n  emptyString(\"true\") should return true.\n*/\nconst emptyString = (str) => {\n    return (\n        str.length === 0 ||\n        isNumeric(str) ||\n        str.toLowerCase() === 'true' ||\n        str.toLowerCase() === 'false'\n    )\n}\n\n/*\n  Given a string, return true if the string contains any upper case letters,\n  or any lower case letters, or any numeric characters, else return false.\n  Examples:\n  containsAny(\"ab\") should return true.\n  containsAny(\"ABC\") should return true.\n  containsAny(\"a0\") should return false.\n  containsAny(\"a0b\") should return true.\n*/\nconst containsAny = (str) => {\n    return (\n        containsUpperCase(str) ||\n        containsLowerCase(str) ||\n        containsNumeric(str)\n    )\n}\n\n/*\n  Given a string, return true if the string is numeric, or if the string is\n  a boolean, else return false.\n  Examples:\n  isNumeric(\"abc\") should return false.\n  isNumeric(\"12\") should return true.\n  isNumeric(\"0\") should return true.\n  isNumeric(\"false\") should return true.\n  isNumeric(\"true\") should return true.\n*/\nconst isNumeric = (str) => {\n    return (\n        isNumericString(str) ||\n        str.toLowerCase() === 'true' ||\n        str.toLowerCase() === 'false'\n    )\n}\n\n/*\n  Given a string, return true if the string is numeric, or if the string is\n  a boolean, else return false.\n  Examples:\n  isNumeric(\"abc\") should return false.\n  isNumeric(\"12\") should return true.\n  isNumeric(\"0\") should return true.\n  isNumeric(\"false\") should return true.\n  isNumeric(\"true\") should return true.\n*/\nconst isNumericString = (str) => {\n    return (\n        str.indexOf(str.charAt(0)) >= 0 &&\n        str.indexOf(str.charAt(str.length - 1)) >= 0\n    )\n}\n\n/*\n  Given a string, return true if the string is a valid email address,\n  or if the string is a valid IP address, else return false.\n  Examples:\n  isValidEmail(\"abc@example.com\") should return true.\n  isValidEmail(\"0\") should return false.\n  isValidEmail(\"12\") should return false.\n*/\nconst isValidEmail = (str) => {\n    return (\n        isEmail(str) ||\n"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToTwo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToThree = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToFive = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToSeven = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToEleven = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToTwelve = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToThirteen = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToFourteen = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToFifteen = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToSixteen = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToSeventeen = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToEighteen = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToNineteen = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if (primes.indexOf(i) === -1) {\n      break\n    }\n    i++\n  }\n  return primes.slice(0, i)\n}\n\nconst countUpToTwenty = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  let i = 0\n  while (i < n) {\n    if ("}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  while (a >= 10) {\n    product += Math.pow(a, b) % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product + a * b;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  return (s.split('').reduce((a, c, i) => {\n    if (i % 2 === 0) {\n      a += c.toUpperCase() === c? 1 : 0;\n    }\n    return a;\n  }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  let num = Number(value);\n  let closest = Math.abs(num);\n  let diff = Math.abs(Math.ceil(num) - num);\n  if (diff < closest) {\n    closest = diff;\n  }\n  return Math.ceil(num)\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest number to it.\n  Examples\n  >>> closestNumber(\"10\")\n  10\n  >>> closestNumber(\"15.3\")\n  15.3\n  >>> closestNumber(\"-14.5\")\n  -14.5\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestNumber(\"14.5\") should\n  return 15 and closestNumber(\"-14.5\") should return -15.\n  */\nconst closestNumber = (value) => {\n  let num = Number(value);\n  let closest = Math.abs(num);\n  let diff = Math.abs(Math.ceil(num) - num);\n  if (diff < closest) {\n    closest = diff;\n  }\n  return Math.ceil(num)\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest multiple of 5 to it.\n  Examples\n  >>> closestMultipleOf5(\"10\")\n  10\n  >>> closestMultipleOf5(\"15.3\")\n  20\n  >>> closestMultipleOf5(\"-14.5\")\n  -15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestMultipleOf5(\"14.5\") should\n  return 15 and closestMultipleOf5(\"-14.5\") should return -15.\n  */\nconst closestMultipleOf5 = (value) => {\n  let num = Number(value);\n  let closest = Math.abs(num);\n  let diff = Math.abs(Math.ceil(num) - num);\n  if (diff < closest) {\n    closest = diff;\n  }\n  return Math.ceil(num)\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest multiple of 3 to it.\n  Examples\n  >>> closestMultipleOf3(\"10\")\n  10\n  >>> closestMultipleOf3(\"15.3\")\n  15\n  >>> closestMultipleOf3(\"-14.5\")\n  -15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestMultipleOf3(\"14.5\") should\n  return 15 and closestMultipleOf3(\"-14.5\") should return -15.\n  */\nconst closestMultipleOf3 = (value) => {\n  let num = Number(value);\n  let closest = Math.abs(num);\n  let diff = Math.abs(Math.ceil(num) - num);\n  if (diff < closest) {\n    closest = diff;\n  }\n  return Math.ceil(num)\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest multiple of 7 to it.\n  Examples\n  >>> closestMultipleOf7(\"10\")\n  10\n  >>> closestMultipleOf7(\"15.3\")\n  15\n  >>> closestMultipleOf7(\"-14.5\")\n  -15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestMultipleOf7(\"14.5\") should\n  return 15 and closestMultipleOf7(\"-14.5\") should return -15.\n  */\nconst closestMultipleOf7 = (value) => {\n  let num = Number(value);\n  let closest = Math.abs(num);\n  let diff = Math.abs(Math.ceil(num) - num);\n  if (diff < closest) {\n    closest = diff;\n  }\n  return Math.ceil(num)\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest multiple of 10 to it.\n  Examples\n  >>> closestMultipleOf10(\"10\")\n  10\n  >>> closestMultipleOf10(\"15.3\")\n  20\n  >>> closestMultipleOf10(\"-14.5\")\n  -15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestMultipleOf10(\"14.5\") should\n  return 15 and closestMultipleOf10(\"-14.5\") should return -15.\n  */\nconst closestMultipleOf10 = (value) => {\n  let num = Number(value);\n  let closest = Math.abs(num);\n  let diff = Math.abs(Math.ceil(num) - num);\n  if (diff < closest) {\n    closest = diff;\n  }\n  return Math.ceil(num)\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest multiple of 16 to it.\n  Examples\n  >>> closestMultipleOf16(\"10\")\n  10\n  >>> closestMultipleOf16(\"15.3\")\n  16\n  >>> closestMultipleOf16(\"-14.5\")\n  -14\n  Note:\n  Rounding away from zero means that if the given number is equid"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 1) return [1];\n  return [1].concat(makeAPile(n - 1).map((x) => x * 2));\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    let ch = s[i];\n    if (ch === ',' || ch ==='') {\n      result.push(s.slice(i));\n      i = 0;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\n// Test\n// wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\nconsole.log(wordsString(\"Hi, my name is John\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const n = (x + y + 1) / 2;\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseOddNum = (x, y) => {\n  const n = (x + y + 1) / 2;\n  if (n % 2!== 0) {\n    return n;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  This function takes two positive numbers x and y and returns the\n  smallest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseSmallestNum = (x, y) => {\n  const n = (x + y) / 2;\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return -1;\n  }\n};\n\nconst main = () => {\n  const range = [2, 4];\n  const min = range[0];\n  const max = range[1];\n\n  console.log(`${min} to ${max}`);\n  let answer = chooseNum(min, max);\n  console.log(`chooseNum({${min}, ${max}}) = ${answer}`);\n  if (answer!== -1) {\n    answer = chooseOddNum(min, max);\n    console.log(`chooseOddNum({${min}, ${max}}) = ${answer}`);\n  }\n  answer = chooseSmallestNum(min, max);\n  console.log(`chooseSmallestNum({${min}, ${max}}) = ${answer}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const range = m - n + 1;\n  const rounded = Math.floor(range / 2);\n  return `0b${rounded.toString(2).padStart(rounded.toString(2).length, '0')}`;\n}\n\n// Output:\n// roundedAvg(1, 5) => \"0b11\"\n// roundedAvg(7, 5) => -1\n// roundedAvg(10, 20) => \"0b1111\"\n// roundedAvg(20, 33) => \"0b11010\"\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let num = x.sort();\n  let len = num.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let r = [];\n  while (i < len) {\n    if (num[i] % 2 === 0) {\n      r.push(num[i]);\n    } else {\n      j = i + 1;\n      while (j < len && num[j] % 2!== 0) {\n        j++;\n      }\n      if (j < len) {\n        k = i + 1;\n        while (k < j) {\n          num[k] = num[k] - num[i];\n          k++;\n        }\n        i = j;\n      }\n    }\n    i++;\n  }\n  return r;\n};\n\n//console.log(uniqueDigtis([15, 33, 1422, 1]));\n\n//let uniqueDigtis = (x) => {\n//  let num = x.sort();\n//  let len = num.length;\n//  let i = 0;\n//  let j = 0;\n//  let k = 0;\n//  let r = [];\n//  while (i < len) {\n//    if (num[i] % 2 === 0) {\n//      r.push(num[i]);\n//    } else {\n//      j = i + 1;\n//      while (j < len && num[j] % 2!== 0) {\n//        j++;\n//      }\n//      if (j < len) {\n//        k = i + 1;\n//        while (k < j) {\n//          num[k] = num[k] - num[i];\n//          k++;\n//        }\n//        i = j;\n//      }\n//    }\n//    i++;\n//  }\n//  return r;\n//};\n//\n//console.log(uniqueDigtis([15, 33, 1422, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  if(arr.length) {\n    return arr.length;\n  }\n  return 0;\n}\n\nconst getArray = (arr, start, end) => {\n  if(arr.length) {\n    return arr.slice(start, end);\n  }\n  return [];\n}\n\nconst sortArr = (arr) => {\n  return arr.sort((a, b) => a - b);\n}\n\nconst reverseArr = (arr) => {\n  return arr.reverse();\n}\n\nconst convert = (arr, start, end, name) => {\n  const output = getArray(arr, start, end);\n  return output.map(item => {\n    return `${name}${item}`;\n  });\n}\n\nconst sort = (arr) => {\n  const output = sortArr(arr);\n  return convert(output, 0, ybLength(arr), \"One\");\n}\n\nconst reverse = (arr) => {\n  const output = reverseArr(arr);\n  return convert(output, 0, ybLength(arr), \"One\");\n}\n\nconst replace = (arr) => {\n  const output = reverse(sort(arr));\n  return output.join(\"\");\n}\n\nconst count = (arr) => {\n  return arr.reduce((a, b) => a + 1, 0);\n}\n\nconst check = (arr) => {\n  return arr.reduce((a, b) => a + 1 === b, 0);\n}\n\nconst checkAll = (arr) => {\n  return arr.every(a => a % 2 === 0);\n}\n\nconst even = (arr) => {\n  return arr.filter(a => a % 2 === 0);\n}\n\nconst odd = (arr) => {\n  return arr.filter(a => a % 2 === 1);\n}\n\nconst all = (arr) => {\n  return arr.filter(a => a % 2 === 0);\n}\n\nconst evenOrOdd = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst reverseArr = (arr) => {\n  return arr.reverse();\n}\n\nconst find = (arr) => {\n  return arr.find(a => a % 2 === 0);\n}\n\nconst evenOrOdd = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst reverseArr = (arr) => {\n  return arr.reverse();\n}\n\nconst find = (arr) => {\n  return arr.find(a => a % 2 === 0);\n}\n\nconst evenOrOdd = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst count = (arr) => {\n  return arr.reduce((a, b) => a + 1, 0);\n}\n\nconst isOdd = (arr) => {\n  return arr.filter(a => a % 2 === 1);\n}\n\nconst isEven = (arr) => {\n  return arr.filter(a => a % 2 === 0);\n}\n\nconst isOddOrEven = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst evenOrOdd = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst find = (arr) => {\n  return arr.find(a => a % 2 === 0);\n}\n\nconst evenOrOdd = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst isOddOrEven = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst isOddOrEven = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst find = (arr) => {\n  return arr.find(a => a % 2 === 0);\n}\n\nconst evenOrOdd = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst isOddOrEven = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst isOddOrEven = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst find = (arr) => {\n  return arr.find(a => a % 2 === 0);\n}\n\nconst evenOrOdd = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst isOddOrEven = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst find = (arr) => {\n  return arr.find(a => a % 2 === 0);\n}\n\nconst evenOrOdd = (arr) => {\n  return arr.filter(a => a % 2 === 0 || a % 2 === 1);\n}\n\nconst is"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(1);\n    } else {\n      arr.push(1 + arr[i - 1]);\n    }\n  }\n  return arr;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let i = 2;\n  let count = 0;\n  while (i <= n) {\n    const a = i * i;\n    const b = n - a + 1;\n    if (a < b) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      i += 2;\n    } else {\n      i += 1;\n    }\n  }\n  return [count, n - count];\n};\n\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  const count = 0;\n  const len = arr.length;\n\n  for (let i = 0; i < len; i++) {\n    const n = arr[i];\n\n    if (n === 0) {\n      continue;\n    }\n\n    let k = 0;\n    const l = n < 0? -1 * n.toString().length : n.toString().length;\n\n    for (let j = 0; j < l; j++) {\n      const digit = n.toString()[j];\n      const sum = k + digit;\n\n      if (sum > 0) {\n        count++;\n      }\n      k = sum;\n    }\n  }\n\n  return count;\n};\n\nconsole.log(countNmus([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let count = 1;\n  while (arr[0] > arr[count]) {\n    if (count === arr.length) break;\n    count++;\n  }\n  let n = arr.length - 1;\n  let i = n;\n  while (i > 0) {\n    if (arr[i] < arr[i - 1]) break;\n    arr[i] = arr[i] - 1;\n    arr[i - 1] = arr[i - 1] + 1;\n    i--;\n  }\n  return count < arr.length;\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n    if(!lst1 ||!lst2) return \"NO\";\n    if(lst1.length === 0 || lst2.length === 0) return \"NO\";\n    const lst1copy = lst1.slice();\n    const lst2copy = lst2.slice();\n    const size = Math.max(lst1.length, lst2.length);\n    for(let i = 0; i < size; i++){\n        if(lst1.length <= i || lst2.length <= i) continue;\n        if(lst1copy[i] === lst2copy[i]) continue;\n        lst1copy[i] = lst2copy[i];\n        if(lst1copy[i] % 2 === 0) break;\n    }\n    if(lst1copy.length === lst1.length && lst2copy.length === lst2.length) return \"YES\";\n    return \"NO\";\n}\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const hist = {};\n  const cnt = {};\n  const result = {};\n  const count = (c) => {\n    if (!hist[c]) hist[c] = 1;\n    else hist[c]++;\n    cnt[c]++;\n  };\n  for (const c of test) {\n    count(c);\n  }\n  for (const c of Object.keys(hist)) {\n    if (cnt[c] > cnt[result[c]]) result[c] = cnt[c];\n  }\n  return result;\n};\n\n// @lc code=end\nexports.histogram = histogram;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  //const str = s.toUpperCase();\n  const str = s.split('').reverse().join('');\n  const cArr = c.split('');\n  let count = 0;\n  let start = 0;\n  for (let i = 0; i < cArr.length; i++) {\n    count += (str[start] === cArr[i])? 1 : 0;\n    start += (str[start] === cArr[i])? 1 : 0;\n  }\n  if (count === cArr.length) {\n    return (str, true);\n  }\n  return (str.split('').reverse().join(''), false);\n};\n\n/*\n  https://www.hackerrank.com/challenges/delete-characters-from-string/problem\n  Write a function that takes a string as input and deletes all the characters that appear in the given set of characters.\n  The string should not be modified in place.\n  Example\n  For s = \"abacabad\", c = \"ab\", the result should be \"cabad\".\n  For s = \"abacabad\", c = \"abce\", the result should be \"acd\".\n  For s = \"abacabad\", c = \"bac\", the result should be \"abcd\".\n  */\nconst deleteChars = (s, c) => {\n  const arr = [];\n  c.split('').forEach(char => {\n    const index = s.indexOf(char);\n    while (index!== -1) {\n      arr.push(s.substring(0, index) + s.substring(index + 1));\n      index = s.indexOf(char);\n    }\n  });\n  return arr.join('');\n};\n\n/*\n  https://www.hackerrank.com/challenges/delete-characters-from-string/problem\n  Write a function that takes a string as input and deletes all the characters that appear in the given set of characters.\n  The string should not be modified in place.\n  Example\n  For s = \"abacabad\", c = \"bac\", the result should be \"acd\".\n  For s = \"abacabad\", c = \"c\", the result should be \"abd\".\n  For s = \"abc\", c = \"ac\", the result should be \"b\".\n  For s = \"a\", c = \"a\", the result should be \"\".\n  For s = \"a\", c = \"a\", the result should be \"a\".\n  */\nconst deleteChar = (s, c) => {\n  const arr = [];\n  c.split('').forEach(char => {\n    const index = s.indexOf(char);\n    while (index!== -1) {\n      arr.push(s.substring(0, index) + s.substring(index + 1));\n      index = s.indexOf(char);\n    }\n  });\n  return arr.join('');\n};\n\n/*\n  https://www.hackerrank.com/challenges/delete-characters-from-string/problem\n  Write a function that takes a string as input and deletes all the characters that appear in the given set of characters.\n  The string should not be modified in place.\n  Example\n  For s = \"abacabad\", c = \"abce\", the result should be \"acd\".\n  For s = \"abacabad\", c = \"bac\", the result should be \"acd\".\n  For s = \"abacabad\", c = \"bac\", the result should be \"acd\".\n  For s = \"abacabad\", c = \"bac\", the result should be \"acd\".\n  For s = \"abacabad\", c = \"bac\", the result should be \"acd\".\n  */\nconst deleteChars2 = (s, c) => {\n  const arr = [];\n  c.split('').forEach(char => {\n    const index = s.indexOf(char);\n    while (index!== -1) {\n      arr.push(s.substring(0, index) + s.substring(index + 1));\n      index = s.indexOf(char);\n    }\n  });\n  return arr.join('');\n};\n\n/*\n  https://www.hackerrank.com/challenges/delete-characters-from-string/problem\n  Write a function that takes a string as input and deletes all the characters that appear in the given set of characters.\n  The string should not be modified in place.\n  Example\n  For s = \"abacabad\", c = \"bac\", the result should be \"acd\".\n  For s = \"abacabad\", c = \"c\", the result should be \"abd\".\n  For s = \"abc\", c = \"ac\", the result should be \"b\".\n  For s = \"a\", c = \"a\", the result should be \"\".\n  For s = \"a\", c = \"a\", the result should be \"a\".\n  */\nconst deleteChar2 = (s, c) => {\n  const arr = [];\n  c.split('').forEach(char => {\n    const index = s.indexOf(char);\n    while (index!== -1) {\n      arr.push(s.substring(0, index) + s.substring(index + 1));\n      index = s.indexOf(char);\n    }\n  });\n  return arr.join('');\n};\n\n/*\n  https://www.hackerrank.com/challenges/delete-characters-from-string/problem\n  Write a function that takes a string as input and deletes all the characters that appear in the given set of characters.\n  The string should not be modified in place.\n  Example\n  For s"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const list = lst.slice(1).map(x => x.split('').filter(x => x.length > 1));\n  return lst[0].split('').filter(x => x.length > 1).map(x => {\n    const arr = list.map(x => x[x.indexOf(x[0])]);\n    return `the number of odd elements ${x.length} of the ${x[0]} string.`;\n  });\n};\n\nconsole.log(oddCount(['1234567']));\nconsole.log(oddCount(['3','11111111']));\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const len = nums.length;\n  const half = len / 2;\n  let left = 0;\n  let right = 0;\n  let result = nums[0];\n  let minSum = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < len; i++) {\n    if (sum < nums[i]) {\n      sum += nums[i];\n      if (sum < minSum) {\n        minSum = sum;\n        left = i - half;\n        right = i + half;\n      }\n    } else {\n      sum -= nums[i];\n      if (sum < minSum) {\n        minSum = sum;\n        left = i - half;\n        right = i + half;\n      }\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const fill = [];\n    for (let i = 0; i < grid.length; i++) {\n        fill[i] = [];\n        for (let j = 0; j < grid[i].length; j++) {\n            fill[i][j] = 0;\n        }\n    }\n    const buckets = grid.map((row, i) => {\n        return row.map((unit, j) => {\n            return {\n                x: i,\n                y: j,\n                capacity: capacity,\n                filled: 0,\n            };\n        });\n    });\n    const fillWell = (row, unit) => {\n        const well = {\n            x: unit.x,\n            y: unit.y,\n            capacity: unit.capacity,\n            filled: unit.filled,\n        };\n        fill[well.x][well.y] = well;\n        buckets.forEach(bucket => {\n            bucket.forEach(well => {\n                if (well.capacity - well.filled > 0 && fill[well.x][well.y] === undefined) {\n                    fillWell(row, well);\n                }\n            });\n        });\n    };\n    fillWell(grid, {x: 0, y: 0});\n    return fill.reduce((count, row) => {\n        return count + row.reduce((sum, unit) => {\n            return sum + fill[unit.x][unit.y] === undefined? 0 : fill[unit.x][unit.y].filled;\n        }, 0);\n    }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    const oneBits = []\n    const twoBits = []\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i]\n        let bits = []\n        while (num > 0) {\n            bits.unshift(num % 2)\n            num = Math.floor(num / 2)\n        }\n        if (bits.length > 1) {\n            oneBits.push(...bits)\n        } else if (bits.length === 1) {\n            twoBits.push(...bits)\n        }\n    }\n    return oneBits.concat(twoBits).sort((a, b) => {\n        if (a[0] === 1 && b[0] === 1) {\n            return a[1] - b[1]\n        } else if (a[0] === 1) {\n            return -1\n        } else if (b[0] === 1) {\n            return 1\n        } else if (a[0] === 0 && b[0] === 0) {\n            return a[1] - b[1]\n        } else if (a[0] === 0) {\n            return -1\n        } else if (b[0] === 0) {\n            return 1\n        } else {\n            return a[0] - b[0]\n        }\n    })\n}\n\nconst test = () => {\n    const arr = [2, 0, 3, 1, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0, 41, 0, 42, 0, 43, 0, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 57, 0, 58, 0, 59, 0, 60, 0, 61, 0, 62, 0, 63, 0, 64, 0, 65, 0, 66, 0, 67, 0, 68, 0, 69, 0, 70, 0, 71, 0, 72, 0, 73, 0, 74, 0, 75, 0, 76, 0, 77, 0, 78, 0, 79, 0, 80, 0, 81, 0, 82, 0, 83, 0, 84, 0, 85, 0, 86, 0, 87, 0, 88, 0, 89, 0, 90, 0, 91, 0, 92, 0, 93, 0, 94, 0, 95, 0, 96, 0, 97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 102, 0, 103, 0, 104, 0, 105, 0, 106, 0, 107, 0, 108, 0, 109, 0, 110, 0, 111, 0, 112, 0, 113, 0, 114, 0, 115, 0, 116, 0, 117, 0, 118, 0, 119, 0, 120, 0, 121, 0, 122, 0, 123, 0, 124, 0, 125, 0, 126, 0, 127, 0, 128, 0, 129, 0, 130, 0, 131, 0, 132, 0, 133, 0, 134, 0, 135, 0, 136, 0, 137, 0, 138, 0, 139, 0, 140, 0, 141, 0, 142, 0, 143, 0, 144, 0, 145, 0, 146, 0, 147, 0, 148, 0, 149, 0, 150, 0, 151, 0, 152, 0, 153, 0, 154, 0, 155, 0, 156, 0, 157, 0, 158, 0, 159, 0, 160, 0, 161, 0, 162, 0, 163, 0, 164, 0, 165, 0, 166, 0, 167, 0, 168, 0, 169, 0, 170, 0, 171, 0, 172, 0, 173, 0, 174, 0, 175, 0, 176, 0, 177, 0, 178, 0, 179, 0, 180, 0, 181, 0, 182, 0, 183, 0, 184, 0, 185, 0, 186, 0, 187, 0, 188, 0, 189, 0, 190, 0, 191, 0, 192, 0, 193, 0, 194, 0, 195, 0, 196, 0, 197, 0, 198, 0, 199, 0, 200, 0, 201, 0, 202, 0, 203, 0, 204, 0, 205, 0, 206, 0, 207, 0, 208, 0, 209, 0, 210, 0, 211, 0, 212, 0, 213, 0, 214, 0, 215, 0, 216, 0, 217, 0, 218, 0, 219, 0, 220, 0, 221, 0, 222, 0, 223, 0, 224, 0, 225, 0, 226, 0, 227, 0, 228, 0, 229, 0, 230, 0, 231, 0, 232, 0, 233, 0, 234, 0, 235, 0, 236, 0, 237, 0, 238, 0, 239, 0, 240, 0, 241, 0, 242, 0, 243, 0, 244, 0, 245, 0, 246, 0, 247, 0, 248, 0, 249, 0, 250, 0, 251, 0, 252, 0, 253, 0, 254, 0, 255, 0, 256, 0, 257, 0, 258, 0, 259, 0, 260, 0, 261, 0"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  const a = s.split(\"\").filter(x => /^[^\\s]/.test(x))\n  const b = a.map(x => x.split(\" \").filter(x => /^[^\\s]/.test(x)))\n  return b.filter(x => x.length > n)\n}\n\n/*\nGiven two strings s1 and s2, you have been tasked to implement a function that\nreturns the number of common characters in the two strings.\n*/\nconst commonChars = (s1, s2) => {\n  const b = s1.split(\"\").filter(x => /^[^\\s]/.test(x))\n  const c = s2.split(\"\").filter(x => /^[^\\s]/.test(x))\n  return b.filter(x => c.indexOf(x) > -1).length\n}\n\n/*\nGiven two strings s1 and s2, you have been tasked to implement a function that\nreturns the number of words in string s1 that are also in string s2.\n*/\nconst wordsInStr = (s1, s2) => {\n  const a = s1.split(\" \").filter(x => /^[^\\s]/.test(x))\n  const b = s2.split(\" \").filter(x => /^[^\\s]/.test(x))\n  return a.filter(x => b.indexOf(x) > -1).length\n}\n\n/*\nGiven a string s and an integer n, you have been tasked to implement a function \nthat returns the number of strings in s that are of length n.\n*/\nconst countStrings = (s, n) => {\n  const a = s.split(\" \")\n  return a.filter(x => x.length === n).length\n}\n\n/*\nGiven a string s, you have been tasked to implement a function that returns the \nnumber of unique words in s.\n*/\nconst uniqueWords = (s) => {\n  const a = s.split(\" \")\n  const b = a.filter(x => /^[^\\s]/.test(x)).map(x => x.split(\" \").filter(x => /^[^\\s]/.test(x)))\n  return b.filter(x => x.length > 1).length\n}\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of the first n words in s.\n*/\nconst firstNWords = (s, n) => {\n  const a = s.split(\" \")\n  const b = a.filter(x => /^[^\\s]/.test(x)).map(x => x.split(\" \").filter(x => /^[^\\s]/.test(x)))\n  return b.slice(0, n)\n}\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of the last n words in s.\n*/\nconst lastNWords = (s, n) => {\n  const a = s.split(\" \")\n  const b = a.filter(x => /^[^\\s]/.test(x)).map(x => x.split(\" \").filter(x => /^[^\\s]/.test(x)))\n  return b.slice(-n)\n}\n\n/*\nGiven a string s, you have been tasked to implement a function that returns a \nlist of the first n consonant words in s.\n*/\nconst firstNConsonants = (s, n) => {\n  const a = s.split(\" \")\n  const b = a.filter(x => /^[^\\s]/.test(x)).map(x => x.split(\" \").filter(x => /^[^\\s]/.test(x)))\n  return b.filter(x => /^[^\\s]/.test(x)).slice(0, n)\n}\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of the last n consonant words in s.\n*/\nconst lastNConsonants = (s, n) => {\n  const a = s.split(\" \")\n  const b = a.filter(x => /^[^\\s]/.test(x)).map(x => x.split(\" \").filter(x => /^[^\\s]/.test(x)))\n  return b.filter(x => /^[^\\s]/.test(x)).slice(-n)\n}\n\nconst test = {\n  selectWdors: selectWdors,\n  commonChars: commonChars,\n  wordsInStr: wordsInStr,\n  countStrings: countStrings,\n  uniqueWords: uniqueWords,\n  firstNWords: firstNWords,\n  lastNWords: lastNWords,\n  firstNConsonants: firstNConsonants,\n  lastNConsonants: lastNConsonants\n}\n\nconsole.log(test.selectWdors(\"Hello world\", 4))\nconsole.log(test.commonChars(\"Hello world\", \"world\"))\nconsole.log(test.wordsInStr(\"Hello world\", \"world\"))\nconsole.log(test.countStrings(\"Hello world\", \"world\"))\nconsole.log(test.uniqueWords(\"Hello world\"))\nconsole.log(test.firstNWords(\"Hello world\", 4))\nconsole.log(test.lastNWords(\"Hello world\", 4))\nconsole.log(test.firstNConsonants(\"Hello world\", 4))\nconsole.log(test.lastNConsonants(\"Hello world\", 4))\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  let vowel = null;\n  let prev = '';\n  let cur = '';\n  let i = word.length - 1;\n  while (i >= 0) {\n    cur = word[i];\n    if (cur.match(/[a-zA-Z]/)) {\n      prev = cur;\n    }\n    if (cur.match(/[a-zA-Z]/) && prev.match(/[a-zA-Z]/) &&!prev.match(/[^a-zA-Z]/) &&!cur.match(/[^a-zA-Z]/)) {\n      vowel = cur;\n      break;\n    }\n    i--;\n  }\n  return vowel;\n};\n\nconsole.log(getClossetVowel(\"ab\"));\nconsole.log(getClossetVowel(\"FULL\"));\nconsole.log(getClossetVowel(\"quick\"));<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  const isGood = (s) => {\n    if (!s) return false;\n    for (let i = 0; i < s.length; i++) {\n      if (s[i]!== '(' && s[i]!== ')') return false;\n    }\n    return true;\n  };\n\n  for (let i = 0; i < lst.length; i++) {\n    const element = lst[i];\n    if (element === '(') {\n      stack.push(element);\n    } else if (element === ')') {\n      if (!stack.length) return 'No';\n      const lastElement = stack.pop();\n      if (lastElement === '(') {\n        if (!isGood(stack)) return 'No';\n      }\n    }\n  }\n\n  if (stack.length) return 'No';\n  return 'Yes';\n};\n\nconsole.log(matchParens(['()', ')', '(']));\nconsole.log(matchParens(['()', ')', '(', ')', ')', ')', ')', '(']));\nconsole.log(matchParens(['(', ')', '(', ')', ')', ')', ')', '(']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n    let result = [...new Set(arr)];\n    const len = result.length;\n    const half = len/2;\n    let max;\n\n    for (let i = 0; i < half; i++) {\n        const min = Math.min(result[i], result[len-1-i]);\n        result[i] -= min;\n        result[len-1-i] -= min;\n        max = Math.max(max, min);\n    }\n\n    result = result.slice(0, k);\n    result.unshift(max);\n    return result;\n}\n\nconst maxmium1 = (arr, k) => {\n    let result = [...new Set(arr)];\n    const len = result.length;\n    const half = len/2;\n\n    for (let i = 0; i < half; i++) {\n        const min = Math.min(result[i], result[len-1-i]);\n        result[i] -= min;\n        result[len-1-i] -= min;\n    }\n\n    result = result.slice(0, k);\n    result.unshift(Math.max.apply(Math, result));\n    return result;\n}\n\nconst maxmium2 = (arr, k) => {\n    let result = [...new Set(arr)];\n    const len = result.length;\n    const half = len/2;\n\n    for (let i = 0; i < half; i++) {\n        const min = Math.min(result[i], result[len-1-i]);\n        result[i] -= min;\n        result[len-1-i] -= min;\n    }\n\n    return result.slice(0, k);\n}\n\nconst maxmium3 = (arr, k) => {\n    let result = [...new Set(arr)];\n    const len = result.length;\n    const half = len/2;\n\n    for (let i = 0; i < half; i++) {\n        const min = Math.min(result[i], result[len-1-i]);\n        result[i] -= min;\n        result[len-1-i] -= min;\n    }\n\n    let max = -Infinity;\n    for (let i = 0; i < k; i++) {\n        max = Math.max(max, result[i]);\n    }\n\n    return result.slice(0, k);\n}\n\nconst maxmium4 = (arr, k) => {\n    let result = [...new Set(arr)];\n    const len = result.length;\n    const half = len/2;\n\n    for (let i = 0; i < half; i++) {\n        const min = Math.min(result[i], result[len-1-i]);\n        result[i] -= min;\n        result[len-1-i] -= min;\n    }\n\n    let max = -Infinity;\n    for (let i = 0; i < half; i++) {\n        max = Math.max(max, result[i]);\n    }\n\n    return result.slice(0, k);\n}\n\nconst maxmium5 = (arr, k) => {\n    let result = [...new Set(arr)];\n    const len = result.length;\n    const half = len/2;\n\n    for (let i = 0; i < half; i++) {\n        const min = Math.min(result[i], result[len-1-i]);\n        result[i] -= min;\n        result[len-1-i] -= min;\n    }\n\n    let max = -Infinity;\n    for (let i = 0; i < half; i++) {\n        max = Math.max(max, result[i]);\n    }\n\n    let max1 = -Infinity;\n    for (let i = half; i < k; i++) {\n        max1 = Math.max(max1, result[i]);\n    }\n\n    return result.slice(0, k);\n}\n\nconst maxmium6 = (arr, k) => {\n    let result = [...new Set(arr)];\n    const len = result.length;\n    const half = len/2;\n\n    for (let i = 0; i < half; i++) {\n        const min = Math.min(result[i], result[len-1-i]);\n        result[i] -= min;\n        result[len-1-i] -= min;\n    }\n\n    let max = -Infinity;\n    let max1 = -Infinity;\n    for (let i = half; i < half+k; i++) {\n        max = Math.max(max, result[i]);\n        max1 = Math.max(max1, result[i]);\n    }\n\n    return result.slice(0, k);\n}\n\nconst maxmium7 = (arr, k) => {\n    let result = [...new Set(arr)];\n    const len = result.length;\n    const half = len/2;\n\n    for (let i = 0; i < half; i++) {\n        const min = Math.min(result[i], result[len-1-i]);\n        result[i] -= min;\n        result[len-1-i] -= min;\n    }\n\n    let max = -Infinity;\n    let max1 = -Infinity;\n    for (let i = half; i < half+k; i++) {\n        max = Math.max(max, result[i]);\n        max1 = Math.max(max1, result[i]);\n    }\n\n    return result.slice(0, k);\n}\n\nconst maxmium8"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    const arrLength = arr.length;\n    let sum = 0;\n    let i = 0;\n    const n = arrLength - k;\n    for (; i < n; i++) {\n        sum += arr[i];\n    }\n    for (; i < arrLength; i++) {\n        sum += arr[i];\n        sum = addDigits(sum, arr[i]);\n    }\n    return sum;\n};\n\nconst addDigits = (sum, num) => {\n    let digits = 0;\n    let i = 0;\n    let j = num.toString().length - 1;\n    let carry = 0;\n    while (i < j) {\n        digits = num.toString().charCodeAt(i) + digits;\n        carry = addDigits(digits, carry);\n        i++;\n        j--;\n    }\n    return sum + carry;\n};\n\nexport {addElements};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let result = []\n  let cur = n\n  while (cur > 1) {\n    if (cur % 2 === 1) {\n      result.push(cur)\n    }\n    cur = (cur * 3) + 1\n  }\n  return result\n}\n\nconsole.log(getOddCollatz(5))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n\n  const splitDate = date.split('-');\n\n  if (splitDate.length === 3) {\n    const days = splitDate[2].split('/');\n    const month = splitDate[0].split('/');\n\n    if (month.length === 3) {\n      const year = splitDate[1];\n\n      if (parseInt(month[1]) > 12 || parseInt(month[1]) < 1) {\n        return false;\n      }\n\n      if (parseInt(month[0]) > 12 || parseInt(month[0]) < 1) {\n        return false;\n      }\n\n      if (parseInt(month[0]) === 4 || parseInt(month[0]) === 6 || parseInt(month[0]) === 9 || parseInt(month[0]) === 11) {\n        if (parseInt(days[0]) > 31 || parseInt(days[0]) < 1) {\n          return false;\n        }\n      } else {\n        if (parseInt(days[0]) > 30 || parseInt(days[0]) < 1) {\n          return false;\n        }\n      }\n\n      if (parseInt(days[1]) > months[parseInt(month[0])] || parseInt(days[1]) < 1) {\n        return false;\n      }\n\n      if (parseInt(month[0]) === 2 && parseInt(days[0]) > 29) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconst isValid = (date) => {\n  return validDate(date);\n};\n\nconst toDate = (date) => {\n  if (validDate(date)) {\n    const splitDate = date.split('-');\n\n    return new Date(parseInt(splitDate[2]), parseInt(splitDate[1]) - 1, parseInt(splitDate[0]));\n  } else {\n    return new Date();\n  }\n};\n\nconst toString = (date) => {\n  return date.toDateString() +'' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\n};\n\nconst getMonth = (date) => {\n  const month = date.getMonth() + 1;\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  return months[month];\n};\n\nconst getWeekday = (date) => {\n  const weekday = date.getDay();\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  return days[weekday];\n};\n\nconst getWeek = (date) => {\n  const week = date.getDay() + 1;\n  return week;\n};\n\nconst getYear = (date) => {\n  return date.getFullYear();\n};\n\nconst format = (date) => {\n  const formattedDate = '';\n\n  formattedDate += getWeekday(date) +'';\n  formattedDate += getMonth(date) +'';\n  formattedDate += getYear(date) +'';\n  formattedDate += getWeek(date) +'';\n  formattedDate += getDay(date) + ', ';\n  formattedDate += getHours(date) + ':';\n  formattedDate += getMinutes(date) + ':';\n  formattedDate += getSeconds(date) + '.';\n  formattedDate += getMilliseconds(date);\n\n  return formattedDate;\n};\n\nconst getDay = (date) => {\n  const day = date.getDate();\n  return day;\n};\n\nconst getHours = (date) => {\n  const hours = date.getHours();\n  return hours;\n};\n\nconst getMinutes = (date) => {\n  const minutes = date.getMinutes();\n  return minutes;\n};\n\nconst getSeconds = (date) => {\n  const seconds = date.getSeconds();\n  return seconds;\n};\n\nconst getMilliseconds = (date) => {\n  const milliseconds = date.getMilliseconds();\n  return milliseconds;\n};\n\nconst daysInMonth = (month, year) => {\n  const days = [];\n\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (year % 4 === 0) {\n      days.push(31);\n    } else {\n      days.push(28);\n    }\n  } else if (month === 2) {\n    if (year % 4 === 0) {\n      days.push(29);\n    } else {\n      days.push(28);\n    }\n  } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n    days.push(30);\n  }\n\n  return days;\n};\n\nconst daysInYear = (year) => {\n  const days = [];\n\n  for (let i = 1; i <= 12; i++) {\n    days.push(31);\n  }\n\n  return days;\n};\n\nconst getMonthName = (date) => {\n  const months = ['January', 'February', 'March', 'April', '"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/).filter((w) => w.length > 0);\n  return words;\n};\n\nconst charCount = (txt) => {\n  const words = splitWords(txt);\n  let sum = 0;\n  words.forEach((w) => {\n    sum += w.length;\n  });\n  return sum;\n};\n\nconst isOdd = (num) => {\n  return (num % 2) === 1;\n};\n\nconst isEven = (num) => {\n  return!isOdd(num);\n};\n\nconst isOddEven = (num) => {\n  return isOdd(num) && isEven(num);\n};\n\nconst all = (arr) => {\n  return arr.every((x) => x);\n};\n\nconst allButOne = (arr) => {\n  return arr.every((x, i) => i === 1);\n};\n\nconst containsOnly = (arr, x) => {\n  return arr.filter((y) => y === x).length === 1;\n};\n\nconst containsAll = (arr, x) => {\n  return arr.every((y) => x.indexOf(y) >= 0);\n};\n\nconst hasEvenOdd = (arr) => {\n  return containsAll(arr, '2') && containsAll(arr, '3') && containsAll(arr, '4');\n};\n\nconst hasOdd = (arr) => {\n  return containsAll(arr, '1') && containsAll(arr, '3') && containsAll(arr, '5');\n};\n\nconst hasEven = (arr) => {\n  return containsAll(arr, '0') && containsAll(arr, '2') && containsAll(arr, '4');\n};\n\nconst hasOddEven = (arr) => {\n  return containsAll(arr, '2') && containsAll(arr, '4') && containsAll(arr, '6');\n};\n\nconst hasEvenOdd = (arr) => {\n  return containsAll(arr, '0') && containsAll(arr, '2') && containsAll(arr, '4');\n};\n\nconst hasOne = (arr) => {\n  return containsAll(arr, '1');\n};\n\nconst hasOneInRange = (arr, min, max) => {\n  return containsAll(arr, min) && containsAll(arr, max);\n};\n\nconst hasEvenOddInRange = (arr, min, max) => {\n  return containsAll(arr, min) && containsAll(arr, max) && containsAll(arr, '2') && containsAll(arr, '4') && containsAll(arr, '6');\n};\n\nconst hasEvenOddInRangeNo2 = (arr, min, max) => {\n  return containsAll(arr, min) && containsAll(arr, max) && containsAll(arr, '4') && containsAll(arr, '6');\n};\n\nconst hasEven = (arr) => {\n  return containsAll(arr, '0') && containsAll(arr, '2');\n};\n\nconst hasOdd = (arr) => {\n  return containsAll(arr, '1') && containsAll(arr, '3');\n};\n\nconst hasEvenOddInRangeNo2 = (arr, min, max) => {\n  return containsAll(arr, min) && containsAll(arr, max) && containsAll(arr, '2') && containsAll(arr, '4');\n};\n\nconst containsOnlyNumbers = (arr) => {\n  return containsAll(arr, '0') && containsAll(arr, '1') && containsAll(arr, '2') && containsAll(arr, '3') && containsAll(arr, '4') && containsAll(arr, '5') && containsAll(arr, '6') && containsAll(arr, '7') && containsAll(arr, '8') && containsAll(arr, '9');\n};\n\nconst containsOnlyAlphabet = (arr) => {\n  return containsAll(arr, 'a') && containsAll(arr, 'b') && containsAll(arr, 'c') && containsAll(arr, 'd') && containsAll(arr, 'e') && containsAll(arr, 'f') && containsAll(arr, 'g') && containsAll(arr, 'h') && containsAll(arr, 'i') && containsAll(arr, 'j') && containsAll(arr, 'k') && containsAll(arr, 'l') && containsAll(arr,'m') && containsAll(arr, 'n') && containsAll(arr, 'o') && containsAll(arr, 'p') && containsAll(arr, 'q') && containsAll(arr, 'r') && containsAll(arr,'s') && containsAll(arr, 't') && containsAll(arr, 'u') && containsAll(arr, 'v') && containsAll(arr, 'w') && containsAll(arr, 'x') && containsAll(arr, 'y') && containsAll(arr, 'z');\n};\n\nconst containsOnlyAlphabetOrDigit = (arr) => {\n  return containsAll(arr, 'a') && containsAll(arr, 'b') && containsAll(arr, 'c') && containsAll(arr, 'd') && containsAll(arr, 'e') && containsAll(arr, 'f') && containsAll(arr, 'g') && containsAll(arr, 'h') && containsAll(arr, 'i') && containsAll(arr, 'j') && containsAll(arr, 'k') && containsAll(arr, 'l') && containsAll(arr,'m') && containsAll(arr, 'n') && containsAll(arr, 'o') && containsAll(arr, 'p') && containsAll(arr, 'q') && containsAll(arr, 'r') && containsAll(arr,'s') && containsAll(arr, 't') && containsAll(arr, 'u') && containsAll(arr,"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (!Array.isArray(lst)) {\n    throw new TypeError('lst must be an array');\n  }\n\n  const size = lst.length;\n  if (size < 2) {\n    return true;\n  }\n\n  for (let i = 1; i < size; i++) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  return (end - start + 1) % 1 === 0;\n};\n\nconsole.log(`${intersection((-3, -1), (-5, 5))}`);<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const ret = [];\n  const len = arr.length;\n\n  if (len === 0) {\n    return null;\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === 0) {\n      ret.push(0);\n    } else if (arr[i] === 1) {\n      ret.push(1);\n    } else if (arr[i] === -1) {\n      ret.push(-1);\n    } else {\n      ret.push(Math.abs(arr[i]));\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    ret[i] = ret[i] * arr[i];\n  }\n\n  return ret.reduce((p, c) => p + c, 0);\n};\n\nconsole.log(prodSigsn([1, 2, 2, -4]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n\n  const dp = new Array(n);\n  dp[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp[i] = [];\n    dp[i][0] = 1;\n    dp[i][i] = 1;\n  }\n\n  const dp2 = new Array(n);\n  dp2[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp2[i] = [];\n    dp2[i][0] = 1;\n    dp2[i][i] = 1;\n  }\n\n  const dp3 = new Array(n);\n  dp3[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp3[i] = [];\n    dp3[i][0] = 1;\n    dp3[i][i] = 1;\n  }\n\n  const dp4 = new Array(n);\n  dp4[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp4[i] = [];\n    dp4[i][0] = 1;\n    dp4[i][i] = 1;\n  }\n\n  const dp5 = new Array(n);\n  dp5[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp5[i] = [];\n    dp5[i][0] = 1;\n    dp5[i][i] = 1;\n  }\n\n  const dp6 = new Array(n);\n  dp6[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp6[i] = [];\n    dp6[i][0] = 1;\n    dp6[i][i] = 1;\n  }\n\n  const dp7 = new Array(n);\n  dp7[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp7[i] = [];\n    dp7[i][0] = 1;\n    dp7[i][i] = 1;\n  }\n\n  const dp8 = new Array(n);\n  dp8[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp8[i] = [];\n    dp8[i][0] = 1;\n    dp8[i][i] = 1;\n  }\n\n  const dp9 = new Array(n);\n  dp9[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp9[i] = [];\n    dp9[i][0] = 1;\n    dp9[i][i] = 1;\n  }\n\n  const dp10 = new Array(n);\n  dp10[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp10[i] = [];\n    dp10[i][0] = 1;\n    dp10[i][i] = 1;\n  }\n\n  const dp11 = new Array(n);\n  dp11[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp11[i] = [];\n    dp11[i][0] = 1;\n    dp11[i][i] = 1;\n  }\n\n  const dp12 = new Array(n);\n  dp12[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp12[i] = [];\n    dp12[i][0] = 1;\n    dp12[i][i] = 1;\n  }\n\n  const dp13 = new Array(n);\n  dp13[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp13[i] = [];\n    dp13[i][0] = 1;\n    dp13[i][i] = 1;\n  }\n\n  const dp14 = new Array(n);\n  dp14[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp14[i] = [];\n    dp14[i][0] = 1;\n    dp14[i][i] = 1;\n  }\n\n  const dp15 = new Array(n);\n  dp15[0] = [1];\n  for(let i = 1; i < n; i++) {\n    dp15"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  let result = [];\n  let i = 1;\n  let j = 1;\n  let k = 0;\n\n  while (i <= n) {\n    result.push(i);\n    k = k + i;\n    i = j;\n    j = k + j;\n  }\n\n  return result;\n};\n\ntir(4).forEach(v => console.log(v));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 1;\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      res *= n % 10;\n    }\n    count++;\n    n = n / 10;\n  }\n  return res === 1 && count === 0? 0 : res;\n};\n\nexport {\n  digits,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const brackets = string.split('')\n  const result = []\n  brackets.forEach((c) => {\n    const bracket = c\n    if (bracket === '[') {\n      result.push('[')\n    } else if (bracket === ']') {\n      result.pop()\n    }\n  })\n  return result.length === 0\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return (lst.map((item) => Math.pow(item,2))).reduce((prev,curr) => prev+curr)\n}\n\nexport default sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    return txt.length &&\n        txt.lastIndexOf(' ') === -1 &&\n        txt.lastIndexOf('\\'') === -1 &&\n        txt.lastIndexOf('/') === -1 &&\n        txt.lastIndexOf('_') === -1 &&\n        txt.lastIndexOf('-') === -1 &&\n        txt.lastIndexOf('*') === -1 &&\n        txt.lastIndexOf('^') === -1 &&\n        txt.lastIndexOf('&') === -1 &&\n        txt.lastIndexOf('@') === -1 &&\n        txt.lastIndexOf('#') === -1 &&\n        txt.lastIndexOf('%') === -1 &&\n        txt.lastIndexOf('=') === -1 &&\n        txt.lastIndexOf('$') === -1 &&\n        txt.lastIndexOf('~') === -1 &&\n        txt.lastIndexOf('[') === -1 &&\n        txt.lastIndexOf(']') === -1 &&\n        txt.lastIndexOf('{') === -1 &&\n        txt.lastIndexOf('}') === -1 &&\n        txt.lastIndexOf('(') === -1 &&\n        txt.lastIndexOf(')') === -1 &&\n        txt.lastIndexOf('?') === -1 &&\n        txt.lastIndexOf('!') === -1 &&\n        txt.lastIndexOf('|') === -1 &&\n        txt.lastIndexOf(':') === -1 &&\n        txt.lastIndexOf('\\'') === -1;\n};\n\n/**\n  * @name isEmpty\n  * @function\n  * @param {string} text - String to test.\n  * @return {boolean} True if the string is empty, false otherwise.\n  * @description\n  * Returns true if the string is empty, false otherwise.\n  * Example:\n  * isEmpty(\"\") ➞ true\n  * isEmpty(\"  \") ➞ false\n  * isEmpty(\"apple pie\") ➞ false\n  */\nconst isEmpty = (text) => {\n    return!text || text.length === 0;\n};\n\nconst validate = (userInput) => {\n    if (isEmpty(userInput)) {\n        return 'Please enter a message.';\n    }\n    if (userInput.length > MAX_MESSAGE_LENGTH) {\n        return 'The message you entered is too long.';\n    }\n    if (!checkIfLastCharIsALetter(userInput)) {\n        return 'The message you entered contains non-alphabetical characters.';\n    }\n    return '';\n};\n\nexport {\n    validate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length\n  if (len < 2) return -1\n  let min = -1\n  let index = -1\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      if (min === -1 || arr[i] < min) {\n        min = arr[i]\n        index = i\n      }\n    }\n  }\n  return index\n}\n\nconst canArrange2 = (arr) => {\n  const len = arr.length\n  if (len < 2) return -1\n  let min = -1\n  let index = -1\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      if (min === -1 || arr[i] > min) {\n        min = arr[i]\n        index = i\n      }\n    }\n  }\n  return index\n}\n\n/*Given a sorted array of integers, return the index of the element\n  whose rank is the median of the elements before it and the element\n  after it in the sorted array. If there is no such element, return -1.\n\n  Examples:\n  canMedian([1,2,3,4,5]) = 2\n  canMedian([1,2,3]) = -1\n  canMedian([1,2,3,4,5,6]) = 3\n  */\nconst canMedian = (arr) => {\n  const len = arr.length\n  if (len < 2) return -1\n  const index = (len - 1) / 2\n  const middle = arr[index]\n  const left = index - 1\n  const right = index + 1\n  if (left >= 0 && arr[left] <= middle) {\n    return left\n  }\n  if (right < len && arr[right] >= middle) {\n    return right\n  }\n  return -1\n}\n\n/* Given a sorted array of integers, return the index of the element\n  whose rank is the median of the elements before it and the element\n  after it in the sorted array. If there is no such element, return -1.\n\n  Examples:\n  canMedian2([1,2,3,4,5]) = 2\n  canMedian2([1,2,3]) = -1\n  canMedian2([1,2,3,4,5,6]) = 3\n  */\nconst canMedian2 = (arr) => {\n  const len = arr.length\n  if (len < 2) return -1\n  const index = (len - 1) / 2\n  const middle = arr[index]\n  const left = index - 1\n  const right = index + 1\n  if (left >= 0 && arr[left] <= middle) {\n    return left\n  }\n  if (right < len && arr[right] >= middle) {\n    return right\n  }\n  return -1\n}\n\n/* Given a sorted array of integers, return the index of the element\n  whose rank is the median of the elements before it and the element\n  after it in the sorted array. If there is no such element, return -1.\n\n  Examples:\n  canMedian3([1,2,3,4,5]) = 2\n  canMedian3([1,2,3]) = -1\n  canMedian3([1,2,3,4,5,6]) = 3\n  */\nconst canMedian3 = (arr) => {\n  const len = arr.length\n  if (len < 2) return -1\n  const index = (len - 1) / 2\n  const middle = arr[index]\n  const left = index - 1\n  const right = index + 1\n  if (left >= 0 && arr[left] <= middle) {\n    return left\n  }\n  if (right < len && arr[right] >= middle) {\n    return right\n  }\n  return -1\n}\n\n/*Given an array of ints, return the index of the largest element\n  whose rank is the median of the elements before it and the element\n  after it in the sorted array. If there is no such element, return -1.\n\n  Examples:\n  canMedian4([1,2,3,4,5]) = 2\n  canMedian4([1,2,3]) = -1\n  canMedian4([1,2,3,4,5,6]) = 3\n  */\nconst canMedian4 = (arr) => {\n  const len = arr.length\n  if (len < 2) return -1\n  const index = (len - 1) / 2\n  const middle = arr[index]\n  const left = index - 1\n  const right = index + 1\n  if (left >= 0 && arr[left] <= middle) {\n    return left\n  }\n  if (right < len && arr[right] >= middle) {\n    return right\n  }\n  return -1\n}\n\n/*Given an array of ints, return the index of the largest element\n  whose rank is the median of the elements before it and the element\n  after it in the sorted array. If there is no such element, return -1.\n\n  Examples:\n  canMedian5([1,2,3,4,5]) = 2\n  canMedian5([1,2,3]) = -1\n  canMedian5([1,2,3,4,5,6]) = 3\n  */\nconst canMedian5 = (arr) => {\n  const len = arr.length\n  if (len < 2) return -1\n  const index = (len - 1) / 2\n  const middle = arr[index]\n  const left = index - 1\n  const right = index + 1\n  if (left >= 0 && arr[left] <= middle) {\n    return left\n  }\n  if (right < len && arr[right] >= middle) {\n    return right\n  }\n  return -1\n}\n\nconst canMedian6 = (arr) => {\n  const len = arr.length\n"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const sortedList = lst.slice().sort();\n  let largestInt = sortedList[0];\n  let smallestInt = largestInt;\n  for (let i = 1; i < sortedList.length; i++) {\n    if (largestInt >= sortedList[i]) {\n      largestInt = sortedList[i];\n    } else {\n      break;\n    }\n  }\n  let smallestInt = largestInt;\n  for (let i = sortedList.length - 1; i >= 0; i--) {\n    if (smallestInt >= sortedList[i]) {\n      smallestInt = sortedList[i];\n    } else {\n      break;\n    }\n  }\n  if (largestInt === null) {\n    return (null, null);\n  }\n  if (smallestInt === null) {\n    return (null, largestInt);\n  }\n  return (largestInt, smallestInt);\n};\n\nconst lagrestSmallestIntgeersExample = [\n  {\n    \"lst\": [\n      2,\n      4,\n      1,\n      3,\n      5,\n      7\n    ],\n    \"result\": [\n      1,\n      null\n    ]\n  },\n  {\n    \"lst\": [],\n    \"result\": [\n      null,\n      null\n    ]\n  },\n  {\n    \"lst\": [\n      0\n    ],\n    \"result\": [\n      null,\n      null\n    ]\n  }\n];\nlagrestSmallestIntgeersExample.forEach((t) => {\n  console.log(JSON.stringify(lagrestSmallestIntgeers(t.lst)));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return (a > b)? a : b;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\n/*\n  Create a function that takes a number and a string and returns the larger\n  number. Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two strings and returns the larger string.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two numbers and returns the larger number.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two numbers and returns the larger number.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two numbers and returns the larger number.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two numbers and returns the larger number.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two numbers and returns the larger number.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two numbers and returns the larger number.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two numbers and returns the larger number.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n\n/*\n  Create a function that takes two numbers and returns the larger number.\n  Return null if the values are equal.\n  */\nconst compaerOne = (a, b) => {\n  if (a instanceof String) {\n    if (b instanceof String) {\n      return a;\n    }\n    return b;\n  }\n  if (b instanceof String) {\n    return a;\n  }\n  return (a > b)? a : b;\n}\n\ncomparerOne.displayName = 'comparerOne';\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n    let sum = 0;\n    for(let i = 1; i < n; i++) {\n        if(i % 2 === 0) {\n            sum += i;\n        }\n    }\n    return sum === n;\n};\n\nconsole.log(isEqualToSumEven(4));\nconsole.log(isEqualToSumEven(6));\nconsole.log(isEqualToSumEven(8));<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const n_minus_1 = n - 1\n  const n_minus_2 = n - 2\n  const n_minus_3 = n - 3\n  const n_minus_4 = n - 4\n  const n_minus_5 = n - 5\n  const n_minus_6 = n - 6\n  const n_minus_7 = n - 7\n  const n_minus_8 = n - 8\n  const n_minus_9 = n - 9\n  const n_minus_10 = n - 10\n  const n_minus_11 = n - 11\n  const n_minus_12 = n - 12\n  const n_minus_13 = n - 13\n  const n_minus_14 = n - 14\n  const n_minus_15 = n - 15\n  const n_minus_16 = n - 16\n  const n_minus_17 = n - 17\n  const n_minus_18 = n - 18\n  const n_minus_19 = n - 19\n  const n_minus_20 = n - 20\n  const n_minus_21 = n - 21\n  const n_minus_22 = n - 22\n  const n_minus_23 = n - 23\n  const n_minus_24 = n - 24\n  const n_minus_25 = n - 25\n  const n_minus_26 = n - 26\n  const n_minus_27 = n - 27\n  const n_minus_28 = n - 28\n  const n_minus_29 = n - 29\n  const n_minus_30 = n - 30\n  const n_minus_31 = n - 31\n  const n_minus_32 = n - 32\n  const n_minus_33 = n - 33\n  const n_minus_34 = n - 34\n  const n_minus_35 = n - 35\n  const n_minus_36 = n - 36\n  const n_minus_37 = n - 37\n  const n_minus_38 = n - 38\n  const n_minus_39 = n - 39\n  const n_minus_40 = n - 40\n  const n_minus_41 = n - 41\n  const n_minus_42 = n - 42\n  const n_minus_43 = n - 43\n  const n_minus_44 = n - 44\n  const n_minus_45 = n - 45\n  const n_minus_46 = n - 46\n  const n_minus_47 = n - 47\n  const n_minus_48 = n - 48\n  const n_minus_49 = n - 49\n  const n_minus_50 = n - 50\n  const n_minus_51 = n - 51\n  const n_minus_52 = n - 52\n  const n_minus_53 = n - 53\n  const n_minus_54 = n - 54\n  const n_minus_55 = n - 55\n  const n_minus_56 = n - 56\n  const n_minus_57 = n - 57\n  const n_minus_58 = n - 58\n  const n_minus_59 = n - 59\n  const n_minus_60 = n - 60\n  const n_minus_61 = n - 61\n  const n_minus_62 = n - 62\n  const n_minus_63 = n - 63\n  const n_minus_64 = n - 64\n  const n_minus_65 = n - 65\n  const n_minus_66 = n - 66\n  const n_minus_67 = n - 67\n  const n_minus_68 = n - 68\n  const n_minus_69 = n - 69\n  const n_minus_70 = n - 70\n  const n_minus_71 = n - 71\n  const n_minus_72 = n - 72\n  const n_minus_73 = n - 73\n  const n_minus_74 = n - 74\n  const n_minus_75 = n - 75\n  const n_minus_76 = n - 76\n  const n_minus_77 = n - 77\n  const n_minus_78 = n - 78\n  const n_minus_79 = n - 79\n  const n_minus_80 = n - 80\n  const n_minus_81 = n - 81\n  const n_minus_82 = n - 82\n  const n_minus_83 = n - 83\n  const n_minus_84 = n - 84\n  const n_minus_85 = n - 85\n  const n_minus_86 = n - 86\n  const n_minus_87 = n - 87\n  const n_minus_88 = n - 88\n  const n_minus_89 = n - 89\n  const n_minus_90 = n - 90\n  const n_minus_91 = n - 91\n  const n_minus_92 = n - 92\n  const n_minus_93 = n - 93\n  const n_minus_94 = n - 94\n  const n_minus_95 = n - 95\n  const n_minus_96 = n - 96\n  const n_minus_97 = n - 97\n  const n_minus_98 = n - 98\n  const n_minus_99 = n - 99\n  const n_minus_100 = n - 100\n  const n_minus_101 = n - 101\n  const n_minus_102 = n - 102\n  const n_minus_103 = n - 103\n  const n_minus_104 = n - 104\n  const n_minus_105 = n - 105\n  const n_minus_106 = n - 106\n  const n_minus_107 = n - 107\n  const n_minus_108 = n - 108\n  const n_minus_109 = n - 109\n  const n_minus_110 = n - 110\n  const n_minus_111 = n - 111\n  const n_minus_112 = n - 112\n  const n_minus_113 = n - 113\n  const n_minus_114 = n - 114\n  const n_minus_115 = n - 115\n  const n_minus_116 = n - 116\n  const n_minus_117 = n - 117\n  const n_minus_118 = n - 118\n  const n_minus_119 = n - 119\n  const n_minus_120"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '_')\n  return replaceSpace(replaceSpace(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse2 = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '-')\n  return replaceSpace(replaceSpace(text))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse3 = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '_')\n  return replaceSpace(replaceSpace(replaceSpace(text)))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse4 = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '-')\n  return replaceSpace(replaceSpace(replaceSpace(text)))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse5 = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '_')\n  return replaceSpace(replaceSpace(replaceSpace(text)))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse6 = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '-')\n  return replaceSpace(replaceSpace(replaceSpace(text)))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse7 = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '_')\n  return replaceSpace(replaceSpace(replaceSpace(text)))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse8 = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '-')\n  return replaceSpace(replaceSpace(replaceSpace(text)))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse9 = (text) => {\n  const replaceSpace = (str) => str.replace(/\\s+/g, '_')\n  return replaceSpace(replaceSpace(replaceSpace(text)))\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSp"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // Check that there are no more than 3 digits\n  const no_more_than_3_digit = file_name.match(/\\d{3,}/)\n\n  // Check that the file name contains a dot\n  const contains_dot = file_name.match(/\\.[^\\.]+/)\n\n  // Check that the substring before the dot is not empty\n  const start_with_a_latin_alphapet = file_name.match(/^[a-zA-Z]+/)\n\n  // Check that the substring after the dot is a txt, exe or dll\n  const has_one_of_these_extensions = file_name.match(/(\\.[^\\.]+\\.)|(\\.[^\\.]+\\.)/i)\n  if (no_more_than_3_digit!== null) {\n    return 'No'\n  } else if (contains_dot!== null) {\n    return 'No'\n  } else if (start_with_a_latin_alphapet === null) {\n    return 'No'\n  } else if (has_one_of_these_extensions === null) {\n    return 'No'\n  } else {\n    return 'Yes'\n  }\n}\n\nmodule.exports = fileNameCheck\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall subtract the integer entry if its index is a \n  multiple of 3 and subtract the product of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function \n  shall not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all \n  entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  For lst = [1,2,3,4] the output should be 4\n  */\nconst subtractSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall take the integer entry if its index is a \n  multiple of 3 and take the product of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function \n  shall not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all \n  entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  For lst = [1,2,3,4] the output should be 16\n  */\nconst multiplySquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall take the integer entry if its index is a \n  multiple of 3 and take the product of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function \n  shall not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all \n  entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  For lst = [1,2,3,4] the output should be 16\n  */\nconst divideSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall take the integer entry if its index is a \n  multiple of 3 and take the product of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function \n  shall not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all \n  entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  For lst = [1,2,3,4] the output should be 16\n  */\nconst modSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall take the integer entry if its index is a \n  multiple of 3 and take the product of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function \n  shall not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all \n  entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  For lst = [1,2,3,4] the output should be 16\n  */\nconst expSquares = (lst) => {\n    const sum = lst.reduce((a, b) => Math.pow(a, b), 1);\n    return sum;\n};\n\nmodule.exports = {\n    sumSquares,\n    subtractSquares,\n    multiplySquares,\n    divideSquares,\n    modSquares,\n    expSquares\n};\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  let words = sentence.split(' ');\n  let len = words.length;\n  let primeNumbers = new Array(100);\n  for (let i = 0; i < primeNumbers.length; i++) {\n    primeNumbers[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (primeNumbers[j] == 0) {\n        if (primeNumbers[i] == 0) {\n          primeNumbers[i] = 1;\n        }\n        primeNumbers[j] = 1;\n      }\n    }\n  }\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    if (primeNumbers[i] > 0) {\n      result += words[i];\n      result +='';\n    }\n  }\n  return result;\n}\n\nmodule.exports = wrodsInSentenec;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  let d = parseInt(n)\n  if (d === 0) return false\n  let f = parseInt(x)\n  if (d > f) return false\n  let t = f / d\n  return t === parseInt(t)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n    let sortBySum = (a, b) => {\n        if (a.length === b.length) {\n            let aSum = sumDigits(a);\n            let bSum = sumDigits(b);\n            if (aSum === bSum) {\n                if (a > b) {\n                    return 1;\n                }\n                return -1;\n            }\n            return aSum - bSum;\n        }\n        return b.length - a.length;\n    };\n    return nums.sort(sortBySum);\n};\n\nexport default roderByPoints;<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const numsLength = nums.length;\n  let result = 0;\n  for (let i = 0; i < numsLength; i += 1) {\n    const num = nums[i];\n    if (num >= 10 && num % 2 === 1 && num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const result = []\n  for (let i = 1; i < n; i++) {\n    const sum = a[i] + a[i - 1] + a[i - 2]\n    if (sum % 3 === 0) {\n      result.push([a[i], a[i - 1], a[i - 2]])\n    }\n  }\n  return result.length\n}\n\nconsole.log(getMaxTrpiles(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (planet1 === \"Sun\" || planet2 === \"Sun\") return (\"\");\n  const planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const planet_ranges = {\n    Mercury: [0, 10],\n    Venus: [0, 10],\n    Earth: [0, 10],\n    Mars: [0, 10],\n    Jupiter: [0, 10],\n    Saturn: [0, 10],\n    Uranus: [0, 10],\n    Neptune: [0, 10],\n  };\n\n  const [min_planet, max_planet] = planet_ranges[planet1];\n  const [min_planet_2, max_planet_2] = planet_ranges[planet2];\n  const [min_planet_range, max_planet_range] = planet_ranges[planet1];\n  const [min_planet_2_range, max_planet_2_range] = planet_ranges[planet2];\n\n  let [start_range, end_range] = planet_ranges[planet1];\n\n  const start_range_2 = planet_ranges[planet2];\n  const end_range_2 = planet_ranges[planet2];\n\n  for (let i = min_planet_2; i <= max_planet_2; i++) {\n    start_range = Math.min(start_range, planet_ranges[i][0]);\n    end_range = Math.max(end_range, planet_ranges[i][1]);\n  }\n\n  for (let i = min_planet_2_range; i <= max_planet_2_range; i++) {\n    start_range_2 = Math.min(start_range_2, planet_ranges[i][0]);\n    end_range_2 = Math.max(end_range_2, planet_ranges[i][1]);\n  }\n\n  const [start_range_2_range, end_range_2_range] = planet_ranges[planet2];\n\n  const planets = [];\n  const planets_2 = [];\n\n  for (let i = start_range; i <= end_range; i++) {\n    for (let j = start_range_2; j <= end_range_2; j++) {\n      const dist_2 = Math.abs(planet_ranges[j][0] - i);\n      const dist_2_range = planet_ranges[j][1] - planet_ranges[j][0];\n      if (dist_2 <= dist_2_range / 2) {\n        planets.push(i);\n        planets_2.push(j);\n      }\n    }\n  }\n\n  return [planets, planets_2];\n};\n\nconst test = (result) => {\n  const [planets, planets_2] = result;\n  const [planet_names, planet_names_2] = bf(\"Mercury\", \"Neptune\");\n\n  const actual = planets.map((planet, index) => {\n    return `${planet} ${planet_names[index]}`;\n  });\n\n  const expected = planets_2.map((planet, index) => {\n    return `${planet} ${planet_names_2[index]}`;\n  });\n\n  console.log(`The list of the closest planets between Mercury and Neptune is ${actual}`);\n  console.log(`The list of the closest planets between Mercury and Neptune is ${expected}`);\n};\n\nconst tests = [\n  {\n    result: bf(\"Mercury\", \"Neptune\"),\n    expected: [\"Saturn\", \"Uranus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  },\n  {\n    result: bf(\"Earth\", \"Mercury\"),\n    expected: [\"Venus\"]\n  },\n  {\n    result: bf(\"Mercury\", \"Jupiter\"),\n    expected: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  },\n  {\n    result: bf(\"Mars\", \"Mercury\"),\n    expected: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  },\n  {\n    result: bf(\"Jupiter\", \"Saturn\"),\n    expected: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  },\n  {\n    result: bf(\"Saturn\", \"Uranus\"),\n    expected: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  },\n  {\n    result: bf(\"Uranus\", \"Saturn\"),\n    expected: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  }\n];\n\ntests.forEach(test);\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const list = Array.from(lst);\n  const sorted = [...list.sort((a, b) => a.length - b.length),...list];\n  const result = [...sorted.reduce((acc, x, i) => acc + x, 0)];\n  return result;\n}\n\nconsole.log(sortedListSum([2, 5, 7, 11, 12, 17, 21]));\nconsole.log(sortedListSum([2, 5, 7, 11, 12, 17, 21, 23]));\nconsole.log(sortedListSum([2, 5, 7, 11, 12, 17, 21, 23, 25]));\nconsole.log(sortedListSum([2, 5, 7, 11, 12, 17, 21, 23, 25, 27]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const prime = n > 1 && n % 2 === 0? n : Math.ceil(n / 2) + 1;\n  return prime % 2 === 0? x : y;\n}\n\n// const xOrY = (n, x, y) => {\n//   const prime = n > 1 && n % 2 === 0? n : Math.ceil(n / 2) + 1;\n//   return prime % 2 === 0? x : y;\n// }\n\n// const xOrY = (n, x, y) => {\n//   const prime = n > 1 && n % 2 === 0? n : Math.ceil(n / 2) + 1;\n//   return prime % 2 === 0? x : y;\n// }\n\nconst xOrY = (n, x, y) => {\n  const prime = n > 1 && n % 2 === 0? n : Math.ceil(n / 2) + 1;\n  return prime % 2 === 0? x : y;\n}\n\nconsole.log(xOrY(7, 34, 12));\nconsole.log(xOrY(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference2 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference3 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference4 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference5 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference6 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference7 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference8 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference9 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference10 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference11 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference12 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference13 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference14 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference15 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference16 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference17 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference18 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference19 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference20 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference21 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference22 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference23 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference24 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference25 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference26 = (lst) => {\n  const sum = lst.reduce((s, x) => s + (x % 2? x * x : 0), 0);\n  return sum;\n};\n\nconst doublehTeDifference27 = (lst) =>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i]!== guess[i]) {\n      diff = Math.abs(game[i] - guess[i]);\n      break;\n    }\n  }\n  return diff;\n};\n\nexport default compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_names = extensions.map((extension) => extension.toUpperCase());\n  const extension_names_lower = extension_names.map((extension) => extension.toLowerCase());\n  const strength = extension_names.reduce((a, b) => (a - b) * 1.0);\n  const name = class_name.toUpperCase();\n  const index = extension_names_lower.findIndex((extension) => strength === -1 || strength > extension.length);\n  if (index === -1) {\n    return name;\n  }\n  return `${name}${extension_names[index]}`;\n};\n\n/*\n  Given a class name, return the name of the corresponding class.\n  Example:\n  classNameToClass('MyClass') == 'MyClass'\n  */\nconst classNameToClass = (class_name) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(-1)[0];\n};\n\n/*\n  Given a class name, return a list of the extensions that it contains.\n  Example:\n  classNameToExtensions('MyClass') == ['MyClass', 'SErviNGSliCes', 'Cheese', 'StuFfed']\n  */\nconst classNameToExtensions = (class_name) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(1);\n};\n\n/*\n  Given a class name, return the class name with all the extensions removed.\n  Example:\n  classNameToClassWithoutExtensions('MyClass.SErviNGSliCes.Cheese') == 'MyClass'\n  */\nconst classNameToClassWithoutExtensions = (class_name) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(0, -1).join(\".\");\n};\n\n/*\n  Given a class name, return the class name with the extension appended.\n  Example:\n  classNameToClassWithExtension('MyClass', 'SErviNGSliCes') == 'MyClass.SErviNGSliCes'\n  */\nconst classNameToClassWithExtension = (class_name, extension) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(0, -1).join(\".\") + \".\" + extension;\n};\n\n/*\n  Given a class name, return the class name with all the extensions removed.\n  Example:\n  classNameToClassWithoutExtension('MyClass.SErviNGSliCes.Cheese') == 'MyClass'\n  */\nconst classNameToClassWithoutExtension = (class_name) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(0, -1).join(\".\");\n};\n\n/*\n  Given a class name, return the name of the corresponding class with the\n  extension appended.\n  Example:\n  classNameToClassWithExtension('MyClass', 'SErviNGSliCes') == 'MyClass.SErviNGSliCes'\n  */\nconst classNameToClassWithExtension = (class_name, extension) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(0, -1).join(\".\") + \".\" + extension;\n};\n\n/*\n  Given a class name, return the name of the corresponding class with the\n  extension appended.\n  Example:\n  classNameToClassWithExtension('MyClass', 'SErviNGSliCes') == 'MyClass.SErviNGSliCes'\n  */\nconst classNameToClassWithoutExtension = (class_name) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(0, -1).join(\".\");\n};\n\n/*\n  Given a class name, return the class name with the extension appended.\n  Example:\n  classNameToClassWithExtension('MyClass', 'SErviNGSliCes') == 'MyClass.SErviNGSliCes'\n  */\nconst classNameToClassWithExtension = (class_name, extension) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(0, -1).join(\".\") + \".\" + extension;\n};\n\n/*\n  Given a class name, return the name of the corresponding class with the\n  extension appended.\n  Example:\n  classNameToClassWithExtension('MyClass', 'SErviNGSliCes') == 'MyClass.SErviNGSliCes'\n  */\nconst classNameToClassWithoutExtension = (class_name) => {\n  const split_class = class_name.split(\".\");\n  return split_class.slice(0, -1).join(\".\");\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  for(let i = 0; i < b.length; i++) {\n    if(a.includes(b[i])) {\n      return true;\n    }\n    if(b.includes(a[i]) && i < b.length - 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(ccypatternChekc(\"himenss\",\"simen\"));<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const digits = [0, 0];\n  let index = 0;\n  while (num > 0) {\n    digits[index] = num % 2;\n    num = Math.floor(num / 2);\n    index++;\n  }\n  return digits;\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  let num = number;\n  let roman = '';\n\n  while (num > 0) {\n    if (num % 1000 == 0) {\n      num = num / 1000;\n      roman += 'M';\n    }\n    else if (num % 100 == 0) {\n      num = num / 100;\n      roman += 'C';\n    }\n    else if (num % 10 == 0) {\n      num = num / 10;\n      roman += 'D';\n    }\n    else if (num % 5 == 0) {\n      num = num / 5;\n      roman += 'L';\n    }\n    else if (num % 4 == 0) {\n      num = num / 4;\n      roman += 'I';\n    }\n    else if (num % 3 == 0) {\n      num = num / 3;\n      roman += 'X';\n    }\n    else if (num % 2 == 0) {\n      num = num / 2;\n      roman += 'V';\n    }\n    else {\n      num--;\n      roman += 'I';\n    }\n  }\n\n  return roman.toLowerCase();\n};\n\nmodule.exports = intToMinRioman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  const sum = (a + b + c) / 2;\n  const area = (Math.sqrt(Math.pow(sum - a, 2) + Math.pow(sum - b, 2) + Math.pow(sum - c, 2)));\n  return (area === Math.sqrt(3 * (sum - a) * (sum - b) * (sum - c)));\n}\n\nconst test = () => {\n  console.log(rightAngelTriangle(3, 4, 5));\n  console.log(rightAngelTriangle(1, 2, 3));\n  console.log(rightAngelTriangle(3, 3, 4));\n  console.log(rightAngelTriangle(1, 3, 4));\n  console.log(rightAngelTriangle(4, 3, 3));\n  console.log(rightAngelTriangle(1, 2, 3));\n  console.log(rightAngelTriangle(1, 1, 1));\n  console.log(rightAngelTriangle(1, 1, 3));\n  console.log(rightAngelTriangle(1, 3, 1));\n  console.log(rightAngelTriangle(1, 2, 2));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const all = words.map(w => w.toLowerCase());\n  const max = words[0];\n  let count = 0;\n  let found = false;\n\n  for (let i = 0; i < all.length; i++) {\n    if (!found) {\n      if (all[i] === max) {\n        count++;\n      } else if (count > 0) {\n        return max;\n      }\n      found = true;\n    } else if (all[i]!== max) {\n      count--;\n    }\n  }\n\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const [ remaining, number ] = number.split(' ');\n  number = Number(number);\n  need = Number(need);\n  remaining = Number(remaining);\n  if (number === 0 && need === 0) {\n    return [0, remaining];\n  }\n  const needed = Math.min(number, need);\n  const left = remaining - needed;\n  if (number < need) {\n    return [left, remaining];\n  }\n  return [needed, left];\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operator.length!== operand.length) {\n    throw new Error('length of operator and operand are not equal');\n  }\n  const operators = ['+', '-', '*', '//', '**'];\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let num1 = parseInt(operand[i]);\n    let num2 = parseInt(operand[i + 1]);\n    let operation = operator[i];\n    switch (operation) {\n      case '+':\n        result += num1 + num2;\n        break;\n      case '-':\n        result -= num1 + num2;\n        break;\n      case '*':\n        result *= num1 + num2;\n        break;\n      case '//':\n        result //= num1 + num2;\n        break;\n      case '**':\n        result **= num1 + num2;\n        break;\n      default:\n        throw new Error('invalid operator');\n    }\n  }\n  return result;\n};\n\nconst testAlgebra = (operator, operand) => {\n  const operators = ['+', '-', '*', '//', '**'];\n  if (operator.length!== operand.length) {\n    throw new Error('length of operator and operand are not equal');\n  }\n  for (let i = 0; i < operator.length; i++) {\n    let num1 = parseInt(operand[i]);\n    let num2 = parseInt(operand[i + 1]);\n    let operation = operator[i];\n    switch (operation) {\n      case '+':\n        result += num1 + num2;\n        break;\n      case '-':\n        result -= num1 + num2;\n        break;\n      case '*':\n        result *= num1 + num2;\n        break;\n      case '//':\n        result //= num1 + num2;\n        break;\n      case '**':\n        result **= num1 + num2;\n        break;\n      default:\n        throw new Error('invalid operator');\n    }\n  }\n  return result;\n};\n\nconst doTestAlgebra = () => {\n  const operators = ['+', '-', '*', '//', '**'];\n  let result = 0;\n  for (let i = 0; i < operators.length; i++) {\n    let num1 = parseInt(operators[i]);\n    let num2 = parseInt(operators[i + 1]);\n    switch (operators[i]) {\n      case '+':\n        result += num1 + num2;\n        break;\n      case '-':\n        result -= num1 + num2;\n        break;\n      case '*':\n        result *= num1 + num2;\n        break;\n      case '//':\n        result //= num1 + num2;\n        break;\n      case '**':\n        result **= num1 + num2;\n        break;\n      default:\n        throw new Error('invalid operator');\n    }\n  }\n  console.log(result);\n};\n\ndoTestAlgebra();\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length\n  let reverse = s.split('').reverse()\n  let reverseString = reverse.join('')\n  if(reverseString === '') {\n    return ''\n  } else {\n    return reverseString\n  }\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\nmodule.exports = {\n  md5,\n  stringToMd5\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
