{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  if(!Array.isArray(numbers)){\n    throw new TypeError(`Parameter 'numbers' must be an array.`);\n  }\n  if(!isNumber(threshold)){\n    throw new TypeError(`Parameter 'threshold' must be a number.`);\n  }\n  if(numbers.length < 2){\n    return false;\n  }\n  let first = numbers[0];\n  let last = numbers[numbers.length - 1];\n  let diffs = [];\n  for(let i = 0; i < numbers.length; i++){\n    diffs.push(Math.abs(numbers[i] - first));\n    first = numbers[i];\n  }\n  diffs.sort((a, b) => {\n    return b - a;\n  });\n  for(let i = 0; i < numbers.length - 1; i++){\n    if(diffs[i + 1] - diffs[i] > threshold){\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n  * Calculate the mean of a list of numbers.\n  *\n  * @param {Array} numbers The list of numbers.\n  * @returns {Number} The mean.\n  * @throws {TypeError} If 'numbers' is not an array or if 'numbers' contains no numbers.\n  * @example\n  *\n  * ```javascript\n  * const mean = mean([1, 2, 3]);\n  * //=> 2\n  * ```\n  *\n  * @see http://en.wikipedia.org/wiki/Mean\n  */\nconst mean = (numbers) => {\n  if(!Array.isArray(numbers)){\n    throw new TypeError(`Parameter 'numbers' must be an array.`);\n  }\n  if(numbers.length === 0){\n    throw new TypeError(`Parameter 'numbers' must contain at least one number.`);\n  }\n  return numbers.reduce((sum, number) => sum + number) / numbers.length;\n}\n\nexport default {\n  hasCloselEements,\n  mean\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  //  This algorithm works by checking if the current paren group\n  //  is open or closed, and whether or not it is nested. If not,\n  //  it simply adds the current paren group to the list of groups.\n  //  If it is open, it adds it to the list, but also checks\n  //  whether or not it is nested. If it is, the nested group is\n  //  checked to see if it is open or closed. If it is open, then\n  //  the current group is nested and the nested group is added to the\n  //  list. If it is closed, the current group is not nested and the\n  //  current group is added to the list. If it is still open, then\n  //  the nested group is checked to see if it is open or closed.\n  //  If it is open, the nested group is added to the list, and\n  //  the current group is added to the list. If it is closed, the\n  //  nested group is added to the list and the current group is\n  //  not nested. If it is still open, then the nested group is\n  //  checked to see if it is open or closed. If it is open, then\n  //  the nested group is added to the list, and the current group\n  //  is added to the list. If it is closed, the nested group is\n  //  added to the list and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested. If it is still open, then\n  //  the nested group is checked to see if it is open or closed.\n  //  If it is open, then the nested group is added to the list, and\n  //  the current group is added to the list. If it is closed, then\n  //  the nested group is added to the list, and the current group\n  //  is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open, then the nested group\n  //  is added to the list, and the current group is added to the\n  //  list. If it is closed, the nested group is added to the list,\n  //  and the current group is not nested.\n  //  If it is still open, then the nested group is checked to see\n  //  if it is open or closed. If it is open"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n    const numberStr = String(number);\n    const integerPart = numberStr.slice(0, numberStr.lastIndexOf('.'));\n    const decimalPart = numberStr.slice(numberStr.lastIndexOf('.') + 1);\n    return decimalPart;\n};\n\n/* Given a string, return the smallest integer that can be formed by\n  pasting the given characters together.\n  >>> getSmallestInteger(4, '24')\n  4\n  >>> getSmallestInteger(1, 'a')\n  1\n  >>> getSmallestInteger(8, 'a4')\n  4\n  >>> getSmallestInteger(1, '2a')\n  2\n  >>> getSmallestInteger(9, '23')\n  2\n  >>> getSmallestInteger(4, '23')\n  23\n  >>> getSmallestInteger(23, '23')\n  23\n  >>> getSmallestInteger(23, '33')\n  23\n  >>> getSmallestInteger(1, '1')\n  1\n  >>> getSmallestInteger(3, '3')\n  3\n  >>> getSmallestInteger(9, '99')\n  99\n  >>> getSmallestInteger(2, 'ab')\n  2\n  >>> getSmallestInteger(8, 'a4b')\n  4\n  >>> getSmallestInteger(9, 'a99')\n  99\n  >>> getSmallestInteger(99, '99')\n  99\n  >>> getSmallestInteger(99, '999')\n  999\n  >>> getSmallestInteger(9, '999')\n  999\n  >>> getSmallestInteger(4, '999')\n  999\n  >>> getSmallestInteger(99, '999')\n  999\n  >>> getSmallestInteger(2, 'a99')\n  2\n  >>> getSmallestInteger(8, 'a99b')\n  4\n  >>> getSmallestInteger(9, 'a999')\n  999\n  >>> getSmallestInteger(99, 'a999')\n  999\n  >>> getSmallestInteger(2, 'a999')\n  999\n  >>> getSmallestInteger(8, 'a999b')\n  999\n  >>> getSmallestInteger(9, 'a999c')\n  999\n  >>> getSmallestInteger(99, 'a999c')\n  999\n  >>> getSmallestInteger(2, 'a999c')\n  999\n  >>> getSmallestInteger(8, 'a999d')\n  999\n  >>> getSmallestInteger(9, 'a999e')\n  999\n  >>> getSmallestInteger(99, 'a999e')\n  999\n  >>> getSmallestInteger(2, 'a999e')\n  999\n  >>> getSmallestInteger(8, 'a999f')\n  999\n  >>> getSmallestInteger(9, 'a999g')\n  999\n  >>> getSmallestInteger(99, 'a999g')\n  999\n  >>> getSmallestInteger(2, 'a999g')\n  999\n  >>> getSmallestInteger(8, 'a999h')\n  999\n  >>> getSmallestInteger(9, 'a999i')\n  999\n  >>> getSmallestInteger(99, 'a999i')\n  999\n  >>> getSmallestInteger(2, 'a999i')\n  999\n  >>> getSmallestInteger(8, 'a999j')\n  999\n  >>> getSmallestInteger(9, 'a999k')\n  999\n  >>> getSmallestInteger(99, 'a999k')\n  999\n  >>> getSmallestInteger(2, 'a999k')\n  999\n  >>> getSmallestInteger(8, 'a999l')\n  999\n  >>> getSmallestInteger(9, 'a999m')\n  999\n  >>> getSmallestInteger(99, 'a999m')\n  999\n  >>> getSmallestInteger(2, 'a999m')\n  999\n  >>> getSmallestInteger(8, 'a999n')\n  999\n  >>> getSmallestInteger(9, 'a999o')\n  999\n  >>> getSmallestInteger(99, 'a999o')\n  999\n  >>> getSmallestInteger(2, 'a999o')\n  999\n  >>> getSmallestInteger(8, 'a999p')\n  999\n  >>> getSmallestInteger(9, 'a999q')\n  999\n  >>> getSmallestInteger(99, 'a999q')\n  999\n  >>> getSmallestInteger(2, 'a999q')\n  999\n  >>> getSmallestInteger(8, 'a999r')\n  999\n  >>> getSmallestInteger(9, 'a999s')\n  999\n  >>> getSmallestInteger(99, 'a999s')\n  999\n  >>> getSmallestInteger(2, 'a999s')\n  999\n  >>> getSmallestInteger(8, 'a999t')\n  999\n  >>> getSmallestInteger(9, 'a999u')\n  999\n  >>> getSmallestInteger(99, 'a999u')\n  999\n  >>> getSmallestInteger(2, 'a999u')\n  999\n  >>> getSmallestInteger(8, 'a999v')\n  999\n  >>> getSmallestInteger(9, 'a999w')\n  999\n  >>> getSmallestInteger(99, 'a999w')\n  999\n  >>> getSmallestInteger(2, 'a999w')\n  999\n  >>> getSmallestInteger(8, 'a999x')\n  999\n  >>> getSmallestInteger(9, 'a999y')\n  999\n  >>> getSmallestInteger(99, 'a999y')\n  999\n  >>> getSmallestInteger(2, 'a999y')\n  999\n  >>> getSmallestInteger(8, 'a999z')\n  999\n  >>> getSmallestInteger(9, 'a999{')\n  999\n  >>> getSmallestInteger(99, 'a999{')\n  999\n  >>> getSmallestInteger(2, 'a999{')\n  999\n  >>> getSmallestInteger(8, 'a999|')\n  999\n  >>> getSmallestInteger(9, 'a999"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  const [deposit, withdrawal] = operations.slice(0, 2)\n  const balance = deposit - withdrawal\n\n  if (balance < 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconsole.log(belowZeor([1, 2, 3]))\nconsole.log(belowZeor([1, 2, -4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  let x = numbers.sort();\n  let mean = x.reduce((sum, x) => sum + x) / x.length;\n  let deviations = numbers.map((x) => {\n    let diff = x - mean;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, x) => sum + x) / deviations.length;\n};\n\nmodule.exports = meanAbsoltueDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  if (numbers.length <= 1) {\n    return numbers;\n  }\n\n  const [start, end] = [0, 1];\n  const [i, j] = [1, 2];\n  const inter = [];\n\n  while (i < numbers.length) {\n    if (numbers[i] === delimeter) {\n      inter.push(numbers[start]);\n      inter.push(numbers[i]);\n      start += 2;\n      i += 2;\n    } else {\n      inter.push(numbers[i]);\n      i++;\n    }\n  }\n\n  while (j < numbers.length) {\n    inter.push(numbers[j]);\n    j++;\n  }\n\n  return inter;\n};\n\nmodule.exports = interpserse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n    let max_levels = 0\n    let level = 0\n    let current_level = 0\n    let current_paren = 0\n    let current_string = ''\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            level += 1\n        } else if (paren_string[i] === ')') {\n            level -= 1\n        }\n        if (level > max_levels) {\n            max_levels = level\n            current_level = current_paren\n            current_paren += 1\n            current_string = paren_string.substring(i)\n        } else if (level < max_levels) {\n            current_level = level\n            current_paren -= 1\n            current_string = paren_string.substring(i)\n        } else {\n            if (current_level > max_levels) {\n                max_levels = current_level\n                current_level = current_paren\n                current_paren += 1\n                current_string = paren_string.substring(i)\n            } else if (current_level < max_levels) {\n                current_level = level\n                current_paren -= 1\n                current_string = paren_string.substring(i)\n            } else {\n                current_level = level\n                current_paren -= 1\n                current_string = paren_string.substring(i)\n            }\n        }\n    }\n    return [max_levels, current_level, current_paren, current_string]\n}\n\n/* Input to this function is a string representing a nested set of parentheses\n  represented as '((' and ')())'\n  Output is a set of the groups as a list of strings.\n  */\nconst parseNetsedParensList = (paren_string) => {\n    let list = []\n    let level = 0\n    let current_paren = 0\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            level += 1\n        } else if (paren_string[i] === ')') {\n            level -= 1\n        }\n        if (level > 0) {\n            list.push(paren_string.substring(i))\n        } else {\n            if (level < 0) {\n                list.push(paren_string.substring(i))\n            } else {\n                list.push(paren_string.substring(i))\n            }\n        }\n    }\n    return list\n}\n\n/* Input to this function is a string representing a nested set of parentheses\n  represented as '((' and ')())'\n  Output is a set of the groups as a list of strings.\n  */\nconst parseNetsedParensList2 = (paren_string) => {\n    let list = []\n    let level = 0\n    let current_paren = 0\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            level += 1\n        } else if (paren_string[i] === ')') {\n            level -= 1\n        }\n        if (level > 0) {\n            list.push(paren_string.substring(i))\n        } else {\n            if (level < 0) {\n                list.push(paren_string.substring(i))\n            } else {\n                list.push(paren_string.substring(i))\n            }\n        }\n    }\n    return list\n}\n\n/* Input to this function is a string representing a nested set of parentheses\n  represented as '((' and ')())'\n  Output is a set of the groups as a list of strings.\n  */\nconst parseNetsedParensList3 = (paren_string) => {\n    let list = []\n    let level = 0\n    let current_paren = 0\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            level += 1\n        } else if (paren_string[i] === ')') {\n            level -= 1\n        }\n        if (level > 0) {\n            list.push(paren_string.substring(i))\n        } else {\n            if (level < 0) {\n                list.push(paren_string.substring(i))\n            } else {\n                list.push(paren_string.substring(i))\n            }\n        }\n    }\n    return list\n}\n\n/* Input to this function is a string representing a nested set of parentheses\n  represented as '((' and ')())'\n  Output is a set of the groups as a list of strings.\n  */\nconst parseNetsedParensList4 = (paren_string) => {\n    let list = []\n    let level = 0\n    let current_paren = 0\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            level += 1\n        } else if (paren_string[i] === ')') {\n            level -= 1\n        }\n        if (level > 0) {\n            list.push(paren_string.substring(i))\n        } else {\n            if (level < 0) {\n                list.push(paren_string.substring(i))\n            } else {\n                list.push(paren_string.substring(i))\n            }\n        }\n    }\n    return list\n}\n\n/* Input to this function is a string representing a nested set of parentheses\n  represented as '((' and ')())'\n  Output is a set of the groups as a list of strings.\n  */\nconst parseNetsedParensList5 = (paren_string) => {\n    let list = []\n    let level = 0\n    let current_paren = 0\n    for (let i = 0; i < paren_string.length; i++) {\n        "}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n    return strings.filter(x => x.indexOf(substring) >= 0)\n}\n\n/*\n  * Convert a string to lower case\n  */\nconst toLower = (s) => s.toLowerCase()\n\n/*\n  * Convert a string to upper case\n  */\nconst toUpper = (s) => s.toUpperCase()\n\n/*\n  * Convert a string to title case\n  */\nconst toTitle = (s) => {\n    const first = s.charAt(0).toUpperCase()\n    const rest = s.slice(1).toLowerCase()\n    return first + rest\n}\n\n/*\n  * Convert a string to sentence case\n  */\nconst toSentence = (s) => {\n    const first = s.charAt(0)\n    const rest = s.slice(1)\n    const last = rest.charAt(0)\n    const next = rest.slice(1)\n\n    const restLower = rest.toLowerCase()\n\n    return first + toSentence(restLower) + last + toSentence(next)\n}\n\n/*\n  * Split a string into tokens\n  */\nconst tokenize = (s) => s.split(' ')\n\n/*\n  * Return a substring of the string\n  */\nconst substring = (s, start, end) => {\n    return s.slice(start, end)\n}\n\n/*\n  * Return a substring of the string, starting at a specific index\n  */\nconst substringAt = (s, start) => {\n    return s.slice(start)\n}\n\n/*\n  * Return a substring of the string, starting at a specific index, and\n  * ending at a specific index\n  */\nconst substringBetween = (s, start, end) => {\n    return s.slice(start, end)\n}\n\n/*\n  * Remove all non-alpha-numeric characters from the string\n  */\nconst removeNonAlphaNumeric = (s) => s.replace(/[^a-zA-Z0-9]/g, '')\n\n/*\n  * Remove all non-alpha-numeric characters from the string, starting at a\n  * specific index\n  */\nconst removeNonAlphaNumericAt = (s, start) =>\n    removeNonAlphaNumeric(s.slice(start))\n\n/*\n  * Remove all non-alpha-numeric characters from the string, starting at a\n  * specific index, and ending at a specific index\n  */\nconst removeNonAlphaNumericBetween = (s, start, end) =>\n    removeNonAlphaNumeric(s.slice(start, end))\n\n/*\n  * Remove all non-alpha-numeric characters from the string, starting at a\n  * specific index, and ending at a specific index, starting at a specific\n  * index\n  */\nconst removeNonAlphaNumericBetweenAt = (s, start, end, start2) =>\n    removeNonAlphaNumericBetween(s.slice(start, end), start2)\n\n/*\n  * Remove all non-alpha-numeric characters from the string, starting at a\n  * specific index, and ending at a specific index, starting at a specific\n  * index, and ending at a specific index\n  */\nconst removeNonAlphaNumericBetweenBetween = (s, start, end, start2, end2) =>\n    removeNonAlphaNumericBetween(s.slice(start, end), start2, end2)\n\n/*\n  * Remove all non-alpha-numeric characters from the string, starting at a\n  * specific index, and ending at a specific index, starting at a specific\n  * index, and ending at a specific index, starting at a specific index, and\n  * ending at a specific index\n  */\nconst removeNonAlphaNumericBetweenBetweenAt = (s, start, end, start2, end2, start3) =>\n    removeNonAlphaNumericBetweenBetween(s.slice(start, end), start2, end2, start3)\n\n/*\n  * Remove all non-alpha-numeric characters from the string, starting at a\n  * specific index, and ending at a specific index, starting at a specific\n  * index, and ending at a specific index, starting at a specific index, and\n  * ending at a specific index, starting at a specific index, and ending at a\n  * specific index\n  */\nconst removeNonAlphaNumericBetweenBetweenAtAt = (s, start, end, start2, end2, start3, end3) =>\n    removeNonAlphaNumericBetweenBetweenAt(s.slice(start, end), start2, end2, start3, end3)\n\n/*\n  * Remove all non-alpha-numeric characters from the string, starting at a\n  * specific index, and ending at a specific index, starting at a specific\n  * index, and ending at a specific index, starting at a specific index, and\n  * ending at a specific index, starting at a specific index, and ending at a\n  * specific index, starting at a specific index, and ending at a specific\n  * index\n  */\nconst removeNonAlphaNumericBetweenBetweenAtAt = (s, start, end, start2, end2, start3, end3, start4) =>\n    removeNonAlphaNumericBetweenBetweenAt(s.slice(start, end), start2, end2, start3, end3, start4)\n\n/*\n  * Remove all non-alpha-numeric characters from the string, starting at a\n  * specific index, and ending at a specific index, starting at a specific\n  * index, and ending at a specific index, starting at a specific index, and\n  * ending at a specific index, starting at a specific index, and ending at a\n  * specific index, starting at a specific index, and ending at a specific\n  * index, starting at a specific index, and ending at a specific index\n  */\nconst removeNonAlphaNumericBetweenBetweenAtAtAt = (s, start, end, start2, end2, start3, end3, start4, end4) =>\n    removeNonAlphaNumericBetweenBetweenAtAt(s.slice(start, end), start2, end2, start3, end3, start4, end4)\n\n/*\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    const product = 1\n    const sum = 0\n    for (const number of numbers) {\n        product *= number\n        sum += number\n    }\n    return sum, product\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (2, 8)\n  >>> sumProduct([1, 2, 3, 4], 4)\n  (4, 16)\n  >>> sumProduct([1, 2, 3, 4], 0)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], -1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 0.5)\n  (0.25, 1.25)\n  >>> sumProduct([1, 2, 3, 4], -2)\n  (-2, 0)\n  >>> sumProduct([1, 2, 3, 4], -4)\n  (-4, 0)\n  >>> sumProduct([1, 2, 3, 4], -0.5)\n  (-0.5, 0.5)\n  >>> sumProduct([1, 2, 3, 4], 5)\n  (5, 120)\n  >>> sumProduct([1, 2, 3, 4], -5)\n  (5, 0)\n  >>> sumProduct([1, 2, 3, 4], 100)\n  (100, 240000000000)\n  >>> sumProduct([1, 2, 3, 4], -100)\n  (-100, 0)\n  >>> sumProduct([1, 2, 3, 4], 1.1)\n  (1.1, 240000000000)\n  >>> sumProduct([1, 2, 3, 4], -1.1)\n  (-1.1, 0)\n  >>> sumProduct([1, 2, 3, 4], -1.9)\n  (-1.9, 0)\n  >>> sumProduct([1, 2, 3, 4], 10)\n  (10, 10000000000000)\n  >>> sumProduct([1, 2, 3, 4], -10)\n  (-10, 0)\n  >>> sumProduct([1, 2, 3, 4], -100.5)\n  (-100.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -1000.5)\n  (-1000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], 1000.5)\n  (1000.5, 10000000000000)\n  >>> sumProduct([1, 2, 3, 4], -1000.5)\n  (1000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -10000.5)\n  (-10000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -100000.5)\n  (-100000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], 100000.5)\n  (100000.5, 10000000000000)\n  >>> sumProduct([1, 2, 3, 4], -100000.5)\n  (100000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -1000000.5)\n  (-1000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -10000000.5)\n  (-10000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], 10000000.5)\n  (10000000000000, 240000000000)\n  >>> sumProduct([1, 2, 3, 4], -10000000.5)\n  (10000000000000, 0)\n  >>> sumProduct([1, 2, 3, 4], -100000000.5)\n  (-100000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -1000000000.5)\n  (-1000000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], 1000000000.5)\n  (1000000000.5, 10000000000000)\n  >>> sumProduct([1, 2, 3, 4], -1000000000.5)\n  (1000000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -10000000000.5)\n  (-10000000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -100000000000.5)\n  (-100000000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -1000000000000.5)\n  (-1000000000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -10000000000000.5)\n  (-10000000000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -100000000000000.5)\n  (-100000000000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -1000000000000000.5)\n  (-1000000000000000.5, 0)\n  >>> sumProduct([1, 2, 3, 4], 1.5)\n  (1.5, 3.0)\n  >>> sumProduct([1, 2, 3, 4], -1.5)\n  (-1.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -2.5)\n  (-2.5, 0)\n  >>> sumProduct([1, 2, 3, 4], 3.5)\n  (3.5, 15.0)\n  >>> sumProduct([1, 2, 3, 4], -3.5)\n  (-3.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -4.5)\n  (-4.5, 0)\n  >>> sumProduct([1, 2, 3, 4], -5.5)\n  (-5.5, 0)\n  >>> sumProduct([1, 2, 3, 4], 5.5)\n  (5.5, 15.0)\n  >>> sumProduct([1, 2, 3, 4], -6.5)\n  (-6.5, 0)\n  >>> sumProduct([1, 2, 3, 4], 6.5)\n  (6.5, 15.0)\n  >>> sumProduct([1, 2,"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = []\n  let currentMax = numbers[0]\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n      currentMax = numbers[i]\n    }\n  }\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === currentMax) {\n      maxes.push(currentMax)\n    } else if (numbers[i] > currentMax) {\n      currentMax = numbers[i]\n      maxes.push(currentMax)\n    }\n  }\n  return maxes\n}\n\nexport default rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPrefix = 0,\n    i = 0,\n    r = 0,\n    s = 0;\n\n  while(i < string.length) {\n    s = string.slice(i);\n    while(isPalindrome(s)) {\n      longestPrefix = i;\n      i = i + 1;\n      s = string.slice(i);\n    }\n    r = string.slice(i);\n    i = i + 1;\n  }\n  return string.slice(0, longestPrefix) + r.split('').reverse().join('');\n}\n\n/* Return the length of a string */\nconst stringLength = (string) => {\n  return string.length;\n}\n\n/* Converts a number into its string form */\nconst numberToString = (number) => {\n  let numberStr = number.toString();\n  let str = '';\n\n  while(numberStr.length > 0) {\n    str = numberStr.charAt(0) + str;\n    numberStr = numberStr.slice(1);\n  }\n  return str;\n}\n\n/* Converts a string into its number form */\nconst stringToNumber = (string) => {\n  let number = 0;\n\n  while(string.length > 0) {\n    number = number * 10 + parseInt(string.charAt(0), 10);\n    string = string.slice(1);\n  }\n  return number;\n}\n\n/* Test if a number is a palindrome */\nconst isNumberPalindrome = (number) => {\n  return number == numberToString(number);\n}\n\n/* Return the first number that is a palindrome */\nconst firstNumberThatIsPalindrome = () => {\n  let i = 1;\n  let testNum = 1;\n\n  while(isNumberPalindrome(testNum) && i < 10000000) {\n    testNum = testNum + 1;\n    i = i + 1;\n  }\n  return testNum;\n}\n\n/* Return the number of digits in a given number */\nconst numberOfDigits = (number) => {\n  return number.toString().length;\n}\n\n/* Return the number of trailing zeros in a given number */\nconst numberOfTrailingZeros = (number) => {\n  let numberStr = number.toString();\n\n  for(let i = numberStr.length - 1; i >= 0; i = i - 1) {\n    if(numberStr.charAt(i) == '0') {\n      return numberStr.length - i - 1;\n    }\n  }\n  return 0;\n}\n\n/* Converts a number to a binary string */\nconst numberToBinary = (number) => {\n  let numberStr = number.toString(2);\n\n  while(numberStr.length < number.toString().length) {\n    numberStr = '0' + numberStr;\n  }\n  return numberStr;\n}\n\n/* Return the number of leading zeros in a given number */\nconst numberOfLeadingZeros = (number) => {\n  let numberStr = number.toString();\n  let zeros = 0;\n\n  for(let i = 0; i < numberStr.length; i = i + 1) {\n    if(numberStr.charAt(i) == '0') {\n      zeros = zeros + 1;\n    } else {\n      break;\n    }\n  }\n  return numberStr.length - zeros;\n}\n\n/* Convert a number to a string */\nconst numberToString = (number) => {\n  return number.toString();\n}\n\n/* Convert a string to a number */\nconst stringToNumber = (string) => {\n  return stringToNumber(string);\n}\n\n/* Convert a string to a binary string */\nconst stringToBinary = (string) => {\n  return numberToBinary(stringToNumber(string));\n}\n\n/* Convert a number to a binary string */\nconst numberToBinary = (number) => {\n  return numberToBinary(number);\n}\n\n/* Convert a number to a string */\nconst numberToString = (number) => {\n  return numberToString(number);\n}\n\n/* Return the first number that is a palindrome */\nconst firstNumberThatIsPalindrome = () => {\n  let i = 1;\n  let testNum = 1;\n\n  while(isNumberPalindrome(testNum) && i < 10000000) {\n    testNum = testNum + 1;\n    i = i + 1;\n  }\n  return testNum;\n}\n\n/* Return the number of leading zeros in a given number */\nconst numberOfLeadingZeros = (number) => {\n  let numberStr = number.toString();\n  let zeros = 0;\n\n  for(let i = 0; i < numberStr.length; i = i + 1) {\n    if(numberStr.charAt(i) == '0') {\n      zeros = zeros + 1;\n    } else {\n      break;\n    }\n  }\n  return numberStr.length - zeros;\n}\n\n/* Return the number of trailing zeros in a given number */\nconst numberOfTrailingZeros = (number) => {\n  let numberStr = number.toString();\n  let zeros = 0;\n\n  for(let i = numberStr.length - 1; i >= 0; i = i - 1) {\n    if(numberStr.charAt(i) == '0') {\n      zeros = zeros + 1;\n    } else {\n      break;\n    }\n  }\n  return numberStr.length - zeros;\n}\n\n/* Return the number of leading zeros in a given number */\nconst numberOfDigits = (number) => {\n  return number.to"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const lengthA = a.length\n  const lengthB = b.length\n  if (lengthA!== lengthB) {\n    throw new Error('Inconsistent lengths')\n  }\n  const result = []\n  for (let i = 0; i < lengthA; i++) {\n    const valA = parseInt(a[i])\n    const valB = parseInt(b[i])\n    result.push(parseInt(valA ^ valB))\n  }\n  return result.join('')\n}\n\n// ---------------------------------------------------------------------\n// Solution 2:\n// ---------------------------------------------------------------------\n\n// function strinXgor (a, b) {\n//   const lengthA = a.length\n//   const lengthB = b.length\n//   if (lengthA!== lengthB) {\n//     throw new Error('Inconsistent lengths')\n//   }\n//   const result = []\n//   for (let i = 0; i < lengthA; i++) {\n//     const valA = parseInt(a[i])\n//     const valB = parseInt(b[i])\n//     result.push(parseInt(valA ^ valB))\n//   }\n//   return result.join('')\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let max = strings[0]\n  strings.forEach( (s) => {\n    if (s.length > max.length) {\n      max = s\n    }\n  })\n  return max\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconsole.log(longest(['a', 'bb', 'ccc']))\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  let d;\n  while (b) {\n    d = a % b;\n    a = b;\n    b = d;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two strings a and b\n  >>> rgeatestCommonDivisor(\"abc\", \"def\")\n  1\n  >>> rgeatestCommonDivisor(\"ABC\", \"DEF\")\n  1\n  >>> rgeatestCommonDivisor(\"abc\", \"def\")\n  1\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a.length === 0 || b.length === 0) {\n    throw new Error(\"The strings must have at least one character\");\n  }\n  if (a.length === 1 || b.length === 1) {\n    return Math.max(a, b);\n  }\n  let aIndex = 0, bIndex = 0;\n  while (a[aIndex] === b[bIndex]) {\n    ++aIndex;\n    ++bIndex;\n  }\n  if (aIndex > bIndex) {\n    return rgeatestCommonDivisor(b, a.substring(bIndex));\n  } else {\n    return rgeatestCommonDivisor(a.substring(aIndex), b);\n  }\n};\n\nmodule.exports = rgeatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const len = string.length;\n  for (let i = 0; i < len; i++) {\n    const prefix = string.slice(0, i + 1);\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const len = string.length;\n  for (let i = 0; i < len; i++) {\n    const suffix = string.slice(i + 1);\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array(n + 1).join(' ').slice(1).split('').join('');\n};\n\nconst test = async () => {\n  const n = parseInt(prompt('Enter a number to turn into a string sequence'));\n  const stringSequence = stringSequence(n);\n  console.log(stringSequence);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let numChars = string.length\n  const uniqueChars = {}\n\n  for (let i = 0; i < numChars; i++) {\n    const char = string[i]\n    if (uniqueChars.hasOwnProperty(char)) {\n      uniqueChars[char] += 1\n    } else {\n      uniqueChars[char] = 1\n    }\n  }\n\n  return Object.keys(uniqueChars).length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('');\n  const notes_list = [];\n  let current_note = '';\n  for (let i = 0; i < notes.length; i += 1) {\n    if (notes[i] === 'o' || notes[i] === 'O' || notes[i] === '|') {\n      current_note += notes[i];\n      if (notes[i + 1] === 'o' || notes[i + 1] === 'O' || notes[i + 1] === '|') {\n        current_note += notes[i + 1];\n        if (notes[i + 2] === 'o' || notes[i + 2] === 'O' || notes[i + 2] === '|') {\n          current_note += notes[i + 2];\n          if (notes[i + 3] === 'o' || notes[i + 3] === 'O' || notes[i + 3] === '|') {\n            current_note += notes[i + 3];\n            if (notes[i + 4] === 'o' || notes[i + 4] === 'O' || notes[i + 4] === '|') {\n              current_note += notes[i + 4];\n              if (notes[i + 5] === 'o' || notes[i + 5] === 'O' || notes[i + 5] === '|') {\n                current_note += notes[i + 5];\n                if (notes[i + 6] === 'o' || notes[i + 6] === 'O' || notes[i + 6] === '|') {\n                  current_note += notes[i + 6];\n                  if (notes[i + 7] === 'o' || notes[i + 7] === 'O' || notes[i + 7] === '|') {\n                    current_note += notes[i + 7];\n                    if (notes[i + 8] === 'o' || notes[i + 8] === 'O' || notes[i + 8] === '|') {\n                      current_note += notes[i + 8];\n                      if (notes[i + 9] === 'o' || notes[i + 9] === 'O' || notes[i + 9] === '|') {\n                        current_note += notes[i + 9];\n                        if (notes[i + 10] === 'o' || notes[i + 10] === 'O' || notes[i + 10] === '|') {\n                          current_note += notes[i + 10];\n                          if (notes[i + 11] === 'o' || notes[i + 11] === 'O' || notes[i + 11] === '|') {\n                            current_note += notes[i + 11];\n                            if (notes[i + 12] === 'o' || notes[i + 12] === 'O' || notes[i + 12] === '|') {\n                              current_note += notes[i + 12];\n                              if (notes[i + 13] === 'o' || notes[i + 13] === 'O' || notes[i + 13] === '|') {\n                                current_note += notes[i + 13];\n                                if (notes[i + 14] === 'o' || notes[i + 14] === 'O' || notes[i + 14] === '|') {\n                                  current_note += notes[i + 14];\n                                  if (notes[i + 15] === 'o' || notes[i + 15] === 'O' || notes[i + 15] === '|') {\n                                    current_note += notes[i + 15];\n                                    if (notes[i + 16] === 'o' || notes[i + 16] === 'O' || notes[i + 16] === '|') {\n                                      current_note += notes[i + 16];\n                                      if (notes[i + 17] === 'o' || notes[i + 17] === 'O' || notes[i + 17] === '|') {\n                                        current_note += notes[i + 17];\n                                        if (notes[i + 18] === 'o' || notes[i + 18] === 'O' || notes[i + 18] === '|') {\n                                          current_note += notes[i + 18];\n                                          if (notes[i + 19] === 'o' || notes[i + 19] === 'O' || notes[i + 19] === '|') {\n                                            current_note += notes[i + 19];\n                                            if (notes[i + 20] === 'o' || notes[i + 20] === 'O' || notes[i + 20] === '|') {\n                                              current_note += notes[i + 20];\n                                              if (notes[i + 21] === 'o' || notes[i + 21] === 'O' || notes[i + 21] === '|') {\n                                                current_note += notes[i + 21];\n                                                if (notes[i + 22] === 'o' || notes[i + 22] === 'O' || notes[i + 22] === '|') {\n                                                  current_note += notes[i + 22];\n                                                  if (notes[i + 23] === 'o' || notes[i + 23] === 'O' || notes[i + 23] === '|') {\n                                                    current_note += notes[i + 23];\n                                                    if (notes[i + 24] === 'o' || notes[i + 24] === 'O' || notes[i + 24] === '|') {\n                                                      current_note += notes[i + 24];\n                                                      if (notes[i + 25] === 'o' || notes[i + 25] === 'O' || notes[i + 25] === '|') {\n                                                        current"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Test the function:\nconst test = (string, substring) => {\n  console.log(`${string} contains ${substring} ${howManyTimes(string, substring)} times`);\n};\n\n// Run the tests:\ntest('abcd', 'a');\ntest('abcd', 'b');\ntest('abcd', 'c');\ntest('abcd', 'd');\ntest('abcdefg', 'fg');\ntest('abcdefg', 'e');\ntest('abcdefg', 'efg');\ntest('abcdefg', 'g');\ntest('abcdefg', 'h');\ntest('abcdefg', 'gh');\ntest('abcdefg', 'hg');\ntest('abcdefg', 'hfg');\ntest('abcdefg', 'hgf');\ntest('abcdefg', 'hgfg');\ntest('abcdefg', 'hgfgh');\ntest('abcdefg', 'hgfghi');\ntest('abcdefg', 'hgfghij');\ntest('abcdefg', 'hgfghijk');\ntest('abcdefg', 'hgfghijkl');\ntest('abcdefg', 'hgfghijklm');\ntest('abcdefg', 'hgfghijklmn');\ntest('abcdefg', 'hgfghijklmnop');\ntest('abcdefg', 'hgfghijklmnopq');\ntest('abcdefg', 'hgfghijklmnopqr');\ntest('abcdefg', 'hgfghijklmnopqrs');\ntest('abcdefg', 'hgfghijklmnopqrst');\ntest('abcdefg', 'hgfghijklmnopqrstu');\ntest('abcdefg', 'hgfghijklmnopqrstuv');\ntest('abcdefg', 'hgfghijklmnopqrstuvw');\ntest('abcdefg', 'hgfghijklmnopqrstuvwx');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxow');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowy');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowyc');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycx');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxoxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxoxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxoxoxoxox');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxoxoxoxoxo');\ntest('abcdefg', 'hgfghijklmnopqrstuvwxoxowycxoxoxoxoxoxoxoxoxoxoxox');\ntest('abcdef"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  numbers = numbers.split(' ');\n  const sorted = [];\n  numbers.forEach((num) => {\n    const int = parseInt(num);\n    sorted.push(int);\n  });\n  sorted.sort((a, b) => a - b);\n  return sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverse = (numbers) => {\n  numbers = numbers.split(' ');\n  const sorted = [];\n  numbers.forEach((num) => {\n    const int = parseInt(num);\n    sorted.push(int);\n  });\n  sorted.sort((a, b) => b - a);\n  return sorted.join(' ');\n};\n\nexport {sortNumbers, sortNumbersReverse};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    const sorted = sortArray(numbers);\n    const length = sorted.length;\n    const closest = {};\n    let index = 0;\n    for (let i = 1; i < length - 1; i++) {\n        const current = sorted[i];\n        const next = sorted[i + 1];\n        const distance = Math.abs(next - current);\n        if (closest[next] === undefined) {\n            closest[next] = distance;\n        } else {\n            if (distance < closest[next]) {\n                closest[next] = distance;\n            }\n        }\n    }\n    return closest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  // Sort the numbers\n  const sortedNumbers = sort(numbers);\n  // Calculate the length of the list\n  const length = sortedNumbers.length;\n  // Return the result\n  return map(sortedNumbers, (number) => number / length);\n};\n\n/**\n  * Given list of numbers (of at least two elements), apply a logarithm to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUitLog([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleTonUitLog = (numbers) => {\n  // Sort the numbers\n  const sortedNumbers = sort(numbers);\n  // Calculate the length of the list\n  const length = sortedNumbers.length;\n  // Return the result\n  return map(sortedNumbers, (number) => number / length);\n};\n\n/**\n  * Given list of numbers (of at least two elements), apply a exponential to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUitExp([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.1, 0.2, 0.3, 0.4]\n  */\nconst rescaleTonUitExp = (numbers) => {\n  // Sort the numbers\n  const sortedNumbers = sort(numbers);\n  // Calculate the length of the list\n  const length = sortedNumbers.length;\n  // Return the result\n  return map(sortedNumbers, (number) => number / length);\n};\n\nexport default rescaleTonUit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  const result = []\n  for (const value of values) {\n    if (typeof value === 'number' || typeof value ==='string') {\n      result.push(value)\n    }\n  }\n  return result\n}\n\n/*\n  Convert given array of strings into an array of string objects\n  Each string object is created from the corresponding string value\n  >>> arrStrings = ['abc', 'def', 'ghi', 'jkl']\n  >>> arrStringsToObj = arrStringsToObj(arrStrings)\n  >>> arrStringsToObj\n  [{0: 'abc', 1: 'def', 2: 'ghi', 3: 'jkl'}]\n  >>> arrStringsToObj(arrStrings)\n  [{0: 'abc', 1: 'def', 2: 'ghi', 3: 'jkl'}]\n  */\nconst arrStringsToObj = (arrStrings) => {\n  const result = []\n  for (const string of arrStrings) {\n    result.push({\n      0: string,\n      1: string,\n      2: string,\n      3: string\n    })\n  }\n  return result\n}\n\n/*\n  Calculate the sum of all values in given array\n  >>> sum(range(0, 5))\n  15\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3, 4], 5)\n  10\n  >>> sum([1, 2, 3, 4], -5)\n  0\n  >>> sum([1, 2, 3, 4], 0)\n  0\n  */\nconst sum = (values, initial) => {\n  let sum = initial\n  for (const value of values) {\n    sum += value\n  }\n  return sum\n}\n\n/*\n  Calculate the average of all values in given array\n  >>> average(range(0, 5))\n  2.5\n  >>> average([1, 2, 3, 4])\n  2.5\n  >>> average([])\n  0\n  >>> average([1, 2, 3, 4], 5)\n  2.5\n  >>> average([1, 2, 3, 4], -5)\n  0\n  >>> average([1, 2, 3, 4], 0)\n  0\n  */\nconst average = (values, initial) => {\n  let sum = initial\n  for (const value of values) {\n    sum += value\n  }\n  return sum / values.length\n}\n\n/*\n  Calculate the median of all values in given array\n  >>> median(range(0, 5))\n  3\n  >>> median([1, 2, 3, 4])\n  2.5\n  >>> median([])\n  0\n  >>> median([1, 2, 3, 4], 5)\n  3\n  >>> median([1, 2, 3, 4], -5)\n  0\n  >>> median([1, 2, 3, 4], 0)\n  0\n  */\nconst median = (values, initial) => {\n  if (values.length === 0) {\n    return initial\n  }\n\n  if (values.length % 2 === 0) {\n    const middle = values.length / 2\n    const midVal = values[middle]\n    return (values[middle - 1] + midVal + values[middle]) / 2\n  } else {\n    return values[values.length / 2]\n  }\n}\n\n/*\n  Calculate the mode of all values in given array\n  >>> mode(range(0, 5))\n  3\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([])\n  0\n  >>> mode([1, 2, 3, 4], 5)\n  4\n  >>> mode([1, 2, 3, 4], -5)\n  0\n  >>> mode([1, 2, 3, 4], 0)\n  0\n  */\nconst mode = (values, initial) => {\n  if (values.length === 0) {\n    return initial\n  }\n\n  const maxCount = 0\n  let maxValue = 0\n\n  for (const value of values) {\n    if (values.indexOf(value) > maxCount) {\n      maxCount = values.indexOf(value)\n      maxValue = value\n    }\n  }\n\n  return maxValue\n}\n\n/*\n  Calculate the sum of squares of all values in given array\n  >>> sumSquares(range(0, 5))\n  30\n  >>> sumSquares([1, 2, 3, 4])\n  12\n  >>> sumSquares([])\n  0\n  >>> sumSquares([1, 2, 3, 4], 5)\n  60\n  >>> sumSquares([1, 2, 3, 4], -5)\n  0\n  >>> sumSquares([1, 2, 3, 4], 0)\n  0\n  */\nconst sumSquares = (values, initial) => {\n  let sumSquares = initial\n  for (const value of values) {\n    sumSquares += value * value\n  }\n  return sumSquares\n}\n\n/*\n  Calculate the sum of the squares of the differences between all\n  values in given array\n  >>> sumOfDiffSquares(range(0, 5))\n  30\n  >>> sumOfDiffSquares([1, 2, 3, 4])\n  12\n  >>> sumOfDiffSquares([])\n  0\n  >>> sumOfDiffSquares([1, 2, 3, 4], 5)\n  20\n  >>> sumOfDiffSquares([1, 2, 3, 4], -5)\n  0\n  >>> sumOfDiffSquares([1, 2, 3, 4], 0)\n  0\n  */\nconst sumOfDiffSquares = (values, initial) => {\n  let sumOfDiffSquares = initial\n  for (const value of values) {\n    sumOfDiffSquares += (value - values[0]) * (value - values[1])\n  }\n  return sumOfDiffSquares\n}\n\n/*\n  Calculate the variance of all values in given array\n  >>> variance(range(0, 5))\n  1.66666666"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};\n\n/* Split a string into an array of strings\n  >>> strsplit('abc', '')\n  ['a', 'b', 'c']\n  >>> strsplit('abc', 'a')\n  ['b', 'c']\n  >>> strsplit('abc', 'b')\n  ['a', 'c']\n  >>> strsplit('abc', 'c')\n  ['a', 'b']\n  >>> strsplit('abc', 'd')\n  []\n  */\nconst strsplit = (string, delimiter) => {\n  const result = [];\n  for (let i = 0; i < string.length; i++) {\n    const next = string.charAt(i);\n    if (next == delimiter) {\n      result.push(string.slice(0, i));\n      string = string.slice(i + 1);\n    }\n  }\n  if (string.length > 0) {\n    result.push(string);\n  }\n  return result;\n};\n\n/* Find the index of the first occurence of a substring in a string\n  >>> indexof('abc', 'a')\n  0\n  >>> indexof('abc', 'b')\n  1\n  >>> indexof('abc', 'c')\n  2\n  >>> indexof('abc', 'd')\n  -1\n  >>> indexof('abc', '')\n  -1\n  >>> indexof('abc', 'ab')\n  -1\n  */\nconst indexof = (string, substring) => {\n  let index = -1;\n  let i = 0;\n  while ((index = string.indexOf(substring, i))!== -1) {\n    i = index + 1;\n  }\n  return index;\n};\n\n/* Return a copy of a string with leading and trailing spaces removed\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  >>> trim('')\n  ''\n  >>> trim('   ')\n  ''\n  */\nconst trim = (string) => {\n  const length = string.length;\n  if (length === 0) {\n    return '';\n  }\n  const index = 0;\n  while (string[index] =='') {\n    index++;\n  }\n  const start = index;\n  while (string[--length] =='') {\n    ;\n  }\n  const end = length + 1;\n  return string.slice(start, end);\n};\n\nmodule.exports = {\n  strlen,\n  strsplit,\n  indexof,\n  trim,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let count = 1;\n  while (count < n) {\n    if (n % count === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  10\n  */\nconst smallestDivisor = (n) => {\n  let count = n;\n  while (count % 2 === 0) {\n    count--;\n  }\n  return count;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst leastDivisor = (n) => {\n  let count = n;\n  while (count % 2!== 0) {\n    count--;\n  }\n  return count;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> leastDivisor(15)\n  10\n  */\nconst greatestDivisor = (n) => {\n  let count = n;\n  while (count % 2!== 0) {\n    count++;\n  }\n  return count;\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> greatestDivisor(15)\n  5\n  */\nconst greatestLargestDivisor = (n) => {\n  let count = n;\n  while (count % 2 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> greatestLargestDivisor(15)\n  10\n  */\nconst leastLargestDivisor = (n) => {\n  let count = n;\n  while (count % 2!== 0) {\n    count--;\n  }\n  return count;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> leastLargestDivisor(15)\n  10\n  */\nconst greatestLargestLargestDivisor = (n) => {\n  let count = n;\n  while (count % 2!== 0) {\n    count++;\n  }\n  return count;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> greatestLargestLargestDivisor(15)\n  15\n  */\nconst largestLargestDivisor = (n) => {\n  let count = n;\n  while (count % 2 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*\n  >>> largestLargestDivisor(15)\n  15\n  >>> largestLargestDivisor(45)\n  45\n  >>> largestLargestDivisor(90)\n  90\n  >>> largestLargestDivisor(180)\n  180\n  >>> largestLargestDivisor(360)\n  360\n  >>> largestLargestDivisor(900)\n  900\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargestDivisor(3600)\n  3600\n  >>> largestLargest"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const prime = primeNumber.prime\n  let count = 0\n  for (let i = 2; i < prime; i++) {\n    while (n % i === 0) {\n      count++\n      n /= i\n      factors.push(i)\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const index = {};\n  const result = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (index[numbers[i]]) {\n      continue;\n    }\n    index[numbers[i]] = true;\n    result.push(numbers[i]);\n  }\n\n  return result;\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const flip = (ch) => {\n    return ch === 'a'? 'A' : ch.toUpperCase();\n  }\n  return string.split('').map(flip).join('');\n}\n\n// For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\nconst upperCase = (string) => {\n  const flip = (ch) => {\n    return ch === 'a'? 'A' : ch.toLowerCase();\n  }\n  return string.split('').map(flip).join('');\n}\n\nconst convert = (str) => {\n  const strLower = str.toLowerCase();\n  const strUpper = str.toUpperCase();\n  const strFlip = flipCase(str);\n\n  console.log(strLower);\n  console.log(strUpper);\n  console.log(strFlip);\n}\n\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");\nconvert(\"WORLD\");\nconvert(\"Hello\");\nconvert(\"world\");\nconvert(\"HEllo\");"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.join(' ');\n};\n\n/* Concatenate list of strings into a single string\n  >>> conactenate([], [], [])\n  ''\n  >>> conactenate(['a'], ['b'], ['c'])\n  'abc'\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (...strings) => {\n  return conactenate(strings.slice(0, -1));\n};\n\n/* Concatenate list of strings into a single string\n  >>> conactenate([], [], [], [], [])\n  ''\n  >>> conactenate(['a'], ['b'], ['c'], ['d'], ['e'])\n  'abcde'\n  >>> conactenate(['a', 'b', 'c'], ['d', 'e'], ['f', 'g'])\n  'abcdefg'\n  */\nconst conactenate = (...strings) => {\n  return conactenate(strings.slice(0, -1));\n};\n\n/* Concatenate list of strings into a single string\n  >>> conactenate([], [], [], [], [], [], [], [], [], [])\n  ''\n  >>> conactenate(['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['h'], ['i'], ['j'])\n  'abcdefghij'\n  >>> conactenate(['a', 'b', 'c'], ['d', 'e'], ['f', 'g'], ['h'], ['i', 'j'])\n  'abcdefghij'\n  */\nconst conactenate = (...strings) => {\n  return conactenate(strings.slice(0, -1));\n};\n\n/* Concatenate list of strings into a single string\n  >>> conactenate([], [], [], [], [], [], [], [], [], [], [], [], [])\n  ''\n  >>> conactenate(['a'], ['b'], ['c'], ['d'], ['e'], ['f'], ['g'], ['h'], ['i'], ['j'], ['k'], ['l'], ['m'], ['n'], ['o'], ['p'], ['q'], ['r'], ['s'], ['t'], ['u'], ['v'], ['w'], ['x'], ['y'], ['z'])\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> conactenate(['a', 'b', 'c'], ['d', 'e'], ['f', 'g'], ['h'], ['i', 'j'], ['k'], ['l'], ['m'], ['n'], ['o'], ['p'], ['q'], ['r'], ['s'], ['t'], ['u'], ['v'], ['w'], ['x'], ['y'], ['z'])\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst conactenate = (...strings) => {\n  return conactenate(strings.slice(0, -1));\n};\n\n/* Concatenate list of strings into a single string\n  >>> conactenate}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  const len = strings.length\n  if (len === 0) return []\n  const start = strings[0].indexOf(prefix)\n  if (start === -1) return []\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (strings[i].indexOf(prefix) === start) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\nmodule.exports = iflterByrPefix\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const out = [];\n  for (let i = 0; i < l.length; i += 1) {\n    if (l[i] > 0) {\n      out.push(l[i]);\n    }\n  }\n  return out;\n};\n\n/*\n  # Challenge Input:\n  >>> getNonNegative([1, 2, -3, 4, 5, -6, 7, 8, 9, -10, 11, 12, -13, 14, 15, -16, 17, 18, -19, 20, 21, -22, 23, 24, -25, 26, 27, -28, 29, 30, -31, 32, 33, -33, 34, 35, -36, 37, 38, -39, 40, 41, -42, 43, 44, -45, 46, 47, -48, 49, 50, -51, 52, 53, -54, 55, 56, -57, 58, 59, -60, 61, 62, -62, 63, 64, -63, 65, 66, -64, 67, 68, -65, 69, 70, -66, 71, 72, -67, 73, 74, -68, 75, 76, -69, 77, 78, -70, 79, 80, -71, 81, 82, -72, 83, 84, -73, 85, 86, -74, 87, 88, -75, 89, 90, -76, 91, 92, -77, 93, 94, -78, 95, 96, -79, 97, 98, -80, 99, 100, -81, 101, 102, -82, 103, 104, -83, 105, 106, -84, 107, 108, -85, 109, 110, -86, 111, 112, -87, 113, 114, -88, 115, 116, -89, 117, 118, -90, 119, 120, -91, 121, 122, -92, 123, 124, -93, 125])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  let isPrime = true\n  for (let i = 2; i * i < n; i++) {\n    if (n % i === 0) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\nmodule.exports = siPrime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2!= 0) {\n    throw new Error(\"Given list xs has odd number of coefficients\");\n  }\n\n  let maxVal = xs[len - 1];\n  for (let i = len - 2; i >= 0; i--) {\n    if (xs[i] < 0) {\n      throw new Error(\"Given list xs has negative coefficient\");\n    }\n\n    if (xs[i] > maxVal) {\n      maxVal = xs[i];\n    }\n  }\n\n  const minVal = -maxVal;\n\n  let root = 0;\n  while (Math.abs(poly(root)) > minVal) {\n    root = root + (maxVal - minVal) / 2;\n  }\n  return root;\n}\n\n/*\n  Calculates polynomial coefficients at given point.\n  >>> poly(0.5)\n  1.0\n  >>> poly(1)\n  1.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-2)\n  -2.0\n  >>> poly(-2.5)\n  -1.5\n  >>> poly(0.5)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-1)\n  -1.0\n  >>> poly(-1.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(0.5)\n  1.0\n  >>> poly(-2)\n  -2.0\n  >>> poly(-2.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-1)\n  -1.0\n  >>> poly(-1.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(0.5)\n  1.0\n  >>> poly(-2)\n  -2.0\n  >>> poly(-2.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-1)\n  -1.0\n  >>> poly(-1.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(0.5)\n  1.0\n  >>> poly(-2)\n  -2.0\n  >>> poly(-2.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-1)\n  -1.0\n  >>> poly(-1.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(0.5)\n  1.0\n  >>> poly(-2)\n  -2.0\n  >>> poly(-2.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-1)\n  -1.0\n  >>> poly(-1.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(0.5)\n  1.0\n  >>> poly(-2)\n  -2.0\n  >>> poly(-2.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-1)\n  -1.0\n  >>> poly(-1.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(0.5)\n  1.0\n  >>> poly(-2)\n  -2.0\n  >>> poly(-2.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-1)\n  -1.0\n  >>> poly(-1.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(0.5)\n  1.0\n  >>> poly(-2)\n  -2.0\n  >>> poly(-2.5)\n  -1.5\n  >>> poly(1)\n  1.0\n  >>> poly(0)\n  0.0\n  >>> poly(1.5)\n  2.0\n  >>> poly(-1)\n  -1.0"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const sortedList = []\n    const len = l.length\n\n    for (let i = 0; i < len; i += 3) {\n        sortedList.push(l[i])\n    }\n    for (let i = 1; i < len - 1; i += 3) {\n        sortedList.push(l[i])\n    }\n    return sortedList\n}\n\n// TEST CODE\nconst sortThirdTest = () => {\n    const l = [5, 6, 3, 4, 8, 9, 2]\n    console.log(sortThird(l))\n}\n\n// MAIN\n\n// sortThirdTest()\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter(x => x!== sorted[sorted.length - 1]);\n};\n\n//#unique-map\nconst uniqueMap = (l) => {\n  return new Map(unique(l));\n};\n\n//#unique-array\nconst uniqueArray = (l) => {\n  return Array.from(unique(l));\n};\n\n//#unique-set\nconst uniqueSet = (l) => {\n  return new Set(unique(l));\n};\n\n//#unique-iterable\nconst uniqueIterable = (l) => {\n  const l = Array.from(l);\n  return new Set(l.filter(x => l.indexOf(x) === -1));\n};\n\n//#unique-hash-set\nconst uniqueHashSet = (l) => {\n  const hs = new Set();\n  l.forEach(x => hs.add(x));\n  return hs;\n};\n\n//#unique-hash-set-map\nconst uniqueHashSetMap = (l) => {\n  return new Map(uniqueHashSet(l));\n};\n\n//#unique-hash-set-array\nconst uniqueHashSetArray = (l) => {\n  return Array.from(uniqueHashSet(l));\n};\n\n//#unique-hash-set-iterable\nconst uniqueHashSetIterable = (l) => {\n  const l = Array.from(l);\n  return new Set(l.filter(x => l.indexOf(x) === -1));\n};\n\n//#unique-hash-set-hash-set\nconst uniqueHashSetHashSet = (l) => {\n  const hs = new Set();\n  l.forEach(x => hs.add(x));\n  return hs;\n};\n\n//#unique-hash-set-hash-set-map\nconst uniqueHashSetHashSetMap = (l) => {\n  return new Map(uniqueHashSetHashSet(l));\n};\n\n//#unique-hash-set-hash-set-array\nconst uniqueHashSetHashSetArray = (l) => {\n  return Array.from(uniqueHashSetHashSet(l));\n};\n\n//#unique-hash-set-hash-set-iterable\nconst uniqueHashSetHashSetIterable = (l) => {\n  const l = Array.from(l);\n  return new Set(l.filter(x => l.indexOf(x) === -1));\n};\n\n//#unique-hash-set-hash-set-hash-set\nconst uniqueHashSetHashSetHashSet = (l) => {\n  const hs = new Set();\n  l.forEach(x => hs.add(x));\n  return hs;\n};\n\n//#unique-hash-set-hash-set-hash-set-map\nconst uniqueHashSetHashSetHashSetMap = (l) => {\n  return new Map(uniqueHashSetHashSetHashSet(l));\n};\n\n//#unique-hash-set-hash-set-hash-set-array\nconst uniqueHashSetHashSetHashSetArray = (l) => {\n  return Array.from(uniqueHashSetHashSetHashSet(l));\n};\n\n//#unique-hash-set-hash-set-hash-set-iterable\nconst uniqueHashSetHashSetHashSetIterable = (l) => {\n  const l = Array.from(l);\n  return new Set(l.filter(x => l.indexOf(x) === -1));\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set\nconst uniqueHashSetHashSetHashSetHashSet = (l) => {\n  const hs = new Set();\n  l.forEach(x => hs.add(x));\n  return hs;\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set-map\nconst uniqueHashSetHashSetHashSetHashSetMap = (l) => {\n  return new Map(uniqueHashSetHashSetHashSetHashSet(l));\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set-array\nconst uniqueHashSetHashSetHashSetHashSetArray = (l) => {\n  return Array.from(uniqueHashSetHashSetHashSetHashSet(l));\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set-iterable\nconst uniqueHashSetHashSetHashSetHashSetIterable = (l) => {\n  const l = Array.from(l);\n  return new Set(l.filter(x => l.indexOf(x) === -1));\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set-hash-set\nconst uniqueHashSetHashSetHashSetHashSetHashSet = (l) => {\n  const hs = new Set();\n  l.forEach(x => hs.add(x));\n  return hs;\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set-hash-set-map\nconst uniqueHashSetHashSetHashSetHashSetHashSetMap = (l) => {\n  return new Map(uniqueHashSetHashSetHashSetHashSetHashSet(l));\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set-hash-set-array\nconst uniqueHashSetHashSetHashSetHashSetHashSetArray = (l) => {\n  return Array.from(uniqueHashSetHashSetHashSetHashSetHashSet(l));\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set-hash-set-iterable\nconst uniqueHashSetHashSetHashSetHashSetHashSetIterable = (l) => {\n  const l = Array.from(l);\n  return new Set(l.filter(x => l.indexOf(x) === -1));\n};\n\n//#unique-hash-set-hash-set-hash-set-hash-set-hash-set-hash-set\nconst uniqueHashSetHashSetHashSetHashSetHashSetHashSet = (l) => {\n  const hs = new Set();\n  l.forEach(x => hs.add(x));\n"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((pre, curr) => {\n    return (pre === null)? curr : Math.max(pre, curr);\n  }, null);\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  let res = []\n  let i = 0\n  while (i < l.length) {\n    if (i % 2 === 0) {\n      res.push(l[i])\n    } else {\n      res.push(l[i - 1])\n    }\n    i++\n  }\n  return res\n}\n\nmodule.exports = sotrEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns the base-36 representation of the provided string\n  */\nconst encodeBase36 = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += encodeCyclic(s.charCodeAt(i));\n  }\n  return res;\n}\n\n/*\n  takes as input the base-36 string. Returns the original string\n  */\nconst decodeBase36 = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += decodeCyclic(s.charAt(i));\n  }\n  return res;\n}\n\n/*\n  converts a string to lower case,\n  adds a '-' to the start of every word\n  */\nconst formatLowerCase = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i).toLowerCase() === s.charAt(i)? s.charAt(i) : '-';\n  }\n  return res;\n}\n\n/*\n  takes as input a string of 'words' separated by '-'.\n  Returns a list of words\n  */\nconst formatWords = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i).toLowerCase() === s.charAt(i)? s.charAt(i) : '-';\n  }\n  return res.split('-');\n}\n\n/*\n  takes as input a string of 'words' separated by '-'.\n  Returns a list of words\n  */\nconst formatWordsUpperCase = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i).toUpperCase() === s.charAt(i)? s.charAt(i) : '-';\n  }\n  return res.split('-');\n}\n\n/*\n  takes as input a string of 'words' separated by '-'.\n  Returns a list of words\n  */\nconst formatWordsPunctuation = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i).toUpperCase() === s.charAt(i)? s.charAt(i) : '-';\n  }\n  return res.split('-');\n}\n\n/*\n  takes as input a string of 'words' separated by '-'.\n  Returns a list of words\n  */\nconst formatWordsNoPunctuation = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i).toUpperCase() === s.charAt(i)? s.charAt(i) : '-';\n  }\n  return res.split('-');\n}\n\n/*\n  takes as input a string of 'words' separated by '-'.\n  Returns a list of words\n  */\nconst formatWordsPunctuationNoSpace = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i).toUpperCase() === s.charAt(i)? s.charAt(i) : '-';\n  }\n  return res.split('-');\n}\n\n/*\n  takes as input a string of 'words' separated by '-'.\n  Returns a list of words\n  */\nconst formatWordsNoPunctuationNoSpace = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i).toUpperCase() === s.charAt(i)? s.charAt(i) : '-';\n  }\n  return res.split('-');\n}\n\n/*\n  takes as input a string of 'words' separated by '-'.\n  Returns a list of words\n  */\nconst formatWordsPunctuationNoSpaceNoPunctuation = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i).toUpperCase() === s.charAt(i)? s.charAt(i) : '-';\n  }\n  return res.split('-');\n}\n\n/*\n  takes as input a string of 'words' separated by '-'.\n  Returns a list of words\n  */\nconst formatWordsNoPunctuationNoSpaceNoPunctuation = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res +="}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = fibonacci(n);\n  while (isPrime(fib)) {\n    n--;\n    fib = fibonacci(n);\n  }\n  return fib;\n};\n\n/*\n  factorial returns n!\n  >>> factorial(0)\n  1\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n};\n\n/*\n  isPrime returns true if n is prime.\n  >>> isPrime(0)\n  false\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  false\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  true\n  >>> isPrime(9)\n  true\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  true\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  true\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  true\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let found = 0;\n    for (let i = 0; i < l.length; i += 1) {\n        for (let j = i + 1; j < l.length; j += 1) {\n            for (let k = j + 1; k < l.length; k += 1) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    found += 1;\n                }\n            }\n        }\n    }\n    return found === 3;\n}\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let left = 0;\n  let right = 0;\n  let collision = 0;\n\n  for (let i = 0; i < n; i++) {\n    let leftMovement = acrRacelMovement(i, 1);\n    let rightMovement = acrRacelMovement(i, -1);\n\n    left += leftMovement;\n    right += rightMovement;\n\n    if (leftMovement && rightMovement) {\n      collision++;\n    }\n  }\n\n  return collision;\n};\n\nexport default acrRacelColision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return Array.prototype.concat.apply([], [l, [1]].concat(l.slice(1)));\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n    if (l.length < 2) {\n        return false;\n    }\n    let n = 0;\n    for (let i = 0; i < l.length; i++) {\n        n += l[i];\n    }\n    return (n === 0)? false : true;\n};\n\nmodule.exports = apirSsumoTZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const output = x.toString(base).split('');\n  const carry = output[0] === '1';\n  const newOutput = [];\n  for (let i = output.length - 1; i >= 0; i--) {\n    newOutput.unshift(output[i]);\n    if (carry) {\n      newOutput.unshift(0);\n      carry = false;\n    }\n  }\n  return newOutput.join('');\n};\n\nconsole.log(changeBase(8, 2));\nconsole.log(changeBase(8, 3));\nconsole.log(changeBase(8, 4));\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n === 0) {\n    return 0;\n  } else if(n === 1) {\n    return 0;\n  } else if(n === 2) {\n    return 2;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let listLength = l.length;\n  let half = Math.floor(listLength / 2);\n  let sorted = l.slice().sort();\n  if (listLength % 2 == 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  } else {\n    return sorted[half];\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let i = 0,\n        j = text.length - 1;\n\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n\n        i++;\n        j--;\n    }\n\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abc')\n  false\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isNotPalindrome = (text) => {\n    let i = 0,\n        j = text.length - 1;\n\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return true;\n        }\n\n        i++;\n        j--;\n    }\n\n    return false;\n};\n\nmodule.exports = {\n    isPalindrome,\n    isNotPalindrome\n};<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n * p) % p;\n};\n\nexport { modp };\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26\n  )).join(\"\");\n}\n\n/*\n  Takes as input string of symbols. Encodes it with encode_shift function.\n  Returns encoded string.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  Takes as input string of symbols. Decodes it with decode_shift function.\n  Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  Takes as input string of symbols. Encodes it with encode_shift function.\n  Returns encoded string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  Takes as input string of symbols. Decodes it with decode_shift function.\n  Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  Takes as input string of symbols. Encodes it with encode_shift function.\n  Returns encoded string.\n  */\nconst encode_url = (s) => {\n  return encode_shift(s);\n}\n\n/*\n  Takes as input string of symbols. Decodes it with decode_shift function.\n  Returns decoded string.\n  */\nconst decode_url = (s) => {\n  return decode_shift(s);\n}\n\nexport { encode, decode, encode_shift, decode_shift, encode_url, decode_url }\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  const vowels = [...text, 'aeiou']\n  const regex = new RegExp(`[${vowels.join('|')}]`, 'g')\n  return text.replace(regex, '')\n}\n\n/*\n  remoevDots is a function that takes string and returns string without dots.\n  >>> remoevDots('')\n  ''\n  >>> remoevDots(\"abcdef.ghijklm\")\n  'abcdefghijklm'\n  >>> remoevDots('abcdef.')\n  'abcdef'\n  >>> remoevDots('aaBAA')\n  'aaB'\n  >>> remoevDots('zbcd')\n  'zbcd'\n  */\nconst remoevDots = (text) => {\n  return text.replace(/\\./g, '')\n}\n\n/*\n  remoevSpecial is a function that takes string and returns string without special chars.\n  >>> remoevSpecial('')\n  ''\n  >>> remoevSpecial(\"abcdef.ghijklm\")\n  'abcdefghijklm'\n  >>> remoevSpecial('abcdef.')\n  'abcdef'\n  >>> remoevSpecial('aaBAA')\n  'aaB'\n  >>> remoevSpecial('zbcd')\n  'zbcd'\n  */\nconst remoevSpecial = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, '')\n}\n\n/*\n  getWord is a function that takes string and returns array of words.\n  >>> getWord('')\n  []\n  >>> getWord('abcdef.ghijklm')\n  ['abcdef', 'ghijklm']\n  >>> getWord('abcdef.')\n  ['abcdef']\n  >>> getWord('aaBAA')\n  ['aaB']\n  >>> getWord('zbcd')\n  ['zbcd']\n  */\nconst getWord = (text) => {\n  const regex = new RegExp(`[^a-zA-Z0-9]+`, 'g')\n  return text.match(regex)\n   .map(s => s.toLowerCase())\n   .filter(s => s.length > 0)\n}\n\n/*\n  getWords is a function that takes string and returns array of words.\n  >>> getWords('')\n  []\n  >>> getWords('abcdef.ghijklm')\n  ['abcdef', 'ghijklm']\n  >>> getWords('abcdef.')\n  ['abcdef']\n  >>> getWords('aaBAA')\n  ['aaB']\n  >>> getWords('zbcd')\n  ['zbcd']\n  */\nconst getWords = (text) => {\n  return getWord(text).filter(s => s.length > 0)\n}\n\n/*\n  removeWords is a function that takes string and returns string without words.\n  >>> removeWords('')\n  ''\n  >>> removeWords('abcdef.ghijklm')\n  'abcdefghijklm'\n  >>> removeWords('abcdef.')\n  'abcdef'\n  >>> removeWords('aaBAA')\n  'aaB'\n  >>> removeWords('zbcd')\n  'zbcd'\n  */\nconst removeWords = (text) => {\n  return getWords(text).reduce((prev, current) => {\n    return prev + current\n  })\n}\n\n/*\n  removeLetters is a function that takes string and returns string without letters.\n  >>> removeLetters('')\n  ''\n  >>> removeLetters('abcdef.ghijklm')\n  'abcdefghijklm'\n  >>> removeLetters('abcdef.')\n  'abcdef'\n  >>> removeLetters('aaBAA')\n  'aaB'\n  >>> removeLetters('zbcd')\n  'zbcd'\n  */\nconst removeLetters = (text) => {\n  return removeWords(remoevLetters(text))\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels('abcdef.ghijklm')\n  'abcdefghijklm'\n  >>> removeVowels('abcdef.')\n  'abcdef'\n  >>> removeVowels('aaBAA')\n  'aaB'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return removeWords(remoevVowels(text))\n}\n\n/*\n  removeDots is a function that takes string and returns string without dots.\n  >>> removeDots('')\n  ''\n  >>> removeDots('abcdef.ghijklm')\n  'abcdefghijklm'\n  >>> removeDots('abcdef.')\n  'abcdef'\n  >>> removeDots('aaBAA')\n  'aaB'\n  >>> removeDots('zbcd')\n  'zbcd'\n  */\nconst removeDots = (text) => {\n  return removeWords(remoevDots(text))\n}\n\n/*\n  removeSpecial is a function that takes string and returns string without special chars.\n  >>> removeSpecial('')\n  ''\n  >>> removeSpecial('abcdef.ghijklm')\n  'abcdefghijklm'\n  >>> removeSpecial('abcdef.')\n  'abcdef'\n  >>> removeSpecial('aaBAA')\n  'aaB'\n  >>> removeSpecial('zbcd')\n  'zbcd'\n  */\nconst removeSpecial = (text) => {\n  return removeWords(remoevSpecial(text))\n}\n\n/*\n  removeWords is"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t)\n}\n\n/*\n  Returns true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n >= t)\n}\n\n/*\n  Returns true if l contains any number less than t.\n  >>> hasBelowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> hasBelowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst hasBelowThreshold = (l, t) => {\n  return belowThreshold(l, t)\n}\n\n/*\n  Returns true if l contains any number greater than t.\n  >>> hasAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> hasAboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst hasAboveThreshold = (l, t) => {\n  return aboveThreshold(l, t)\n}\n\n/*\n  Returns true if l contains any number that is exactly t.\n  >>> hasExactThreshold([1, 2, 4, 10], 10)\n  false\n  >>> hasExactThreshold([1, 2, 4, 10], 5)\n  false\n  >>> hasExactThreshold([1, 2, 4, 10], 20)\n  true\n  */\nconst hasExactThreshold = (l, t) => {\n  return t === l.length? true : hasBelowThreshold(l, t) && hasAboveThreshold(l, t)\n}\n\n/*\n  Returns true if l contains any number that is less than t.\n  >>> hasBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> hasBelowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst hasBelowThresholdLessThan = (l, t) => {\n  return l.some(n => n < t)\n}\n\n/*\n  Returns true if l contains any number that is less than or equal to t.\n  >>> hasBelowThresholdLessThan([1, 2, 4, 10], 100)\n  true\n  >>> hasBelowThresholdLessThan([1, 20, 4, 10], 5)\n  true\n  >>> hasBelowThresholdLessThan([1, 2, 4, 10], 10)\n  true\n  */\nconst hasBelowThresholdLessThanEqualTo = (l, t) => {\n  return l.some(n => n <= t)\n}\n\n/*\n  Returns true if l contains any number that is less than t.\n  >>> hasBelowThresholdLessThan([1, 2, 4, 10], 100)\n  true\n  >>> hasBelowThresholdLessThan([1, 20, 4, 10], 5)\n  true\n  >>> hasBelowThresholdLessThan([1, 2, 4, 10], 10)\n  true\n  */\nconst hasBelowThresholdGreaterThan = (l, t) => {\n  return l.some(n => n > t)\n}\n\n/*\n  Returns true if l contains any number that is less than t.\n  >>> hasBelowThresholdLessThan([1, 2, 4, 10], 100)\n  true\n  >>> hasBelowThresholdLessThan([1, 20, 4, 10], 5)\n  true\n  >>> hasBelowThresholdLessThan([1, 2, 4, 10], 10)\n  true\n  */\nconst hasBelowThresholdGreaterThanEqualTo = (l, t) => {\n  return l.some(n => n >= t)\n}\n\n/*\n  Returns true if l contains any number that is less than t.\n  >>> hasBelowThresholdLessThan([1, 2, 4, 10], 100)\n  true\n  >>> hasBelowThresholdLessThan([1, 20, 4, 10], 5)\n  true\n  >>> hasBelowThresholdLessThan([1, 2, 4, 10], 10)\n  true\n  */\nconst hasAboveThresholdLessThan = (l, t) => {\n  return l.some(n => n < t)\n}\n\n/*\n  Returns true if l contains any number that is less than t.\n  >>> hasAboveThresholdLessThan([1, 2, 4, 10], 100)\n  true\n  >>> hasAboveThresholdLessThan([1, 20, 4, 10], 5)\n  true\n  >>> hasAboveThresholdLessThan([1, 2, 4, 10], 10)\n  true\n  */\nconst hasAboveThresholdGreaterThan = (l, t) => {\n  return l.some(n => n > t)\n}\n\n/*\n  Returns true if l contains any number that is less than t.\n  >>> hasAboveThresholdLessThan([1, 2, 4, 10], 100)\n  true\n  >>> hasAboveThresholdLessThan([1, 20, 4, 10], 5)\n  true\n  >>> hasAboveThresholdLessThan([1, 2, 4, 10], 10)\n  true\n  */\nconst hasAboveThresholdGreaterThanEqualTo = (l, t) => {\n  return l.some(n => n >= t)\n}\n\n/*\n  Returns true if l contains any number that is greater than t.\n  >>> hasAboveThresholdGreaterThan([1, 2, 4, 10], 100)\n  false\n  >>> hasAboveThresholdGreaterThan([1, 20, 4, 10], 5)\n  false\n  >>> hasAboveThresholdGreaterThan([1, 2, 4, 10], 10)\n  true\n  */\nconst hasAboveThresholdGreaterThanEqualTo = (l, t) => {\n  return l.some(n => n >= t)\n}\n\n/*\n  Returns true if l contains any number that is less than t.\n  >>> hasAboveThresholdGreaterThan([1, 2, 4, 10], 100)\n  false\n  >>> hasAboveThresholdGreaterThan([1, 20"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new TypeError('x and y must be numbers');\n  }\n  if (x < 0) {\n    throw new TypeError('x must be >= 0');\n  }\n  if (y < 0) {\n    throw new TypeError('y must be >= 0');\n  }\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new TypeError('x and y must be numbers');\n  }\n  if (x < 0) {\n    throw new TypeError('x must be >= 0');\n  }\n  if (y < 0) {\n    throw new TypeError('y must be >= 0');\n  }\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return -x;\n  }\n  return x - y;\n};\n\n/*\n  * Multiplies two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  21\n  */\nconst multiply = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new TypeError('x and y must be numbers');\n  }\n  if (x < 0) {\n    throw new TypeError('x must be >= 0');\n  }\n  if (y < 0) {\n    throw new TypeError('y must be >= 0');\n  }\n  if (x === 0) {\n    return 0;\n  }\n  if (y === 0) {\n    return 0;\n  }\n  return x * y;\n};\n\n/*\n  * Divides two numbers x and y\n  >>> divide(6, 3)\n  2\n  >>> divide(21, 7)\n  14\n  */\nconst divide = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new TypeError('x and y must be numbers');\n  }\n  if (x < 0) {\n    throw new TypeError('x must be >= 0');\n  }\n  if (y < 0) {\n    throw new TypeError('y must be >= 0');\n  }\n  if (x === 0) {\n    return 0;\n  }\n  if (y === 0) {\n    return Infinity;\n  }\n  return x / y;\n};\n\n/*\n  * Returns the greatest common divisor (GCD) of two numbers\n  * For example, GCD(10, 10) returns 0,\n  * GCD(10, 11) returns 1,\n  * GCD(10, 20) returns 10,\n  * GCD(10, 30) returns 30,\n  * GCD(10, 60) returns 60,\n  * GCD(10, 90) returns 90,\n  * GCD(10, 100) returns 10,\n  * GCD(100, 10) returns 100,\n  * GCD(100, 110) returns 10,\n  * GCD(100, 200) returns 100,\n  * GCD(100, 300) returns 100,\n  * GCD(100, 1000) returns 100,\n  * GCD(1000, 100) returns 1000\n  */\nconst gcd = (x, y) => {\n  if (typeof x!== 'number' || typeof y!== 'number') {\n    throw new TypeError('x and y must be numbers');\n  }\n  if (x < 0) {\n    throw new TypeError('x must be >= 0');\n  }\n  if (y < 0) {\n    throw new TypeError('y must be >= 0');\n  }\n  if (x === 0) {\n    return y;\n  }\n  if (y === 0) {\n    return x;\n  }\n  return (Math.min(x, y) / Math.abs(Math.min(x, y)));\n};\n\nexport { add, subtract, multiply, divide, gcd };\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Chars = s0.split('')\n  const s1Chars = s1.split('')\n  if (s0Chars.length!== s1Chars.length) {\n    return false\n  }\n  for (let i = 0; i < s0Chars.length; i++) {\n    if (s0Chars[i]!== s1Chars[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Split a word into individual letters.\n  >>> split('abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 0, b = 1;\n  while (n > 1) {\n    b = a + b;\n    a = b - a;\n    n--;\n  }\n  return a;\n};\n\nconst main = () => {\n  fib(10);\n  fib(1);\n  fib(8);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const open = brackets.slice(0, -1);\n  const close = brackets.slice(-1);\n  const index = [];\n  for (let i = 0; i < open.length; i++) {\n    if (open[i] === close[i]) {\n      index.push(i);\n    }\n  }\n  return index.length === 0;\n};\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(`Test ${test_number} failed: ${message}`);\n  }\n}\n\nassert(\n  correctBracketnig(\"<>\"),\n  \"single open and close brackets are not matching\",\n  \"1. \"\n);\n\nassert(\n  correctBracketnig(\"<\"),\n  \"double open and close brackets are not matching\",\n  \"2. \"\n);\n\nassert(\n  correctBracketnig(\"<>\"),\n  \"single open and double close brackets are not matching\",\n  \"3. \"\n);\n\nassert(\n  correctBracketnig(\"<><>\"),\n  \"double open and double close brackets are not matching\",\n  \"4. \"\n);\n\nassert(\n  correctBracketnig(\"<><\"),\n  \"single open and double close brackets are not matching\",\n  \"5. \"\n);\n\nassert(\n  correctBracketnig}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let sorted = sortedArray(l)\n  let prev = sorted[0]\n  let next = sorted[1]\n  let i = 1\n\n  while (i < sorted.length) {\n    if (next - prev < 0) {\n      return false\n    }\n    prev = next\n    next = sorted[++i]\n  }\n\n  return true\n}\n\nmodule.exports = montoonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const d = {}\n  for (let i = 0; i < l1.length; i++) {\n    d[l1[i]] = 1\n  }\n  for (let j = 0; j < l2.length; j++) {\n    if (d[l2[j]]) {\n      return [l1[i], l2[j]]\n    }\n  }\n  return []\n}\n\nmodule.exports = common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  if (n === 1) return 1;\n  let sqrtN = Math.sqrt(n);\n  for (let i = 2; i < sqrtN; i++) {\n    if (n % i === 0) return i;\n  }\n  return n;\n};\n\n/*Return the smallest multiple of m that is evenly divisible by all\n  numbers from 1 to n, where m > n. Assume n > 1 and m > 1.\n  >>> largestMultiples(4, 10)\n  4\n  >>> largestMultiples(3, 3)\n  6\n  */\nconst largestMultiples = (n, m) => {\n  let sum = 0;\n  let multiples = [];\n  for (let i = 1; i < n; i++) {\n    sum = multiples.reduce((a, b) => a + b, 0);\n    if (sum === m) {\n      multiples.push(i);\n    }\n  }\n  return multiples.sort().shift();\n};\n\n/*Return the smallest number that is evenly divisible by all numbers\n  from 1 to n, where n > 1. Assume n > 1.\n  >>> smallestDivisible(4, 10)\n  4\n  >>> smallestDivisible(3, 3)\n  3\n  */\nconst smallestDivisible = (n, m) => {\n  let sum = 0;\n  let multiples = [];\n  for (let i = 1; i < n; i++) {\n    sum = multiples.reduce((a, b) => a + b, 0);\n    if (sum === m) {\n      multiples.push(i);\n    }\n  }\n  return multiples.sort().shift();\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1;\n  let sqrtN = Math.sqrt(n);\n  for (let i = 2; i < sqrtN; i++) {\n    if (n % i === 0) return i;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) return 1;\n  let sqrtN = Math.sqrt(n);\n  for (let i = 2; i < sqrtN; i++) {\n    if (n % i === 0) return i;\n  }\n  return n;\n};\n\n/*Return the smallest multiple of m that is evenly divisible by all\n  numbers from 1 to n, where m > n. Assume n > 1 and m > 1.\n  >>> largestMultiples(4, 10)\n  4\n  >>> largestMultiples(3, 3)\n  6\n  */\nconst largestMultiples = (n, m) => {\n  let sum = 0;\n  let multiples = [];\n  for (let i = 1; i < n; i++) {\n    sum = multiples.reduce((a, b) => a + b, 0);\n    if (sum === m) {\n      multiples.push(i);\n    }\n  }\n  return multiples.sort().shift();\n};\n\n/*Return the smallest number that is evenly divisible by all numbers\n  from 1 to n, where n > 1. Assume n > 1.\n  >>> smallestDivisible(4, 10)\n  4\n  >>> smallestDivisible(3, 3)\n  3\n  */\nconst smallestDivisible = (n, m) => {\n  let sum = 0;\n  let multiples = [];\n  for (let i = 1; i < n; i++) {\n    sum = multiples.reduce((a, b) => a + b, 0);\n    if (sum === m) {\n      multiples.push(i);\n    }\n  }\n  return multiples.sort().shift();\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1;\n  let sqrtN = Math.sqrt(n);\n  for (let i = 2; i < sqrtN; i++) {\n    if (n % i === 0) return i;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) return 1;\n  let sqrtN = Math.sqrt(n);\n  for (let i = 2; i < sqrtN; i++) {\n    if (n % i === 0) return i;\n  }\n  return n;\n};\n\nmodule.exports = {\n  largestPrimeFactor,\n  largestMultiples,\n  smallestDivisible,\n  smallestPrimeFactor,\n  smallestMultiples,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return Array(n + 1).reduce((sum, x) => sum + x, 0)\n}\n\nconsole.log(sumToN(5))\nconsole.log(sumToN(10))\nconsole.log(sumToN(15))\nconsole.log(sumToN(30))\nconsole.log(sumToN(100))\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  let bracketsLength = brackets.length;\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] === \"(\" && brackets[i + 1] === \")\") {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  let d = [0];\n  for (let i = 1; i < len; i++) {\n    d.push(xs[i] * (i + 1));\n  }\n  return d;\n};\n\nmodule.exports = {\n  getPolynomial,\n  derivative\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib = [1, 0, 1];\n  for (let i = 3; i < n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n  }\n  return fib[n - 1];\n};\n\nconsole.log(fibfib(8));<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = vowelsConut\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let i, result = \"\";\n  while (x > 0) {\n    i = parseInt(x % 10);\n    result = (i + shift) + result;\n    x = parseInt(x / 10);\n  }\n  return result;\n};\n\nconsole.log(circularSihft(12, 1));\nconsole.log(circularSihft(12, 2));\nconsole.log(circularSihft(12, 3));\nconsole.log(circularSihft(12, 4));\nconsole.log(circularSihft(12, 5));\nconsole.log(circularSihft(12, 6));\nconsole.log(circularSihft(12, 7));\nconsole.log(circularSihft(12, 8));\nconsole.log(circularSihft(12, 9));\nconsole.log(circularSihft(12, 10));\nconsole.log(circularSihft(12, 11));\nconsole.log(circularSihft(12, 12));\nconsole.log(circularSihft(12, 13));\nconsole.log(circularSihft(12, 14));\nconsole.log(circularSihft(12, 15));\nconsole.log(circularSihft(12, 16));\nconsole.log(circularSihft(12, 17));\nconsole.log(circularSihft(12, 18));\nconsole.log(circularSihft(12, 19));\nconsole.log(circularSihft(12, 20));\nconsole.log(circularSihft(12, 21));\nconsole.log(circularSihft(12, 22));\nconsole.log(circularSihft(12, 23));\nconsole.log(circularSihft(12, 24));\nconsole.log(circularSihft(12, 25));\nconsole.log(circularSihft(12, 26));\nconsole.log(circularSihft(12, 27));\nconsole.log(circularSihft(12, 28));\nconsole.log(circularSihft(12, 29));\nconsole.log(circularSihft(12, 30));\nconsole.log(circularSihft(12, 31));\nconsole.log(circularSihft(12, 32));\nconsole.log(circularSihft(12, 33));\nconsole.log(circularSihft(12, 34));\nconsole.log(circularSihft(12, 35));\nconsole.log(circularSihft(12, 36));\nconsole.log(circularSihft(12, 37));\nconsole.log(circularSihft(12, 38));\nconsole.log(circularSihft(12, 39));\nconsole.log(circularSihft(12, 40));\nconsole.log(circularSihft(12, 41));\nconsole.log(circularSihft(12, 42));\nconsole.log(circularSihft(12, 43));\nconsole.log(circularSihft(12, 44));\nconsole.log(circularSihft(12, 45));\nconsole.log(circularSihft(12, 46));\nconsole.log(circularSihft(12, 47));\nconsole.log(circularSihft(12, 48));\nconsole.log(circularSihft(12, 49));\nconsole.log(circularSihft(12, 50));\nconsole.log(circularSihft(12, 51));\nconsole.log(circularSihft(12, 52));\nconsole.log(circularSihft(12, 53));\nconsole.log(circularSihft(12, 54));\nconsole.log(circularSihft(12, 55));\nconsole.log(circularSihft(12, 56));\nconsole.log(circularSihft(12, 57));\nconsole.log(circularSihft(12, 58));\nconsole.log(circularSihft(12, 59));\nconsole.log(circularSihft(12, 60));\nconsole.log(circularSihft(12, 61));\nconsole.log(circularSihft(12, 62));\nconsole.log(circularSihft(12, 63));\nconsole.log(circularSihft(12, 64));\nconsole.log(circularSihft(12, 65));\nconsole.log(circularSihft(12, 66));\nconsole.log(circularSihft(12, 67));\nconsole.log(circularSihft(12, 68));\nconsole.log(circularSihft(12, 69));\nconsole.log(circularSihft(12, 70));\nconsole.log(circularSihft(12, 71));\nconsole.log(circularSihft(12, 72));\nconsole.log(circularSihft(12, 73));\nconsole.log(circularSihft(12, 74));\nconsole.log(circularSihft(12, 75));\nconsole.log(circularSihft(12, 76));\nconsole.log(circularSihft(12, 77));\nconsole.log(circularSihft(12, 78));\nconsole.log(circularSihft(12, 79));\nconsole.log(circularSihft(12, 80));\nconsole.log(circularSihft(12, 81));\nconsole.log(circularSihft(12, 82));\nconsole.log(circularSihft(12, 83));\nconsole.log(circularSihft(12, 84));\nconsole.log(circularSihft(12, 85));\nconsole.log(circularSihft(12, 86));\nconsole.log(circularSihft(12, 87));\nconsole.log(circularSihft(12, 88));\nconsole.log(circularSihft(12, 89));\nconsole.log(circularSihft(12, 90));\nconsole.log(circularSihft(12, 91));\nconsole.log(circularSihft(12, 92));\nconsole"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  return s.split('').map(c => c.charCodeAt(0)).reduce((acc, digit) => acc + digit, 0);\n};\n\nconsole.log(digitSum('abAB'));\nconsole.log(digitSum('abcCd'));\nconsole.log(digitSum('helloE'));\nconsole.log(digitSum('woArBld'));\nconsole.log(digitSum('aAaaaXa'));\n\n/*\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst digitSum2 = (s) => {\n  return s.split('').map(c => c.charCodeAt(0)).reduce((acc, digit) => acc + digit, 0);\n};\n\nconsole.log(digitSum2('abAB'));\nconsole.log(digitSum2('abcCd'));\nconsole.log(digitSum2('helloE'));\nconsole.log(digitSum2('woArBld'));\nconsole.log(digitSum2('aAaaaXa'));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let a = parseInt(s)\n  let b = parseInt(n)\n  let c = a - b\n  let d = c / b\n  return d\n}\n\nmodule.exports = fruitDistribution\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  arr.forEach((item, i) => {\n    if (item === min && i % 2 === 0) {\n      min = arr[i];\n      index = i;\n    } else if (item === min) {\n      index = i;\n    }\n  });\n  return [min, index];\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      max = Math.max(max, lst[i])\n    }\n  }\n  return max\n}\n\nexport default search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sorted = lst.sort();\n  let index = sorted.length;\n  let i = sorted.length;\n  while(i--) {\n    index = Math.min(index, sorted[i]);\n  }\n  let reverse = [];\n  for(i = index; i--;) {\n    reverse.push(sorted[i]);\n  }\n  return reverse;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  return ((a + b + c) / 2).toFixed(2)\n}\n\n/*\n  Given the length of a side of a rectangle return the area of the rectangle\n  rounded to 2 decimal points if the side forms a valid rectangle.\n  Otherwise return -1\n  The area of a rectangle is the length of its diagonal\n  Example:\n  rectangleArea(3, 4) == 9.00\n  rectangleArea(4, 5) == -1\n  */\nconst rectangleArea = (length, width) => {\n  return (length * width).toFixed(2)\n}\n\n/*\n  Given the length of a side of a triangle return the sum of the\n  sides of the triangle rounded to 2 decimal points if the triangle\n  forms a valid triangle.\n  Otherwise return -1\n  The sum of the sides of a triangle is the area of the triangle times\n  its length\n  Example:\n  triangleSum(3, 4, 5) == 17.00\n  triangleSum(1, 2, 10) == -1\n  */\nconst triangleSum = (a, b, c) => {\n  return triangleArea(a, b, c) * a.toFixed(2)\n}\n\n/*\n  Given the length of a side of a rectangle return the sum of the\n  sides of the rectangle rounded to 2 decimal points if the rectangle\n  forms a valid rectangle.\n  Otherwise return -1\n  The sum of the sides of a rectangle is the area of the rectangle times\n  its length\n  Example:\n  rectangleSum(3, 4) == 9.00\n  rectangleSum(4, 5) == -1\n  */\nconst rectangleSum = (length, width) => {\n  return rectangleArea(length, width) * length.toFixed(2)\n}\n\n/*\n  Given the length of a side of a triangle return the sum of the\n  sides of the triangle rounded to 2 decimal points if the triangle\n  forms a valid triangle.\n  Otherwise return -1\n  The sum of the sides of a triangle is the area of the triangle times\n  its length\n  Example:\n  triangleSum(3, 4, 5) == 17.00\n  triangleSum(1, 2, 10) == -1\n  */\nconst triangleDifference = (a, b, c) => {\n  return triangleSum(a, b, c) - triangleSum(a, b)\n}\n\n/*\n  Given the length of a side of a rectangle return the sum of the\n  sides of the rectangle rounded to 2 decimal points if the rectangle\n  forms a valid rectangle.\n  Otherwise return -1\n  The sum of the sides of a rectangle is the area of the rectangle times\n  its length\n  Example:\n  rectangleSum(3, 4) == 9.00\n  rectangleSum(4, 5) == -1\n  */\nconst rectangleDifference = (length, width) => {\n  return rectangleSum(length, width) - rectangleSum(length)\n}\n\n/*\n  Given the length of a side of a triangle return the sum of the\n  sides of the triangle rounded to 2 decimal points if the triangle\n  forms a valid triangle.\n  Otherwise return -1\n  The sum of the sides of a triangle is the area of the triangle times\n  its length\n  Example:\n  triangleSum(3, 4, 5) == 17.00\n  triangleSum(1, 2, 10) == -1\n  */\nconst triangleDifference2 = (a, b, c) => {\n  return triangleDifference(a, b, c) * a.toFixed(2)\n}\n\n/*\n  Given the length of a side of a rectangle return the sum of the\n  sides of the rectangle rounded to 2 decimal points if the rectangle\n  forms a valid rectangle.\n  Otherwise return -1\n  The sum of the sides of a rectangle is the area of the rectangle times\n  its length\n  Example:\n  rectangleSum(3, 4) == 9.00\n  rectangleSum(4, 5) == -1\n  */\nconst rectangleDifference2 = (length, width) => {\n  return rectangleDifference(length, width) * length.toFixed(2)\n}\n\n/*\n  Given the length of a side of a triangle return the sum of the\n  sides of the triangle rounded to 2 decimal points if the triangle\n  forms a valid triangle.\n  Otherwise return -1\n  The sum of the sides of a triangle is the area of the triangle times\n  its length\n  Example:\n  triangleSum(3, 4, 5) == 17.00\n  triangleSum(1, 2, 10) == -1\n  */\nconst triangleDifference3 = (a, b, c) => {\n  return triangleDifference(a, b, c) + triangleDifference(a, b)\n}\n\n/*\n  Given the length of a side of a rectangle return the sum of the\n  sides of the rectangle rounded to 2 decimal points if the rectangle\n  forms a valid rectangle.\n  Otherwise return -1\n  The sum of the sides of a rectangle is the area of the rectangle times\n  its length\n  Example:\n  rectangleSum(3, 4) == 9.00\n  rectangleSum(4, 5) == -1\n  */\nconst rectangleDifference3 = (length, width) => {\n  return rectangleDifference(length, width) + rectangleDifference(length)\n}\n\n/*\n  Given the length of a side of a triangle return the sum of the\n  sides of the triangle rounded to 2 decimal points if the triangle\n  forms a valid triangle.\n  Otherwise return -1\n  The sum of the sides of a triangle is the area of the triangle times\n  its length\n  Example:\n  triangleSum(3, 4, 5) == 17.00\n  triangleSum(1, 2, 10) == -1\n  */\nconst triangleDifference4 = (a, b, c) => {\n  return triangleDifference(a, b, c) + triangleDifference2(a, b)\n}\n\n/*\n  Given the length of a side of a rectangle return the sum of the\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const balanced = q.every((x, i) => x === q[(i + 1) % q.length] && x <= w);\n  const palindrome = q.every((x, i) => x === q[(i - 1) % q.length] && x <= w);\n  return balanced && palindrome;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  const balanced = q.every((x, i) => x === q[(i + 1) % q.length] && x <= w);\n  const palindrome = q.every((x, i) => x === q[(i - 1) % q.length] && x <= w);\n  return balanced && palindrome;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly3 = (q, w) => {\n  const balanced = q.every((x, i) => x === q[(i + 1) % q.length] && x <= w);\n  const palindrome = q.every((x, i) => x === q[(i - 1) % q.length] && x <= w);\n  return balanced && palindrome;\n};\n\nconst q = [1, 2, 3];\n\nconsole.log(willItFly(q, 9));\nconsole.log(willItFly2(q, 9));\nconsole.log(willItFly3(q, 9));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  const len = arr.length\n  const half = len / 2\n  const index = half - 1\n  let min = half\n  while (index >= 0) {\n    if (arr[index] === arr[half - index - 1]) {\n      min = index + 1\n    }\n    index--\n  }\n  return min\n}\n\nconsole.log(msallestChange([1, 2, 3, 2, 1]))\nconsole.log(msallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(msallestChange([1, 2, 3, 2, 1, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return lst1;\n  const n = lst1.length;\n  const r = lst2.length;\n  if (n!== r) return lst1;\n\n  const m = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < r; j++) {\n      if (lst1[i] === lst2[j]) {\n        m.push(lst1[i]);\n        break;\n      }\n    }\n  }\n\n  return m;\n};\n\nexport default ottalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  return (a % 3 === 0 && isPrime(a / 3)) ||\n    (a % 5 === 0 && isPrime(a / 5)) ||\n    (a % 7 === 0 && isPrime(a / 7)) ||\n    (a % 11 === 0 && isPrime(a / 11)) ||\n    (a % 13 === 0 && isPrime(a / 13)) ||\n    (a % 17 === 0 && isPrime(a / 17)) ||\n    (a % 19 === 0 && isPrime(a / 19)) ||\n    (a % 23 === 0 && isPrime(a / 23)) ||\n    (a % 29 === 0 && isPrime(a / 29)) ||\n    (a % 31 === 0 && isPrime(a / 31)) ||\n    (a % 37 === 0 && isPrime(a / 37)) ||\n    (a % 41 === 0 && isPrime(a / 41)) ||\n    (a % 43 === 0 && isPrime(a / 43)) ||\n    (a % 47 === 0 && isPrime(a / 47)) ||\n    (a % 53 === 0 && isPrime(a / 53)) ||\n    (a % 59 === 0 && isPrime(a / 59)) ||\n    (a % 61 === 0 && isPrime(a / 61)) ||\n    (a % 67 === 0 && isPrime(a / 67)) ||\n    (a % 71 === 0 && isPrime(a / 71)) ||\n    (a % 73 === 0 && isPrime(a / 73)) ||\n    (a % 79 === 0 && isPrime(a / 79)) ||\n    (a % 83 === 0 && isPrime(a / 83)) ||\n    (a % 89 === 0 && isPrime(a / 89)) ||\n    (a % 97 === 0 && isPrime(a / 97)) ||\n    (a % 101 === 0 && isPrime(a / 101)) ||\n    (a % 103 === 0 && isPrime(a / 103)) ||\n    (a % 107 === 0 && isPrime(a / 107)) ||\n    (a % 109 === 0 && isPrime(a / 109)) ||\n    (a % 113 === 0 && isPrime(a / 113)) ||\n    (a % 127 === 0 && isPrime(a / 127)) ||\n    (a % 131 === 0 && isPrime(a / 131)) ||\n    (a % 137 === 0 && isPrime(a / 137)) ||\n    (a % 139 === 0 && isPrime(a / 139)) ||\n    (a % 149 === 0 && isPrime(a / 149)) ||\n    (a % 151 === 0 && isPrime(a / 151)) ||\n    (a % 157 === 0 && isPrime(a / 157)) ||\n    (a % 163 === 0 && isPrime(a / 163)) ||\n    (a % 167 === 0 && isPrime(a / 167)) ||\n    (a % 179 === 0 && isPrime(a / 179)) ||\n    (a % 181 === 0 && isPrime(a / 181)) ||\n    (a % 191 === 0 && isPrime(a / 191)) ||\n    (a % 193 === 0 && isPrime(a / 193)) ||\n    (a % 197 === 0 && isPrime(a / 197)) ||\n    (a % 199 === 0 && isPrime(a / 199)) ||\n    (a % 211 === 0 && isPrime(a / 211)) ||\n    (a % 223 === 0 && isPrime(a / 223)) ||\n    (a % 227 === 0 && isPrime(a / 227)) ||\n    (a % 229 === 0 && isPrime(a / 229)) ||\n    (a % 233 === 0 && isPrime(a / 233)) ||\n    (a % 239 === 0 && isPrime(a / 239)) ||\n    (a % 241 === 0 && isPrime(a / 241)) ||\n    (a % 251 === 0 && isPrime(a / 251)) ||\n    (a % 257 === 0 && isPrime(a / 257)) ||\n    (a % 263 === 0 && isPrime(a / 263)) ||\n    (a % 269 === 0 && isPrime(a / 269)) ||\n    (a % 271 === 0 && isPrime(a / 271)) ||\n    (a % 277 === 0 && isPrime(a / 277)) ||\n    (a % 281 === 0 && isPrime(a / 281)) ||\n    (a % 283 === 0 && isPrime(a / 283)) ||\n    (a % 293 === 0 && isPrime(a / 293)) ||\n    (a % 307 === 0 && isPrime(a / 307)) ||\n    (a % 311 === 0 && isPrime(a / 311)) ||\n    (a % 313 === 0 && isPrime(a / 313)) ||\n    (a % 317 === 0 && isPrime(a / 317)) ||\n    (a % 331 === 0 && isPrime(a / 331)) ||\n    (a % 337 === 0 && isPrime(a / 337)) ||\n    (a % 347 === 0 && isPrime(a / 347)) ||\n    (a % 349 === 0 && isPrime(a / 349)) ||\n    (a % 353 === 0 && isPrime(a / 353)) ||\n    (a % 359 === 0 && isPrime(a / 359)) ||\n    (a % 367 === 0 && isPrime(a / 367)) ||\n    (a % 373 === 0 && isPrime(a / 373)) ||\n    (a % 379 === 0 && isPrime(a / 379)) ||\n    (a % 383 === 0 && isPrime(a / 383)) ||\n    (a % 389 === 0 && isPrime(a / 389)) ||\n    (a % 397 === 0 && isPrime(a / 397)) ||\n    (a % 401 === 0 && isPrime(a / 401)) ||\n    (a % 409 === 0 && isPrime(a / 409)) ||\n    (a % 419 === 0 && isPrime(a / 419)) ||\n    (a % 421 === 0 && isPrime(a / 421)) ||\n    (a % 431 === 0 && isPrime(a / 431)) ||\n    (a % 433 === 0 && isPrime(a / 433)) ||\n    (a % 439 === 0 && isPrime(a / 439)) ||\n    (a % 443 === 0 && isPrime(a / 443)) ||\n    (a % 449 === 0 && isPrime(a / 449)) ||\n    ("}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  const result = x % n === 0;\n  return result;\n};\n\n/*\n  Write a function that returns true if a number n is a perfect number and false in other\n  cases.\n\n  Perfect number is a number that is divisible by every number from 1 to its value\n  For example:\n  isPerfect(3) => true\n  isPerfect(4) => true\n  isPerfect(5) => false\n  isPerfect(6) => false\n  isPerfect(12) => false\n  */\nconst isPerfect = n => {\n  const result = n % 1 === 0;\n  return result;\n};\n\n/*\n  Write a function that returns true if a number x is a multiple of y and false in other\n  cases.\n\n  Multiple is a number that is divisible by every number from 1 to its value\n  For example:\n  isMultiple(3, 4) => true\n  isMultiple(3, 2) => true\n  isMultiple(7, 3) => true\n  isMultiple(3, 3) => false\n  isMultiple(5, 3) => false\n  */\nconst isMultiple = (x, y) => {\n  const result = x % y === 0;\n  return result;\n};\n\nconst isPrime = n => {\n  if (n === 1) return false;\n  const result = n % 2 === 0;\n  return result;\n};\n\n/*\n  Write a function that returns true if a number n is a perfect cube and false in other\n  cases.\n\n  Perfect cube is a number that is an integer multiple of every other number from 1 to its value\n  For example:\n  isPerfectCube(3) => true\n  isPerfectCube(4) => true\n  isPerfectCube(5) => true\n  isPerfectCube(6) => true\n  isPerfectCube(7) => false\n  isPerfectCube(8) => false\n  */\nconst isPerfectCube = n => {\n  const result = isMultiple(n, n);\n  return result;\n};\n\n/*\n  Write a function that returns true if a number n is a perfect power of 2 and false in other\n  cases.\n\n  Perfect power is a number that is an integer multiple of every power of 2\n  For example:\n  isPerfectPowerOf2(3) => true\n  isPerfectPowerOf2(4) => true\n  isPerfectPowerOf2(5) => true\n  isPerfectPowerOf2(6) => true\n  isPerfectPowerOf2(7) => true\n  isPerfectPowerOf2(8) => false\n  */\nconst isPerfectPowerOf2 = n => {\n  const result = isMultiple(n, 2);\n  return result;\n};\n\nconst isPerfectPower = (n, k) => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(k) && isPerfectPowerOf2(n % k);\n};\n\nconst isPerfectPowerOf3 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 3);\n};\n\nconst isPerfectPowerOf4 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 4);\n};\n\nconst isPerfectPowerOf5 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 5);\n};\n\nconst isPerfectPowerOf6 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 6);\n};\n\nconst isPerfectPowerOf7 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 7);\n};\n\nconst isPerfectPowerOf8 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 8);\n};\n\nconst isPerfectPowerOf9 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 9);\n};\n\nconst isPerfectPowerOf10 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 10);\n};\n\nconst isPerfectPowerOf11 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 11);\n};\n\nconst isPerfectPowerOf12 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 12);\n};\n\nconst isPerfectPowerOf13 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 13);\n};\n\nconst isPerfectPowerOf14 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 14);\n};\n\nconst isPerfectPowerOf15 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 15);\n};\n\nconst isPerfectPowerOf16 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 16);\n};\n\nconst isPerfectPowerOf17 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 17);\n};\n\nconst isPerfectPowerOf18 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 18);\n};\n\nconst isPerfectPowerOf19 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 19);\n};\n\nconst isPerfectPowerOf20 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 20);\n};\n\nconst isPerfectPowerOf21 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 21);\n};\n\nconst isPerfectPowerOf22 = n => {\n  return isPerfectPowerOf2(n) && isPerfectPowerOf2(n % 22);"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    if (a < 0) return false;\n    let res = 1;\n    for (let i = 1; i < Math.abs(a); i++) {\n        res *= i;\n    }\n    return a === 0 || res === a;\n}\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const key = '';\n  let sum = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] >= 'A' && num[i] <= 'F') {\n      key += num[i].toUpperCase();\n      sum += num[i].toUpperCase().charCodeAt(0) - 64;\n    } else if (num[i] >= '0' && num[i] <= '9') {\n      key += num[i];\n      sum += num[i].charCodeAt(0) - 48;\n    } else if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      key += num[i].toUpperCase();\n      sum += num[i].toUpperCase().charCodeAt(0) - 65;\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (number) => {\n  const result = true;\n  if (number < 2) {\n    return false;\n  }\n  for (let i = 2; i < number; i++) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber = (number) => {\n  return isPrime(number);\n};\n\nconst primeNumbers = (num) => {\n  const result = [];\n  for (let i = 2; i <= num; i++) {\n    if (isPrimeNumber(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst hexNum = (num) => {\n  const result = [];\n  for (let i = 0; i < num.length; i++) {\n    if (num[i].toUpperCase() === 'A' || num[i].toUpperCase() === 'B' || num[i].toUpperCase() === 'C' || num[i].toUpperCase() === 'D' || num[i].toUpperCase() === 'E' || num[i].toUpperCase() === 'F') {\n      result.push(num[i].toUpperCase());\n    } else {\n      result.push(num[i].toUpperCase() + parseInt(num[i].charCodeAt(0) - 48));\n    }\n  }\n  return result;\n};\n\nconst isPrime = (number) => {\n  const result = true;\n  if (number < 2) {\n    return false;\n  }\n  for (let i = 2; i < number; i++) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber = (number) => {\n  return isPrime(number);\n};\n\nconst primeNumbers = (num) => {\n  const result = [];\n  for (let i = 2; i <= num; i++) {\n    if (isPrimeNumber(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst hexNum = (num) => {\n  const result = [];\n  for (let i = 0; i < num.length; i++) {\n    if (num[i].toUpperCase() === 'A' || num[i].toUpperCase() === 'B' || num[i].toUpperCase() === 'C' || num[i].toUpperCase() === 'D' || num[i].toUpperCase() === 'E' || num[i].toUpperCase() === 'F') {\n      result.push(num[i].toUpperCase());\n    } else {\n      result.push(num[i].toUpperCase() + parseInt(num[i].charCodeAt(0) - 48));\n    }\n  }\n  return result;\n};\n\nconst hexNumPrime = (num) => {\n  const result = [];\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(num[i])) {\n      result.push(num[i]);\n    }\n  }\n  return result;\n};\n\nconst hexNumPrimeNumber = (num) => {\n  const result = [];\n  for (let i = 0; i < num.length; i++) {\n    if (isPrimeNumber(num[i])) {\n      result.push(num[i]);\n    }\n  }\n  return result;\n};\n\nconst getPrimeNumbers = (num) => {\n  const result = [];\n  const primeNumbers = primeNumbers(num);\n  for (let i = 0; i < primeNumbers.length; i++) {\n    const primeNumber = primeNumbers[i];\n    const hexNum = hexNum(primeNumber);\n    const primeNumbersPrime = hexNumPrimeNumber(primeNumber);\n    const primeNumbersPrimePrime = hexNumPrime(primeNumber);\n    const isPrimePrime = primeNumbersPrimePrime.length === 1 && primeNumbersPrimePrime[0] === '1';\n    if ("}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  // convert decimal to binary, then convert binary to string\n  const binary = convertDecimalToBinary(decimal);\n  const string = convertBinaryToString(binary);\n\n  // add 'db' at beginning and 'db' at end\n  const stringWithDb = `db${string}db`;\n\n  return stringWithDb;\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    if(s.length < 3) {\n        return false;\n    }\n    let count = 0;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 2]) {\n            count += 1;\n        }\n    }\n    if (count >= 3) {\n        return true;\n    }\n    return false;\n}\n\nconst test = () => {\n    console.log(isHappy(\"a\"));\n    console.log(isHappy(\"aa\"));\n    console.log(isHappy(\"abcd\"));\n    console.log(isHappy(\"aabb\"));\n    console.log(isHappy(\"adb\"));\n    console.log(isHappy(\"xyy\"));\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesList = grades.map((grade) => {\n    const letterGrade = grade.toFixed(2);\n    return letterGrade;\n  });\n\n  const letterGrade = gradesList.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n\n  return letterGrade;\n};\n\nconst _grade = (grades, n) => {\n  const letterGrade = nmueriaclLetterGrade(grades);\n\n  if (n === grades.length) {\n    return 'A';\n  }\n\n  let grade;\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] === n) {\n      return letterGrade[i];\n    }\n  }\n\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] > n) {\n      return letterGrade[i - 1];\n    }\n  }\n\n  for (let i = grades.length - 1; i >= 0; i--) {\n    if (grades[i] < n) {\n      return letterGrade[i + 1];\n    }\n  }\n\n  return letterGrade[0];\n};\n\nconst grade = (grades, n) => {\n  const letterGrade = _grade(grades, n);\n\n  const first = letterGrade.substr(0, 1);\n  const last = letterGrade.substr(letterGrade.length - 1);\n\n  return first.toUpperCase() + last;\n};\n\nconst nmueriaclGrade = (grades) => {\n  const gradesList = grades.map((grade) => {\n    const letterGrade = grade.toFixed(2);\n    return letterGrade;\n  });\n\n  const letterGrade = gradesList.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n\n  return letterGrade;\n};\n\nconst _grades = (grades, n) => {\n  const gradesList = grades.map((grade) => {\n    const letterGrade = grade.toFixed(2);\n    return letterGrade;\n  });\n\n  const letterGrade = nmueriaclGrade(gradesList);\n\n  if (n === grades.length) {\n    return grades;\n  }\n\n  let gradesArr = grades;\n  let gradesArrLength = gradesArr.length;\n  let gradesArrLast = gradesArr[gradesArrLength - 1];\n\n  if (gradesArrLast > n) {\n    gradesArr.push(gradesArrLast);\n  }\n\n  if (gradesArrLast <= n) {\n    gradesArr.splice(gradesArrLast, gradesArrLength - gradesArrLast);\n  }\n\n  for (let i = gradesArrLength - 2; i >= 0; i--) {\n    if (gradesArr[i] === n) {\n      gradesArr.splice(i, 1);\n      gradesArrLength--;\n      break;\n    }\n  }\n\n  return gradesArr;\n};\n\nconst grades = (grades, n) => {\n  const gradesList = _grades(grades, n);\n\n  const first = gradesList.substr(0, 1);\n  const last = gradesList.substr(gradesList.length - 1);\n\n  return first.toUpperCase() + last;\n};\n\nconst gradeByLetterGrade = (grades, letterGrade) => {\n  const letterGradeLength = letterGrade.length;\n  let gradesArr = grades;\n  let gradesArrLength = gradesArr.length;\n  let gradesArrLast = gradesArr[gradesArrLength - 1];\n\n  let gradeArr = [];\n  for (let i = gradesArrLength - 1; i >= 0; i--) {\n    if (gradesArr[i].substr(0, letterGradeLength) === letterGrade) {\n      gradeArr.push(gradesArr[i]);\n    }\n  }\n\n  if (gradeArr.length === gradesArrLength) {\n    return grades;\n  }\n\n  return gradeArr;\n};\n\nconst nmueriaclGradeByLetterGrade = (grades, letterGrade) => {\n  const gradesList = gradeByLetterGrade(grades, letterGrade);\n\n  const gradesArr = gradesList.map((grade) => {\n    const letterGrade = grade.substr(0, 1);\n    return letterGrade;\n  });\n\n  return gradesArr;\n};\n\nexport default {\n  grade,\n  nmueriaclGrade,\n  nmueriaclGradeByLetterGrade\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = 2;\n  const isPrime = (number) => {\n    if (number === 1) return false;\n    if (number === 0) return false;\n    if (number % 2 === 0) return false;\n    for (let i = 3; i <= Math.sqrt(number); i += 2) {\n      if (number % i === 0) return false;\n    }\n    return true;\n  };\n  let isPrimeNumber = true;\n  for (let i = 0; i < string.length; i++) {\n    if (!isPrime(string.charCodeAt(i))) {\n      isPrimeNumber = false;\n      break;\n    }\n  }\n  return isPrimeNumber;\n};\n\nconsole.log(primeLength('Hello')); // true\nconsole.log(primeLength('abcdcba')); // true\nconsole.log(primeLength('kittens')); // true\nconsole.log(primeLength('orange')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = i.toString();\n    if (a.length === n) {\n      if (a[0] === '1') {\n        result++;\n      }\n      if (a[a.length - 1] === '1') {\n        result++;\n      }\n    }\n  }\n  return result;\n};\n\nexport default startsOneEnds;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0\n  const isPrime = (n) => {\n    if (n < 2) { return false }\n    if (n < 4) { return true }\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  \n  while (N > 0) {\n    sum += N % 2\n    N = N / 2\n  }\n  \n  return isPrime(sum)? \"1\" : \"0\"\n}\n\nconst runTest = (tests) => {\n  console.log(tests[0])\n  const result = solve(tests[0])\n  console.log(`The sum of digits in ${tests[0]} is ${result}`)\n}\n\nrunTest(testCases)\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    var result = 0;\n    for(let i=0; i<lst.length; i++){\n        result += lst[i];\n        if(i%2 === 1){\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n\n\n// const add = (lst) => {\n//     var result = 0;\n//     for(let i=0; i<lst.length; i++){\n//         result += lst[i];\n//         if(i%2 === 1){\n//             result += lst[i];\n//         }\n//     }\n//     return result;\n// }\n// console.log(add([4, 2, 6, 7]));\n\n\n// const add = (lst) => {\n//     var result = 0;\n//     for(let i=0; i<lst.length; i++){\n//         result += lst[i];\n//         if(i%2 === 1){\n//             result += lst[i];\n//         }\n//     }\n//     return result;\n// }\n// console.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let str = s.split('')\n  let i = 0\n  let j = str.length - 1\n\n  for (let k = 0; k < str.length / 2; k++) {\n    let tmp = str[i]\n    str[i] = str[j]\n    str[j] = tmp\n    i++\n    j--\n  }\n\n  return str.join('')\n}\n\nmodule.exports = antSihuffle\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => a - b)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow2 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => a - b)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow3 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => b - a)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow4 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => a - b)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow5 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => b - a)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow6 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => a - b)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow7 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => b - a)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow8 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => a - b)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow9 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => a - b)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow10 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => b - a)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow11 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => a - b)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow12 = (lst, x) => {\n  let row = []\n  lst.forEach((row, index) => {\n    row = row.slice(0, x)\n    row.sort((a, b) => b - a)\n    row.reverse()\n    row.forEach((val, index) => {\n      row[index] = [index, val]\n    })\n  })\n  return row\n}\n\nconst getRow13 = (lst, x) => {\n  let row = []\n  "}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (!array) {\n    return array;\n  }\n  let sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    return a - b;\n  });\n  let sum = 0;\n  sortedArray.forEach(element => {\n    sum += element;\n  });\n  if (sum % 2 === 1) {\n    sortedArray.reverse();\n  }\n  return sortedArray;\n};\n\n// TEST\n\nconst tests = [\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5]\n  ],\n  [\n    [2, 4, 3, 0, 1, 5],\n    [2, 4, 3, 0, 1, 5]\n  ],\n  [\n    [2, 4, 3, 0, 1, 5, 6],\n    [2, 4, 3, 0, 1, 5, 6]\n  ],\n  [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5, 6]\n  ],\n  [\n    [2, 4, 3, 0, 1, 5, 6, 7],\n    [2, 4, 3, 0, 1, 5, 6, 7]\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7, 8],\n    [1, 2, 3, 4, 5, 6, 7, 8]\n  ]\n];\n\ntests.forEach(test => {\n  console.log(`Testing ${JSON.stringify(test)}`);\n  console.log(`Sorted array: ${JSON.stringify(sortArray(test[0]))}`);\n  console.log(`Original array: ${JSON.stringify(test[0])}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index + (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index - (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index - (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index + (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index - (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index + (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst encrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index + (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt5 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index - (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt6 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index + (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt7 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index + (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt8 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index - (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt9 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index - (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt10 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index + (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt11 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet[index + (char - 'a')]\n  };\n  return s.split('').map(rotator).join('');\n}\n\nconst decrypt12 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let rotator = (index, char) => {\n    return alphabet["}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  const min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      return lst[i+1]\n    }\n    if (lst[i] < min) {\n      prev = lst[i]\n    }\n  }\n  return prev\n}\n\nconst nextSmallset2 = (lst) => {\n  let prev = null\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    if (lst[i] < lst[i+1]) {\n      return lst[i+1]\n    }\n    prev = lst[i]\n  }\n  return prev\n}\n\nconst nextSmallset3 = (lst) => {\n  let prev = null\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > lst[i+1]) {\n      return lst[i+1]\n    }\n    prev = lst[i]\n  }\n  return prev\n}\n\nconst nextSmallset4 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= min) {\n      prev = lst[i]\n      min = d3.min(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset5 = (lst) => {\n  let prev = null\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    if (lst[i] <= lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.min(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset6 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.max(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset7 = (lst) => {\n  let prev = null\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    if (lst[i] >= lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.max(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset8 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.min(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset9 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.min(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset10 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.max(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset11 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.max(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset12 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.max(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset13 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= lst[i+1]) {\n      prev = lst[i]\n      lst[i] = d3.min(lst)\n    }\n  }\n  return prev\n}\n\nconst nextSmallset14 = (lst) => {\n  let min = d3.min(lst)\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= lst[i+1]) {\n      prev = lst[i]\n      lst[i] ="}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n    const re = /^I/;\n    const arr = S.split('.');\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].match(re)) {\n            count++;\n        }\n    }\n    return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const [xInt, yInt, zInt] = [x, y, z].map(n => n | 0);\n  return xInt === yInt + zInt;\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encoded = message.toUpperCase().split('');\n  for(let i = 0; i < encoded.length; i++) {\n    const vowel = encoded[i].charAt(0);\n    const nextVowel = encoded[i + 2].charAt(0);\n    if(vowel === nextVowel) {\n      encoded[i + 2] = encoded[i].charAt(0).toUpperCase();\n      encoded[i] = encoded[i + 1].charAt(0).toUpperCase();\n      encoded[i + 1] = encoded[i + 2].charAt(0).toUpperCase();\n    }\n  }\n  return encoded.join('');\n}\n\nconst decode = (message) => {\n  const encoded = message.toUpperCase().split('');\n  for(let i = 0; i < encoded.length; i++) {\n    const vowel = encoded[i].charAt(0);\n    const nextVowel = encoded[i + 2].charAt(0);\n    if(vowel === nextVowel) {\n      encoded[i + 2] = encoded[i].charAt(0).toUpperCase();\n      encoded[i] = encoded[i + 1].charAt(0).toUpperCase();\n      encoded[i + 1] = encoded[i + 2].charAt(0).toUpperCase();\n    }\n  }\n  return encoded.join('');\n}\n\nconst message = 'This is a message';\nconst encodedMessage = encode(message);\nconsole.log(`Encoded: ${encodedMessage}`);\nconst decodedMessage = decode(encodedMessage);\nconsole.log(`Decoded: ${decodedMessage}`);\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encoded = message.toUpperCase().split('');\n  for(let i = 0; i < encoded.length; i++) {\n    const vowel = encoded[i].charAt(0);\n    const nextVowel = encoded[i + 2].charAt(0);\n    if(vowel === nextVowel) {\n      encoded[i + 2] = encoded[i].charAt(0).toUpperCase();\n      encoded[i] = encoded[i + 1].charAt(0).toUpperCase();\n      encoded[i + 1] = encoded[i + 2].charAt(0).toUpperCase();\n    }\n  }\n  return encoded.join('');\n}\n\nconst decode = (message) => {\n  const encoded = message.toUpperCase().split('');\n  for(let i = 0; i < encoded.length; i++) {\n    const vowel = encoded[i].charAt(0);\n    const nextVowel = encoded[i + 2].charAt(0);\n    if(vowel === nextVowel) {\n      encoded[i + 2] = encoded[i].charAt(0).toUpperCase();\n      encoded[i] = encoded[i + 1].charAt(0).toUpperCase();\n      encoded[i + 1] = encoded[i + 2].charAt(0).toUpperCase();\n    }\n  }\n  return encoded.join('');\n}\n\nconst message = 'This is a message';\nconst encodedMessage = encode(message);\nconsole.log(`Encoded: ${encodedMessage}`);\nconst decodedMessage = decode(encodedMessage);\nconsole.log(`Decoded: ${decodedMessage}`);<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  const prime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  let primeCount = 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (prime(lst[i])) {\n      primeCount++\n      sum += lst[i]\n    }\n  }\n  return sum + primeCount\n}\n\nconsole.log(ksjkasddk([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(ksjkasddk([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(ksjkasddk([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(ksjkasddk([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(ksjkasddk([0,81,12,3,1,21]))\nconsole.log(ksjkasddk([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let containsLower = keys.every(key => key.toLowerCase() === key)\n  let containsUpper = keys.every(key => key.toUpperCase() === key)\n  if(containsLower && containsUpper) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  capital letter.\n  Example:\n  checkCapitalCase(\"John\") should return true.\n  checkCapitalCase(\"abc\") should return true.\n  checkCapitalCase(\"123\") should return false.\n  checkCapitalCase(\"\") should return false.\n*/\nconst checkCapitalCase = (str) => {\n  let containsCapital = str.match(/[A-Z]/g)\n  if(containsCapital) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  lower case letter.\n  Example:\n  checkLowerCase(\"John\") should return true.\n  checkLowerCase(\"abc\") should return false.\n  checkLowerCase(\"123\") should return false.\n  checkLowerCase(\"\") should return false.\n*/\nconst checkLowerCase = (str) => {\n  let containsLower = str.match(/[a-z]/g)\n  if(containsLower) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  upper case letter.\n  Example:\n  checkUpperCase(\"John\") should return true.\n  checkUpperCase(\"abc\") should return false.\n  checkUpperCase(\"123\") should return true.\n  checkUpperCase(\"\") should return false.\n*/\nconst checkUpperCase = (str) => {\n  let containsUpper = str.match(/[A-Z]/g)\n  if(containsUpper) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  digit.\n  Example:\n  checkDigit(\"John\") should return true.\n  checkDigit(\"abc\") should return false.\n  checkDigit(\"123\") should return true.\n  checkDigit(\"\") should return false.\n*/\nconst checkDigit = (str) => {\n  let containsDigit = str.match(/[0-9]/g)\n  if(containsDigit) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  letter.\n  Example:\n  checkLetter(\"John\") should return true.\n  checkLetter(\"abc\") should return false.\n  checkLetter(\"123\") should return false.\n  checkLetter(\"\") should return false.\n*/\nconst checkLetter = (str) => {\n  let containsLetter = str.match(/[a-zA-Z]/g)\n  if(containsLetter) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  number.\n  Example:\n  checkNumber(\"John\") should return true.\n  checkNumber(\"abc\") should return false.\n  checkNumber(\"123\") should return true.\n  checkNumber(\"\") should return false.\n*/\nconst checkNumber = (str) => {\n  let containsNumber = str.match(/[0-9]/g)\n  if(containsNumber) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  symbol.\n  Example:\n  checkSymbol(\"John\") should return true.\n  checkSymbol(\"abc\") should return false.\n  checkSymbol(\"123\") should return false.\n  checkSymbol(\"\") should return false.\n*/\nconst checkSymbol = (str) => {\n  let containsSymbol = str.match(/[!@#$%^&*()_+=`{}\\[\\]\\\\\\/|~]/g)\n  if(containsSymbol) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  space.\n  Example:\n  checkSpace(\"John\") should return true.\n  checkSpace(\"abc\") should return false.\n  checkSpace(\"123\") should return false.\n  checkSpace(\"\") should return false.\n*/\nconst checkSpace = (str) => {\n  let containsSpace = str.match(/\\s/g)\n  if(containsSpace) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  word.\n  Example:\n  checkWord(\"John\") should return true.\n  checkWord(\"abc\") should return false.\n  checkWord(\"123\") should return true.\n  checkWord(\"\") should return false.\n*/\nconst checkWord = (str) => {\n  let containsWord = str.match(/[a-zA-Z]{2,}/g)\n  if(containsWord) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  upper case letter.\n  Example:\n  checkUpperCase(\"John\") should return true.\n  checkU"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2]\n  const nums = []\n  for (let i = 3; i < n; i += 2) {\n    for (let j = 0; j < primes.length; j++) {\n      if (i % primes[j] === 0) {\n        break\n      }\n    }\n    if (j === primes.length) {\n      primes.push(i)\n    }\n  }\n  for (let i = 0; i < primes.length; i++) {\n    nums.push(primes[i])\n  }\n  return nums\n}\n\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return (a + '000000' + b + '000000').slice(0, -1).split('').map(digit => parseInt(digit));\n};\n\n// Test cases\ndescribe('Multiply the two integers', () => {\n  it('should return 0 if the inputs are equal', () => {\n    expect(multiply(148, 412)).toEqual(0);\n    expect(multiply(19, 28)).toEqual(72);\n    expect(multiply(2020, 1851)).toEqual(0);\n    expect(multiply(14, -15)).toEqual(20);\n  });\n  it('should return the product of the two inputs', () => {\n    expect(multiply(148, 412)).toEqual(16);\n    expect(multiply(19, 28)).toEqual(72);\n    expect(multiply(2020, 1851)).toEqual(0);\n    expect(multiply(14, -15)).toEqual(20);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 1; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Test\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  return parseInt(parseFloat(value).toFixed(0), 10);\n};\n\nexport default closestInetger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [1];\n  for (let i = 1; i < n; i++) {\n    if (i % 2 === 0) {\n      pile.push(pile[i - 1] + pile[i]);\n    } else {\n      pile.push(pile[i - 1] + i);\n    }\n  }\n  return pile;\n};\n\nexport default makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  // split comma or space into array\n  return s.split(/(\\s|,)/);\n}\n\nexport default wordsString;<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    if (x == y) {\n        return x;\n    }\n    let diff = x - y;\n    if (diff % 2!= 0) {\n        return -1;\n    }\n    return Math.min(x, y) + 1;\n};\n\nmodule.exports = chooseNum;<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const half = (n + m) / 2\n  const nn = Math.floor(n)\n  const mm = Math.ceil(m)\n\n  if (half < nn || half > mm) {\n    return -1\n  }\n\n  const num = (half - nn) + (mm - half)\n  const halfBits = num % 2\n  return halfBits\n}\n\nmodule.exports = roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  const sortedDigtis = [...new Set(x.map((elem) => elem.toString()))].sort();\n  return sortedDigtis.filter((elem) => elem.toString().indexOf('0') === -1);\n};\n\nexport default uniqueDigtis;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  let ret = [];\n  if (!arr) return ret;\n  arr.forEach((num, index) => {\n    if (num >= 1 && num <= 9) {\n      ret.push(num);\n    }\n  });\n  return ret.sort((a, b) => a - b).reverse();\n}\n\n/*\n  This function returns the largest number in the array.\n  If the array is empty, return 0.\n  \n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return = 9\n  \n    If the array is empty, return 0.\n    \n    For example:\n    arr = []\n    return = 0\n*/\nconst ybMax = (arr) => {\n  if (!arr) return 0;\n  return arr.reduce((acc, num) => Math.max(acc, num), 0);\n}\n\n/*\n  This function returns the smallest number in the array.\n  If the array is empty, return 0.\n  \n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return = 1\n  \n    If the array is empty, return 0.\n    \n    For example:\n    arr = []\n    return = 0\n*/\nconst ybMin = (arr) => {\n  if (!arr) return 0;\n  return arr.reduce((acc, num) => Math.min(acc, num), 0);\n}\n\n/*\n  This function returns the sum of all the numbers in the array.\n  \n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return = 14\n  \n    If the array is empty, return 0.\n    \n    For example:\n    arr = []\n    return = 0\n*/\nconst ybSum = (arr) => {\n  if (!arr) return 0;\n  return arr.reduce((acc, num) => acc + num, 0);\n}\n\nexport default {\n  ybMax,\n  ybMin,\n  ybSum,\n  ybLength,\n  ybMax,\n  ybMin,\n  ybSum,\n  ybLength,\n}<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(Math.pow(i, i))\n  }\n  return result\n}\n\nconst even = (n) => n % 2 === 0\n\nconst getFactorial = (n) => f(n).filter(even)\n\nconst getFactorials = (n) => f(n)\n\nconst getFibonacci = (n) => {\n  let fibonacci = []\n  let fibonacci2 = []\n  for (let i = 0; i < n; i++) {\n    fibonacci.push(1)\n    fibonacci2.push(0)\n  }\n  fibonacci[0] = 1\n  fibonacci[1] = 1\n  for (let i = 2; i < n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci2[i - 2]\n    fibonacci2[i] = fibonacci2[i - 1] + fibonacci[i - 2]\n  }\n  return fibonacci\n}\n\n/*\n  Calculate the number of factors of a number\n  n\n  */\nconst numberOfFactors = (n) => {\n  const result = []\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let j = 1\n    let k = i\n    while (k <= n) {\n      count += 1\n      k = k * i\n    }\n  }\n  result.push(count)\n  return result\n}\n\n/*\n  Calculate the number of factors of a number\n  n\n  */\nconst numberOfFactors2 = (n) => getFactorials(n).reduce((a, b) => a + b)\n\n/*\n  Calculate the Fibonacci sequence\n  n\n  */\nconst getFibonacciSequence = (n) => getFibonacci(n)\n\n/*\n  Calculate the Fibonacci sequence\n  n\n  */\nconst getFibonacciSequence2 = (n) => getFibonacci2(n)\n\n/*\n  Calculate the Fibonacci sequence\n  n\n  */\nconst getFibonacciSequence3 = (n) => getFibonacci3(n)\n\n/*\n  Calculate the Fibonacci sequence\n  n\n  */\nconst getFibonacciSequence4 = (n) => getFibonacci4(n)\n\n/*\n  Calculate the Fibonacci sequence\n  n\n  */\nconst getFibonacciSequence5 = (n) => getFibonacci5(n)\n\nconst getFibonacci5 = (n) => {\n  let fibonacci = []\n  let fibonacci2 = []\n  for (let i = 0; i < n; i++) {\n    fibonacci.push(1)\n    fibonacci2.push(0)\n  }\n  fibonacci[0] = 1\n  fibonacci[1] = 1\n  for (let i = 2; i < n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci2[i - 2]\n    fibonacci2[i] = fibonacci2[i - 1] + fibonacci[i - 2]\n  }\n  return fibonacci\n}\n\nconst getFibonacci4 = (n) => getFibonacci(n)\n\nconst getFibonacci3 = (n) => getFibonacci2(n)\n\nconst getFibonacci2 = (n) => getFibonacci(n)\n\nconst getFibonacci = (n) => {\n  let fibonacci = []\n  let fibonacci2 = []\n  for (let i = 0; i < n; i++) {\n    fibonacci.push(1)\n    fibonacci2.push(0)\n  }\n  fibonacci[0] = 1\n  fibonacci[1] = 1\n  for (let i = 2; i < n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci2[i - 2]\n    fibonacci2[i] = fibonacci2[i - 1] + fibonacci[i - 2]\n  }\n  return fibonacci\n}\n\nconst getFibonacci = (n) => {\n  let fibonacci = []\n  let fibonacci2 = []\n  for (let i = 0; i < n; i++) {\n    fibonacci.push(1)\n    fibonacci2.push(0)\n  }\n  fibonacci[0] = 1\n  fibonacci[1] = 1\n  for (let i = 2; i < n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci2[i - 2]\n    fibonacci2[i] = fibonacci2[i - 1] + fibonacci[i - 2]\n  }\n  return fibonacci\n}\n\nconst getFibonacci = (n) => {\n  let fibonacci = []\n  let fibonacci2 = []\n  for (let i = 0; i < n; i++) {\n    fibonacci.push(1)\n    fibonacci2.push(0)\n  }\n  fibonacci[0] = 1\n  fibonacci[1] = 1\n  for (let i = 2; i < n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci2[i - 2]\n    fibonacci2[i] = fibonacci2[i"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let oddPalindrome = 0\n  let evenPalindrome = 0\n  for (let i = 1; i <= n; i++) {\n    let newStr = ''\n    for (let j = i; j >= i; j--) {\n      newStr += j.toString()\n    }\n    let str = newStr\n    let reverseStr = str.split('').reverse().join('')\n    if (newStr === reverseStr) {\n      if (str.charAt(0) % 2 === 0) {\n        evenPalindrome++\n      } else {\n        oddPalindrome++\n      }\n    }\n  }\n  return {\n    odd: oddPalindrome,\n    even: evenPalindrome\n  }\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  const result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(countNmus([-1, 11, -11]));\nconsole.log(countNmus([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let length = arr.length;\n  if (length === 0) return true;\n\n  let last = arr[length - 1];\n  let i = length - 1;\n  while (i > 0) {\n    if (arr[i] > last) {\n      let j = arr[i - 1];\n      arr[i - 1] = arr[i];\n      arr[i] = j;\n      i -= 1;\n      length--;\n    } else {\n      i--;\n    }\n  }\n  return length === 1 || arr[0] === last;\n};\n\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 1, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  // Check whether lst1 is longer than lst2\n  if (lst1.length < lst2.length) {\n    return xechange(lst2, lst1);\n  }\n  // Check whether lst1 and lst2 are equal in length\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i]!== lst2[i]) {\n        return xechange(lst1, lst2);\n      }\n    }\n    return \"YES\";\n  }\n  // Check whether lst1 is longer than lst2\n  if (lst1.length > lst2.length) {\n    return xechange(lst1, lst2);\n  }\n  // lst1.length is equal to lst2.length\n  const lst1Even = [];\n  const lst1Odd = [];\n  const lst2Even = [];\n  const lst2Odd = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      lst1Even.push(lst1[i]);\n    } else {\n      lst1Odd.push(lst1[i]);\n    }\n    if (lst2[i] % 2 === 0) {\n      lst2Even.push(lst2[i]);\n    } else {\n      lst2Odd.push(lst2[i]);\n    }\n  }\n  // Check whether lst1 can be transformed to lst2 by an xechange\n  if (lst1Even.length!== 0 && lst2Even.length!== 0) {\n    return xechange(lst1Even, lst2Even);\n  } else if (lst1Odd.length!== 0 && lst2Odd.length!== 0) {\n    return xechange(lst1Odd, lst2Odd);\n  }\n  return \"NO\";\n};\n\n// Test\nconsole.log(xechange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(xechange([1, 2, 3, 4, 5], [1, 2, 3, 4])); // NO\nconsole.log(xechange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])); // NO\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let result = {};\n  test.split(' ').forEach(letter => {\n    if (result[letter] === undefined) {\n      result[letter] = 1;\n    } else {\n      result[letter]++;\n    }\n  });\n  return result;\n}\n\n// Test\nconsole.log(histogram('a b c'));\nconsole.log(histogram('a b b a'));\nconsole.log(histogram('a b c a b'));\nconsole.log(histogram(''));<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  const [ss, cc] = [s, c];\n  const isReversed = s => ss.split('').reverse().join('') === s;\n  const isPalindrome = s => s === s.split('').reverse().join('');\n  const isChar = c => cc.indexOf(c) >= 0;\n  const [start, end] = s.split('').reverse().splice(0, 1).reverse().splice(1, 1);\n  const [s2, c2] = [start, end];\n  return [s2, isReversed(s2) && isChar(c2) && isPalindrome(s2)];\n};\n\nmodule.exports = reveresDelete;<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const n = lst.length;\n  if (n === 0) return [];\n  let res = [];\n  lst.forEach((v, i) => {\n    res.push(v.split('').filter((n, j) => (j % 2 === 1)).length);\n  });\n  return res;\n};\n\n//export\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((sum, val) => sum + val, 0);\n  return sum;\n};\n\nconst test = () => {\n  const {minSubArraySum} = require('../../src/algorithms/minimum-sub-array-sum');\n  console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n  console.log(minSubArraySum([-1, -2, -3]));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    // write your code here\n    let ans = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                ans += 1;\n                while (ans > capacity) {\n                    ans -= grid[i][j];\n                }\n            }\n        }\n    }\n    return ans;\n};\n\nconst main = () => {\n    let grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1], [0,1,1,1]];\n    let bucket_capacity = 1;\n    let ans = maxFill(grid, bucket_capacity);\n    console.log(ans);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = []\n  let prev = -1\n  arr.forEach((item, index) => {\n    const binary = item.toString(2)\n    const digit = binary.charAt(0)\n    if (digit === '1') {\n      sortedArray.push(item)\n    } else if (prev === -1) {\n      sortedArray.push(item)\n    } else {\n      const digit = binary.charAt(0)\n      if (digit > prev) {\n        sortedArray.unshift(item)\n      } else {\n        sortedArray.push(item)\n      }\n    }\n    prev = digit\n  })\n  return sortedArray\n}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  const words = s.split('').map(s => s.split(' ').filter(s => s.length > 0));\n  const consonants = ['a', 'e', 'i', 'o', 'u'];\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === n) {\n      let word = words[i];\n      let pos = 0;\n      for (let j = 0; j < word.length; j++) {\n        if (consonants.indexOf(word[j]) >= 0) {\n          result.push(word);\n          break;\n        }\n        pos++;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(selectWdors('Uncle sam', 3));\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const result = [];\n  for (let i = 0; i < word.length; i++) {\n    const char = word[i];\n    if (vowels.indexOf(char)!== -1) {\n      if (consonants.indexOf(word[i + 1])!== -1) {\n        result.push(char);\n        i++;\n      }\n    }\n  }\n  return result.join('');\n};\n\n// Test\nconst test = [\n  ['yogurt', 'u'],\n  ['quick', ''],\n  ['ab', ''],\n  ['full', 'U'],\n  ['abcd', ''],\n  ['FULL', 'U'],\n  ['abcd', 'U'],\n  ['FULL', ''],\n  ['FULL', 'U'],\n  ['full', 'U'],\n  ['full', ''],\n  ['yogurt', ''],\n  ['FULL', ''],\n  ['FULL', ''],\n  ['full', ''],\n  ['FULL', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full', ''],\n  ['full',"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i];\n    if (cur === '(') {\n      stack.push(cur);\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      } else {\n        const paren = stack.pop();\n        if (paren!== '(') {\n          return 'No';\n        }\n      }\n    }\n  }\n\n  return 'Yes';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  let arrLength = arr.length\n  if (arrLength <= k) {\n    return arr\n  }\n  const arrMin = arr.slice(0, k)\n  const arrMax = arr.slice(k)\n  const max = arrMax[0]\n  const min = arrMin[arrMin.length - 1]\n  return [max,...arrMin, min]\n}\n\nconst test = [\n  [-3, -4, 5],\n  [4, -4, 4],\n  [-3, 2, 1, 2, -1, -2, 1],\n]\n\nfor (let [arr, k] of test) {\n  console.log(maxmium(arr, k))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nconst addElements2 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        sum += int;\n    }\n    return sum;\n}\n\nconst addElements3 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 10) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements4 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 100) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements5 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 1000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements6 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 10000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements7 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 100000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements8 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 1000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements9 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 10000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements10 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 100000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements11 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 1000000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements12 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 10000000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements13 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 1000000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements14 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 100000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements15 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 10000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements16 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 1000000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements17 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 100000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements18 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 10000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements19 = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        const int = arr[i];\n        if (int >= 1000) {\n            sum += int;\n        }\n    }\n    return sum;\n}\n\nconst addElements20 = (arr, k) => {\n    const sum"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    return arr;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    return arr;\n}\n\n/*\n  Return the largest number that can be generated by the collatz conjecture from n.\n\n  For example:\n  getCollatz(2) returns 3\n  */\nconst getCollatz = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    return arr[arr.length - 1];\n}\n\n/*\n  Return a sorted list of all collatz sequences starting from 1 up to the nth number.\n  The list should include all the numbers that are reachable by the collatz conjecture.\n  */\nconst getAllCollatz = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    return arr;\n}\n\n// Print the list of collatz sequences\nconst printCollatz = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    arr.reverse();\n    console.log(arr);\n}\n\n// Find the length of the collatz sequence of n\nconst length = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    return arr.length;\n}\n\n// Find the length of the collatz sequence of n\nconst length = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    return arr.length;\n}\n\n// Find the length of the collatz sequence of n\nconst length = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    return arr.length;\n}\n\n// Print the list of collatz sequences\nconst printCollatz = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    arr.reverse();\n    console.log(arr);\n}\n\n// Find the largest number that can be generated by the collatz conjecture from n.\nconst getCollatz = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);\n        arr.push(count);\n    }\n\n    return arr[arr.length - 1];\n}\n\n// Find the largest number that can be generated by the collatz conjecture from n.\nconst getCollatz = (n) => {\n    let arr = [1];\n    let next = n;\n\n    while (next > 1) {\n        let count = next;\n        next = (next % 2)? (next * 3 + 1) : (next / 2);"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const month = parseInt(date.slice(0,2), 10);\n  const day = parseInt(date.slice(2,4), 10);\n  const year = parseInt(date.slice(4,10), 10);\n\n  if (isNaN(month) || isNaN(day) || isNaN(year)) {\n    return false;\n  }\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > daysOfMonth[month-1]) {\n    return false;\n  }\n\n  if (month === 2 && day > daysOfFebruary[year % 4]) {\n    return false;\n  }\n\n  if (day > daysOfMonth[month-1] && month!== 2) {\n    return false;\n  }\n\n  if (month === 2 && year % 4 === 0 && day > daysOfFebruary[29]) {\n    return false;\n  }\n\n  if (day > daysOfMonth[month-1] && month === 2 && year % 4!== 0) {\n    return false;\n  }\n\n  if (month === 2 && year % 100 === 0 && day > daysOfFebruary[29]) {\n    return false;\n  }\n\n  if (month === 2 && year % 400 === 0 && day > daysOfFebruary[29]) {\n    return false;\n  }\n\n  return true;\n}\n\nconsole.log(validDate('03-11-2000'));\nconsole.log(validDate('15-01-2012'));\nconsole.log(validDate('04-0-2040'));\nconsole.log(validDate('06-04-2020'));\nconsole.log(validDate('06/04/2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  txt = txt.toLowerCase();\n  const words = txt.split(/\\s+/g);\n  const wordsLength = words.length;\n  const wordLength = words[0].length;\n  const lastWord = words[wordsLength - 1];\n  const lastWordLength = lastWord.length;\n  const letterCount = getLetterCount(lastWord);\n\n  return [...new Array(wordsLength - 1),...words.slice(1).map((word, index) => {\n    let nextWord = index < wordsLength - 1? words[index + 1] : '';\n    let nextWordLength = nextWord.length;\n    let nextWordLetterCount = getLetterCount(nextWord);\n\n    return word.slice(0, wordLength - 1) + nextWord.slice(0, nextWordLength - 1) + (nextWordLetterCount % 2? lastWord : '');\n  })]\n}\n\nfunction getLetterCount(word) {\n  return word.split('').reduce((total, letter) => total + (letter.charCodeAt(0) % 2? 1 : 0), 0);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let l = lst.length;\n  let c = lst.length - 1;\n  let i = 0;\n  while (i < l) {\n    if (lst[i] > lst[i + 1]) return false;\n    i += 1;\n  }\n  return true;\n};\n\nexport default isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const min = Math.min(interval1[0], interval2[0])\n  const max = Math.max(interval1[1], interval2[1])\n  return (max - min) % 1 === 0? \"YES\" : \"NO\"\n}\n\n//console.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  let result = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      return null\n    }\n    result = result * (arr[i] === 1? 1 : -1)\n  }\n  return result\n}\n\nconsole.log(prodSigsn([1, 2, 2, -4]))\nconsole.log(prodSigsn([0, 1]))\nconsole.log(prodSigsn([]))\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n\n  // check that we have a grid\n  if (n === 0 || m === 0 || n < 2 || m < 2) {\n    return [];\n  }\n\n  // initialize minPath\n  let minPath = [[1, n, n]];\n\n  // find the min path and update minPath\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      const [row, col, val] = [i, j, grid[i][j]];\n      if (val > 1) {\n        // we can reach this cell through a previous path\n        const prevPath = minPath[val - 1];\n        minPath.unshift(prevPath);\n        minPath.push([row, col, val]);\n      }\n    }\n  }\n\n  // sort the minPath by the values on the cells it goes through\n  minPath.sort((a, b) => {\n    const lstA = a[2];\n    const lstB = b[2];\n    return (lstA < lstB)? -1 : ((lstA > lstB)? 1 : 0);\n  });\n\n  // return the min path\n  return minPath[k - 1];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  if (n === 0) return []\n  let ret = [1]\n  let sum = 1\n  while (sum < n) {\n    sum = sum + sum\n    ret.push(sum)\n  }\n  return ret\n}\n\n// console.log(tir(3))\n// [1, 3, 2, 8]\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst trib = (n) => {\n  let tribs = []\n  let fib = trib(n)\n  while (fib.length > 0) {\n    tribs.push(fib.shift())\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci = (n) => {\n  let tribs = []\n  while (n > 0) {\n    tribs.unshift(trib(n)[0])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci2 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let num = trib(n)\n    tribs.unshift(num[num.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci3 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let n1 = trib(n)\n    let n2 = trib(n)\n    tribs.unshift(n2[n2.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci4 = (n) => {\n  let tribs = []\n  let n1 = trib(n)\n  let n2 = trib(n)\n  while (n > 0) {\n    tribs.unshift(n2[n2.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci5 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let n1 = trib(n)\n    let n2 = trib(n)\n    tribs.unshift(n2[n2.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci6 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let n1 = trib(n)\n    let n2 = trib(n)\n    tribs.unshift(n2[n2.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci7 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let n1 = trib(n)\n    let n2 = trib(n)\n    tribs.unshift(n2[n2.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci8 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let n1 = trib(n)\n    let n2 = trib(n)\n    tribs.unshift(n2[n2.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci9 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let n1 = trib(n)\n    let n2 = trib(n)\n    tribs.unshift(n2[n2.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci10 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let n1 = trib(n)\n    let n2 = trib(n)\n    tribs.unshift(n2[n2.length - 1])\n    n = n - 1\n  }\n  return tribs\n}\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst tribonacci11 = (n) => {\n  let tribs = []\n  while (n > 0) {\n    let n1 = trib(n)\n    let n2 = trib(n)\n    tribs.unshift"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      product *= i\n    }\n  }\n  if (n % 2 === 0) {\n    return product\n  }\n  return 0\n}\n\nexport default digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let openBrackets = 0;\n  let closedBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openBrackets++;\n    }\n    if (string[i] === ']') {\n      closedBrackets++;\n    }\n  }\n\n  return openBrackets > 0 && closedBrackets === openBrackets;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = Math.ceil(lst[i]);\n    sum += num * num;\n  }\n  return sum;\n}\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquaresRounded = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = Math.floor(lst[i]);\n    sum += num * num;\n  }\n  return sum;\n}\n\nconst sumSquaresRoundedTest = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n  console.log(sumSquaresRounded(sumSquaresRoundedTest));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim();\n  if(txt.length === 0) {\n    return false;\n  }\n  const lastChar = txt[txt.length - 1];\n  if(alphabetic(lastChar)) {\n    return!isWordChar(txt);\n  }\n  return false;\n};\n\n/*\n  Create a function that returns true if the first character of a given\n  string is an alphabetical character and is not a part of a word, and\n  false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  txt = txt.trim();\n  if(txt.length === 0) {\n    return false;\n  }\n  const firstChar = txt[0];\n  if(alphabetic(firstChar)) {\n    return!isWordChar(txt);\n  }\n  return false;\n};\n\nconst checkIfLastTwoCharsAreALetter = (txt) => {\n  txt = txt.trim();\n  if(txt.length === 0) {\n    return false;\n  }\n  const lastTwoChars = txt.substring(txt.length - 2, txt.length - 1);\n  const lastChar = lastTwoChars[0];\n  if(alphabetic(lastChar)) {\n    return!isWordChar(lastTwoChars);\n  }\n  return false;\n};\n\nconst checkIfLastTwoCharsAreALetterOrNumber = (txt) => {\n  txt = txt.trim();\n  if(txt.length === 0) {\n    return false;\n  }\n  const lastTwoChars = txt.substring(txt.length - 2, txt.length - 1);\n  const lastChar = lastTwoChars[0];\n  if(isAlphabet(lastChar)) {\n    return!isWordChar(lastTwoChars);\n  }\n  return false;\n};\n\nconst checkIfFirstTwoCharsAreALetterOrNumber = (txt) => {\n  txt = txt.trim();\n  if(txt.length === 0) {\n    return false;\n  }\n  const firstTwoChars = txt.substring(0, 2);\n  const firstChar = firstTwoChars[0];\n  if(isAlphabet(firstChar)) {\n    return!isWordChar(firstTwoChars);\n  }\n  return false;\n};\n\nconst isAlphabet = (char) => {\n  return char.match(/[a-zA-Z]/);\n};\n\nconst alphabetic = (char) => {\n  return char.match(/[a-zA-Z]/);\n};\n\nconst isDigit = (char) => {\n  return char.match(/[0-9]/);\n};\n\nconst isWordChar = (char) => {\n  return!isDigit(char);\n};\n\nexport {\n  checkIfLastCharIsALetter,\n  checkIfLastTwoCharsAreALetter,\n  checkIfLastTwoCharsAreALetterOrNumber,\n  checkIfFirstTwoCharsAreALetterOrNumber,\n  checkIfFirstCharIsALetter,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const max = arr.reduce((prev, curr) => {\n    if (prev >= curr) {\n      return curr;\n    } else {\n      return prev;\n    }\n  });\n  return max === -1? -1 : arr.indexOf(max);\n};\n\n// ##############################################################################\n\n/*\n  The given array contains only two unique elements.\n  Return the smallest of these elements.\n\n  Examples:\n  canFindSmallest([1,2]) = 1\n  canFindSmallest([4,5,6,7]) = 4\n  canFindSmallest([1,2,3]) = 1\n  canFindSmallest([1,2,3,4]) = 1\n  canFindSmallest([1,2,3,4,5]) = 1\n  canFindSmallest([1,2,3,4,5,6,7]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = 1\n  canFindSmallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const result = [];\n  const smallest = Infinity;\n  let largest = -Infinity;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < largest) {\n      largest = lst[i];\n    }\n    if (lst[i] > smallest) {\n      smallest = lst[i];\n      result.push([largest, smallest]);\n      largest = -Infinity;\n      smallest = Infinity;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = lagrestSmallestIntgeers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (isNaN(a) && isNaN(b)) return null\n  if (isNaN(a)) return b\n  if (isNaN(b)) return a\n  if (a > b) return a\n  if (a < b) return b\n  if (typeof a =='string' && typeof b =='string') return a > b? a : b\n  return a\n}\n\n/*\n  Create a function that takes two numbers, and returns the larger one.\n\n  compaerTwo(1, 2) ➞ 2\n  compaerTwo(1, 2.5) ➞ 2.5\n  compaerTwo(1, 2,3) ➞ 2\n  compaerTwo(1, 2,3,4) ➞ 2\n  compaerTwo(1, 2,3,4,5) ➞ 2\n  compaerTwo(1, \"2\") ➞ \"2\"\n  compaerTwo(\"1\", 2) ➞ 2\n  compaerTwo(\"2\", \"1\") ➞ \"2\"\n  */\nconst compaerTwo = (a, b) => {\n  if (isNaN(a) && isNaN(b)) return null\n  if (isNaN(a)) return b\n  if (isNaN(b)) return a\n  if (a > b) return a\n  if (a < b) return b\n  if (typeof a =='string' && typeof b =='string') return a > b? a : b\n  return a\n}\n\n/*\n  Create a function that takes two strings, and returns the larger one.\n\n  compaerTwo(\"1\", \"2\") ➞ \"2\"\n  compaerTwo(\"1\", \"2\",3) ➞ \"2\"\n  compaerTwo(\"1\", \"2\",3,4) ➞ \"2\"\n  compaerTwo(\"1\", \"2\",3,4,5) ➞ \"2\"\n  compaerTwo(\"1\", \"2\",3,4,5,6) ➞ \"2\"\n  compaerTwo(\"1\", \"2\",3,4,5,6,7) ➞ \"2\"\n  compaerTwo(\"1\", \"2\",3,4,5,6,7,8) ➞ \"2\"\n  compaerTwo(\"1\", \"2\",3,4,5,6,7,8,9) ➞ \"2\"\n  */\nconst compaerThree = (a, b) => {\n  if (isNaN(a) && isNaN(b)) return null\n  if (isNaN(a)) return b\n  if (isNaN(b)) return a\n  if (typeof a =='string' && typeof b =='string') return a > b? a : b\n  return a\n}\n\n/*\n  Create a function that takes two strings, and returns the smaller one.\n\n  compaerTwo(\"1\", \"2\") ➞ \"1\"\n  compaerTwo(\"1\", \"2\",3) ➞ \"1\"\n  compaerTwo(\"1\", \"2\",3,4) ➟ \"1\"\n  compaerTwo(\"1\", \"2\",3,4,5) ➟ \"1\"\n  compaerTwo(\"1\", \"2\",3,4,5,6) ➟ \"1\"\n  compaerTwo(\"1\", \"2\",3,4,5,6,7) ➟ \"1\"\n  compaerTwo(\"1\", \"2\",3,4,5,6,7,8) ➟ \"1\"\n  compaerTwo(\"1\", \"2\",3,4,5,6,7,8,9) ➟ \"1\"\n  */\nconst compaerFour = (a, b) => {\n  if (isNaN(a) && isNaN(b)) return null\n  if (isNaN(a)) return b\n  if (isNaN(b)) return a\n  if (typeof a =='string' && typeof b =='string') return a < b? a : b\n  return a\n}\n\n/*\n  Create a function that takes two numbers, and returns the smaller one.\n\n  compaerTwo(1, 2) ➟ 1\n  compaerTwo(1, 2.5) ➟ 1\n  compaerTwo(1, 2,3) ➟ 1\n  compaerTwo(1, 2,3,4) ➟ 1\n  compaerTwo(1, 2,3,4,5) ➟ 1\n  compaerTwo(1, \"2\") ➟ 1\n  compaerTwo(\"1\", 2) ➟ 1\n  compaerTwo(\"2\", \"1\") ➟ 1\n  */\nconst compaerFive = (a, b) => {\n  if (isNaN(a) && isNaN(b)) return null\n  if (isNaN(a)) return b\n  if (isNaN(b)) return a\n  if (a > b) return b\n  if (a < b) return a\n  if (typeof a =='string' && typeof b =='string') return a < b? a : b\n  return a\n}\n\n/*\n  Create a function that takes two numbers, and returns the largest one.\n\n  compaerTwo(1, 2) ➟ 2\n  compaerTwo(1, 2.5) ➟ 2.5\n  compaerTwo(1, 2,3) ➟ 2\n  compaerTwo(1, 2,3,4) ➟ 2\n  compaerTwo(1, 2,3,4,5) ➟ 2\n  compaerTwo(1, \"2\") ➟ \"2\"\n  compaerTwo(\"1\", 2) ➟ 2\n  compaerTwo(\"2\", \"1\") ➟ 2\n  */\nconst compaerSix"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n % 2 === 0 && n > 0)?\n    Array.from(new Array(Math.floor(n / 2)))\n     .every((x) => x % 2 === 0)\n      : false;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0 || n === 1) return 1;\n  return n * specialFactorial(n-1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  const spaces = /\\s+/g;\n  return text.replace(spaces, '_');\n};\n\nmodule.exports = fixSpacse;<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    return (file_name && file_name.length && file_name.length < 4 &&\n        file_name.match(/^[a-zA-Z][0-9a-zA-Z]*\\.[txt|exe|dll]$/))? 'Yes' : 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    return (file_name && file_name.length && file_name.match(/^[a-zA-Z][0-9a-zA-Z]*\\.[txt|exe|dll]$/))? 'Yes' : 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    return (file_name && file_name.length && file_name.match(/^[a-zA-Z][0-9a-zA-Z]*\\.[txt|exe|dll]$/))? 'Yes' : 'No';\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    const squared = (n) => n * n\n    const cubed = (n) => n * n * n\n    const result = lst.reduce((sum, num) => {\n        if ((num % 3) === 0) {\n            return sum += squared(num)\n        } else if ((num % 4) === 0) {\n            return sum += cubed(num)\n        } else {\n            return sum\n        }\n    }, 0)\n    return result\n}\n\nconsole.log(sumSquares([-1,-5,2,-1,-5]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n    let str = sentence.toLowerCase();\n    let num = 1;\n    while (str.length > 1) {\n        let tmp = str.length;\n        while (tmp % num!== 0) {\n            tmp = Math.floor(tmp / num);\n        }\n        if (tmp!== 1) {\n            let newStr = str.substr(0, tmp) + str.substr(tmp + 1);\n            if (newStr.length === str.length) {\n                str = newStr;\n            }\n        }\n        num++;\n    }\n    return str;\n}\n\n/*\n  You are given two strings, s1 and s2.\n  Let's say s1 is a prefix of s2.\n  Return true if it is possible to construct a string by replacing some symbols of s2 with symbols of s1.\n\n  Examples:\n      Input: s1 = \"cat\", s2 = \"abcde\"\n      Output: true\n\n  Examples:\n      Input: s1 = \"ab\", s2 = \"abcde\"\n      Output: false\n\n  Constraints:\n      * 1 <= len(s1) <= len(s2) <= 100\n      * s1 and s2 contain only letters\n*/\nconst isValid = (s1, s2) => {\n    let str = s1.toLowerCase();\n    let newStr = s2.toLowerCase();\n    let start = 0;\n    while (start < newStr.length) {\n        let j = 0;\n        while (j < str.length && str[j] === newStr[start]) {\n            j++;\n        }\n        if (j === str.length) {\n            return true;\n        }\n        start++;\n    }\n    return false;\n}\n\nmodule.exports = {\n    wrodsInSentenec,\n    isValid\n};\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  const num = Number(x);\n  const den = Number(n);\n\n  if (num === 0 || den === 0) {\n    return false;\n  }\n\n  return (num * den === num && den * num === den);\n};\n\nconsole.log(simpilfy(\"1/5\", \"5/1\"));\nconsole.log(simpilfy(\"1/6\", \"2/1\"));\nconsole.log(simpilfy(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  if (!Array.isArray(nums)) {\n    return [];\n  }\n\n  const n = nums.length;\n  if (n === 0) {\n    return [];\n  }\n\n  const sorted = nums.slice(0);\n  sorted.sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a > b? -1 : 1;\n    }\n    return diff;\n  });\n\n  return sorted;\n};\n\nmodule.exports = roderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    return nums.filter((x) => x > 10 && \n        (x % 2 === 1 || (x % 10 === 1 && x % 100!== 11)));\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n\n// TESTING\n\n/*\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const max = 0;\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const k = i + j;\n      const triple = i * i - i + 1 + j * j - j + 1;\n      if (triple % 3 === 0) {\n        max++;\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTrpiles(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    let planet = []\n    if(!(planet1 in planets)){\n        return []\n    }\n    if(!(planet2 in planets)){\n        return []\n    }\n    let jupiter = planets[planet1]\n    let neptune = planets[planet2]\n    let saturn = planet_saturn(planet1)\n    let uranus = planet_uranus(planet1)\n    let earth = planet_earth(planet1)\n    let mercury = planet_mercury(planet1)\n    let venus = planet_venus(planet1)\n    let mars = planet_mars(planet1)\n    let jupiter = planet_jupiter(planet1)\n    let saturn = planet_saturn(planet2)\n    let uranus = planet_uranus(planet2)\n    let earth = planet_earth(planet2)\n    let mercury = planet_mercury(planet2)\n    let venus = planet_venus(planet2)\n    let mars = planet_mars(planet2)\n    let jupiter = planet_jupiter(planet2)\n    planet.push(saturn)\n    planet.push(uranus)\n    planet.push(earth)\n    planet.push(mars)\n    planet.push(jupiter)\n    if(saturn.d < neptune.d){\n        planet.push(saturn)\n    }\n    if(uranus.d < neptune.d){\n        planet.push(uranus)\n    }\n    if(earth.d < neptune.d){\n        planet.push(earth)\n    }\n    if(mars.d < neptune.d){\n        planet.push(mars)\n    }\n    if(jupiter.d < neptune.d){\n        planet.push(jupiter)\n    }\n    if(saturn.d < uranus.d){\n        planet.push(saturn)\n    }\n    if(uranus.d < earth.d){\n        planet.push(uranus)\n    }\n    if(earth.d < mars.d){\n        planet.push(earth)\n    }\n    if(mars.d < jupiter.d){\n        planet.push(mars)\n    }\n    if(jupiter.d < saturn.d){\n        planet.push(jupiter)\n    }\n    if(saturn.d < uranus.d){\n        planet.push(saturn)\n    }\n    if(uranus.d < earth.d){\n        planet.push(uranus)\n    }\n    if(earth.d < mercury.d){\n        planet.push(earth)\n    }\n    if(mercury.d < venus.d){\n        planet.push(mercury)\n    }\n    if(venus.d < mars.d){\n        planet.push(venus)\n    }\n    if(mars.d < jupiter.d){\n        planet.push(mars)\n    }\n    if(jupiter.d < saturn.d){\n        planet.push(jupiter)\n    }\n    if(saturn.d < uranus.d){\n        planet.push(saturn)\n    }\n    if(uranus.d < earth.d){\n        planet.push(uranus)\n    }\n    if(earth.d < mercury.d){\n        planet.push(earth)\n    }\n    if(mercury.d < venus.d){\n        planet.push(mercury)\n    }\n    if(venus.d < mars.d){\n        planet.push(venus)\n    }\n    if(mars.d < jupiter.d){\n        planet.push(mars)\n    }\n    return planet\n}\n\nconst planet_saturn = planet => {\n    let earth = planet_earth(planet)\n    let mercury = planet_mercury(planet)\n    let venus = planet_venus(planet)\n    let mars = planet_mars(planet)\n    let jupiter = planet_jupiter(planet)\n    let saturn = {\n        d: distance_saturn(planet),\n        r: 0,\n        v: 0,\n        n: 0,\n        p: 0,\n        x: 0,\n        y: 0,\n        z: 0\n    }\n    if(saturn.d < mercury.d){\n        saturn.d = mercury.d\n    }\n    if(saturn.d < venus.d){\n        saturn.d = venus.d\n    }\n    if(saturn.d < mars.d){\n        saturn.d = mars.d\n    }\n    if(saturn.d < jupiter.d){\n        saturn.d = jupiter.d\n    }\n    if(saturn.d < earth.d){\n        saturn.d = earth.d\n    }\n    saturn.r = earth.r + (mercury.r + venus.r + mars.r + jupiter.r) / saturn.d\n    saturn.v = earth.v + (mercury.v + venus.v + mars.v + jupiter.v) / saturn.d\n    saturn.n = earth.n + (mercury.n + venus.n + mars.n + jupiter.n) / saturn.d\n    saturn.p = earth.p + (mercury.p + venus.p + mars.p + jupiter.p) / saturn.d\n    saturn"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  if (!lst ||!lst.length) return [];\n  return lst.reduce((acc, curr) => {\n    if (curr.length % 2 === 1) return acc.concat(curr);\n    return acc.concat(curr.slice(0, curr.length - 1).concat(curr.slice(curr.length - 1)));\n  }, []);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return n % 2 === 0? x : y\n}\n\nconst solution = (n) => {\n  return n === 3 || n === 5 || n === 7 || n === 11? xOrY(n, 2, 4) : xOrY(n, 3, 6)\n}\n\nconsole.log(solution(13))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let result = 0;\n  lst.forEach((num) => {\n    if (num >= 0) {\n      result += Math.pow(num, 2);\n    }\n  });\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const array = [0,0,0,0,0,0];\n  let i;\n  let j;\n  for (i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      array[i] = 0;\n    } else {\n      array[i] = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return array;\n};\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  const sortedExtensions = extensions.sort((a, b) => (a.length - b.length));\n  for (let extension of sortedExtensions) {\n    strength += getStrength(extension);\n  }\n  return `${class_name}.${sortedExtensions[0]}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  const aS = a.split(\"\").reverse().join(\"\");\n  const bS = b.split(\"\").reverse().join(\"\");\n  if (aS === bS) {\n    return true;\n  } else {\n    const r = [];\n    let i = 0;\n    while (i < bS.length) {\n      const c = bS[i];\n      if (a.includes(c)) {\n        r.push(c);\n      }\n      i++;\n    }\n    if (r.length > 0) {\n      return true;\n    }\n    i = 0;\n    while (i < aS.length) {\n      const c = aS[i];\n      if (r.includes(c)) {\n        r.reverse();\n        return true;\n      }\n      i++;\n    }\n    return false;\n  }\n};\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\" << \",\" << \"\\\"\" << p1 << \"\\\"\";\n\tcout << \"]\" << endl;\n\tbool answer;\n\tstring result;\n\tanswer = ccypatternChekc(p0, p1);\n\tresult = (answer? \"true\" : \"false\");\n\tif (hasAnswer) {\n\t\tcout << \"=========================\" << endl;\n\t\tcout << \"Is \" << p0 << \" a ccypattern of \" << p1 << \"? \" << result << endl;\n\t} else {\n\t\tcout << \"==========================\" << endl;\n\t\tcout << \"Is \" << p0 << \" a ccypattern of \" << p1 << \"? \" << result << endl;\n\t}\n\tif (hasAnswer) {\n\t\tcout << \"=========================\" << endl;\n\t\tcout << \"Is \" << p1 << \" a ccypattern of \" << p0 << \"? \" << result << endl;\n\t} else {\n\t\tcout << \"==========================\" << endl;\n\t\tcout << \"Is \" << p1 << \" a ccypattern of \" << p0 << \"? \" << result << endl;\n\t}\n\tif (hasAnswer) {\n\t\tcout << \"=========================\" << endl;\n\t\tcout << \"What is \" << p0 << \"'s ccypattern? \" << endl;\n\t\tcout << \"Answer: \" << endl;\n\t\tcout << p2 << endl;\n\t} else {\n\t\tcout << \"==========================\" << endl;\n\t\tcout << \"What is \" << p0 << \"'s ccypattern? \" << endl;\n\t\tcout << \"Answer: \" << endl;\n\t\tcout << \"No answer. \" << endl;\n\t}\n\tif (hasAnswer) {\n\t\tcout << \"Correct answer:\" << endl;\n\t\tcout << \"\\\"\" << p2 << \"\\\"\" << endl;\n\t}\n\treturn hasAnswer;\n}\nint main(int argc, char * argv[]) {\n\tstring t0;\n\tstring t1;\n\tstring t2;\n\tbool hasAnswer;\n\tt0 = \"abcd\";\n\tt1 = \"abd\";\n\tt2 = \"false\";\n\thasAnswer = KawigiEdit_RunTest(1, t0, t1, true, t2);\n\tif (hasAnswer) {\n\t\tcout << \"ok\" << endl;\n\t} else {\n\t\tcout << \"oops\" << endl;\n\t}\n\tt0 = \"hello\";\n\tt1 = \"ell\";\n\tt2 = \"true\";\n\thasAnswer = KawigiEdit_RunTest(2, t0, t1, true, t2);\n\tif (hasAnswer) {\n\t\tcout << \"ok\" << endl;\n\t} else {\n\t\tcout << \"oops\" << endl;\n\t}\n\tt0 = \"whassup\";\n\tt1 = \"psus\";\n\tt2 = \"false\";\n\thasAnswer = KawigiEdit_RunTest(3, t0, t1, true, t2);\n\tif (hasAnswer) {\n\t\tcout << \"ok\" << endl;\n\t} else {\n\t\tcout << \"oops\" << endl;\n\t}\n\tt0 = \"abab\";\n\tt1 = \"baa\";\n\tt2 = \"true\";\n\thasAnswer = KawigiEdit_RunTest(4, t0, t1, true, t2);\n\tif (hasAnswer) {\n\t\tcout << \"ok\" << endl;\n\t} else {\n\t\tcout << \"oops\" << endl;\n\t}\n\tt0 = \"efef\";\n\tt1 = \"eeff\";\n\tt2 = \"false\";\n\thasAnswer = KawigiEdit_RunTest(5, t0, t1, true, t2);\n\tif (hasAnswer) {\n\t\tcout << \"ok\" << endl;\n\t} else {\n\t\tcout << \"oops\" << endl;\n\t}\n\tt0 = \"himenss\";\n\tt1 = \"simen\";\n\tt2 = \"true\";\n\thasAnswer = KawigiEdit_RunTest(6, t0, t1, true, t2);\n\tif (hasAnswer) {\n\t\tcout << \"ok\" << endl;\n\t} else {\n\t\tcout << \"oops\" << endl;\n\t}\n\treturn 0;\n}\n// END KAWIGIEDIT TESTING\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let odd = 1;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      num = num / 2;\n      even++;\n    } else {\n      num = num - 1;\n      odd++;\n    }\n  }\n  return (odd, even);\n};\n\nexport default evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  let roman = ['i', 'v', 'x', 'l', 'c', 'd','m']\n  let roman_number = 1\n  let result = ''\n  while (number > 0) {\n    if (number >= roman_number * 2) {\n      result += roman[roman_number - 1]\n      number -= roman_number\n    } else if (number >= roman_number * 5) {\n      result += roman[roman_number - 2]\n      number -= roman_number * 2\n    } else if (number >= roman_number * 10) {\n      result += roman[roman_number - 3]\n      number -= roman_number * 5\n    } else if (number >= roman_number * 40) {\n      result += roman[roman_number - 4]\n      number -= roman_number * 10\n    } else if (number >= roman_number * 100) {\n      result += roman[roman_number - 5]\n      number -= roman_number * 40\n    } else if (number >= roman_number * 500) {\n      result += roman[roman_number - 6]\n      number -= roman_number * 100\n    } else if (number >= roman_number * 1000) {\n      result += roman[roman_number - 7]\n      number -= roman_number * 500\n    }\n    roman_number++\n  }\n  return result.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) return false;\n  if (a == b || a == c || b == c) return true;\n  const d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n  return Math.abs(Math.acos((a * b) / d) + Math.acos((b * c) / d) + Math.acos((c * a) / d)) == Math.PI / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the triangle\n  is equilateral, false otherwise.\n  A triangle is equilateral if its sides are equal.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) return false;\n  if (a == b || a == c || b == c) return true;\n  return (Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) == Math.pow(a + b + c, 2);\n};\n\nconst isRightAngledTriangle = (a, b, c) => {\n  return rightAngelTriangle(a, b, c) && equilateralTriangle(a, b, c);\n};\n\n/*\n Given a triangle with the first and last angles equal. Return the third angle.\n  A triangle with the first and last angles equal is a right angled triangle.\n  Example:\n  triangleWithEqualFirstAndLastAngles(1, 2, 3) == 2\n  triangleWithEqualFirstAndLastAngles(3, 4, 5) == 4\n  */\nconst triangleWithEqualFirstAndLastAngles = (a, b, c) => {\n  return (b + c) / 2;\n};\n\nconst isEquilateralTriangle = (a, b, c) => {\n  return equilateralTriangle(a, b, c) && triangleWithEqualFirstAndLastAngles(a, b, c);\n};\n\n/*\n Given the length of a side of a triangle. Return the length of the opposite side\n  of the triangle.\n  A triangle with the first and last angles equal is a right angled triangle.\n  Example:\n  triangleLengthOfOppositeSide(3) == 3\n  triangleLengthOfOppositeSide(1) == 4\n  */\nconst triangleLengthOfOppositeSide = (a) => {\n  return a / 2;\n};\n\nconst isRightAngledTriangle = (a, b, c) => {\n  return rightAngelTriangle(a, b, c) && triangleWithEqualFirstAndLastAngles(a, b, c) && triangleLengthOfOppositeSide(a) == b;\n};\n\n/*\n Given the length of a side of a triangle. Return the length of the opposite side\n  of the triangle.\n  A triangle with the first and last angles equal is a right angled triangle.\n  Example:\n  triangleLengthOfOppositeSide(3) == 3\n  triangleLengthOfOppositeSide(1) == 4\n  */\nconst triangleLengthOfOppositeSide = (a) => {\n  return a / 2;\n};\n\nconst isEquilateralTriangle = (a, b, c) => {\n  return equilateralTriangle(a, b, c) && triangleWithEqualFirstAndLastAngles(a, b, c) && triangleLengthOfOppositeSide(a) == b;\n};\n\nconst triangleLengthOfOppositeSide = (a) => {\n  return a / 2;\n};\n\nconst isRightAngledTriangle = (a, b, c) => {\n  return rightAngelTriangle(a, b, c) && triangleWithEqualFirstAndLastAngles(a, b, c) && triangleLengthOfOppositeSide(a) == b;\n};\n\n/*\n Given the length of a side of a triangle. Return the length of the opposite side\n  of the triangle.\n  A triangle with the first and last angles equal is a right angled triangle.\n  Example:\n  triangleLengthOfOppositeSide(3) == 3\n  triangleLengthOfOppositeSide(1) == 4\n  */\nconst triangleLengthOfOppositeSide = (a) => {\n  return a / 2;\n};\n\nconst isEquilateralTriangle = (a, b, c) => {\n  return equilateralTriangle(a, b, c) && triangleWithEqualFirstAndLastAngles(a, b, c) && triangleLengthOfOppositeSide(a) == b;\n};\n\nconst triangleLengthOfOppositeSide = (a) => {\n  return a / 2;\n};\n\nconst isRightAngledTriangle = (a, b, c) => {\n  return rightAngelTriangle(a, b, c) && triangleWithEqualFirstAndLastAngles(a, b, c) && triangleLengthOfOppositeSide(a) == b;\n};\n\nconst triangleLengthOfOppositeSide = (a) => {\n  return a / 2;\n};\n\nconst isEquilateralTriangle = (a, b, c) => {\n  return equilateralTriangle(a, b, c) && triangleWithEqualFirstAndLastAngles(a, b, c) && triangleLengthOfOppositeSide(a) == b;\n};\n\nconst triangleLengthOfOppositeSide = (a) => {\n  return a / 2;\n};\n\nconst isRightAngledTriangle = (a, b, c) => {\n  return rightAngelTriangle(a, b, c) && triangleWithEqualFirstAndLastAngles(a, b, c) && triangleLengthOfOppositeSide(a) == b;\n};\n\nconst triangleLengthOfOppositeSide = (a) => {\n  return a / 2;\n};\n\nconst isEquilateralTriangle = (a, b, c) => {\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const uniqueChars = words.map((str) => {\n    return str.split('').reduce((memo, char) => {\n      if (memo[char]) {\n        return memo;\n      } else {\n        memo[char] = true;\n        return memo;\n      }\n    }, {});\n  });\n\n  const max = words.reduce((memo, str) => {\n    let found = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (uniqueChars[str[i]] && (memo.length < found)) {\n        memo = str;\n        found = memo.length;\n      }\n    }\n    return memo;\n  }, \"\");\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number >= need) {\n        return [number, remaining];\n    } else {\n        return [remaining, need - number];\n    }\n};\n\nconsole.log(eat(3, 4, 7));\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length - 1; i++) {\n    let current = operand[i];\n    let next = operand[i + 1];\n    result += operator[i + 1][0] * current;\n  }\n  let current = operand[operand.length - 1];\n  result += operator[operand.length - 1][0] * current;\n  return result;\n};\n\nconst evalAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let current = operand[i];\n    result += operator[i][1] * current;\n  }\n  return result;\n};\n\nconst doOperation = (operator, operand) => {\n  if (operand.length === 1) {\n    return evalAlgebra(operator, operand);\n  }\n  return doAlgebra(operator, operand);\n};\n\nconst doSum = (operand) => {\n  return doOperation([], operand);\n};\n\nconst doSub = (operand) => {\n  return doOperation([], operand);\n};\n\nconst doMult = (operand) => {\n  return doOperation([], operand);\n};\n\nconst doDiv = (operand) => {\n  return doOperation([], operand);\n};\n\nconst doExp = (operand) => {\n  return doOperation([], operand);\n};\n\nconst doAlgebricExpression = (operand) => {\n  let result = doOperation([], operand);\n  let last = operand[operand.length - 1];\n  if (typeof last === 'number') {\n    result = result.toString();\n  }\n  return result;\n};\n\nconst evalAlgebraExpression = (operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let current = operand[i];\n    result += current;\n  }\n  return result;\n};\n\nconst doAlgebraExpression = (operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let current = operand[i];\n    let next = operand[i + 1];\n    result += current * next;\n  }\n  return result;\n};\n\nconst doAddition = (operand) => {\n  return doAlgebraExpression(operand);\n};\n\nconst doSubtraction = (operand) => {\n  return doAlgebraExpression(operand);\n};\n\nconst doMultiplication = (operand) => {\n  return doAlgebraExpression(operand);\n};\n\nconst doFloorDivision = (operand) => {\n  return doAlgebraExpression(operand);\n};\n\nconst doExponentiation = (operand) => {\n  return doAlgebraExpression(operand);\n};\n\nconst doAlgebraOperator = (operator, operand) => {\n  return doOperation([operator], operand);\n};\n\nconst doAdditionOperator = (operand) => {\n  return doAlgebraOperator('+', operand);\n};\n\nconst doSubtractionOperator = (operand) => {\n  return doAlgebraOperator('-', operand);\n};\n\nconst doMultiplicationOperator = (operand) => {\n  return doAlgebraOperator('*', operand);\n};\n\nconst doFloorDivisionOperator = (operand) => {\n  return doAlgebraOperator('//', operand);\n};\n\nconst doExponentiationOperator = (operand) => {\n  return doAlgebraOperator('**', operand);\n};\n\nconst doAlgebraOperators = (operand) => {\n  return [\n    [doAddition, '+', '+'],\n    [doSubtraction, '-', '-'],\n    [doMultiplication, '*', '*'],\n    [doFloorDivision, '//', '//'],\n    [doExponentiation, '**', '**']\n  ].map(([operator, operator, operator]) => {\n    return operator;\n  });\n};\n\nconst doOperationOperators = (operand) => {\n  return [\n    [doAdditionOperator, '+'],\n    [doSubtractionOperator, '-'],\n    [doMultiplicationOperator, '*'],\n    [doFloorDivisionOperator, '//'],\n    [doExponentiationOperator, '**']\n  ].map(([operator, operator]) => {\n    return operator;\n  });\n};\n\nconst evalAlgebraOperators = (operand) => {\n  return evalAlgebra(doAlgebraOperators(operand), doAlgebraOperator(operand));\n};\n\nconst evalAlgebraOperatorsExpression = (operand) => {\n  return evalAlgebraExpression(doAlgebraOperators(operand));\n};\n\nconst doAlgebraOperatorsExpression = (operand) => {\n  return evalAlgebra(doAlgebraOperatorsExpression(operand), doAlgebraOperator(operand));\n};\n\nconst evalAlgebraOperatorsExpression = (operand) => {\n  return evalAlgebraExpression(doAlgebraOperatorsExpression(operand));\n};\n\nconst doAdditionOperators"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  if(s.length === 0) return s;\n  const s1 = s.split('');\n  s1.reverse();\n  return s1.join('');\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (!text) {\n        return null\n    }\n    return crypto.createHash('md5').update(text).digest('hex')\n}\n\nconst hashToHex = (text) => {\n    if (!text) {\n        return null\n    }\n    return crypto.createHash('md5').update(text).digest('hex')\n}\n\nconst getHash = (text, algorithm) => {\n    if (!text) {\n        return null\n    }\n    return crypto.createHash(algorithm).update(text).digest('hex')\n}\n\nconst md5Hex = (text) => {\n    return hashToHex(stringToMd5(text))\n}\n\nconst hashHex = (text, algorithm) => {\n    return getHash(text, algorithm)\n}\n\nconst getMd5 = (text) => {\n    return stringToMd5(text)\n}\n\nconst hashMd5 = (text, algorithm) => {\n    return getHash(text, algorithm)\n}\n\nmodule.exports = {\n    md5Hex,\n    hashHex,\n    hashMd5,\n    getMd5,\n    getHash,\n    hashToHex\n}<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i);\n  }\n  return arr.filter(n => n % 2 === 0);\n}\n\nconsole.log(generateIntegers(2, 8));\n<|endoftext|>"}
