{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  const array = Array.from(numbers);\n  const result = array.reduce((a, b) => {\n    const difference = Math.abs(a - b);\n    if (difference < threshold) {\n      return a;\n    }\n    return b;\n  });\n  return result!== a;\n};\n\nmodule.exports = hadClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  let open_braces = 0;\n  let paren_list = [];\n  paren_string = paren_string.replace(/\\(|\\)/g, '');\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      open_braces += 1;\n    } else if (paren_string[i] === ')') {\n      open_braces -= 1;\n    }\n    if (open_braces === 0) {\n      paren_list.push(paren_string.substr(i + 1));\n      paren_string = paren_string.substr(0, i);\n    }\n  }\n  return paren_list;\n};\n\nmodule.exports = separateParenGroup;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const x = Math.floor(number);\n  const decimal = number - x;\n  return decimal;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const x = Math.floor(number);\n  return x;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> truncateNumber(3.5)\n  4\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> round(3.5)\n  4\n  */\nconst roundUp = (number) => {\n  return Math.ceil(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundUp(3.5)\n  4\n  */\nconst roundDown = (number) => {\n  return Math.floor(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundDown(3.5)\n  3\n  */\nconst roundToNearestInteger = (number) => {\n  return Math.round(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundToNearestInteger(3.5)\n  3\n  */\nconst roundToNearestIntegerUp = (number) => {\n  return Math.ceil(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundToNearestIntegerUp(3.5)\n  4\n  */\nconst roundToNearestIntegerDown = (number) => {\n  return Math.floor(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundToNearestIntegerDown(3.5)\n  3\n  */\nconst roundToNearestIntegerExact = (number) => {\n  return Math.round(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundToNearestIntegerExact(3.5)\n  3\n  */\nconst roundToNearestIntegerExactUp = (number) => {\n  return Math.ceil(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundToNearestIntegerExactUp(3.5)\n  4\n  */\nconst roundToNearestIntegerExactDown = (number) => {\n  return Math.floor(number);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundToNearestIntegerExactDown(3.5)\n  3\n  */\nconst roundToNearestIntegerExactDownHalfUp = (number) => {\n  return Math.round(number * 2) / 2;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number, rounded to the nearest integer.\n  >>> roundToNearestIntegerExactDownHalfUp(3.5)\n  3\n  */\nconst roundToNearestIntegerExactDownHalfDown = (number) => {\n  return Math.round(number * 2) / 2;\n};\n\nexport { truncateNumber, truncateInteger, round, roundUp, roundDown, roundToNearestInteger, roundToNearestIntegerUp, roundToNearestIntegerDown, roundToNearestIntegerExact, roundToNearestIntegerExactUp, roundToNearestIntegerExactDown, roundToNearestIntegerExactDownHalfUp, roundToNearestIntegerExactDownHalfDown };\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  const add = (number1, number2) => {\n    return number1 + number2;\n  };\n  const subtract = (number1, number2) => {\n    return number1 - number2;\n  };\n  const addAndSubtract = (number1, number2) => {\n    return add(number1, number2) - subtract(number1, number2);\n  };\n  const isBelowZero = (number) => {\n    return addAndSubtract(number, number) < 0;\n  };\n  const isBelowZeroBy = (number, n) => {\n    return isBelowZero(number)? true : isBelowZero(number + n);\n  };\n  return isBelowZero(operations);\n};\n\n/*\n  Your task is to implement a method that takes an array of integers. The method should return a boolean\n  value indicating whether the array contains an even number of elements.\n  >>> evenNumber([]);\n  false\n  >>> evenNumber([1, 2, 3, 4]);\n  true\n  >>> evenNumber([1, 2, 3, 4, 5]);\n  false\n  */\nconst evenNumber = (array) => {\n  const sum = array.reduce((previousSum, currentSum) => {\n    return previousSum + currentSum;\n  }, 0);\n  return sum % 2 === 0;\n};\n\nmodule.exports = {\n  belowZeros,\n  evenNumber\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviationSum);\n};\n\n/*\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0\n  */\nconst meanerAbsolutesDeviation2 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation3 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.max(...deviationSum);\n};\n\nconst meanerAbsolutesDeviation4 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.min(...deviationSum);\n};\n\n/*\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0\n  */\nconst meanerAbsolutesDeviation5 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation6 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation7 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation8 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation9 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation10 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation11 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation12 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation13 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation14 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation15 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation16 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation17 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation18 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation19 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation20 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation21 = (numbers) => {\n  const mean = getMean(numbers);\n  const deviationSum = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviationSum);\n};\n\nconst meanerAbsolutesDeviation22 = (n"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let i = 0\n  let j = 0\n  const length = numbers.length\n  const result = []\n  while (i < length) {\n    if (i!== 0 && i!== length - 1) {\n      result.push(numbers[i] + delimeter)\n    }\n    result.push(numbers[i])\n    i += 1\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, \"x\")\n  [1x4x2x4x3]\n  >>> intersperse([1, 2, 3], 4, \"x\", \"y\")\n  [1x4x2x4x3]\n  */\nconst intersperse2 = (numbers, delimeter, delimiter) => {\n  let i = 0\n  let j = 0\n  const length = numbers.length\n  const result = []\n  while (i < length) {\n    if (i!== 0 && i!== length - 1) {\n      result.push(numbers[i] + delimiter)\n    }\n    result.push(numbers[i])\n    i += 1\n  }\n  return result\n}\n\nmodule.exports = {\n  intersperse,\n  intersperse2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  let stack = [],\n    current_nesting = 1,\n    paren_index = 0;\n\n  while (paren_index < paren_string.length) {\n    const curr = paren_string[paren_index];\n    if (curr === ')') {\n      current_nesting--;\n      if (stack.length > 0) {\n        stack.pop();\n      }\n    } else if (curr === '(') {\n      stack.push(current_nesting);\n      current_nesting++;\n    }\n    paren_index++;\n  }\n\n  return stack;\n};\n\nmodule.exports = parseNestParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) >= 0);\n};\n\nexport { filterBySubstring };\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  const totalSum = numbers.reduce((prev, current) => prev + current, 0);\n  const totalProduct = numbers.reduce((prev, current) => prev * current, 1);\n  return [totalSum, totalProduct];\n};\n\nconst main = () => {\n  console.log(sumProducts([1, 2, 3, 4]));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let current = 0;\n  let max = -Infinity;\n\n  while (numbers.length) {\n    const value = numbers.pop();\n\n    if (value > max) {\n      max = value;\n      current = 1;\n    } else if (value === max) {\n      current++;\n    }\n  }\n\n  return current;\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const len = string.length;\n  let prefix = string;\n  let suffix = string;\n  if (isPalindrome(prefix)) return prefix;\n\n  while (!isPalindrome(suffix = suffix.concat(string.slice(0, -len))) && len > 1) {\n    prefix = prefix.slice(0, -len);\n  }\n\n  return prefix + string.split('').reverse().join('');\n}\n\nmodule.exports = {\n  isPalindrome,\n  makePalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = a.length\n  let i = 0, j = 0\n  const result = []\n\n  while (i < len && j < len) {\n    if (a[i] === b[j]) {\n      result.push(a[i])\n      i += 1\n      j += 1\n    } else if (a[i] === 1) {\n      result.push(b[j])\n      j += 1\n    } else {\n      result.push(1)\n      i += 1\n    }\n  }\n\n  while (i < len) {\n    result.push(a[i])\n    i += 1\n  }\n\n  while (j < len) {\n    result.push(b[j])\n    j += 1\n  }\n\n  return result.join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (!strings) {\n    return null\n  }\n  if (strings.length === 1) {\n    return strings[0]\n  }\n  for (let i = 0; i < strings.length; i++) {\n    let longest = strings[i]\n    let current = strings[i + 1]\n    while (current && longest.length > current.length) {\n      longest = current\n      i++\n      current = strings[i + 1]\n    }\n    if (longest!== current) {\n      return longest\n    }\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n    let gcd = 1;\n    if (a === b) return a;\n    while (b > 0) {\n        const remainder = a % b;\n        gcd = b;\n        a = remainder;\n        b = a;\n    }\n    return gcd;\n};\n\n/* Return the greatest common divisor of a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (a === b) return a;\n    return greatestCommonDivisor(a, b % a);\n};\n\n/* Return the product of two integers\n  >>> product(2, 3)\n  6\n  >>> product(3, 4)\n  12\n  >>> product(3, 4, 5)\n  45\n  */\nconst product = (a, b) => a * b;\n\n/* Return the smallest number that is greater than or equal to a\n  >>> nextUp(1)\n  2\n  >>> nextUp(2)\n  3\n  >>> nextUp(3)\n  4\n  >>> nextUp(4)\n  5\n  >>> nextUp(5)\n  6\n  >>> nextUp(6)\n  7\n  */\nconst nextUp = (a) => {\n    let b = a + 1;\n    while (b < a) b += 1;\n    return b;\n};\n\n/* Return the smallest number that is less than or equal to a\n  >>> nextDown(1)\n  1\n  >>> nextDown(2)\n  1\n  >>> nextDown(3)\n  2\n  >>> nextDown(4)\n  2\n  >>> nextDown(5)\n  3\n  >>> nextDown(6)\n  3\n  >>> nextDown(7)\n  3\n  */\nconst nextDown = (a) => {\n    let b = a - 1;\n    while (b > a) b -= 1;\n    return b;\n};\n\n/* Return the sum of a and b\n  >>> sum(1, 2)\n  3\n  >>> sum(1, 2, 3)\n  6\n  >>> sum(1, 2, 3, 4)\n  9\n  >>> sum(1, 2, 3, 4, 5)\n  12\n  >>> sum(1, 2, 3, 4, 5, 6)\n  15\n  */\nconst sum = (a, b) => a + b;\n\n/* Return the difference of a and b\n  >>> difference(1, 2)\n  1\n  >>> difference(1, 2, 3)\n  2\n  >>> difference(1, 2, 3, 4)\n  3\n  >>> difference(1, 2, 3, 4, 5)\n  4\n  >>> difference(1, 2, 3, 4, 5, 6)\n  5\n  */\nconst difference = (a, b) => a - b;\n\n/* Return the quotient of a and b\n  >>> quotient(1, 2)\n  0\n  >>> quotient(1, 2, 3)\n  1\n  >>> quotient(1, 2, 3, 4)\n  1\n  >>> quotient(1, 2, 3, 4, 5)\n  1\n  >>> quotient(1, 2, 3, 4, 5, 6)\n  1\n  */\nconst quotient = (a, b) => a / b;\n\n/* Return the remainder of a divided by b\n  >>> remainder(1, 2)\n  1\n  >>> remainder(1, 2, 3)\n  0\n  >>> remainder(1, 2, 3, 4)\n  0\n  >>> remainder(1, 2, 3, 4, 5)\n  0\n  >>> remainder(1, 2, 3, 4, 5, 6)\n  0\n  */\nconst remainder = (a, b) => a % b;\n\n/* Return the absolute value of a\n  >>> abs(1)\n  1\n  >>> abs(-1)\n  1\n  >>> abs(2)\n  2\n  >>> abs(3)\n  3\n  >>> abs(-3)\n  3\n  >>> abs(0)\n  0\n  >>> abs(Infinity)\n  Infinity\n  >>> abs(-Infinity)\n  Infinity\n  */\nconst abs = (a) => Math.abs(a);\n\n/* Return the ceiling of a number\n  >>> ceiling(1)\n  1\n  >>> ceiling(2)\n  2\n  >>> ceiling(3)\n  3\n  >>> ceiling(4)\n  4\n  >>> ceiling(5)\n  5\n  >>> ceiling(6)\n  6\n  >>> ceiling(7)\n  7\n  >>> ceiling(8)\n  8\n  >>> ceiling(9)\n  9\n  >>> ceiling(10)\n  10\n  >>> ceiling(11)\n  11\n  >>> ceiling(12)\n  12\n  >>> ceiling(13)\n  13\n  >>> ceiling(14)\n  14\n  >>> ceiling(15)\n  15\n  >>> ceiling(16)\n  16\n  >>> ceiling(17)\n  17\n  >>> ceiling(18)\n  18\n  >>> ceiling(19)\n  19\n  >>> ceiling(20)\n  20\n  >>> ceiling(21)\n  21\n  >>> ceiling(22)\n  22\n  >>> ceiling(23)\n  23\n  >>> ceiling(24)\n  24\n  >>> ceiling(25)\n  25\n  >>> ceiling(26)\n  26\n  >>> ceiling(27)\n  27\n  >>> ceiling(28)\n  28\n  >>> ceiling(29)\n  29\n  >>> ceiling(30)\n  30\n  >>> ceiling(31)\n  31\n  >>> ceiling(32)\n  32\n  >>> ceiling(33)\n  33\n  >>> ceiling(34)\n  34\n  >>> ceiling(35)\n  35\n  >>> ceiling(36)\n  36\n  >>> ceiling(37)\n  37\n  >>> ceiling(38)\n  38\n  >>> ceiling(39)\n  39\n  >>> ceiling(40)\n  40\n  >>> ceiling(41)\n  41\n  >>> ceiling(42)\n  42\n  >>> ceiling(43)\n  43\n  >>> ceiling(44)\n  "}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const index = 0;\n  let length = string.length;\n  while (length > 0) {\n    const subString = string.substr(index, length);\n    const prefix = subString.split('').join('');\n    prefixes.push(prefix);\n    length = length - 1;\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const index = 0;\n  let length = string.length;\n  while (length > 0) {\n    const subString = string.substr(index, length);\n    const suffix = subString.split('').join('');\n    suffixes.push(suffix);\n    length = length - 1;\n  }\n  return suffixes;\n};\n\n/**\n  * Return all permutations of the input string\n  >>> allPermutations('abc')\n  ['ab', 'ac', 'ad', 'bc', 'bd', 'cd', 'abc', 'bdc', 'adc', 'abcd']\n  */\nconst allPermutations = (string) => {\n  const permutations = [];\n  const index = 0;\n  let length = string.length;\n  while (length > 0) {\n    const subString = string.substr(index, length);\n    const permutation = subString.split('').join('');\n    permutations.push(permutation);\n    length = length - 1;\n  }\n  return permutations;\n};\n\n/**\n  * Return all permutations of the input string\n  >>> allCombinations('abc')\n  ['', 'a', 'ab', 'abc', 'ba', 'bac', 'bca', 'cab', 'cba', 'abc', 'baa', 'bcc', 'ccb', 'cac', 'cda', 'dda', 'dcc', 'ddc']\n  */\nconst allCombinations = (string) => {\n  const combinations = [];\n  const index = 0;\n  let length = string.length;\n  while (length > 0) {\n    const subString = string.substr(index, length);\n    const combination = subString.split('').join('');\n    combinations.push(combination);\n    length = length - 1;\n  }\n  return combinations;\n};\n\n/**\n  * Return list of all permutations of the input string\n  >>> allCombinations('abc')\n  ['', 'a', 'ab', 'abc', 'ba', 'bac', 'bca', 'cab', 'cba', 'abc', 'baa', 'bcc', 'ccb', 'cac', 'cda', 'dda', 'dcc', 'ddc']\n  */\nconst allCombinations = (string) => {\n  const combinations = [];\n  const index = 0;\n  let length = string.length;\n  while (length > 0) {\n    const subString = string.substr(index, length);\n    const combination = subString.split('').join('');\n    combinations.push(combination);\n    length = length - 1;\n  }\n  return combinations;\n};\n\n/**\n  * Return list of all permutations of the input string\n  >>> allCombinations('abc')\n  ['', 'a', 'ab', 'abc', 'ba', 'bac', 'bca', 'cab', 'cba', 'abc', 'baa', 'bcc', 'ccb', 'cac', 'cda', 'dda', 'dcc', 'ddc']\n  */\nconst allCombinations = (string) => {\n  const combinations = [];\n  const index = 0;\n  let length = string.length;\n  while (length > 0) {\n    const subString = string.substr(index, length);\n    const combination = subString.split('').join('');\n    combinations.push(combination);\n    length = length - 1;\n  }\n  return combinations;\n};\n\n/**\n  * Return list of all permutations of the input string\n  >>> allCombinations('abc')\n  ['', 'a', 'ab', 'abc', 'ba', 'bac', 'bca', 'cab', 'cba', 'abc', 'baa', 'bcc', 'ccb', 'cac', 'cda', 'dda', 'dcc', 'ddc']\n  */\nconst allCombinations = (string) => {\n  const combinations = [];\n  const index = 0;\n  let length = string.length;\n  while (length > 0) {\n    const subString = string.substr(index, length);\n    const combination = subString.split('').join('');\n    combinations.push(combination);\n    length = length - 1;\n  }\n  return combinations;\n};\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allPermutations,\n  allCombinations,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = []\n  const start = () => 0\n  const end = () => n\n  const step = (x) => x + 1\n  const run = (x) => `${x} `\n  const toStr = () => `${end()}`\n  const toArray = () => new Array(end())\n  const toArray2 = () => Array.from(toArray())\n\n  while (end() > 0) {\n    result.push(run())\n    end() -= step()\n  }\n\n  return result.join('')\n}\n\n/* Return the number of unique permutations of the given list.\n  >>> countPermutations([1,2,3])\n  6\n  >>> countPermutations([1,2,3,4,5,6,7,8,9])\n  362880\n  >>> countPermutations([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n  6.4790000041000004\n  */\nconst countPermutations = (list) => {\n  const permutations = []\n  const size = list.length\n  const run = (x) => x + 1\n  const runPermutations = (x) => {\n    if (size > 0) {\n      return permutations.reduce((acc, current) => {\n        const left = run(x)\n        const right = runPermutations(x + 1)\n        const leftRight = current.concat(list.slice(x, size))\n        return acc.concat(leftRight).concat(left + right)\n      }, [])\n    } else {\n      return permutations.concat(list)\n    }\n  }\n\n  return permutations.reduce((acc, current) => {\n    return acc.concat(current)\n  }, runPermutations([0]))\n}\n\n/* Return a list of lists of integers.\n  >>> permutations([1,2,3,4,5])\n  [[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3], [1, 2, 5, 3, 4], [1, 2, 5, 4, 3], [1, 4, 2, 3, 5], [1, 4, 2, 5, 3], [1, 4, 3, 2, 5], [1, 4, 3, 5, 2], [1, 4, 5, 2, 3], [1, 4, 5, 3, 2], [1, 5, 2, 3, 4], [1, 5, 2, 4, 3], [1, 5, 3, 2, 4], [1, 5, 3, 4, 2], [1, 5, 4, 2, 3], [1, 5, 4, 3, 2], [2, 1, 3, 4, 5], [2, 1, 3, 5, 4], [2, 1, 4, 3, 5], [2, 1, 4, 5, 3], [2, 1, 5, 3, 4], [2, 1, 5, 4, 3], [2, 4, 1, 3, 5], [2, 4, 1, 5, 3], [2, 4, 3, 1, 5], [2, 4, 3, 5, 1], [2, 4, 5, 1, 3], [2, 4, 5, 3, 1], [2, 5, 1, 3, 4], [2, 5, 1, 4, 3], [2, 5, 3, 1, 4], [2, 5, 3, 4, 1], [2, 5, 4, 1, 3], [2, 5, 4, 3, 1], [3, 1, 2, 4, 5], [3, 1, 2, 5, 4], [3, 1, 4, 2, 5], [3, 1, 4, 5, 2], [3, 1, 5, 2, 4], [3, 1, 5, 4, 2], [3, 4, 1, 2, 5], [3, 4, 1, 5, 2], [3, 4, 2, 1, 5], [3, 4, 2, 5, 1], [3, 4, 5, 1, 2], [3, 4, 5, 2, 1], [3, 5, 1, 2, 4], [3, 5, 1, 4, 2], [3, 5, 2, 1, 4], [3, 5, 2, 4, 1], [3, 5, 4, 1, 2], [3, 5, 4, 2, 1], [4, 1, 2, 3, 5], [4, 1, 2, 5, 3], [4, 1, 3, 2, 5], [4, 1, 3, 5, 2], [4, 1, 5, 2, 3], [4, 1, 5, 3, 2], [4, 2, 1, 3, 5], [4, 2, 1, 5, 3], [4, 2, 3, 1, 5], [4, 2, 3, 5, 1], [4, 2, 5, 1, 3], [4, 2, 5, 3, 1], [4, 3, 1, 2, 5], [4, 3, 1, 5, 2], [4, 3, 2, 1, 5], [4, 3, 2, 5, 1], [4, 3, 5, 1, 2], [4, 3, 5, 2, 1], [4, 5, 1, 2, 3], [4, 5, 1, 3, 2], [4, 5, 2, 1, 3], [4, 5, 2, 3, 1], [4, 5, 3, 1, 2], [4, 5, 3, 2, 1], [5, 1, 2, 3, 4], [5, 1, 2, 4, 3], [5, 1, 3, 2, 4], [5, 1, 3, 4, 2], [5, 2, 1, 3, 4], [5, 2, 1, 4, 3], [5, 2, 3, 1, 4], [5, 2, 3, 4, 1], [5, 2, 4, 1, 3], [5, 2, 4, 3, 1], [5, 3, 1, 2, 4], [5, 3, 1"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  let result = 0;\n  let len = string.length;\n  let i;\n\n  for (i = 0; i < len; i++) {\n    result = Math.max(result, string.charCodeAt(i) + 1);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // the last note\n  let last_note = {};\n  // the last note's index\n  let last_note_index = 0;\n  // the current note\n  let current_note = {};\n  // the current note's index\n  let current_note_index = 0;\n  // current notes\n  let current_notes = [];\n  // current note's duration\n  let current_duration = 0;\n  // current note's note\n  let current_note_note = 0;\n  // current note's octave\n  let current_note_octave = 0;\n  // current note's accidental\n  let current_note_accidental = 0;\n  // current note's accidental's index\n  let current_note_accidental_index = 0;\n\n  // The loop should not stop before the last note.\n  // So if the last note is 'o o|.| o| o|.|.|.|.| o o',\n  // then the last note is 'o o|.| o| o|.|.|.|.| o o'\n  let last_note_char = '';\n  for (let i = 0; i < music_string.length; i++) {\n    // Get the current character\n    last_note_char = music_string.charAt(i);\n    // If it's the end of the current note, save it\n    if (last_note_char === 'o' || last_note_char === 'o|' || last_note_char === '.') {\n      // Check if the current note has some notes\n      if (current_notes.length!== 0) {\n        // If it does, save the current note\n        current_note = {\n          index: current_note_index,\n          duration: current_duration,\n          note: current_note_note,\n          octave: current_note_octave,\n          accidental: current_note_accidental\n        };\n        current_notes.push(current_note);\n      }\n      // Save the current note\n      current_note = {\n        index: current_note_index,\n        duration: current_duration,\n        note: current_note_note,\n        octave: current_note_octave,\n        accidental: current_note_accidental\n      };\n      current_note_index++;\n      current_duration = 0;\n      current_note_note = 0;\n      current_note_octave = 0;\n      current_note_accidental = 0;\n      current_note_accidental_index = 0;\n    } else if (last_note_char === '|') {\n      // Set the duration to half\n      current_duration = current_duration / 2;\n    } else if (last_note_char === 'o') {\n      // Set the note to 1\n      current_note_note = 1;\n      // Set the octave to 4\n      current_note_octave = 4;\n    } else if (last_note_char === '.') {\n      // Set the note to 0\n      current_note_note = 0;\n      // Set the octave to 3\n      current_note_octave = 3;\n    } else {\n      // Set the accidental to 1\n      current_note_accidental = 1;\n      // Set the accidental's index to current note's index\n      current_note_accidental_index = current_note_index;\n    }\n  }\n  // Save the last note\n  current_note = {\n    index: current_note_index,\n    duration: current_duration,\n    note: current_note_note,\n    octave: current_note_octave,\n    accidental: current_note_accidental\n  };\n  current_notes.push(current_note);\n\n  // Sort the current notes by their index\n  current_notes.sort((a, b) => a.index - b.index);\n\n  // Get the list of the current notes\n  current_notes = current_notes.map(note => note.note);\n\n  // Get the last note\n  let last_note = current_notes[current_notes.length - 1];\n\n  // Get the list of the last note's notes\n  let last_note_notes = last_note.note.split('');\n\n  // Get the list of the last note's duration\n  let last_note_duration = last_note.duration;\n\n  // Get the list of the last note's accidental\n  let last_note_accidental = last_note.accidental;\n\n  // Get the list of the last note's accidental's notes\n  let last_note_accidental_notes = last_note_accidental.note.split('');\n\n  // Get the list of the last note's accidental's duration\n  let last_note_accidental_duration = last_note_accidental.duration;\n\n  // Get the last note's octave\n  let last_note_octave = last_note.octave;\n\n  // Get the last note's octave's notes\n  let last_note_octave_notes = last_note_octave.note.split('');\n\n  // Get the last note's octave's duration\n  let last_note_octave_duration = last_note_octave.duration;\n\n  // Get the last note's accidental's octave\n  let last_note_accidental_octave = last_note_accidental.octave;\n\n  // Get the last note's accidental's octave's notes\n  let last_note_accidental_octave_notes = last_note_accidental_octave.note.split('');\n\n  // Get the last note's accidental's octave's duration\n  let last_note_accidental_octave_duration = last_note_accidental_octave.duration;\n\n  // Get the last note's accidental's accidental\n  let last_note_accidental_accidental = last_note_accidental.accidental;\n\n  // Get the"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n    let counter = 0;\n    for (let i = 0; i < string.length - substring.length + 1; i++) {\n        let j = i;\n        while (string.charAt(j) === substring.charAt(0)) {\n            counter += 1;\n            j += 1;\n            if (j > string.length - substring.length) break;\n        }\n    }\n    return counter;\n};\n\nmodule.exports = howManyTime;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  numbers = numbers.split(' ')\n  const sortedNumbers = numbers.sort((a, b) => parseInt(a) - parseInt(b))\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOne(1)\n  'one'\n  */\nconst addsOne = (number) => {\n  return 'one' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOne(3)\n  'three'\n  */\nconst addsOneOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is a number.\n  Return the number as a string in the form 'zero one two three four five six'\n  >>> addsOneOrZeroOrZeroOrZeroOrZero(3)\n  'three'\n  */\nconst addsOneOrZeroOrZeroOrZeroOrZero = (number) => {\n  return number > 0? 'one' + number : 'zero' + number\n}\n\n/* Input is"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const min = (a, b) => {\n    if (Math.abs(a) < Math.abs(b)) {\n      return a\n    }\n    return b\n  }\n\n  let min1 = min(numbers[0], numbers[1])\n  let min2 = min(numbers[2], numbers[3])\n  let min3 = min(min1, min2)\n\n  for (let i = 4; i < numbers.length; i++) {\n    let current = min(numbers[i], min3)\n    if (Math.abs(min3) > Math.abs(current)) {\n      min3 = current\n    }\n  }\n  return [min3, min3]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  return numbers.reduce((acc, n, idx) => {\n    acc[idx] = n / acc[idx];\n    return acc;\n  }, [1.0, 1.0]);\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the mean.\n  * \n  * @param  {Array} numbers The list of numbers to take the mean of.\n  * @return {Number}       The mean of the numbers.\n  */\nconst mean = (numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the sum.\n  * \n  * @param  {Array} numbers The list of numbers to take the sum of.\n  * @return {Number}       The sum of the numbers.\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((acc, n, idx) => {\n    acc += n;\n    return acc;\n  }, 0);\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the standard deviation.\n  * \n  * @param  {Array} numbers The list of numbers to take the standard deviation of.\n  * @return {Number}       The standard deviation of the numbers.\n  */\nconst stdDev = (numbers) => {\n  const mean = mean(numbers);\n  return Math.sqrt(sum(square(numbers) - square(mean)) / numbers.length);\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the standard\n  * deviation.\n  * \n  * @param  {Array} numbers The list of numbers to take the standard deviation of.\n  * @return {Number}       The standard deviation of the numbers.\n  */\nconst stdDevP = (numbers) => {\n  const mean = mean(numbers);\n  return Math.sqrt(sum(square(numbers) - square(mean)) / (numbers.length - 1));\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the median.\n  * \n  * @param  {Array} numbers The list of numbers to take the median of.\n  * @return {Number}       The median of the numbers.\n  */\nconst median = (numbers) => {\n  return (numbers.length % 2)? numbers[Math.floor(numbers.length / 2)] : (numbers[numbers.length / 2 - 1] + numbers[numbers.length / 2]) / 2;\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the mode.\n  * \n  * @param  {Array} numbers The list of numbers to take the mode of.\n  * @return {Number}       The mode of the numbers.\n  */\nconst mode = (numbers) => {\n  const max = max(numbers);\n  const count = 0;\n  let mode = max;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      count += 1;\n    }\n  }\n  return count === 1? max : mode;\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the mode.\n  * \n  * @param  {Array} numbers The list of numbers to take the mode of.\n  * @return {Number}       The mode of the numbers.\n  */\nconst modeP = (numbers) => {\n  const max = max(numbers);\n  const count = 0;\n  let mode = max;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      count += 1;\n    }\n  }\n  return count === 1? max : mode;\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the median.\n  * \n  * @param  {Array} numbers The list of numbers to take the median of.\n  * @return {Number}       The median of the numbers.\n  */\nconst medianP = (numbers) => {\n  const median = median(numbers);\n  return (numbers.length % 2)? median : (numbers[numbers.length / 2 - 1] + numbers[numbers.length / 2]) / 2;\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the mode.\n  * \n  * @param  {Array} numbers The list of numbers to take the mode of.\n  * @return {Number}       The mode of the numbers.\n  */\nconst modeP = (numbers) => {\n  const max = max(numbers);\n  const count = 0;\n  let mode = max;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      count += 1;\n    }\n  }\n  return count === 1? max : mode;\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the standard\n  * deviation.\n  * \n  * @param  {Array} numbers The list of numbers to take the standard deviation of.\n  * @return {Number}       The standard deviation of the numbers.\n  */\nconst stdDevP = (numbers) => {\n  const mean = mean(numbers);\n  return Math.sqrt(sum(square(numbers) - square(mean)) / (numbers.length - 1));\n};\n\n/**\n  * Given a list of numbers (of at least two elements), calculate the mean.\n  * \n  * @param  {Array} numbers The list of numbers to take the mean of.\n  * @return {Number}       The mean of the numbers.\n  */\nconst stdDev = (numbers) => {\n  const mean = mean(numbers);\n  return Math.sqrt(sum(square(numbers) - square"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => typeof x === 'number');\n}\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {any} values\n  * @returns {string[]}\n  * @example\n  * filterStrings(['a', 3.14, 5])\n  * // -> ['a', '3.14', '5']\n  */\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string');\n}\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {any} values\n  * @returns {boolean[]}\n  * @example\n  * filterBooleans(['a', 3.14, 5])\n  * // -> [True, False, False]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(x => typeof x === 'boolean');\n}\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {any} values\n  * @returns {object[]}\n  * @example\n  * filterObjects(['a', 3.14, 5])\n  * // -> [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(x => typeof x === 'object');\n}\n\n/**\n  * Given a list of values,\n  * return a list of values that are of the same type\n  * @param {any[]} values\n  * @param {string} type\n  * @returns {any[]}\n  * @example\n  * filterType(['a', 3.14, 5], 'number')\n  * // -> [5, 3.14, 'a']\n  */\nconst filterType = (values, type) => {\n  const typeList = filterIntegers(values).concat(filterStrings(values), filterBooleans(values));\n  return typeList.filter(x => typeof x === type);\n}\n\n/**\n  * Given a list of values,\n  * return a list of values that are not of the same type\n  * @param {any[]} values\n  * @param {string} type\n  * @returns {any[]}\n  * @example\n  * filterType(['a', 3.14, 5], 'number')\n  * // -> ['a', 3.14]\n  */\nconst filterTypeNot = (values, type) => {\n  const typeList = filterIntegers(values).concat(filterStrings(values), filterBooleans(values));\n  return typeList.filter(x => typeof x!== type);\n}\n\n/**\n  * Given a list of values,\n  * return a list of values that are not of the same type\n  * @param {any[]} values\n  * @param {string} type\n  * @returns {any[]}\n  * @example\n  * filterTypeNot(['a', 3.14, 5], 'number')\n  * // -> ['a', 3.14, 5]\n  */\nconst filterTypeNot = (values, type) => {\n  const typeList = filterIntegers(values).concat(filterStrings(values), filterBooleans(values));\n  return typeList.filter(x => typeof x!== type);\n}\n\n/**\n  * Given a list of values,\n  * return a list of values that are of the same type\n  * @param {any[]} values\n  * @param {string} type\n  * @returns {any[]}\n  * @example\n  * filterType(['a', 3.14, 5],'string')\n  * // -> ['a', '3.14', '5']\n  */\nconst filterType = (values, type) => {\n  const typeList = filterIntegers(values).concat(filterStrings(values), filterBooleans(values));\n  return typeList.filter(x => typeof x === type);\n}\n\n/**\n  * Given a list of values,\n  * return a list of values that are of the same type\n  * @param {any[]} values\n  * @param {string} type\n  * @returns {any[]}\n  * @example\n  * filterType(['a', 3.14, 5],'string')\n  * // -> ['a', '3.14', '5']\n  */\nconst filterTypeNot = (values, type) => {\n  const typeList = filterIntegers(values).concat(filterStrings(values), filterBooleans(values));\n  return typeList.filter(x => typeof x!== type);\n}\n\n/**\n  * Given a list of values,\n  * return a list of values that are not of the same type\n  * @param {any[]} values\n  * @param {string} type\n  * @returns {any[]}\n  * @example\n  * filterTypeNot(['a', 3.14, 5],'string')\n  * // -> ['a', 3.14, 5]\n  */\nconst filterTypeNot = (values, type) => {\n  const typeList = filterIntegers(values).concat(filterStrings(values), filterBooleans(values));\n  return typeList.filter(x => typeof x!== type);\n}\n\nexport default {\n  filterIntegers,\n  filterStrings,\n  filterBooleans,\n  filterObjects,\n  filterType,\n  filterTypeNot,\n  filterTypeNot\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n  * Returns the length of given string with leading zeroes.\n  *\n  * @param {String} string\n  * @return {Number}\n  * @example\n  *\n  * strlen(\"abc\")\n  * // => 3\n  *\n  * strlen(\"ab\")\n  * // => 2\n  *\n  * strlen(\"a\")\n  * // => 1\n  *\n  * strlen(\"\")\n  * // => 0\n  *\n  * strlen(null)\n  * // => 0\n  *\n  * strlen(undefined)\n  * // => 0\n  *\n  * strlen(0)\n  * // => 0\n  *\n  * strlen(-0)\n  * // => 0\n  *\n  * strlen(-1)\n  * // => 1\n  *\n  * strlen(NaN)\n  * // => 0\n  *\n  * strlen(Infinity)\n  * // => 0\n  */\nconst strlenWithLeadingZeroes = (string) => {\n  const len = strlen(string)\n  if (len === 0) return 0\n  return len + (1 - Math.floor(len / 10))\n}\n\n/**\n  * Returns the number of digits of given number\n  *\n  * @param {Number} number\n  * @return {Number}\n  * @example\n  *\n  * digits(0)\n  * // => 0\n  *\n  * digits(1)\n  * // => 1\n  *\n  * digits(2)\n  * // => 1\n  *\n  * digits(3)\n  * // => 1\n  *\n  * digits(999)\n  * // => 2\n  *\n  * digits(0.1)\n  * // => 1\n  *\n  * digits(0.01)\n  * // => 2\n  *\n  * digits(1.2)\n  * // => 2\n  *\n  * digits(10)\n  * // => 2\n  *\n  * digits(0)\n  * // => 0\n  *\n  * digits(0.0)\n  * // => 0\n  *\n  * digits(null)\n  * // => 0\n  *\n  * digits(undefined)\n  * // => 0\n  *\n  * digits(NaN)\n  * // => 0\n  *\n  * digits(Infinity)\n  * // => 0\n  *\n  * digits(-Infinity)\n  * // => 0\n  *\n  * digits(-0.0)\n  * // => 0\n  *\n  * digits(-0.1)\n  * // => 1\n  *\n  * digits(-1.2)\n  * // => 2\n  *\n  * digits(-10)\n  * // => 2\n  *\n  * digits(-0)\n  * // => 0\n  *\n  * digits(-0.0)\n  * // => 0\n  */\nconst digits = (number) => {\n  return number.toString().split('.').length - 1\n}\n\n/**\n  * Returns a new string with the given number of trailing zeroes.\n  *\n  * @param {Number} number\n  * @param {Number} length\n  * @return {String}\n  * @example\n  *\n  * strpad(0, 2)\n  * // => \"00\"\n  *\n  * strpad(1, 2)\n  * // => \"01\"\n  *\n  * strpad(999, 2)\n  * // => \"999\"\n  *\n  * strpad(999, 3)\n  * // => \"999\"\n  *\n  * strpad(999, 4)\n  * // => \"999\"\n  *\n  * strpad(999, 5)\n  * // => \"999\"\n  *\n  * strpad(999, 6)\n  * // => \"999\"\n  */\nconst strpad = (number, length = 2) => {\n  const len = length - digits(number)\n  return number.toString().padEnd(len, '0')\n}\n\n/**\n  * Returns the number of leading zeroes in a given string.\n  *\n  * @param {String} string\n  * @return {Number}\n  * @example\n  *\n  * strleadingzeroes(0)\n  * // => 0\n  *\n  * strleadingzeroes(\"abc\")\n  * // => 0\n  *\n  * strleadingzeroes(\"0000abc\")\n  * // => 3\n  *\n  * strleadingzeroes(\"0000abd\")\n  * // => 2\n  *\n  * strleadingzeroes(\"0abc\")\n  * // => 1\n  *\n  * strleadingzeroes(\"abc\")\n  * // => 0\n  *\n  * strleadingzeroes(\"abcd\")\n  * // => 0\n  */\nconst strleadingzeroes = (string) => {\n  return string.split('').map((char) => char === '0'? 1 : 0).sum()\n}\n\n/**\n  * Returns the number of leading zeroes in a given string with leading zeroes.\n  *\n  * @param {String} string\n  * @return {Number}\n  * @example\n  *\n  * strleadingzeroes(\"0\")\n  * // => 1\n  *\n  * strleadingzeroes(\"0000\")\n  * // => 3\n  *\n  * strleadingzeroes(\"00000\")\n  * // => 4\n  *\n  * strleadingzeroes(\"0000a\")\n  * // => 2\n  *\n  * strleadingzeroes(\"ab\")\n  * // => 0\n  */\nconst strleadingzeroesWithLeadingZeroes = (string) => {\n  return strleadingzeroes(strpad(string, strlenWithLeadingZeroes(string)))\n}\n\n/**\n  * Returns the number of trailing zeroes in a given string.\n  *\n  * @param {String} string\n  * @return {Number}\n  * @example\n  *\n  * strtrailingszeroes(\"abc\")\n  * // => 0\n  *\n  * strtrailingszeroes(\"abc\")\n  * // => 0\n  *\n  * strtrailingszer"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  return (n) => {\n    const divisors = [];\n    for (let i = 1; i < n; i++) {\n      if (n % i === 0) {\n        divisors.push(i);\n      }\n    }\n    return Math.max(...divisors);\n  };\n};\n\nconst sumOfDivisors = (n) => {\n  return (n) => {\n    return (n) => {\n      const divisors = [];\n      for (let i = 1; i < n; i++) {\n        if (n % i === 0) {\n          divisors.push(i);\n        }\n      }\n      return sum(divisors);\n    };\n  };\n};\n\nconst sum = (numbers) => {\n  return (numbers) => {\n    const sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n      sum += numbers[i];\n    }\n    return sum;\n  };\n};\n\nconst triangle = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n  };\n};\n\nconst factorial = (n) => {\n  return (n) => {\n    const sum = 1;\n    for (let i = 1; i <= n; i++) {\n      sum *= i;\n    }\n    return sum;\n  };\n};\n\nconst sumOfSquareRoot = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 1; i < n; i++) {\n      sum += Math.pow(i, 2);\n    }\n    return sum;\n  };\n};\n\nconst nthPrime = (n) => {\n  return (n) => {\n    const prime = (n) => {\n      const prime = (n) => {\n        let i = 2;\n        while (i <= n) {\n          if (n % i === 0) {\n            return false;\n          }\n          i++;\n        }\n        return true;\n      };\n      return prime;\n    };\n    return prime(n);\n  };\n};\n\nconst fib = (n) => {\n  return (n) => {\n    const fib = (n) => {\n      const fib = (n) => {\n        if (n === 1 || n === 2) {\n          return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n      };\n      return fib(n);\n    };\n    return fib(n);\n  };\n};\n\nconst findMax = (a, b) => {\n  return (a, b) => {\n    return (a, b) => {\n      if (a > b) {\n        return a;\n      }\n      return b;\n    };\n  };\n};\n\nconst sumOfPrimes = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes2 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes3 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes4 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes5 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes6 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes7 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes8 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes9 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes10 = (n) => {\n  return (n) => {\n    const sum = 0;\n    for (let i = 2; i <= n; i++) {\n      if (isPrime(i)) {\n        sum += i;\n      }\n    }\n    return sum;\n  };\n};\n\nconst sumOfPrimes11 = (n) => {\n"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  if (n < 2) return []\n  let factors = []\n  for (let i = 1; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  if (n > 1) factors.push(n)\n  return factors\n}\n\n/* Return the first prime number greater than or equal to the given number.\n  >>> nextPrime(10)\n  11\n  >>> nextPrime(100)\n  101\n  >>> nextPrime(1000)\n  1001\n  >>> nextPrime(2000)\n  2001\n  >>> nextPrime(10**10)\n  10000000001\n  */\nconst nextPrime = (n) => {\n  if (n <= 2) return 2\n  for (let i = 3; i < n; i++) {\n    if (n % i === 0) return i + 1\n  }\n}\n\n/* Return the prime number in the given range.\n  >>> nextPrime(10)\n  11\n  >>> nextPrime(100)\n  101\n  >>> nextPrime(1000)\n  1001\n  >>> nextPrime(2000)\n  2001\n  >>> nextPrime(10**10)\n  10000000001\n  >>> nextPrime(10**10, 1000000000)\n  100000000000000001\n  */\nconst nextPrimeInRange = (n, start, end) => {\n  if (start <= n && n <= end) return nextPrime(n)\n  if (n > end) return nextPrimeInRange(n, start, end)\n}\n\n/* Return the number of primes less than or equal to the given number.\n  >>> countPrimes(10)\n  5\n  >>> countPrimes(100)\n  17\n  >>> countPrimes(1000)\n  233\n  >>> countPrimes(2000)\n  443\n  >>> countPrimes(10**10)\n  10000000000\n  */\nconst countPrimes = (n) => {\n  if (n < 2) return 1\n  let count = 1\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) count++\n  }\n  return count\n}\n\n/* Return the number of primes less than or equal to the given number, using the given prime function.\n  >>> countPrimes(10, isPrime)\n  5\n  >>> countPrimes(100, isPrime)\n  17\n  >>> countPrimes(1000, isPrime)\n  233\n  >>> countPrimes(2000, isPrime)\n  443\n  >>> countPrimes(10**10, isPrime)\n  10000000000\n  */\nconst countPrimes = (n, f) => {\n  if (n < 2) return 1\n  let count = 1\n  for (let i = 2; i <= n; i++) {\n    if (f(i)) count++\n  }\n  return count\n}\n\n/* Return the prime factorization of the given number.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = factorizes(n)\n  return factors.map((i) => i)\n}\n\n/* Return the prime factorization of the given number, using the given prime function.\n  >>> factorize(8, isPrime)\n  [2, 2, 2]\n  >>> factorize(25, isPrime)\n  [5, 5]\n  >>> factorize(70, isPrime)\n  [2, 5, 7]\n  */\nconst factorize = (n, f) => {\n  let factors = factorizes(n)\n  return factors.map((i) => f(i))\n}\n\n/* Return the prime factorization of the given number, using the given prime function.\n  >>> factorize(8, isPrime)\n  [2, 2, 2]\n  >>> factorize(25, isPrime)\n  [5, 5]\n  >>> factorize(70, isPrime)\n  [2, 5, 7]\n  */\nconst factorize = (n, f) => {\n  let factors = factorizes(n)\n  return factors.map((i) => f(i))\n}\n\n/* Return the sum of the squares of the first ten natural numbers.\n  >>> sumSquares(10)\n  385\n  >>> sumSquares(20)\n  1250\n  >>> sumSquares(30)\n  2835\n  >>> sumSquares(100)\n  11586\n  >>> sumSquares(1000)\n  1425\n  */\nconst sumSquares = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i\n  }\n  return sum\n}\n\n/* Return the sum of the squares of the first ten natural numbers, using the given prime function.\n  >>> sumSquares(10, isPrime)\n  385\n  >>> sumSquares(20, isPrime)\n  1250\n  >>> sumSquares(30, isPrime)\n  2835\n  >>> sumSquares(100, isPrime)\n  11586\n  >>> sumSquares(1000, isPrime)\n  1425\n  */\nconst sumSquares = (n, f) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += f(i) * f(i)\n  }\n  return sum\n}\n\n/* Return the sum of the squares of the first ten natural numbers, using the given prime function.\n  >>> sumSquares(10, isPrime)\n  385\n  >>> sumSquares(20, isPrime)\n  1250\n  >>> sumSquares(30, isPrime)\n  2835\n  >>> sumSquares(100, isPrime)\n  11586\n  >>>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const result = [];\n  const index = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (index[numbers[i]]) {\n      result.push(numbers[i]);\n    } else {\n      result.push(numbers[i]);\n      index[numbers[i]] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a list of integers, return the sum of all the even elements.\n  >>> sumEven([1, 2, 4, 5, 6, 8, 9, 12, 15, 18, 20])\n  34\n  */\nconst sumEven = (numbers) => {\n  return numbers.filter((x) => x % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given a list of strings, return the longest string without repeating\n  characters.\n  >>> longestWithoutRepeat(\"abracadabra\")\n  'abracad'\n  >>> longestWithoutRepeat(\"abracadabra\")\n  'abracad'\n  >>> longestWithoutRepeat(\"abracadabra\")\n  'abracad'\n  >>> longestWithoutRepeat(\"\")\n  ''\n  >>> longestWithoutRepeat(\"abc\")\n  'abc'\n  >>> longestWithoutRepeat(\"abc\")\n  'abc'\n  >>> longestWithoutRepeat(\"abc\")\n  'abc'\n  */\nconst longestWithoutRepeat = (str) => {\n  const result = str.split(\"\").reduce((a, b) => {\n    if (a.length > b.length) {\n      return a;\n    } else {\n      return b;\n    }\n  });\n  return result.length === 1? \"\" : result;\n};\n\n/*\n  Given a list of strings, return the shortest string without repeating\n  characters.\n  >>> shortestWithoutRepeat(\"abracadabra\")\n  'abracadabra'\n  >>> shortestWithoutRepeat(\"abracadabra\")\n  'abracadabra'\n  >>> shortestWithoutRepeat(\"abracadabra\")\n  'abracadabra'\n  >>> shortestWithoutRepeat(\"\")\n  ''\n  >>> shortestWithoutRepeat(\"abc\")\n  'abc'\n  >>> shortestWithoutRepeat(\"abc\")\n  'abc'\n  >>> shortestWithoutRepeat(\"abc\")\n  'abc'\n  */\nconst shortestWithoutRepeat = (str) => {\n  const result = str.split(\"\").reduce((a, b) => {\n    if (a.length < b.length) {\n      return a;\n    } else {\n      return b;\n    }\n  });\n  return result.length === 1? \"\" : result;\n};\n\n/*\n  Given a list of strings, return the count of the number of unique strings.\n  >>> countUnique(\"abracadabra\")\n  5\n  >>> countUnique(\"abracadabra\")\n  5\n  >>> countUnique(\"abracadabra\")\n  5\n  >>> countUnique(\"\")\n  1\n  >>> countUnique(\"abc\")\n  3\n  >>> countUnique(\"abc\")\n  3\n  >>> countUnique(\"abc\")\n  3\n  */\nconst countUnique = (str) => {\n  const result = [];\n  let unique = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (result.indexOf(str.charAt(i)) === -1) {\n      result.push(str.charAt(i));\n      unique++;\n    }\n  }\n  return unique;\n};\n\nexport {\n  removeDuplicate,\n  sumEven,\n  longestWithoutRepeat,\n  shortestWithoutRepeat,\n  countUnique\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  const str = string.toUpperCase()\n  const upper = str.split('')\n  const lower = str.split('')\n\n  for (let i = 0; i < upper.length; i++) {\n    upper[i] = upper[i].toUpperCase()\n    lower[i] = lower[i].toLowerCase()\n  }\n\n  return upper.join('')\n}\n\n/* For a given string, return the number of words in the string.\n  >>> numWords('Hello world')\n  2\n  */\nconst numWords = (string) => {\n  return string.split(' ').length\n}\n\n/* For a given string, return the number of punctuation characters in the string.\n  >>> numPunctuation('Hello world!')\n  0\n  */\nconst numPunctuation = (string) => {\n  return string.split(' ').filter(\n    (char) => {\n      return!/[^\\s\\w]/.test(char)\n    }\n  ).length\n}\n\n/* Return a dictionary with the keys from the given string.\n  >>> keyDict('Hello world')\n  {'d': 1, 'o': 1, 'r': 1, 'l': 1, 'h': 1, 'w': 1, 'e': 1}\n  */\nconst keyDict = (string) => {\n  const dict = {}\n\n  for (let i = 0; i < string.length; i++) {\n    dict[string[i]] = 1\n  }\n\n  return dict\n}\n\n/* Return the number of characters in the given string.\n  >>> length('Hello world')\n  14\n  */\nconst length = (string) => {\n  return string.length\n}\n\n/* Return a list with the first ten words of the given string.\n  >>> firstTenWords('Hello world')\n  ['Hello', 'world']\n  */\nconst firstTenWords = (string) => {\n  return string.split(' ').slice(0, 10)\n}\n\n/* Return a list with the first ten words of the given string,\n  and a dictionary with the first ten words in the given string.\n  >>> firstTenWordsAndDict('Hello world')\n  ['Hello', 'world']\n  {'Hello': 1, 'world': 1}\n  */\nconst firstTenWordsAndDict = (string) => {\n  const words = firstTenWords(string)\n\n  const dict = {}\n\n  for (let i = 0; i < words.length; i++) {\n    dict[words[i]] = 1\n  }\n\n  return words, dict\n}\n\n/* Return the index of the given word in the given string.\n  >>> index('Hello world', 'world')\n  7\n  */\nconst index = (string, word) => {\n  return string.indexOf(word)\n}\n\n/* Return the string that is the result of replacing each of the characters\n  in the given string with their respective index in the given dictionary.\n  >>> replace('Hello world', 'l', '2')\n  'Hello 2 world'\n  */\nconst replace = (string, word, dict) => {\n  return string.replace(word, dict[word])\n}\n\n/* Return the string that is the result of replacing each of the characters\n  in the given string with their respective index in the given dictionary,\n  and returning the result as a list of the first ten words of the result.\n  >>> replaceWords('Hello world', 'l', '2', {'Hello': 1, 'world': 1})\n  ['Hello 1', 'world 1']\n  */\nconst replaceWords = (string, word, dict, numWords) => {\n  const words = replace(string, word, dict).split(' ').slice(0, numWords)\n\n  return words\n}\n\n/* Return the string that is the result of replacing each of the characters\n  in the given string with their respective index in the given dictionary.\n  The dictionary is given as a dictionary with the keys as the words and\n  the values as their respective indices in the given string.\n  >>> replaceDict('Hello world', 'l', {'Hello': 1, 'world': 1})\n  'Hello 1 world'\n  */\nconst replaceDict = (string, word, dict) => {\n  return string.replace(word, dict[word])\n}\n\n/* Return the string that is the result of replacing each of the characters\n  in the given string with their respective index in the given dictionary.\n  The dictionary is given as a dictionary with the keys as the words and\n  the values as their respective indices in the given string.\n  The number of words to return is given as an integer.\n  >>> replaceDict('Hello world', 'l', {'Hello': 1, 'world': 1}, 10)\n  'Hello 1 world'\n  */\nconst replaceDictWithNumWords = (string, word, dict, numWords) => {\n  return replaceDict(string, word, dict, numWords)\n}\n\n/* Return the string that is the result of replacing each of the characters\n  in the given string with their respective index in the given dictionary.\n  The dictionary is given as a dictionary with the keys as the words and\n  the values as their respective indices in the given string.\n  The number of words to return is given as an integer.\n  The result is then returned as a list of the first ten words of the result.\n  >>> replaceDict('Hello world', 'l', {'Hello': 1, 'world': 1}, 10)\n  ['Hello 1', 'world 1']\n  */\nconst replaceDictWithNumWordsAndFirstTenWords = (\n  string,\n  word,\n  dict,\n  numWords\n) => {\n  const words = replaceDictWithNumWords(string, word, dict, numWords)\n\n  return words.slice(0, 10)\n}\n\n/* Return the string that is the result of replacing each of the characters\n  in the given string with their respective index in the given dictionary.\n  The dictionary is given as a dictionary with the keys as the words and\n  the values as their respective indices in the given string.\n  The number of words to return is given as an integer.\n  The result is then returned as a list of the first ten words of the result.\n  >>> replaceDict('Hello world', 'l', {'Hello': 1, 'world': 1}, 10)\n  ['Hello 1', 'world 1"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const length = strings.length\n  const result = strings[0]\n  strings.forEach((string) => {\n    result = result + string\n  })\n  return result\n}\n\n/*\n  Return true if the list of strings contains a string\n  >>> contains('a', ['a', 'b', 'c'])\n  True\n  >>> contains('a', ['b', 'c'])\n  False\n  */\nconst contains = (string, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  Return a list of strings which contains a string\n  >>> find('a', ['a', 'b', 'c'])\n  ['a', 'c']\n  >>> find('a', ['b', 'c'])\n  []\n  */\nconst find = (string, strings) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return a list of strings which contains only unique strings\n  >>> unique('abc', ['a', 'a', 'b', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> unique('abc', ['a', 'a', 'b', 'b', 'c', 'c'])\n  ['a', 'b', 'c']\n  */\nconst unique = (string, strings) => {\n  const result = []\n  const seen = {}\n  for (let i = 0; i < strings.length; i++) {\n    if (seen[strings[i]] === undefined) {\n      seen[strings[i]] = true\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return a list of strings which starts with a string\n  >>> starts('a', ['a', 'b', 'c'])\n  ['a', 'c']\n  >>> starts('a', ['b', 'c'])\n  []\n  */\nconst starts = (string, strings) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return a list of strings which ends with a string\n  >>> ends('a', ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> ends('a', ['b', 'c'])\n  []\n  */\nconst ends = (string, strings) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return a list of strings which contains all the strings in another list\n  >>> containsAll('a', ['a', 'b', 'c'])\n  True\n  >>> containsAll('a', ['b', 'c'])\n  False\n  */\nconst containsAll = (string, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  Given a list of strings, return a list of strings which contains none of the strings in another list\n  >>> containsNone('a', ['a', 'b', 'c'])\n  False\n  >>> containsNone('a', ['b', 'c'])\n  True\n  */\nconst containsNone = (string, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a list of strings, return a list of strings which starts with none of the strings in another list\n  >>> startsWithNone('a', ['a', 'b', 'c'])\n  False\n  >>> startsWithNone('a', ['b', 'c'])\n  True\n  */\nconst startsWithNone = (string, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a list of strings, return a list of strings which ends with none of the strings in another list\n  >>> endsWithNone('a', ['a', 'b', 'c'])\n  True\n  >>> endsWithNone('a', ['b', 'c'])\n  False\n  */\nconst endsWithNone = (string, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a list of strings, return a list of strings which contains none of the strings in another list\n  >>> containsNone('a', ['a', 'b', 'c'])\n  False\n  >>> containsNone('a', ['b', 'c'])\n  True\n  */\nconst containsNone = (string, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a list of strings, return a list of strings which starts with none of the strings in another list\n  >>> startsWithNone('a', ['a', 'b', 'c'])\n  True\n  >>> startsWithNone('a', ['b', 'c'])\n  False\n  */\nconst startsWithNone = (string, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string === strings[i]) {\n      return"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain a given suffix.\n  *\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} suffix - The suffix to look for.\n  * @return {Array} - The filtered list of strings.\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain a given string\n  * within the middle of the string.\n  *\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} prefix - The prefix to look for.\n  * @return {Array} - The filtered list of strings.\n  */\nconst filterByMiddle = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Return a list of all the strings in the input list.\n  *\n  * @param {Array} strings - The list of strings to iterate over.\n  * @return {Array} - A list of all the strings in the input list.\n  */\nconst getAllStrings = (strings) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    result.push(strings[i])\n  }\n  return result\n}\n\n/**\n  * Sort a list of strings by a given attribute.\n  *\n  * @param {Array} strings - The list of strings to sort.\n  * @param {String} attribute - The attribute to sort by.\n  * @return {Array} - The sorted list of strings.\n  */\nconst sortByAttribute = (strings, attribute) => {\n  const sorted = []\n  let attributeValue\n  for (let i = 0; i < strings.length; i++) {\n    attributeValue = strings[i][attribute]\n    sorted.push({ attribute, value: attributeValue })\n  }\n  sorted.sort((a, b) => {\n    if (a.value < b.value) return -1\n    if (a.value > b.value) return 1\n    return 0\n  })\n  return sorted\n}\n\n/**\n  * Return a list of all the strings in the input list sorted by the given\n  * attribute.\n  *\n  * @param {Array} strings - The list of strings to sort.\n  * @param {String} attribute - The attribute to sort by.\n  * @return {Array} - The sorted list of strings.\n  */\nconst getSortedStrings = (strings, attribute) => {\n  const sorted = sortByAttribute(strings, attribute)\n  return sorted\n}\n\n/**\n  * Return a list of all the strings in the input list that start with the given\n  * string.\n  *\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} prefix - The prefix to look for.\n  * @return {Array} - The filtered list of strings.\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Return a list of all the strings in the input list that contain the given\n  * string within the middle of the string.\n  *\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} prefix - The prefix to look for.\n  * @return {Array} - The filtered list of strings.\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(suffix) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Return a list of all the strings in the input list that contain the given\n  * string within the middle of the string.\n  *\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} prefix - The prefix to look for.\n  * @return {Array} - The filtered list of strings.\n  */\nconst filterByMiddle = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Return a list of all the strings in the input list that start with the given\n  * string.\n  *\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} prefix - The prefix to look for.\n  * @return {Array} - The filtered list of strings.\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  filterBy"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\nmodule.exports = gottenPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0) return false;\n    if (n <= 9) return true;\n    if (n % 3 == 0) return false;\n    if (n <= 27) return true;\n    if (n % 5 == 0) return false;\n    if (n <= 7) return true;\n    if (n <= 61) return true;\n    return false;\n};\n\nconsole.log(isPrime(4));\nconsole.log(isPrime(1));\nconsole.log(isPrime(11));\nconsole.log(isPrime(13441));\nconsole.log(isPrime(61));\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw \"polynomial is not even\";\n  }\n\n  if (xs.length === 2) {\n    return xs[1] / xs[0];\n  }\n\n  if (xs.length === 3) {\n    return (((xs[1] * xs[2]) - xs[0] * xs[1]) / (xs[0] * xs[1])) - xs[2];\n  }\n\n  return findZero(xs.slice(1, -1));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw \"polynomial is not even\";\n  }\n\n  if (xs.length === 2) {\n    return xs[1] / xs[0];\n  }\n\n  if (xs.length === 3) {\n    return (((xs[1] * xs[2]) - xs[0] * xs[1]) / (xs[0] * xs[1])) - xs[2];\n  }\n\n  return findZero(xs.slice(1, -1));\n}\n\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw \"polynomial is not even\";\n  }\n\n  if (xs.length === 2) {\n    return xs[1] / xs[0];\n  }\n\n  if (xs.length === 3) {\n    return (((xs[1] * xs[2]) - xs[0] * xs[1]) / (xs[0] * xs[1])) - xs[2];\n  }\n\n  return findZero(xs.slice(1, -1));\n}\n\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw \"polynomial is not even\";\n  }\n\n  if (xs.length === 2) {\n    return xs[1] / xs[0];\n  }\n\n  if (xs.length === 3) {\n    return (((xs[1] * xs[2]) - xs[0] * xs[1]) / (xs[0] * xs[1])) - xs[2];\n  }\n\n  return findZero(xs.slice(1, -1));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n    const sorted = sort(l, (a, b) => a % 3!== b % 3);\n    const sortedList = [];\n    const n = sorted.length;\n    for (let i = 0; i < n; i += 1) {\n        if (i % 3 === 0) {\n            sortedList.push(sorted[i]);\n        }\n    }\n    return sortedList;\n}\n\n/**\n  * This function takes a list l and returns a list l' such that\n  * l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  * to the values of the corresponding indicies of l, but sorted.\n  * >>> sortsFifth([1, 2, 3, 4, 8, 9, 5])\n  * [1, 2, 3, 4, 5, 8, 9]\n  */\nconst sortsFifth = (l) => {\n    const sorted = sort(l, (a, b) => a % 5!== b % 5);\n    const sortedList = [];\n    const n = sorted.length;\n    for (let i = 0; i < n; i += 1) {\n        if (i % 5 === 0) {\n            sortedList.push(sorted[i]);\n        }\n    }\n    return sortedList;\n}\n\nexport {\n    sortsThird,\n    sortsFifth\n};<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const res = [];\n  const i = 0;\n  const unique = (v) => {\n    if (v === null) {\n      return;\n    }\n    if (res.indexOf(v) === -1) {\n      res.push(v);\n      i++;\n    }\n  };\n  for (let v of l) {\n    unique(v);\n  }\n  return res;\n};\n\n// console.log(unique([1, 1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  return l.reduce((acc, n) => Math.max(acc, n), -Infinity);\n};\n\n/**\n  * Return minimum element in the list.\n  >>> minElements([1, 2, 3])\n  1\n  >>> minElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElements = (l) => {\n  return l.reduce((acc, n) => Math.min(acc, n), Infinity);\n};\n\n/**\n  * Return index of the largest element in the list.\n  >>> largestIndex([1, 2, 3])\n  1\n  >>> largestIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  6\n  */\nconst largestIndex = (l) => {\n  return l.reduce((acc, n) => Math.max(acc, n), -Infinity);\n};\n\n/**\n  * Return index of the smallest element in the list.\n  >>> smallestIndex([1, 2, 3])\n  0\n  >>> smallestIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst smallestIndex = (l) => {\n  return l.reduce((acc, n) => Math.min(acc, n), Infinity);\n};\n\n/**\n  * Return index of the largest element in the list.\n  >>> largestIndex([1, 2, 3])\n  1\n  >>> largestIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  6\n  */\nconst largestCount = (l) => {\n  return l.reduce((acc, n) => Math.max(acc, n), -Infinity);\n};\n\n/**\n  * Return index of the smallest element in the list.\n  >>> smallestIndex([1, 2, 3])\n  0\n  >>> smallestIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst smallestCount = (l) => {\n  return l.reduce((acc, n) => Math.min(acc, n), Infinity);\n};\n\n/**\n  * Return the average of the elements in the list.\n  >>> average([1, 2, 3])\n  2.0\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.4\n  */\nconst average = (l) => {\n  return l.reduce((acc, n) => acc + n, 0) / l.length;\n};\n\n/**\n  * Return the average of the elements in the list.\n  >>> average([1, 2, 3])\n  2.0\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.4\n  */\nconst average2 = (l) => {\n  return l.reduce((acc, n) => acc + n, 0) / l.length;\n};\n\n/**\n  * Return the median of the elements in the list.\n  >>> median([1, 2, 3])\n  2.0\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.0\n  */\nconst median = (l) => {\n  return (l.length % 2)? l[Math.floor(l.length / 2)] : (l[Math.floor(l.length / 2 - 1)] + l[Math.floor(l.length / 2)]) / 2;\n};\n\n/**\n  * Return the median of the elements in the list.\n  >>> median([1, 2, 3])\n  2.0\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.0\n  */\nconst median2 = (l) => {\n  return (l.length % 2)? l[Math.floor(l.length / 2)] : (l[Math.floor(l.length / 2 - 1)] + l[Math.floor(l.length / 2)]) / 2;\n};\n\n/**\n  * Return the mode of the elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  return l.reduce((acc, n) => {\n    if (acc.count > 0 && n === acc.element) {\n      return acc;\n    }\n    acc.count = 0;\n    acc.element = n;\n    acc.count++;\n    return acc;\n  }, { count: 0, element: null });\n};\n\nmodule.exports = {\n  maximum,\n  maximumElements,\n  minimum,\n  minimumElements,\n  largestIndex,\n  largestCount,\n  smallestIndex,\n  smallestCount,\n  average,\n  average2,\n  median,\n  median2,\n  mode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  What is the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum?\n  >>> sumOfSquares(100)\n  25164150\n  >>> squareSum(sumOfSquares(100))\n  25164150\n  */\nconst sumOfSquares = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*\n  What is the sum of the even-valued terms in the Fibonacci sequence?\n  >>> fibonacciSum(1000)\n  46656,150\n  >>> fibonacciSum(2000)\n  6765,216\n  >>> fibonacciSum(3000)\n  99,552,132\n  */\nconst fibonacciSum = (n) => {\n  let sum = 0;\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += a;\n    }\n    a = b;\n    b = a + b;\n  }\n  return sum;\n};\n\n/*\n  What is the sum of the first one hundred natural numbers which are also perfect squares?\n  >>> perfectSquares(100)\n  16\n  >>> perfectSquares(101)\n  17\n  >>> perfectSquares(999)\n  768\n  */\nconst perfectSquares = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  What is the sum of the first one hundred natural numbers which are also perfect cubes?\n  >>> perfectCubes(100)\n  8,003\n  >>> perfectCubes(101)\n  9,004\n  >>> perfectCubes(999)\n  768\n  */\nconst perfectCubes = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0) {\n      sum += i * i * i;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  fizzBuzzes,\n  sumOfSquares,\n  fibonacciSum,\n  perfectSquares,\n  perfectCubes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  const sorted = sort(l);\n  const result = [];\n  for (let i = 0; i < sorted.length - 1; i += 2) {\n    result.push(sorted[i]);\n  }\n  for (let i = 1; i < sorted.length; i += 2) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  const fib = (n) => {\n    if (n === 1) {\n      return 1;\n    } else if (n === 2) {\n      return 2;\n    }\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primes returns n-th number that is prime and its prime factor is also prime.\n  >>> primes(1)\n  2\n  >>> primes(2)\n  3\n  >>> primes(3)\n  5\n  >>> primes(4)\n  13\n  >>> primes(5)\n  89\n  */\nconst primes = (n) => {\n  const fib = (n) => {\n    if (n === 1) {\n      return 1;\n    } else if (n === 2) {\n      return 2;\n    }\n    return fib(n - 1) + fib(n - 2);\n  };\n  const isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  return fib(n)\n   .filter(isPrime);\n};\n\n/*\n  primeFibs2 returns n-th number that is a Fibonacci number and its prime factor is also prime.\n  >>> primeFibs2(1)\n  2\n  >>> primeFibs2(2)\n  3\n  >>> primeFibs2(3)\n  5\n  >>> primeFibs2(4)\n  13\n  >>> primeFibs2(5)\n  89\n  */\nconst primeFibs2 = (n) => {\n  const fib = (n) => {\n    if (n === 1) {\n      return 1;\n    } else if (n === 2) {\n      return 2;\n    }\n    return fib(n - 1) + fib(n - 2);\n  };\n  const isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  return fib(n)\n   .filter((i) => isPrime(i))\n   .map((i) => i);\n};\n\n/*\n  primes2 returns n-th number that is prime and its prime factor is also prime.\n  >>> primes2(1)\n  2\n  >>> primes2(2)\n  3\n  >>> primes2(3)\n  5\n  >>> primes2(4)\n  13\n  >>> primes2(5)\n  89\n  */\nconst primes2 = (n) => {\n  const fib = (n) => {\n    if (n === 1) {\n      return 1;\n    } else if (n === 2) {\n      return 2;\n    }\n    return fib(n - 1) + fib(n - 2);\n  };\n  const isPrime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  return fib(n)\n   .filter((i) => isPrime(i))\n   .map((i) => i);\n};\n\nmodule.exports = {\n  primeFibs,\n  primes,\n  primeFibs2,\n  primes2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  if (l.length === 0) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < l.length) {\n    j = 0\n    while (j < l.length) {\n      k = 0\n      while (k < l.length) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true\n        }\n        k += 1\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return false\n}\n\nmodule.exports = triplesSummingToZeroed\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n    let count = 0;\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            let deltaX = i - j;\n            let deltaY = Math.pow(i + j, 2);\n\n            if (deltaX > 0 && deltaY > 0) {\n                let deltaXSquared = Math.pow(deltaX, 2);\n                let deltaYSquared = Math.pow(deltaY, 2);\n\n                if (deltaXSquared + deltaYSquared < Math.pow(n, 2)) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\n//\n//\n//\nconsole.log(carsRacesCollision(5));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n//# sourceMappingURL=increment.js.map<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n    let a = 0, b = 0;\n    for (let i = 0; i < l.length; i++) {\n        a += l[i];\n        b += l[i];\n    }\n    if (a === 0 && b === 0) return false;\n    return true;\n}\n\n/*\n  isValidList takes a list of integers and returns true iff the list\n  contains no duplicates and is in the form of a permutation.\n  >>> isValidList([1, 3, 5, 7])\n  true\n  >>> isValidList([1, 3, 5, 7, 0])\n  false\n  >>> isValidList([1, 3, 5, 7, 0, 1])\n  false\n  >>> isValidList([1, 2, 3, 7])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7])\n  true\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  true\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  false\n  >>> isValidList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  false\n  */\nconst isValidList = (l) => {\n    let a = 0;\n    for (let i = 0; i < l.length; i++) {\n        a += l[i];\n    }\n    if (a!== 0 && a!== l.length) return false;\n    if (l.length === 1 && l[0] === 1) return true;\n    for (let i = 0; i < l.length; i++) {\n        if (l.indexOf(l[i], i + 1)!== -1) return false;\n    }\n    return true;\n}\n\n/*\n  isValidPermutation takes a list of integers as an input.\n  It returns true iff the list is a permutation of the integers\n  from 1 to n, and false otherwise.\n  >>> isValidPermutation([1, 2, 3])\n  true\n  >>> isValidPermutation([1, 3, 2])\n  false\n  >>> isValidPermutation([1, 3, 2, 5, 6])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  true\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  false\n  >>> isValidPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  false\n  >>> isValidPermutation([1, 2, 3, 4,"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n    let number = x;\n    let string = '';\n    for (let i = 1; i <= number; i++) {\n        number = number % base;\n        if (number < 10) {\n            string = number + string;\n        }\n    }\n    return string;\n};\n\n/**\n  * Convert a number into a string using base 10\n  *\n  * @param {Number} number\n  * @param {Number} base\n  * @return {String}\n  */\nconst numberToBase = (number, base) => {\n    return changeBases(number, base);\n};\n\n/**\n  * Convert a number into a string using base 2\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase2 = (number) => {\n    return numberToBase(number, 2);\n};\n\n/**\n  * Convert a number into a string using base 3\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase3 = (number) => {\n    return numberToBase(number, 3);\n};\n\n/**\n  * Convert a number into a string using base 4\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase4 = (number) => {\n    return numberToBase(number, 4);\n};\n\n/**\n  * Convert a number into a string using base 5\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase5 = (number) => {\n    return numberToBase(number, 5);\n};\n\n/**\n  * Convert a number into a string using base 6\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase6 = (number) => {\n    return numberToBase(number, 6);\n};\n\n/**\n  * Convert a number into a string using base 7\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase7 = (number) => {\n    return numberToBase(number, 7);\n};\n\n/**\n  * Convert a number into a string using base 8\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase8 = (number) => {\n    return numberToBase(number, 8);\n};\n\n/**\n  * Convert a number into a string using base 9\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase9 = (number) => {\n    return numberToBase(number, 9);\n};\n\n/**\n  * Convert a number into a string using base 10\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase10 = (number) => {\n    return numberToBase(number, 10);\n};\n\n/**\n  * Convert a number into a string using base 11\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase11 = (number) => {\n    return numberToBase(number, 11);\n};\n\n/**\n  * Convert a number into a string using base 12\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase12 = (number) => {\n    return numberToBase(number, 12);\n};\n\n/**\n  * Convert a number into a string using base 13\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase13 = (number) => {\n    return numberToBase(number, 13);\n};\n\n/**\n  * Convert a number into a string using base 14\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase14 = (number) => {\n    return numberToBase(number, 14);\n};\n\n/**\n  * Convert a number into a string using base 15\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase15 = (number) => {\n    return numberToBase(number, 15);\n};\n\n/**\n  * Convert a number into a string using base 16\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase16 = (number) => {\n    return numberToBase(number, 16);\n};\n\n/**\n  * Convert a number into a string using base 17\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase17 = (number) => {\n    return numberToBase(number, 17);\n};\n\n/**\n  * Convert a number into a string using base 18\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase18 = (number) => {\n    return numberToBase(number, 18);\n};\n\n/**\n  * Convert a number into a string using base 19\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase19 = (number) => {\n    return numberToBase(number, 19);\n};\n\n/**\n  * Convert a number into a string using base 20\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase20 = (number) => {\n    return numberToBase(number, 20);\n};\n\n/**\n  * Convert a number into a string using base 21\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberToBase21 = (number) => {\n    return numberToBase(number, 21);\n};\n\n/**\n  * Convert a number into a string using base 22\n  *\n  * @param {Number} number\n  * @return {String}\n  */\nconst numberTo"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  let s = (a*a*h) / (12);\n  return s;\n}\n\n/*Given area of a triangle return the length of the hypotenuse.\n  >>> trianglesLengths(7.5, 3)\n  5\n  */\nconst trianglesLengths = (a, h) => {\n  let l = Math.sqrt( (a*a) + (h*h) );\n  return l;\n}\n\n/*Given the area of a triangle return the perimeter.\n  >>> trianglesPerimeters(7.5, 3)\n  15\n  */\nconst trianglesPerimeters = (a, h) => {\n  let s = (2*a) + (2*h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesArea = (a, h) => {\n  let s = (a*a) + (h*h) - (2*a*h);\n  return s;\n}\n\n/*Given the sides of a triangle return the hypotenuse.\n  >>> trianglesHypotenuse(5, 3)\n  3.1622776\n  */\nconst trianglesHypotenuse = (a, h) => {\n  let h1 = trianglesLengths(a, h);\n  return h1;\n}\n\n/*Given the perimeter of a triangle return the sides.\n  >>> trianglesSides(15, 3)\n  [5, 3]\n  */\nconst trianglesSides = (p, h) => {\n  let s = [];\n  for (let i = 0; i < p; i++) {\n    s.push(trianglesLengths(trianglesPerimeters(p, h)));\n  }\n  return s;\n}\n\n/*Given the area of a triangle return the sides.\n  >>> trianglesSides(trianglesArea(5, 3), 3)\n  [5, 3]\n  */\nconst trianglesSidesArea = (a, h) => {\n  let s = [];\n  for (let i = 0; i < a; i++) {\n    s.push(trianglesLengths(trianglesPerimeters(a, h)));\n  }\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the perimeter of the triangle.\n  >>> trianglesPerimeter(5, 3)\n  5\n  */\nconst trianglesPerimeter = (a, h) => {\n  let p = trianglesPerimeters(a, h);\n  return p;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the hypotenuse of the triangle.\n  >>> trianglesHypotenuse(5, 3)\n  3.1622776\n  */\nconst trianglesHypotenuseArea = (a, h) => {\n  let h1 = trianglesHypotenuse(a, h);\n  return h1;\n}\n\n/*Given a triangle return the hypotenuse of the triangle.\n  >>> trianglesHypotenuse(5, 3)\n  3.1622776\n  */\nconst trianglesHypotenuseArea = (a, h) => {\n  let h1 = trianglesHypotenuse(a, h);\n  return h1;\n}\n\n/*Given a triangle return the perimeter of the triangle.\n  >>> trianglesPerimeter(5, 3)\n  5\n  */\nconst trianglesPerimeterArea = (a, h) => {\n  let p = trianglesPerimeter(a, h);\n  return p;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle.\n  >>> trianglesArea(5, 3)\n  5\n  */\nconst trianglesAreaArea = (a, h) => {\n  let s = trianglesArea(a, h);\n  return s;\n}\n\n/*Given a triangle return the area of the triangle."}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    let f1 = 0, f2 = 1;\n    for (let i = 0; i < n; i++) {\n        let tmp = f1;\n        f1 = f2;\n        f2 = tmp + f1 + f2;\n    }\n    return f2;\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let length = l.length;\n  if (length === 0) {\n    return NaN;\n  }\n\n  if (length === 1) {\n    return l[0];\n  }\n\n  const half = length / 2;\n  let sorted_l = l.slice(0);\n  sorted_l.sort((a, b) => a - b);\n\n  if (length % 2 === 1) {\n    return sorted_l[half];\n  } else {\n    return (sorted_l[half - 1] + sorted_l[half]) / 2;\n  }\n};\n\nexport {\n  median\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let chars = text.split('')\n  return chars.reverse().join('') === text\n}\n\nmodule.exports = isPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p;\n};\n\n/*Return the greatest common divisor of two numbers.\n  >>> gcd(3, 6)\n  3\n  >>> gcd(1, 2)\n  1\n  >>> gcd(5, 10)\n  5\n  >>> gcd(9, 3)\n  3\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, -1)\n  1\n  >>> gcd(0, -1)\n  0\n  >>> gcd(-1, -1)\n  1\n  */\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n/*Return the greatest common divisor of n numbers.\n  >>> gcd_n(3, 6)\n  3\n  >>> gcd_n(1, 2)\n  1\n  >>> gcd_n(5, 10)\n  5\n  >>> gcd_n(9, 3)\n  3\n  >>> gcd_n(0, 0)\n  0\n  >>> gcd_n(1, 0)\n  1\n  >>> gcd_n(1, -1)\n  1\n  >>> gcd_n(0, -1)\n  0\n  >>> gcd_n(-1, -1)\n  1\n  */\nconst gcd_n = (n,...args) => {\n  return gcd(...args);\n};\n\n/*Return the inverse of a number modulo p.\n  >>> inv(5, 11)\n  6\n  >>> inv(0, 11)\n  0\n  >>> inv(1, 11)\n  0\n  >>> inv(2, 11)\n  2\n  >>> inv(3, 11)\n  3\n  >>> inv(4, 11)\n  4\n  >>> inv(5, 11)\n  5\n  >>> inv(6, 11)\n  6\n  >>> inv(7, 11)\n  7\n  >>> inv(8, 11)\n  8\n  >>> inv(9, 11)\n  9\n  >>> inv(10, 11)\n  10\n  >>> inv(11, 11)\n  11\n  >>> inv(12, 11)\n  0\n  >>> inv(13, 11)\n  0\n  >>> inv(14, 11)\n  0\n  >>> inv(15, 11)\n  0\n  >>> inv(16, 11)\n  0\n  >>> inv(17, 11)\n  0\n  >>> inv(18, 11)\n  0\n  >>> inv(19, 11)\n  0\n  >>> inv(20, 11)\n  0\n  >>> inv(21, 11)\n  0\n  >>> inv(22, 11)\n  0\n  >>> inv(23, 11)\n  0\n  >>> inv(24, 11)\n  0\n  >>> inv(25, 11)\n  0\n  >>> inv(26, 11)\n  0\n  >>> inv(27, 11)\n  0\n  >>> inv(28, 11)\n  0\n  >>> inv(29, 11)\n  0\n  >>> inv(30, 11)\n  0\n  >>> inv(31, 11)\n  0\n  >>> inv(32, 11)\n  0\n  >>> inv(33, 11)\n  0\n  >>> inv(34, 11)\n  0\n  >>> inv(35, 11)\n  0\n  >>> inv(36, 11)\n  0\n  >>> inv(37, 11)\n  0\n  >>> inv(38, 11)\n  0\n  >>> inv(39, 11)\n  0\n  >>> inv(40, 11)\n  0\n  >>> inv(41, 11)\n  0\n  >>> inv(42, 11)\n  0\n  >>> inv(43, 11)\n  0\n  >>> inv(44, 11)\n  0\n  >>> inv(45, 11)\n  0\n  >>> inv(46, 11)\n  0\n  >>> inv(47, 11)\n  0\n  >>> inv(48, 11)\n  0\n  >>> inv(49, 11)\n  0\n  >>> inv(50, 11)\n  0\n  >>> inv(51, 11)\n  0\n  >>> inv(52, 11)\n  0\n  >>> inv(53, 11)\n  0\n  >>> inv(54, 11)\n  0\n  >>> inv(55, 11)\n  0\n  >>> inv(56, 11)\n  0\n  >>> inv(57, 11)\n  0\n  >>> inv(58, 11)\n  0\n  >>> inv(59, 11)\n  0\n  >>> inv(60, 11)\n  0\n  >>> inv(61, 11)\n  0\n  >>> inv(62, 11)\n  0\n  >>> inv(63, 11)\n  0\n  >>> inv(64, 11)\n  0\n  >>> inv(65, 11)\n  0\n  >>> inv(66, 11)\n  0\n  >>> inv(67, 11)\n  0\n  >>> inv(68, 11)\n  0\n  >>> inv(69, 11)\n  0\n  >>> inv(70, 11)\n  0\n  >>> inv(71, 11)\n  0\n  >>> inv(72, 11)\n  0\n  >>> inv(73, 11)\n  0\n  >>> inv(74, 11)\n  0\n  >>> inv(75, 11)\n  0\n  >>> inv(76, 11)\n  0\n  >>> inv(77, 11)\n  0\n  >>> inv(78, 11)\n  0\n  >>> inv(79, 11)\n  0\n  >>> inv(80, 11)\n  0\n  >>> inv(81, 11)\n  0\n  >>> inv(82, 11)\n  0\n  >>> inv(83, 11)\n  0\n  >>> inv(84, 11)\n  0\n  >>> inv(85, 11)\n  0\n  >>> inv(86, 11)\n  0\n"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(ch.charCodeAt(0) + \"a\".charCodeAt(0))).join(\"\");\n}\n\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(ch.charCodeAt(0) - \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  returns an array with all the strings\n  */\nconst createArray = (s) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    arr.push(s[i]);\n  }\n  return arr;\n}\n\n/*\n  returns a string with all the strings in an array\n  */\nconst createString = (arr) => {\n  const str = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    str += arr[i];\n  }\n  return str;\n}\n\n/*\n  returns a string with all the strings in an array in an encoded form\n  */\nconst createEncodedString = (arr) => {\n  const str = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    str += encodeShift(arr[i]);\n  }\n  return str;\n}\n\nconst test = () => {\n  let encoded_str = \"\";\n  for (let i = 0; i < \"Hello World\".length; i++) {\n    encoded_str += encodeShift(\"Hello World\".charAt(i));\n  }\n  console.log(decodeShift(encoded_str));\n  console.log(decodeShift(\"Hello World\".charAt(0)));\n  console.log(decodeShift(\"Hello World\".charAt(1)));\n  console.log(decodeShift(\"Hello World\".charAt(2)));\n  console.log(decodeShift(\"Hello World\".charAt(3)));\n}\n\n/*\n  returns a string with all the strings in an array in an encoded form\n  */\nconst createEncodedArray = (arr) => {\n  const encoded_str = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    encoded_str += encodeShift(arr[i]);\n  }\n  return encoded_str;\n}\n\nconst test2 = () => {\n  let encoded_str = \"\";\n  for (let i = 0; i < \"Hello World\".length; i++) {\n    encoded_str += encodeShift(\"Hello World\".charAt(i));\n  }\n  console.log(decodeShift(encoded_str));\n  console.log(decodeShift(\"Hello World\".charAt(0)));\n  console.log(decodeShift(\"Hello World\".charAt(1)));\n  console.log(decodeShift(\"Hello World\".charAt(2)));\n  console.log(decodeShift(\"Hello World\".charAt(3)));\n}\n\nconst test3 = () => {\n  let encoded_str = \"\";\n  for (let i = 0; i < \"Hello World\".length; i++) {\n    encoded_str += encodeShift(\"Hello World\".charAt(i));\n  }\n  console.log(decodeShift(encoded_str));\n  console.log(decodeShift(\"Hello World\".charAt(0)));\n  console.log(decodeShift(\"Hello World\".charAt(1)));\n  console.log(decodeShift(\"Hello World\".charAt(2)));\n  console.log(decodeShift(\"Hello World\".charAt(3)));\n}\n\nconst test4 = () => {\n  let encoded_str = \"\";\n  for (let i = 0; i < \"Hello World\".length; i++) {\n    encoded_str += encodeShift(\"Hello World\".charAt(i));\n  }\n  console.log(decodeShift(encoded_str));\n  console.log(decodeShift(\"Hello World\".charAt(0)));\n  console.log(decodeShift(\"Hello World\".charAt(1)));\n  console.log(decodeShift(\"Hello World\".charAt(2)));\n  console.log(decodeShift(\"Hello World\".charAt(3)));\n}\n\nconst test5 = () => {\n  let encoded_str = \"\";\n  for (let i = 0; i < \"Hello World\".length; i++) {\n    encoded_str += encodeShift(\"Hello World\".charAt(i));\n  }\n  console.log(decodeShift(encoded_str));\n  console.log(decodeShift(\"Hello World\".charAt(0)));\n  console.log(decodeShift(\"Hello World\".charAt(1)));\n  console.log(decodeShift(\"Hello World\".charAt(2)));\n  console.log(decodeShift(\"Hello World\".charAt(3)));\n}\n\nconst test6 = () => {\n  let encoded_str = \"\";\n  for (let i = 0; i < \"Hello World\".length; i++) {\n    encoded_str += encodeShift(\"Hello World\".charAt(i));\n  }\n  console.log(decodeShift(encoded_str));\n  console.log(decodeShift(\"Hello World\".charAt(0)));\n  console.log(decodeShift(\"Hello World\".charAt(1)));\n  console.log(decodeShift(\"Hello World\".charAt(2)));\n  console.log(decodeShift(\"Hello World\".charAt(3)));\n}\n\nconst test7 = () => {\n  let encoded_str = \"\";\n  for"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n    return text.replace(/[aeiou]/g, '');\n}\n\n/*\n  isVowel is a function that takes string and returns boolean.\n  >>> isVowel('abcd')\n  False\n  >>> isVowel('Z')\n  True\n  >>> isVowel('aaBAA')\n  True\n  >>> isVowel('bbC')\n  True\n  >>> isVowel('abcd')\n  True\n  >>> isVowel('z')\n  False\n  */\nconst isVowel = (text) => {\n    return /[aeiou]/i.test(text);\n}\n\n/*\n  replaceVowel is a function that takes string and returns string with\n  all vowels replaced by consonants.\n  >>> replaceVowel('')\n  ''\n  >>> replaceVowel('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> replaceVowel('abcdef')\n  'bcdf'\n  >>> replaceVowel('aaaaa')\n  'aaaaa'\n  >>> replaceVowel('aaBAA')\n  'B'\n  >>> replaceVowel('zbcd')\n  'zbcd'\n  */\nconst replaceVowel = (text) => {\n    return text.replace(/[aeiou]/g, 'a');\n}\n\n/*\n  reverse is a function that takes string and returns reversed string.\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdef')\n  'abcdef'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aaBAA')\n  'AABA'\n  >>> reverse('abc')\n  'abc'\n  */\nconst reverse = (text) => {\n    return text.split('').reverse().join('');\n}\n\n/*\n  removeSpace is a function that takes string and returns string without spaces.\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace('a b c')\n  'abc'\n  >>> removeSpace(' a b c')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace('')\n  ''\n  >>> removeSpace('aaBAA')\n  'BAA'\n  >>> removeSpace('a b c')\n  'abc'\n  >>> removeSpace(' a b c')\n  'abc'\n  >>> removeSpace(' abc')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace('a b c ')\n  'abc'\n  >>> removeSpace('abc ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace('a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc'\n  >>> removeSpace(' a b c ')\n  'abc"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowThresholds;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n}\n\n/* Subtract two numbers x and y\n  >>> subtracting(2, 3)\n  1\n  >>> subtracting(5, 7)\n  4\n  */\nconst subtracting = (x, y) => {\n  return x - y;\n}\n\n/* Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  21\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n}\n\n/* Divide two numbers x and y\n  >>> dividing(2, 3)\n  0.666666666666667\n  >>> dividing(5, 7)\n  2.4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n}\n\n/* Modulo two numbers x and y\n  >>> modulo(2, 3)\n  2\n  >>> modulo(5, 7)\n  0\n  */\nconst modulo = (x, y) => {\n  return x % y;\n}\n\n/* Factorial\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  >>> factorial(25)\n  161299280\n  >>> factorial(100)\n  332621544394415268169923885626974469492310953572480000000000000000000000000000000\n  */\nconst factorial = (x) => {\n  let num = 1;\n  for (let i = 1; i <= x; i++) {\n    num = num * i;\n  }\n  return num;\n}\n\n/* Factorial of n^2\n  >>> factorial_of_n_square(1)\n  1\n  >>> factorial_of_n_square(2)\n  4\n  >>> factorial_of_n_square(3)\n  9\n  >>> factorial_of_n_square(4)\n  16\n  >>> factorial_of_n_square(5)\n  25\n  >>> factorial_of_n_square(6)\n  36\n  >>> factorial_of_n_square(7)\n  49\n  >>> factorial_of_n_square(8)\n  64\n  >>> factorial_of_n_square(9)\n  81\n  >>> factorial_of_n_square(10)\n  100\n  >>> factorial_of_n_square(11)\n  121\n  >>> factorial_of_n_square(12)\n  144\n  >>> factorial_of_n_square(13)\n  169\n  >>> factorial_of_n_square(14)\n  196\n  >>> factorial_of_n_square(15)\n  225\n  >>> factorial_of_n_square(16)\n  256\n  >>> factorial_of_n_square(17)\n  289\n  >>> factorial_of_n_square(18)\n  324\n  >>> factorial_of_n_square(19)\n  361\n  >>> factorial_of_n_square(20)\n  396\n  >>> factorial_of_n_square(21)\n  441\n  >>> factorial_of_n_square(22)\n  484\n  >>> factorial_of_n_square(23)\n  529\n  >>> factorial_of_n_square(24)\n  576\n  >>> factorial_of_n_square(25)\n  625\n  >>> factorial_of_n_square(26)\n  686\n  >>> factorial_of_n_square(27)\n  729\n  >>> factorial_of_n_square(28)\n  784\n  >>> factorial_of_n_square(29)\n  841\n  >>> factorial_of_n_square(30)\n  896\n  >>> factorial_of_n_square(31)\n  955\n  >>> factorial_of_n_square(32)\n  1020\n  >>> factorial_of_n_square(33)\n  1087\n  >>> factorial_of_n_square(34)\n  1144\n  >>> factorial_of_n_square(35)\n  1211\n  >>> factorial_of_n_square(36)\n  1268\n  >>> factorial_of_n_square(37)\n  1325\n  >>> factorial_of_n_square(38)\n  1392\n  >>> factorial_of_n_square(39)\n  1449\n  >>> factorial_of_n_square(40)\n  1516\n  >>> factorial_of_n_square(41)\n  1585\n  >>> factorial_of_n_square(42)\n  1654\n  >>> factorial_of_n_square(43)\n  1723\n  >>> factorial_of_n_square(44)\n  1792\n  >>> factorial_of_n_square(45)\n  1859\n  >>> factorial_of_n_square(46)\n  1926\n  >>> factorial_of_n_square(47)\n  1995\n  >>> factorial_of_n_square(48)\n  2060\n  >>> factorial_of_n_square(49)\n  2129\n  >>> factorial_of_n_square(50)\n  2216\n  >>> factorial_of_n_square(51)\n  2293\n  >>> factorial_of_n_square(52)\n  2360\n  >>> factorial_of_n_square(53)\n  2427\n  >>> factorial_of_n_square(54)\n  2494\n  >>> factorial_of_n_square(55)\n  2561\n  >>> factorial_of_n_square(56)\n  2628\n  >>> factorial_of_n_square(57)\n  2695\n  >>> factorial_of_n_square(58)\n  2762\n  >>> factorial_of_n_square(59)\n  2829\n  >>> factorial_of_n_square(60)\n  2896\n  >>> factorial_of_n_square(61)\n  "}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  let i, j;\n  if (s0 === s1) {\n    return true;\n  }\n\n  if (s0.length!== s1.length) {\n    return false;\n  }\n\n  for (i = 0, j = 0; i < s0.length; i += 1, j += 1) {\n    if (s0.charAt(i)!== s1.charAt(j)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = sameChar;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibs(n - 1) + fibs(n - 2)\n}\n\nexport default fibs\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  let bracketsLength = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(i);\n      bracketsLength++;\n    } else if (brackets[i] === \">\") {\n      const bracketsLengthDiff = bracketsLength - stack.pop();\n      if (bracketsLengthDiff!== 1) {\n        return false;\n      }\n      bracketsLength--;\n    }\n  }\n  return bracketsLength === 0;\n};\n\nconst isValid = brackets => correctBracketing(brackets);\n\nexport default isValid;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    let i = 1;\n    let isMonotonic = true;\n    while (i < l.length) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic = false;\n        }\n        i++;\n    }\n    return isMonotonic;\n};\n\nmodule.exports = monotonic;<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const {\n    slice: _slice,\n    length: _length\n  } = _slice(l1);\n  const {\n    slice: _slice,\n    length: _length\n  } = _slice(l2);\n\n  if (_length(l1)!== _length(l2)) {\n    return [];\n  }\n\n  const index = [];\n  const {\n    slice: _slice,\n    length: _length\n  } = _slice(l1);\n  for (let i = 0; i < _length(l1); i++) {\n    const v = _slice(l1, i);\n    if (v in l2) {\n      index.push(v);\n    }\n  }\n  return index;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  const divisors = []\n  const factors = []\n\n  // Get the first two primes\n  const prime1 = nextPrime(2)\n  const prime2 = nextPrime(prime1)\n\n  // Loop through all the possible values of n\n  for (let i = prime1; i < prime2; i++) {\n    // If n % i is zero, then i is a factor\n    if (n % i === 0) {\n      // Add i to the array of factors\n      factors.push(i)\n      // Get the largest prime factor of i\n      const largestPrimeFactor = largestPrimeFactor(i)\n      // Check if largestPrimeFactor is equal to i\n      if (largestPrimeFactor === i) {\n        // Add largestPrimeFactor to the array of divisors\n        divisors.push(largestPrimeFactor)\n      } else {\n        // Add largestPrimeFactor to the array of divisors\n        divisors.push(largestPrimeFactor)\n      }\n    }\n  }\n  // Sort the array of divisors\n  const sortedDivisors = sorted(divisors)\n  // If the largest prime factor is not 1, then return largestPrimeFactor\n  // Else return the largest prime factor\n  return sortedDivisors[0] || largestPrimeFactor(n)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  const sums = [];\n  for (let i = 1; i <= n; i++) {\n    sums.push(i);\n  }\n  return sums;\n};\n\n// END - Sums to n\n// BEGIN - Sums to n, using map\nconst mapSum = (n) => {\n  const sums = [];\n  const nums = new Array(n + 1);\n  for (let i = 1; i <= n; i++) {\n    sums.push(i);\n    nums[i] = i;\n  }\n  const result = sums.map((sum, index) => {\n    const leftSum = sum;\n    const rightSum = sums[index + 1] - sum;\n    return nums[leftSum] + nums[rightSum];\n  });\n  return result;\n};\n\n// END - Sums to n, using map\n// BEGIN - Sums to n, using reduce\nconst reduceSum = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  return sums.reduce((sum1, sum2) => sum1 + sum2);\n};\n\n// END - Sums to n, using reduce\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap2 = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap3 = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2, 0);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap4 = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2, 0);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap5 = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2, 0);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap6 = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2, 0);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap7 = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2, 0);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap8 = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2, 0);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap9 = (n) => {\n  const sums = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sums.push(sum);\n  }\n  const result = sums.reduce((sum1, sum2) => sum1 + sum2, 0);\n  return result;\n};\n\n// END - Sums to n, using reduce, with a map\n// BEGIN - Sums to n, using reduce, with a map\nconst reduceSumMap10 = (n) => {\n  const sums = [];"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i]\n\n    if (bracket === \"(\") {\n      stack.push(\"(\")\n    } else if (bracket === \")\") {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1]!== \"(\" && stack[stack.length - 1]!== \")\") {\n        return false\n      }\n      stack.pop()\n    }\n  }\n\n  return stack.length === 0\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    const len = xs.length\n    const dx = [1]\n    let d = [0]\n    for (let i = 0; i < len; i++) {\n        const x = xs[i]\n        d[i] = dx[i] * (len - i)\n        for (let j = i + 1; j < len; j++) {\n            d[j] += x * dx[i]\n        }\n    }\n    return d\n}\n\n/* Return polynomial that is x^n, where n is integer\n  >>> n = 3\n  >>> x^n\n  [1, 1, 1]\n  >>> derivative([1, 1, 1])\n  [0, 2]\n  */\nconst xN = (n) => {\n    const len = n + 1\n    const d = [1]\n    for (let i = 1; i < len; i++) {\n        d[i] = i\n    }\n    return d\n}\n\nconst fib = (n) => {\n    let f = 1\n    let f2 = 1\n    if (n === 0) {\n        return f\n    } else if (n === 1) {\n        return f2\n    } else {\n        for (let i = 0; i < n; i++) {\n            f2 = f\n            f = f2 + f\n        }\n        return f\n    }\n}\n\nconst fibDerivative = (n) => {\n    let f = 0\n    let f2 = 1\n    if (n === 0) {\n        return f\n    } else if (n === 1) {\n        return f2\n    } else {\n        for (let i = 0; i < n; i++) {\n            f2 = f\n            f = f2 + f\n        }\n        return (f - f2) / n\n    }\n}\n\nconst fibDerivative2 = (n) => {\n    let f = 1\n    let f2 = 1\n    if (n === 0) {\n        return f\n    } else if (n === 1) {\n        return f2\n    } else {\n        for (let i = 0; i < n; i++) {\n            f2 = f\n            f = f2 + f\n        }\n        return (f - f2) / n\n    }\n}\n\nconst fibDerivative3 = (n) => {\n    let f = 1\n    let f2 = 1\n    let f3 = 1\n    if (n === 0) {\n        return f\n    } else if (n === 1) {\n        return f2\n    } else if (n === 2) {\n        return f3\n    } else {\n        for (let i = 0; i < n; i++) {\n            f3 = f2\n            f2 = f\n            f = f2 + f\n        }\n        return (f - f2 - f3) / (n * (n - 1))\n    }\n}\n\nconst fibDerivative4 = (n) => {\n    let f = 1\n    let f2 = 1\n    let f3 = 1\n    let f4 = 1\n    if (n === 0) {\n        return f\n    } else if (n === 1) {\n        return f2\n    } else if (n === 2) {\n        return f3\n    } else if (n === 3) {\n        return f4\n    } else {\n        for (let i = 0; i < n; i++) {\n            f4 = f3\n            f3 = f2\n            f2 = f\n            f = f2 + f\n        }\n        return (f - f2 - f3 - f4) / (n * (n - 1) * (n - 2))\n    }\n}\n\nconst fibDerivative5 = (n) => {\n    let f = 1\n    let f2 = 1\n    let f3 = 1\n    let f4 = 1\n    let f5 = 1\n    if (n === 0) {\n        return f\n    } else if (n === 1) {\n        return f2\n    } else if (n === 2) {\n        return f3\n    } else if (n === 3) {\n        return f4\n    } else if (n === 4) {\n        return f5\n    } else {\n        for (let i = 0; i < n; i++) {\n            f5 = f4\n            f4 = f3\n            f3 = f2\n            f2 = f\n            f = f2 + f\n        }\n        return (f - f2 - f3 - f4 - f5) / (n * (n - 1) * (n - 2) * (n - 3))\n    }\n}\n\nconst fibDerivative6 = (n) => {\n    let f = 1\n    let f2 = 1\n    let f3 = 1\n    let f4 = 1\n    let f5 = 1\n    let f6 = 1\n    if (n === 0) {\n        return f\n    } else if (n === 1) {\n        return f2\n    } else if (n === 2) {\n        return f3\n    } else if (n === 3) {\n        return f4\n    } else if (n === 4) {\n        return f5\n    } else if (n === 5) {\n        return f6\n    } else {\n        for (let i = 0; i < n; i++) {\n            f6 = f5\n            f5 = f4\n            f4 = f3\n            f3 = f2\n            f2 = f\n            f = f2 + f\n        }\n        return (f - f2 - f3 - f4 - f5 - f6) / (n * (n - 1) * (n - 2) * (n - 3) * (n - 4))\n    }\n}\n\nconst fibDerivative7 = (n) => {\n    let f = 1\n    let f2 = 1\n    let f3 = 1\n    let f4 = 1\n    let f5 = 1"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  if (s === '') return 0\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[aeiou]/)) {\n      count++\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      count++\n    }\n  }\n  return count\n}\n\n// Test\nconsole.log(vowelCount('abc'))\nconsole.log(vowelCount('a'))\nconsole.log(vowelCount('a'))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    if (x === 0 || shift === 0) {\n        return x\n    }\n    const len = x.length\n    const newDigits = x.slice(0, shift)\n    const shiftLen = len - shift\n    const lastDigits = x.slice(len - shift)\n    const newStr = newDigits.concat(lastDigits)\n    return newStr.reverse().join('')\n}\n\n/**\n  * Given a number, return a string representation of the number with the digits\n  * left to right, the last digit first.\n  *\n  * For example, if num = 1234, then return \"1234\"\n  *\n  * >>> convertToLeft(1234)\n  * \"1234\"\n  * >>> convertToLeft(3456)\n  * \"3456\"\n  * >>> convertToLeft(0)\n  * \"0\"\n  * >>> convertToLeft(9)\n  * \"9\"\n  *\n  * >>> convertToLeft(4567)\n  * \"4567\"\n  *\n  * >>> convertToLeft(1234567)\n  * \"1234567\"\n  * >>> convertToLeft(123456789)\n  * \"123456789\"\n  *\n  * @param {Number} num - The number to convert\n  * @return {string} - The number as a string\n  *\n  * @example\n  * convertToLeft(1234)\n  * // => \"1234\"\n  *\n  * @example\n  * convertToLeft(3456)\n  * // => \"3456\"\n  *\n  * @example\n  * convertToLeft(0)\n  * // => \"0\"\n  *\n  * @example\n  * convertToLeft(9)\n  * // => \"9\"\n  *\n  * @example\n  * convertToLeft(4567)\n  * // => \"4567\"\n  *\n  * @example\n  * convertToLeft(1234567)\n  * // => \"1234567\"\n  *\n  * @example\n  * convertToLeft(123456789)\n  * // => \"123456789\"\n  */\nconst convertToLeft = num => {\n    if (num === 0) {\n        return '0'\n    }\n    const len = num.toString().length\n    const left = num.toString()\n    const right = circularShift(num, len)\n    return left + right\n}\n\n/**\n  * Given a number, return a string representation of the number with the digits\n  * right to left, the first digit first.\n  *\n  * For example, if num = 1234, then return \"1234\"\n  *\n  * >>> convertToRight(1234)\n  * \"1234\"\n  * >>> convertToRight(3456)\n  * \"4536\"\n  * >>> convertToRight(0)\n  * \"0\"\n  * >>> convertToRight(9)\n  * \"9\"\n  *\n  * >>> convertToRight(4567)\n  * \"4567\"\n  *\n  * >>> convertToRight(1234567)\n  * \"1234\"\n  * >>> convertToRight(123456789)\n  * \"01234\"\n  *\n  * @param {Number} num - The number to convert\n  * @return {string} - The number as a string\n  *\n  * @example\n  * convertToRight(1234)\n  * // => \"1234\"\n  *\n  * @example\n  * convertToRight(3456)\n  * // => \"3456\"\n  *\n  * @example\n  * convertToRight(0)\n  * // => \"0\"\n  *\n  * @example\n  * convertToRight(9)\n  * // => \"9\"\n  *\n  * @example\n  * convertToRight(4567)\n  * // => \"4567\"\n  *\n  * @example\n  * convertToRight(1234567)\n  * // => \"234567\"\n  *\n  * @example\n  * convertToRight(123456789)\n  * // => \"7891234\"\n  */\nconst convertToRight = num => {\n    if (num === 0) {\n        return '0'\n    }\n    const len = num.toString().length\n    const left = circularShift(num, len)\n    const right = num.toString()\n    return right + left\n}\n\nmodule.exports = {\n    circularShift,\n    convertToLeft,\n    convertToRight\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n    const chars = s.split('').map(e => e.charCodeAt(0));\n    return chars.reduce((acc, cur) => {\n        return acc + (cur - 65);\n    }, 0);\n};\n\nmodule.exports = digitSums;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const apples = s.split(' ').filter(i => i.length > 0);\n  const oranges = s.split(' ').filter(i => i.length > 0).filter(i => i!== apples[0]);\n\n  let mangoFruits = apples.reduce((a, b) => {\n    if (a > 0) {\n      a--;\n      return a;\n    }\n    if (b > 0) {\n      b--;\n      return b;\n    }\n    return 0;\n  }, n);\n\n  return mangoFruits;\n};\n\nfruitDistribution(\"5 apples and 6 oranges\", 19);\nfruitDistribution(\"0 apples and 1 oranges\", 3);\nfruitDistribution(\"2 apples and 3 oranges\", 100);\nfruitDistribution(\"100 apples and 1 oranges\", 120);\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    arr.sort((a, b) => {\n        if (a > b) return -1;\n        if (a < b) return 1;\n        return 0;\n    });\n    let min_even = Number.MAX_VALUE;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            min_even = arr[i];\n            min_index = i;\n            break;\n        }\n    }\n    if (min_even === Number.MAX_VALUE) return [];\n    return [min_even, min_index];\n}\n\nconst test = (actual, expected) => {\n    if (actual!== expected) throw new Error(`Expected: ${expected}, but got: ${actual}`);\n}\n\ndescribe('pluck', () => {\n    test(pluck([1,2,3]), [2, 1]);\n    test(pluck([4,2,3]), [2, 1]);\n    test(pluck([1,2,3]), []);\n    test(pluck([1,2,3,4,5]), [0, 1]);\n    test(pluck([0,2,3,4,5]), [0, 1]);\n    test(pluck([0,2,3,4,5,6]), [0, 1]);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      if (lst[i] > index) {\n        index = lst[i];\n      }\n    }\n  }\n  return index;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  if (!lst ||!lst.length) {\n    return [];\n  }\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n/*\n  Given a list of numbers, return a list with unique numbers.\n  If two lists are the same, then remove one of them,\n  and add one at the end to make it unique.\n  */\nconst uniqueNums = (lst) => {\n  const sorted = lst.slice().sort();\n  const unique = [];\n  const i = sorted.length;\n  while (i--) {\n    if (unique.indexOf(sorted[i]) === -1) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst getRandomStrings = (num) => {\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let str = '';\n  while (num--) {\n    str += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return str;\n};\n\n/*\n  Given a list of strings, return a list with unique strings.\n  If two lists are the same, then remove one of them,\n  and add one at the end to make it unique.\n  */\nconst uniqueStrings = (lst) => {\n  const sorted = lst.slice().sort();\n  const unique = [];\n  const i = sorted.length;\n  while (i--) {\n    if (unique.indexOf(sorted[i]) === -1) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nconst getRandomNumbers = (num) => {\n  let possible = '0123456789';\n  let str = '';\n  while (num--) {\n    str += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return str;\n};\n\nconst isPalindrome = (str) => {\n  let i = str.length;\n  let j = 0;\n  while (i--) {\n    if (str[i]!== str[j++]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  strangerSortsLists,\n  getRandom,\n  getRandomStrings,\n  uniqueNums,\n  uniqueStrings,\n  isPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a + b + c <= c) {\n    return -1\n  }\n  if (a == b) {\n    return 0\n  }\n  if (b == c) {\n    return Math.sqrt(a * a)\n  }\n  return (Math.sqrt(a * a) + Math.sqrt(b * b) + Math.sqrt(c * c) - Math.sqrt(a * a + b * b + c * c)) / 2\n}\n\n/*\n  Given the length of a side, return the perimeter of the triangle.\n  If the length of the side is less than 0 or greater than 2, return -1\n  The area of a triangle is always greater than 0\n  */\nconst trianglesPerimeters = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return -1\n  }\n  if (a == 0 || b == 0 || c == 0) {\n    return 0\n  }\n  return a + b + c\n}\n\n/*\n  Given the length of a side, return the area of the triangle.\n  If the length of the side is less than 0 or greater than 2, return -1\n  The area of a triangle is always greater than 0\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return -1\n  }\n  if (a == 0 || b == 0 || c == 0) {\n    return 0\n  }\n  return a * b * c / 2\n}\n\n/*\n  Given the perimeter of the triangle, return the area of the triangle.\n  If the perimeter is less than 0 or greater than 2, return -1\n  The area of a triangle is always greater than 0\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return -1\n  }\n  if (a == 0 || b == 0 || c == 0) {\n    return 0\n  }\n  return a * b * c / 2\n}\n\n/*\n  Given the perimeter of the triangle, return the area of the triangle.\n  If the perimeter is less than 0 or greater than 2, return -1\n  The area of a triangle is always greater than 0\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return -1\n  }\n  if (a == 0 || b == 0 || c == 0) {\n    return 0\n  }\n  return a * b * c / 2\n}\n\n/*\n  Given the perimeter of the triangle, return the area of the triangle.\n  If the perimeter is less than 0 or greater than 2, return -1\n  The area of a triangle is always greater than 0\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return -1\n  }\n  if (a == 0 || b == 0 || c == 0) {\n    return 0\n  }\n  return a * b * c / 2\n}\n\n/*\n  Given the perimeter of the triangle, return the area of the triangle.\n  If the perimeter is less than 0 or greater than 2, return -1\n  The area of a triangle is always greater than 0\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return -1\n  }\n  if (a == 0 || b == 0 || c == 0) {\n    return 0\n  }\n  return a * b * c / 2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n    if (q.length === 0) return false;\n\n    let sum = 0;\n\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n\n    return sum <= w && q.every(q => q <= w) && q.every(q => q >= 0);\n};\n\nconst willItFlied = (q, w) => {\n    if (q.length === 0) return false;\n\n    let sum = 0;\n\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n\n    return sum <= w && q.every(q => q <= w) && q.every(q => q >= 0);\n};\n\nmodule.exports = willItFlied;<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  const len = arr.length\n  let count = 0\n  let temp = 0\n\n  for (let i = 0; i < len; i++) {\n    temp = arr[i]\n\n    for (let j = len - 1; j >= i; j--) {\n      if (arr[j] == temp) {\n        count++\n        if (count == 2) {\n          return i\n        }\n      }\n    }\n  }\n\n  return count\n}\n\nconsole.log(smallerChange([1, 2, 3, 4, 3, 2, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n\n  if (lst1Len === 0) return lst2\n  if (lst2Len === 0) return lst1\n\n  let lst = []\n\n  for (let i = 0; i < lst1Len; i++) {\n    for (let j = 0; j < lst2Len; j++) {\n      if (lst1[i] === lst2[j]) {\n        lst.push(lst1[i])\n        break\n      }\n    }\n  }\n\n  return lst\n}\n\n/*\n  Write a function that takes two lists and returns the shortest list\n  (list with the shortest number of elements).\n  If two lists have the same number of elements, return the first list.\n  */\nconst shortest = (lst1, lst2) => {\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n\n  if (lst1Len === 0) return lst2\n  if (lst2Len === 0) return lst1\n\n  let lst = []\n\n  for (let i = 0; i < lst1Len; i++) {\n    for (let j = 0; j < lst2Len; j++) {\n      if (lst1[i] === lst2[j]) {\n        lst.push(lst1[i])\n        break\n      }\n    }\n  }\n\n  if (lst.length === 0) return lst1\n\n  if (lst.length === lst1.length) return lst1\n\n  if (lst.length > lst1.length) return lst\n\n  return lst2\n}\n\nconst lst1 = ['hi', 'admin', '1', '2', '3']\nconst lst2 = ['hI', 'hi', 'hi', 'Hi', 'hi', 'admin']\n\nconsole.log(shortest(lst1, lst2))\nconsole.log(shortest(lst2, lst1))\n\n/*\n  Write a function that takes a list and returns the maximum length of the\n  elements in the list.\n  */\nconst largestLength = (lst) => {\n  if (lst.length === 0) return 0\n\n  let max = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    let len = lst[i].length\n    if (len > max) max = len\n  }\n\n  return max\n}\n\nconst lst = ['hi', 'admin', '1', '2', '3']\nconsole.log(largestLength(lst))\n\n/*\n  Write a function that takes two lists and returns the first list\n  with elements that do not exist in the second list.\n\n  If two lists have the same number of elements, return the first list.\n  */\nconst difference = (lst1, lst2) => {\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n\n  if (lst1Len === 0) return lst2\n  if (lst2Len === 0) return lst1\n\n  let lst = []\n\n  for (let i = 0; i < lst1Len; i++) {\n    for (let j = 0; j < lst2Len; j++) {\n      if (lst1[i] === lst2[j]) {\n        break\n      }\n    }\n    if (j === lst2Len) {\n      lst.push(lst1[i])\n    }\n  }\n\n  return lst\n}\n\nconst lst1 = ['hi', 'admin', '1', '2', '3']\nconst lst2 = ['hi', 'hi', 'hi', 'Hi', 'hi', 'admin']\nconsole.log(difference(lst1, lst2))\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let counter = 1;\n  let isPrime = true;\n  let divisor = 2;\n  while (counter < a) {\n    if (a % divisor === 0) {\n      isPrime = false;\n      break;\n    }\n    counter++;\n    divisor++;\n  }\n  return isPrime;\n};\n\nconst test = (a) => {\n  console.log(a);\n  console.log(isMultiplyPrime(a));\n};\n\ntest(7);\ntest(24);\ntest(30);\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const base = Math.pow(n, 1 / x)\n  return x === base? true : false\n}\n\n/*\n  Write a function to check if a number is a perfect square.\n  Return true if the number is a perfect square, and false if not.\n  A perfect square is a number which is the square of an integer and has no remainder when divided by itself.\n  For example, number 3 is a perfect square, and number 6 is not.\n  */\nconst isPerfectSquare = (n) => {\n  const x = Math.sqrt(n)\n  return x * x === n? true : false\n}\n\n/*\n  Write a function to check if a number is a power of 3.\n  Return true if the number is a power of 3, and false if not.\n  A power of 3 is a number which is a multiple of 3 (e.g. 3, 9, 15,...).\n  */\nconst isPowerOf3 = (n) => {\n  return (n % 3 === 0)? true : false\n}\n\n/*\n  Write a function to check if a number is a power of 5.\n  Return true if the number is a power of 5, and false if not.\n  A power of 5 is a number which is a multiple of 5 (e.g. 5, 25, 125, 625,...).\n  */\nconst isPowerOf5 = (n) => {\n  return (n % 5 === 0)? true : false\n}\n\n/*\n  Write a function to check if a number is a power of 2.\n  Return true if the number is a power of 2, and false if not.\n  A power of 2 is a number which is a power of 2 (e.g. 2, 4, 8,...).\n  */\nconst isPowerOf2 = (n) => {\n  return (n % 2 === 0)? true : false\n}\n\n/*\n  Write a function to check if a number is a power of 10.\n  Return true if the number is a power of 10, and false if not.\n  A power of 10 is a number which is a multiple of 10 (e.g. 10, 100, 1000,...).\n  */\nconst isPowerOf10 = (n) => {\n  return (n % 10 === 0)? true : false\n}\n\n/*\n  Write a function to check if a number is prime.\n  Return true if the number is prime, and false if not.\n  A prime number is a number which is not a multiple of any of its predecessors.\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n\n  let i = 2\n  let root = Math.sqrt(n)\n  while (i <= root) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Write a function to check if a number is a perfect number.\n  Return true if the number is a perfect number, and false if not.\n  A perfect number is a number which is an integer and has no remainder when divided by itself.\n  For example, 6 is a perfect number while 8 is not.\n  */\nconst isPerfectNumber = (n) => {\n  return (n % 1 === 0)? true : false\n}\n\n/*\n  Write a function to check if a number is a palindrome.\n  Return true if the number is a palindrome, and false if not.\n  A palindrome number is a number that reads the same backward as forward.\n  */\nconst isPalindrome = (n) => {\n  return n === String(n).split('').reverse().join('')\n}\n\n/*\n  Write a function to check if a number is a permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\n  Return true if the number is a permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\n  */\nconst isPermutation = (n) => {\n  const string = String(n)\n  return (string.split('').sort().join('') === string)? true : false\n}\n\n/*\n  Write a function to check if a number is a pandigital number.\n  Return true if the number is a pandigital number, and false if not.\n  A pandigital number is a number that consists of all the digits 0 to 9 without any repeats.\n  For example, 28 is a pandigital number while 15 is not.\n  */\nconst isPandigital = (n) => {\n  return isPermutation(n)? true : false\n}\n\n/*\n  Write a function to check if a number is an abundant number.\n  Return true if the number is an abundant number, and false if not.\n  An abundant number is a number that cannot be divided by any prime number.\n  For example, 1 is an abundant number while 6 is not.\n  */\nconst isAbundant = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n  const result = []\n  for (let i = 0; i < primes.length; i++) {\n    let product = primes[i]\n    while (product < n) {\n      result.push(product)\n      product = product * primes[i]\n    }\n  }\n  return result.indexOf(n) > -1? true : false\n}\n\n/*\n  Write a function to check if a number is a composite number.\n  Return true if the number is a composite number, and false if not.\n  A composite number is a number that cannot be divided by any prime number.\n  For example, 2 is a composite number while 28 is not.\n  */\nconst isComposite"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  const r = Math.floor(Math.sqrt(a));\n  return r * r === a;\n};\n\nconsole.log(iscube(4));\nconsole.log(iscube(16));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n    let count = 0;\n    let keys = [];\n    for (let i = 0; i < num.length; i++) {\n        let currentChar = num.charAt(i);\n        if (isHexChar(currentChar)) {\n            keys.push(parseInt(currentChar, 16));\n        }\n    }\n    keys.sort();\n    for (let i = 0; i < keys.length; i++) {\n        let currentKey = keys[i];\n        if (currentKey > 1) {\n            let nextKey = keys[i + 1];\n            if (nextKey > 1) {\n                let currentValue = keys[i] * nextKey;\n                if (currentValue > 100) {\n                    count += currentValue;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconsole.log(hexesKeys(\"AB\"));\nconsole.log(hexesKeys(\"1077E\"));\nconsole.log(hexesKeys(\"ABED1A33\"));\nconsole.log(hexesKeys(\"123456789ABCDEF0\"));\nconsole.log(hexesKeys(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = \"\";\n  for (let i = 0; i < decimal.length; i++) {\n    binary += decimal[i] === 1? \"1\" : \"0\";\n  }\n  binary = \"db\" + binary + \"db\";\n  return binary;\n}\n\n//Decimal to Binary Conversion\n\nconsole.log(decimalsToBinary(15));\nconsole.log(decimalsToBinary(32));\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  const len = s.length;\n  if (len < 3) {\n    return false;\n  }\n\n  const isHappy = [];\n  for (let i = 0; i < len; i++) {\n    if (isHappy.indexOf(s[i]) === -1) {\n      isHappy.push(s[i]);\n    } else {\n      return false;\n    }\n  }\n\n  return isHappy.length >= 3 && isHappy.every((x, index) => isHappy[index + 1]!== x);\n};\n\nisHappiest(\"\");\nisHappiest(\"a\");\nisHappiest(\"aa\");\nisHappiest(\"abcd\");\nisHappiest(\"aabb\");\nisHappiest(\"adb\");\nisHappiest(\"xyy\");\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradeDict = {\n    'A+': 1,\n    'A': 2,\n    'B+': 3,\n    'B': 4,\n    'C+': 5,\n    'C': 6,\n    'D+': 7,\n    'D': 8,\n    'E': 9,\n    'F': 10,\n  };\n  return Object.keys(gradeDict).map(key => gradeDict[key]).filter(x => grades.includes(x)).join('');\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('Expected a string, got'+ typeof string);\n  }\n\n  return!(/^\\d+$/.test(string) ||!isPrime(string));\n};\n\n/*\n  Write a function that takes an array of ints and returns true if the sum of\n  its elements is a prime number or false otherwise\n  Examples\n  primeSum({1, 2, 3}) == true\n  primeSum({1, 2, 5}) == true\n  primeSum({1, 2, 7, 3, 5, 9}) == true\n  primeSum({1, 2, 7, 3, 5, 9, 7}) == false\n  primeSum({1, 2, 7, 3, 5, 9, 7, 2, 5}) == false\n  primeSum({1, 2, 7, 3, 5, 9, 7, 2, 5, 7}) == false\n  primeSum({1, 2, 7, 3, 5, 9, 7, 2, 5, 7, 3, 5}) == false\n  primeSum({1, 2, 7, 3, 5, 9, 7, 2, 5, 7, 3, 5, 7, 2, 5}) == false\n*/\nconst primeSum = (array) => {\n  if (Array.isArray(array) && array.every(Number.isInteger)) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n      sum += array[i];\n    }\n\n    return isPrime(sum);\n  }\n\n  return false;\n};\n\nmodule.exports = {\n  primeLength,\n  primeSum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  const start = n;\n  const end = n - 1;\n  const sum = n * (n - 1);\n  let count = 0;\n  for (let i = start; i <= end; i++) {\n    if (i === 1) {\n      count += sum;\n    }\n    count += i;\n  }\n  return count;\n};\n\nconst startOneEnds_test = [\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n  40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n  59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n  78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n  97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,\n  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,\n  127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\n  142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,\n  157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,\n  172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,\n  187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,\n  202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n  217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\n  232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,\n  247, 248, 249, 250, 251, 252, 253, 254, 255\n].map((x) => x);\n\nconsole.log(startOneEnds(2));\nconsole.log(startOneEnds(3));\nconsole.log(startOneEnds(4));\nconsole.log(startOneEnds(5));\nconsole.log(startOneEnds(6));\nconsole.log(startOneEnds(7));\nconsole.log(startOneEnds(8));\nconsole.log(startOneEnds(9));\nconsole.log(startOneEnds(10));\nconsole.log(startOneEnds(11));\nconsole.log(startOneEnds(12));\nconsole.log(startOneEnds(13));\nconsole.log(startOneEnds(14));\nconsole.log(startOneEnds(15));\nconsole.log(startOneEnds(16));\nconsole.log(startOneEnds(17));\nconsole.log(startOneEnds(18));\nconsole.log(startOneEnds(19));\nconsole.log(startOneEnds(20));\nconsole.log(startOneEnds(21));\nconsole.log(startOneEnds(22));\nconsole.log(startOneEnds(23));\nconsole.log(startOneEnds(24));\nconsole.log(startOneEnds(25));\nconsole.log(startOneEnds(26));\nconsole.log(startOneEnds(27));\nconsole.log(startOneEnds(28));\nconsole.log(startOneEnds(29));\nconsole.log(startOneEnds(30));\nconsole.log(startOneEnds(31));\nconsole.log(startOneEnds(32));\nconsole.log(startOneEnds(33));\nconsole.log(startOneEnds(34));\nconsole.log(startOneEnds(35));\nconsole.log(startOneEnds(36));\nconsole.log(startOneEnds(37));\nconsole.log(startOneEnds(38));\nconsole.log(startOneEnds(39));\nconsole.log(startOneEnds(40));\nconsole.log(startOneEnds(41));\nconsole.log(startOneEnds(42));\nconsole.log(startOneEnds(43));\nconsole.log(startOneEnds(44));\nconsole.log(startOneEnds(45));\nconsole.log(startOneEnds(46));\nconsole.log(startOneEnds(47));\nconsole.log(startOneEnds(48));\nconsole.log(startOneEnds(49));\nconsole.log(startOneEnds(50));\nconsole.log(startOneEnds(51));\nconsole.log(startOneEnds(52));\nconsole.log(startOneEnds(53));\nconsole.log(startOneEnds(54));\nconsole.log(startOneEnds(55));\nconsole.log(startOneEnds(56));\nconsole.log(startOneEnds(57));\nconsole.log(startOneEnds(58));\nconsole.log(startOneEnds(59));\nconsole.log(startOneEnds(60));\nconsole.log(startOneEnds(61));\nconsole.log(startOneEnds(62));\nconsole.log(startOneEnds(63));\nconsole.log(startOneEnds(64));\nconsole.log(startOneEnds(65));\nconsole.log(startOneEnds(66));\nconsole.log(startOneEnds(67));\nconsole.log(startOneEnds(68));\nconsole.log(startOneEnds(69));\nconsole.log(startOneEnds(70));\nconsole.log(startOneEnds(71));\nconsole.log"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const string = (N).toString(2);\n  let index = string.length - 1;\n  let sum = 0;\n  let i = 0;\n  for (; i < string.length; i++) {\n    sum += parseInt(string[i]);\n  }\n  return sum.toString(2);\n};\n\n/*\n  \n  Example\n      For N = 100, the sum of digits will be 11, the output should be \"1011\".\n      For N = 12, the sum of digits will be 1, the output should be \"1\".\n      For N = 15, the sum of digits will be 4, the output should be \"100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve2 = (N) => {\n  const string = (N).toString(2);\n  let sum = 0;\n  let index = string.length - 1;\n  let i = 0;\n  for (; i < string.length; i++) {\n    sum += parseInt(string[i]);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve2;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\n/*\nGiven a non-empty list of integers lst. adding the odd elements that are at even indices.\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 5 \n  */\nconst addingOdd = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2!== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst addingOdd2 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst addingOdd3 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst addingOdd4 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2!== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst addingOdd5 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n    }\n    return sum;\n};\n\nconst addOdd = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2!== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst addOdd2 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst addOdd3 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst addOdd4 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2!== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst addOdd5 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconst main = () => {\n    const test1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    console.log(add(test1));\n    console.log(addOdd(test1));\n    console.log(addOdd2(test1));\n    console.log(addOdd3(test1));\n    console.log(addOdd4(test1));\n    console.log(addOdd5(test1));\n    \n    const test2 = [4, 2, 6, 7, 3, 5, 9, 1];\n    console.log(adding(test2));\n    console.log(addingOdd(test2));\n    console.log(addingOdd2(test2));\n    console.log(addingOdd3(test2));\n    console.log(addingOdd4(test2));\n    console.log(addingOdd5(test2));\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n    return s.split(' ').sort((a, b) => {\n        return a.charCodeAt(0) - b.charCodeAt(0);\n    }).join(' ');\n};\n\nconst test = (name, f) => {\n    const t = antisShuffles(f());\n    console.log(`Trying to sort ${name} -> ${t}`);\n};\n\ntest('\"Hello World\"', () => {\n    return 'Hello World';\n});\n\ntest('\"Hello World!!!\"', () => {\n    return 'Hello World!!!';\n});\n\ntest('\"Hello World!!! World!\"', () => {\n    return 'Hello World!!! World!';\n});\n\ntest('\"Hello World!!! World!!!\"', () => {\n    return 'Hello World!!! World!!!';\n});\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const rows = [],\n        cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      const coord = [i, j];\n      if (row[j] === x) {\n        rows.push(coord);\n        cols.push(coord);\n      }\n    }\n  }\n  return [rows, cols];\n}\n\n/*\n  Given a 2 dimensional data,\n  finds the rows that have the largest sum of the columns\n  in the given row.\n  \n  Examples:\n  getColumns([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ], 1) == [\n    [3],\n    [7]\n  ]\n  getColumns([], 1) == []\n  getColumns([[], [1], [1, 2, 3]], 3) == [\n    [3]\n  ]\n*/\nconst getColumns = (lst, x) => {\n  const rows = getRows(lst, x);\n  const cols = [],\n        sums = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const sum = 0;\n    for (let j = 0; j < row.length; j++) {\n      sum += lst[row[0]][row[1]];\n    }\n    sums.push(sum);\n  }\n  sums.sort((a, b) => b - a);\n  for (let i = 0; i < sums.length; i++) {\n    cols.push(rows[sums[i]]);\n  }\n  return cols;\n}\n\n// Test cases\nconsole.log(getRows([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 1));\nconsole.log(getRows([], 1));\nconsole.log(getRows([[], [1], [1, 2, 3]], 3));\nconsole.log(getColumns([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 1));\nconsole.log(getColumns([], 1));\nconsole.log(getColumns([[], [1], [1, 2, 3]], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const sortedArray = array.slice().sort((a, b) => {\n    return a - b;\n  });\n\n  if (sortedArray.length % 2 === 1) {\n    return sortedArray.reverse();\n  }\n\n  return sortedArray;\n};\n\nexport default sortsArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  // Get an array of the input string and reverse it\n  const stringArray = s.split('').reverse();\n  // Return the result of an array shuffle function\n  return stringArray.join('');\n};\n\nconst encrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\n// encrypt('hi')\n// encrypt('asdfghjkl')\n// encrypt('gf')\n// encrypt('et')\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\nconst decrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\n// decrypt('lm')\n// decrypt('ewhjklnop')\n// decrypt('kj')\n// decrypt('ix')\n\n/*\n  Create a function rotate that takes a string as an argument and\n  returns a string rotated with the alphabet shifted by two places.\n  For example:\n  rotate('hi') returns 'jihi'\n  rotate('asdfghjkl') returns 'hjlajkge'\n  rotate('gf') returns 'gfej'\n  rotate('et') returns 'tij'\n  */\nconst rotate = (s) => {\n  const stringArray = s.split('');\n  const rotated = stringArray.reverse().join('');\n  return rotated;\n};\n\nconst rotate = (s) => {\n  const stringArray = s.split('');\n  const rotated = stringArray.reverse().join('');\n  return rotated;\n};\n\n// rotate('hi')\n// rotate('asdfghjkl')\n// rotate('gf')\n// rotate('et')\n\n// create an array of strings\nconst stringArray = ['hello', 'world','sou', 'tao', 'kon', 'jue', 'kon', 'kon', 'kon', 'kon', 'kon'];\n\n// create an array of strings\nconst stringArray = ['hi', 'asdfghjkl', 'gf', 'et', 'tij'];\n\nconst encrypt = (s) => {\n  // get an array of the input string and reverse it\n  const stringArray = s.split('').reverse();\n  // return the result of an array shuffle function\n  return stringArray.join('');\n};\n\nconst encrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\nconst decrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\nconst decrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\nconst rotate = (s) => {\n  const stringArray = s.split('');\n  const rotated = stringArray.reverse().join('');\n  return rotated;\n};\n\nconst rotate = (s) => {\n  const stringArray = s.split('');\n  const rotated = stringArray.reverse().join('');\n  return rotated;\n};\n\n// create an array of strings\nconst stringArray = ['hello', 'world','sou', 'tao', 'kon', 'jue', 'kon', 'kon', 'kon', 'kon', 'kon'];\n\n// create an array of strings\nconst stringArray = ['hi', 'asdfghjkl', 'gf', 'et', 'tij'];\n\nconst encrypt = (s) => {\n  // get an array of the input string and reverse it\n  const stringArray = s.split('').reverse();\n  // return the result of an array shuffle function\n  return stringArray.join('');\n};\n\nconst encrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\nconst decrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\nconst decrypt = (s) => {\n  const stringArray = s.split('').reverse();\n  return stringArray.join('');\n};\n\nconst rotate = (s) => {\n  const stringArray = s.split('');\n  const rotated = stringArray.reverse().join('');\n  return rotated;\n};\n\nconst rotate = (s) => {\n  const stringArray = s.split('');\n  const rotated = stringArray.reverse().join('');\n  return rotated;\n};\n\n// create an array of strings\nconst stringArray = ['hello', 'world','sou', 'tao', 'kon', 'jue', 'kon', 'kon', 'kon', 'kon', 'kon'];\n\n// create an array of strings\nconst stringArray = ['hi', 'asdfghjkl', 'gf', 'et', 'tij'];\n\nconst encrypt = (s) => {\n  // get an array of the input string and reverse it\n  const stringArray = s.split('').reverse();\n  // return the result of an array shuffle function\n  return stringArray.join('');\n};\n\nconst encrypt = (s) => {\n  const stringArray = s.split"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let curr = 0;\n  const next = () => {\n    if (curr < lst.length - 1) {\n      return lst[curr + 1];\n    } else {\n      return null;\n    }\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  \n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  \n  return smallest;\n};\n\nconst nextSmallest = (lst) => {\n  const curr = 0;\n  const next = () => {\n    if (curr < lst.length - 1) {\n      return lst[curr + 1];\n    } else {\n      return null;\n    }\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      }\n    }\n    \n    return smallest;\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const curr = 0;\n  const next = () => {\n    if (curr < lst.length - 1) {\n      return lst[curr + 1];\n    } else {\n      return null;\n    }\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      }\n    }\n    \n    return smallest;\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      }\n    }\n    \n    return smallest;\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      }\n    }\n    \n    return smallest;\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      }\n    }\n    \n    return smallest;\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      }\n    }\n    \n    return smallest;\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      }\n    }\n    \n    return smallest;\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      }\n    }\n    \n    return smallest;\n  };\n  \n  return next();\n};\n\nconst nextSmallest = (lst) => {\n  const smallest = lst[0];\n  const next = () => {\n    if (smallest < lst[1]) {\n      smallest = lst[1];\n    }\n    \n    for (let i = 2; i < lst.length; i++) {\n      if (smallest < lst[i]) {\n        smallest = lst[i];\n      "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let i = 0\n  let start = S.charAt(i)\n  let word = \"\"\n  let count = 0\n  while (i < S.length) {\n    if (S.charAt(i) === start) {\n      i++\n      word = \"\"\n    } else if (S.charAt(i) === '.' || S.charAt(i) === '?' || S.charAt(i) === '!') {\n      if (word.length === 0) {\n        i++\n        continue\n      }\n      count++\n      word = \"\"\n    } else {\n      word += S.charAt(i)\n    }\n    i++\n  }\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let i = 0\n  let start = S.charAt(i)\n  let word = \"\"\n  let count = 0\n  while (i < S.length) {\n    if (S.charAt(i) === start) {\n      i++\n      word = \"\"\n    } else if (S.charAt(i) === '.' || S.charAt(i) === '?' || S.charAt(i) === '!') {\n      if (word.length === 0) {\n        i++\n        continue\n      }\n      count++\n      word = \"\"\n    } else {\n      word += S.charAt(i)\n    }\n    i++\n  }\n  return count\n}\n\n/*\n  You'll be given a string of sentences, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let i = 0\n  let start = S.charAt(i)\n  let word = \"\"\n  let count = 0\n  while (i < S.length) {\n    if (S.charAt(i) === start) {\n      i++\n      word = \"\"\n    } else if (S.charAt(i) === '.' || S.charAt(i) === '?' || S.charAt(i) === '!') {\n      if (word.length === 0) {\n        i++\n        continue\n      }\n      count++\n      word = \"\"\n    } else {\n      word += S.charAt(i)\n    }\n    i++\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false;\n  return x + y === z;\n};\n\nconsole.log(anyInt(5, 2, 7));\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  // convert to lower case\n  const lowercase = message.toLowerCase();\n\n  // encode the message\n  const encoded = lowercase.replace(/(.)/g, (letter) => {\n    const index = letter.charCodeAt(0) - 97;\n    return String.fromCharCode(index + 2);\n  });\n\n  // swap vowels with the next letter\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelIndex = vowels.indexOf(lowercase.charAt(0));\n  return encoded.replace(/(.)/g, (letter, index) => {\n    return vowels[vowelIndex + index];\n  });\n};\n\nconst test = () => {\n  const testCases = [\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',\n    'This is a message',"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += parseInt(lst[i]);\n  }\n  let largestPrime = 0;\n  for (let i = 2; i < result; i++) {\n    if (result % i === 0) {\n      largestPrime = i;\n      break;\n    }\n  }\n  return largestPrime;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n    let flag = true;\n    for (let key in dict) {\n        if (!(key in dict && dict[key].toLowerCase() === dict[key].toUpperCase())) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nexport default checkDictCases;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nexport default countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const num = Math.abs(a)\n  const len = Math.log(num) / Math.log(10)\n  const remainder = Math.pow(10, len)\n  const a_digit = num % remainder\n  const b_digit = Math.pow(10, len) % remainder\n  const result = a_digit * b_digit\n  return result\n}\n\nconst multiply2 = (a, b) => {\n  const a_int = Math.abs(a)\n  const b_int = Math.abs(b)\n  const a_unit = a_int % 10\n  const b_unit = b_int % 10\n  const result = multiply(a_unit, b_unit)\n  return result\n}\n\nconst product = (a, b) => {\n  const a_int = Math.abs(a)\n  const b_int = Math.abs(b)\n  const a_unit = a_int % 10\n  const b_unit = b_int % 10\n  const result = multiply2(a_unit, b_unit)\n  return result\n}\n\nconsole.log(multiply(2, 3))\nconsole.log(multiply2(2, 3))\nconsole.log(product(2, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  let count = 0;\n  for (let i = 0; i < s.length; i+=2) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport default countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const valueString = value.toString();\n  const allValues = valueString.split(\".\");\n  const valueInt = parseInt(allValues[0]);\n  const valueDecimal = parseFloat(allValues[1]);\n  const closestInteger = Math.round(valueInt);\n  const valueDiff = closestInteger - valueInt;\n  const closestIntegerWithDecimal = closestInteger + valueDecimal;\n  const valueDiffWithDecimal = closestIntegerWithDecimal - valueInt;\n\n  if (valueDiff > 0) {\n    if (valueDiffWithDecimal > 0) {\n      return closestInteger;\n    } else {\n      return closestIntegerWithDecimal;\n    }\n  } else {\n    if (valueDiff < 0) {\n      return closestIntegerWithDecimal;\n    } else {\n      return closestInteger;\n    }\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = []\n\n  while (n > 1) {\n    const num = (n % 2)? n + 1 : n\n\n    arr.push(num)\n\n    n -= num\n\n    if (n < 1) {\n      break\n    }\n  }\n\n  return arr\n}\n\nconst numLevels = (n) => {\n  const arr = []\n\n  while (n > 1) {\n    const num = (n % 2)? n + 1 : n\n\n    arr.push(num)\n\n    n -= num\n\n    if (n < 1) {\n      break\n    }\n  }\n\n  return arr\n}\n\nexport default madeAPiles\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n    if(typeof s!=='string') throw new Error('expected a string');\n    const words = s.split(/\\s|,/g);\n    if(!words) return [];\n    return words;\n}\n\nconst test = () => {\n    console.log('test', wordString('Hi, my name is John'));\n    console.log('test', wordString('One, two, three, four, five, six'));\n}\n\nconst main = () => {\n    test();\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    let mid = Math.floor((x + y) / 2);\n    if (mid % 2 === 0) {\n      return mid;\n    } else {\n      return chooseNum(x, mid - 1);\n    }\n  } else {\n    return chooseNum(mid + 1, y);\n  }\n}\n\nmodule.exports = chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  let avg = (n + m) / 2;\n  let count = 0;\n  let bin = 0;\n  while (n <= m) {\n    count += 1;\n    bin = bin << 1;\n    bin |= n <= m? 1 : 0;\n    n += 1;\n  }\n  avg = count === 0? -1 : Math.round(bin / count);\n  return avg;\n};\n\nconst testRoundingAvg = () => {\n  const { roundingAvg } = require('./roundingAvg');\n  console.log(roundingAvg(1, 5));\n  console.log(roundingAvg(7, 5));\n  console.log(roundingAvg(10, 20));\n  console.log(roundingAvg(20, 33));\n};\n\nif (require.main === module) {\n  testRoundingAvg();\n}\n\nmodule.exports = roundingAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  const unique = [];\n  const digits = x.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      continue;\n    }\n    if (unique.indexOf(digits[i]) === -1) {\n      unique.push(digits[i]);\n    }\n  }\n  return unique;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (!arr) return []\n  const sortedArr = arr.slice().sort((a, b) => b.length - a.length)\n  const reversedArr = sortedArr.reverse()\n  const strArr = reversedArr.map(x => x.toString())\n  const arrName = strArr.map(x => {\n    const num = parseInt(x, 10)\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][num]\n  })\n  return arrName\n}\n\nconst test = [2, 1, 1, 4, 5, 8, 2, 3]\n\nconsole.log(byLength(test))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  const f = (n) => {\n    const res = []\n    for (let i = 1; i <= n; i += 2) {\n      res.push(factorial(i))\n    }\n    for (let i = 0; i < n; i++) {\n      if (i % 2 === 0) {\n        res.push(factorial(i))\n      }\n    }\n    return res\n  }\n  return f(n)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let result = [];\n\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome = true;\n\n    for (let j = 1; j < i; j++) {\n      if (i * j!== i * (i - j)) {\n        isPalindrome = false;\n        break;\n      }\n    }\n\n    if (isPalindrome) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};\n\nconsole.log(evenOdderPalindrome(3));\nconsole.log(evenOdderPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return arr.filter((n) => n > 0).length + sum;\n};\n\n/*\n  Write a function sumDigits which takes an integer and returns the sum of\n  its digits. If the integer is negative, then sumDigits should return 0.\n  >>> sumDigits(-123)\n  >>> sumDigits(1)\n  >>> sumDigits(100)\n  >>> sumDigits(100000)\n  >>> sumDigits(0)\n  */\nconst sumDigits = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function largestPrime which takes an integer n and returns the largest\n  prime number which is less than or equal to n.\n  >>> largestPrime(0)\n  >>> largestPrime(1)\n  >>> largestPrime(4)\n  >>> largestPrime(20)\n  >>> largestPrime(100)\n  >>> largestPrime(999)\n  >>> largestPrime(1000)\n  >>> largestPrime(10000)\n  >>> largestPrime(100000)\n  >>> largestPrime(1000000)\n  >>> largestPrime(10000000)\n  >>> largestPrime(100000000)\n  >>> largestPrime(1000000000)\n  */\nconst largestPrime = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  let maxPrime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      while (n % i === 0) {\n        maxPrime = Math.max(maxPrime, i);\n      }\n    }\n  }\n  return maxPrime;\n};\n\n/*\n  Write a function isPrime which takes an integer n and returns true if n is\n  an prime number. If n is not prime, isPrime should return false.\n  >>> isPrime(1)\n  >>> isPrime(2)\n  >>> isPrime(3)\n  >>> isPrime(4)\n  >>> isPrime(5)\n  >>> isPrime(6)\n  >>> isPrime(7)\n  >>> isPrime(8)\n  >>> isPrime(9)\n  >>> isPrime(10)\n  >>> isPrime(11)\n  >>> isPrime(12)\n  >>> isPrime(13)\n  >>> isPrime(14)\n  >>> isPrime(15)\n  >>> isPrime(16)\n  >>> isPrime(17)\n  >>> isPrime(18)\n  >>> isPrime(19)\n  >>> isPrime(20)\n  >>> isPrime(21)\n  >>> isPrime(22)\n  >>> isPrime(23)\n  >>> isPrime(24)\n  >>> isPrime(25)\n  >>> isPrime(26)\n  >>> isPrime(27)\n  >>> isPrime(28)\n  >>> isPrime(29)\n  >>> isPrime(30)\n  >>> isPrime(31)\n  >>> isPrime(32)\n  >>> isPrime(33)\n  >>> isPrime(34)\n  >>> isPrime(35)\n  >>> isPrime(36)\n  >>> isPrime(37)\n  >>> isPrime(38)\n  >>> isPrime(39)\n  >>> isPrime(40)\n  >>> isPrime(41)\n  >>> isPrime(42)\n  >>> isPrime(43)\n  >>> isPrime(44)\n  >>> isPrime(45)\n  >>> isPrime(46)\n  >>> isPrime(47)\n  >>> isPrime(48)\n  >>> isPrime(49)\n  >>> isPrime(50)\n  >>> isPrime(51)\n  >>> isPrime(52)\n  >>> isPrime(53)\n  >>> isPrime(54)\n  >>> isPrime(55)\n  >>> isPrime(56)\n  >>> isPrime(57)\n  >>> isPrime(58)\n  >>> isPrime(59)\n  >>> isPrime(60)\n  >>> isPrime(61)\n  >>> isPrime(62)\n  >>> isPrime(63)\n  >>> isPrime(64)\n  >>> isPrime(65)\n  >>> isPrime(66)\n  >>> isPrime(67)\n  >>> isPrime(68)\n  >>> isPrime(69)\n  >>> isPrime(70)\n  >>> isPrime(71)\n  >>> isPrime(72)\n  >>> isPrime(73)\n  >>> isPrime(74)\n  >>> isPrime(75)\n  >>> isPrime(76)\n  >>> isPrime(77)\n  >>> isPrime(78)\n  >>> isPrime(79)\n  >>> isPrime(80)\n  >>> isPrime(81)\n  >>> isPrime(82)\n  >>> isPrime(83)\n  >>> isPrime(84)\n  >>> isPrime(85)\n  >>> isPrime(86)\n  >>> isPrime(87)\n  >>> isPrime(88)\n  >>> isPrime(89)\n  >>> isPrime(90)\n  >>> isPrime(91)\n  >>> isPrime(92)\n  >>> isPrime(93)\n  >>> isPrime(94)\n  >>> isPrime(95)\n  >>> isPrime(96)\n  >>> isPrime(97)\n  >>> isPrime(98)\n  >>> isPrime(99)\n  >>> isPrime(100)\n  >>> isPrime(101)\n  >>> isPrime(102)\n  >>> isPrime(103)\n  >>> isPrime(104)\n  >>> isPrime(105)\n  >>> isPrime(106)\n  >>> isPrime(107)\n  >>> isPrime(108)\n  >>> isPrime(109)\n  >>> isPrime(110)\n  >>> isPrime(111)\n  >>> isPrime(112)\n  >>> isPrime(113)\n  >>> isPrime(114)\n  >>> isPrime(115)\n  >>> isPrime(116"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  if (arr.length === 0) return true;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      for (let j = i; j < arr.length; j++) {\n        arr[j - 1] = arr[j];\n      }\n      arr.shift();\n    }\n  }\n  return arr.every(e => e >= 0);\n};\n\nconst arr = [3, 4, 5, 1, 2];\n\nconsole.log(movingOneBalls(arr));<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  const i = 0\n  const j = 0\n  const max = lst1.length\n  const min = lst2.length\n\n  while (i < max && j < min) {\n    if (lst1[i] % 2!== 0 && lst2[j] % 2!== 0) {\n      return \"NO\"\n    }\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      if (lst1[i]!== lst2[j]) {\n        return \"NO\"\n      }\n    }\n    if (lst1[i] % 2 === 0) {\n      i += 1\n    }\n    if (lst2[j] % 2 === 0) {\n      j += 1\n    }\n  }\n  return \"YES\"\n}\n\nconst lst1 = [1, 2, 3, 4]\nconst lst2 = [2, 3, 4, 5]\n\nconsole.log(exchanges(lst1, lst2))\n\n/*\n  In this problem, you will implement a function that takes two lists of\n  numbers, and determines whether it is possible to perform an exchanges of\n  elements between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges2 = (lst1, lst2) => {\n  const i = 0\n  const j = 0\n  const max = lst1.length\n  const min = lst2.length\n\n  while (i < max && j < min) {\n    if (lst1[i] % 2!== 1 && lst2[j] % 2!== 1) {\n      return \"NO\"\n    }\n    if (lst1[i] % 2 === 1 && lst2[j] % 2 === 1) {\n      if (lst1[i]!== lst2[j]) {\n        return \"NO\"\n      }\n    }\n    if (lst1[i] % 2 === 1) {\n      i += 1\n    }\n    if (lst2[j] % 2 === 1) {\n      j += 1\n    }\n  }\n  return \"YES\"\n}\n\nconst lst1 = [1, 2, 3, 4]\nconst lst2 = [2, 3, 4, 5]\n\nconsole.log(exchanges2(lst1, lst2))\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const map = {}\n  for(let i = 0; i < test.length; i++) {\n    const current = test[i]\n    if(map.hasOwnProperty(current)) {\n      map[current] += 1\n    } else {\n      map[current] = 1\n    }\n  }\n  return map\n}\n\n/*\nGiven a string representing a comma separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistograms('a,b,c') == {'a': 1, 'b': 1, 'c': 1}\nhistograms('a,b,b,a') == {'a': 2, 'b': 2}\nhistograms('b,b,b,b,a') == {'b': 4}\nhistograms('') == {}\n*/\nconst histograms2 = (test) => {\n  const map = {}\n  for(let i = 0; i < test.length; i++) {\n    const current = test[i]\n    if(map.hasOwnProperty(current)) {\n      map[current] += 1\n    } else {\n      map[current] = 1\n    }\n  }\n  return map\n}\n\n/*\nGiven a string representing a comma separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistograms('a,b,c') == {'a': 1, 'b': 1, 'c': 1}\nhistograms('a,b,b,a') == {'a': 2, 'b': 2}\nhistograms('b,b,b,b,a') == {'b': 4}\nhistograms('') == {}\n*/\nconst histograms3 = (test) => {\n  const map = {}\n  let max = 0\n  let max_letter = ''\n  for(let i = 0; i < test.length; i++) {\n    const current = test[i]\n    if(map.hasOwnProperty(current)) {\n      map[current] += 1\n      if(map[current] > max) {\n        max = map[current]\n        max_letter = current\n      }\n    } else {\n      map[current] = 1\n      if(map[current] > max) {\n        max = map[current]\n        max_letter = current\n      }\n    }\n  }\n  return {max_letter, max}\n}\n\n/*\nGiven a string representing a comma separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistograms('a,b,c') == {'a': 1, 'b': 1, 'c': 1}\nhistograms('a,b,b,a') == {'a': 2, 'b': 2}\nhistograms('b,b,b,b,a') == {'b': 4}\nhistograms('') == {}\n*/\nconst histograms4 = (test) => {\n  const map = {}\n  let max = 0\n  let max_letter = ''\n  for(let i = 0; i < test.length; i++) {\n    const current = test[i]\n    if(map.hasOwnProperty(current)) {\n      map[current] += 1\n      if(map[current] > max) {\n        max = map[current]\n        max_letter = current\n      }\n    } else {\n      map[current] = 1\n      if(map[current] > max) {\n        max = map[current]\n        max_letter = current\n      }\n    }\n  }\n  return {max_letter, max}\n}\n\n/*\nGiven a string representing a comma separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistograms('a,b,c') == {'a': 1, 'b': 1, 'c': 1}\nhistograms('a,b,b,a') == {'a': 2, 'b': 2}\nhistograms('b,b,b,b,a') == {'b': 4}\nhistograms('') == {}\n*/\nconst histograms5 = (test) => {\n  const map = {}\n  let max = 0\n  let max_letter = ''\n  for(let i = 0; i < test.length; i++) {\n    const current = test[i]\n    if(map.hasOwnProperty(current)) {\n      map[current] += 1\n      if(map[current] > max) {\n        max = map[current]\n        max_letter = current\n      }\n    } else {\n      map[current] = 1\n      if(map[current] > max) {\n        max = map[current]\n        max_letter = current\n      }\n    }\n  }\n  return {max_letter, max}\n}\n\nconsole.log(histograms('a,b,c'))\nconsole.log(histograms('a,b,b,a'))\nconsole.log(histograms('b,b,b,b,a'))\nconsole.log(histograms(''))\n\nconsole.log(histograms2('a,b,c'))\nconsole.log(histograms2('a,b,b,a'))\nconsole.log(histograms2('b,b,b,b,a'))\nconsole.log(histograms2(''))\n\nconsole.log(histograms3('a,b,c'))\nconsole.log(histograms3('a,b,b,a'))\nconsole.log"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  const isReverses = (s) => s.split('').reverse().join('') === s;\n  const contains = (s) => s.includes(c);\n  return [isReverses(s) && contains(s)? s : null, isReverses(s) &&!contains(s)? s : null];\n};\n\nconsole.log(reversesDelete('abcde', 'ae'));\nconsole.log(reversesDelete('abcdef', 'b'));\nconsole.log(reversesDelete('abcdedcba', 'ab'));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  const output = []\n  lst.forEach((n) => {\n    const odd = n.length % 2\n    if (odd === 1) {\n      output.push(n)\n    }\n    const output_len = output.length\n    const even = n.length - odd\n    if (odd === 0 && even === 1) {\n      output.push(n)\n    }\n  })\n  return output\n}\n\nmodule.exports = odderCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  const sorted = nums.slice().sort();\n  let sum = 0;\n  let minSum = sorted[0];\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i];\n    if (sum >= 0) {\n      minSum = sum;\n      break;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubsArraySums;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        let currFill = 0;\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 0) {\n                currFill += 1;\n                if (currFill === capacity) {\n                    result++;\n                }\n            } else {\n                currFill = 0;\n            }\n        }\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sorted = arr.slice(0)\n  sorted = sorted.sort((a, b) => {\n    if (a < 0) return -1\n    if (b < 0) return 1\n    if (a === b) return 0\n\n    if (a === 1) return -1\n    if (b === 1) return 1\n\n    if (a > b) return -1\n    if (b > a) return 1\n\n    if (a === 0) return -1\n    if (b === 0) return 1\n\n    return 0\n  })\n  return sorted\n}\n\nexport default sortsArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  const allWords = [];\n  const length = s.length;\n  let start = 0;\n  let current = 0;\n  let currentLength = 0;\n  let lastConsonant = -1;\n  while (start <= length) {\n    while (start <= length &&!isConsonant(s[start])) {\n      start++;\n    }\n    if (start <= length) {\n      lastConsonant = start;\n      current = start;\n      currentLength = 1;\n      start++;\n    } else {\n      break;\n    }\n    while (start <= length && isConsonant(s[start])) {\n      start++;\n      currentLength++;\n    }\n    if (currentLength === n) {\n      allWords.push(s.slice(lastConsonant, current));\n    }\n  }\n  return allWords;\n};\n\n/*\nGiven a string s and a number n, you need to return the number of words in the string \nthat have exactly n letters. If the number of words is more than one, return the \nsmallest number of words.\nExamples:\ncountWords(\"Hello world\", 4) ==> 1\ncountWords(\"Hello world\", 3) ==> 1\ncountWords(\"Hello world\", 2) ==> 2\ncountWords(\"Hello world\", 1) ==> 2\ncountWords(\"Hello world\", 0) ==> 0\ncountWords(\"Hello world\", -1) ==> 0\ncountWords(\"Hello world\", 5) ==> 0\ncountWords(\"Hello world\", 4) ==> 1\ncountWords(\"Hello world\", 9) ==> 1\ncountWords(\"Hello world\", 10) ==> 2\ncountWords(\"Hello world\", 11) ==> 2\ncountWords(\"Hello world\", 12) ==> 3\n*/\nconst countWords = (s, n) => {\n  const allWords = [];\n  const length = s.length;\n  let start = 0;\n  let current = 0;\n  let currentLength = 0;\n  while (start <= length) {\n    while (start <= length &&!isConsonant(s[start])) {\n      start++;\n    }\n    if (start <= length) {\n      current = start;\n      currentLength = 1;\n      start++;\n    } else {\n      break;\n    }\n    while (start <= length && isConsonant(s[start])) {\n      start++;\n      currentLength++;\n    }\n    if (currentLength === n) {\n      allWords.push(s.slice(current, start));\n    }\n  }\n  return allWords.length;\n};\n\nconst isConsonant = s => /[bdDFGJKLMNPQRSTVWXZ]/.test(s);\n\nconst main = () => {\n  console.log(countWords(\"Hello world\", 4));\n  console.log(countWords(\"Hello world\", 3));\n  console.log(countWords(\"Hello world\", 2));\n  console.log(countWords(\"Hello world\", 1));\n  console.log(countWords(\"Hello world\", 0));\n  console.log(countWords(\"Hello world\", -1));\n  console.log(countWords(\"Hello world\", 5));\n  console.log(countWords(\"Hello world\", 4));\n  console.log(countWords(\"Hello world\", 9));\n  console.log(countWords(\"Hello world\", 10));\n  console.log(countWords(\"Hello world\", 11));\n  console.log(countWords(\"Hello world\", 12));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowelCount = 0, consonantCount = 0;\n  for(let i = word.length - 1; i >= 0; i--) {\n    if(word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i] == \"u\") {\n      vowelCount++;\n    }\n    if(word[i]!= \"a\" && word[i]!= \"e\" && word[i]!= \"i\" && word[i]!= \"o\" && word[i]!= \"u\") {\n      consonantCount++;\n    }\n  }\n  if(vowelCount > consonantCount) {\n    return \"\";\n  }\n  let start = 0;\n  let end = word.length - 1;\n  while(start < end) {\n    let temp = Math.abs(word[start] - word[end]);\n    if(temp == 1) {\n      return word[start];\n    }\n    if(temp == 0) {\n      start++;\n    }\n    end--;\n  }\n  return \"\";\n}\n\nmodule.exports = gottenCloserVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length > 0 && stack[stack.length - 1] === '(') {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length === 0\n}\n\nconsole.log(matchParens(['(())()', '())']))\nconsole.log(matchParens(['())', '())']))\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  const max = arr[k - 1]\n  const indexes = new Array(k)\n\n  for (let i = 0; i < k; i++) {\n    indexes[i] = arr.indexOf(max)\n    if (indexes[i] > i) {\n      indexes[i] = i\n    }\n  }\n\n  return indexes\n}\n\nconsole.log(maximums([-3, -4, 5], 3))\nconsole.log(maximums([4, -4, 4], 2))\nconsole.log(maximums([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let oddSum = 0, evenSum = 0;\n  lst.forEach(el => {\n    if (el % 2 === 0) {\n      evenSum += el;\n    } else {\n      oddSum += el;\n    }\n  });\n  return evenSum + oddSum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  let carry = 0;\n  for (let i = k; i < arr.length; i++) {\n    let val = arr[i];\n    carry = (val + sum) % 10;\n    sum = (val + sum) / 10;\n    sum += carry;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of ints arr, return the number of elements that have odd digits.\n\n  Example:\n\n      Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n      Output: 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n*/\nconst oddElements = (arr) => {\n  let oddCount = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let val = arr[i];\n    if (val % 2 === 1) {\n      oddCount += 1;\n    }\n  }\n  return oddCount;\n};\n\nconst main = () => {\n  const arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n  const k = 4;\n\n  console.log('Sum of first 4 elements:'+ addElements(arr, k));\n  console.log('Sum of odd elements:'+ oddElements(arr));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let oddCollatz = []\n  let collatz = [n]\n  while (collatz.length > 0) {\n    let curr = collatz.pop()\n    if (curr % 2 === 0) {\n      collatz.push(curr / 2)\n    } else {\n      collatz.push(3 * curr + 1)\n    }\n  }\n  return oddCollatz\n}\n\nconst getOddCollatz = (n) => {\n  let collatz = [n]\n  while (collatz.length > 0) {\n    let curr = collatz.pop()\n    if (curr % 2 === 0) {\n      collatz.push(curr / 2)\n    } else {\n      collatz.push(3 * curr + 1)\n    }\n  }\n  return collatz\n}\n\nconst getOddCollatz2 = (n) => {\n  let oddCollatz = []\n  let collatz = [n]\n  while (collatz.length > 0) {\n    let curr = collatz.pop()\n    if (curr % 2 === 0) {\n      oddCollatz.push(curr)\n    } else {\n      collatz.push(3 * curr + 1)\n    }\n  }\n  return oddCollatz\n}\n\nconst getOddCollatz3 = (n) => {\n  let collatz = [n]\n  let oddCollatz = []\n  while (collatz.length > 0) {\n    let curr = collatz.pop()\n    if (curr % 2 === 0) {\n      oddCollatz.push(curr)\n    } else {\n      collatz.push(3 * curr + 1)\n    }\n  }\n  return oddCollatz\n}\n\nconsole.log(getOddCollatz(5))\nconsole.log(getOddCollatz2(5))\nconsole.log(getOddCollatz3(5))\n\n/*\n  Given a positive integer n, return the string representation of the sequence \n  of numbers in the collatz sequence.\n  */\nconst getCollatz = (n) => {\n  let collatz = [n]\n  while (collatz.length > 0) {\n    let curr = collatz.pop()\n    if (curr % 2 === 0) {\n      collatz.push(curr / 2)\n    } else {\n      collatz.push(3 * curr + 1)\n    }\n  }\n  return collatz.join(',')\n}\n\nconst getCollatz2 = (n) => {\n  let collatz = []\n  let collatzArr = [n]\n  while (collatzArr.length > 0) {\n    let curr = collatzArr.pop()\n    if (curr % 2 === 0) {\n      collatz.push(curr / 2)\n    } else {\n      collatz.push(3 * curr + 1)\n    }\n  }\n  return collatz.join(',')\n}\n\nconst getCollatz3 = (n) => {\n  let collatz = []\n  let collatzArr = [n]\n  while (collatzArr.length > 0) {\n    let curr = collatzArr.pop()\n    if (curr % 2 === 0) {\n      collatz.push(curr)\n    } else {\n      collatz.push(3 * curr + 1)\n    }\n  }\n  return collatz.join(',')\n}\n\nconsole.log(getCollatz(5))\nconsole.log(getCollatz2(5))\nconsole.log(getCollatz3(5))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const isDate = /^([0-9]{1,2})[\\-\\/]([0-9]{1,2})[\\-\\/]([0-9]{2,4})$/\n  if (!isDate.test(date)) {\n    return false\n  }\n  const dateArray = date.split(\"-\")\n  const month = parseInt(dateArray[1])\n  const day = parseInt(dateArray[2])\n  const year = parseInt(dateArray[3])\n  const daysInMonth = new Date(year, month, 0).getDate()\n  const dayOfWeek = new Date(year, month, day).getDay()\n  if (month === 1 && day < 1 || month === 3 && day < 1 || month === 5 && day < 1 || month === 7 && day < 1 || month === 8 && day < 1 || month === 10 && day < 1 || month === 12 && day < 1) {\n    return false\n  }\n  if (month === 1 && day > daysInMonth || month === 3 && day > daysInMonth || month === 5 && day > daysInMonth || month === 7 && day > daysInMonth || month === 8 && day > daysInMonth || month === 10 && day > daysInMonth || month === 12 && day > daysInMonth) {\n    return false\n  }\n  if (month === 2 && day < 1) {\n    return false\n  }\n  if (month === 4 && day < 1) {\n    return false\n  }\n  if (month === 6 && day < 1) {\n    return false\n  }\n  if (month === 9 && day < 1) {\n    return false\n  }\n  if (month === 11 && day < 1) {\n    return false\n  }\n  return true\n}\n\nmodule.exports = validDates\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n    return txt.split(/\\s+/);\n};\n\n/**\n  Given a number, return its square root.\n  Example\n  sqrt(12) ➞ 4\n  */\nconst sqrt = (x) => {\n    return Math.sqrt(x);\n};\n\n/**\n  Given a number, return its cube root.\n  Example\n  cubeRoot(6) ➞ 2\n  */\nconst cubeRoot = (x) => {\n    return Math.pow(x, 1.0 / 3);\n};\n\n/**\n  Given two numbers, return their sum.\n  Example\n  add(5, 2) ➞ 7\n  */\nconst add = (x, y) => {\n    return x + y;\n};\n\n/**\n  Given two numbers, return their difference.\n  Example\n  subtract(5, 2) ➞ 3\n  */\nconst subtract = (x, y) => {\n    return x - y;\n};\n\n/**\n  Given two numbers, return their product.\n  Example\n  multiply(5, 2) ➞ 10\n  */\nconst multiply = (x, y) => {\n    return x * y;\n};\n\n/**\n  Given two numbers, return their quotient.\n  Example\n  divide(5, 2) ➞ 2\n  */\nconst divide = (x, y) => {\n    return x / y;\n};\n\n/**\n  Given two numbers, return their average.\n  Example\n  average(5, 2) ➞ 3\n  */\nconst average = (x, y) => {\n    return (x + y) / 2;\n};\n\nexport {\n    add, subtract, multiply, divide, average,\n    splitWord, sqrt, cubeRoot, add, subtract, multiply, divide, average\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const len = lst.length\n  if (len < 2) return true\n  for (let i = 0, j = 0; i < len; i++) {\n    if (lst[i] < lst[j]) return false\n    while (j < len && lst[j] === lst[i]) {\n      j++\n    }\n  }\n  return true\n}\n\nmodule.exports = isSort\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start = interval1[0]\n  let end = interval1[1]\n  let start2 = interval2[0]\n  let end2 = interval2[1]\n  if (start < start2) {\n    return \"NO\"\n  }\n  if (end > end2) {\n    return \"NO\"\n  }\n  if (start <= start2 && end >= end2) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign2 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign3 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign4 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign5 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign6 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign7 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign8 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign9 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign10 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign11 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign12 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign13 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign14 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i];\n    if (sign === 0) {\n      return 0;\n    }\n    prods *= sign;\n  }\n  return prods;\n};\n\nconst prodsSign15 = (arr) => {\n  const prods = 1;\n  for (let i = 0; i < arr.length; i++) {"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const len = grid.length;\n  const size = grid[0].length;\n  const dp = new Array(len + 1).fill(null);\n  dp[0] = [1];\n  for (let row = 0; row <= len; row++) {\n    for (let col = 0; col <= size; col++) {\n      if (dp[row] && dp[row][col]) {\n        if (col + 1 <= size) {\n          dp[row][col + 1] = dp[row][col] + (grid[row][col + 1]!== undefined? 1 : 0);\n        }\n        if (row + 1 <= len) {\n          dp[row + 1][col] = dp[row][col] + (grid[row + 1][col]!== undefined? 1 : 0);\n        }\n      }\n    }\n  }\n  return dp[len][k];\n};\n\nconst main = () => {\n  const grid = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n  ];\n  const k = 1;\n  const ans = minPaths(grid, k);\n  console.log(ans);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 1) {\n    return [1];\n  }\n  return [1, 1, 3].concat(tri(n - 1).concat([1, 2, 1]).concat(tri(n - 2).concat([1, 3, 2])));\n};\n\nconst trib = (n) => {\n  const fib = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n  };\n  const fibs = trib(n);\n  const tribs = [];\n  for (let i = 0; i < fibs.length; i++) {\n    tribs.push(fibs[i] + fibs[i + 1]);\n  }\n  return tribs;\n};\n\nconst trie = (n) => {\n  const fibs = trib(n);\n  const trie = {};\n  for (let i = 0; i < fibs.length; i++) {\n    trie[fibs[i]] = fibs[i + 1];\n  }\n  return trie;\n};\n\nconst t = trib(7);\nconsole.log(t);\n\n// console.log(trie(7));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n    if (n === 0) return 1\n    let prod = 1\n    while (n > 0) {\n        prod = (prod * n) % 10\n        n = n / 10\n    }\n    return prod\n}\n\nconst factorial = (n) => {\n    let prod = 1\n    while (n > 1) {\n        prod = (prod * n) % 10\n        n = n / 10\n    }\n    return prod\n}\n\nconst sum = (n) => {\n    let sum = 0\n    while (n > 0) {\n        sum = sum + n % 10\n        n = n / 10\n    }\n    return sum\n}\n\nconst odd = (n) => {\n    return sum(n) % 2 === 1\n}\n\nconst prime = (n) => {\n    let isPrime = true\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            isPrime = false\n            break\n        }\n    }\n    return isPrime\n}\n\nconst even = (n) => {\n    return sum(n) % 2 === 0\n}\n\nconst nthPrime = (n) => {\n    let prime = 1\n    while (prime <= n) {\n        if (prime % 2 === 0) {\n            prime = prime + 2\n        } else {\n            prime = prime + 1\n        }\n    }\n    return prime\n}\n\nconst primeNumber = (n) => {\n    let prime = 1\n    while (prime <= n) {\n        if (prime % 2 === 0) {\n            prime = prime + 2\n        } else {\n            prime = prime + 1\n        }\n    }\n    return prime\n}\n\nconst isPrime = (n) => {\n    if (primeNumber(n) > n) {\n        return false\n    }\n    return prime(n)\n}\n\nconst gcd = (a, b) => {\n    while (b!== 0) {\n        a = a % b\n        b = b % a\n    }\n    return a\n}\n\nconst lcm = (a, b) => {\n    return (a * b) / gcd(a, b)\n}\n\nconst lc = (a, b) => {\n    return (a * b) / gcd(a, b)\n}\n\nconst lg = (a, b) => {\n    return (a * b) / gcd(a, b)\n}\n\nconst pow = (n, p) => {\n    if (p === 1) {\n        return n\n    }\n    return pow(n, p - 1) * n\n}\n\nconst factorial = (n) => {\n    if (n === 1) {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\nconst catalan = (n) => {\n    let sum = 0\n    while (n > 1) {\n        sum = sum + n\n        n = n - 1\n    }\n    return sum\n}\n\nconst nthDigit = (n) => {\n    let sum = 0\n    while (n > 0) {\n        sum = sum + n % 10\n        n = n / 10\n    }\n    return sum\n}\n\nconst nthDigitSum = (n) => {\n    let sum = 0\n    while (n > 0) {\n        sum = sum + n\n        n = n - 1\n    }\n    return sum\n}\n\nconst catalan = (n) => {\n    let sum = 0\n    while (n > 1) {\n        sum = sum + n % 10\n        n = n / 10\n    }\n    return sum\n}\n\nconst fibonacci = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nconst fib = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n\nconst fibonacci = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nconst fibonacci = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nconst fibonacci = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nconst fibonacci = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nconst fibonacci = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nconst fibonacci = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n        return 1\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nconst fibonacci = (n) => {\n    if (n === 0) {\n        return 0\n    } else if (n === 1) {"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = []\n  const stack = []\n  const match = /\\[([^\\[\\]]*)\\]/g\n\n  while (match.exec(string)) {\n    brackets.push(match.exec(string)[1])\n  }\n\n  stack.push(0)\n  stack.push(0)\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[' && stack[stack.length - 2] === 0) {\n      stack.push(1)\n    } else if (brackets[i] === ']' && stack[stack.length - 2] === 1) {\n      stack.pop()\n    }\n  }\n\n  return stack.length > 1\n}\n\n// Test\nisNest('[[]]') // true\nisNest('[]]]]]]][[[[[]') // false\nisNest('[][]') // false\nisNest('[]') // false\nisNest('[[][]]') // true\nisNest('[[]][[') // true\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  const sum = (a, b) => {\n    return a + b;\n  }\n\n  const square = (x) => {\n    return x * x;\n  }\n\n  return lst.reduce(sum, 0)\n   .map(square)\n   .reduce(sum, 0);\n}\n\nconst sumOfSquares = (lst) => {\n  const sum = (a, b) => {\n    return a + b;\n  }\n\n  return lst.reduce(sum, 0);\n}\n\nconst main = () => {\n  const lst = [\n    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100\n  ];\n\n  console.log(sumsSquares(lst));\n  console.log(sumOfSquares(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  txt = txt.trim();\n  if (txt.length === 0) {\n    return false;\n  }\n  const lastChar = txt[txt.length - 1];\n  const charIsALetter =\n    lastChar.toLowerCase() === lastChar &&\n   !isWord(txt.substring(0, txt.length - 1));\n  return charIsALetter;\n};\n\nexport default checkIfLastCharsIsALetter;\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  for(let i = 1; i < arr.length; i++) {\n    if(arr[i] > arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately following it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,3,4,5]) = 2\n  canArranging([1,2,3]) = 3\n  */\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  for(let i = 1; i < arr.length; i++) {\n    if(arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  for(let i = 1; i < arr.length; i++) {\n    if(arr[i] > arr[i - 1] && arr[i] < arr[i + 1]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] > arr[i - 1] && arr[i] < arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] < arr[i - 1] && arr[i] > arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] > arr[i - 1] && arr[i] < arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] < arr[i - 1] && arr[i] > arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] < arr[i - 1] && arr[i] > arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] > arr[i - 1] && arr[i] < arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] > arr[i - 1] && arr[i] < arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] < arr[i - 1] && arr[i] < arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] > arr[i - 1] && arr[i] < arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst canArranging = (arr) => {\n  if(arr.length <= 1) {\n    return -1;\n  }\n  let i = 1;\n  while(i < arr.length) {\n    if(arr[i] < arr[i - 1] && arr[i] > arr"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  if (!lst) return (null, null);\n  const max = -Infinity;\n  const min = Infinity;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) max = x;\n  }\n  if (min === max) return (null, null);\n  return ([max, min], lst);\n}\n\nconst largerSmallerIntegers2 = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) max = x;\n  }\n  if (min === max) return null;\n  return [max, min];\n}\n\nconst largerSmallerIntegers3 = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  let max_pos = 0;\n  let min_pos = 0;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) {\n      max = x;\n      max_pos = lst.indexOf(x);\n    }\n  }\n  if (min === max) return null;\n  return [max, min, max_pos, min_pos];\n}\n\nconst largerSmallerIntegers4 = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  let max_pos = 0;\n  let min_pos = 0;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) {\n      max = x;\n      max_pos = lst.indexOf(x);\n    }\n  }\n  if (min === max) return null;\n  return [max, min, max_pos, min_pos];\n}\n\nconst largerSmallerIntegers5 = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  let max_pos = 0;\n  let min_pos = 0;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) {\n      max = x;\n      max_pos = lst.indexOf(x);\n    }\n  }\n  if (min === max) return null;\n  return [max, min, max_pos, min_pos];\n}\n\nconst largerSmallerIntegers6 = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  let max_pos = 0;\n  let min_pos = 0;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) {\n      max = x;\n      max_pos = lst.indexOf(x);\n    }\n  }\n  if (min === max) return null;\n  return [max, min, max_pos, min_pos];\n}\n\nconst largerSmallerIntegers7 = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  let max_pos = 0;\n  let min_pos = 0;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) {\n      max = x;\n      max_pos = lst.indexOf(x);\n    }\n  }\n  if (min === max) return null;\n  return [max, min, max_pos, min_pos];\n}\n\nconst largerSmallerIntegers8 = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  let max_pos = 0;\n  let min_pos = 0;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) {\n      max = x;\n      max_pos = lst.indexOf(x);\n    }\n  }\n  if (min === max) return null;\n  return [max, min, max_pos, min_pos];\n}\n\nconst largestSmallest = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  let max_pos = 0;\n  let min_pos = 0;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) {\n      max = x;\n      max_pos = lst.indexOf(x);\n    }\n  }\n  if (min === max) return null;\n  return [max, min, max_pos, min_pos];\n}\n\nconst largestSmallest2 = (lst) => {\n  if (!lst) return null;\n  const max = -Infinity;\n  const min = Infinity;\n  let max_pos = 0;\n  let min_pos = 0;\n  for (const x of lst) {\n    if (x < min) min = x;\n    if (x > max) {\n      max = x;\n      max_pos = lst.indexOf(x);\n    }\n  }\n  if (min === max) return null;\n  return [max, min, max_pos, min_pos];\n}\n\nconst largestSmallest3 = (lst) => {\n  if (!lst) return null;\n  const max = -Inf"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (typeof a!== typeof b) {\n    return a > b? a : b;\n  }\n  if (a < b) {\n    return a;\n  }\n  if (a === b) {\n    return null;\n  }\n  if (a.charAt(0) === ',') {\n    return parseFloat(a) > parseFloat(b)? parseFloat(a) : parseFloat(b);\n  }\n  return a;\n};\n\nconsole.log(comparingOne(1, 2.5)); // 2.5\nconsole.log(comparingOne(1, \"2,3\")); // \"2,3\"\nconsole.log(comparingOne(\"5,1\", \"6\")); // \"6\"\nconsole.log(comparingOne(\"1\", 1)); // null\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  let count = 0;\n  while (count < 4) {\n    if (n === 2 * (2 * count + 1)) {\n      count += 1;\n    } else if (n === 2 * (2 * count + 2)) {\n      count += 2;\n    } else {\n      break;\n    }\n  }\n  return count === 4;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingThird = (n) => {\n  let count = 0;\n  while (count < 3) {\n    if (n === 2 * (2 * count + 1)) {\n      count += 1;\n    } else if (n === 2 * (2 * count + 2)) {\n      count += 2;\n    } else {\n      break;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSummingThird(4) == false\n  isEqualToSummingThird(6) == false\n  isEqualToSummingThird(8) == true\n  */\nconst isEqualToSummingSecond = (n) => {\n  let count = 0;\n  while (count < 2) {\n    if (n === 2 * (2 * count + 1)) {\n      count += 1;\n    } else if (n === 2 * (2 * count + 2)) {\n      count += 2;\n    } else {\n      break;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 1 positive even number\n  Example\n  isEqualToSummingSecond(4) == false\n  isEqualToSummingSecond(6) == false\n  isEqualToSummingSecond(8) == true\n  */\nconst isEqualToSummingFirst = (n) => {\n  let count = 0;\n  while (count < 1) {\n    if (n === 2 * (2 * count + 1)) {\n      count += 1;\n    } else if (n === 2 * (2 * count + 2)) {\n      count += 2;\n    } else {\n      break;\n    }\n  }\n  return count === 1;\n};\n\nexport {\n  isEqualToSummingEven,\n  isEqualToSummingThird,\n  isEqualToSummingSecond,\n  isEqualToSummingFirst\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    return 1\n  }\n\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4)\n}\n\nexport default specialFactorial\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/[ ]{2,}/g, '-');\n};\n\n/**\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with spaces. \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example 1\"\n  fixesSpace(\" Example 2\") == \"Example 2\"\n  fixesSpace(\" Example   3\") == \"Example 3\"\n  \n  Also, if a string has more than 2 spaces in a row, then replace \n  all spaces with -\n  fixesSpace(\" Example   1   2\") == \"Example_1_2\"\n  */\nconst fixes2Spaces = (text) => {\n  return text.replace(/[_ ]{2,}/g, '_').replace(/[ ]{2,}/g, '-');\n};\n\nmodule.exports = {\n  fixesSpace,\n  fixes2Spaces\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n    if(file_name.match(/\\d{3}/)){\n        return 'No'\n    }\n    if(file_name.match(/\\./)){\n        return 'No'\n    }\n    if(file_name.match(/^[a-zA-Z]+$/)){\n        return 'Yes'\n    }\n    if(file_name.match(/\\.txt$/)){\n        return 'Yes'\n    }\n    if(file_name.match(/\\.exe$/)){\n        return 'Yes'\n    }\n    if(file_name.match(/\\.dll$/)){\n        return 'Yes'\n    }\n    return 'No'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  the first character of the file's name.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameFirstChar(\"example.txt\") # => 'e'\n  fileNameFirstChar(\"1example.dll\") # => '1'\n  */\nconst fileNameFirstChar = (file_name) => {\n    if(file_name.match(/\\d{3}/)){\n        return 'No'\n    }\n    if(file_name.match(/\\./)){\n        return 'No'\n    }\n    if(file_name.match(/^[a-zA-Z]+$/)){\n        return file_name[0]\n    }\n    if(file_name.match(/\\.txt$/)){\n        return 't'\n    }\n    if(file_name.match(/\\.exe$/)){\n        return 'e'\n    }\n    if(file_name.match(/\\.dll$/)){\n        return 'd'\n    }\n    return 'No'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  the last character of the file's name.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameLastChar(\"example.txt\") # => 't'\n  fileNameLastChar(\"1example.dll\") # => 'd'\n  */\nconst fileNameLastChar = (file_name) => {\n    if(file_name.match(/\\d{3}/)){\n        return 'No'\n    }\n    if(file_name.match(/\\./)){\n        return 'No'\n    }\n    if(file_name.match(/^[a-zA-Z]+$/)){\n        return file_name[file_name.length - 1]\n    }\n    if(file_name.match(/\\.txt$/)){\n        return 't'\n    }\n    if(file_name.match(/\\.exe$/)){\n        return 'e'\n    }\n    if(file_name.match(/\\.dll$/)){\n        return 'd'\n    }\n    return 'No'\n}<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  const result = [];\n  const len = lst.length;\n  let sum = 0;\n  \n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  result.push(sum);\n  return result;\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the length of the string. The length of the \n  string shall not be more than 50 characters. If the list contains more than 50 characters, the function shall return the maximum length. \n  \n  Examples:\n  For lst = ['A','B','C','D','E'] the output should be 6\n  For lst = ['A','B','C','D','E','F'] the output should be 50\n  For lst = []  the output should be 0\n  For lst = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] the output should be 50\n  */\nconst getLength = (lst) => {\n  const len = lst.length;\n  \n  if (lst.length > 50) {\n    return 50;\n  }\n  \n  return len;\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the number of unique characters in the string. The \n  string may contain multiple instances of the same character. If the list contains more than 100 unique characters, the function shall return the \n  maximum number of unique characters. \n  \n  Examples:\n  For lst = ['A','B','C','D','E'] the output should be 5\n  For lst = ['A','B','C','D','E','F'] the output should be 5\n  For lst = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] the output should be 5\n  For lst = []  the output should be 0\n  For lst = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] the output should be 5\n  */\nconst getNumUniqueChars = (lst) => {\n  const len = lst.length;\n  \n  if (lst.length > 100) {\n    return 100;\n  }\n  \n  return len;\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the longest string in the list. The string may contain multiple \n  instances of the same character. If the list contains more than 100 unique characters, the function shall return the maximum string in the list. \n  \n  Examples:\n  For lst = ['A','B','C','D','E'] the output should be 'E'\n  For lst = ['A','B','C','D','E','F'] the output should be 'F'\n  For lst = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] the output should be 'Z'\n  For lst = []  the output should be ''\n  For lst = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] the output should be 'Z'\n  */\nconst getLongest = (lst) => {\n  const len = lst.length;\n  \n  if (lst.length > 100) {\n    return lst[0];\n  }\n  \n  return lst[0];\n}\n\nmodule.exports = {\n  sumsSquares,\n  getLength,\n  getNumUniqueChars,\n  getLongest\n};<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  let length = sentence.length;\n  let newSentence = [];\n  let currentWord = '';\n  let nextWord = '';\n  let count = 0;\n  let i = 0;\n  while (i < length) {\n    nextWord = sentence.substr(i, 1);\n    currentWord = nextWord;\n    count += 1;\n    if (count % 2 === 0) {\n      newSentence.push(currentWord);\n    }\n    i += 1;\n  }\n  return newSentence.join(' ');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = [x, n].map(parseFloat);\n  if (denominator === 1) return numerator!== 0;\n  return simplify(numerator, denominator);\n};\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  return nums.sort((a, b) => {\n    const diff = (a - b) % 10;\n    if (diff === 0) {\n      return a - b;\n    } else {\n      return diff;\n    }\n  });\n};\n\nconst orderByPoint = (nums) => {\n  return nums.sort((a, b) => {\n    const diff = (a - b) % 10;\n    if (diff === 0) {\n      return a - b;\n    } else {\n      return diff;\n    }\n  });\n};\n\n/*\n  Write a function which returns the index of the largest element\n  from the given array.\n\n  For example:\n  >>> largestIndex(1, 1, 1, 2, 3, 5, 7, 8, 8, 9)\n  >>> largestIndex([1, 2, 3, 4, 5, 6])\n  >>> largestIndex([])\n  */\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst largestIndex = (nums) => {\n  const largest = nums[0];\n  let index = 0;\n  for (let i = 1; i < nums.length;"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.filter(function (n) {\n    return n % 2 === 0 && (n % 10 === 1 || n % 10 === 3 || n % 10 === 5 || n % 10 === 7 || n % 10 === 9);\n  });\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2\n\n/*\n  Write a function that takes an array of strings as input and returns \n  an array of strings that contain the first letter of every string in \n  the array. For example:\n  specialFilter([\"I\", \"love\", \"leetcode\", \"I love leetcode!\"]) \n  => [\"I\", \"love\", \"leetcode\"]\n  */\nconst specialFilter = (nums) => {\n  return nums.map(function (n) {\n    return n.charAt(0);\n  });\n};\n\nconsole.log(specialFilter([\"I\", \"love\", \"leetcode\", \"I love leetcode!\"])); // [\"I\", \"love\", \"leetcode\"]\nconsole.log(specialFilter([\"I\", \"love\", \"leetcode\", \"I love leetcode!\"])); // [\"I\", \"love\", \"leetcode\"]\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  let a = new Array(n);\n  let total = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let num = i * i - i + 1;\n    let index = i;\n    let last = i;\n    while (index < n) {\n      a[index] = num;\n      last = index;\n      index += 1;\n    }\n    total += (a[i] + a[last]) % 3;\n  }\n  return total;\n};\n\nconst test_max_triples = (actual, expected) => {\n  const message = (actual, expected) => `Expected: ${expected}\n                                        Actual:   ${actual}`;\n  return message(actual, expected);\n};\n\nconst test = (actual, expected) => {\n  const message = (actual, expected) => `Expected: ${expected}\n                                        Actual:   ${actual}`;\n  return message(actual, expected);\n};\n\nconst assertEqual = (actual, expected) => {\n  if (actual!== expected) {\n    throw new Error(`Expected: ${expected}\n                    Actual:   ${actual}`);\n  }\n};\n\nconst assert = (actual, expected) => {\n  if (actual!== expected) {\n    throw new Error(`Expected: ${expected}\n                    Actual:   ${actual}`);\n  }\n};\n\nmodule.exports = {\n  testMaxTriples: testMaxTriples,\n  test: test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  const b = planets.map(p => bf(p, planet2));\n  return b.reduce((a, b) => a.concat(b), []);\n}\n\nbf(\"Mercury\", \"Jupiter\")\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  return lst.reduce((a, b) => {\n    if (a.length === b.length) {\n      return a.concat(b);\n    } else if (a.length < b.length) {\n      return a.concat(b.slice(0, a.length));\n    } else {\n      return b.slice(0, a.length).concat(a);\n    }\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst isPrime = n => {\n  if (n === 1) {\n    return false;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = 3;\n  while (i < Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n}\n\nconsole.log(xOrY(7, 34, 12));\nconsole.log(xOrY(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n\n  const sum = lst.reduce((prev, current) => prev + current, 0);\n  const diff = sum;\n  const squareDiff = (x) => (x * x);\n\n  return (\n    (diff === 0)? 0 :\n    (diff % 2 === 1)? sum + squareDiff(diff) :\n    squareDiff(sum)\n  );\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // 0\nconsole.log(doubleTheDifference([9, -2])); // 81\nconsole.log(doubleTheDifference([0])); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const answer = game.map(guess);\n  const result = [...new Set(answer)].sort().reverse().map(i => Math.abs(i - answer[i]));\n  return result;\n}\n\nconst getDiff = (game, guess) => compare(game, guess);\n\nconst getScore = (guess) => game.reduce((acc, curr) => acc + curr, 0);\n\nconst getMaxScore = (guess) => game.reduce((acc, curr) => Math.max(acc, curr), 0);\n\nconst getMaxScore = (guess) => game.reduce((acc, curr) => Math.max(acc, curr), 0);\n\nconst getMinScore = (guess) => game.reduce((acc, curr) => Math.min(acc, curr), 0);\n\nconst getMinScore = (guess) => game.reduce((acc, curr) => Math.min(acc, curr), 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => (acc + curr) / game.length, 0);\n\nconst getAveScore = (guess) => game.reduce((acc, curr) => ("}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const classes = extensions.map(extension => `${extension.charAt(0).toUpperCase()}${extension.slice(1)}`);\n  const strength = classes.reduce((prev, curr) => prev - curr.length, 0);\n  return `${class_name}.${classes[classes.length - 1]}`;\n};\n\n/*\n  Given a set of classes, return a list of the classes that have the highest\n  strength (i.e. the strongest extensions) in the set.\n  Example:\n  classes = [ 'Slices', 'Dairy', 'Apple' ]\n  return strongestExtensions(classes) == [ 'Slices', 'Apple' ]\n  */\nconst strongestExtensions = (classes) => {\n  return classes.reduce((prev, curr) => {\n    const curr_strength = strongestExtension(curr, classes);\n    if (curr_strength === curr) {\n      prev.push(curr);\n    } else if (curr_strength > curr) {\n      prev.push(curr_strength);\n    }\n    return prev;\n  }, []);\n};\n\nmodule.exports = {\n  extensions: strongestExtensions\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n    for(let i = 0; i < a.length; i++) {\n        for(let j = 0; j < b.length; j++) {\n            if(a[i] === b[j] || a[i] === b[j].toUpperCase()) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n//const cycpatternCheck = (a, b) => {\n//    if(a.indexOf(b) > -1) {\n//        return true;\n//    }\n//    for(let i = 0; i < a.length; i++) {\n//        for(let j = 0; j < b.length; j++) {\n//            if(a.indexOf(b[j]) > -1) {\n//                return true;\n//            }\n//        }\n//    }\n//    return false;\n//};\n\n//console.log(cycpatternCheck(\"abcd\", \"abd\"));\nconsole.log(cycpatternCheck(\"hello\", \"ell\"));\nconsole.log(cycpatternCheck(\"whassup\", \"psus\"));\nconsole.log(cycpatternCheck(\"abab\", \"baa\"));\nconsole.log(cycpatternCheck(\"efef\", \"eeff\"));\nconsole.log(cycpatternCheck(\"himenss\", \"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let even = 0,\n    odd = 0;\n  for (let i = 0; i < num.toString().length; i += 1) {\n    if (num % 2 === 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n};\n\nexport { evenOdderCount };\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const ones = [ 'i', 'ii', 'iii', 'iv' ]\n  const tens = [ 'x', 'xx', 'xxx', 'xl', 'lx', 'lxx', 'lxxx', 'xv', 'vx', 'vxx', 'vxxx', 'vl', 'vlx', 'vlxx', 'vlxxx', 'lxv', 'xlv', 'lxlv', 'lxlvx' ]\n  const hundreds = [ 'c', 'cc', 'ccc', 'cd', 'cdd', 'cddd', 'cdx', 'cxd', 'cxdx', 'cxl', 'cxlx', 'cxlv', 'cxlvx', 'cl', 'clx', 'clxx', 'clxxx', 'clxl', 'clxlv', 'clxlvx' ]\n  const thousands = ['m','mm','mmm','mmx','mmxx','mmxxx','mmxl','mmxlx','mmxlv','mmxlvx','mv','mvv','mvvx','mvvxx','mvvxxx','mvvxl','mvvxlv','mvvxlvx' ]\n  const million = ['m','mm','mmm','mmx','mmxx','mmxxx','mmxl','mmxlx','mmxlv','mmxlvx','ml','mlx','mlxx','mlxxx','mlxl','mlxlv','mlxlvx' ]\n  const thousand = [ 'v', 'vv', 'vvv', 'vvx', 'vvxx', 'vvxxx', 'vvxl', 'vvxlv', 'vvxlvx', 'vlv', 'vlvx', 'vlvxx', 'vlvxxx', 'vlvxl', 'vlvxlv', 'vlvxlvx' ]\n  const hundred = [ 'x', 'xx', 'xxx', 'xxl', 'lxx', 'lxxx', 'lxxl', 'lxxxx', 'xl', 'xlx', 'xlxx', 'xlxxx', 'xlv', 'xlvx', 'xlvxx', 'xlvxxx', 'xlxl', 'xlxlv', 'xlxlvx' ]\n  const thousand = [ 'c', 'cc', 'ccc', 'cccc', 'ccccc', 'cccccc', 'cccccx', 'cccccx', 'ccccxc', 'ccccxl', 'ccccxlv', 'ccccxlvx', 'cccccl', 'ccccclx', 'ccccclxx', 'ccccclxxx', 'ccccclxl', 'ccccclxlv', 'ccccclxlvx' ]\n  const million = ['m','mm','mmm','mmx','mmxx','mmxxx','mmxl','mmxlx','mmxlv','mmxlvx','mml','mmlx','mmlxx','mmlxxx','mmlxl','mmlxlv','mmlxlvx' ]\n  const thousand = [ 'v', 'vv', 'vvv', 'vvx', 'vvxx', 'vvxxx', 'vvxl', 'vvxlv', 'vvxlvx', 'vvlv', 'vvlvx', 'vvlvxx', 'vvlvxxx', 'vvlvxl', 'vvlvxlv', 'vvlvxlvx' ]\n  const hundred = [ 'x', 'xx', 'xxx', 'xxl', 'lxx', 'lxxx', 'lxxl', 'lxxxx', 'xl', 'xlx', 'xlxx', 'xlxxx', 'xlv', 'xlvx', 'xlvxx', 'xlvxxx', 'xlxl', 'xlxlv', 'xlxlvx' ]\n  const thousand = [ 'c', 'cc', 'ccc', 'cccc', 'ccccc', 'cccccc', 'ccccccc', 'cccccx', 'cccccx', 'ccccxc', 'ccccxl', 'ccccxlv', 'ccccxlvx', 'cccccl', 'ccccclx', 'ccccclxx', 'ccccclxxx', 'ccccclxl', 'ccccclxlv', 'ccccclxlvx' ]\n  const hundred = ['m','mm','mmm','mmx','mmxx','mmxxx','mmxl','mmxlx','mmxlv','mmxlvx','mml','mmlx','mmlxx','mmlxxx','mmlxl','mmlxlv','mmlxlvx' ]\n  const thousand = [ 'v', 'vv', 'vvv', 'vvx', 'vvxx', 'vvxxx', 'vvxl', 'vvxlv', 'vvxlvx', 'vvlv', 'vvlvx', 'vvlvxx', 'vvlvxxx', 'vvlvxl', 'vvlvxlv', 'vvlvxlvx' ]\n  const hundred = [ 'x', 'xx', 'xxx', 'xxl', 'lxx', 'lxxx', 'lxxl', 'lxxxx', 'xl', 'xlx', 'xlxx', 'xlxxx', 'xlv', 'xlvx', 'xlvxx', 'xlvxxx', 'xlxl', 'xlxlv', 'xlxlvx' ]\n  const thousand = [ 'c', 'cc', 'ccc', 'cccc', 'ccccc', 'cccccc', 'ccccccc', 'cccccx', 'cccccx', 'ccccxc', 'ccccxl', 'ccccxlv', 'ccccxlvx', 'cccccl', 'ccccclx', 'ccccclxx', 'ccccclxxx', 'ccccclxl', 'ccccclxlv', 'ccccclxlvx' ]\n  const million = [ '"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  return (((a + b) >= c) && (a + c) >= b) && ((b + c) >= a) && ((a + b) >= a) && ((b + c) >= c) && ((a + c) >= b)\n}\n\n/*\n Given a triangle, return the missing triangle.\n  Example:\n  missingTriangle(3, 4, 5) == 2\n  missingTriangle(1, 2, 3) == 6\n  missingTriangle(1, 3, 4) == 7\n  missingTriangle(2, 3, 4) == 5\n  missingTriangle(3, 4, 5) == 9\n  */\nconst missingTriangle = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - a - b - c\n  }\n  else {\n    return (a + b + c) - (a + b) - (a + c) - (b + c)\n  }\n}\n\n/*\n Given a triangle, return the missing triangle.\n  Example:\n  missingTriangle(3, 4, 5) == 2\n  missingTriangle(1, 2, 3) == 6\n  missingTriangle(1, 3, 4) == 7\n  missingTriangle(2, 3, 4) == 5\n  missingTriangle(3, 4, 5) == 9\n  */\nconst missingTriangle2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - a - b - c\n  }\n  else {\n    return (a + b + c) - (a + b) - (a + c) - (b + c)\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  const len = words.length\n  const maxLen = words.reduce((previous, current) => {\n    return (current.length > previous)? current.length : previous\n  }, 0)\n  const maxCount = words.reduce((previous, current) => {\n    return (current.length === maxLen)? current.length : previous\n  }, 0)\n  const max = words.find((element) => {\n    return (element.length === maxLen) && (element.length === maxCount)\n  })\n  return (max)? max.toString() : \"\"\n}\n\nconsole.log(foundMax([\n  \"name\",\n  \"of\",\n  \"string\"\n]))\nconsole.log(foundMax([\n  \"name\",\n  \"enam\",\n  \"game\"\n]))\nconsole.log(foundMax([\n  \"aaaaaaa\",\n  \"bb\",\"cc\"\n]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = number;\n  let need = number - number % need;\n  let remaining = remaining - remaining % need;\n  let result = [need, remaining];\n  let eaten = total - remaining;\n  while (need > 0) {\n    result = [need, remaining];\n    eaten += need;\n    if (eaten > remaining) {\n      need = remaining;\n      remaining = eaten - remaining;\n      eaten = eaten - remaining;\n    } else {\n      need -= eaten;\n      remaining -= eaten;\n    }\n  }\n  return result;\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test_result = [11, 4];\n\nconst result = test.map(eat);\n\nconsole.log(result);\nconsole.log(result[0] +'' + result[1]);\n\nconsole.log(test_result);\n\nconsole.log(test_result[0] +'' + test_result[1]);\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    if (operator.length < 2) {\n        return operand;\n    }\n    let result = operand[0];\n    for (let i = 1; i < operator.length; i++) {\n        result = operator[i - 1](result, operand[i]);\n    }\n    return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  return s.split('')\n   .map((x) => {\n      if (x === 'A' || x === 'a') return 'a'\n      if (x === 'B' || x === 'b') return 'b'\n      if (x === 'C' || x === 'c') return 'c'\n      if (x === 'D' || x === 'd') return 'd'\n      if (x === 'E' || x === 'e') return 'e'\n      if (x === 'F' || x === 'f') return 'f'\n      if (x === 'G' || x === 'g') return 'g'\n      if (x === 'H' || x === 'h') return 'h'\n      if (x === 'I' || x === 'i') return 'i'\n      if (x === 'J' || x === 'j') return 'j'\n      if (x === 'K' || x === 'k') return 'k'\n      if (x === 'L' || x === 'l') return 'l'\n      if (x === 'M' || x ==='m') return'm'\n      if (x === 'N' || x === 'n') return 'n'\n      if (x === 'O' || x === 'o') return 'o'\n      if (x === 'P' || x === 'p') return 'p'\n      if (x === 'Q' || x === 'q') return 'q'\n      if (x === 'R' || x === 'r') return 'r'\n      if (x === 'S' || x ==='s') return's'\n      if (x === 'T' || x === 't') return 't'\n      if (x === 'U' || x === 'u') return 'u'\n      if (x === 'V' || x === 'v') return 'v'\n      if (x === 'W' || x === 'w') return 'w'\n      if (x === 'X' || x === 'x') return 'x'\n      if (x === 'Y' || x === 'y') return 'y'\n      if (x === 'Z' || x === 'z') return 'z'\n      return x\n    })\n   .reverse()\n   .join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if(!text) {\n        return null;\n    }\n    return hashlib.md5(text).digest('hex');\n};\n\nmodule.exports = {\n    stringToMd5\n};<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const res = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\nconst test = [2, 8, 10, 14];\n\nconsole.log(generateIntegers(2, 8));\nconsole.log(generateIntegers(8, 2));\nconsole.log(generateIntegers(10, 14));\n<|endoftext|>"}
