{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n    const hadClosest = [];\n    const hadClosestSet = new Set();\n    const foundClosest = [];\n    const foundClosestSet = new Set();\n\n    numbers.forEach(number => {\n        const closestNumber = closestNumber(number, numbers);\n        if (!hadClosestSet.has(closestNumber)) {\n            hadClosest.push(closestNumber);\n            hadClosestSet.add(closestNumber);\n        }\n\n        if (!foundClosestSet.has(closestNumber)) {\n            foundClosest.push(closestNumber);\n            foundClosestSet.add(closestNumber);\n        }\n    });\n\n    const hadClosestCount = hadClosest.length;\n    const foundClosestCount = foundClosest.length;\n\n    if (hadClosestCount < foundClosestCount) {\n        return false;\n    }\n\n    if (hadClosestCount === foundClosestCount) {\n        return hadClosest.every(closest => foundClosestSet.has(closest));\n    }\n\n    return true;\n};\n\nmodule.exports = hadClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const len = paren_string.length\n  const index = paren_string.indexOf('(')\n  let left_paren_string = ''\n  let right_paren_string = ''\n  let nested_paren_strings = []\n\n  while (index!== -1) {\n    left_paren_string += paren_string.substring(0, index + 1)\n    right_paren_string += paren_string.substring(index + 1, len)\n    nested_paren_strings.push(separateNestedParenGroup(paren_string.substring(index + 1, len)))\n    paren_string = paren_string.substring(len, len)\n    index = paren_string.indexOf('(')\n  }\n\n  left_paren_string += paren_string\n  right_paren_string += paren_string\n  return [left_paren_string, right_paren_string].concat(nested_paren_strings)\n}\n\n/**\n  Input: \"()((()))()\"\n  Output: [\"()\", \"(()())\", \"()\"]\n  */\nconst separateNestedParenGroup = (paren_string) => {\n  const len = paren_string.length\n  const index = paren_string.indexOf('(')\n  let left_paren_string = ''\n  let right_paren_string = ''\n  let nested_paren_strings = []\n\n  while (index!== -1) {\n    left_paren_string += paren_string.substring(0, index + 1)\n    right_paren_string += paren_string.substring(index + 1, len)\n    nested_paren_strings.push(separateNestedParenGroup(paren_string.substring(index + 1, len)))\n    paren_string = paren_string.substring(len, len)\n    index = paren_string.indexOf('(')\n  }\n\n  left_paren_string += paren_string\n  right_paren_string += paren_string\n  return [left_paren_string, right_paren_string].concat(nested_paren_strings)\n}\n\nmodule.exports = separateParenGroup\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  const decimalPart = numberAsString.sub(integerPart);\n  return decimalPart.toFloat();\n};\n\n/* Given a positive floating point number, return a string with\n  only the integer part.\n  */\nconst truncateInteger = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive floating point number, return a string with\n  the decimal part.\n  */\nconst truncateDecimal = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  const decimalPart = numberAsString.sub(integerPart);\n  return decimalPart.toFloat();\n};\n\n/* Given a positive integer number, return a string with\n  the decimal part.\n  */\nconst truncateDecimalInteger = (number) => {\n  const numberAsString = parseInt(number);\n  const integerPart = numberAsString.toInt();\n  const decimalPart = numberAsString.sub(integerPart);\n  return decimalPart.toFloat();\n};\n\n/* Given a positive integer number, return a string with\n  the decimal part.\n  */\nconst truncateDecimalIntegerNumber = (number) => {\n  const numberAsString = parseInt(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive integer number, return a string with\n  the integer part.\n  */\nconst truncateIntegerNumber = (number) => {\n  const numberAsString = parseInt(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive integer number, return a string with\n  the integer part.\n  */\nconst truncateIntegerNumberNumber = (number) => {\n  const numberAsString = parseInt(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive floating point number, return a string with\n  the integer part.\n  */\nconst truncateFloat = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive integer number, return a string with\n  the integer part.\n  */\nconst truncateFloatInteger = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive integer number, return a string with\n  the integer part.\n  */\nconst truncateFloatNumber = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive integer number, return a string with\n  the integer part.\n  */\nconst truncateFloatNumberNumber = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive integer number, return a string with\n  the integer part.\n  */\nconst truncateFloatIntegerNumber = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n\n/* Given a positive integer number, return a string with\n  the integer part.\n  */\nconst truncateFloatIntegerNumberNumber = (number) => {\n  const numberAsString = parseFloat(number);\n  const integerPart = numberAsString.toInt();\n  return integerPart.toString();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n    const operationsSum = operations.reduce((acc, cur) => acc + cur, 0);\n    return operationsSum < 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  // Initialize the average absolute deviation value.\n  const totalDeviation = 0;\n\n  // Initialize the total number of input elements.\n  const totalNumberOfInputs = 0;\n\n  // Loop through all the inputs.\n  for (let i = 0; i < numbers.length; i++) {\n    // Calculate the current element's deviation from the mean.\n    const currentElementDeviation = Math.abs(numbers[i] - mean(numbers));\n\n    // Add the deviation to the total deviation.\n    totalDeviation += currentElementDeviation;\n\n    // Add the number of inputs to the total number of inputs.\n    totalNumberOfInputs += 1;\n  }\n\n  // Calculate the average absolute deviation.\n  const meanDeviation = totalDeviation / totalNumberOfInputs;\n\n  // Return the average absolute deviation.\n  return meanDeviation;\n};\n\n// Export our functions.\nmodule.exports = {\n  meanerAbsolutesDeviation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  return (numbers || []).reduce((arr, n, i) => {\n    arr.push(n);\n    if (i < numbers.length - 1) {\n      arr.push(delimeter);\n    }\n    return arr;\n  }, []);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  let stack = [0];\n  let output = [];\n  let paren_string_length = paren_string.length;\n  let paren_string_index = 0;\n  while (paren_string_index < paren_string_length) {\n    if (paren_string[paren_string_index] === '(') {\n      paren_string_index += 1;\n      stack.push(paren_string_index);\n    } else if (paren_string[paren_string_index] === ')') {\n      paren_string_index += 1;\n      while (stack.length > 0 && stack[stack.length - 1]!== paren_string_index) {\n        paren_string_index = stack.pop();\n      }\n    } else {\n      paren_string_index += 1;\n    }\n  }\n  while (stack.length > 0) {\n    paren_string_index = stack.pop();\n    output.push(paren_string_index);\n  }\n  return output;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter((string) => {\n    return string.indexOf(substring)!== -1;\n  });\n};\n\n// Filter an input list of strings only for ones that start with given prefix\n// Example: filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'ab')\n// -> ['abc', 'bacd']\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((string) => {\n    return string.startsWith(prefix);\n  });\n};\n\n// Get first and last string in an array\nconst getFirstLast = (strings) => {\n  return [\n    strings[0],\n    strings[strings.length - 1]\n  ];\n};\n\n// Get the length of an array of strings\nconst length = (strings) => {\n  return strings.length;\n};\n\nexport {\n  filterBySubstring,\n  filterByPrefix,\n  getFirstLast,\n  length\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  // Start typing below this line.\n  numbers.sort();\n\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n};\n\nexport default sumProducts;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = Math.max(...numbers)\n  const maxIndex = numbers.indexOf(max)\n  const maxValues = numbers.slice(0, maxIndex)\n  const maxSum = maxValues.reduce((sum, value) => sum + value, 0)\n  const maxLength = maxValues.length\n\n  const maxIndexOfMaxLength = maxIndex + maxLength - 1\n  const maxSumOfMaxLength = maxValues.slice(0, maxIndexOfMaxLength).reduce((sum, value) => sum + value, 0)\n  const maxValuesOfMaxLength = numbers.slice(maxIndexOfMaxLength, numbers.length)\n\n  const maxLengthIndex = maxLength - 1\n  const maxSumOfMaxLengthIndex = maxLengthIndex + maxSumOfMaxLength - 1\n  const maxValuesOfMaxLengthIndex = numbers.slice(maxLengthIndex, maxSumOfMaxLengthIndex)\n\n  return [...maxValues, max, maxSum, maxValuesOfMaxLength, maxLength, maxSumOfMaxLength, maxValuesOfMaxLengthIndex]\n}\n\nexport default rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const postfix = string.split('').reverse().join('');\n  if (isPalindrome(prefix)) {\n    return postfix;\n  } else {\n    return prefix + makePalindrome(postfix);\n  }\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome2 = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const postfix = string.split('').join('');\n  if (isPalindrome(prefix)) {\n    return postfix;\n  } else {\n    return prefix + makePalindrome2(postfix);\n  }\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome3 = (string) => {\n  const prefix = string.split('').join('');\n  const postfix = string.split('').reverse().join('');\n  if (isPalindrome(prefix)) {\n    return postfix;\n  } else {\n    return prefix + makePalindrome3(postfix);\n  }\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome4 = (string) => {\n  const prefix = string.split('').join('');\n  const postfix = string.split('').reverse().join('');\n  if (isPalindrome(prefix)) {\n    return postfix;\n  } else {\n    return prefix + makePalindrome4(postfix);\n  }\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome5 = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const postfix = string.split('').join('');\n  if (isPalindrome(prefix)) {\n    return postfix;\n  } else {\n    return prefix + makePalindrome5(postfix);\n  }\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome6 = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const postfix = string.split('').reverse().join('');\n  if (isPalindrome(prefix)) {\n    return postfix;\n  } else {\n    return prefix + makePalindrome6(postfix);\n  }\n}\n\nmodule.exports = {\n  isPalindrome,\n  makePalindrome,\n  makePalindrome2,\n  makePalindrome3,\n  makePalindrome4,\n  makePalindrome5,\n  makePalindrome6\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let a_string = a;\n  let b_string = b;\n  let a_length = a_string.length;\n  let b_length = b_string.length;\n\n  for (let i = 0; i < a_length; i++) {\n    for (let j = 0; j < b_length; j++) {\n      let bit = (a_string[i] ^ b_string[j]);\n      a_string[i] = bit;\n    }\n  }\n  return a_string;\n}\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd = (a, b) => {\n  let a_string = a;\n  let b_string = b;\n  let a_length = a_string.length;\n  let b_length = b_string.length;\n\n  for (let i = 0; i < a_length; i++) {\n    for (let j = 0; j < b_length; j++) {\n      let bit = (a_string[i] & b_string[j]);\n      a_string[i] = bit;\n    }\n  }\n  return a_string;\n}\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  let a_string = a;\n  let b_string = b;\n  let a_length = a_string.length;\n  let b_length = b_string.length;\n\n  for (let i = 0; i < a_length; i++) {\n    for (let j = 0; j < b_length; j++) {\n      let bit = (a_string[i] | b_string[j]);\n      a_string[i] = bit;\n    }\n  }\n  return a_string;\n}\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ANDNOT on these inputs and return result also as a string.\n  >>> stringAndNot('010', '110')\n  '01'\n  */\nconst stringAndNot = (a, b) => {\n  let a_string = a;\n  let b_string = b;\n  let a_length = a_string.length;\n  let b_length = b_string.length;\n\n  for (let i = 0; i < a_length; i++) {\n    for (let j = 0; j < b_length; j++) {\n      let bit = (a_string[i] & ~b_string[j]);\n      a_string[i] = bit;\n    }\n  }\n  return a_string;\n}\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XORNOT on these inputs and return result also as a string.\n  >>> stringXorNot('010', '110')\n  '10'\n  */\nconst stringXorNot = (a, b) => {\n  let a_string = a;\n  let b_string = b;\n  let a_length = a_string.length;\n  let b_length = b_string.length;\n\n  for (let i = 0; i < a_length; i++) {\n    for (let j = 0; j < b_length; j++) {\n      let bit = (a_string[i] ^ b_string[j]);\n      a_string[i] = bit;\n    }\n  }\n  return a_string;\n}\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ANDNOT on these inputs and return result also as a string.\n  >>> stringAndNot('010', '110')\n  '00'\n  */\nconst stringAndNot2 = (a, b) => {\n  let a_string = a;\n  let b_string = b;\n  let a_length = a_string.length;\n  let b_length = b_string.length;\n\n  for (let i = 0; i < a_length; i++) {\n    for (let j = 0; j < b_length; j++) {\n      let bit = (a_string[i] & ~b_string[j]);\n      a_string[i] = bit;\n    }\n  }\n  return a_string;\n}\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XORNOT on these inputs and return result also as a string.\n  >>> stringXorNot('010', '110')\n  '10'\n  */\nconst stringXorNot2 = (a, b) => {\n  let a_string = a;\n  let b_string = b;\n  let a_length = a_string.length;\n  let b_length = b_string.length;\n\n  for (let i = 0; i < a_length; i++) {\n    for (let j = 0; j < b_length; j++) {\n      let bit = (a_string[i] ^ b_string[j]);\n      a_string[i] = bit;\n    }\n  }\n  return a_string;\n}\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ANDNOT on these inputs and return result also as a string.\n  >>> stringAndNot('010', '110')\n  '00'\n  */\nconst stringAndNot3 = (a, b) => {\n  let a_string = a;\n  let b_string = b;\n  let a_length = a_string.length;\n  let b_length = b_string.length;\n\n  for (let i = 0; i < a_length; i++) {\n    for (let j = 0; j < b_length; j++) {\n      let bit"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  const list = Array.isArray(strings)? strings : [strings];\n  if (list.length === 0) return null;\n\n  return list.reduce((acc, str) => {\n    if (acc.length < str.length) {\n      return str;\n    } else {\n      return acc;\n    }\n  }, list[0]);\n};\n\nexport default longer;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  if (a > b) {\n    return a\n  } else if (b > a) {\n    return b\n  } else {\n    let x = a\n    while (x <= b) {\n      if (b % x === 0) {\n        return x\n      }\n      x += 1\n    }\n  }\n}\n\nmodule.exports = greaterCommonDivisors\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allPrefixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allPrefixes.push(string.substr(0, i))\n  }\n\n  return allPrefixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst allSuffixes = (string) => {\n  if (!string) {\n    return []\n  }\n\n  const allSuffixes = [string]\n  const lastIndex = string.length - 1\n\n  for (let i = 1; i < lastIndex; i++) {\n    allSuffixes.push(string.substr(lastIndex - i, i))\n  }\n\n  return allSuffixes\n}\n\n/* Return all suffixes of the input string\n  >>> allSuffixes('abc')"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences2 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\nconst stringSequences3 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences4 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences5 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences6 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences7 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences8 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences9 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences10 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences11 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences12 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences13 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences14 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences15 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences16 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences17 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences18 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences19 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences20 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences21 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences22 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences23 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences24 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences25 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\nconst stringSequences26 = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  const dictionary = {};\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (!dictionary[character]) {\n      dictionary[character] = 1;\n      count++;\n    } else {\n      dictionary[character]++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistincterCharacter;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let notes = [];\n  let note = 0;\n  let is_note = false;\n  let is_half = false;\n  let is_quarter = false;\n  let last_note = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      is_note = true;\n    }\n    if (music_string[i] === '|') {\n      is_half = true;\n    }\n    if (music_string[i] === '.') {\n      is_quarter = true;\n    }\n    if (is_note &&!is_half &&!is_quarter) {\n      last_note = i;\n    }\n    if (is_note && is_half) {\n      last_note = i;\n    }\n    if (is_note && is_quarter) {\n      last_note = i;\n    }\n    if (is_note && is_quarter &&!is_half) {\n      last_note = i;\n    }\n    if (is_note && is_half &&!is_quarter) {\n      last_note = i;\n    }\n    if (is_note && is_half && is_quarter) {\n      last_note = i;\n    }\n    if (is_note && is_half && is_quarter) {\n      last_note = i;\n    }\n    if (is_note && is_quarter &&!is_half) {\n      last_note = i;\n    }\n    if (is_note && is_half && is_quarter) {\n      last_note = i;\n    }\n    if (!is_note &&!is_half &&!is_quarter) {\n      last_note = i;\n    }\n    if (!is_note &&!is_half && is_quarter) {\n      last_note = i;\n    }\n    if (!is_note && is_half &&!is_quarter) {\n      last_note = i;\n    }\n    if (!is_note && is_half && is_quarter) {\n      last_note = i;\n    }\n    if (!is_note && is_quarter &&!is_half) {\n      last_note = i;\n    }\n    if (!is_note && is_half && is_quarter) {\n      last_note = i;\n    }\n    if (!is_note && is_quarter && is_half) {\n      last_note = i;\n    }\n    if (is_note &&!is_half &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_half &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_quarter &&!is_half && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_half && is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_quarter && is_half && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_half && is_quarter && is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_quarter && is_half && is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_half && is_quarter && is_quarter && is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (is_note &&!is_half &&!is_quarter &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_half &&!is_quarter &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_quarter &&!is_half &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_half && is_quarter &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (!is_note && is_quarter && is_half &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (is_note &&!is_half &&!is_quarter && is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (is_note && is_half &&!is_quarter &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (is_note && is_quarter &&!is_half &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (is_note && is_half && is_quarter &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (is_note && is_quarter && is_half &&!is_quarter && i === music_string.length - 1) {\n      last_note = i;\n    }\n    if (is_note && is_half && is_quarter && is_quarter && i === music_"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let index = 0\n  let start = 0\n  let end = 0\n  while (index < string.length) {\n    if (string[index] === substring[end]) {\n      if (end === 0) {\n        start = index + 1\n      }\n      end += 1\n      if (end === substring.length) {\n        return string.length - start\n      }\n    } else {\n      end = 0\n    }\n    index += 1\n  }\n  return 0\n}\n\n/*\n  https://en.wikipedia.org/wiki/Longest_palindromic_substring\n  Find the longest palindromic substring in a given string.\n  >>> findLongestPalindrome('A')\n  'A'\n  >>> findLongestPalindrome('AA')\n  'AA'\n  >>> findLongestPalindrome('ACD')\n  'CD'\n  >>> findLongestPalindrome('AAAB')\n  'AAAB'\n  >>> findLongestPalindrome('AAB')\n  'ABA'\n  >>> findLongestPalindrome('AABCD')\n  'ABCD'\n  >>> findLongestPalindrome('AABAC')\n  'AABAC'\n  >>> findLongestPalindrome('AABACD')\n  'AABACD'\n  >>> findLongestPalindrome('AABACDEE')\n  'AABACDEE'\n  >>> findLongestPalindrome('AABACDEEAB')\n  'AABACDEEAB'\n  >>> findLongestPalindrome('AABACDEEABD')\n  'AABACDEEABD'\n  >>> findLongestPalindrome('AABACDEEABD')\n  'AABACDEEABD'\n  >>> findLongestPalindrome('AABACDEEABD')\n  'AABACDEEABD'\n  >>> findLongestPalindrome('AABACDEEABD')\n  'AABACDEEABD'\n  >>> findLongestPalindrome('ABABCD')\n  'ABABCD'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongestPalindrome('ABABCDE')\n  'ABABCDE'\n  >>> findLongest"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  let result = '';\n  for(let i = 0; i < numbers.length; i++) {\n    let num = parseInt(numbers.substring(i, i + 1));\n    if (i === 0) {\n      result += num;\n    } else {\n      let lastNum = parseInt(result.substring(result.length - 1, result.length));\n      if (num < lastNum) {\n        result = result.substring(0, result.length - 1) + num;\n      } else {\n        result += num;\n      }\n    }\n  }\n  return result;\n}\n\n/*\n  Input: \"1 2 3 4 5 6 7 8 9\".\n  Output: \"1 2 3 4 5 6 7 8 9\".\n  Trim leading and trailing spaces.\n  Sort the numbers in increasing order.\n  */\nconst sortSentences = (sentences) => {\n  sentences = sentences.trim();\n  sentences = sentences.split(' ');\n  sentences = sentences.sort(\n    (a, b) => a - b\n  );\n  sentences = sentences.join(' ');\n  return sentences;\n}\n\nmodule.exports = {\n  sortsNumbers,\n  sortsNumbers,\n  sortSentences\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const numbersLength = numbers.length;\n  if (numbersLength < 2) {\n    throw new Error('numbers should be at least two in length');\n  }\n  let closestElements = [];\n  let closestDistances = [];\n  for (let i = 0; i < numbersLength - 1; i++) {\n    const distance = Math.abs(numbers[i] - numbers[i + 1]);\n    closestDistances.push(distance);\n    closestElements.push(numbers[i]);\n  }\n  return [closestElements[0], closestElements[closestDistances.indexOf(Math.min(...closestDistances))]];\n};\n\nmodule.exports = {\n  findClosestElements,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  return numbers.map((number) => {\n    return number / (numbers[numbers.length - 1] - numbers[0]);\n  });\n};\n\nconst getCoefficients = (numbers) => {\n  const coefficients = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const coefficient = numbers[i + 1] - numbers[i];\n    coefficients.push(coefficient);\n  }\n\n  return coefficients;\n};\n\n/**\n  * This is the function that calculates the coefficients of the linear system.\n  * The coefficients are calculated by calculating the ratio between the elements\n  * in the list, and the difference between the largest and smallest elements\n  * in the list.\n  *\n  * This can be done in two ways:\n  * 1. Calculating the difference in each element, and dividing the result by\n  *    the difference between the largest and smallest elements in the list.\n  * 2. Calculating the ratio between the largest and smallest elements.\n  *\n  * If the numbers are equal, then the coefficients are all 0.0, otherwise\n  * the coefficients will be calculated by:\n  *\n  *     coefficient = (number / difference)\n  *\n  * @param {number[]} numbers\n  *   A list of numbers.\n  * @param {boolean} [method=1]\n  *   The method to use to calculate the coefficients.\n  * @return {number[]}\n  *   The coefficients of the linear system.\n  */\nconst getLinearSystemCoefficients = (numbers, method = 1) => {\n  const coefficients = [];\n\n  if (method === 1) {\n    for (let i = 0; i < numbers.length - 1; i++) {\n      const coefficient = (numbers[i + 1] - numbers[i]) / (numbers[numbers.length - 1] - numbers[0]);\n      coefficients.push(coefficient);\n    }\n  } else {\n    for (let i = 0; i < numbers.length - 1; i++) {\n      const coefficient = (numbers[i + 1] - numbers[i]) / (numbers[numbers.length - 1] - numbers[0]);\n      coefficients.push(coefficient);\n    }\n  }\n\n  return coefficients;\n};\n\nconst solveLinearSystem = (linearSystemCoefficients, numbers) => {\n  const coefficients = rescaleToUnits(linearSystemCoefficients);\n  const coefficients2 = getLinearSystemCoefficients(numbers, 1);\n\n  const coefficients3 = [];\n\n  for (let i = 0; i < linearSystemCoefficients.length; i++) {\n    const coefficient = linearSystemCoefficients[i];\n    coefficients3.push(coefficient);\n  }\n\n  return solveLinearSystem(coefficients, coefficients2, numbers, coefficients3);\n};\n\nconst solveLinearSystem = (coefficients, coefficients2, numbers, coefficients3) => {\n  const numbersCopy = [...numbers];\n\n  for (let i = 0; i < coefficients.length; i++) {\n    const coefficient = coefficients[i];\n    const coefficient2 = coefficients2[i];\n    const coefficient3 = coefficients3[i];\n\n    numbersCopy[i] = coefficient * coefficient2 + coefficient3;\n  }\n\n  return solveLinearSystem(coefficients, coefficients2, numbersCopy, coefficients3);\n};\n\nmodule.exports = {\n  getLinearSystemCoefficients,\n  getCoefficients,\n  solveLinearSystem,\n  rescaleToUnits,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(Number.isInteger);\n};\n\nmodule.exports = {\n  filterIntegers,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return a substring of given string\n  >>> strsubstr('abcdef', 0)\n  'abcdef'\n  >>> strsubstr('abcdef', 2)\n  'def'\n  >>> strsubstr('abcdef', 7)\n  ''\n  >>> strsubstr('abcdef', 0, 2)\n  'abc'\n  >>> strsubstr('abcdef', 2, 2)\n  'cde'\n  >>> strsubstr('abcdef', 2, 3)\n  'def'\n  */\nconst strsubstr = (string, start, length) => {\n  if (length === undefined) {\n    length = strlen(string)\n  }\n  return string.substr(start, length)\n}\n\n/* Return a substring of given string, starting from the end\n  >>> strsubstrrev('abcdef')\n  'efcdab'\n  >>> strsubstrrev('abcdef', 2)\n  'cdefab'\n  >>> strsubstrrev('abcdef', 7)\n  ''\n  */\nconst strsubstrrev = (string, length) => {\n  if (length === undefined) {\n    length = strlen(string)\n  }\n  return string.substr(length - 1, length)\n}\n\n/* Return a substring of given string, starting from the start and of given length\n  >>> strsubstrcut('abcdef', 0, 2)\n  'ab'\n  >>> strsubstrcut('abcdef', 2, 2)\n  'cde'\n  >>> strsubstrcut('abcdef', 2, 3)\n  'def'\n  */\nconst strsubstrcut = (string, start, length) => {\n  if (length === undefined) {\n    length = strlen(string)\n  }\n  return string.substr(start, length)\n}\n\n/* Return a substring of given string, starting from the start and of given length\n  >>> strsubstrcutrev('abcdef')\n  'efcdab'\n  >>> strsubstrcutrev('abcdef', 2)\n  'cdefab'\n  >>> strsubstrcutrev('abcdef', 7)\n  ''\n  */\nconst strsubstrcutrev = (string, length) => {\n  if (length === undefined) {\n    length = strlen(string)\n  }\n  return string.substr(0, length)\n}\n\n/* Replace the given substring with the given string\n  >>> strreplace('abcdef', 'ab', 'xy')\n  'xydef'\n  >>> strreplace('abcdef', 'ab', 'xy', 0)\n  'xyef'\n  >>> strreplace('abcdef', 'ab', 'xy', 1)\n  'xyef'\n  >>> strreplace('abcdef', 'ab', 'xy', 2)\n  'xyef'\n  >>> strreplace('abcdef', 'ab', 'xy', 3)\n  'xyef'\n  >>> strreplace('abcdef', 'ab', 'xy', 4)\n  'xyef'\n  >>> strreplace('abcdef', 'ab', 'xy', 5)\n  'xyef'\n  >>> strreplace('abcdef', 'ab', 'xy', 6)\n  'xyef'\n  >>> strreplace('abcdef', 'ab', 'xy', 7)\n  'xyef'\n  >>> strreplace('abcdef', 'ab', 'xy', 8)\n  'xyef'\n  */\nconst strreplace = (string, oldStr, newStr, start = 0) => {\n  return string.replace(new RegExp(oldStr, 'g'), newStr)\n}\n\n/* Replace the given substring with the given string, starting from the given start position\n  >>> strreplacecut('abcdef', 'ab', 'xy', 0)\n  'xyef'\n  >>> strreplacecut('abcdef', 'ab', 'xy', 1)\n  'xyef'\n  >>> strreplacecut('abcdef', 'ab', 'xy', 2)\n  'xyef'\n  >>> strreplacecut('abcdef', 'ab', 'xy', 3)\n  'xyef'\n  >>> strreplacecut('abcdef', 'ab', 'xy', 4)\n  'xyef'\n  >>> strreplacecut('abcdef', 'ab', 'xy', 5)\n  'xyef'\n  >>> strreplacecut('abcdef', 'ab', 'xy', 6)\n  'xyef'\n  >>> strreplacecut('abcdef', 'ab', 'xy', 7)\n  'xyef'\n  >>> strreplacecut('abcdef', 'ab', 'xy', 8)\n  'xyef'\n  */\nconst strreplacecut = (string, oldStr, newStr, start = 0) => {\n  return string.replace(new RegExp(oldStr, 'g'), newStr, start)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  return Math.floor(n / 2)\n}\n\n/**\n  * Returns the smallest number that divides n evenly, larger than n\n  * For a given number n, find the largest number that divides n evenly, larger than n\n  * >>> smallerDivisors(15)\n  * 5\n  * */\nconst smallerDivisors = (n) => {\n  return Math.ceil(n / 2)\n}\n\n/**\n  * Returns the largest possible multiple of n\n  * For a given number n, find the largest multiple of n\n  * >>> largestMultiple(7)\n  * 7\n  * */\nconst largestMultiple = (n) => {\n  return Math.pow(2, Math.floor(Math.log(n) / Math.log(2)))\n}\n\n/**\n  * Returns the smallest possible multiple of n\n  * For a given number n, find the smallest multiple of n\n  * >>> largestMultiple(7)\n  * 1\n  * */\nconst smallestMultiple = (n) => {\n  return largestMultiple(n) / 2\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum1 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum2 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum3 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum4 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum5 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum6 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum7 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum8 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum9 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum10 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum11 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  * >>> sum(7)\n  * 14\n  * */\nconst sum12 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * Returns the sum of the first n numbers\n  * For a given number n, find the sum of the first n numbers\n  "}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  let factor = 1;\n  const factors = [];\n  while (n % 2 === 0) {\n    factor *= 2;\n    n /= 2;\n  }\n  while (n!== 1) {\n    while (n % factor === 0) {\n      factor *= factor;\n      n /= factor;\n    }\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\nconsole.log(factorizes(8));\nconsole.log(factorizes(25));\nconsole.log(factorizes(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    map.set(numbers[i], 1);\n  }\n  const result = [];\n  for (let key of map.keys()) {\n    result.push(map.get(key));\n  }\n  return result;\n};\n\nexport default removeDuplicate;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  const flippedString = string.toLowerCase()\n   .split('')\n   .map((letter, index) => {\n      if (index % 2) {\n        return letter.toUpperCase()\n      } else {\n        return letter.toLowerCase()\n      }\n    })\n   .join('')\n    return flippedString\n}\n\n/*\n  For a given string, return the string with all uppercase letters replaced by their lowercase counterparts.\n  >>> capitalsToLowerCases('Hello')\n  'hello'\n  >>> capitalsToLowerCases('hello')\n  'hello'\n  */\nconst capitalsToLowerCases = (string) => {\n  const flippedString = string.toUpperCase()\n   .split('')\n   .map((letter, index) => {\n      if (index % 2) {\n        return letter.toLowerCase()\n      } else {\n        return letter\n      }\n    })\n   .join('')\n    return flippedString\n}\n\n/*\n  For a given string, return the string with all lowercase letters replaced by their uppercase counterparts.\n  >>> lowerCasesToCapitals('Hello')\n  'HELLO'\n  >>> lowerCasesToCapitals('hello')\n  'HELLO'\n  */\nconst lowerCasesToCapitals = (string) => {\n  const flippedString = string.toLowerCase()\n   .split('')\n   .map((letter, index) => {\n      if (index % 2) {\n        return letter.toUpperCase()\n      } else {\n        return letter\n      }\n    })\n   .join('')\n    return flippedString\n}\n\n/*\n  For a given string, return the string with all uppercase letters replaced by their lowercase counterparts.\n  >>> capitalsToLowerCases('HELLO')\n  'hello'\n  >>> capitalsToLowerCases('hello')\n  'hello'\n  */\nconst capitalsToUpperCases = (string) => {\n  const flippedString = string.toUpperCase()\n   .split('')\n   .map((letter, index) => {\n      if (index % 2) {\n        return letter.toLowerCase()\n      } else {\n        return letter\n      }\n    })\n   .join('')\n    return flippedString\n}\n\n/*\n  For a given string, return the string with all lowercase letters replaced by their uppercase counterparts.\n  >>> lowerCasesToCapitals('hello')\n  'HELLO'\n  >>> lowerCasesToCapitals('hello')\n  'HELLO'\n  */\nconst lowerCasesToUpperCases = (string) => {\n  const flippedString = string.toUpperCase()\n   .split('')\n   .map((letter, index) => {\n      if (index % 2) {\n        return letter.toUpperCase()\n      } else {\n        return letter\n      }\n    })\n   .join('')\n    return flippedString\n}\n\n/*\n  For a given string, return the string with all uppercase letters replaced by their lowercase counterparts.\n  >>> capitalsToLowerCases('HELLO')\n  'hello'\n  >>> capitalsToLowerCases('hello')\n  'hello'\n  */\nconst capitalsToLowerCases = (string) => {\n  const flippedString = string.toLowerCase()\n   .split('')\n   .map((letter, index) => {\n      if (index % 2) {\n        return letter.toUpperCase()\n      } else {\n        return letter\n      }\n    })\n   .join('')\n    return flippedString\n}\n\nmodule.exports = {\n  flipsCases,\n  capitalsToLowerCases,\n  lowerCasesToCapitals,\n  lowerCasesToUpperCases,\n  lowerCasesToUpperCases,\n  capitalsToLowerCases\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n    let result = '';\n    for (let i = 0; i < strings.length; i++) {\n        result += strings[i];\n    }\n    return result;\n};\n\n/*\n  * Convert a string into an array of characters\n  *\n  * The string is split into individual characters based on the space character\n  * The first character of the string is not included in the array\n  *\n  * The following example shows how to convert a string into an array of characters\n  *\n  * >>> toCharArray(' hello world')\n  * ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'd']\n  *\n  * The following example shows how to convert a string into an array of integers\n  *\n  * >>> toIntArray('0 1 2 3')\n  * [0, 1, 2, 3]\n  *\n  * The following example shows how to convert a string into an array of strings\n  *\n  * >>> toStrArray('hello world')\n  * ['hello', 'world']\n  *\n  * The following example shows how to convert a string into an array of numbers\n  *\n  * >>> toNumArray('0 1 2 3')\n  * [0, 1, 2, 3]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array of objects\n  *\n  * >>> toObjArray('0 1 2 3')\n  * [{0}, {1}, {2}, {3}]\n  *\n  * The following example shows how to convert a string into an array"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n    const matches = strings.filter(s => s.startsWith(prefix));\n    return matches.length === 0? [] : matches;\n};\n\n/*\n  * Return a list of unique strings in a given list\n  * @param strings a list of strings\n  * @return an array of unique strings\n  * @example\n  *   listUnique([1,2,3,2,1,3])\n  *   // => [1,2,3]\n  * */\nconst listUnique = (strings) => {\n    return strings.reduce((prev, curr) => {\n        if (prev.indexOf(curr) === -1) {\n            prev.push(curr);\n        }\n        return prev;\n    }, []);\n};\n\nmodule.exports = {\n    getStringsFromFile: getStringsFromFile,\n    getStringsFromFileWithPrefix: getStringsFromFileWithPrefix,\n    filterByPrefix: filterByPrefix,\n    listUnique: listUnique\n};<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\nmodule.exports = gottenPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n\n  let i = 2\n  let prime = true\n\n  while (i < n) {\n    if (n % i === 0) {\n      prime = false\n      break\n    }\n    i += 1\n  }\n\n  return prime\n}\n\nmodule.exports = isPrime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const size = xs.length;\n  const half = size / 2;\n  const halfSquared = half * half;\n  const middle = xs[half];\n  const result = (x) => {\n    let first = 0;\n    let second = halfSquared;\n    let sum = 0;\n    let current = 0;\n    let prev = 0;\n    while (second >= 1) {\n      sum += prev;\n      prev = current;\n      current = first + second;\n      first = second;\n      second = halfSquared - second + current;\n    }\n    return sum + middle;\n  };\n  const middlePos = result(half);\n  let max = xs[0];\n  let min = xs[0];\n  for (let i = 1; i < size; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  let x;\n  if (max - min < 1e-10) {\n    x = (max + min) / 2;\n  } else {\n    x = middlePos;\n  }\n  let last = result(x);\n  let current = last;\n  while (Math.abs(last - current) > 1e-10) {\n    last = current;\n    current = result(x);\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly11 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly12 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly13 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly14 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly15 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math."}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  const n = l.length\n  if (n === 1) {\n    return [l[0]]\n  }\n  const lprime = []\n  for (let i = 0; i < n; i++) {\n    const k = i % 3\n    if (k === 0) {\n      lprime.push(l[i])\n    }\n  }\n  return lprime\n}\n\n// TEST\n\nconst test1 = sortsThird([1, 2, 3])\nconsole.log(test1)\n\nconst test2 = sortsThird([5, 6, 3, 4, 8, 9, 2])\nconsole.log(test2)\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  if (!Array.isArray(l)) {\n    return []\n  }\n  return l.filter((x) => l.indexOf(x) === -1)\n   .reduce((a, x) => a.concat(x), [])\n}\n\nexport {unique}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n// console.log(maxElements([1, 2, 3]));\n// console.log(maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n\n/*\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  >>> sum([-5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -10])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6, 7])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6, 7, 8])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6, 7, 8, 9])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6, 7, 8, 9, 0])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5])\n  -10\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 1, -10, 3, 4, 5, 6, 7, 8, 9, 0, -10, 3, 4, 5, 6, 7, 8,"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let fizzCount = 0,\n      buzzCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      fizzCount++;\n    } else if (i % 5 === 0) {\n      buzzCount++;\n    } else {\n      console.log(i);\n    }\n  }\n  return fizzCount + buzzCount;\n};\n\nfizzBuzzes(1000);\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let l2 = l.slice(1);\n  l2.sort();\n  return l.concat(l2);\n}\n\n/*\n  >>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20].map(i => i * 2).join('')\n  '1234678910'\n  >>> sortsEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]).join('')\n  '1234678910'\n  */\nconst sortEven = (l) => {\n  let l2 = l.slice(1);\n  l2.sort();\n  return l.concat(l2);\n}\n\n//console.log(sortsEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nexport { encodeCyclic, decodeCyclic }\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  const fib = primeFibs(n - 1);\n  const fibPrime = primeFibs(n - 2);\n  return fib + fibPrime;\n};\n\nexport default primeFibs;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  const result = [];\n  const l_copy = l.slice();\n\n  for (let i = 0; i < l_copy.length - 2; i++) {\n    const sum = l_copy[i] + l_copy[i + 1] + l_copy[i + 2];\n    if (sum === 0) {\n      result.push(l_copy.slice(i, i + 3));\n    }\n  }\n\n  return result.length > 0;\n};\n\nmodule.exports = triplesSummingToZeroed;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n    var cars = {};\n    cars.left = 0;\n    cars.right = n;\n    cars.collisions = 0;\n    cars.cars = [];\n\n    for (var i = 0; i < n; i++) {\n        cars.cars.push(i);\n    }\n\n    for (var j = 0; j < n; j++) {\n        cars.cars.push(n - 1 - j);\n    }\n\n    var currentCar = 0;\n\n    while (cars.cars[currentCar]!== null) {\n        cars.cars[currentCar].run();\n        currentCar = (currentCar + 1) % cars.cars.length;\n    }\n\n    cars.collisions = cars.cars.length - 1;\n\n    return cars.collisions;\n}\n\nconst carsRaces = (n) => {\n    var cars = {};\n    cars.cars = [];\n    cars.cars.push(0);\n    cars.cars.push(n - 1);\n    cars.collisions = 0;\n\n    cars.cars[0].run();\n    cars.cars[1].run();\n\n    cars.cars[0].move();\n    cars.cars[1].move();\n\n    var currentCar = 0;\n\n    while (cars.cars[currentCar]!== null) {\n        cars.cars[currentCar].run();\n        currentCar = (currentCar + 1) % cars.cars.length;\n    }\n\n    cars.collisions = cars.cars.length - 1;\n\n    return cars.collisions;\n}\n\nconst carsRaces2 = (n) => {\n    var cars = {};\n    cars.cars = [];\n    cars.cars.push(0);\n    cars.cars.push(n - 1);\n    cars.cars.push(2 * n - 2);\n    cars.cars.push(2 * n - 1);\n    cars.collisions = 0;\n\n    cars.cars[0].run();\n    cars.cars[1].run();\n    cars.cars[2].run();\n    cars.cars[3].run();\n\n    cars.cars[0].move();\n    cars.cars[1].move();\n    cars.cars[2].move();\n    cars.cars[3].move();\n\n    var currentCar = 0;\n\n    while (cars.cars[currentCar]!== null) {\n        cars.cars[currentCar].run();\n        currentCar = (currentCar + 1) % cars.cars.length;\n    }\n\n    cars.collisions = cars.cars.length - 1;\n\n    return cars.collisions;\n}\n\nconst carsRaces3 = (n) => {\n    var cars = {};\n    cars.cars = [];\n    cars.cars.push(0);\n    cars.cars.push(n - 1);\n    cars.cars.push(2 * n - 2);\n    cars.cars.push(2 * n - 1);\n    cars.cars.push(3 * n - 3);\n    cars.cars.push(3 * n - 2);\n    cars.collisions = 0;\n\n    cars.cars[0].run();\n    cars.cars[1].run();\n    cars.cars[2].run();\n    cars.cars[3].run();\n\n    cars.cars[0].move();\n    cars.cars[1].move();\n    cars.cars[2].move();\n    cars.cars[3].move();\n\n    var currentCar = 0;\n\n    while (cars.cars[currentCar]!== null) {\n        cars.cars[currentCar].run();\n        currentCar = (currentCar + 1) % cars.cars.length;\n    }\n\n    cars.collisions = cars.cars.length - 1;\n\n    return cars.collisions;\n}\n\nconst carsRaces4 = (n) => {\n    var cars = {};\n    cars.cars = [];\n    cars.cars.push(0);\n    cars.cars.push(n - 1);\n    cars.cars.push(2 * n - 2);\n    cars.cars.push(2 * n - 1);\n    cars.cars.push(3 * n - 3);\n    cars.cars.push(3 * n - 2);\n    cars.cars.push(4 * n - 4);\n    cars.cars.push(4 * n - 3);\n    cars.cars.push(4 * n - 2);\n    cars.cars.push(4 * n - 1);\n    cars.cars.push(4 * n);\n    cars.collisions = 0;\n\n    cars.cars[0].run();\n    cars.cars[1].run();\n    cars.cars[2].run();\n    cars.cars[3].run();\n\n    cars.cars[0].move();\n    cars.cars[1].move();\n    cars.cars[2].move();\n    cars.cars[3].move();\n\n    var currentCar = 0;\n\n    while (cars.cars[currentCar]!== null) {\n        cars.cars[currentCar].run();\n        currentCar = (currentCar + 1) % cars.cars.length;\n    }\n\n    cars.collisions = cars.cars.length - 1;\n\n    return cars.collisions;\n}\n\nconsole.log(carsRaces(4));\nconsole.log(carsRaces2(4));\nconsole.log(carsRaces3(4));\nconsole.log(carsRaces4(4));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let l_ = l.slice()\n  let l_idx = l_.length - 1\n  while (l_idx >= 0) {\n    if (l_idx === 0) {\n      l_[l_idx] = 1\n      break\n    }\n    l_[l_idx] = l_[l_idx - 1] + 1\n    l_idx -= 1\n  }\n  return l_\n}\n\n/* Return a list that contains the elements in the list except for those\n  represented in the list `except`\n  >>> exceptLists([1, 2, 3], [2, 5, 7])\n  [1, 3]\n  >>> exceptLists([1, 2, 3, 5, 7], [1, 2, 3])\n  [5, 7]\n  >>> exceptLists([1, 2, 3], [2, 5, 7, 9, 12])\n  [1, 3]\n  */\nconst exceptLists = (l, except) => {\n  let l_ = l.slice()\n  let l_idx = l_.length - 1\n  while (l_idx >= 0) {\n    if (l_idx === 0) {\n      if (l_idx < l_.length) {\n        if (l_[l_idx] === except[0]) {\n          l_idx += 1\n          continue\n        }\n      }\n      break\n    }\n    if (l_[l_idx] === except[0]) {\n      break\n    }\n    l_idx -= 1\n  }\n  return l_\n}\n\n/* Return the set of elements in the list `l`\n  >>> setList([1, 2, 3, 2, 3])\n  [1, 2, 3]\n  >>> setList([1, 2, 3, 2, 3, 4, 5, 3, 4, 5])\n  [1, 2, 3]\n  >>> setList([1, 2, 3, 2, 3, 4, 5, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3]\n  */\nconst setList = (l) => {\n  let set_ = new Set()\n  l.forEach((n) => set_.add(n))\n  return set_\n}\n\n/* Return the sum of the elements in the list `l`\n  >>> sumList([1, 2, 3, 2, 3])\n  6\n  >>> sumList([1, 2, 3, 2, 3, 4, 5, 3, 4, 5])\n  15\n  >>> sumList([1, 2, 3, 2, 3, 4, 5, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7])\n  15\n  */\nconst sumList = (l) => {\n  let sum = 0\n  l.forEach((n) => sum += n)\n  return sum\n}\n\n/* Return the difference of the elements in the list `l`\n  >>> diffList([1, 2, 3, 2, 3])\n  2\n  >>> diffList([1, 2, 3, 2, 3, 4, 5, 3, 4, 5])\n  2\n  >>> diffList([1, 2, 3, 2, 3, 4, 5, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7])\n  2\n  */\nconst diffList = (l) => {\n  let diff = 0\n  l.forEach((n) => {\n    if (n!== l[l.length - 1]) {\n      diff += n\n    }\n  })\n  return diff\n}\n\n/* Return the product of the elements in the list `l`\n  >>> prodList([1, 2, 3, 2, 3])\n  6\n  >>> prodList([1, 2, 3, 2, 3, 4, 5, 3, 4, 5])\n  24\n  >>> prodList([1, 2, 3, 2, 3, 4, 5, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7])\n  42\n  */\nconst prodList = (l) => {\n  let prod = 1\n  l.forEach((n) => {\n    prod *= n\n  })\n  return prod\n}\n\n/* Return the number of times the element `n` is in the list `l`\n  >>> numInList(3, [1, 2, 3, 2, 3])\n  3\n  >>> numInList(1, [1, 2, 3, 2, 3])\n  1\n  >>> numInList(4, [1, 2, 3, 2, 3])\n  0\n  >>> numInList(5, [1, 2, 3, 2, 3])\n  1\n  */\nconst numInList = (n, l) => {\n  let num = 0\n  l.forEach((el) => {\n    if (el === n) {\n      num += 1\n    }\n  })\n  return num\n}\n\n/* Return the list of elements in the list `l` that do not contain the element\n  `n`\n  >>> exceptList(3, [1, 2, 3, 2, 3])\n  [1, 2, 3]\n  >>> exceptList(1, [1, 2, 3, 2, 3])\n  [2, 3]\n  >>> exceptList(5, [1, 2, 3, 2, 3])\n  [2, 3]\n  >>> exceptList(4, [1, 2, 3, 2, 3])\n  []\n  >>> exceptList(5, [1, 2, 3, 2, 3, 4, 5, 3, 4, 5])\n  [1, 2, 3]\n  >>> exceptList(5, [1, 2, 3, 2, 3, 4, 5, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3]\n  */\nconst exceptList = (n, l) => {\n  let except = []\n  l.forEach((el) => {\n    if (el!=="}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sums = 0;\n  for (let i = 0; i < l.length - 1; i++) {\n    sums += l[i];\n    if (sums == 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst pairSumsToZeroTest = () => {\n  assert.equal(true, pairSumsToZero([1, 3, 5, 0]));\n  assert.equal(false, pairSumsToZero([1, 3, -2, 1]));\n  assert.equal(false, pairSumsToZero([1, 2, 3, 7]));\n  assert.equal(true, pairSumsToZero([2, 4, -5, 3, 5, 7]));\n  assert.equal(false, pairSumsToZero([1]));\n};\n\ndescribe('pairSumsToZero', () => {\n  pairSumsToZeroTest();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  if (base === 2) {\n    return x + ''\n  }\n  if (base === 10) {\n    return x + ''\n  }\n  if (base === 16) {\n    return x.toString(16)\n  }\n  if (base === 8) {\n    return x.toString(8)\n  }\n  if (base === 3) {\n    return x.toString(3)\n  }\n  if (base === 5) {\n    return x.toString(5)\n  }\n  if (base === 7) {\n    return x.toString(7)\n  }\n  if (base === 10) {\n    return x.toString(10)\n  }\n  return x.toString()\n}\n\n/*\nGiven a number, write a function to add binary.\n\nExample:\nGiven num = 3, return '11'.\n*/\nconst addBinary = (num) => {\n  const digits = [0, 0, 0]\n  for (let i = num; i > 0; i -= 1) {\n    const remainder = i % 2\n    digits[i - remainder] = 1\n  }\n  let result = ''\n  for (let i = 0; i < num; i += 1) {\n    result += digits[i]\n  }\n  return result\n}\n\n/*\nGiven a number, write a function to multiply.\n\nExample:\nGiven num = 3, return '11'.\n*/\nconst multiply = (num) => {\n  const digit = []\n  for (let i = num; i > 0; i -= 1) {\n    digit[i - 1] = 1\n  }\n  let result = ''\n  for (let i = 0; i < num; i += 1) {\n    result += digit[i]\n  }\n  return result\n}\n\n/*\nGiven a number, write a function to subtract.\n\nExample:\nGiven num = 3, return '1'.\n*/\nconst subtract = (num) => {\n  return (num - 1)\n}\n\n/*\nGiven a number, write a function to divide.\n\nExample:\nGiven num = 5, return '2'.\n*/\nconst divide = (num) => {\n  return num / 2\n}\n\n/*\nGiven a number, write a function to modulo.\n\nExample:\nGiven num = 3, return '1'.\n*/\nconst modulo = (num) => {\n  return num % 2\n}\n\n/*\nGiven a number, write a function to add.\n\nExample:\nGiven num = 3, return '1'.\n*/\nconst add = (num) => {\n  return num + 1\n}\n\n/*\nGiven two numbers, write a function to subtract.\n\nExample:\nGiven num1 = 2, num2 = 3, return '1'.\n*/\nconst subtract = (num1, num2) => {\n  return num1 - num2\n}\n\n/*\nGiven two numbers, write a function to divide.\n\nExample:\nGiven num1 = 5, num2 = 3, return '2'.\n*/\nconst divide = (num1, num2) => {\n  return num1 / num2\n}\n\n/*\nGiven two numbers, write a function to modulo.\n\nExample:\nGiven num1 = 3, num2 = 5, return '3'.\n*/\nconst modulo = (num1, num2) => {\n  return num1 % num2\n}\n\n/*\nGiven two numbers, write a function to subtract.\n\nExample:\nGiven num1 = 5, num2 = 3, return '2'.\n*/\nconst subtract = (num1, num2) => {\n  return num1 - num2\n}\n\n/*\nGiven two numbers, write a function to divide.\n\nExample:\nGiven num1 = 5, num2 = 3, return '2'.\n*/\nconst divide = (num1, num2) => {\n  return num1 / num2\n}\n\n/*\nGiven two numbers, write a function to modulo.\n\nExample:\nGiven num1 = 5, num2 = 3, return '2'.\n*/\nconst modulo = (num1, num2) => {\n  return num1 % num2\n}\n\n/*\nGiven a number, write a function to add.\n\nExample:\nGiven num = 3, return '4'.\n*/\nconst add = (num) => {\n  return num + 1\n}\n\n/*\nGiven two numbers, write a function to subtract.\n\nExample:\nGiven num1 = 2, num2 = 3, return '1'.\n*/\nconst subtract = (num1, num2) => {\n  return num1 - num2\n}\n\n/*\nGiven two numbers, write a function to multiply.\n\nExample:\nGiven num1 = 2, num2 = 3, return '6'.\n*/\nconst multiply = (num1, num2) => {\n  return num1 * num2\n}\n\n/*\nGiven two numbers, write a function to divide.\n\nExample:\nGiven num1 = 4, num2 = 3, return '2'.\n*/\nconst divide = (num1, num2) => {\n  return num1 / num2\n}\n\n/*\nGiven two numbers, write a function to modulo.\n\nExample:\nGiven num1 = 4, num2 = 3, return '1'.\n*/\nconst modulo = (num1, num2) => {\n  return num1 % num2\n}\n\n/*\nGiven a number, write a function to add.\n\nExample:\nGiven num = 3, return '4'.\n*/\nconst add = (num) => {\n  return num + 1\n}\n\n/*\nGiven two numbers, write a function to subtract.\n\nExample:\nGiven num1 = 2, num2 = 3, return '1'.\n*/\nconst subtract = (num1, num2) => {\n  return num1 - num2\n}\n\n/*\nGiven two numbers, write a function to multiply.\n\nExample:\nGiven num1 = 2, num2 = 3, return '6'.\n*/\nconst multiply = (num1, num2) => {\n  return num1 * num2\n}\n\n/*\nGiven two numbers, write a function to divide"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  return (h * a) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return volume for a triangle.\n  >>> trianglesVolume(5, 3)\n  14.25\n  */\nconst trianglesVolume = (a, h) => {\n  return (a * a * h) / 6;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  "}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let a = 0, b = 1, c = 0, f = 1;\n  while (a < n) {\n    c = b;\n    b = a + c;\n    a = c;\n    f = b;\n  }\n  return f;\n};\n\n// a better way\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sortedList = sort(l);\n  const half = Math.floor(sortedList.length / 2);\n  if (sortedList.length % 2) {\n    return sortedList[half];\n  } else {\n    return (sortedList[half - 1] + sortedList[half]) / 2.0;\n  }\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  if (text.length === 1) {\n    return true;\n  }\n  let i = 0\n  let j = text.length - 1\n  while (i < j) {\n    if (text.charAt(i)!== text.charAt(j)) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nexport default isPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p) === 0? n : n % p + p;\n}\n\n/* Return a string representing the number n in base base.\n  >>> base(3, 2)\n  '11'\n  >>> base(3, 5)\n  '303'\n  >>> base(3, 10)\n  '11'\n  >>> base(100, 100)\n  '7'\n  */\nconst base = (n, base) => {\n  const s = '';\n  while (n) {\n    s = String(n % base) + s;\n    n = n / base;\n  }\n  return s;\n}\n\n/* Return the number of trailing zeroes in n.\n  >>> trailing(3)\n  0\n  >>> trailing(3)\n  1\n  >>> trailing(3, 2)\n  0\n  >>> trailing(3, 2)\n  1\n  >>> trailing(100)\n  1\n  >>> trailing(100, 2)\n  1\n  */\nconst trailing = (n, base) => {\n  return base === 2? n === 1? 0 : n === 0? 1 : 2 : base === 10? n < 10? 0 : 1 : 2;\n}\n\n/* Return a string representing the number n in base base with the length\n  k.\n  >>> base10(3, 2, 2)\n  '11'\n  >>> base10(3, 2, 3)\n  '103'\n  >>> base10(3, 2, 4)\n  '1011'\n  >>> base10(100, 10, 2)\n  '10001'\n  */\nconst base10 = (n, base, k) => {\n  let s = '';\n  while (n >= base) {\n    s = String(n % base) + s;\n    n = n / base;\n  }\n  if (k > 0) {\n    while (k-- > 0) {\n      s = '0' + s;\n    }\n  }\n  return s;\n}\n\n/* Return a string representing the number n in base base with the given\n  padding.\n  >>> base10(3, 2, 2, '#')\n  '#11'\n  >>> base10(3, 2, 2, '#')\n  '##11'\n  >>> base10(3, 2, 2, '#')\n  '###11'\n  >>> base10(100, 10, 2, '#')\n  '100#01'\n  */\nconst base10p = (n, base, k, pad) => {\n  const s = base10(n, base, k);\n  return pad + s.slice(s.length - pad.length) + pad;\n}\n\n/* Return the number of trailing zeroes in n.\n  >>> base10(3, 2, 2)\n  0\n  >>> base10(3, 2, 2)\n  1\n  >>> base10(3, 2, 3)\n  0\n  >>> base10(3, 2, 3)\n  1\n  >>> base10(100)\n  1\n  >>> base10(100, 2)\n  1\n  */\nconst base10trailing = (n, base) => {\n  return base === 2? n === 1? 0 : n === 0? 1 : 2 : base === 10? n < 10? 0 : 1 : 2;\n}\n\n/* Return a string representing the number n in base base with the length\n  k.\n  >>> base(3, 2)\n  '11'\n  >>> base(3, 5)\n  '303'\n  >>> base(3, 10)\n  '11'\n  >>> base(100, 100)\n  '7'\n  */\nconst base = (n, base) => {\n  const s = '';\n  while (n) {\n    s = String(n % base) + s;\n    n = n / base;\n  }\n  return s;\n}\n\n/* Return a string representing the number n in base base with the length\n  k and the given padding.\n  >>> base(3, 2, 2)\n  '#11'\n  >>> base(3, 2, 2)\n  '##11'\n  >>> base(3, 2, 2)\n  '###11'\n  >>> base(100, 10, 2)\n  '100#01'\n  */\nconst base = (n, base, k) => {\n  const s = base(n, base);\n  return pad + s.slice(s.length - pad.length) + pad;\n}\n\n/* Return the number of trailing zeroes in n.\n  >>> base(3, 2)\n  0\n  >>> base(3, 2)\n  1\n  >>> base(3, 3)\n  0\n  >>> base(3, 3)\n  1\n  >>> base(100)\n  1\n  >>> base(100, 2)\n  1\n  */\nconst basetrailing = (n, base) => {\n  return base === 2? n === 1? 0 : n === 0? 1 : 2 : base === 10? n < 10? 0 : 1 : 2;\n}\n\n/* Return a string representing the number n in base base with the length\n  k and the given padding.\n  >>> base(3, 2, 2)\n  '#11'\n  >>> base(3, 2, 2)\n  '##11'\n  >>> base(3, 2, 2)\n  '###11'\n  >>> base(100, 10, 2)\n  '100#01'\n  */\nconst base = (n, base, k) => {\n  const s = base(n, base);\n  return pad + s.slice(s.length - pad.length) + pad;\n}\n\nmodule.exports = {\n  modp,\n  base,\n  base10,\n  base10p,\n  base10trailing,\n  basetrailing,\n  trailing,\n  mod,\n  modp,\n  base10trailing,\n  base10p,\n  base10\n}<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  const str = s.split(\"\");\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    const num = parseInt(str[i], 10);\n    const shifted = (num - sum) % 26;\n    sum = sum + shifted;\n    result.push(String.fromCharCode(shifted + \"a\".charCodeAt(0)));\n  }\n  return result.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftDecimal = (s) => {\n  const str = s.split(\"\");\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    const num = parseInt(str[i], 10);\n    const shifted = num - sum;\n    sum = sum + shifted;\n    result.push(String.fromCharCode(shifted + \"a\".charCodeAt(0)));\n  }\n  return result.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftHex = (s) => {\n  const str = s.split(\"\");\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    const num = parseInt(str[i], 16);\n    const shifted = num - sum;\n    sum = sum + shifted;\n    result.push(String.fromCharCode(shifted + \"a\".charCodeAt(0)));\n  }\n  return result.join(\"\");\n}\n\nconst decode = (s) => {\n  return decodeShift(encodeShift(s));\n}\n\nconst decodeDecimal = (s) => {\n  return decodeShiftDecimal(encodeShift(s));\n}\n\nconst decodeHex = (s) => {\n  return decodeShiftHex(encodeShift(s));\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  decodeDecimal: decodeDecimal,\n  decodeHex: decodeHex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const result = text.replace(/[aeiou]/g,'');\n    return result.replace(/\\s+/g,'');\n}\n\n/*\n  addVowel is a function that takes string and returns string with vowels.\n  >>> addVowel('')\n  ''\n  >>> addVowel(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> addVowel('abcdef')\n  'abcdef'\n  >>> addVowel('aaaaa')\n  'aaaaa'\n  >>> addVowel('aaBAA')\n  'aaBAA'\n  >>> addVowel('zbcd')\n  'zbcd'\n  */\nconst addVowel = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const result = text.replace(/[^aeiou]/g,'');\n    return result.replace(/\\s+/g,'');\n}\n\n/*\n  createSuffix is a function that takes string and returns string with suffix.\n  >>> createSuffix('')\n  ''\n  >>> createSuffix(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> createSuffix('abcdef')\n  'abcdef'\n  >>> createSuffix('aaaaa')\n  'aaaaa'\n  >>> createSuffix('aaBAA')\n  'aaBAA'\n  >>> createSuffix('zbcd')\n  'zbcd'\n  */\nconst createSuffix = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const result = text.replace(/[^aeiou]/g, '');\n    return result.replace(/\\s+/g, '');\n}\n\n/*\n  createPrefix is a function that takes string and returns string with prefix.\n  >>> createPrefix('')\n  ''\n  >>> createPrefix(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> createPrefix('abcdef')\n  'abcdef'\n  >>> createPrefix('aaaaa')\n  'aaaaa'\n  >>> createPrefix('aaBAA')\n  'aaBAA'\n  >>> createPrefix('zbcd')\n  'zbcd'\n  */\nconst createPrefix = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const result = text.replace(/[^aeiou]/g, '');\n    return result.replace(/\\s+/g, '');\n}\n\n/*\n  generateVowels is a function that returns array with vowels.\n  >>> generateVowels('')\n  []\n  >>> generateVowels(\"abcdef\\nghijklm\")\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\n  >>> generateVowels('abcdef')\n  ['a', 'b', 'c', 'd', 'e', 'f']\n  >>> generateVowels('aaaaa')\n  ['a', 'a', 'a']\n  >>> generateVowels('aaBAA')\n  ['a', 'a', 'b']\n  >>> generateVowels('zbcd')\n  ['z', 'b', 'c', 'd']\n  */\nconst generateVowels = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const result = text.replace(/[^aeiou]/g, '');\n    return result.replace(/\\s+/g, '').split(' ');\n}\n\n/*\n  generatePrefixes is a function that returns array with prefixes.\n  >>> generatePrefixes('')\n  []\n  >>> generatePrefixes(\"abcdef\\nghijklm\")\n  ['', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\n  >>> generatePrefixes('abcdef')\n  ['', 'a', 'b', 'c', 'd', 'e', 'f']\n  >>> generatePrefixes('aaaaa')\n  ['', 'a', 'a', 'a']\n  >>> generatePrefixes('aaBAA')\n  ['', 'a', 'a', 'b']\n  >>> generatePrefixes('zbcd')\n  ['', 'z', 'b', 'c', 'd']\n  */\nconst generatePrefixes = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const result = text.replace(/[^aeiou]/g, '');\n    return result.replace(/\\s+/g, '').split(' ');\n}\n\n/*\n  generateSuffixes is a function that returns array with suffixes.\n  >>> generateSuffixes('')\n  []\n  >>> generateSuffixes(\"abcdef\\nghijklm\")\n  ['', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\n  >>> generateSuffixes('abcdef')\n  ['', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n  >>> generateSuffixes('aaaaa')\n  ['', 'a', 'a', 'a']\n  >>> generateSuffixes('aaBAA')"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThresholds([1, 2, 4, 10], 100, 5)\n  false\n  >>> belowThresholds([1, 20, 4, 10], 5, 5)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5, 100)\n  false\n  >>> belowThresholds([1, 20, 4, 10], 5, 4)\n  false\n  */\nconst belowThresholds2 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t1 && l[i] < t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belowThresholds2([1, 2, 4, 10], 5, 100)\n  true\n  >>> belowThresholds2([1, 20, 4, 10], 5, 100)\n  true\n  >>> belowThresholds2([1, 20, 4, 10], 5, 5)\n  true\n  >>> belowThresholds2([1, 20, 4, 10], 5, 4)\n  false\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  if (x > y) {\n    return x + y\n  } else {\n    return y + x\n  }\n}\n\n/*\n  Add two numbers x and y, but subtract them if they are negative.\n  >>> subtracting(-2, 3)\n  -5\n  >>> subtracting(5, -7)\n  12\n  >>> subtracting(-2, -3)\n  -2\n  >>> subtracting(-4, 3)\n  -7\n  */\nconst subtracting = (x, y) => {\n  if (x > y) {\n    return x - y\n  } else {\n    return y - x\n  }\n}\n\n/*\n  Add two numbers x and y, but multiply them if they are negative.\n  >>> multiplying(-2, 3)\n  -6\n  >>> multiplying(5, -7)\n  -70\n  >>> multiplying(-2, -3)\n  6\n  >>> multiplying(-4, 3)\n  -24\n  */\nconst multiplying = (x, y) => {\n  if (x > y) {\n    return x * y\n  } else {\n    return y * x\n  }\n}\n\n/*\n  Add two numbers x and y, but divide them if they are negative.\n  >>> divideing(12, 2)\n  6\n  >>> divideing(-10, 2)\n  -5\n  >>> divideing(2, -2)\n  0\n  >>> divideing(-2, -2)\n  0\n  >>> divideing(-4, 3)\n  -12\n  */\nconst divideing = (x, y) => {\n  if (x > y) {\n    return x / y\n  } else {\n    return y / x\n  }\n}\n\n/*\n  Add two numbers x and y, but subtract them if they are negative.\n  >>> subtracting(12, 2)\n  10\n  >>> subtracting(-10, 2)\n  0\n  >>> subtracting(2, -2)\n  2\n  >>> subtracting(-2, -2)\n  -2\n  >>> subtracting(-4, 3)\n  8\n  */\nconst subtracting2 = (x, y) => {\n  if (x > y) {\n    return x - y\n  } else {\n    return y - x\n  }\n}\n\n/*\n  Add two numbers x and y, but multiply them if they are negative.\n  >>> multiplying(12, 2)\n  24\n  >>> multiplying(-10, 2)\n  -20\n  >>> multiplying(2, -2)\n  0\n  >>> multiplying(-2, -2)\n  0\n  >>> multiplying(-4, 3)\n  -12\n  */\nconst multiplying2 = (x, y) => {\n  if (x > y) {\n    return x * y\n  } else {\n    return y * x\n  }\n}\n\n/*\n  Add two numbers x and y, but divide them if they are negative.\n  >>> divideing(12, 2)\n  6\n  >>> divideing(-10, 2)\n  -5\n  >>> divideing(2, -2)\n  0\n  >>> divideing(-2, -2)\n  0\n  >>> divideing(-4, 3)\n  12\n  */\nconst divideing2 = (x, y) => {\n  if (x > y) {\n    return x / y\n  } else {\n    return y / x\n  }\n}\n\n/*\n  Add two numbers x and y, but subtract them if they are negative.\n  >>> subtracting(12, 2)\n  10\n  >>> subtracting(-10, 2)\n  0\n  >>> subtracting(2, -2)\n  2\n  >>> subtracting(-2, -2)\n  -2\n  >>> subtracting(-4, 3)\n  8\n  */\nconst subtracting3 = (x, y) => {\n  if (x > y) {\n    return x - y\n  } else {\n    return y - x\n  }\n}\n\n/*\n  Add two numbers x and y, but multiply them if they are negative.\n  >>> multiplying(12, 2)\n  24\n  >>> multiplying(-10, 2)\n  -20\n  >>> multiplying(2, -2)\n  0\n  >>> multiplying(-2, -2)\n  0\n  >>> multiplying(-4, 3)\n  -12\n  */\nconst multiplying3 = (x, y) => {\n  if (x > y) {\n    return x * y\n  } else {\n    return y * x\n  }\n}\n\n/*\n  Add two numbers x and y, but divide them if they are negative.\n  >>> divideing(12, 2)\n  6\n  >>> divideing(-10, 2)\n  -5\n  >>> divideing(2, -2)\n  0\n  >>> divideing(-2, -2)\n  0\n  >>> divideing(-4, 3)\n  12\n  */\nconst divideing3 = (x, y) => {\n  if (x > y) {\n    return x / y\n  } else {\n    return y / x\n  }\n}\n\n/*\n  Add two numbers x and y, but subtract them if they are negative.\n  >>> subtracting(12, 2)\n  10\n  >>> subtracting(-10, 2)\n  0\n  >>> subtracting(2, -2)\n  2\n  >>> subtracting(-2, -2)\n  -2\n  >>> subtracting(-4, 3)\n  8\n  */\nconst subtracting4 = (x, y) => {\n  if (x > y) {\n    return x - y\n  } else {\n    return y - x\n  }\n}\n\n/*\n  Add two numbers x and y, but multiply them if they are negative.\n  >>> multiplying(12, 2)\n  24\n  >>> multiplying(-10, 2)\n  -20\n  >>> multiplying(2, -2)\n  0\n  >>> multiplying(-2, -2)\n  0\n  >>> multiplying(-4, 3)\n  -12\n  */\nconst multiplying4 = (x, y) => {\n  if (x > y) {\n    return x * y\n  } else {\n    return y * x\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!= s1_len) return false\n\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!= s1[i]) return false\n  }\n  return true\n}\n\nconst makeWord = (word) => {\n  const word_len = word.length\n  let s = ''\n  for (let i = 0; i < word_len; i++) {\n    s += word[i].toUpperCase()\n  }\n  return s\n}\n\nconst makeWordLength = (word, word_len) => {\n  const len = word.length\n  let s = ''\n  for (let i = 0; i < len; i++) {\n    s += word[i].toUpperCase()\n  }\n  return s\n}\n\nconst isAnagram = (word0, word1) => {\n  return (makeWord(word0).toUpperCase() == makeWord(word1).toUpperCase())\n}\n\nconst makeWordCount = (word) => {\n  const word_len = word.length\n  let s = ''\n  for (let i = 0; i < word_len; i++) {\n    s += word[i].toUpperCase()\n  }\n  return s\n}\n\nconst isSorted = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len - 1; i++) {\n    if (word[i] > word[i+1]) return false\n  }\n  return true\n}\n\nconst isAlpha = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (!(word[i] >= 'A' && word[i] <= 'Z')) return false\n  }\n  return true\n}\n\nconst isAlphanumeric = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (!(word[i] >= 'A' && word[i] <= 'Z' || word[i] >= 'a' && word[i] <= 'z' || word[i] >= '0' && word[i] <= '9')) return false\n  }\n  return true\n}\n\nconst isUpperCase = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (!(word[i] >= 'A' && word[i] <= 'Z')) return false\n  }\n  return true\n}\n\nconst isLowerCase = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (!(word[i] >= 'a' && word[i] <= 'z')) return false\n  }\n  return true\n}\n\nconst isAllUpperCase = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (word[i]!= word[i].toUpperCase()) return false\n  }\n  return true\n}\n\nconst isAllLowerCase = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (word[i]!= word[i].toLowerCase()) return false\n  }\n  return true\n}\n\nconst isNumeric = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (!(word[i] >= '0' && word[i] <= '9')) return false\n  }\n  return true\n}\n\nconst isPunctuation = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (punctuation.indexOf(word[i])!= -1) return true\n  }\n  return false\n}\n\nconst isSymbol = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (symbol.indexOf(word[i])!= -1) return true\n  }\n  return false\n}\n\nconst isSpace = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (space.indexOf(word[i]) == -1) return false\n  }\n  return true\n}\n\nconst isUpperAlpha = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (upperAlpha.indexOf(word[i]) == -1) return false\n  }\n  return true\n}\n\nconst isLowerAlpha = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (lowerAlpha.indexOf(word[i]) == -1) return false\n  }\n  return true\n}\n\nconst isAlphaNumeric = (word) => {\n  const word_len = word.length\n  for (let i = 0; i < word_len; i++) {\n    if (alphaNumeric.indexOf(word[i]) == -1) return false\n  }\n  return true\n}\n\nconst isAlphaNumericSpace = (word)"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n    let a = 1, b = 1;\n    for (let i = 2; i < n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};\n\nconsole.log(fibs(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let bracketCount = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '<') {\n            bracketCount++;\n        }\n        else if (brackets[i] === '>') {\n            bracketCount--;\n            if (bracketCount < 0) {\n                return false;\n            }\n        }\n    }\n    return bracketCount === 0;\n};\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  *\n  * Example:\n  *\n  *   >>> validBrackets(\"()\")\n  *   true\n  *   >>> validBrackets(\"<>\")\n  *   true\n  *   >>> validBrackets(\"<\")\n  *   true\n  *   >>> validBrackets(\"(\")\n  *   true\n  *   >>> validBrackets(\"\")\n  *   false\n  */\nconst validBrackets = (brackets) => {\n    let bracketsCount = brackets.length;\n    let bracketsSum = 0;\n    for (let i = 0; i < bracketsCount; i++) {\n        bracketsSum += bracketsCount;\n    }\n    return bracketsSum % 2 === 0;\n};\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  *\n  * Example:\n  *\n  *   >>> validBrackets(\"<>\")\n  *   true\n  *   >>> validBrackets(\"<\")\n  *   true\n  *   >>> validBrackets(\"(\")\n  *   true\n  *   >>> validBrackets(\"\")\n  *   false\n  */\nconst validParentheses = (brackets) => {\n    let bracketsCount = brackets.length;\n    let bracketsSum = 0;\n    for (let i = 0; i < bracketsCount; i++) {\n        bracketsSum += bracketsCount;\n    }\n    return bracketsSum % 2 === 0;\n};\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  *\n  * Example:\n  *\n  *   >>> validBrackets(\"<>\")\n  *   true\n  *   >>> validBrackets(\"<\")\n  *   true\n  *   >>> validBrackets(\"(\")\n  *   true\n  *   >>> validBrackets(\"\")\n  *   false\n  */\nconst validBracketsCombinations = (brackets) => {\n    let bracketsCount = brackets.length;\n    let bracketsSum = 0;\n    for (let i = 0; i < bracketsCount; i++) {\n        bracketsSum += bracketsCount;\n    }\n    return bracketsSum % 2 === 0;\n};\n\nconst testCase = () => {\n    let brackets = [];\n    for (let i = 0; i < 8; i++) {\n        brackets.push(Math.floor(Math.random() * 2) + '<');\n    }\n    console.log(correctBracketing(brackets));\n    console.log(validBrackets(brackets));\n    console.log(validParentheses(brackets));\n    console.log(validBracketsCombinations(brackets));\n};\n\ntestCase();\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    if (l.length < 2) {\n        return true;\n    }\n    const previous = l[0];\n    const current = l[1];\n    for (let i = 2; i < l.length; i++) {\n        if (l[i] < previous) {\n            return false;\n        }\n        previous = current;\n        current = l[i];\n    }\n    return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let len1 = l1.length;\n  let len2 = l2.length;\n  let len = len1 < len2? len1 : len2;\n  while (i < len && j < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return number of lines in a file.\n  >>> countLines('lines.txt')\n  8\n  >>> countLines('empty.txt')\n  0\n  >>> countLines('non.txt')\n  0\n  */\nconst countLines = (filename) => {\n  let lines = 0;\n  let file = fs.readFileSync(filename);\n  let lines = file.toString().split('\\n').length;\n  return lines;\n};\n\nmodule.exports = {\n  common,\n  countLines\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  const primes = getPrimeFactors(n);\n  const largestPrimeFactor = getLargestPrimeFactor(primes);\n  return largestPrimeFactor;\n};\n\n/*Return the largest prime factor of n. Assume n > 1.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst getLargestPrimeFactor = (primes) => {\n  let largestPrimeFactor = 1;\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] > largestPrimeFactor) {\n      largestPrimeFactor = primes[i];\n    }\n  }\n  return largestPrimeFactor;\n};\n\n/*Return the prime factors of n. Assume n > 1.\n  >>> primeFactors(13195)\n  [2, 29]\n  >>> primeFactors(2048)\n  [2, 2]\n  */\nconst primeFactors = (n) => {\n  const primeFactors = [];\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      primeFactors.push(prime);\n      while (n % prime === 0) {\n        n /= prime;\n      }\n    }\n    prime++;\n  }\n  if (n > 1) {\n    primeFactors.push(n);\n  }\n  return primeFactors;\n};\n\n/*\n  Return the prime factors of n. Assume n > 1.\n  >>> primeFactors(13195)\n  [2, 29]\n  >>> primeFactors(2048)\n  [2, 2]\n  */\nconst getPrimeFactors = (n) => {\n  const primeFactors = [];\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      primeFactors.push(prime);\n      while (n % prime === 0) {\n        n /= prime;\n      }\n    }\n    prime++;\n  }\n  if (n > 1) {\n    primeFactors.push(n);\n  }\n  return primeFactors;\n};\n\n/*\n  Return the nth prime number. Assume n > 0.\n  >>> nextPrime(0)\n  1\n  >>> nextPrime(1)\n  2\n  >>> nextPrime(2)\n  3\n  >>> nextPrime(3)\n  5\n  >>> nextPrime(4)\n  7\n  >>> nextPrime(5)\n  11\n  >>> nextPrime(6)\n  13\n  >>> nextPrime(7)\n  17\n  >>> nextPrime(8)\n  19\n  >>> nextPrime(9)\n  23\n  >>> nextPrime(10)\n  29\n  >>> nextPrime(11)\n  31\n  >>> nextPrime(12)\n  37\n  >>> nextPrime(13)\n  41\n  >>> nextPrime(14)\n  43\n  >>> nextPrime(15)\n  47\n  >>> nextPrime(16)\n  53\n  >>> nextPrime(17)\n  59\n  >>> nextPrime(18)\n  61\n  >>> nextPrime(19)\n  67\n  >>> nextPrime(20)\n  71\n  >>> nextPrime(21)\n  73\n  >>> nextPrime(22)\n  79\n  >>> nextPrime(23)\n  83\n  >>> nextPrime(24)\n  89\n  >>> nextPrime(25)\n  97\n  >>> nextPrime(26)\n  101\n  >>> nextPrime(27)\n  103\n  >>> nextPrime(28)\n  107\n  >>> nextPrime(29)\n  109\n  >>> nextPrime(30)\n  113\n  >>> nextPrime(31)\n  127\n  >>> nextPrime(32)\n  131\n  >>> nextPrime(33)\n  137\n  >>> nextPrime(34)\n  139\n  >>> nextPrime(35)\n  143\n  >>> nextPrime(36)\n  149\n  >>> nextPrime(37)\n  151\n  >>> nextPrime(38)\n  157\n  >>> nextPrime(39)\n  163\n  >>> nextPrime(40)\n  167\n  >>> nextPrime(41)\n  173\n  >>> nextPrime(42)\n  179\n  >>> nextPrime(43)\n  181\n  >>> nextPrime(44)\n  187\n  >>> nextPrime(45)\n  191\n  >>> nextPrime(46)\n  193\n  >>> nextPrime(47)\n  197\n  >>> nextPrime(48)\n  199\n  >>> nextPrime(49)\n  211\n  >>> nextPrime(50)\n  223\n  >>> nextPrime(51)\n  227\n  >>> nextPrime(52)\n  229\n  >>> nextPrime(53)\n  233\n  >>> nextPrime(54)\n  239\n  >>> nextPrime(55)\n  241\n  >>> nextPrime(56)\n  251\n  >>> nextPrime(57)\n  257\n  >>> nextPrime(58)\n  263\n  >>> nextPrime(59)\n  269\n  >>> nextPrime(60)\n  271\n  >>> nextPrime(61)\n  277\n  >>> nextPrime(62)\n  281\n  >>> nextPrime(63)\n  283\n  >>> nextPrime(64)\n  289\n  >>> nextPrime(65)\n  293\n  >>> nextPrime(66)\n  307\n  >>> nextPrime(67)\n  311\n  >>> nextPrime(68)\n  313\n  >>> nextPrime(69)\n  317\n  >>> nextPrime(70)\n  319\n  >>> nextPrime(71)\n  323\n  >>> nextPrime(72)\n  329\n  >>> nextPrime(73)\n  331\n  >>> nextPrime(74)\n  337\n  >>> nextPrime(75)\n  343\n  >>> nextPrime(76)\n  349\n  >>> nextPrime(77)\n  353\n  >>> nextPrime(78)\n  359\n  >>> nextPrime(79)\n  367\n  >>> nextPrime(80)\n  373\n  >>> nextPrime(81)\n  379\n  >>> nextPrime(82)\n  383\n  >>> nextPrime(83)\n  389\n  >>> nextPrime(84)\n  397\n  >>> nextPrime"}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  if (n === 1) return 1;\n  return sumsToN(n - 1) + sumsToN(n - 2) + sumsToN(n - 3) + sumsToN(n - 4);\n};\n\nconsole.log(sumsToN(5));\nconsole.log(sumsToN(10));\nconsole.log(sumsToN(30));\nconsole.log(sumsToN(100));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  // Base case: the brackets are balanced.\n  if (brackets === \"())\") return true;\n\n  // Base case: the brackets are unbalanced.\n  if (brackets === \"())\") return false;\n\n  // Loop through the brackets, comparing each pair of brackets.\n  for (let i = 0; i < brackets.length; i++) {\n    const openingBracket = brackets[i];\n    const closingBracket = brackets[i + 1];\n\n    // If the opening bracket has no matching closing bracket,\n    // we are unbalanced.\n    if (openingBracket!== \"(\" && openingBracket!== \")\") return false;\n\n    // If the opening bracket matches the closing bracket,\n    // we are balanced.\n    if (openingBracket === \"(\" && closingBracket === \")\") continue;\n\n    // If the opening bracket matches the next opening bracket,\n    // we are balanced.\n    if (openingBracket === \"(\" && brackets[i + 2] === \"(\" && brackets[i + 3] === \")\") continue;\n\n    // If the opening bracket matches the previous closing bracket,\n    // we are balanced.\n    if (openingBracket === \"(\" && brackets[i - 1] === \")\" && brackets[i - 2] === \")\") continue;\n\n    // If the opening bracket matches the previous opening bracket,\n    // we are balanced.\n    if (openingBracket === \"(\" && brackets[i - 1] === \"(\" && brackets[i - 2] === \")\") continue;\n\n    // Otherwise, we are unbalanced.\n    return false;\n  }\n\n  // We are balanced.\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const length = xs.length;\n  let derivative = [0, 0];\n  for (let i = 1; i < length; i++) {\n    derivative[0] += xs[i];\n    derivative[1] += xs[i] * i;\n  }\n  return derivative;\n};\n\n/**\n  Find the roots of a polynomial.\n  Return the roots in the same form.\n  >>> roots([1, 3, 5, 7, 9])\n  [-1, -1, -1]\n  >>> roots([1, 4, 7, 9])\n  [0, 1, 1]\n  >>> roots([2, 3, 5, 7, 9])\n  [0, 0, 0]\n  >>> roots([1, 4, 7, 9, 11])\n  [1, 2, 3]\n  */\nconst roots = (xs) => {\n  const length = xs.length;\n  if (length == 1) {\n    return [-1];\n  }\n  const derivative = derivative(xs);\n  let roots = [];\n  for (let i = 0; i < length; i++) {\n    if (derivative[1]!= 0) {\n      roots.push(-(derivative[0] - i * derivative[1]) / derivative[1]);\n    }\n  }\n  return roots;\n};\n\n/**\n  Find the roots of a polynomial.\n  Return the roots in the same form.\n  >>> roots([1, 3, 5, 7, 9, 11])\n  [1, 2, 3]\n  >>> roots([2, 3, 5, 7, 9, 11])\n  [0, 1, 1]\n  >>> roots([1, 4, 7, 9, 11])\n  [0, 0, 0]\n  >>> roots([1, 4, 7, 9, 11, 13])\n  [1, 2, 3]\n  */\nconst roots2 = (xs) => {\n  const length = xs.length;\n  if (length == 1) {\n    return [-1];\n  }\n  let a = 1;\n  let b = 0;\n  let m = 1;\n  let n = 0;\n  for (let i = 1; i < length; i++) {\n    a = a * i;\n    b = b + xs[i];\n    m = m * i;\n    n = n + xs[i];\n  }\n  let c = b * b - 4 * a * n;\n  if (c < 0) {\n    return [];\n  }\n  let r = roots(roots(roots(xs)));\n  if (r.length == 0) {\n    r = [0, 1];\n  }\n  return r;\n};\n\nexport { derivative, roots, roots2 };\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let f = 0;\n  let f1 = 0;\n  let f2 = 1;\n  if (n === 0) {\n    return f;\n  }\n  if (n === 1) {\n    return f1;\n  }\n  if (n === 2) {\n    return f2;\n  }\n  let i = 1;\n  while (i < n) {\n    f = f1 + f2;\n    f1 = f2;\n    f2 = f;\n    i = i + 1;\n  }\n  return f;\n}\n\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    cnt += s[i].match(/[aeiou]/)? 1 : 0\n  }\n  return cnt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    const len = x.length;\n    const result = [];\n    let k = 0;\n    for (let i = 0; i < len; i++) {\n        if (k == shift) {\n            k = 0;\n        }\n        result.push(x[k]);\n        k++;\n    }\n    return result.reverse().join(\"\");\n};\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) > 47 && s[i].charCodeAt(0) < 58) {\n      sum += s[i].charCodeAt(0) - 48;\n    }\n  }\n  return sum;\n};\n\nconsole.log(digitSums(\"abAB\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let oranges = 0;\n  let apples = 0;\n  let mango = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'apples') {\n      apples++;\n    } else if (s[i] === 'oranges') {\n      oranges++;\n    } else if (s[i] ==='mango') {\n      mango++;\n    }\n  }\n  let total = apples + oranges + mango;\n  return total - n;\n};\n\nmodule.exports = fruitDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let answer = [];\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    const node = arr[mid];\n\n    if (node.value === 0) {\n      if (index === 0) {\n        answer = [node, mid];\n      } else if (index === 1) {\n        answer = [arr[mid - 1], mid - 1];\n      }\n      index += 1;\n    } else if (node.value % 2 === 0) {\n      if (index === 0) {\n        answer = [node, mid];\n      } else if (index === 1) {\n        answer = [arr[mid - 1], mid - 1];\n      }\n      index += 1;\n    } else if (node.value < min) {\n      min = node.value;\n      index = 0;\n    }\n    if (index === 2) {\n      break;\n    }\n    if (min === Number.MAX_SAFE_INTEGER) {\n      break;\n    }\n    if (min < arr[mid].value) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return answer;\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const length = lst.length\n  const max = lst[0] || -1\n\n  for (let i = 0; i < length; i++) {\n    const curr = lst[i]\n\n    if (curr > 0 && curr > max) {\n      max = curr\n    }\n  }\n\n  return max\n}\n\nexport default search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted.reverse()\n}\n\nexport default strangerSortsLists\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  let ab = a + b, cb = c + b, ca = a + c;\n  if (ab > cb && ab > ca) {\n    return (a * b * c) / 2;\n  } else if (cb > ab && cb > ca) {\n    return (b * c * a) / 2;\n  } else if (ca > ab && ca > cb) {\n    return (c * a * b) / 2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  let ab = a + b, cb = c + b, ca = a + c;\n  if (ab > cb && ab > ca) {\n    return (a * b * c) / 2;\n  } else if (cb > ab && cb > ca) {\n    return (b * c * a) / 2;\n  } else if (ca > ab && ca > cb) {\n    return (c * a * b) / 2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  let ab = a + b, cb = c + b, ca = a + c;\n  if (ab > cb && ab > ca) {\n    return (a * b * c) / 2;\n  } else if (cb > ab && cb > ca) {\n    return (b * c * a) / 2;\n  } else if (ca > ab && ca > cb) {\n    return (c * a * b) / 2;\n  } else {\n    return -1;\n  }\n};\n\n// example\ntrianglesAreas(3, 4, 5); // 6.00\ntrianglesAreas(1, 2, 10); // -1\ntrianglesAreas(10, 6, 4); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (!q.length) return false\n  const sum = q.reduce((a, b) => a + b)\n  return sum <= w && (q.reduce((a, b) => a * b) <= w)\n}\n\n/*\n  Write a function that takes a string q and a number w and returns true if the string q will fly, and false otherwise.\n  The string q will fly if it's balanced (the sum of its characters is less than or equal to the maximum possible weight w) and the sum of its characters is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly(\"CAT\", 5) ➞ false\n  # 3+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly(\"CAT\", 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly(\"CAT\", 1) ➞ true\n  # CAT is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (!q.length) return false\n  const sum = q.reduce((a, b) => a + b)\n  return sum <= w && (q.reduce((a, b) => a * b) <= w)\n}\n\n/*\n  Write a function that takes two strings q and r and returns true if q will fly, and false otherwise.\n  The strings q and r will fly if they are balanced (the sum of their characters is less than or equal to the maximum possible weight w) and the sum of their characters is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly(\"CAT\", \"DOG\", 5) ➞ true\n  # CAT + DOG is less than the maximum possible weight, and it's unbalanced.\n\n  willItFly(\"CAT\", \"DOG\", 9) ➞ true\n  # CAT + DOG is less than the maximum possible weight, and it's balanced.\n\n  willItFly(\"CAT\", \"DOG\", 1) ➞ true\n  # CAT + DOG is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, r, w) => {\n  if (!q.length ||!r.length) return false\n  const sum = q.reduce((a, b) => a + b)\n  return sum <= w && (r.reduce((a, b) => a + b) <= w)\n}\n\n/*\n  Write a function that takes two strings q and r and returns true if q will fly, and false otherwise.\n  The strings q and r will fly if they are balanced (the sum of their characters is less than or equal to the maximum possible weight w) and the sum of their characters is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly(\"CAT\", \"DOG\", 5) ➞ true\n  # CAT + DOG is less than the maximum possible weight, and it's unbalanced.\n\n  willItFly(\"CAT\", \"DOG\", 9) ➞ true\n  # CAT + DOG is less than the maximum possible weight, and it's balanced.\n\n  willItFly(\"CAT\", \"DOG\", 1) ➞ true\n  # CAT + DOG is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, r, w) => {\n  if (!q.length ||!r.length) return false\n  const sum = q.reduce((a, b) => a + b)\n  return sum <= w && (r.reduce((a, b) => a + b) <= w)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let current = arr[0],\n    sum = 0,\n    smaller = 0,\n    equal = 0,\n    bigger = 0,\n    i = 1;\n  while (i < arr.length) {\n    if (arr[i] === current) {\n      sum += current;\n      equal++;\n    } else {\n      if (sum === 0) {\n        smaller++;\n      } else {\n        bigger++;\n      }\n    }\n    current = arr[i];\n    i++;\n  }\n  if (sum === 0) {\n    return smaller + bigger;\n  } else {\n    return smaller;\n  }\n};\n\n// console.log(smallerChange([1, 2, 3, 2, 1]));\nconsole.log(smallerChange([1, 2, 3, 2, 1, 7, 9, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const total = []\n\n  for (let i = 0; i < len1; i++) {\n    let c = lst1[i]\n    let match = false\n    for (let j = 0; j < len2; j++) {\n      if (lst2[j].length > c.length) {\n        break\n      }\n      if (lst2[j].indexOf(c)!== -1) {\n        match = true\n        break\n      }\n    }\n    if (!match) {\n      total.push(c)\n    }\n  }\n  return total\n}\n\nmodule.exports = totalMatch\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let result = false;\n  let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  primeNumbers.forEach(number => {\n    if(number * a > a) {\n      return;\n    }\n    if(a % number === 0) {\n      result = true;\n      return;\n    }\n  });\n  return result;\n};\n\n// TEST\n\nconst isMultiplyPrime = (a) => {\n  let result = false;\n  let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  primeNumbers.forEach(number => {\n    if(number * a > a) {\n      return;\n    }\n    if(a % number === 0) {\n      result = true;\n      return;\n    }\n  });\n  return result;\n};\n\nconsole.log(isMultiplyPrime(3));\nconsole.log(isMultiplyPrime(31));\nconsole.log(isMultiplyPrime(23));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return x === n;\n  }\n  return false;\n};\n\nconst isPrime = (x) => x % 2 === 0? false : isSimplePower(x, 2);\n\nconst isSimpleNumber = (x) => {\n  return isPrime(x) && x > 0;\n};\n\nconst isSimpleNumber = (x) => {\n  return isPrime(x) && x > 0;\n};\n\nconst isPrime = (x) => x % 2 === 0? false : isSimplePower(x, 2);\n\nconsole.log(isSimpleNumber(5));\nconsole.log(isSimpleNumber(8));\nconsole.log(isSimpleNumber(3));\nconsole.log(isSimpleNumber(9));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if(a === 0) return true;\n  if(a % 3 === 0) {\n    return a === Math.pow(3, Math.floor(Math.log(a) / Math.log(3)));\n  } else {\n    return false;\n  }\n};\n\n//console.log(iscube(1));\n//console.log(iscube(2));\n//console.log(iscube(-1));\n//console.log(iscube(64));\n//console.log(iscube(180));\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if(a === 0) return true;\n  if(a % 3 === 0) {\n    return a === Math.pow(3, Math.floor(Math.log(a) / Math.log(3)));\n  } else {\n    return false;\n  }\n};\n\n//console.log(iscube2(1));\n//console.log(iscube2(2));\n//console.log(iscube2(-1));\n//console.log(iscube2(64));\n//console.log(iscube2(180));\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if(a === 0) return true;\n  if(a % 3 === 0) {\n    return a === Math.pow(3, Math.floor(Math.log(a) / Math.log(3)));\n  } else {\n    return false;\n  }\n};\n\n//console.log(iscube3(1));\n//console.log(iscube3(2));\n//console.log(iscube3(-1));\n//console.log(iscube3(64));\n//console.log(iscube3(180));\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if(a === 0) return true;\n  if(a % 3 === 0) {\n    return a === Math.pow(3, Math.floor(Math.log(a) / Math.log(3)));\n  } else {\n    return false;\n  }\n};\n\n//console.log(iscube4(1));\n//console.log(iscube4(2));\n//console.log(iscube4(-1));\n//console.log(iscube4(64));\n//console.log(iscube4(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  const isPrime = (n) => {\n    const prime = 2;\n    for (let i = 0; i < prime; i++) {\n      if (n % prime === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const isPrime2 = (n) => {\n    const prime = 2;\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const prime = (n) => {\n    if (isPrime(n)) {\n      return n;\n    }\n    const isPrime = isPrime2;\n    let result = 2;\n    while (result <= n) {\n      if (isPrime(result)) {\n        return result;\n      }\n      result += 2;\n    }\n    return result;\n  };\n  const key = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n      if (num[i] === 'A') {\n        count++;\n      }\n    }\n    return count;\n  };\n  return prime(key(num));\n};\n\nmodule.exports = {\n  key: hexesKeys,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n    const binary = [];\n    let binaryIndex = 0;\n    let isEven = true;\n    while (decimal > 0) {\n        if (isEven) {\n            binary[binaryIndex++] = (decimal & 1)? '1' : '0';\n        } else {\n            binary[binaryIndex++] = (decimal & 1)? '0' : '1';\n        }\n        decimal = decimal >> 1;\n        isEven =!isEven;\n    }\n    return binary.join('') + 'db';\n};\n\nconst binaryToDecimals = (binary) => {\n    let decimals = 0;\n    let isEven = true;\n    for (let i = 0; i < binary.length; i++) {\n        if (isEven) {\n            decimals = decimals + (binary[i] === '1'? 1 : 0);\n        } else {\n            decimals = decimals + (binary[i] === '1'? 0 : 1);\n        }\n        isEven =!isEven;\n    }\n    return decimals;\n};\n\nconst test = (decimal, binary) => {\n    console.log(`decimal: ${decimal}`);\n    console.log(`binary: ${binary}`);\n    console.log(`decimalsToBinary(${decimal}): ${decimalsToBinary(decimal)}`);\n    console.log(`binaryToDecimals(${binary}): ${binaryToDecimals(binary)}`);\n    console.log(`${decimal} = ${binaryToDecimals(decimalsToBinary(decimal))}`);\n};\n\n// Test cases\ntest(15, 'db1111db');\ntest(32, 'db100000db');\ntest(15, 'db11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n    if (s.length < 3) return false;\n    let i = 0;\n    let count = 0;\n    let arr = [];\n    let isHappy = true;\n    while (i < s.length) {\n        if (s[i] === s[i + 1]) {\n            arr[count++] = s[i];\n        } else {\n            arr = arr.slice(0, count);\n            arr.sort();\n            if (arr.length > 2 && arr[arr.length - 1] === arr[arr.length - 2]) {\n                isHappy = false;\n                break;\n            }\n            count = 0;\n        }\n        i++;\n    }\n    return isHappy;\n};\n\nconsole.log(isHappiest('a'));\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let table = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] > 3.7) {\n      table.push(\"A\");\n    } else if (grades[i] > 3.3) {\n      table.push(\"A-\");\n    } else if (grades[i] > 3.0) {\n      table.push(\"B+\");\n    } else if (grades[i] > 2.7) {\n      table.push(\"B\");\n    } else if (grades[i] > 2.3) {\n      table.push(\"B-\");\n    } else if (grades[i] > 2.0) {\n      table.push(\"C+\");\n    } else if (grades[i] > 1.7) {\n      table.push(\"C\");\n    } else if (grades[i] > 1.3) {\n      table.push(\"C-\");\n    } else if (grades[i] > 1.0) {\n      table.push(\"D+\");\n    } else if (grades[i] > 0.7) {\n      table.push(\"D\");\n    } else if (grades[i] > 0.0) {\n      table.push(\"D-\");\n    } else {\n      table.push(\"E\");\n    }\n  }\n  return table;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = ['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']\n  const len = string.length\n\n  for (let i = 0; i < prime.length; i++) {\n    if (string.indexOf(prime[i]) >= 0 && (len - prime[i]).toString() % 1 === 0) {\n      return true\n    }\n  }\n\n  return false\n}\n\nconsole.log(primeLength('Hello'))\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  const result = [];\n  const digits = [];\n  for (let i = 1; i <= n; i++) {\n    digits.push(i);\n  }\n  for (let i = 1; i <= n; i++) {\n    const start = 0;\n    const end = n - 1;\n    const k = digits.indexOf(i);\n    while (start <= end) {\n      result.push(digits.slice(start, k + 1).concat(digits.slice(k + 1, end + 1)).reduce((a, b) => a + b));\n      start = k + 1;\n      end = end - (end - k);\n    }\n  }\n  return result;\n};\n\nmodule.exports = startOneEnds;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const result = new Array(N+1);\n  let sum = 0;\n  for (let i = N; i >= 1; i--) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  \n  result[N] = sum;\n  return result.reduce((acc, value, i) => acc + value, 0);\n};\n\nexport default solve;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let sum = 0;\n  let i = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n    i += 1;\n  }\n  return sum;\n};\n\nmodule.exports = adding;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  const r = [];\n  const words = s.split(' ');\n  const i = 0;\n  const wordsLength = words.length;\n\n  while (i < wordsLength) {\n    const j = 0;\n    const shuffledWords = [];\n    while (j < wordsLength) {\n      const index = Math.round(Math.random() * (wordsLength - j));\n      shuffledWords.push(words[j + index]);\n      j += index;\n    }\n    r.push(shuffledWords.join(' '));\n    i++;\n  }\n\n  return r.join(' ');\n};\n\nconsole.log(antisShuffles('Hi'));\nconsole.log(antisShuffles('hello'));\nconsole.log(antisShuffles('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const rows = [];\n  const columns = [];\n  for (const row of lst) {\n    rows.push(row);\n    columns.push([]);\n    for (const col of row) {\n      columns[rows.length - 1].push(col);\n    }\n  }\n  const sortedRows = rows.sort((row1, row2) => {\n    return row1 < row2? -1 : 1;\n  });\n  const sortedColumns = columns.sort((col1, col2) => {\n    return col1 < col2? -1 : 1;\n  });\n  const rowsAndColumns = rows.concat(sortedRows).concat(sortedColumns);\n  const result = [];\n  for (const [row, col] of rowsAndColumns) {\n    if (row == x) {\n      result.push([row, col]);\n    }\n  }\n  return result;\n};\n\nconst test = [\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 1]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[1, 2, 3, 4, 5, 6], [1, 2"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const isSorted = Array.isArray(array) && array.every(x => x > 0);\n  if (isSorted) return array;\n\n  return array.sort((a, b) => a - b).reverse();\n};\n\n// TEST\nsortsArray([0, 1, 2, 3, 4, 5, 6, 7]);\nsortsArray([2, 4, 3, 0, 1, 5, 6, 7]);\nsortsArray([6, 5, 4, 3, 2, 1, 0]);\nsortsArray([2, 4, 3, 0, 1, 5, 6, 7, 8]);\nsortsArray([6, 5, 4, 3, 2, 1, 0]);\nsortsArray([0, 1, 2, 3, 4, 5, 6, 7]);\nsortsArray([0, 1, 2, 3, 4, 5, 6, 7, 8]);\nsortsArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = 0;\n    while (j < s.length) {\n      result += alpha[s.charCodeAt(i) + (s.charCodeAt(j) << 2)];\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters\n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = 0;\n    while (j < s.length) {\n      result += alpha[s.charCodeAt(i) - (s.charCodeAt(j) << 2)];\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst encrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = 0;\n    while (j < s.length) {\n      result += alpha[s.charCodeAt(i) + (s.charCodeAt(j) << 2)];\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = 0;\n    while (j < s.length) {\n      result += alpha[s.charCodeAt(i) - (s.charCodeAt(j) << 2)];\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst encrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = 0;\n    while (j < s.length) {\n      result += alpha[s.charCodeAt(i) + (s.charCodeAt(j) << 2)];\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test = () => {\n  const encrypted = encrypt('hello world');\n  const decrypted = decrypt(encrypted);\n  console.log(encrypted, decrypted);\n};\n\nconst test ="}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (!lst.length) return null\n\n  let next = lst[0]\n  let nextNext = lst[1]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < next) {\n      next = lst[i]\n      nextNext = lst[i+1]\n    }\n  }\n  return nextNext\n}\n\nmodule.exports = nextSmallest\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let counter = 0;\n  let prevWord = \"\";\n  let words = S.split(\".\");\n  for(let i=0; i<words.length; i++) {\n    if(words[i].startsWith(\"I\")) {\n      counter++;\n    }\n    else if(words[i].startsWith(\"!\") || words[i].startsWith(\"?\") || words[i].startsWith(\".\")) {\n      if(prevWord.startsWith(\"I\")) {\n        counter--;\n      }\n      prevWord = words[i];\n    }\n  }\n  return counter;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number') {\n    return false;\n  }\n  if (typeof y!== 'number') {\n    return false;\n  }\n  if (typeof z!== 'number') {\n    return false;\n  }\n  return x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZ3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const regex = /[aeiouy]/g;\n  let index = message.indexOf('e');\n  let newMessage = message.toUpperCase().replace(regex, (match) => {\n    if (index === 0) {\n      index = message.indexOf('e', index + 1);\n      return match.toUpperCase();\n    }\n    index = message.indexOf('e', index + 1);\n    return match.toLowerCase();\n  });\n  return newMessage;\n};\n\nconsole.log(encode('This is a message'));\nconsole.log(encode('test'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max; i++) {\n    current += parseInt(lst[i], 10)\n    sum += current\n  }\n  return sum\n}\n\nconst skjkasdkd2 = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max; i++) {\n    let d = parseInt(lst[i], 10)\n    sum += d\n    while (sum > 9) {\n      sum = sum - 10\n    }\n  }\n  return sum\n}\n\nconst skjkasdkd3 = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max; i++) {\n    let d = parseInt(lst[i], 10)\n    sum += d\n  }\n  while (sum > 9) {\n    sum = sum - 10\n  }\n  return sum\n}\n\nconst skjkasdkd4 = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max; i++) {\n    let d = parseInt(lst[i], 10)\n    sum += d\n    while (sum > 9) {\n      sum = sum - 10\n    }\n  }\n  return sum\n}\n\nconst skjkasdkd5 = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max; i++) {\n    let d = parseInt(lst[i], 10)\n    sum += d\n    while (sum > 9) {\n      sum = sum - 10\n    }\n  }\n  while (sum > 9) {\n    sum = sum - 10\n  }\n  return sum\n}\n\nconst skjkasdkd6 = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max; i++) {\n    let d = parseInt(lst[i], 10)\n    sum += d\n    while (sum > 9) {\n      sum = sum - 10\n    }\n  }\n  while (sum > 9) {\n    sum = sum - 10\n  }\n  return sum\n}\n\nconst skjkasdkd7 = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max; i++) {\n    let d = parseInt(lst[i], 10)\n    sum += d\n    while (sum > 9) {\n      sum = sum - 10\n    }\n  }\n  while (sum > 9) {\n    sum = sum - 10\n  }\n  return sum\n}\n\nconst skjkasdkd8 = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  let sum = 0\n  for (let i = 0; i < max; i++) {\n    let d = parseInt(lst[i], 10)\n    sum += d\n    while (sum > 9) {\n      sum = sum - 10\n    }\n  }\n  while (sum > 9) {\n    sum = sum - 10\n  }\n  return sum\n}\n\nconst skjkasdkd9 = (lst) => {\n  let max = 1\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  let hasUpper = false\n  let hasLower = false\n  for (let key in dict) {\n    if (key.toUpperCase() === key) {\n      hasUpper = true\n    }\n    if (key.toLowerCase() === key) {\n      hasLower = true\n    }\n  }\n  if (hasUpper && hasLower) {\n    return true\n  }\n  return false\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case and the values are all numbers. Else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictNumbers({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\"}) should return true.\n  checkDictNumbers({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"a\":\"1\"}) should return false.\n  checkDictNumbers({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"a\":\"1\", \"b\":\"2\"}) should return false.\n  checkDictNumbers({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\"}) should return false.\n  checkDictNumbers({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\", \"a\":\"1\"}) should return false.\n  checkDictNumbers({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\", \"a\":\"1\", \"b\":\"2\"}) should return false.\n  */\nconst checkDictNumbers = (dict) => {\n  for (let key in dict) {\n    let val = dict[key]\n    if (typeof val!== \"number\") {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case and the values are all numbers or all strings. Else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictAllCases({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\"}) should return true.\n  checkDictAllCases({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"a\":\"1\"}) should return true.\n  checkDictAllCases({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"a\":\"1\", \"b\":\"2\"}) should return true.\n  checkDictAllCases({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\"}) should return false.\n  checkDictAllCases({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\", \"a\":\"1\"}) should return false.\n  checkDictAllCases({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\", \"a\":\"1\", \"b\":\"2\"}) should return false.\n  */\nconst checkDictAllCases = (dict) => {\n  let hasNumbers = checkDictNumbers(dict)\n  let hasUpper = false\n  let hasLower = false\n  for (let key in dict) {\n    if (key.toUpperCase() === key) {\n      hasUpper = true\n    }\n    if (key.toLowerCase() === key) {\n      hasLower = true\n    }\n  }\n  if (hasNumbers && hasUpper && hasLower) {\n    return true\n  }\n  return false\n}\n\nconst checkDict = (dict) => {\n  let isAllCases = checkDictAllCases(dict)\n  let isNumbers = checkDictNumbers(dict)\n  if (isAllCases && isNumbers) {\n    return true\n  }\n  return false\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case and all values are strings in lower case. Else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictAllLower({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\"}) should return true.\n  checkDictAllLower({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"a\":\"1\"}) should return false.\n  checkDictAllLower({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"a\":\"1\", \"b\":\"2\"}) should return false.\n  checkDictAllLower({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\"}) should return false.\n  checkDictAllLower({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\", \"a\":\"1\"}) should return false.\n  checkDictAllLower({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"d\":\"4\", \"a\":\"1\", \"b\":\"2\"}) should return false.\n  */\nconst checkDictAllLower = (dict) => {\n  let isAllLower = true\n  for (let key in dict) {\n    if (key.toUpperCase()!== key) {\n      isAllLower = false\n    }\n  }\n  if (isAllLower) {\n    return true\n  }\n  return false\n}\n\nconst checkDictSorted = (dict) => {\n  let sorted = false\n  let sortedKeys = []\n  for (let key in dict) {\n    sortedKeys.push(key)\n  }\n  sortedKeys.sort()\n  for (let key of sortedKeys) {\n    if (key!== sortedKeys[sortedKeys.length - 1"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    const primes = []\n    const isPrime = (n) => {\n        let i = 2\n        while (i <= n) {\n            if (n % i === 0) {\n                return false\n            }\n            i += 1\n        }\n        return true\n    }\n\n    const first = (i) => {\n        if (isPrime(i)) {\n            primes.push(i)\n        }\n    }\n\n    for (let i = 2; i < n; i += 1) {\n        first(i)\n    }\n    return primes\n}\n\nconsole.log(countUpTo(10))<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  const result = a % 10 * b % 10;\n  const r = multiply(a / 10, b / 10);\n\n  return result + r;\n};\n\nconst multiplyResult = multiply(2, 3);\n\nconsole.log(multiplyResult);<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const len = s.length\n  let count = 0\n  \n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  \n  return count\n}\n\nmodule.exports = countUpper\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const regex = /^(\\d+)(\\.\\d+)?$/\n  let match = value.match(regex)\n  let num = parseInt(match[1])\n  let dec = match[2]? parseFloat(match[2]) : 0\n  let min = Math.min(num, num + 1)\n  let max = Math.max(num, num - 1)\n  if (dec) {\n    if (dec.toString().indexOf('.') === -1) {\n      return num\n    }\n    if (num % dec === 0) {\n      return num\n    }\n    if (min % dec === 0) {\n      return min\n    }\n    if (max % dec === 0) {\n      return max\n    }\n    return num\n  }\n  return num\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const firstLevel = Array.from(Array(n).keys())\n  return firstLevel.map((x, i) => {\n    const level = Array.from(Array(x).keys())\n    return level.map(() => x)\n  })\n}\n\nconsole.log(madeAPiles(3))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n    // Use RegExp to split the string into an array of words\n    const words = s.split(/[\\s,]+/);\n\n    // Return the array of words\n    return words;\n};\n\n/*\n  Given a string, return a string made of the first letter of each word in the\n  string.\n  \n  For example:\n  wordFirst(\"Hi, my name is John\") == \"H\"\n  wordFirst(\"One, two, three, four, five, six\") == \"O\"\n  */\nconst wordFirst = (s) => {\n    // Use RegExp to split the string into an array of words\n    const words = s.split(/[\\s,]+/);\n\n    // Return the array of words\n    return words.join('');\n};\n\n/*\n  Given a string, return the string with each letter capitalized.\n  \n  For example:\n  capitalized(\"Hi, my name is John\") == \"Hi, my name is John\"\n  capitalized(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst capitalized = (s) => {\n    // Use RegExp to split the string into an array of words\n    const words = s.split(/[\\s,]+/);\n\n    // Return the array of words\n    return words.join('').toUpperCase();\n};\n\n/*\n  Given a string, return a string made of the last letter of each word in the\n  string.\n  \n  For example:\n  last(\"Hi, my name is John\") == \"N\"\n  last(\"One, two, three, four, five, six\") == \"e\"\n  */\nconst last = (s) => {\n    // Use RegExp to split the string into an array of words\n    const words = s.split(/[\\s,]+/);\n\n    // Return the array of words\n    return words.reverse().join('');\n};\n\n/*\n  Given a string, return a string made of the first and last letters of each\n  word in the string.\n  \n  For example:\n  firstLast(\"Hi, my name is John\") == \"H, J\"\n  firstLast(\"One, two, three, four, five, six\") == \"O, T\"\n  */\nconst firstLast = (s) => {\n    // Use RegExp to split the string into an array of words\n    const words = s.split(/[\\s,]+/);\n\n    // Return the array of words\n    return words.join('').substring(0, 1).toUpperCase() + ',' + words.reverse().join('').substring(1);\n};\n\nmodule.exports = {\n    wordString,\n    wordFirst,\n    capitalized,\n    last,\n    firstLast\n};<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n\n  const n = y - x + 1;\n  const i = Math.floor(n / 2);\n  return n - i;\n}\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\nconsole.log(chooseNum(14, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  let nf = (n | 0).toString(2);\n  let mf = (m | 0).toString(2);\n  if (nf.length > mf.length) {\n    return -1;\n  }\n  let avg = parseInt((nf + mf) / 2, 2);\n  return avg;\n}\n\n/*\n  Given two positive integers n and m, return the sum of the\n  distances between the even and odd numbers that are strictly\n  between n and m, inclusive.\n  Example:\n  distancesBetweenEvenOdd(1, 5) => 2\n  distancesBetweenEvenOdd(7, 5) => 5\n  distancesBetweenEvenOdd(10, 20) => 14\n  distancesBetweenEvenOdd(20, 33) => 9\n  */\nconst distancesBetweenEvenOdd = (n, m) => {\n  let e = (n + m) / 2;\n  let d = (n - e) % 2;\n  return (e - n) + d;\n}\n\n/*\n  Given a positive integer n, return the sum of the\n  numbers that are both even and odd.\n  Example:\n  oddEvenSum(1) => 2\n  oddEvenSum(7) => 12\n  oddEvenSum(10) => 22\n  */\nconst oddEvenSum = n => {\n  return (n % 2 === 0)? n : n + 1;\n}\n\n/*\n  Given a positive integer n, return the sum of the\n  numbers that are both prime and odd.\n  Example:\n  oddPrimeSum(1) => 1\n  oddPrimeSum(7) => 17\n  oddPrimeSum(10) => 23\n  */\nconst oddPrimeSum = n => {\n  let num = n;\n  while (num > 1) {\n    if (num % 2!== 0) {\n      return num;\n    }\n    num--;\n  }\n  return 0;\n}\n\n/*\n  Given a positive integer n, return the sum of the\n  numbers that are both prime and even.\n  Example:\n  oddPrimeSum(1) => 0\n  oddPrimeSum(7) => 14\n  oddPrimeSum(10) => 22\n  */\nconst oddPrimeSumEven = n => {\n  let num = n;\n  while (num > 1) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num--;\n  }\n  return 0;\n}\n\n/*\n  Given two positive integers n and m, return the sum of the\n  numbers that are both even and odd.\n  Example:\n  oddEvenSum(1, 5) => 2\n  oddEvenSum(7, 5) => 12\n  oddEvenSum(10, 20) => 22\n  */\nconst oddEvenSum2 = (n, m) => {\n  let e = (n + m) / 2;\n  let d = (n - e) % 2;\n  return e + d;\n}\n\n/*\n  Given two positive integers n and m, return the sum of the\n  numbers that are both prime and even.\n  Example:\n  oddEvenSum(1, 5) => 1\n  oddEvenSum(7, 5) => 17\n  oddEvenSum(10, 20) => 23\n  */\nconst oddEvenSum3 = (n, m) => {\n  let num = (n + m) / 2;\n  let d = (n - num) % 2;\n  return num + d;\n}\n\n/*\n  Given two positive integers n and m, return the sum of the\n  numbers that are both prime and even.\n  Example:\n  oddEvenSum(1, 5) => 0\n  oddEvenSum(7, 5) => 14\n  oddEvenSum(10, 20) => 22\n  */\nconst oddEvenSum4 = (n, m) => {\n  let num = (n + m) / 2;\n  let d = (n - num) % 2;\n  return num + d;\n}\n\n/*\n  Given two positive integers n and m, return the sum of the\n  numbers that are both prime and even.\n  Example:\n  oddEvenSum(1, 5) => 0\n  oddEvenSum(7, 5) => 14\n  oddEvenSum(10, 20) => 22\n  */\nconst oddEvenSum5 = (n, m) => {\n  let num = (n + m) / 2;\n  let d = (n - num) % 2;\n  return num + d;\n}\n\n/*\n  Given two positive integers n and m, return the sum of the\n  numbers that are both prime and even.\n  Example:\n  oddEvenSum(1, 5) => 0\n  oddEvenSum(7, 5) => 14\n  oddEvenSum(10, 20) => 22\n  */\nconst oddEvenSum6 = (n, m) => {\n  let num = (n + m) / 2;\n  let d = (n - num) % 2;\n  return num + d;\n}\n\nconst sum = (n, m) => {\n  return (n + m) / 2;\n}\n\n/*\n  Given two positive integers n and m, return the sum of the\n  numbers that are both prime and even.\n  Example:\n  oddEvenSum(1, 5) => 0\n  oddEvenSum(7, 5) => 14\n  oddEvenSum(10, 20) => 22\n  */\nconst sum2 = (n, m) => {\n  return (n + m) / 2;\n}\n\n/*\n  Given two positive integers n and m, return the sum of the\n  numbers that are both prime and even.\n  Example:\n  oddEvenSum(1, 5) => 0\n  oddEvenSum(7, 5) => 14\n  oddEvenSum(10, 20) => 22\n  */\nconst sum3 = (n, m)"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  let result = [];\n  let temp = x;\n  while (temp > 0) {\n    let digit = temp % 10;\n    if (digit % 2 === 0) {\n      result.push(temp);\n    }\n    temp = temp / 10;\n  }\n  result.sort();\n  return result;\n};\n\n//export default uniqueDigit;<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const reverse = (arr) => arr.reverse()\n  const isEven = (arr) => arr.every((val) => val % 2 === 0)\n  const isOdd = (arr) => arr.every((val) => val % 2!== 0)\n  const even = (arr) => arr.filter((val) => val % 2 === 0)\n  const odd = (arr) => arr.filter((val) => val % 2!== 0)\n\n  return (arr)\n   .sort((a, b) => a - b)\n   .filter(isEven)\n   .concat(reverse(odd))\n   .map((val) => `${val}`)\n   .concat(reverse(even))\n   .join('')\n}\n\nconst byLengthDesc = (arr) => {\n  const reverse = (arr) => arr.reverse()\n  const isEven = (arr) => arr.every((val) => val % 2 === 0)\n  const isOdd = (arr) => arr.every((val) => val % 2!== 0)\n  const even = (arr) => arr.filter((val) => val % 2 === 0)\n  const odd = (arr) => arr.filter((val) => val % 2!== 0)\n\n  return (arr)\n   .sort((a, b) => b - a)\n   .filter(isEven)\n   .concat(reverse(odd))\n   .map((val) => `${val}`)\n   .concat(reverse(even))\n   .join('')\n}\n\nconst byLengthDesc2 = (arr) => {\n  const reverse = (arr) => arr.reverse()\n  const isEven = (arr) => arr.every((val) => val % 2 === 0)\n  const isOdd = (arr) => arr.every((val) => val % 2!== 0)\n  const even = (arr) => arr.filter((val) => val % 2 === 0)\n  const odd = (arr) => arr.filter((val) => val % 2!== 0)\n\n  return (arr)\n   .sort((a, b) => b - a)\n   .filter(isEven)\n   .concat(reverse(odd))\n   .map((val) => `${val}`)\n   .concat(reverse(even))\n   .join('')\n}\n\nconst byLengthDesc3 = (arr) => {\n  const reverse = (arr) => arr.reverse()\n  const isEven = (arr) => arr.every((val) => val % 2 === 0)\n  const isOdd = (arr) => arr.every((val) => val % 2!== 0)\n  const even = (arr) => arr.filter((val) => val % 2 === 0)\n  const odd = (arr) => arr.filter((val) => val % 2!== 0)\n\n  return (arr)\n   .sort((a, b) => a - b)\n   .filter(isEven)\n   .concat(reverse(odd))\n   .map((val) => `${val}`)\n   .concat(reverse(even))\n   .join('')\n}\n\nconst byLengthDesc4 = (arr) => {\n  const reverse = (arr) => arr.reverse()\n  const isEven = (arr) => arr.every((val) => val % 2 === 0)\n  const isOdd = (arr) => arr.every((val) => val % 2!== 0)\n  const even = (arr) => arr.filter((val) => val % 2 === 0)\n  const odd = (arr) => arr.filter((val) => val % 2!== 0)\n\n  return (arr)\n   .sort((a, b) => b - a)\n   .filter(isEven)\n   .concat(reverse(odd))\n   .map((val) => `${val}`)\n   .concat(reverse(even))\n   .join('')\n}\n\nconst byLengthDesc5 = (arr) => {\n  const reverse = (arr) => arr.reverse()\n  const isEven = (arr) => arr.every((val) => val % 2 === 0)\n  const isOdd = (arr) => arr.every((val) => val % 2!== 0)\n  const even = (arr) => arr.filter((val) => val % 2 === 0)\n  const odd = (arr) => arr.filter((val) => val % 2!== 0)\n\n  return (arr)\n   .sort((a, b) => a - b)\n   .filter(isEven)\n   .concat(reverse(odd))\n   .map((val) => `${val}`)\n   .concat(reverse(even))\n   .join('')\n}\n\nconst main = () => {\n  const arr = [2, 1, 1, 4, 5, 8, 2, 3]\n  const byLengthDesc = (arr) => byLengthDesc(arr)\n  const byLengthDesc2 = (arr) => byLengthDesc2(arr)\n  const byLengthDesc3 = (arr) => byLengthDesc3(arr)\n  const byLengthDesc4 = (arr) => byLengthDesc4(arr)\n  const byLengthDesc5 = (arr) => byLengthDesc5(arr)\n  console.log(byLengthDesc(arr))\n  console.log(byLengthDesc2"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let factorial = 1;\n  for (let i = 2; i <= n; i++) {\n    factorial *= i;\n  }\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += factorial;\n  }\n  return [factorial, sum];\n};\n\nf(5)\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let odd = 0\n  let even = 0\n  let half = Math.floor(n / 2)\n  for (let i = 1; i < half + 1; i++) {\n    let j = n - i\n    let p = i * j\n    if (p % 2 === 0) {\n      even += 1\n    } else {\n      odd += 1\n    }\n  }\n  return [odd, even]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const res = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      let num = arr[i]\n      while (num) {\n        res += num & 1\n        num = num >> 1\n      }\n    }\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  if (arr.length === 0) return true;\n  let arrLen = arr.length;\n  let index = arr[arrLen - 1];\n  let i = arrLen - 1;\n  while (i >= 0) {\n    if (arr[i] > index) {\n      index = arr[i];\n      arr[i] = arr[i + 1];\n      arr[i + 1] = index;\n    }\n    i--;\n  }\n  return index < arr[0];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  const lst1Index = lst1.findIndex((elm) => elm % 2 === 0);\n  const lst2Index = lst2.findIndex((elm) => elm % 2 === 0);\n\n  if (lst1Index === -1 || lst2Index === -1) {\n    return false;\n  }\n\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]!== lst2[i] && lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexports.exchanges = exchanges;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let ret = {};\n  for(let i = 0; i < test.length; i++){\n    let letter = test[i];\n    let current = ret[letter] || 1;\n    ret[letter] = current + 1;\n  }\n  return ret;\n}\n\nexport default histograms;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  const len = s.length\n  const n = c.length\n  const result = []\n  let i = 0\n  let j = 0\n  let cur = 0\n  while (i < len) {\n    while (j < n && s[i] === c[j]) {\n      j++\n    }\n    if (j < n) {\n      result.push(s.substring(i, i + j))\n      i += j\n    } else {\n      result.push(s.substring(i))\n      i = len\n    }\n  }\n  return (result.join(''), n === 0)\n}\n\nmodule.exports = reversesDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  const count = (str) => {\n    let odd = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i].charCodeAt(0) % 2 === 1) {\n        odd++;\n      }\n    }\n    return `the number of odd elements ${odd}n the str${odd}ng ${str} of the ${odd}nput.`;\n  };\n  return lst.map(count);\n};\n\nmodule.exports = odderCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  const findMinSum = (start, end) => {\n    if (start === end) {\n      return nums[start];\n    }\n    const minSum = Math.min(nums[start], nums[end]);\n    return findMinSum(start + 1, end) + minSum;\n  };\n  return findMinSum(0, nums.length - 1);\n};\n\nconsole.log(minSubsArraySums([-1, -2, -3]));\nconsole.log(minSubsArraySums([2, 3, 4, 1, 2, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let curr_row = 0;\n  let curr_col = 0;\n  let count = 0;\n\n  while (curr_col < cols) {\n    while (curr_row < rows && grid[curr_row][curr_col] === 1) {\n      if (grid[curr_row][curr_col] === 0) {\n        count += fill(grid, curr_row, curr_col, capacity);\n      }\n      curr_row++;\n    }\n    curr_col++;\n  }\n  return count;\n};\n\nconst fill = (grid, row, col, capacity) => {\n  let count = 0;\n\n  while (grid[row][col]!== 0) {\n    grid[row][col]--;\n    count++;\n    if (count >= capacity) {\n      break;\n    }\n  }\n\n  return count;\n};\n\n/*\n  You are given a list of well coordinates.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          wells : [[1,2], [2,3], [3,4]]\n          bucket_capacity : 1\n      Output: 3\n\n  Example 2:\n      Input: \n          wells : [[1,2,3], [2,3,4], [3,4,5]]\n          bucket_capacity : 2\n      Output: 3\n\n  Example 3:\n      Input: \n          wells : [[1,2,3], [2,3,4]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * 1 <= wells.length <= 10^2\n      * wells[i].length == 2\n      * 1 <= wells[i][0] <= 10^2\n      * wells[i][1] <= 10^2\n      * wells[i][0]!= wells[i][1]\n      * 1 <= bucket_capacity <= 10\n  */\nconst well_empty = (wells, bucket_capacity) => {\n  const rows = wells.length;\n  const cols = wells[0].length;\n  let curr_row = 0;\n  let curr_col = 0;\n  let count = 0;\n\n  while (curr_col < cols) {\n    while (curr_row < rows && wells[curr_row][curr_col] === wells[curr_row][curr_col + 1]) {\n      if (wells[curr_row][curr_col] === 0) {\n        count += fill(wells, curr_row, curr_col, bucket_capacity);\n      }\n      curr_row++;\n    }\n    curr_col++;\n  }\n\n  return count;\n};\n\n/*\n  You are given two lists of wells.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          wells : [[1,2], [2,3], [3,4]]\n          bucket_capacity : 1\n          wells_2 : [[1,2], [2,3], [3,4], [4,5]]\n          bucket_capacity_2 : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          wells : [[1,2,3], [2,3,4], [3,4,5]]\n          bucket_capacity : 2\n          wells_2 : [[1,2,3], [2,3,4], [3,4,5], [4,5,6]]\n          bucket_capacity_2 : 2\n      Output: 3\n  \n  Example 3:\n      Input: \n          wells : [[1,2,3], [2,3,4]]\n          bucket_capacity : 5\n          wells_2 : [[1,2,3], [2,3,4], [3,4,5]]\n          bucket_capacity_2 : 5\n      Output: 0\n\n  Constraints:\n      * 1 <= wells.length <= 10^2\n      * wells[i].length == 2\n      * 1 <= wells[i][0] <= 10^2\n      * wells[i][0]!= wells[i][1]\n      * 1 <= wells[i][1] <= 10^2\n      * 1 <= bucket_capacity <= 10\n      * 1 <= wells_2.length <= 10^2\n      * wells_2[i].length == 2\n      * 1 <= wells_2[i][0] <= 10^2\n      * wells_2[i][0]!= wells_2[i][1]\n      * 1 <= wells_2[i][1] <= 10^2\n"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  const array = arr.slice()\n  const len = array.length\n  let sorted = [...array]\n  sorted = sorted.sort((a, b) => {\n    const a_ = Math.log(a)\n    const b_ = Math.log(b)\n    if (a_ > b_) return 1\n    if (a_ < b_) return -1\n    return 0\n  })\n  return sorted\n}\n\nconsole.log(sortsArray([1, 5, 2, 3, 4]))\nconsole.log(sortsArray([-2, -3, -4, -5, -6]))\nconsole.log(sortsArray([1, 0, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  const result = [];\n  const chars = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let word = '';\n  while (i < s.length) {\n    word = '';\n    let j = 0;\n    while (j < n) {\n      word += s[i];\n      j++;\n    }\n    if (chars.indexOf(word.slice(-1))!== -1) {\n      result.push(word);\n    }\n    i++;\n  }\n  return result;\n}\n\n/*\nGiven a list of words and a target word, return the shortest word in the list that contains all of the letters in the target word.\nIf there is no word in the list that contains all of the letters in the target word, return null.\nExamples:\nselectWord([ \"a\", \"an\", \"the\", \"at\" ], \"the\") ==> \"the\"\nselectWord([ \"a\", \"an\", \"the\", \"at\" ], \"t\") ==> \"at\"\nselectWord([ \"a\", \"an\", \"the\", \"at\" ], \"s\") ==> null\nselectWord([ \"a\", \"an\", \"the\", \"at\" ], \"f\") ==> null\n*/\nconst selectWord = (words, word) => {\n  let result = null;\n  let current = words.pop();\n  while (current!== null) {\n    if (current.indexOf(word)!== -1) {\n      result = current;\n    }\n    current = words.pop();\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  const result = [];\n  const letter = word.charAt(word.length - 1);\n  const lastIndex = word.length - 1;\n  const count = 0;\n  for (let i = lastIndex; i >= 0; i--) {\n    const current = word.charAt(i);\n    if (isVowel(current) && isVowel(letter)) {\n      if (i < lastIndex) {\n        if (isVowel(word.charAt(i + 1))) {\n          count++;\n        } else {\n          result.push(word.charAt(i));\n          break;\n        }\n      }\n      if (isVowel(word.charAt(i - 1))) {\n        count++;\n      } else {\n        result.push(word.charAt(i));\n        break;\n      }\n    } else if (isVowel(current) && count === 0) {\n      result.push(word.charAt(i));\n    } else if (isVowel(current) && count > 0) {\n      break;\n    }\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the count of vowels in it.\n  \n  Vowels in the beginning and ending doesn't count.\n  \n  Example:\n  countVowels(\"Aaa\") ==> 3\n  countVowels(\"yogurt\") ==> 2\n  countVowels(\"ab\") ==> 0\n  countVowels(\"a\") ==> 1\n  countVowels(\"z\") ==> 0\n  */\nconst countVowels = (word) => {\n  const count = 0;\n  for (let i = 0; i < word.length; i++) {\n    if (isVowel(word.charAt(i))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst isVowel = (letter) => {\n  return (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u');\n};\n\nexport default gottenCloserVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [lst.pop()]\n  while (stack.length > 0) {\n    if (stack[stack.length - 1] === '(') {\n      stack.push(lst.pop())\n    } else {\n      if (stack[stack.length - 1] === ')') {\n        stack.pop()\n      } else {\n        return 'No'\n      }\n    }\n  }\n  return 'Yes'\n}\n\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n//"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  let arrLength = arr.length\n  if (arrLength <= k) {\n    return arr\n  }\n\n  let result = []\n  let left = 0\n  let right = arrLength - 1\n  let max = arr[0]\n\n  while (right - left > k) {\n    let mid = Math.floor((right + left) / 2)\n    if (arr[mid] > max) {\n      right = mid\n    } else {\n      left = mid + 1\n    }\n  }\n\n  for (let i = left; i <= right; i++) {\n    result.push(arr[i])\n  }\n  return result\n}\n\nexport { maximums }\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n    return lst.reduce((acc, n) => {\n        if (n % 2 === 0) {\n            acc += n;\n        }\n        return acc;\n    }, 0);\n}\n\nmodule.exports = solutions;<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const max = arr[k - 1];\n  const n = arr.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += arr[i];\n    if (sum > max) {\n      break;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let result = []\n  let cur = n\n  while (cur > 1) {\n    if (cur % 2 === 0) {\n      cur = cur / 2\n    } else {\n      cur = 3 * cur + 1\n    }\n    result.push(cur)\n  }\n  return result.reverse()\n}\n\n/*\n  Given a positive integer n, return a list of strings that represent the Collatz sequence.\n  \n  For example:\n  gotCollatz(5) returns [\"5\", \"16\", \"8\", \"4\", \"2\", \"1\"]\n  */\nconst gotCollatz = (n) => {\n  let result = []\n  let cur = n\n  while (cur > 1) {\n    if (cur % 2 === 0) {\n      cur = cur / 2\n    } else {\n      cur = 3 * cur + 1\n    }\n    result.push(cur)\n  }\n  return result\n}\n\nmodule.exports = {\n  gotCollatz,\n  gottenOdderCollatz\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  if (!date) return false;\n  let day = parseInt(date.substring(0,2),10);\n  let month = parseInt(date.substring(3,5),10);\n  let year = parseInt(date.substring(6,10),10);\n  if (day < 1 || day > 31 || (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && day < 1 || (month === 4 || month === 6 || month === 9 || month === 11) && day < 1 || month < 1 || month > 12) return false;\n  if (month === 2) {\n    if (day < 1 || day > 29) return false;\n  } else if (day < 1 || day > 30) return false;\n  return true;\n}\n\n/*\n  Given a date in the form of a string, return the next date in the form of a string.\n  Example:\n  date = '03-11-2000'\n  return '04-11-2000'\n  \n  date = '03-11-2000'\n  return '03-12-2000'\n  \n  date = '03-11-2000'\n  return '04-01-2001'\n  \n  date = '03-11-2000'\n  return '04-08-2001'\n  \n  date = '03-11-2000'\n  return '03-01-2001'\n  \n  date = '03-11-2000'\n  return '04-11-2001'\n  \n  date = '03-11-2000'\n  return '05-11-2000'\n  \n  date = '03-11-2000'\n  return '06-11-2000'\n  \n  date = '03-11-2000'\n  return '07-11-2000'\n  \n  date = '03-11-2000'\n  return '08-11-2000'\n  \n  date = '03-11-2000'\n  return '09-11-2000'\n  \n  date = '03-11-2000'\n  return '10-11-2000'\n  \n  date = '03-11-2000'\n  return '11-11-2000'\n  \n  date = '03-11-2000'\n  return '12-11-2000'\n  \n  date = '03-11-2000'\n  return '01-12-2000'\n  \n  date = '03-11-2000'\n  return '02-12-2000'\n  \n  date = '03-11-2000'\n  return '03-12-2000'\n  \n  date = '03-11-2000'\n  return '04-12-2000'\n  \n  date = '03-11-2000'\n  return '05-12-2000'\n  \n  date = '03-11-2000'\n  return '06-12-2000'\n  \n  date = '03-11-2000'\n  return '07-12-2000'\n  \n  date = '03-11-2000'\n  return '08-12-2000'\n  \n  date = '03-11-2000'\n  return '09-12-2000'\n  \n  date = '03-11-2000'\n  return '10-12-2000'\n  \n  date = '03-11-2000'\n  return '11-12-2000'\n  \n  date = '03-11-2000'\n  return '12-12-2000'\n  \n  date = '03-11-2000'\n  return '01-01-2001'\n  \n  date = '03-11-2000'\n  return '02-01-2001'\n  \n  date = '03-11-2000'\n  return '03-01-2001'\n  \n  date = '03-11-2000'\n  return '04-01-2001'\n  \n  date = '03-11-2000'\n  return '05-01-2001'\n  \n  date = '03-11-2000'\n  return '06-01-2001'\n  \n  date = '03-11-2000'\n  return '07-01-2001'\n  \n  date = '03-11-2000'\n  return '08-01-2001'\n  \n  date = '03-11-2000'\n  return '09-01-2001'\n  \n  date = '03-11-2000'\n  return '10-01-2001'\n  \n  date = '03-11-2000'\n  return '11-01-2001'\n  \n  date = '03-11-2000'\n  return '12-01-2001'\n  \n  date = '03-11-2000'\n  return '01-02-2001'\n  \n  date = '03-11-2000'\n  return '02-02-2001'\n  \n  date = '03-11-2000'\n  return '03-02-2001'\n  \n  date = '03-11-2000'\n  return '04-02-2001'\n  \n  date = '03-11-2000'\n  return '05-02-2001'\n  \n  date = '03-11-2000'\n  return '06-02-2001'\n  \n  date = '03-11-2000'\n  return '07-02-2001'\n  \n  date = '03-11-2000'\n  return '08-02-"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const word_list = txt.split('')\n  const num_chars = txt.length\n  const result = []\n  let word = ''\n  let count = 0\n  let i = 0\n  while (i < num_chars) {\n    if (word_list[i] ==='') {\n      result.push(word)\n      word = ''\n    } else {\n      word += word_list[i]\n      count++\n    }\n    i++\n  }\n  if (word!== '') result.push(word)\n  return result\n}\n\n// splitWord('abcdef') -> ['abc', 'def']\n// splitWord('abcdefg') -> ['abc', 'def', 'g']\n// splitWord('abcdefghijkl') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l']\n// splitWord('abcdefghijklmno') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']\n// splitWord('abcdefghijklmnopqrst') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s']\n// splitWord('abcdefghijklmnopqrstu') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n// splitWord('abcdefghijklmnopqrstuvwxyz') -> ['abc', 'def', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const len = lst.length;\n  if (len === 0) {\n    return true;\n  }\n  const prev = lst[0];\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nexport default isSort;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  if (start1 < start2) {\n    const tmp = start1;\n    start1 = start2;\n    start2 = tmp;\n  }\n\n  if (end1 < end2) {\n    const tmp = end1;\n    end1 = end2;\n    end2 = tmp;\n  }\n\n  if (start1 > end2 || end1 < start2) {\n    return false;\n  }\n\n  if (start1 === end1 && start2 === end2) {\n    return true;\n  }\n\n  return (end2 - start1) === (end1 - start2) &&\n    (end2 - start1) % 1 === 0;\n};\n\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  return arr.reduce((acc, val) => {\n    return acc + (Math.abs(val) * val * Math.sign(val));\n  }, 0);\n}\n\n/*\n  This function returns an array of values that can be used as\n  a base for binary search.\n\n  Example:\n  >>> binarySearch([1, 2, 3, 4, 5])\n  [1, 2, 3, 4]\n  >>> binarySearch([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4]\n  >>> binarySearch([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6]\n  >>> binarySearch([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst binarySearch = (arr) => {\n  let lo = 1, hi = arr.length - 1,\n      mid = arr.length / 2,\n      val = arr[mid];\n\n  while (lo < hi) {\n    if (arr[lo] <= val && val <= arr[hi]) {\n      return [lo, hi];\n    } else if (arr[lo] > val) {\n      hi = mid - 1;\n    } else if (arr[hi] < val) {\n      lo = mid + 1;\n    }\n    mid = Math.floor((lo + hi) / 2);\n  }\n\n  return [lo, hi];\n}\n\nmodule.exports = {\n  binarySearch,\n  prodsSign\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const cols_k = cols - k + 1\n  const num = cols_k * rows\n  const memo = {}\n  const result = []\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols_k; col++) {\n      if (!memo[col]) {\n        memo[col] = {\n          cost: Infinity,\n          path: [],\n          value: grid[row][col]\n        }\n      }\n      const cost = memo[col].value + 1\n      const value = [col, row]\n      let curr = value\n      while (curr) {\n        memo[curr[0]][curr[1]] = {\n          cost: cost,\n          path: memo[curr[0]].path.concat(curr)\n        }\n        curr = memo[curr[0]][curr[1]].path.slice(0, -1)\n      }\n      memo[col].path.push(value)\n      if (cost < memo[col].cost) {\n        memo[col].cost = cost\n        memo[col].path = memo[col].path.slice(0, -1)\n      }\n    }\n  }\n  return memo[num].path\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconsole.log(minPaths(grid, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    const array = [];\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        array.push(tri(i - 1) + tri(i - 2) + tri(i + 1));\n    }\n    return array;\n}\n\ntri(4);\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      res *= i;\n    }\n  }\n  if (n % 2 === 0) {\n    return 0;\n  } else {\n    return res;\n  }\n}\n\n// console.log(digit(1));\n// console.log(digit(4));\n// console.log(digit(235));\n\n/*\nGiven a non-negative integer n, return the number of digit 1's in the non-zero part of n.\n\nNote: The answer may be very large, so return the mod 10^9 + 7\n\n*/\nconst count = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n = n / 10;\n  }\n  return count;\n}\n\n// console.log(count(1));\n// console.log(count(19));\n// console.log(count(10));\n// console.log(count(9));\n// console.log(count(100000000000));\n// console.log(count(100000000001));\n\n/*\nGiven a non-negative integer n, return the number of digit k in the non-zero part of n.\n\nNote: The answer may be very large, so return the mod 10^9 + 7\n\n*/\nconst countDigit = (n, k) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % k === 0) {\n      count++;\n    }\n    n = n / k;\n  }\n  return count;\n}\n\n// console.log(countDigit(1, 3));\n// console.log(countDigit(9, 2));\n// console.log(countDigit(9, 3));\n// console.log(countDigit(19, 2));\n// console.log(countDigit(19, 3));\n// console.log(countDigit(9, 1));\n// console.log(countDigit(9, 2));\n// console.log(countDigit(19, 1));\n// console.log(countDigit(19, 1));\n// console.log(countDigit(19, 2));\n// console.log(countDigit(19, 3));\n// console.log(countDigit(19, 1));\n// console.log(countDigit(19, 2));\n// console.log(countDigit(19, 3));\n// console.log(countDigit(19, 4));\n// console.log(countDigit(19, 5));\n// console.log(countDigit(19, 6));\n// console.log(countDigit(19, 7));\n// console.log(countDigit(19, 8));\n// console.log(countDigit(19, 9));\n// console.log(countDigit(19, 10));\n// console.log(countDigit(19, 11));\n// console.log(countDigit(19, 12));\n// console.log(countDigit(19, 13));\n// console.log(countDigit(19, 14));\n// console.log(countDigit(19, 15));\n// console.log(countDigit(19, 16));\n// console.log(countDigit(19, 17));\n// console.log(countDigit(19, 18));\n// console.log(countDigit(19, 19));\n// console.log(countDigit(19, 20));\n// console.log(countDigit(19, 21));\n// console.log(countDigit(19, 22));\n// console.log(countDigit(19, 23));\n// console.log(countDigit(19, 24));\n// console.log(countDigit(19, 25));\n// console.log(countDigit(19, 26));\n// console.log(countDigit(19, 27));\n// console.log(countDigit(19, 28));\n// console.log(countDigit(19, 29));\n// console.log(countDigit(19, 30));\n// console.log(countDigit(19, 31));\n// console.log(countDigit(19, 32));\n// console.log(countDigit(19, 33));\n// console.log(countDigit(19, 34));\n// console.log(countDigit(19, 35));\n// console.log(countDigit(19, 36));\n// console.log(countDigit(19, 37));\n// console.log(countDigit(19, 38));\n// console.log(countDigit(19, 39));\n// console.log(countDigit(19, 40));\n// console.log(countDigit(19, 41));\n// console.log(countDigit(19, 42));\n// console.log(countDigit(19, 43));\n// console.log(countDigit(19, 44));\n// console.log(countDigit(19, 45));\n// console.log(countDigit(19, 46));\n// console.log(countDigit(19, 47));\n// console.log(countDigit(19, 48));\n// console.log(countDigit(19, 49));\n// console.log(countDigit(19, 50));\n// console.log(countDigit(19, 51));\n// console.log(countDigit(19, 52));\n// console.log(countDigit(19, 53));\n// console.log(countDigit(19, 54));\n// console.log(countDigit(19, 55));\n// console.log(countDigit(19, 56));\n// console.log(countDigit(19, 57));\n// console.log(countDigit(19, 58));\n// console.log(countDigit(19, 59));\n// console.log(countDigit(19, 60));\n// console.log(countDigit(19, 61));\n// console.log(countDigit(19, 62));\n// console.log(countDigit(19, 63));\n// console.log(countDigit(19, 64));\n// console.log(countDigit(19, 65));\n//"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  let count = 0;\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']') {\n      if (string[i] === '[') stack.push(string[i]);\n      else if (string[i] === ']' && stack.length) {\n        if (stack.pop() === '[' || stack.pop() === ']') {\n          count++;\n        }\n      }\n    }\n  }\n  return count > 0;\n};\n\nconst isNest2 = (string) => {\n  let stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']' || string[i] === '{' || string[i] === '}') {\n      if (stack.length === 0) {\n        stack.push(string[i]);\n      } else {\n        if (stack[stack.length - 1] === string[i]) {\n          stack.pop();\n          count++;\n        } else {\n          stack.push(string[i]);\n        }\n      }\n    }\n  }\n  return count > 0;\n};\n\nconst isNest3 = (string) => {\n  let stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']' || string[i] === '{' || string[i] === '}') {\n      if (stack.length === 0) {\n        stack.push(string[i]);\n      } else {\n        if (stack[stack.length - 1] === string[i]) {\n          stack.pop();\n          count++;\n        } else {\n          stack.push(string[i]);\n        }\n      }\n    }\n  }\n  return count > 0;\n};\n\nconst isNest4 = (string) => {\n  let stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']' || string[i] === '{' || string[i] === '}') {\n      if (stack.length === 0) {\n        stack.push(string[i]);\n      } else {\n        if (stack[stack.length - 1] === string[i]) {\n          stack.pop();\n          count++;\n        } else {\n          stack.push(string[i]);\n        }\n      }\n    }\n  }\n  return count > 0;\n};\n\nconst isNest5 = (string) => {\n  let stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']' || string[i] === '{' || string[i] === '}') {\n      if (stack.length === 0) {\n        stack.push(string[i]);\n      } else {\n        if (stack[stack.length - 1] === string[i]) {\n          stack.pop();\n          count++;\n        } else {\n          stack.push(string[i]);\n        }\n      }\n    }\n  }\n  return count > 0;\n};\n\nconst isNest6 = (string) => {\n  let stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']' || string[i] === '{' || string[i] === '}') {\n      if (stack.length === 0) {\n        stack.push(string[i]);\n      } else {\n        if (stack[stack.length - 1] === string[i]) {\n          stack.pop();\n          count++;\n        } else {\n          stack.push(string[i]);\n        }\n      }\n    }\n  }\n  return count > 0;\n};\n\nconst isNest7 = (string) => {\n  let stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']' || string[i] === '{' || string[i] === '}') {\n      if (stack.length === 0) {\n        stack.push(string[i]);\n      } else {\n        if (stack[stack.length - 1] === string[i]) {\n          stack.pop();\n          count++;\n        } else {\n          stack.push(string[i]);\n        }\n      }\n    }\n  }\n  return count > 0;\n};\n\nconst isNest8 = (string) => {\n  let stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']' || string[i] === '{' || string[i] === '}') {\n      if (stack.length === 0) {\n        stack.push(string[i]);\n      } else {\n        if (stack[stack.length - 1] === string[i]) {\n          stack.pop();\n          count++;\n        } else {\n          stack.push(string[i]);\n        }\n      }\n    }\n  }\n  return count > 0;\n};\n\nconst isNest9 = (string) => {\n  let stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n// console.log(sumsSquares([1,2,3]));\n// console.log(sumsSquares([1,4,9]));\n// console.log(sumsSquares([1,3,5,7]));\n// console.log(sumsSquares([1.4,4.2,0]));\n// console.log(sumsSquares([-2.4,1,1]));\n\n// const sumSquares = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     sum += lst[i] * lst[i];\n//   }\n//   return sum;\n// };\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const txt = txt.toLowerCase();\n  const lastChars = txt.slice(-1);\n  const isALetter = (lastChars.match(/[a-z]/));\n  if (isALetter) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurences = (txt, char) => {\n  let count = 0;\n  while ((txt.indexOf(char)!= -1)) {\n    count += 1;\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLength = (txt, char) => {\n  let count = 0;\n  while ((txt.length > 1) && (txt.indexOf(char)!= -1)) {\n    count += 1;\n    txt = txt.slice(1);\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLengthRange = (txt, char, minLength, maxLength) => {\n  let count = 0;\n  while ((txt.length > 1) && (txt.indexOf(char)!= -1)) {\n    count += 1;\n    txt = txt.slice(1);\n    if ((txt.length >= minLength) && (txt.length <= maxLength)) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLengthRange2 = (txt, char, minLength, maxLength) => {\n  let count = 0;\n  let length = 0;\n  while ((txt.length > 1) && (txt.indexOf(char)!= -1)) {\n    count += 1;\n    length = txt.length;\n    txt = txt.slice(1);\n    if ((length >= minLength) && (length <= maxLength)) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLengthRange3 = (txt, char, minLength, maxLength) => {\n  let count = 0;\n  let length = 0;\n  while ((txt.length > 1) && (txt.indexOf(char)!= -1)) {\n    count += 1;\n    length = txt.length;\n    txt = txt.slice(1);\n    if ((length >= minLength) && (length <= maxLength)) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLengthRange4 = (txt, char, minLength, maxLength) => {\n  let count = 0;\n  let length = 0;\n  while ((txt.length > 1) && (txt.indexOf(char)!= -1)) {\n    count += 1;\n    length = txt.length;\n    txt = txt.slice(1);\n    if ((length >= minLength) && (length <= maxLength)) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLengthRange5 = (txt, char, minLength, maxLength) => {\n  let count = 0;\n  let length = 0;\n  while ((txt.length > 1) && (txt.indexOf(char)!= -1)) {\n    count += 1;\n    length = txt.length;\n    txt = txt.slice(1);\n    if ((length >= minLength) && (length <= maxLength)) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLengthRange6 = (txt, char, minLength, maxLength) => {\n  let count = 0;\n  let length = 0;\n  while ((txt.length > 1) && (txt.indexOf(char)!= -1)) {\n    count += 1;\n    length = txt.length;\n    txt = txt.slice(1);\n    if ((length >= minLength) && (length <= maxLength)) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLengthRange7 = (txt, char, minLength, maxLength) => {\n  let count = 0;\n  let length = 0;\n  while ((txt.length > 1) && (txt.indexOf(char)!= -1)) {\n    count += 1;\n    length = txt.length;\n    txt = txt.slice(1);\n    if ((length >= minLength) && (length <= maxLength)) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Create a function that returns the number of occurences of a given character\n  in a string.\n  */\nconst countOccurencesByLengthRange8 = (txt, char, minLength, maxLength) => {\n  let count = 0;\n  let length = 0;\n  while ((txt.length > 1) && (txt"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  let currentIndex = 0;\n  let count = 0;\n  arr.forEach((el) => {\n    if (el <= arr[currentIndex]) {\n      if (el > arr[currentIndex]) {\n        count++;\n        currentIndex++;\n        maxIndex = currentIndex - 1;\n      }\n    } else {\n      if (el === arr[currentIndex]) {\n        count++;\n        currentIndex++;\n      }\n    }\n  });\n  return maxIndex;\n};\n\nexport default canArranging;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  const max = largestNumber(lst);\n  const min = smallestNumber(lst);\n  return [\n    max? (max, min) : null,\n    min? (max, min) : null\n  ];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative numbers, and 'b' is the smallest\n  of positive numbers in a list.\n  If there is no negative or positive numbers, return them as null.\n  Examples:\n  largerSmallerIntegers([-2, 4, 1, 3, 5, 7]) == (-2, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerNegatives = (lst) => {\n  const max = largestNumber(lst);\n  const min = smallestNumber(lst);\n  return [\n    max? (max, min) : null,\n    min? (max, min) : null\n  ];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive numbers, and 'b' is the smallest\n  of negative numbers in a list.\n  If there is no negative or positive numbers, return them as null.\n  Examples:\n  largerSmallerIntegers([-2, 4, 1, 3, 5, 7]) == (1, -2)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerPositives = (lst) => {\n  const max = largestNumber(lst);\n  const min = smallestNumber(lst);\n  return [\n    max? (max, min) : null,\n    min? (max, min) : null\n  ];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative numbers, and 'b' is the largest\n  of positive numbers in a list.\n  If there is no negative or positive numbers, return them as null.\n  Examples:\n  largerSmallerIntegers([-2, 4, 1, 3, 5, 7]) == (1, -2)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerIntegers = (lst) => {\n  const max = largestNumber(lst);\n  const min = smallestNumber(lst);\n  return [\n    max? (max, min) : null,\n    min? (max, min) : null\n  ];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative numbers, and 'b' is the largest\n  of positive numbers in a list.\n  If there is no negative or positive numbers, return them as null.\n  Examples:\n  smallerSmallerIntegers([-2, 4, 1, 3, 5, 7]) == (1, -2)\n  smallerSmallerIntegers([]) == (null, null)\n  smallerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerNegatives = (lst) => {\n  const max = largestNumber(lst);\n  const min = smallestNumber(lst);\n  return [\n    max? (max, min) : null,\n    min? (max, min) : null\n  ];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive numbers, and 'b' is the largest\n  of negative numbers in a list.\n  If there is no negative or positive numbers, return them as null.\n  Examples:\n  smallerSmallerIntegers([-2, 4, 1, 3, 5, 7]) == (-2, 1)\n  smallerSmallerIntegers([]) == (null, null)\n  smallerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerPositives = (lst) => {\n  const max = largestNumber(lst);\n  const min = smallestNumber(lst);\n  return [\n    max? (max, min) : null,\n    min? (max, min) : null\n  ];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive and negative numbers, and 'b' is the largest\n  of positive and negative numbers in a list.\n  If there is no negative or positive numbers, return them as null.\n  Examples:\n  smallerSmallerIntegers([-2, 4, 1, 3, 5, 7]) == (1, -2)\n  smallerSmallerIntegers([]) == (null, null)\n  smallerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerBoth = (lst) => {\n  const max = largestNumber(lst);\n  const min = smallestNumber(lst);\n  return [\n    max? (max, min) : null,\n    min? (max, min) : null\n  ];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of positive and negative numbers, and 'b' is the largest\n  of positive and negative numbers in a list.\n  If there is no negative or positive numbers, return them as null.\n  Examples:\n  smallerSmallerIntegers([-2, 4, 1, 3, 5, 7]) == (1, -2)\n  smallerSmallerIntegers([]) == (null, null)\n  smallerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerAll = (lst) => {"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) return null;\n  if (isNaN(a)) a = parseInt(a);\n  if (isNaN(b)) b = parseInt(b);\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (a.toLowerCase() > b.toLowerCase()) return b;\n      else return a;\n    } else return b;\n  } else if (typeof b === \"string\") {\n    return a;\n  } else return a > b? a : b;\n};\n\n/*\n  Create a function that takes a string and a number, and returns the larger\n  variable in its given variable type. Return null if the values are equal.\n  Note: If a number is represented as a string, the floating point might be. or,\n\n  comparingTwo(1, \"1.5\") ➞ 1.5\n  comparingTwo(\"1.5\", 2) ➞ \"2\"\n  comparingTwo(\"1,2\", \"2\") ➞ \"2\"\n  comparingTwo(\"1.5\", \"1.6\") ➞ \"1.5\"\n  comparingTwo(\"1.5\", \"1.5\") ➞ null\n  */\nconst comparingTwo = (a, b) => {\n  if (a === b) return null;\n  if (isNaN(a)) a = parseInt(a);\n  if (isNaN(b)) b = parseInt(b);\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (a.toLowerCase() > b.toLowerCase()) return b;\n      else return a;\n    } else return b;\n  } else if (typeof b === \"string\") {\n    return a;\n  } else return a > b? a : b;\n};\n\n/*\n  Create a function that takes a number and a string, and returns the larger\n  variable in its given variable type. Return null if the values are equal.\n  Note: If a number is represented as a string, the floating point might be. or,\n\n  comparingThree(1, \"1.5\") ➞ 1.5\n  comparingThree(\"1.5\", 2) ➞ \"2\"\n  comparingThree(\"1,2\", \"2\") ➞ \"2\"\n  comparingThree(\"1.5\", \"1.6\") ➞ \"1.5\"\n  comparingThree(\"1.5\", \"1.5\") ➞ null\n  */\nconst comparingThree = (a, b) => {\n  if (a === b) return null;\n  if (isNaN(a)) a = parseInt(a);\n  if (isNaN(b)) b = parseInt(b);\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (a.toLowerCase() > b.toLowerCase()) return b;\n      else return a;\n    } else return b;\n  } else if (typeof b === \"string\") {\n    return a;\n  } else return a > b? a : b;\n};\n\nconst compare = comparer => {\n  const a = comparer(1, 2);\n  const b = comparer(2, 1);\n  const c = comparer(2, 2);\n  const d = comparer(2.5, 1.5);\n  const e = comparer(1, 2.5);\n  const f = comparer(2.5, 1);\n  const g = comparer(1.5, 1.5);\n  const h = comparer(1.5, 1);\n\n  expect(a).toBe(2);\n  expect(b).toBe(1);\n  expect(c).toBe(2);\n  expect(d).toBe(2.5);\n  expect(e).toBe(1);\n  expect(f).toBe(1);\n  expect(g).toBe(1.5);\n  expect(h).toBe(1.5);\n};\n\ncompare(comparingOne);\ncompare(comparingTwo);\ncompare(comparingThree);\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  const nDigits = n.toString(10).length;\n  const lastDigit = n.toString(10).slice(-1);\n  const num = n.toString(10);\n\n  if (nDigits!== 4) {\n    return false;\n  }\n\n  if (lastDigit === '1' && n.toString(10).slice(0, -1) === '01') {\n    return false;\n  }\n\n  return true;\n};\n\nexport {\n  isEqualToSummingEven,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let special_factorial = 1;\n  while(n > 1) {\n    special_factorial = special_factorial * n;\n    n = n - 1;\n  }\n  return special_factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  let factorial = 1;\n  while(n > 1) {\n    factorial = factorial * n;\n    n = n - 1;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the argument.\n  */\nconst factorials_less_than_or_equal_to = (n) => {\n  let total_factorials = 0;\n  while(n > 1) {\n    if (n % 2 === 0) {\n      total_factorials += n;\n    }\n    n = n / 2;\n  }\n  return total_factorials;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the argument.\n  */\nconst factorials_less_than_or_equal_to_recursive = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return factorials_less_than_or_equal_to_recursive(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the argument.\n  */\nconst factorials_less_than_or_equal_to_iterative = (n) => {\n  let total_factorials = 0;\n  while(n > 1) {\n    if (n % 2 === 0) {\n      total_factorials += n;\n    }\n    n = n / 2;\n  }\n  return total_factorials;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the argument.\n  */\nconst factorials_less_than_or_equal_to_bruteforce = (n) => {\n  let total_factorials = 0;\n  while(n > 1) {\n    if (n % 2 === 0) {\n      total_factorials += n;\n    }\n    n = n / 2;\n  }\n  return total_factorials;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the argument.\n  */\nconst factorials_less_than_or_equal_to_memoized = (n) => {\n  let total_factorials = 0;\n  while(n > 1) {\n    if (n % 2 === 0) {\n      total_factorials += n;\n    }\n    n = n / 2;\n  }\n  return total_factorials;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the argument.\n  */\nconst factorials_less_than_or_equal_to_memoized_recursive = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return factorials_less_than_or_equal_to_memoized_recursive(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the argument.\n  */\nconst factorials_less_than_or_equal_to_memoized_iterative = (n) => {\n  let total_factorials = 0;\n  while(n > 1) {\n    if (n % 2 === 0) {\n      total_factorials += n;\n    }\n    n = n / 2;\n  }\n  return total_factorials;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  factorials that are less than or equal to the argument.\n  */\nconst factorials_less_than_or_equal_to_memoized_bruteforce = (n) => {\n  let total_factorials = 0;\n  while(n > 1) {\n    if (n % 2 === 0) {\n      total_factorials += n;\n    }\n    n = n / 2;\n  }\n  return total_factorials;\n};\n\nconst test_factorials_less_than_or_equal_to = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return factorials_less_than_or_equal_to_iterative(n);\n};\n\nconst test_factorials_less_than_or_equal_to_recursive = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return factorials_less_than_or_equal_to_recursive(n);\n};\n\nconst test_factorials_less_than_or_equal_to_bruteforce = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return factorials_less_than_or_equal_to_bruteforce(n);\n};\n\nconst test_factorials_less_than_or_equal_to_memoized = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return factorials_less_than_or_equal_to_memoized(n);\n};\n\nconst test_factorials_less_than_or_equal_to_memoized_recursive = (n) => {\n  if ("}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n    let file_name_without_dot = file_name.replace(/\\.[^.]*$/,'');\n    if (file_name_without_dot.length === 0 || \n        file_name_without_dot.length > 3 ||\n        file_name_without_dot.match(/^[a-zA-Z]+/) === null ||\n        file_name_without_dot.match(/[0-9]+/) === null) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\nconst filesNamesCheck2 = (file_name) => {\n    let file_name_without_dot = file_name.replace(/\\.[^.]*$/,'');\n    if (file_name_without_dot.length === 0 || \n        file_name_without_dot.length > 3 ||\n        file_name_without_dot.match(/^[a-zA-Z]+/) === null ||\n        file_name_without_dot.match(/[0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9]+/) === null) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\nconst filesNamesCheck3 = (file_name) => {\n    let file_name_without_dot = file_name.replace(/\\.[^.]*$/,'');\n    if (file_name_without_dot.length === 0 || \n        file_name_without_dot.length > 3 ||\n        file_name_without_dot.match(/^[a-zA-Z]+/) === null ||\n        file_name_without_dot.match(/[0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9]+/) === null) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\nconst filesNamesCheck4 = (file_name) => {\n    let file_name_without_dot = file_name.replace(/\\.[^.]*$/,'');\n    if (file_name_without_dot.length === 0 || \n        file_name_without_dot.length > 3 ||\n        file_name_without_dot.match(/^[a-zA-Z]+/) === null ||\n        file_name_without_dot.match(/[0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9][a-zA-Z0-9]+/) === null) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\nconst filesNamesCheck5 = (file_name) => {\n    let file_name_without_dot = file_name.replace(/\\.[^.]*$/,'');\n    if (file_name_without_dot.length === 0 || \n        file_name_without_dot.length > 3 ||\n        file_name_without_dot.match(/^[a-zA-Z]+/) === null ||\n        file_name_without_dot.match(/[0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9][a-zA-Z0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]+/) === null) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\nconst filesNamesCheck6 = (file_name) => {\n    let file_name_without_dot = file_name.replace(/\\.[^.]*$/,'');\n    if (file_name_without_dot.length === 0 || \n        file_name_without_dot.length > 3 ||\n        file_name_without_dot.match(/^[a-zA-Z]+/) === null ||\n        file_name_without_dot.match(/[0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9][a-zA-Z0-9]+/) === null ||\n        file_name_without_dot.match(/^[a-zA-Z][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]+/) === null) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\nconst filesNamesCheck7 = (file_name) => {\n    let file_name_without_dot = file_name.replace(/\\.[^.]*$/,'');\n    if (file_name_without_dot.length"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 === 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is \n  a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 === 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is \n  a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 === 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n//Test Cases\nconst testCases = [\n    [],\n    [1],\n    [1,2,3],\n    [1,2,3,4,5,6,7,8,9,10],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126]\n];\n\n//Test Results\nconst testResults = [\n    0,\n    1,\n    6,\n    126,\n    345,\n    429,\n    600,\n    991,\n    1384,\n    1827,\n    2376,\n    3055,\n    3732,\n    4499,\n    5216,\n    5943,\n    6660,\n    7379,\n    8192,\n    8905,\n    9712,\n    10423,\n    11230,\n    11937,\n    12644,\n    13451,\n    14258,\n    15055,\n    15862,\n    16659,\n    17352,\n    18143,\n    1893,\n    196\n];\n\n//main\ntestCases.forEach((testCase, testCaseIndex) => {\n    console.log(\"Test Case #\" + (testCaseIndex + 1) + \": \" + testCase);\n    console.log(\"Test Result: \" + testResults[testResults.indexOf(sumsSquares(testCase))]);\n});\n\n//Program output\n/*\nTest Case #1: []\nTest Result: 0\n\nTest Case #2: [1]\nTest Result: 1\n\nTest Case #3: [1,2,3]\nTest Result: 6\n\nTest Case #4: [1,2,3,4,5,6,7,8,9,10]\nTest Result: 126\n\nTest Case #5: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const map = new Map();\n  let words = sentence.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let length = 0;\n    while (word.length > length) {\n      length = getPrimeNumber(length + 1);\n    }\n    if (!map.has(length)) {\n      map.set(length, []);\n    }\n    map.get(length).push(word);\n  }\n  let newWords = [];\n  for (let [k, v] of map) {\n    newWords = newWords.concat(v);\n  }\n  return newWords.join(\" \");\n};\n\n// Math.getPrimeNumber(x) is O(x)\n// getPrimeNumber(x) is O(log(x))\nconst getPrimeNumber = (x) => {\n  const isPrime = (n) => n > 1 && n % 2 === 0 && n >= 2;\n  let max = 1;\n  for (let i = 3; i <= x; i += 2) {\n    if (isPrime(i)) {\n      max = i;\n    }\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  x = x.toString();\n  n = n.toString();\n  const xN = x.split('/');\n  const nN = n.split('/');\n  const xNum = parseInt(xN[0], 10);\n  const xDen = parseInt(xN[1], 10);\n  const nNum = parseInt(nN[0], 10);\n  const nDen = parseInt(nN[1], 10);\n  return (xNum * nNum) === xDen && (nDen * xNum) === nDen;\n};\n\nconsole.log(simplify('1/5', '5/1'));\nconsole.log(simplify('1/6', '2/1'));\nconsole.log(simplify('7/10', '10/2'));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const nums = [...nums]\n   .sort((a, b) => {\n      if (a < 0 && b < 0) return 0\n      if (a < 0 && b >= 0) return -1\n      if (a >= 0 && b < 0) return 1\n      if (a >= 0 && b >= 0) return a - b\n    })\n\n   .filter((num, i) => num > 0)\n   .map((num, i) => nums[i] || 0)\n\n   .sort((a, b) => {\n      const diff = a - b\n      if (diff === 0) return a < b? -1 : 1\n      return diff\n    })\n\n   .map((num, i) => i)\n\n   .map((i) => nums[i])\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const odd = (n) => n % 2 === 1\n  const firstOdd = (n) => n % 2 === 1 && n % 10 === 1\n  const lastOdd = (n) => n % 2 === 1 && n % 10 === 9\n  const notOdd = (n) => n % 2 === 0\n  const firstNotOdd = (n) => n % 2 === 0 && n % 10!== 1\n  const lastNotOdd = (n) => n % 2 === 0 && n % 10!== 9\n\n  const filter = nums.filter(odd)\n  const firstFilter = nums.filter(firstOdd)\n  const lastFilter = nums.filter(lastOdd)\n  const notFilter = nums.filter(notOdd)\n  const firstNotFilter = nums.filter(firstNotOdd)\n  const lastNotFilter = nums.filter(lastNotOdd)\n  const allFilter = nums.filter(notOdd)\n\n  return (filter.length + firstFilter.length + lastFilter.length + notFilter.length + firstNotFilter.length + lastNotFilter.length + allFilter.length)\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\nconsole.log(specialFilter([15, -73, 14, -15, 15, -73, 14, -15]))\nconsole.log(specialFilter([15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15]))\nconsole.log(specialFilter([15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15]))\nconsole.log(specialFilter([15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15, 15, -73, 14, -15]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n    const a = new Array(n);\n    const result = 0;\n    const maxTriples = 0;\n\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (a[i - 1] + a[j - 1] + a[n - 1] % 3 === 0) {\n                result++;\n            }\n        }\n    }\n\n    return maxTriples = result;\n};\n\nconst test = require('tape');\n\ntest('examples', function (t) {\n    t.plan(2);\n\n    t.equal(gottenMaxTriples(5), 1, 'triples with values 1,3,7,13,21');\n    t.equal(gottenMaxTriples(7), 1, 'triples with values 1,3,7,13,21,35,49');\n});\n\ntest('maxTriples', function (t) {\n    t.plan(1);\n\n    t.equal(maxTriples(5), 1, 'triples with values 1,3,7,13,21');\n});\n\ntest('maxTriples', function (t) {\n    t.plan(1);\n\n    t.equal(maxTriples(7), 1, 'triples with values 1,3,7,13,21,35,49');\n});\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    let result = []\n    let i = 0\n    while (i < 8) {\n        let planet = getPlanet(planet1, i)\n        if (planet === null) return result\n        let j = 0\n        while (j < 8) {\n            let next = getPlanet(planet2, j)\n            if (next === null) return result\n            if (distance(planet, next) <= distance(planet1, planet2)) {\n                result.push(next)\n            }\n            j++\n        }\n        i++\n    }\n    return result\n}\n\nfunction getPlanet(name, i) {\n    if (i === 6) {\n        return name === \"Jupiter\"? \"Saturn\" : null\n    }\n    let p = planetNames.indexOf(name)\n    let c = p * i\n    let x = Math.pow(10, p + 1)\n    let y = Math.pow(10, c)\n    return Math.round(x + y * Math.pow(10, -p)) / Math.pow(10, p)\n}\n\nfunction distance(planet1, planet2) {\n    return Math.abs(planet1.x - planet2.x) + Math.abs(planet1.y - planet2.y)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  const nums = []\n  const lst = [...lst]\n  const len = lst.length\n  const l = lst[0].length\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    nums[i] = 0\n  }\n\n  for (let i = 0; i < len; i++) {\n    count += 1\n    for (let j = i + 1; j < len; j++) {\n      nums[i] += lst[j].length\n      nums[j] -= lst[i].length\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (nums[i] % 2 === 0) {\n      lst.splice(i, 1)\n      len--\n    }\n  }\n\n  return lst\n}\n\n/*\nWrite a function that takes a list of lists as input,\n  sorts the lists in ascending order by the value of the first element,\n  and returns the sorted list.\n  The list is always a list of lists, and the list may contain duplicates.\n  The order of the list should be ascending by value.\n  For example:\n  assert list_sort([[\"A\", 2], [\"B\", 2], [\"C\", 1]]) => [\"A\", \"B\", \"C\"]\n  assert list_sort([[\"A\", 2], [\"A\", 3], [\"B\", 2], [\"B\", 2], [\"C\", 1]]) => [\"A\", \"B\", \"C\"]\n  */\nconst sortLists = (lst) => {\n  const lists = [...lst]\n  const lstLen = lists.length\n  const sorted = []\n  const l = lists[0].length\n  for (let i = 0; i < lstLen; i++) {\n    for (let j = 0; j < l; j++) {\n      sorted.push([...lists[i], lists[i][j]])\n    }\n  }\n  return sorted\n}\n\n/*\nWrite a function that takes a list of lists as input,\n  sorts the lists in ascending order by the value of the last element,\n  and returns the sorted list.\n  The list is always a list of lists, and the list may contain duplicates.\n  The order of the list should be ascending by value.\n  For example:\n  assert list_sort([[\"A\", 2], [\"B\", 2], [\"C\", 1]]) => [\"C\", \"B\", \"A\"]\n  assert list_sort([[\"A\", 2], [\"A\", 3], [\"B\", 2], [\"B\", 2], [\"C\", 1]]) => [\"A\", \"B\", \"C\"]\n  */\nconst sortListsLast = (lst) => {\n  const lists = [...lst]\n  const lstLen = lists.length\n  const sorted = []\n  const l = lists[lstLen - 1].length\n  for (let i = 0; i < lstLen; i++) {\n    for (let j = 0; j < l; j++) {\n      sorted.push([...lists[i], lists[i][j]])\n    }\n  }\n  return sorted\n}\n\nexport {\n  sortListsSums,\n  sortLists,\n  sortListsLast\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconsole.log(xOrY(1, 2, 3)); //3\nconsole.log(xOrY(3, 4, 5)); //5\nconsole.log(xOrY(5, 6, 7)); //5\nconsole.log(xOrY(7, 8, 9)); //9\nconsole.log(xOrY(9, 10, 11)); //11\nconsole.log(xOrY(11, 12, 13)); //13\nconsole.log(xOrY(13, 14, 15)); //15\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let n of lst) {\n    if (n % 2 === 1) sum += n * n\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    const correct = guess.filter(x => game[x]);\n    const wrong = game.filter(x =>!game[x]);\n    const total = correct.length;\n    const correctGuess = correct.reduce((sum, x) => sum + x, 0);\n    const wrongGuess = wrong.reduce((sum, x) => sum + x, 0);\n    const totalGuess = correctGuess + wrongGuess;\n    const diff = Math.abs(totalGuess - total);\n    return [diff, correctGuess, wrongGuess];\n}\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = (extension) => {\n    return extension.toLowerCase().split('.').map((s) => {\n      return s.replace(/[A-Z]/g, '');\n    }).reduce((a, b) => {\n      return a - b;\n    }, 0);\n  };\n  const sortedExtensions = extensions.sort((a, b) => {\n    return strength(a) - strength(b);\n  });\n  return `${class_name}.${sortedExtensions[0]}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let isSub = false;\n  let aStr = a.split('');\n  let bStr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = aStr.length;\n  let subLen = bStr.length;\n  while (i < len && j < subLen) {\n    if (aStr[i] === bStr[j]) {\n      isSub = true;\n      k = 1;\n      while (aStr[i + k] === bStr[j + k]) {\n        k++;\n        if (k === subLen) {\n          isSub = true;\n          break;\n        }\n      }\n      if (isSub) {\n        break;\n      }\n      j++;\n    } else {\n      if (j === subLen) {\n        break;\n      }\n    }\n    i++;\n  }\n  return isSub;\n};\n\nlet isCyclic = cycpatternCheck('abcde','edcba');\nconsole.log(isCyclic);\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n    const numDigits = num.toString().length;\n    let evenCount = 0;\n    let oddCount = 0;\n    for (let i = 0; i < numDigits; i++) {\n        const digit = num.toString().charAt(i);\n        if (digit === '0') {\n            if (oddCount === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        } else {\n            if (oddCount === 0) {\n                oddCount++;\n            } else {\n                evenCount++;\n            }\n        }\n    }\n    return {\n        even: evenCount,\n        odd: oddCount\n    };\n};\n\nconst evenOdderCount_2 = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.toString().length; i++) {\n        if (num.toString().charAt(i) === '0') {\n            count++;\n        }\n    }\n    return count;\n};\n\nconsole.log(evenOdderCount(12));\nconsole.log(evenOdderCount_2(12));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    number = parseInt(number, 10);\n    const mn = [\n        [1000,'m'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i'],\n    ];\n\n    return number\n       .toString()\n       .split('')\n       .map((elem, index) => {\n            if (index < mn.length) {\n                const [max, mnElem] = mn[index];\n                if (number <= max) {\n                    return elem.toLowerCase();\n                }\n                return number / max * mnElem + elem;\n            }\n            return elem;\n        })\n       .join('');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  return (a * b <= c * c && a * c <= b * b) ||\n    (b * a <= c * c && b * c <= a * a) ||\n    (c * a <= b * b && c * b <= a * a);\n}\n\n/*\n Given a triangle, return the area of that triangle. The area of a triangle\n  is the sum of its sides multiplied by half.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return ((a + b) * (a + c)) / 2;\n}\n\n/*\n Given the lengths of the three sides of a rectangle, return the area of that\n  rectangle. The area of a rectangle is the sum of its sides multiplied by half.\n  Example:\n  areaOfRectangle(3, 4, 5) == 12\n  areaOfRectangle(1, 2, 3) == 0\n  */\nconst areaOfRectangle = (a, b, c) => {\n  return (a * b) + (a * c) + (b * c) - (a * a) - (b * b) - (c * c);\n}\n\n/*\n Given a triangle, return the length of the longest side of that triangle.\n  Example:\n  longestSideOfTriangle(3, 4, 5) == 5\n  longestSideOfTriangle(1, 2, 3) == 3\n  */\nconst longestSideOfTriangle = (a, b, c) => {\n  return Math.max(a, Math.max(b, c));\n}\n\n/*\n Given the lengths of the three sides of a rectangle, return the length of the\n  longest side of that rectangle.\n  Example:\n  longestSideOfRectangle(3, 4, 5) == 5\n  longestSideOfRectangle(1, 2, 3) == 3\n  */\nconst longestSideOfRectangle = (a, b, c) => {\n  return Math.max(a, Math.max(b, c));\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the sum of the\n  sides.\n  Example:\n  sumOfSidesOfTriangle(3, 4, 5) == 17\n  sumOfSidesOfTriangle(1, 2, 3) == 6\n  */\nconst sumOfSidesOfTriangle = (a, b, c) => {\n  return (a + b + c);\n}\n\n/*\n Given the lengths of the three sides of a rectangle, return the sum of the\n  sides.\n  Example:\n  sumOfSidesOfRectangle(3, 4, 5) == 17\n  sumOfSidesOfRectangle(1, 2, 3) == 6\n  */\nconst sumOfSidesOfRectangle = (a, b, c) => {\n  return (a + b + c);\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the sum of the\n  sides.\n  Example:\n  sumOfSidesOfTriangle(3, 4, 5) == 17\n  sumOfSidesOfTriangle(1, 2, 3) == 6\n  */\nconst sumOfSidesOfRectangle = (a, b, c) => {\n  return (a + b + c);\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the area of that\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 15\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst sumOfSidesOfTriangle = (a, b, c) => {\n  return (a * b) + (a * c) + (b * c);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  if (words.length === 1) {\n    return words[0];\n  }\n  const wordCounts = words.reduce((acc, word) => {\n    if (!acc[word]) {\n      acc[word] = 1;\n    } else {\n      acc[word]++;\n    }\n    return acc;\n  }, {});\n  return words[0];\n};\n\nmodule.exports = foundMax;\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const [ total, count ] = [ number, number ];\n  while (count < need) {\n    count += number;\n    total += number;\n  }\n  if (remaining < need) {\n    count = remaining;\n  } else {\n    count = need;\n  }\n  return [ total, count ];\n}\n\nexport {\n  eat,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = []\n  for (let i = 0; i < operand.length; i++) {\n    for (let j = i + 1; j < operand.length; j++) {\n      let sum = operand[i] + operand[j]\n      if (operator.includes(sum)) {\n        result.push(sum)\n      }\n    }\n  }\n  return result.reduce((pre, curr) => pre + curr)\n}\n\nconst test = () => {\n  const operator = ['+', '-', '*', '//', '**']\n  const operand = [2, 3, 4, 5]\n  const result = doAlgebra(operator, operand)\n  console.log(`Result: ${result}`)\n}\n\ntest()<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    if (s.length === 0) return s;\n    let last = s[s.length - 1];\n    let res = \"\";\n    for (let i = s.length - 2; i >= 0; i--) {\n        if (s[i] === last) {\n            res = res + s[i].toUpperCase();\n        } else {\n            res = res + s[i].toLowerCase();\n        }\n    }\n    return res;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of its unicode\n  equivalent. If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Unicode = (text) => {\n  let md5 = crypto.createHash('md5');\n  md5.update(text.toString());\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of its unicode\n  equivalent, including an optional padding char. If 'text' is an\n  empty string, return null.\n\n  >>> stringToMd5('Hello world', '*') == '8f9d3b77f4bcc9d4dde2e8a4c6d37d6'\n  */\nconst stringToMd5UnicodePadded = (text, paddingChar) => {\n  let md5 = crypto.createHash('md5');\n  md5.update(text.toString(), 'utf8');\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of its unicode\n  equivalent, including an optional padding char, and an optional\n  padding length. If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world', '*', 6) == 'a5f9cf8a4c0b2b7f0b3e8a6e4b6c7d'\n  */\nconst stringToMd5UnicodePaddedLength = (text, paddingChar, paddingLength) => {\n  let md5 = crypto.createHash('md5');\n  md5.update(text.toString(), 'utf8');\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of its unicode\n  equivalent, including an optional padding char, and an optional\n  padding length. If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world', '*', 6) == 'a5f9cf8a4c0b2b7f0b3e8a6e4b6c7d'\n  */\nconst stringToMd5UnicodePaddedLengthUnicode = (text, paddingChar, paddingLength) => {\n  let md5 = crypto.createHash('md5');\n  md5.update(text.toString(), 'utf8');\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of its unicode\n  equivalent, including an optional padding char, and an optional\n  padding length. If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world', '*', 6) == 'a5f9cf8a4c0b2b7f0b3e8a6e4b6c7d'\n  */\nconst stringToMd5UnicodePaddedLengthUnicodeUnicode = (text, paddingChar, paddingLength) => {\n  let md5 = crypto.createHash('md5');\n  md5.update(text.toString(), 'utf8');\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return the md5 hash of its unicode\n  equivalent, including an optional padding char, and an optional\n  padding length. If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world', '*', 6) == 'a5f9cf8a4c0b2b7f0b3e8a6e4b6c7d'\n  */\nconst stringToMd5UnicodePaddedLengthUnicodeUnicodeUnicode = (text, paddingChar, paddingLength) => {\n  let md5 = crypto.createHash('md5');\n  md5.update(text.toString(), 'utf8');\n  return md5.digest('hex');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let aInt = a | 0\n  let bInt = b | 0\n\n  if (aInt >= bInt) {\n    return []\n  }\n\n  const length = bInt - aInt + 1\n\n  let array = []\n\n  for (let i = aInt; i <= bInt; i += 2) {\n    array.push(i)\n  }\n\n  return array\n}\n\nconst isPrime = (n) => {\n  let sqrt = Math.sqrt(n)\n\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconst primes = generateIntegers(2, 10000000)\n\nconst sumPrimes = (n) => {\n  let sum = 0\n\n  for (let i = 0; i < primes.length; i++) {\n    sum += primes[i]\n  }\n\n  return sum\n}\n\nconst isPrime2 = (n) => {\n  for (let i = 2; i <= n / 2; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconst sumPrimes2 = (n) => {\n  let sum = 0\n\n  for (let i = 2; i <= n; i++) {\n    if (isPrime2(i)) {\n      sum += i\n    }\n  }\n\n  return sum\n}\n\nconsole.log(sumPrimes(100000))\nconsole.log(sumPrimes2(100000))\n<|endoftext|>"}
