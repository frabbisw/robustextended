{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  const closestElements = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        closestElements.push([numbers[i], numbers[j]]);\n      }\n    }\n  }\n  return closestElements.length === 0;\n};\n\nmodule.exports = hadClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  let stack = [];\n  const group_array = [];\n  const split_array = paren_string.split(' ');\n\n  for (let i = 0; i < split_array.length; i++) {\n    const curr_string = split_array[i];\n    if (curr_string.length === 0) {\n      continue;\n    }\n\n    if (curr_string === '(') {\n      stack.push(curr_string);\n    } else if (curr_string === ')') {\n      if (stack.length === 0) {\n        return [];\n      }\n\n      if (stack.pop() === '(') {\n        stack.pop();\n        group_array.push(stack.join(''));\n      }\n    }\n  }\n\n  return group_array;\n};\n\n// Tests:\n\n/*\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  >>> separateParenGroup('(a) (b) (c)')\n  ['(a)', '(b)', '(c)']\n  >>> separateParenGroup('(a (b) (c))')\n  ['(a (b) (c))']\n  >>> separateParenGroup('(a) (b) (c) (d)')\n  ['(a)', '(b)', '(c)', '(d)']\n  >>> separateParenGroup('(a (b) (c) (d)')\n  ['(a (b) (c) (d))']\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(())', '(())']\n  >>> separateParenGroup('( ) ( ( ) ( ) ( ) )')\n  ['()', '(())', '(())', '(())']\n  >>> separateParenGroup('( ) ( ( ) ( ) ( ) )')\n  ['()', '(())', '(())', '(())']\n  >>> separateParenGroup('( ) ( ) ( ) ( )')\n  ['()', '(())', '(())', '(())']\n  >>> separateParenGroup('( ) ( ) ( ) ( ) ( )')\n  ['()', '(())', '(())', '(())', '(())']\n  >>> separateParenGroup('( ) ( ) ( ) ( ) ( ) ( )')\n  ['()', '(())', '(())', '(())', '(())', '(())']\n*/\n\nexport default separateParenGroup;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = number - Math.floor(number);\n  return (Math.floor(number) - integerPart)\n};\n\nconst main = () => {\n  const input = prompt(\"Enter a floating point number.\");\n  const number = parseFloat(input);\n  console.log(`Your input is: ${number}`);\n  console.log(`The integer part of the number is: ${Math.floor(number)}`);\n  console.log(`The decimal part of the number is: ${truncateNumber(number)}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  const belowZero = (acc) => acc < 0;\n  const isBelowZero = belowZero;\n  const firstNotBelowZero = isBelowZero;\n  let acc = 0;\n  while (operations.length) {\n    const op = operations.pop();\n    acc += op;\n    if (isBelowZero(acc)) {\n      return true;\n    }\n    if (firstNotBelowZero(acc)) {\n      return false;\n    }\n  }\n  return false;\n};\n\nexport default belowZeros;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  return numbers.reduce(\n    (accumulator, number) =>\n      accumulator + Math.abs(number - Math.round(number)),\n    0\n  ) / numbers.length;\n};\n\nexport default {\n  max,\n  min,\n  median,\n  mode,\n  percentile,\n  skewness,\n  kurtosis,\n  mean,\n  meanAbsolutesDeviation,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const arr = numbers.slice();\n  let index = 0;\n  const output = [];\n  while (arr.length > 1) {\n    output.push(arr[index]);\n    output.push(delimeter);\n    index++;\n  }\n  output.push(arr[index]);\n  return output;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  let curr_level = 1;\n  const stack = [];\n  let i = 0;\n  while (i < paren_string.length) {\n    if (paren_string[i] === ')') {\n      curr_level--;\n      if (curr_level === 0) {\n        stack.pop();\n      }\n    } else if (paren_string[i] === '(') {\n      curr_level++;\n      stack.push(curr_level);\n    }\n    i++;\n  }\n  return stack;\n};\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach((s) => {\n    const contains = s.indexOf(substring)!== -1;\n    if (contains) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings by a given substring\n  * @param strings {Array} Input list of strings\n  * @param substring {string} String to be filtered\n  * @returns {Array} Filtered list of strings\n  */\nexport const filterBySubstringByString = (strings, substring) => {\n  const result = [];\n  strings.forEach((s) => {\n    const contains = s.indexOf(substring)!== -1;\n    if (contains) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given string\n  * @param strings {Array} Input list of strings\n  * @param string {string} String to be filtered\n  * @returns {Array} Filtered list of strings\n  */\nexport const filterByString = (strings, string) => {\n  const result = [];\n  strings.forEach((s) => {\n    if (s.indexOf(string)!== -1) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings by a given string\n  * @param strings {Array} Input list of strings\n  * @param string {string} String to be filtered\n  * @returns {Array} Filtered list of strings\n  */\nexport const filterByStringByString = (strings, string) => {\n  const result = [];\n  strings.forEach((s) => {\n    if (s.indexOf(string)!== -1) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given regex\n  * @param strings {Array} Input list of strings\n  * @param regex {RegExp} Regular expression to be filtered\n  * @returns {Array} Filtered list of strings\n  */\nexport const filterByRegex = (strings, regex) => {\n  const result = [];\n  strings.forEach((s) => {\n    if (s.match(regex)) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings by a given regex\n  * @param strings {Array} Input list of strings\n  * @param regex {RegExp} Regular expression to be filtered\n  * @returns {Array} Filtered list of strings\n  */\nexport const filterByRegexByString = (strings, regex) => {\n  const result = [];\n  strings.forEach((s) => {\n    if (s.match(regex)) {\n      result.push(s);\n    }\n  });\n  return result;\n};\n\n/**\n  * Filter an input list of strings by a given list of strings\n  * @param strings {Array} Input list of strings\n  * @param stringsToFilter {Array} List of strings to be filtered\n  * @returns {Array} Filtered list of strings\n  */\nexport const filterByStrings = (strings, stringsToFilter) => {\n  const result = [];\n  stringsToFilter.forEach((s) => {\n    strings.forEach((s2) => {\n      if (s.indexOf(s2)!== -1) {\n        result.push(s2);\n      }\n    });\n  });\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  numbers.forEach((num) => {\n    sum += num\n  })\n  return (sum, product)\n}\n\nexport default sumProducts\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let start = 0;\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      start = i;\n    }\n    i++;\n  }\n  return [...Array(numbers.length - start).fill(0), max];\n};\n\nexport { rollingMax };\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) return string;\n  let start = 0;\n  let length = 0;\n  let i = string.length - 1;\n  while (i > 0) {\n    if (string.charAt(i) == string.charAt(start)) {\n      length += 1;\n    } else {\n      start += 1;\n      length = 1;\n    }\n    i -= 1;\n  }\n  return string.slice(0, start - 1) + string.slice(start + length, string.length - 1).split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the beginning of the string a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) return string;\n  let start = 0;\n  let length = 0;\n  let i = string.length - 1;\n  while (i > 0) {\n    if (string.charAt(i) == string.charAt(start)) {\n      length += 1;\n    } else {\n      start += 1;\n      length = 1;\n    }\n    i -= 1;\n  }\n  return string.slice(start + length, string.length - 1).split('').reverse().join('') + string.slice(0, start - 1);\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the beginning of the string a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) return string;\n  let start = 0;\n  let length = 0;\n  let i = string.length - 1;\n  while (i > 0) {\n    if (string.charAt(i) == string.charAt(start)) {\n      length += 1;\n    } else {\n      start += 1;\n      length = 1;\n    }\n    i -= 1;\n  }\n  return string.slice(start + length, string.length - 1).split('').reverse().join('') + string.slice(0, start - 1);\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) return string;\n  let start = 0;\n  let length = 0;\n  let i = string.length - 1;\n  while (i > 0) {\n    if (string.charAt(i) == string.charAt(start)) {\n      length += 1;\n    } else {\n      start += 1;\n      length = 1;\n    }\n    i -= 1;\n  }\n  return string.slice(0, start - 1) + string.slice(start + length, string.length - 1).split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) return string;\n  let start = 0;\n  let length = 0;\n  let i = string.length - 1;\n  while (i > 0) {\n    if (string.charAt(i) == string.charAt(start)) {\n      length += 1;\n    } else {\n      start += 1;\n      length = 1;\n    }\n    i -= 1;\n  }\n  return string.slice(0, start - 1) + string.slice(start + length, string.length - 1).split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) return string;\n  let start = 0;\n  let length = 0;\n"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  return (a + b).replace(/[01]/g, (char) => {\n    return char === '0'? '1' : '0';\n  });\n};\n\nexport default stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  const maxLength = strings.reduce((acc, curr) => Math.max(acc, curr.length), 0)\n  let maxStr = null\n  strings.forEach((s) => {\n    if (s.length === maxLength) {\n      maxStr = s\n    }\n  })\n  return maxStr || strings[0]\n}\n\n/*\n  Given a list of numbers, return the number that is the sum of the largest\n  and the smallest number in the list. If there are no numbers in the list,\n  return null.\n  >>> smallestAndLargest([1, 3, 4, 9])\n  null\n  >>> smallestAndLargest([1, 3, 4, 9, -10, -5, 0])\n  5\n  >>> smallestAndLargest([1, 3, 4, 9, -10, -5, 0, 100])\n  100\n  >>> smallestAndLargest([-1, -3, -4, -9])\n  -9\n  */\nconst smallestAndLargest = (nums) => {\n  if (nums.length === 0) return null\n  const min = Math.min(...nums)\n  const max = Math.max(...nums)\n  const sum = nums.reduce((acc, curr) => acc + curr, 0)\n  return sum === min? min : sum === max? max : sum\n}\n\n/*\n  Given a list of numbers, return the largest number that is smaller than the\n  sum of the largest and the smallest number in the list. If there are no\n  numbers in the list, return null.\n  >>> smallestAndLargest([1, 3, 4, 9])\n  9\n  >>> smallestAndLargest([1, 3, 4, 9, -10, -5, 0])\n  -10\n  >>> smallestAndLargest([1, 3, 4, 9, -10, -5, 0, 100])\n  -5\n  >>> smallestAndLargest([-1, -3, -4, -9])\n  -9\n  */\nconst smallestAndLargestInverse = (nums) => {\n  if (nums.length === 0) return null\n  const max = Math.max(...nums)\n  const min = Math.min(...nums)\n  const sum = nums.reduce((acc, curr) => acc + curr, 0)\n  return sum === max? min : sum === min? max : sum\n}\n\n/*\n  Given a list of numbers, return the number that is the difference between the\n  largest and the smallest number in the list. If there are no numbers in the\n  list, return null.\n  >>> smallestAndLargest([1, 3, 4, 9])\n  9\n  >>> smallestAndLargest([1, 3, 4, 9, -10, -5, 0])\n  10\n  >>> smallestAndLargest([1, 3, 4, 9, -10, -5, 0, 100])\n  -5\n  >>> smallestAndLargest([-1, -3, -4, -9])\n  -9\n  */\nconst smallestAndLargestDifference = (nums) => {\n  if (nums.length === 0) return null\n  const min = Math.min(...nums)\n  const max = Math.max(...nums)\n  const sum = nums.reduce((acc, curr) => acc + curr, 0)\n  return sum === max? sum - min : sum === min? max - sum : sum\n}\n\n/*\n  Given a list of numbers, return the number that is the sum of the largest\n  number in the list, the largest number in the list, and the smallest number\n  in the list. If there are no numbers in the list, return null.\n  >>> largestAndLargest([1, 3, 4, 9])\n  9\n  >>> largestAndLargest([1, 3, 4, 9, -10, -5, 0])\n  10\n  >>> largestAndLargest([1, 3, 4, 9, -10, -5, 0, 100])\n  100\n  >>> largestAndLargest([-1, -3, -4, -9])\n  -9\n  */\nconst largestAndLargest = (nums) => {\n  if (nums.length === 0) return null\n  const max = Math.max(...nums)\n  const min = Math.min(...nums)\n  const sum = nums.reduce((acc, curr) => acc + curr, 0)\n  return sum === max? max : sum === min? min : sum\n}\n\n/*\n  Given a list of numbers, return the number that is the difference between the\n  largest number in the list, the largest number in the list, and the smallest\n  number in the list. If there are no numbers in the list, return null.\n  >>> largestAndLargest([1, 3, 4, 9])\n  9\n  >>> largestAndLargest([1, 3, 4, 9, -10, -5, 0])\n  10\n  >>> largestAndLargest([1, 3, 4, 9, -10, -5, 0, 100])\n  -5\n  >>> largestAndLargest([-1, -3, -4, -9])\n  -9\n  */\nconst largestAndLargestDifference = (nums) => {\n  if (nums.length === 0) return null\n  const max = Math.max(...nums)\n  const min = Math.min(...nums)\n  const sum = nums.reduce((acc, curr) => acc + curr, 0)\n  return sum === max? sum - min : sum === min? max - sum : sum\n}\n\n/*\n  Return the number that is the largest number in the list. If there are no\n  numbers in the list, return null.\n  >>> largest([1, 3, 4, 9])\n  9\n  >>> largest([1, 3, 4, 9, -10, -5, 0])\n  10\n  >>> largest([-"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n    const divisors = [];\n    const divisor = a;\n    const result = b;\n    while (result!== 1) {\n        while (divisor % result === 0) {\n            divisors.push(result);\n            divisor = divisor / result;\n        }\n        result = Math.floor(Math.pow(a, b));\n    }\n    return divisors.sort((a, b) => a - b);\n};\n\n/* Return the number of ways to get from a to b\n  >>> getWays(3, 5)\n  2\n  >>> getWays(25, 15)\n  2\n  >>> getWays(25, 15)\n  2\n  */\nconst getWays = (a, b) => {\n    const divisors = greaterCommonDivisors(a, b);\n    let result = 1;\n    for (const divisor of divisors) {\n        result *= a / divisor;\n    }\n    return result;\n};\n\n/* Return the difference of the two integers a and b\n  >>> getDifference(3, 5)\n  2\n  >>> getDifference(25, 15)\n  5\n  >>> getDifference(25, 15)\n  5\n  */\nconst getDifference = (a, b) => {\n    return b - a;\n};\n\n/* Return the number of ways to get from a to b using the difference\n  >>> getWaysDifference(3, 5)\n  2\n  >>> getWaysDifference(25, 15)\n  2\n  >>> getWaysDifference(25, 15)\n  2\n  */\nconst getWaysDifference = (a, b) => {\n    return getWays(a, b) * getDifference(a, b);\n};\n\n/* Return the difference of the two integers a and b using the greatest common divisor\n  >>> getDifferenceGreaterCommonDivisor(3, 5)\n  2\n  >>> getDifferenceGreaterCommonDivisor(25, 15)\n  5\n  >>> getDifferenceGreaterCommonDivisor(25, 15)\n  5\n  */\nconst getDifferenceGreaterCommonDivisor = (a, b) => {\n    return getDifference(a, b) / greaterCommonDivisors(a, b)[0];\n};\n\n/* Return the number of ways to get from a to b using the greatest common divisor\n  >>> getWaysGreaterCommonDivisor(3, 5)\n  2\n  >>> getWaysGreaterCommonDivisor(25, 15)\n  2\n  >>> getWaysGreaterCommonDivisor(25, 15)\n  2\n  */\nconst getWaysGreaterCommonDivisor = (a, b) => {\n    return getWays(a, b) * getDifferenceGreaterCommonDivisor(a, b);\n};\n\n/* Return the sum of the two integers a and b\n  >>> getSum(3, 5)\n  8\n  >>> getSum(25, 15)\n  45\n  >>> getSum(25, 15)\n  45\n  */\nconst getSum = (a, b) => {\n    return a + b;\n};\n\n/* Return the sum of the two integers a and b using the greatest common divisor\n  >>> getSumGreaterCommonDivisor(3, 5)\n  8\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  */\nconst getSumGreaterCommonDivisor = (a, b) => {\n    return getSum(a, b) - getDifferenceGreaterCommonDivisor(a, b) * a;\n};\n\n/* Return the sum of the two integers a and b using the greatest common divisor\n  >>> getSumGreaterCommonDivisor(3, 5)\n  8\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  */\nconst getSumGreaterCommonDivisor2 = (a, b) => {\n    return getSum(a, b) - getDifferenceGreaterCommonDivisor(a, b) * b;\n};\n\n/* Return the sum of the two integers a and b using the greatest common divisor\n  >>> getSumGreaterCommonDivisor(3, 5)\n  8\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  */\nconst getSumGreaterCommonDivisor3 = (a, b) => {\n    return getSum(a, b) - getDifferenceGreaterCommonDivisor(a, b) * a;\n};\n\n/* Return the sum of the two integers a and b using the greatest common divisor\n  >>> getSumGreaterCommonDivisor(3, 5)\n  8\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  */\nconst getSumGreaterCommonDivisor4 = (a, b) => {\n    return getSum(a, b) - getDifferenceGreaterCommonDivisor(a, b) * b;\n};\n\n/* Return the sum of the two integers a and b using the greatest common divisor\n  >>> getSumGreaterCommonDivisor(3, 5)\n  8\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  */\nconst getSumGreaterCommonDivisor5 = (a, b) => {\n    return getSum(a, b) - getDifferenceGreaterCommonDivisor(a, b) * a;\n};\n\n/* Return the sum of the two integers a and b using the greatest common divisor\n  >>> getSumGreaterCommonDivisor(3, 5)\n  8\n  >>> getSumGreaterCommonDivisor(25, 15)\n  45\n  >>> getSumGreater"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length - i; j++) {\n      if (string.substring(i, i + j + 1) === string) {\n        prefixes.push(string.substring(i, i + j + 1))\n      }\n    }\n  }\n\n  return prefixes\n}\n\nexport default allPrefixes\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n    let result = '0';\n    for (let i = 1; i <= n; i++) {\n        result += ` ${i}`;\n    }\n    return result;\n}\n\nexport default stringSequences;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  const s = string.toLowerCase();\n  const a = [];\n  for (let i = 0; i < s.length; i++) {\n    if (a.indexOf(s[i]) === -1) {\n      a.push(s[i]);\n    }\n  }\n  return a.length;\n};\n\nmodule.exports = countDistincterCharacter;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const all_nots = new Array(26)\n  for(let i = 0; i < 26; i++) {\n    all_nots[i] = 0\n  }\n  const nots = music_string.split(\" \")\n  const beat_lengths = []\n  for(let i = 0; i < nots.length; i++) {\n    if(nots[i] === 'o' || nots[i] === 'O') {\n      const beat_length = 4\n      all_nots[i] = beat_length\n      beat_lengths.push(beat_length)\n    }\n    else if(nots[i] === 'o|' || nots[i] === 'O|') {\n      const beat_length = 2\n      all_nots[i] = beat_length\n      beat_lengths.push(beat_length)\n    }\n    else if(nots[i] === '.' || nots[i] === '|') {\n      const beat_length = 1\n      all_nots[i] = beat_length\n      beat_lengths.push(beat_length)\n    }\n  }\n  return beat_lengths\n}\n\n// test\n\nconst test = () => {\n  const test_str = 'o o| o| o| o| o| o|.| o o|.| o| o|.| o o|.| o o|.| o| o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n    const count = [];\n    let lastIndex = 0;\n    let currentIndex = 0;\n    while (currentIndex < string.length) {\n        const currentChar = string[currentIndex];\n        if (currentChar === substring[lastIndex]) {\n            count.push(lastIndex);\n            lastIndex++;\n            while (lastIndex < substring.length && string[currentIndex + lastIndex] === substring[lastIndex]) {\n                lastIndex++;\n            }\n        }\n        if (lastIndex >= substring.length) {\n            break;\n        }\n        currentIndex++;\n    }\n    return count.length;\n};\n\nmodule.exports = howManyTime;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  return sortNumbers(numbersArray);\n}\n\nmodule.exports = {\n  sortsNumbers,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  let found = numbers.filter((n) => n % 1 === 0);\n\n  // The found element closest to the first one is the first one\n  let closest = found[0];\n  let secondClosest = found[1];\n\n  for (let i = 0; i < found.length - 2; i++) {\n    let first = found[i];\n    let second = found[i + 1];\n\n    // If the distance between the current element and the second closest element\n    // is smaller than the current element\n    if (Math.abs(first - second) < Math.abs(closest - second)) {\n      closest = first;\n      secondClosest = second;\n    }\n  }\n\n  return [closest, secondClosest];\n};\n\n// We can use the closest elements to find the distance between two numbers\n// (a and b)\nconst closestElementsDistance = (a, b) => {\n  const [c, d] = foundCloserElements(a, b);\n\n  // If the distance between the closest elements is the same,\n  // the distance between the current number and the closest element\n  // is the smaller one\n  if (Math.abs(c - b) < Math.abs(d - b)) {\n    return Math.abs(c - b);\n  }\n\n  return Math.abs(d - b);\n};\n\nconst test = () => {\n  // Testing our functions\n  console.log(closestElementsDistance(1.0, 2.0));\n  console.log(closestElementsDistance(2.0, 1.0));\n  console.log(closestElementsDistance(1.0, 3.0));\n  console.log(closestElementsDistance(3.0, 1.0));\n  console.log(closestElementsDistance(1.0, 4.0));\n  console.log(closestElementsDistance(4.0, 1.0));\n  console.log(closestElementsDistance(1.0, 5.0));\n  console.log(closestElementsDistance(5.0, 1.0));\n  console.log(closestElementsDistance(2.0, 2.2));\n};\n\nif (require.main === module) {\n  test();\n}\n\nmodule.exports = closestElementsDistance;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n    let scale = 1.0\n    let min = numbers[0]\n    let max = numbers[0]\n    for (let i = 0; i < numbers.length; i++) {\n        if (min > numbers[i]) {\n            min = numbers[i]\n        }\n        if (max < numbers[i]) {\n            max = numbers[i]\n        }\n    }\n    let delta = max - min\n    if (delta === 0.0) {\n        return [0.0, 1.0]\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) / delta\n    }\n    return numbers\n}\n\nexport default rescaleToUnits\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n}\n\n/**\n  * @method filterOutIntegers\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> filterOutIntegers([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterOutIntegers = (values) => {\n  return values.filter(value => typeof value!== 'number');\n}\n\n/**\n  * @method filterOutFloats\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> filterOutFloats([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterOutFloats = (values) => {\n  return values.filter(value => typeof value!== 'number');\n}\n\n/**\n  * @method filterOutStrings\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> filterOutStrings([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterOutStrings = (values) => {\n  return values.filter(value => typeof value!=='string');\n}\n\n/**\n  * @method filterOutObjects\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> filterOutObjects([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterOutObjects = (values) => {\n  return values.filter(value => typeof value!== 'object');\n}\n\n/**\n  * @method filterOutEmptyValues\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> filterOutEmptyValues([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterOutEmptyValues = (values) => {\n  return values.filter(value => value!== null);\n}\n\n/**\n  * @method filterOutNullValues\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> filterOutNullValues([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterOutNullValues = (values) => {\n  return values.filter(value => value!== null);\n}\n\n/**\n  * @method filterOutUndefinedValues\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> filterOutUndefinedValues([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filterOutUndefinedValues = (values) => {\n  return values.filter(value => value!== undefined);\n}\n\n/**\n  * @method getLength\n  * @param {Array} values\n  * @return {Number}\n  * @example\n  * >>> getLength([1, 2, 3, 'abc', {}, []])\n  * 6\n  */\nconst getLength = (values) => {\n  return values.length;\n}\n\n/**\n  * @method getValues\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> getValues([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc', {}, []]\n  */\nconst getValues = (values) => {\n  return values;\n}\n\n/**\n  * @method sortIntegers\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> sortIntegers([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc', {}, []]\n  */\nconst sortIntegers = (values) => {\n  return values.sort((a, b) => {\n    return a - b;\n  });\n}\n\n/**\n  * @method sortFloats\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> sortFloats([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc', {}, []]\n  */\nconst sortFloats = (values) => {\n  return values.sort((a, b) => {\n    return a - b;\n  });\n}\n\n/**\n  * @method sortStrings\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> sortStrings([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc', {}, []]\n  */\nconst sortStrings = (values) => {\n  return values.sort((a, b) => {\n    return a - b;\n  });\n}\n\n/**\n  * @method sortObjects\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> sortObjects([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc', {}, []]\n  */\nconst sortObjects = (values) => {\n  return values.sort((a, b) => {\n    return a - b;\n  });\n}\n\n/**\n  * @method sortEmptyValues\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> sortEmptyValues([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3, 'abc', {}, []]\n  */\nconst sortEmptyValues = (values) => {\n  return values.sort((a, b) => {\n    return a - b;\n  });\n}\n\n/**\n  * @method sortNullValues\n  * @param {"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n  * Return index of first occurrence of substring in given string\n  * Return -1 if no occurence found\n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  "}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n    const result = [];\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n};\n\n/**\n * Find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  6\n  */\nconst smallerDivisors = (n) => {\n    const result = [];\n    for (let i = n + 1; i >= 1; i--) {\n        if (n % i === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n};\n\nconst main = () => {\n    const max = parseInt(input(), 10);\n    const maxLen = largestDivisors(max);\n    const result = maxLen.join(' ');\n    console.log(result);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  const factors = []\n  let factorization = []\n  let currentFactor = 1\n  let currentFactorNumber = 0\n  while (n > 0) {\n    while (n % currentFactor === 0) {\n      factorization.push(currentFactor)\n      n = n / currentFactor\n      currentFactorNumber++\n    }\n    if (n!== 1) {\n      factorization.push(n)\n    }\n    currentFactor++\n    currentFactorNumber++\n  }\n  return factorization\n}\n\nconsole.log(factorizes(24))\n\n// const { isPrime } = require('../prime.js')\n// const { factors } = require('../factorize.js')\n// const { factorizes } = require('../factorize.js')\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const unique = [];\n  const uniqueCount = [];\n  const map = new Map();\n\n  for (const number of numbers) {\n    if (map.has(number)) {\n      continue;\n    }\n    map.set(number, true);\n    unique.push(number);\n    uniqueCount.push(1);\n  }\n\n  return [unique, uniqueCount];\n};\n\nexport default removeDuplicate;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string.toLowerCase().split('').map((char) => {\n    if (char.toUpperCase() === char.toLowerCase()) {\n      return char;\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n};\n\n/*\n  For a given string, remove leading and trailing whitespace.\n  >>> trimSpaces('   Hello World!    ')\n  'Hello World!'\n  >>> trimSpaces(' Hello World! ')\n  'Hello World!'\n  */\nconst trimSpaces = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n};\n\n/*\n  For a given string, capitalize each word.\n  >>> capitalizeWords('Hello world')\n  'Hello World'\n  >>> capitalizeWords(' hello world ')\n  'Hello World'\n  */\nconst capitalizeWords = (string) => {\n  return string.replace(/\\b\\w+\\b/g, (match) => {\n    return match.charAt(0).toUpperCase() + match.slice(1);\n  });\n};\n\n/*\n  For a given string, split the string into an array, where each item is capitalized.\n  >>> splitWords('Hello world')\n  ['Hello', 'world']\n  >>> splitWords(' hello world ')\n  ['Hello', 'world']\n  */\nconst splitWords = (string) => {\n  return string.replace(/\\s+/g,'').split(' ');\n};\n\n/*\n  Given a string and an array of words, returns a string where the words in the array are capitalized.\n  >>> splitWords('Hello world', ['Hello', 'world'])\n  'Hello world'\n  >>> splitWords('Hello world', ['hello', 'world'])\n  'Hello world'\n  >>> splitWords('Hello world', ['Hello', 'World'])\n  'Hello World'\n  >>> splitWords('Hello world', ['Hello', 'World'])\n  'Hello World'\n  >>> splitWords('Hello world', ['Hello', 'World'])\n  'Hello World'\n  >>> splitWords('Hello world', ['hello', 'world'])\n  'Hello world'\n  >>> splitWords('Hello world', ['hello', 'world'])\n  'Hello world'\n  >>> splitWords('Hello world', ['Hello', 'World'])\n  'Hello World'\n  >>> splitWords('Hello world', ['Hello', 'World'])\n  'Hello World'\n  >>> splitWords('Hello world', ['Hello', 'World'])\n  'Hello World'\n  */\nconst capitalizeWordsByArray = (string, words) => {\n  return words.map(capitalizeWords).join('');\n};\n\n/*\n  Given a string and a function that returns an array of words, returns a string where the words in the array are capitalized.\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  */\nconst capitalizeWordsByFunction = (string, words) => {\n  return words(string).map(capitalizeWords).join('');\n};\n\n/*\n  Given a string and an array of words, returns a string where the words in the array are capitalized.\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  */\nconst capitalizeWordsByArrayAndFunction = (string, words) => {\n  return capitalizeWordsByFunction(words(string), words);\n};\n\n/*\n  Given a string and a function that returns an array of words, returns a string where the words in the array are capitalized.\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  'Hello World'\n  >>> splitWordsByArray('Hello world', splitWords)\n  '"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  strings.forEach((str) => {\n    result += str;\n  });\n  return result;\n};\n\nexport default concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((string) => string.indexOf(prefix) === 0)\n}\n\n/**\n  * @description Filter an input list of strings only for ones that start with a given prefix.\n  * @param {string} prefix - The prefix to filter with.\n  * @returns {Array} - An array of strings that start with the given prefix.\n  *\n  * @example\n  * // Filter an input list of strings only for ones that start with a given prefix.\n  * filterByPrefix('a', ['abc', 'bcd', 'cde', 'array'])\n  * // => ['abc', 'array']\n  */\nconst filterByPrefix = (prefix, strings) => {\n  return strings.filter((string) => string.indexOf(prefix) === 0)\n}\n\n/**\n  * @description Filter an input list of strings only for ones that contain a given substring.\n  * @param {string} substr - The substring to filter with.\n  * @returns {Array} - An array of strings that contain the given substring.\n  *\n  * @example\n  * // Filter an input list of strings only for ones that contain a given substring.\n  * filterBySubstr(['abc', 'bcd', 'cde', 'array'], 'a')\n  * // => ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstr = (strings, substr) => {\n  return strings.filter((string) => string.indexOf(substr) > -1)\n}\n\n/**\n  * @description Filter an input list of strings only for ones that contain a given substring.\n  * @param {string} substr - The substring to filter with.\n  * @returns {Array} - An array of strings that contain the given substring.\n  *\n  * @example\n  * // Filter an input list of strings only for ones that contain a given substring.\n  * filterBySubstr('abc', ['abc', 'bcd', 'cde', 'array'])\n  * // => ['abc']\n  */\nconst filterBySubstr = (substr, strings) => {\n  return strings.filter((string) => string.indexOf(substr) > -1)\n}\n\n/**\n  * @description Returns a random element from an array.\n  * @param {Array} array - The array to select a random element from.\n  * @returns {string} - A random string from the array.\n  *\n  * @example\n  * // Returns a random element from an array.\n  * randomElement(['abc', 'bcd', 'cde', 'array'])\n  * // => 'bcd'\n  */\nconst randomElement = (array) => {\n  return array[Math.floor(Math.random() * array.length)]\n}\n\n/**\n  * @description Return a random number from 0 to a number.\n  * @param {number} [number] - The number to start the random number from.\n  * @returns {number} - A random number from 0 to a number.\n  *\n  * @example\n  * // Return a random number from 0 to a number.\n  * randomNumber(3)\n  * // => 2\n  */\nconst randomNumber = (number) => {\n  return Math.floor(Math.random() * number)\n}\n\n/**\n  * @description Return a random number from a number to 0.\n  * @param {number} [number] - The number to start the random number from.\n  * @returns {number} - A random number from a number to 0.\n  *\n  * @example\n  * // Return a random number from a number to 0.\n  * randomNumber(3)\n  * // => 1\n  */\nconst randomNumber = (number) => {\n  return Math.floor(Math.random() * (number + 1))\n}\n\n/**\n  * @description Return a random number from a number to a number.\n  * @param {number} [number] - The number to start the random number from.\n  * @param {number} [number2] - The number to end the random number at.\n  * @returns {number} - A random number from a number to a number.\n  *\n  * @example\n  * // Return a random number from a number to a number.\n  * randomNumber(3, 5)\n  * // => 4\n  */\nconst randomNumber = (number, number2) => {\n  return Math.floor(Math.random() * (number2 - number + 1)) + number\n}\n\n/**\n  * @description Return a random number from a number to a number.\n  * @param {number} [number] - The number to start the random number from.\n  * @param {number} [number2] - The number to end the random number at.\n  * @returns {number} - A random number from a number to a number.\n  *\n  * @example\n  * // Return a random number from a number to a number.\n  * randomNumber(3, 5)\n  * // => 4\n  */\nconst randomNumber = (number, number2) => {\n  return Math.floor(Math.random() * (number2 - number + 1)) + number\n}\n\n/**\n  * @description Get the current timestamp in milliseconds.\n  * @returns {number} - The current timestamp in milliseconds.\n  *\n  * @example\n  * // Get the current timestamp in milliseconds.\n  * getTimeStamp()\n  * // => 1487506587000\n  */\nconst getTimeStamp = () => {\n  return Date.now()\n}\n\nexport {\n  add,\n  subtract,\n  multiply,\n  divide,\n  modulo,\n  equal,\n  lessThan,\n  lessThanOrEqual,\n  greaterThan,\n  greaterThanOrEqual,\n  sum,\n  filterBy,\n  filterByPrefix,\n  filterBySubstr,\n  randomElement,\n  randomNumber,\n  randomNumber,\n  randomNumber,\n  getTimeStamp,\n  filterBy,\n  filterByPrefix,\n"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  let positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n// Test the function\nconsole.log(gotPositive([-1, 2, -4, 5, 6]));\nconsole.log(gotPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 1 || n % 2 === 0) return false\n  if (n < 3) return true\n  return n % 2 === 0 && n!== 2 && n % 3 === 0 && n!== 3\n}\n\nconst isPalindrome = (n) => {\n  return n.toString() === n.toString().split('').reverse().join('')\n}\n\nconst reverse = (n) => {\n  return (n).split('').reverse().join('')\n}\n\nconst getPrimeFactors = (n) => {\n  if (n < 2) return []\n  if (n < 3) return [2]\n  return [2, 3].concat(\n    n.toString().split('').reduce((acc, n) => {\n      if (n < 2) return acc\n      if (n % 2 === 0) {\n        if (isPrime(n / 2)) {\n          acc.push(n / 2)\n        }\n      } else if (n % 3 === 0) {\n        if (isPrime(n / 3)) {\n          acc.push(n / 3)\n        }\n      }\n      return acc\n    }, [])\n  )\n}\n\nconst getPower = (n, p) => {\n  let i = n\n  while (i!== 1) {\n    if (i % p === 0) {\n      return i\n    }\n    i = i * n\n  }\n  return i\n}\n\nconst getSum = (n, p) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (p === 1) return n\n  return n * getSum(n - p, p - 1)\n}\n\nconst isValid = (n, p) => {\n  return (n > 1 && p > 1) && (n % p === 0) && (n % p!== n)\n}\n\nconst sumOfPrimes = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return n * sumOfPrimes(n - 1)\n}\n\nconst sumOfSquares = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return n * sumOfSquares(n - 1)\n}\n\nconst getDifference = (n, p) => {\n  return sumOfPrimes(n) - sumOfSquares(n)\n}\n\nconst getComposite = (n, p) => {\n  return (n * n) % p\n}\n\nconst getSumOfFactors = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return n * getSumOfFactors(n - 1)\n}\n\nconst getLargestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  return getLargestPrimeFactor(n / 2)\n}\n\nconst getLargestFactor = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  return getLargestFactor(n / 2)\n}\n\nconst getCompositeFactors = (n) => {\n  if (n === 0) return []\n  if (n === 1) return []\n  if (n === 2) return [2]\n  return [2, n].concat(\n    n.toString().split('').reduce((acc, n) => {\n      if (n < 2) return acc\n      if (n % 2 === 0) {\n        if (isPrime(n / 2)) {\n          acc.push(n / 2)\n        }\n      } else if (n % 3 === 0) {\n        if (isPrime(n / 3)) {\n          acc.push(n / 3)\n        }\n      }\n      return acc\n    }, [])\n  )\n}\n\nconst getSquareRoot = (n) => {\n  if (n === 1) return 1\n  return Math.sqrt(n)\n}\n\nconst getNthRoot = (n, nth) => {\n  if (n === 1) return 1\n  return getNthRoot(n, nth - 1) * n\n}\n\nconst getNthFactorial = (n) => {\n  return getNthRoot(n, n)\n}\n\nconst getNthFibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  return getNthFibonacci(n - 1) + getNthFibonacci(n - 2)\n}\n\nconst getFactorial = (n) => {\n  if (n === 0) return 1\n  return n * getFactorial(n - 1)\n}\n\nconst getFibonacci = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return getFibonacci(n - 1) + getFibonacci(n - 2)\n}\n\nconst getPermutation = (n, p) => {\n  if (n === 0) return []\n  if (n === 1) return []\n  return [...new Array(p + 1).fill(null)].map(() => n)\n}\n\nconst getPartialPermutation = (n, p) => {\n  if (n === 0) return []\n  if (n === 1) return []\n  return [...new Array(p + 1).fill(null)].slice(0, p + 1).map(() => n)\n}\n\nconst getReversePermutation = (n, p) => {\n  if (n === 0) return []\n  if (n === 1) return []\n  return [...new Array(p + 1).fill(null)].map((_, i) => n)\n}\n\nconst getRot"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 === 0) {\n    return findZero(xs.slice(1));\n  }\n\n  if (xs[0] === 0) {\n    return xs[0];\n  }\n\n  for (let i = 1; i < xs.length; i += 2) {\n    const x1 = xs[i - 1];\n    const x2 = xs[i];\n\n    if (x1 === 0) {\n      return x2;\n    }\n\n    if (x2 === 0) {\n      return x1;\n    }\n\n    if (x1 * x2 === 0) {\n      return x1;\n    }\n  }\n}\n\n/*\n  Evaluate the function f(x) = x^3 - x^2 + x - 3\n  and its derivative.\n  Evaluate the integral.\n  Evaluate the heigth of the triangle.\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 - x^2 + x - 3\n  f'(x) = 3x^2 - 2x\n  returns an object containing the values\n  f(x) and f'(x)\n  f(x) = x^3 -"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const divisibleByThree = sorted.filter(v => v % 3 === 0);\n  const nonDivisibleByThree = sorted.filter(v => v % 3!== 0);\n  return [...nonDivisibleByThree,...divisibleByThree];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let hash = {};\n  return l.filter(x => hash[x] === undefined).map(x => hash[x] = x);\n};\n\n/**\n  * @function groupBy\n  * Group elements by key\n  *\n  * @param {array} array\n  * @param {function} keyFn\n  * @param {object} memo\n  * @return {object}\n  */\nconst groupBy = (array, keyFn, memo) => {\n  memo = memo || {};\n\n  return array.reduce((memo, x, i) => {\n    let group = memo[keyFn(x)];\n\n    if (group === undefined) {\n      group = memo[keyFn(x)] = [x];\n    } else {\n      group.push(x);\n    }\n\n    return memo;\n  }, memo);\n};\n\n/**\n  * @function countBy\n  * Group elements by key\n  *\n  * @param {array} array\n  * @param {function} keyFn\n  * @return {object}\n  */\nconst countBy = (array, keyFn) => {\n  return array.reduce((memo, x, i) => {\n    memo[keyFn(x)] = memo[keyFn(x)] || 0;\n    memo[keyFn(x)]++;\n    return memo;\n  }, {});\n};\n\n/**\n  * @function groupByKey\n  * Group elements by key\n  *\n  * @param {array} array\n  * @param {function} keyFn\n  * @param {object} memo\n  * @return {object}\n  */\nconst groupByKey = (array, keyFn, memo) => {\n  memo = memo || {};\n\n  return array.reduce((memo, x, i) => {\n    let group = memo[keyFn(x)];\n\n    if (group === undefined) {\n      group = memo[keyFn(x)] = {};\n      group[keyFn(x)] = [x];\n    } else {\n      group[keyFn(x)].push(x);\n    }\n\n    return memo;\n  }, memo);\n};\n\n/**\n  * @function uniq\n  * Remove duplicate elements in a list\n  *\n  * @param {array} array\n  * @return {array}\n  */\nconst uniq = (array) => {\n  return array.filter((v, i) => array.indexOf(v) === i);\n};\n\nexport {\n  isArray,\n  isObject,\n  isString,\n  isFunction,\n  isNumber,\n  isBoolean,\n  isNull,\n  isUndefined,\n  isArrayOfStrings,\n  isArrayOfNumbers,\n  isArrayOfObjects,\n  isObjectOfStrings,\n  isObjectOfNumbers,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  isObjectOfObjects,\n  "}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  return Math.max.apply(null, l);\n};\n\nmodule.exports = maxElements;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const res = []\n\n  for (let i = 1; i <= n; i++) {\n    if (isFizz(i) || isBuzz(i)) {\n      res.push(i)\n    }\n  }\n\n  return res\n}\n\nfunction isFizz(n) {\n  return (n % 3 === 0) && (n % 5 === 0)\n}\n\nfunction isBuzz(n) {\n  return (n % 3 === 0) || (n % 5 === 0)\n}\n\n/*\n  Given an integer n, return True if it is a power of 2, False otherwise.\n  >>> isPowerOfTwo(1)\n  True\n  >>> isPowerOfTwo(3)\n  True\n  >>> isPowerOfTwo(4)\n  False\n  >>> isPowerOfTwo(10)\n  False\n  >>> isPowerOfTwo(15)\n  False\n  >>> isPowerOfTwo(16)\n  True\n  >>> isPowerOfTwo(32)\n  True\n  */\nconst isPowerOfTwo = (n) => {\n  return (n === 1) || (n === 2) || (n === 4) || (n === 8) || (n === 16) || (n === 32)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let sorted = [];\n  for (let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i]);\n  }\n  return sorted;\n}\n\nexport default sortsEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  encodes string using encode_cyclic function\n  */\nconst encode = (s) => encodeCyclic(s);\n\n/*\n  decodes string using decode_cyclic function\n  */\nconst decode = (s) => decodeCyclic(s);\n\n/*\n  returns cyclic string.\n  */\nconst cyclicString = (n) => {\n  const cyclic = [];\n  while (n-- > 0)\n    cyclic.unshift(cyclic.pop());\n  return cyclic.join('');\n}\n\nmodule.exports = {\n  cyclicString,\n  encode,\n  decode,\n  encodeCyclic,\n  decodeCyclic,\n  compare,\n  cyclicString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  const fib = fibs.get(n);\n  const isPrime = isPrime(n);\n\n  return fib[1] + fib[2];\n};\n\nexport default primeFibs;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  if (l.length < 3) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i];\n  }\n  return (l.indexOf(sum) >= 0 && l.indexOf(sum) < l.length - 1);\n};\n\nconst result = triplesSummingToZeroed([1, 3, -2, 1]);\nconsole.log(`Result: ${result}`);\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  const cars = Array.from({ length: n }).map(() => {\n    return {\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      vx: Math.random() * 0.1,\n      vy: Math.random() * 0.1\n    }\n  })\n\n  cars.sort((a, b) => {\n    return a.x - b.x\n  })\n\n  const colliding = cars.filter(car => {\n    return cars.filter(collidingCar => {\n      return (car.x < collidingCar.x + collidingCar.vx * 10) &&\n        (car.x > collidingCar.x - collidingCar.vx * 10) &&\n        (car.y < collidingCar.y + collidingCar.vy * 10) &&\n        (car.y > collidingCar.y - collidingCar.vy * 10)\n    })\n  })\n\n  return colliding.length\n}\n\nconsole.log(carsRacesCollision(10))\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  const len = l.length\n  const l1 = [...l, 1]\n  const l2 = [...l, 1, 1]\n  const l3 = [...l, 1, 1, 1]\n  const l4 = [...l, 1, 1, 1, 1]\n  const l5 = [...l, 1, 1, 1, 1, 1]\n  const l6 = [...l, 1, 1, 1, 1, 1, 1]\n  const l7 = [...l, 1, 1, 1, 1, 1, 1, 1]\n  const l8 = [...l, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l9 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l10 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l11 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l12 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l13 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l14 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l15 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l16 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l17 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l18 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l19 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l20 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l21 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l22 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l23 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l24 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l25 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l26 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l27 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l28 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l29 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l30 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l31 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l32 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  const l33 = [...l, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  if (l.length === 1) {\n    return false;\n  }\n\n  const first = l[0];\n  const second = l[1];\n  const firstSumsToSecond = first + second;\n  const secondSumsToFirst = second + first;\n\n  if (firstSumsToSecond === 0 && secondSumsToFirst === 0) {\n    return false;\n  }\n\n  return true;\n};\n\nexport { pairSumsToZero };\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  let string = ''\n  let number = x\n\n  if (number < 0) {\n    number = -number\n  }\n\n  while (number >= base) {\n    string = (number % base).toString(base) + string\n    number = Math.floor(number / base)\n  }\n\n  return number.toString(base) + string\n}\n\n/*Return the sum of two numbers.\n  >>> add(3, 4)\n  9\n  >>> add(3, -4)\n  -1\n  >>> add(3, -4)\n  -1\n  >>> add(3, 4)\n  9\n  >>> add(5, 3)\n  8\n  >>> add(1, -1)\n  1\n  >>> add(1, -1)\n  1\n  >>> add(1, 1)\n  2\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\n/*Return the product of two numbers.\n  >>> multiply(3, 4)\n  12\n  >>> multiply(3, -4)\n  -12\n  >>> multiply(3, -4)\n  -12\n  >>> multiply(3, 4)\n  12\n  >>> multiply(5, 3)\n  15\n  >>> multiply(1, -1)\n  1\n  >>> multiply(1, -1)\n  1\n  >>> multiply(1, 1)\n  1\n  */\nconst multiply = (x, y) => {\n  return x * y\n}\n\n/*Return the difference between two numbers.\n  >>> subtract(3, 4)\n  1\n  >>> subtract(3, -4)\n  -3\n  >>> subtract(3, -4)\n  -3\n  >>> subtract(3, 4)\n  1\n  >>> subtract(5, 3)\n  2\n  >>> subtract(1, -1)\n  0\n  >>> subtract(1, -1)\n  0\n  >>> subtract(1, 1)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y\n}\n\n/*Return the quotient of two numbers.\n  >>> divide(3, 4)\n  0.75\n  >>> divide(3, -4)\n  -0.75\n  >>> divide(3, -4)\n  -0.75\n  >>> divide(3, 4)\n  0.75\n  >>> divide(5, 3)\n  2.0\n  >>> divide(1, -1)\n  Infinity\n  >>> divide(1, -1)\n  Infinity\n  >>> divide(1, 1)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y\n}\n\n/*Return the sum of the squares of the numbers 1 to n.\n  >>> squareSum(3)\n  9\n  >>> squareSum(3)\n  9\n  >>> squareSum(5)\n  25\n  >>> squareSum(1)\n  0\n  >>> squareSum(1)\n  0\n  >>> squareSum(2)\n  4\n  */\nconst squareSum = (n) => {\n  return add(multiply(n, n), multiply(n, n))\n}\n\n/*Return the sum of the cubes of the numbers 1 to n.\n  >>> cubeSum(3)\n  27\n  >>> cubeSum(3)\n  27\n  >>> cubeSum(5)\n  625\n  >>> cubeSum(1)\n  0\n  >>> cubeSum(1)\n  0\n  >>> cubeSum(2)\n  8\n  */\nconst cubeSum = (n) => {\n  return add(multiply(n, multiply(n, n)), multiply(n, multiply(n, n)))\n}\n\n/*Return the sum of the cubes of the numbers 1 to n.\n  >>> cubeSum(3)\n  27\n  >>> cubeSum(3)\n  27\n  >>> cubeSum(5)\n  625\n  >>> cubeSum(1)\n  0\n  >>> cubeSum(1)\n  0\n  >>> cubeSum(2)\n  8\n  */\nconst cubeSum = (n) => {\n  return add(multiply(n, multiply(n, multiply(n, n))), multiply(n, multiply(n, multiply(n, n))))\n}\n\n/*Return the difference of the sum of the squares and the sum of the cubes.\n  >>> difference(3)\n  -1\n  >>> difference(3)\n  -1\n  >>> difference(5)\n  -5\n  >>> difference(1)\n  0\n  >>> difference(1)\n  0\n  >>> difference(2)\n  2\n  */\nconst difference = (n) => {\n  return subtract(squareSum(n), cubeSum(n))\n}\n\n/*Return the sum of the differences between successive members of the list.\n  >>> differenceList([1, 2, 3])\n  1\n  >>> differenceList([1, 2, 3])\n  1\n  >>> differenceList([1, 2, 3])\n  1\n  >>> differenceList([1, 2, 3])\n  1\n  >>> differenceList([1, 2, 4])\n  3\n  >>> differenceList([1, 2, 4, 6])\n  5\n  >>> differenceList([1, 2, 4, 6, 8, 9])\n  14\n  >>> differenceList([1, 2, 4, 6, 8, 9])\n  14\n  >>> differenceList([1, 2, 4, 6, 8, 9])\n  14\n  >>> differenceList([1, 2, 4, 6, 8, 9])\n  14\n  >>> differenceList([1, 2, 4, 6, 8, 9])\n  14\n  */\nconst differenceList = (list) => {\n  let sum = 0\n  for (let i = 1; i < list.length; i++) {\n    sum += subtract(list[i], list[i - 1])\n  }\n  return sum\n}\n\n/*Return the difference of the sum of the squares of the first n numbers in the list and the sum of the cubes of the remaining n numbers.\n  >>> differenceList([1, 2, 3])\n  1\n  >>> difference"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  return a * h / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas2 = (a, h, l) => {\n  return (a * h + l * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas3 = (a, h, l, m) => {\n  return (a * h + l * m + l * a + m * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas4 = (a, h, l, m, n) => {\n  return (a * h + l * m + l * n + m * n + a * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas5 = (a, h, l, m, n, p) => {\n  return (a * h + l * m + l * n + m * n + n * p + a * a + p * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas6 = (a, h, l, m, n, p, q) => {\n  return (a * h + l * m + l * n + m * n + n * p + p * q + a * a + q * a + p * a + a * q) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas7 = (a, h, l, m, n, p, q, r) => {\n  return (a * h + l * m + l * n + m * n + n * p + p * q + q * r + a * a + r * a + p * a + a * q + q * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas8 = (a, h, l, m, n, p, q, r, s) => {\n  return (a * h + l * m + l * n + m * n + n * p + p * q + q * r + r * s + a * a + s * a + p * a + a * q + q * a + r * a + s * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas9 = (a, h, l, m, n, p, q, r, s, t) => {\n  return (a * h + l * m + l * n + m * n + n * p + p * q + q * r + r * s + s * t + a * a + t * a + p * a + a * q + q * a + r * a + s * a + t * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas10 = (a, h, l, m, n, p, q, r, s, t, u) => {\n  return (a * h + l * m + l * n + m * n + n * p + p * q + q * r + r * s + s * t + t * u + a * a + u * a + p * a + a * q + q * a + r * a + s * a + t * a + u * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas11 = (a, h, l, m, n, p, q, r, s, t, u, v) => {\n  return (a * h + l * m + l * n + m * n + n * p + p * q + q * r + r * s + s * t + t * u + u * v + a * a + v * a + p * a + a * q + q * a + r * a + s * a + t * a + u * a + v * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas12 = (a, h, l, m, n, p, q, r, s, t, u, v, w) => {\n  return (a * h + l * m + l * n + m * n + n * p + p * q + q * r + r * s + s * t + t * u + u * v + v * w + a * a + w * a + p * a + a * q + q * a + r * a + s * a + t * a + u * a + v * a + w * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas13 = (a, h, l, m, n, p, q, r, s, t, u, v, w, x) => {\n  return (a * h + l * m + l * n + m * n + n * p + p * q + q * r + r * s + s * t + t * u + u * v + v * w + w * x + a * a + x * a + p * a + a * q + q * a + r * a + s * a + t * a + u * a + v * a + w * a + x * a) / 2\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n\nHigh is the maximum of high and low.\n*/\nconst trianglesAreas14 = (a, h, l, m, n, p, q, r, s, t, u,"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let n0 = 0\n  let n1 = 1\n  let n2 = 1\n  let n3 = 2\n  let n4 = 0\n  let c = 0\n  while(n--) {\n    c = n0 + n1\n    n2 = n1\n    n1 = n0\n    n0 = c\n  }\n  return n2 + n3 + n4\n}\n\n/*\nThe Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\nfib5(0) -> 0\nfib5(1) -> 0\nfib5(2) -> 2\nfib5(3) -> 1\nfib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5) + fib5(n-6) + fib5(n-7) + fib5(n-8) + fib5(n-9) + fib5(n-10) + fib5(n-11) + fib5(n-12) + fib5(n-13) + fib5(n-14) + fib5(n-15) + fib5(n-16) + fib5(n-17) + fib5(n-18) + fib5(n-19) + fib5(n-20) + fib5(n-21) + fib5(n-22) + fib5(n-23) + fib5(n-24) + fib5(n-25) + fib5(n-26) + fib5(n-27) + fib5(n-28) + fib5(n-29) + fib5(n-30) + fib5(n-31) + fib5(n-32) + fib5(n-33) + fib5(n-34) + fib5(n-35) + fib5(n-36) + fib5(n-37) + fib5(n-38) + fib5(n-39) + fib5(n-40) + fib5(n-41) + fib5(n-42) + fib5(n-43) + fib5(n-44) + fib5(n-45) + fib5(n-46) + fib5(n-47) + fib5(n-48) + fib5(n-49) + fib5(n-50) + fib5(n-51) + fib5(n-52) + fib5(n-53) + fib5(n-54) + fib5(n-55) + fib5(n-56) + fib5(n-57) + fib5(n-58) + fib5(n-59) + fib5(n-60) + fib5(n-61) + fib5(n-62) + fib5(n-63) + fib5(n-64) + fib5(n-65) + fib5(n-66) + fib5(n-67) + fib5(n-68) + fib5(n-69) + fib5(n-70) + fib5(n-71) + fib5(n-72) + fib5(n-73) + fib5(n-74) + fib5(n-75) + fib5(n-76) + fib5(n-77) + fib5(n-78) + fib5(n-79) + fib5(n-80) + fib5(n-81) + fib5(n-82) + fib5(n-83) + fib5(n-84) + fib5(n-85) + fib5(n-86) + fib5(n-87) + fib5(n-88) + fib5(n-89) + fib5(n-90) + fib5(n-91) + fib5(n-92) + fib5(n-93) + fib5(n-94) + fib5(n-95) + fib5(n-96) + fib5(n-97) + fib5(n-98) + fib5(n-99) + fib5(n-100) + fib5(n-101) + fib5(n-102) + fib5(n-103) + fib5(n-104) + fib5(n-105) + fib5(n-106) + fib5(n-107) + fib5(n-108) + fib5(n-109) + fib5(n-110) + fib5(n-111) + fib5(n-112) + fib5(n-113) + fib5(n-114) + fib5(n-115) + fib5(n-116) + fib5(n-117) + fib5(n-118) + fib5(n-119) + fib5(n-120) + fib5(n-121) + fib5(n-122) + fib5(n-123) + fib5(n-124) + fib5(n-125) + fib5(n-126) + fib5(n-127) + fib5(n-128) + fib5(n-129) + fib5(n-130) + fib5(n-131) + fib5(n-132) + fib5(n-133) + fib5(n-134) + fib5(n-135) + fib5(n-136) + fib5(n-137) + fib5(n-138) + fib5(n-139) + fib5(n-140) + fib5(n-141) + fib5(n-142) + fib5(n-143) + fib5(n-144) + fib5(n-145) + fib5(n-146) + fib5(n-147) + fib5(n-148) + fib5(n-149) +"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len === 0) return NaN\n  if (len === 1) return l[0]\n  if (len % 2 === 0) {\n    return (l[(len - 1) / 2] + l[(len - 1) / 2 + 1]) / 2\n  }\n  return l[(len + 1) / 2]\n}\n\n/* Return the smallest element in the list l.\n  >>> min([1, 2, 3])\n  1\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (l) => {\n  if (l.length === 0) return NaN\n  return l[0]\n}\n\n/* Return the largest element in the list l.\n  >>> max([1, 2, 3])\n  3\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (l) => {\n  if (l.length === 0) return NaN\n  return l[l.length - 1]\n}\n\n/* Return the index of the largest element in the list l.\n  >>> maxIndex([1, 2, 3])\n  2\n  >>> maxIndex([1, 2, 3, 4, 5])\n  4\n  */\nconst maxIndex = (l) => {\n  if (l.length === 0) return NaN\n  return l.length - 1\n}\n\n/* Return the index of the smallest element in the list l.\n  >>> minIndex([1, 2, 3])\n  0\n  >>> minIndex([1, 2, 3, 4, 5])\n  0\n  */\nconst minIndex = (l) => {\n  if (l.length === 0) return NaN\n  return 0\n}\n\n/*Return a sorted list.\n  >>> sorted([3, 1, 2, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sorted([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sorted([3, 1, 2, 4, 5], cmp)\n  [1, 2, 3, 4, 5]\n  >>> sorted([3, 1, 2, 4, 5], cmp, reverse)\n  [5, 4, 3, 2, 1]\n  */\nconst sorted = (l, cmp) => {\n  if (l.length === 0) return []\n  if (typeof cmp!== 'function') cmp = (a, b) => a - b\n  let i\n  let len = l.length\n  const result = Array(len)\n  for (i = 0; i < len; i++) {\n    result[i] = l[i]\n  }\n  result.sort(cmp)\n  return result\n}\n\n/* Return a copy of the list l.\n  >>> [1, 2, 3].clone()\n  [1, 2, 3]\n  >>> [1, 2, 3, 4, 5].clone()\n  [1, 2, 3, 4, 5]\n  */\nconst clone = (l) => {\n  const len = l.length\n  if (len === 0) return []\n  const result = Array(len)\n  for (let i = 0; i < len; i++) {\n    result[i] = l[i]\n  }\n  return result\n}\n\n/* Return an array containing all elements of the list l.\n  >>> [1, 2, 3].toArray()\n  [1, 2, 3]\n  >>> [1, 2, 3, 4, 5].toArray()\n  [1, 2, 3, 4, 5]\n  >>> [1, 2, 3].toArray(2)\n  [1, 2]\n  */\nconst toArray = (l, length) => {\n  const len = l.length\n  if (length === 0) return []\n  if (length > len) {\n    throw new Error(`toArray() length = ${length}, list.length = ${len}`)\n  }\n  const result = Array(length)\n  for (let i = 0; i < length; i++) {\n    result[i] = l[i]\n  }\n  return result\n}\n\n/* Return a string containing all elements of the list l.\n  >>> [1, 2, 3].toString()\n  '1,2,3'\n  >>> [1, 2, 3, 4, 5].toString()\n  '1,2,3,4,5'\n  >>> [1, 2, 3].toString(',')\n  '1,2,3'\n  */\nconst toString = (l, separator) => {\n  const len = l.length\n  if (len === 0) return ''\n  if (len === 1) return l[0]\n  return l.join(separator)\n}\n\nexport {\n  min,\n  max,\n  median,\n  clone,\n  toArray,\n  toString\n}\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  text = text.replace(/\\s+/g, '');\n  if (text.length === 0) return true;\n  let front = text.substr(0, text.length / 2);\n  let back = text.substr(text.length / 2, text.length);\n  return front === back.replace(/[^\\w]/g, '');\n};\n\n/*\n  Reverses a given string\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcd')\n  'cdab'\n  >>> reverse('a')\n  'a'\n  >>> reverse('aa')\n  'aa'\n  >>> reverse('aaaa')\n  'aaaa'\n  >>> reverse('aab')\n  'bbaa'\n  >>> reverse('aa')\n  'aa'\n  >>> reverse('a')\n  'a'\n  >>> reverse('a')\n  'a'\n  */\nconst reverse = (text) => {\n  if (text.length === 0) return text;\n  return text.split('').reverse().join('');\n};\n\n/*\n  Returns a string made of given text repeated the number of times given\n  >>> repeat('abc', 2)\n  'abca'\n  >>> repeat('ab', 1)\n  'ab'\n  >>> repeat('ab', 2)\n  'abab'\n  >>> repeat('ab', 3)\n  'ababab'\n  >>> repeat('ab', 0)\n  ''\n  >>> repeat('ab', -1)\n  Traceback (most recent call last):\n   ...\n  ValueError: 'negative' repetitions not allowed\n  */\nconst repeat = (text, times) => {\n  if (text.length === 0) return '';\n  if (times === 0) return '';\n  if (times === 1) return text;\n  return text.split('').reduce((acc, char) => acc + char, '');\n};\n\n/*\n  Takes an array and turns it into a string\n  >>> arrayToString([1, 2, 3])\n  '1, 2, 3'\n  >>> arrayToString([1, 2, 3, 4])\n  '1, 2, 3, 4'\n  >>> arrayToString([1, 2, 3, 4, 5])\n  '1, 2, 3, 4, 5'\n  >>> arrayToString([1, 2, 3, 4, 5, 6])\n  '1, 2, 3, 4, 5, 6'\n  >>> arrayToString([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '1, 2, 3, 4, 5, 6, 7, 8, 9'\n  >>> arrayToString([])\n  ''\n  >>> arrayToString(['1', '2', '3'])\n  '1, 2, 3'\n  >>> arrayToString([1, 2, 3])\n  '1, 2, 3'\n  >>> arrayToString([1, 2, 3, 4])\n  '1, 2, 3, 4'\n  >>> arrayToString([1, 2, 3, 4, 5])\n  '1, 2, 3, 4, 5'\n  >>> arrayToString([1, 2, 3, 4, 5, 6])\n  '1, 2, 3, 4, 5, 6'\n  >>> arrayToString([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '1, 2, 3, 4, 5, 6, 7, 8, 9'\n  >>> arrayToString([])\n  ''\n  >>> arrayToString(['1', '2', '3'])\n  '1, 2, 3'\n  >>> arrayToString([1, 2, 3])\n  '1, 2, 3'\n  >>> arrayToString([1, 2, 3, 4])\n  '1, 2, 3, 4'\n  >>> arrayToString([1, 2, 3, 4, 5])\n  '1, 2, 3, 4, 5'\n  >>> arrayToString([1, 2, 3, 4, 5, 6])\n  '1, 2, 3, 4, 5, 6'\n  >>> arrayToString([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '1, 2, 3, 4, 5, 6, 7, 8, 9'\n  */\nconst arrayToString = (array) => {\n  if (array.length === 0) return '';\n  if (array.length === 1) return array[0];\n  return array.reduce((acc, elem) => acc + ','+ elem, '');\n};\n\n/*\n  Takes a string and turns it into an array\n  >>> stringToArray('1, 2, 3')\n  [1, 2, 3]\n  >>> stringToArray('1, 2, 3, 4')\n  [1, 2, 3, 4]\n  >>> stringToArray('1, 2, 3, 4, 5')\n  [1, 2, 3, 4, 5]\n  >>> stringToArray('1, 2, 3, 4, 5, 6')\n  [1, 2, 3, 4, 5, 6]\n  >>> stringToArray('1, 2, 3, 4, 5, 6, 7, 8, 9')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> stringToArray('')\n  []\n  >>> stringToArray('1, 2, 3')\n  [1, 2, 3]\n  >>> stringToArray('1, 2, 3, 4')\n  [1, 2, 3, 4]\n  >>> stringToArray('1, 2, 3, 4, 5')\n  [1, 2, 3, 4, 5]\n  >>> stringToArray('1, 2, 3, 4, 5, 6')\n  [1, 2, 3, 4, 5, 6]\n  >>> stringToArray('1, 2, 3, 4, 5, 6, 7, 8, 9')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst string"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const nl = Math.log(n) / Math.log(2);\n  const pl = Math.log(p) / Math.log(2);\n  let c = 0;\n  for (let i = 0; i < nl; i++) {\n    c = (c + 1) % p;\n  }\n  return c;\n};\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  encode_shift: encode_shift,\n  decode_shift: decode_shift\n}<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  let index = text.length - 1\n  while (index >= 0) {\n    if (vowels.includes(text[index])) {\n      text = text.slice(0, index) + text.slice(index + 1)\n      index = text.length - 1\n    }\n    index--\n  }\n  return text\n}\n\nmodule.exports = removeVowel\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n    return l.reduce((acc, x, i) => {\n        if (x < t) {\n            acc = true;\n        }\n        return acc;\n    }, false);\n};\n\n// TEST BELOW THRESHOLD\nconsole.log(`belowThresholds([1, 2, 4, 10], 100) = ${belowThresholds([1, 2, 4, 10], 100)}`);\nconsole.log(`belowThresholds([1, 20, 4, 10], 5) = ${belowThresholds([1, 20, 4, 10], 5)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n};\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3));\n// console.log(adding(5, 7));\n\n// const adding = (x, y) => {\n//   return x + y;\n// };\n\n// console.log(adding(2, 3"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    for (let i = 0; i < s0.length; i++) {\n        if (s0.charAt(i)!== s1.charAt(i)) return false;\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same, ignoring the case of the characters.\n  >>> sameCase('abcd', 'abcd')\n  true\n  >>> sameCase('abcd', 'cDABd')\n  false\n  >>> sameCase('abcd', 'cDabCd')\n  true\n  >>> sameCase('abcd', 'cDabCd')\n  true\n  >>> sameCase('abcd', 'cDdabCd')\n  false\n  >>> sameCase('abcd', 'abcd', true)\n  true\n  >>> sameCase('abcd', 'cDdabCd', true)\n  false\n  */\nconst sameCase = (s0, s1, ignoreCase) => {\n    if (s0.length!== s1.length) return false;\n    for (let i = 0; i < s0.length; i++) {\n        if (ignoreCase && s0.charAt(i).toUpperCase()!== s1.charAt(i).toUpperCase()) return false;\n        if (s0.charAt(i)!== s1.charAt(i)) return false;\n    }\n    return true;\n};\n\n/*\n  Check if a word contains a specified character.\n  >>> containsChar('abcd', 'a')\n  true\n  >>> containsChar('abcd', 'z')\n  false\n  >>> containsChar('abcd', 'd')\n  true\n  >>> containsChar('abcd', 'x')\n  false\n  >>> containsChar('abcd', 'b')\n  true\n  >>> containsChar('abcd', 'b', true)\n  true\n  >>> containsChar('abcd', 'b', false)\n  true\n  >>> containsChar('abcd', 'z', false)\n  true\n  >>> containsChar('abcd', 'b', true, true)\n  true\n  >>> containsChar('abcd', 'b', true, false)\n  true\n  >>> containsChar('abcd', 'b', false, true)\n  false\n  */\nconst containsChar = (s0, s1, ignoreCase, ignoreCaseAll) => {\n    if (ignoreCaseAll) return containsCharIgnoreCase(s0, s1);\n    return containsCharIgnoreCase(s0, s1, ignoreCase);\n};\n\nconst containsCharIgnoreCase = (s0, s1, ignoreCase) => {\n    for (let i = 0; i < s0.length; i++) {\n        if (ignoreCase && s0.charAt(i).toUpperCase() === s1.charAt(i).toUpperCase()) return true;\n        if (s0.charAt(i) === s1.charAt(i)) return true;\n    }\n    return false;\n};\n\n/*\n  Check if two words are the same, ignoring the case of the characters.\n  >>> containsCharIgnoreCase('abcd', 'abcd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', 'cDdabCd')\n  true\n  >>> containsCharIgnoreCase('abcd', '"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  let f0 = 0,\n    f1 = 1,\n    f = 0,\n    i = 1;\n\n  while (i < n) {\n    f = f0 + f1;\n    f0 = f1;\n    f1 = f;\n    i++;\n  }\n\n  return f;\n};\n\nconsole.log(fibs(5));<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let open = 1;\n  let counter = 0;\n  let bracketsCount = brackets.length;\n  let current = 0;\n\n  while (open > 0 && counter < bracketsCount) {\n    current = brackets.indexOf(brackets[counter], current);\n    if (brackets[counter] === '<' && current + 1 < brackets.length && brackets[counter + 1] === '>') {\n      open += 1;\n    }\n    if (brackets[counter] === '>' && current - 1 >= 0 && brackets[counter - 1] === '<') {\n      open -= 1;\n    }\n    counter += 1;\n  }\n\n  return open === 0;\n};\n\n/*\n  Returns a string with \">\" characters that will close the string that contains\n  \"<\" and \">\".\n\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>> closeBrackets(\"<>\")\n  '><'\n  >>>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    let min = null;\n    let max = null;\n\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        } else if (l[i] < min) {\n            min = l[i];\n        }\n    }\n\n    return (max === min);\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const sorted = [...l1,...l2].sort();\n  let i = 0, j = 0;\n  while (i < sorted.length && j < sorted.length) {\n    if (sorted[i] === sorted[j]) {\n      i++;\n      j++;\n    } else {\n      if (i < sorted.length) {\n        l1 = l1.splice(i, 1);\n      }\n      if (j < sorted.length) {\n        l2 = l2.splice(j, 1);\n      }\n    }\n  }\n  return [...l1,...l2].filter(x => x!== undefined);\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  // If n is a prime, return n.\n  if (isPrime(n)) {\n    return n;\n  }\n\n  // Find the largest prime factor of n that is less than n.\n  let largestPrimeFactor = 1;\n  for (let i = 2; i <= Math.floor(n / 2); i++) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n\n  return largestPrimeFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallerPrimeFactor(13195)\n  13\n  >>> smallerPrimeFactor(2048)\n  2\n  */\nconst smallerPrimeFactor = (n) => {\n  // If n is a prime, return n.\n  if (isPrime(n)) {\n    return n;\n  }\n\n  // Find the smallest prime factor of n that is greater than n.\n  let smallerPrimeFactor = 1;\n  for (let i = 2; i <= Math.floor(n / 2); i++) {\n    if (n % i > 0) {\n      smallerPrimeFactor = i;\n      break;\n    }\n  }\n\n  return smallerPrimeFactor;\n};\n\n/*Return the product of two numbers.\n  >>> product(2, 3)\n  6\n  >>> product(10, 3)\n  30\n  >>> product(1, 2)\n  1\n  >>> product(5, 5)\n  25\n  >>> product(5, 0)\n  0\n  >>> product(0, 5)\n  0\n  >>> product(0, 0)\n  0\n  */\nconst product = (num1, num2) => {\n  return num1 * num2;\n};\n\n/*Return the sum of two numbers.\n  >>> sum(2, 3)\n  5\n  >>> sum(10, 3)\n  13\n  >>> sum(1, 2)\n  3\n  >>> sum(5, 5)\n  25\n  >>> sum(5, 0)\n  5\n  >>> sum(0, 5)\n  5\n  >>> sum(0, 0)\n  0\n  */\nconst sum = (num1, num2) => {\n  return num1 + num2;\n};\n\n/*Return the difference of two numbers.\n  >>> difference(2, 3)\n  1\n  >>> difference(10, 3)\n  7\n  >>> difference(1, 2)\n  1\n  >>> difference(5, 5)\n  0\n  >>> difference(5, 0)\n  5\n  >>> difference(0, 5)\n  5\n  >>> difference(0, 0)\n  0\n  */\nconst difference = (num1, num2) => {\n  return num1 - num2;\n};\n\n/*Return the quotient of two numbers.\n  >>> quotient(2, 3)\n  2\n  >>> quotient(10, 3)\n  3\n  >>> quotient(1, 2)\n  1\n  >>> quotient(5, 5)\n  1\n  >>> quotient(5, 0)\n  0\n  >>> quotient(0, 5)\n  0\n  >>> quotient(0, 0)\n  0\n  */\nconst quotient = (num1, num2) => {\n  return num1 / num2;\n};\n\n/*Return the remainder of two numbers.\n  >>> remainder(2, 3)\n  1\n  >>> remainder(10, 3)\n  1\n  >>> remainder(1, 2)\n  1\n  >>> remainder(5, 5)\n  0\n  >>> remainder(5, 0)\n  5\n  >>> remainder(0, 5)\n  5\n  >>> remainder(0, 0)\n  0\n  */\nconst remainder = (num1, num2) => {\n  return num1 % num2;\n};\n\n/*Return the sum of the squares of two numbers.\n  >>> squareSum(2, 3)\n  9\n  >>> squareSum(10, 3)\n  30\n  >>> squareSum(1, 2)\n  1\n  >>> squareSum(5, 5)\n  25\n  >>> squareSum(5, 0)\n  0\n  >>> squareSum(0, 5)\n  0\n  >>> squareSum(0, 0)\n  0\n  */\nconst squareSum = (num1, num2) => {\n  return num1 + num1 * num2;\n};\n\n/*Return the average of two numbers.\n  >>> average(2, 3)\n  2\n  >>> average(10, 3)\n  4\n  >>> average(1, 2)\n  1.5\n  >>> average(5, 5)\n  5\n  >>> average(5, 0)\n  0\n  >>> average(0, 5)\n  0\n  >>> average(0, 0)\n  0\n  */\nconst average = (num1, num2) => {\n  return (num1 + num2) / 2;\n};\n\n/*Return the square root of a number.\n  >>> squareRoot(4)\n  2\n  >>> squareRoot(9)\n  3\n  >>> squareRoot(16)\n  4\n  >>> squareRoot(0)\n  0\n  >>> squareRoot(1)\n  1\n  >>> squareRoot(0)\n  0\n  */\nconst squareRoot = (num) => {\n  if (num === 0) {\n    return 0;\n  }\n\n  let numSquareRoot = 0;\n  while (num > 1) {\n    numSquareRoot = numSquareRoot + 1;\n    num = num / 2;\n  }\n\n  return numSquareRoot;\n};\n\n/*Return the number of permutations of a number.\n  >>> permutation(1)\n  1\n  >>> permutation(2)\n  2\n  >>> permutation(3)\n  6\n  >>> permutation(4)\n  24\n  >>> permutation(5)\n  120\n  >>> permutation(0)\n  0\n  >>> permutation(6)\n  720\n  */\nconst permutation = (num) => {\n  if (num === 0) {\n    return 1;\n  }\n\n  return factorial(num) / factorial(num - 1);\n};\n\n/*Return the factorial of a number.\n"}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumN is a function that sums a number n from 1 to n.\n  >>> sumN(1)\n  1\n  >>> sumN(2)\n  3\n  >>> sumN(30)\n  465\n  >>> sumN(100)\n  5050\n  >>> sumN(5)\n  15\n  >>> sumN(10)\n  55\n  >>> sumN(1)\n  1\n  */\nconst sumN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  factorial is a function that returns the factorial of a number.\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(5)\n  120\n  >>> factorial(100)\n  1040320\n  >>> factorial(10)\n  3628800\n  >>> factorial(1)\n  1\n  */\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  product is a function that returns the product of a number n and a number m.\n  >>> product(1,2)\n  1\n  >>> product(1,3)\n  3\n  >>> product(1,10)\n  3628800\n  >>> product(5,4)\n  60\n  >>> product(5,10)\n  5000000\n  >>> product(5,1)\n  5\n  >>> product(10,1)\n  10\n  >>> product(10,1)\n  10\n  >>> product(10,1)\n  10\n  */\nconst product = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return 0\n  }\n  return n * product(n - 1, m - 1)\n}\n\n/*\n  squares is a function that returns the squares of a number n.\n  >>> squares(1)\n  1\n  >>> squares(2)\n  4\n  >>> squares(5)\n  25\n  >>> squares(100)\n  50025\n  >>> squares(10)\n  100\n  >>> squares(1)\n  1\n  */\nconst squares = (n) => {\n  return n * n\n}\n\n/*\n  findThePrime is a function that finds a prime number within a given range.\n  >>> findThePrime(1)\n  2\n  >>> findThePrime(2)\n  3\n  >>> findThePrime(3)\n  5\n  >>> findThePrime(10)\n  11\n  >>> findThePrime(100)\n  101\n  >>> findThePrime(1000000)\n  100000001\n  >>> findThePrime(10000000000000)\n  10000000000000003\n  >>> findThePrime(2147483647)\n  2147483648\n  >>> findThePrime(2147483648)\n  2147483649\n  >>> findThePrime(2147483649)\n  4294967295\n  >>> findThePrime(4294967295)\n  4294967296\n  >>> findThePrime(4294967296)\n  2147483648\n  >>> findThePrime(2147483647)\n  2147483647\n  >>> findThePrime(0)\n  >>> findThePrime(-1)\n  >>> findThePrime(-2)\n  >>> findThePrime(-3)\n  >>> findThePrime(-10)\n  >>> findThePrime(-100)\n  >>> findThePrime(-1000000)\n  >>> findThePrime(-10000000000000)\n  >>> findThePrime(-2147483647)\n  >>> findThePrime(-2147483648)\n  >>> findThePrime(-2147483649)\n  >>> findThePrime(-4294967295)\n  >>> findThePrime(-4294967296)\n  >>> findThePrime(-4294967297)\n  >>> findThePrime(-4294967297)\n  >>> findThePrime(-4294967298)\n  >>> findThePrime(-4294967298)\n  >>> findThePrime(-4294967299)\n  >>> findThePrime(-4294967299)\n  >>> findThePrime(-4294967300)\n  >>> findThePrime(-4294967300)\n  >>> findThePrime(-4294967301)\n  >>> findThePrime(-4294967301)\n  >>> findThePrime(-4294967302)\n  >>> findThePrime(-4294967302)\n  >>> findThePrime(-4294967303)\n  >>> findThePrime(-4294967303)\n  >>> findThePrime(-4294967304)\n  >>> findThePrime(-4294967304)\n  >>> findThePrime(-4294967305)\n  >>> findThePrime(-4294967305)\n  >>> findThePrime(-4294967306)\n  >>> findThePrime(-4294967306)\n  >>> findThePrime(-4294967307)\n  >>> findThePrime(-4294967307)\n  >>> findThePrime(-4294967308)\n  >>> findThePrime(-4294967308)\n  >>> findThePrime(-4294967309)\n  >>> findThePrime(-4294967309)\n  >>> findThePrime(-4294967310)\n  >>> findThePrime(-4294967310)\n  >>> findThePrime(-4294967311)\n  >>> findThePrime(-4294967311)\n  >>> findThePrime(-4294967312)\n  >>> findThePrime(-4294967312)\n  >>> findThePrime(-4294967313)\n  >>> findThePrime(-4294967313)\n  >>> findThePrime(-4294967314)\n  >>> findThePrime(-4294967314)\n  >>> findThePrime(-4294967315)\n  >>> findThePrime(-4294967315)\n  >>> findThePrime(-4294967316)\n  >>> findThePrime(-4294967316"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.split(\"\").every((char) => char === \"(\");\n};\n\nconst isValid = (text) => {\n  let brackets = text.split(\"\");\n  let isCorrect = correctBracketing(brackets);\n  return isCorrect;\n};\n\nmodule.exports = isValid;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    let result = [0];\n    for (let i = 0; i < xs.length; i++) {\n        result.push(i + 1);\n    }\n    return result;\n};\n\n// Note:\n// We use the term `p = (xs, dxs)` to denote a `polynomial` (`xs` and `dxs`).\n// Note:\n// This algorithm is not the fastest one, but it is very easy to understand.\n// But there are still better ones.\n// \n// 1. Brute force\n// \n// \n// 2. Recurrence relation\n// \n// \n// 3. Lagrangian interpolation\n// \n// \n// 4. Approximate Newton's method\n// \n// \n// 5. Polynomial interpolation\n// \n// \n// 6. Newton's method\n// \n// \n// 7. Newton's method with a convergence criterion\n// \n// \n// 8. Newtons method with a convergence criterion\n// \n// \n// 9. Newton's method with a convergence criterion\n// \n// \n// 10. Newton's method with a convergence criterion\n// \n// \n// 11. Newton's method with a convergence criterion\n// \n// \n// 12. Newton's method with a convergence criterion\n// \n// \n// 13. Newton's method with a convergence criterion\n// \n// \n// 14. Newton's method with a convergence criterion\n// \n// \n// 15. Newton's method with a convergence criterion\n// \n// \n// 16. Newton's method with a convergence criterion\n// \n// \n// 17. Newton's method with a convergence criterion\n// \n// \n// 18. Newton's method with a convergence criterion\n// \n// \n// 19. Newton's method with a convergence criterion\n// \n// \n// 20. Newton's method with a convergence criterion\n// \n// \n// 21. Newton's method with a convergence criterion\n// \n// \n// 22. Newton's method with a convergence criterion\n// \n// \n// 23. Newton's method with a convergence criterion\n// \n// \n// 24. Newton's method with a convergence criterion\n// \n// \n// 25. Newton's method with a convergence criterion\n// \n// \n// 26. Newton's method with a convergence criterion\n// \n// \n// 27. Newton's method with a convergence criterion\n// \n// \n// 28. Newton's method with a convergence criterion\n// \n// \n// 29. Newton's method with a convergence criterion\n// \n// \n// 30. Newton's method with a convergence criterion\n// \n// \n// 31. Newton's method with a convergence criterion\n// \n// \n// 32. Newton's method with a convergence criterion\n// \n// \n// 33. Newton's method with a convergence criterion\n// \n// \n// 34. Newton's method with a convergence criterion\n// \n// \n// 35. Newton's method with a convergence criterion\n// \n// \n// 36. Newton's method with a convergence criterion\n// \n// \n// 37. Newton's method with a convergence criterion\n// \n// \n// 38. Newton's method with a convergence criterion\n// \n// \n// 39. Newton's method with a convergence criterion\n// \n// \n// 40. Newton's method with a convergence criterion\n// \n// \n// 41. Newton's method with a convergence criterion\n// \n// \n// 42. Newton's method with a convergence criterion\n// \n// \n// 43. Newton's method with a convergence criterion\n// \n// \n// 44. Newton's method with a convergence criterion\n// \n// \n// 45. Newton's method with a convergence criterion\n// \n// \n// 46. Newton's method with a convergence criterion\n// \n// \n// 47. Newton's method with a convergence criterion\n// \n// \n// 48. Newton's method with a convergence criterion\n// \n// \n// 49. Newton's method with a convergence criterion\n// \n// \n// 50. Newton's method with a convergence criterion\n// \n// \n// 51. Newton's method with a convergence criterion\n// \n// \n// 52. Newton's method with a convergence criterion\n// \n// \n// 53. Newton's method with a convergence criterion\n// \n// \n// 54. Newton's method with a convergence criterion\n// \n// \n// 55. Newton's method with a convergence criterion\n// \n// \n// 56. Newton's method with a convergence criterion\n// \n// \n// 57. Newton's method with a convergence criterion\n// \n// \n// 58. Newton's method with a convergence criterion\n// \n// \n// 59. Newton's method with a convergence criterion\n// \n// \n// 60. Newton's method with a convergence criterion\n// \n// \n// 61. Newton's method with a convergence criterion\n// \n// \n// 62. Newton's method with a convergence criterion\n// \n// \n// 63. Newton's method with a convergence criterion\n// \n// \n// 64. Newton's method with a convergence criterion\n// \n// \n// 65. Newton's method with a convergence criterion\n// \n// \n// 66. Newton's method with a convergence criterion\n// \n// \n// 67. Newton's method with a convergence criterion\n// \n// \n// 68. Newton's method with a convergence criterion\n// \n// \n// 69. Newton's method with a convergence criterion\n// \n// \n// 70. Newton's method with a convergence criterion\n// \n// \n// 71. Newton's method with a convergence criterion\n// \n// \n// 72. Newton's method with a convergence criterion\n// \n// \n// 73. Newton's method with a convergence criterion\n// \n// \n// 74. Newton's method with a convergence criterion\n// \n// \n// 75. Newton's method with a convergence criterion\n// \n// \n// 76. Newton's method with a convergence criterion\n// \n// \n// 77. Newton's method with a convergence criterion\n// \n// \n// 78. Newton's method with a convergence criterion\n// \n// "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const a = 0, b = 1\n  return (n <= 1)? a : fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\n// const fibfib = (n) => {\n//   let a = 0, b = 1\n//   for (let i = 2; i <= n; i++) {\n//     a = b\n//     b = a + b\n//   }\n//   return a\n// }\n\nconsole.log(fibfib(2))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  return s.split('').filter((c) => c.match(/[aeiouy]/i)).length;\n};\n\nexport default vowelCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift >= x.length) return x.reverse().join('');\n  const result = x.slice();\n  result.splice(0, shift);\n  result.unshift(x.pop());\n  return result.join('');\n};\n\n// Test the function\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\nconsole.log(circularShift(12, 5));\nconsole.log(circularShift(12, 6));\nconsole.log(circularShift(12, 7));\nconsole.log(circularShift(12, 8));\nconsole.log(circularShift(12, 9));\nconsole.log(circularShift(12, 10));\nconsole.log(circularShift(12, 11));\nconsole.log(circularShift(12, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    sum += s[i].charCodeAt(0) - 96;\n  }\n  return sum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let c = 0;\n  for(let i = 0; i < s.length; i++) {\n    c += parseInt(s[i]);\n  }\n  let count = parseInt(n);\n  while(c >= count) {\n    c = c - parseInt(s[c - count]);\n  }\n  return c;\n}\n\nconst check = (s, n) => {\n  let res = fruitDistribution(s, n);\n  let len = s.length;\n  let count = n;\n  while(count <= res) {\n    count += parseInt(s[count - n]);\n  }\n  return count - res;\n}\n\nconst check2 = (s, n) => {\n  let c = 0;\n  for(let i = 0; i < s.length; i++) {\n    c += parseInt(s[i]);\n  }\n  let count = parseInt(n);\n  while(count <= c) {\n    count += parseInt(s[count - n]);\n  }\n  return count - c;\n}\n\nconst check3 = (s, n) => {\n  let c = 0;\n  let len = s.length;\n  for(let i = 0; i < len; i++) {\n    c += parseInt(s[i]);\n  }\n  let count = parseInt(n);\n  while(count <= c) {\n    count += parseInt(s[count - n]);\n  }\n  return count - c;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = []\n  let min = arr[0]\n  let index = 0\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min!== arr[i]) {\n        min = arr[i]\n        index = i\n      }\n    }\n  }\n\n  if (min === 0) {\n    return result\n  }\n\n  result.push([min, index])\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let i = 0\n    let len = lst.length\n    let res = -1\n    for(i = 0; i < len; i++) {\n        let freq = lst[i]\n        if(freq > 0 && res === -1) {\n            res = lst[i]\n        } else if(freq > 0 && res < lst[i]) {\n            res = lst[i]\n        }\n    }\n    return res\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const isSorted = sorted.every((val, i) => val === sorted[i + 1]);\n  if (!isSorted) {\n    throw new Error(\"The list must be sorted in order to be reversed.\");\n  }\n  return sorted;\n};\n\nmodule.exports = strangerSortsLists;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a < 3 || b < 3 || c < 3) {\n    return -1;\n  }\n  const area = ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2)\n  return Math.round(area * 100) / 100;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  return q.length === 2 &&\n    q[0] === q[q.length - 1] &&\n    (w === 0 || w === Math.max(q[0], q[q.length - 1]))\n};\n\n// const willItFlied = q => {\n//   return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n// };\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willItFlied = q => {\n  return q.length === 2 && q[0] === q[q.length - 1] && q[0] <= w;\n};\n\nconst willIt"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let n = arr.length\n  let s = 0\n  let p = 1\n  let i = n - 1\n  let j = 0\n\n  while (p <= n) {\n    s += p\n    while (i >= 0 && arr[i] === arr[i + p]) {\n      i -= p\n    }\n    i += p\n    if (i < n) {\n      p = p + 1\n    } else {\n      i = n\n      p = 1\n    }\n  }\n\n  return s\n}\n\nexport {smallerChange}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return lst1;\n  }\n  return [...new Set(lst1.concat(lst2))];\n};\n\nconsole.log(totalMatch([], []));\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n};\n\n/*Write a function that returns true if the given number is a prime number\n  and false otherwise.\n  Example:\n  isPrime(13) == true\n  prime(13) == 13\n  */\nconst isPrime = (a) => {\n  return!(a % 2 === 0 || a % 3 === 0 || a % 5 === 0 || a % 7 === 0 || a % 11 === 0 || a % 13 === 0 || a % 17 === 0 || a % 19 === 0 || a % 23 === 0 || a % 29 === 0 || a % 31 === 0 || a % 37 === 0 || a % 41 === 0 || a % 43 === 0 || a % 47 === 0 || a % 53 === 0 || a % 59 === 0 || a % 61 === 0 || a % 67 === 0 || a % 71 === 0 || a % 73 === 0 || a % 79 === 0 || a % 83 === 0 || a % 89 === 0 || a % 97 === 0 || a % 101 === 0 || a % 103 === 0 || a % 107 === 0 || a % 109 === 0 || a % 113 === 0 || a % 127 === 0 || a % 131 === 0 || a % 137 === 0 || a % 139 === 0 || a % 149 === 0 || a % 151 === 0 || a % 157 === 0 || a % 163 === 0 || a % 167 === 0 || a % 169 === 0 || a % 173 === 0 || a % 179 === 0 || a % 181 === 0 || a % 191 === 0 || a % 193 === 0 || a % 197 === 0 || a % 199 === 0 || a % 211 === 0 || a % 223 === 0 || a % 227 === 0 || a % 229 === 0 || a % 233 === 0 || a % 239 === 0 || a % 241 === 0 || a % 251 === 0 || a % 257 === 0 || a % 263 === 0 || a % 269 === 0 || a % 271 === 0 || a % 277 === 0 || a % 281 === 0 || a % 283 === 0 || a % 293 === 0 || a % 307 === 0 || a % 311 === 0 || a % 313 === 0 || a % 317 === 0 || a % 329 === 0 || a % 337 === 0 || a % 347 === 0 || a % 349 === 0 || a % 353 === 0 || a % 359 === 0 || a % 367 === 0 || a % 373 === 0 || a % 379 === 0 || a % 383 === 0 || a % 389 === 0 || a % 397 === 0 || a % 401 === 0 || a % 409 === 0 || a % 419 === 0 || a % 421 === 0 || a % 431 === 0 || a % 433 === 0 || a % 439 === 0 || a % 443 === 0 || a % 449 === 0 || a % 457 === 0 || a % 461 === 0 || a % 463 === 0 || a % 467 === 0 || a % 479 === 0 || a % 487 === 0 || a % 489 === 0 || a % 499 === 0 || a % 503 === 0 || a % 509 === 0 || a % 521 === 0 || a % 523 === 0 || a % 541 === 0 || a % 547 === 0 || a % 557 === 0 || a % 559 === 0 || a % 563 === 0 || a % 571 === 0 || a % 577 === 0 || a % 583 === 0 || a % 587 === 0 || a % 591 === 0 || a % 599 === 0 || a % 601 === 0 || a % 607 === 0 || a % 611 === 0 || a % 617 === 0 || a % 623 === 0 || a % 631 === 0 || a % 639 === 0 || a % 643 === 0 || a % 647 === 0 || a % 653 === 0 || a % 659 === 0 || a % 661 === 0 || a % 673 === 0 || a % 677 === 0 || a % 683 === 0 || a % 691 === 0 || a % 701 === 0 || a % 709 === 0 || a % 719 === 0 || a % 727 === 0 || a % 733 === 0 || a % 737 === 0 || a % 743 === 0 || a % 749 === 0 || a % 757 === 0 || a % 761 === 0 || a % 769 === 0 || a % 773 === 0 || a % 787 === 0 || a % 797 === 0 || a % 801 === 0 || a % 809 === 0 || a % 819 === 0 || a % 831 === 0 || a % 839 === 0 || a % 853 === 0 || a % 863 === 0 || a % 877 === 0 || a % 881 === 0 || a % 899 === 0 || a % 907 === 0 || a % 911 === 0 || a % 919 === 0 || a % 929 === 0 || a % 937 === 0 || a % 941 === 0 || a % 947 === 0 || a % 953 === 0 || a % 959 === 0 || a % 967 === 0 || a % 971 === 0 || a % 977 === 0 || a % 983 === 0 || a % 991 === 0 || a % 997 === 0 || a % 1009 === 0 || a % 1017 === 0 || a % 1023 === 0 || a % 1031 === 0 || a % 1039 === 0 || a % 1047 === 0 || a % 1059 === 0 || a % 1071 === 0 || a % 1077 === 0 || a % 1087 === 0 || a % 1097 === 0 || a % 1103 === 0 || a % 1101 === 0 || a % 1117 === 0 || a % 1129 === 0 || a % 1137 === 0 || a % 1145 === 0 || a % 1153 === 0 || a % 1161 === 0 || a % 1171 === 0 || a % 1179 === 0 || a % 1187 === 0 || a % 1195 === 0 || a % 1201 === 0 || a % 1209 === 0 || a % 1217 === 0 || a % 1225 === 0 || a % 1233 === 0 || a % 1241 === 0 || a % 1249 === 0 || a % 1257 === 0 || a % 1267 === 0 || a % 1277 === 0 || a % 1287 === 0 || a % 1297 === 0 || a % 1303 === 0 || a % 1311 === 0 || a % 1321 === 0 || a % 1331 === 0 || a % 1341 === 0 || a % 1351 === 0 || a % 1361 === 0 || a % 1381 === 0 || a %"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return (x * x % n) === x && x > 1\n}\n\n/*\n\nYour task is to write a function that takes a string as an input and returns a list of all the words that can be created using the digits in the string\n\n*/\nconst allWords = (s) => {\n  let words = []\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      for (let k = j + 1; k < s.length; k++) {\n        let num = s.charCodeAt(i) * Math.pow(10, j) * Math.pow(10, k)\n        if (num > 0 && num < 1000000) {\n          words.push(s.substring(i, j) + s.substring(j, k) + s.substring(k, i))\n        }\n      }\n    }\n  }\n  return words\n}\n\n/*\n\nYour task is to write a function that takes a string and returns a list of all the unique permutations that can be created from the string\n\n*/\nconst permutations = (s) => {\n  let permutations = []\n  let used = []\n  let usedIndices = []\n\n  for (let i = 0; i < s.length; i++) {\n    used.push(s.charCodeAt(i))\n    usedIndices.push(i)\n  }\n\n  for (let i = 0; i < used.length; i++) {\n    let index = usedIndices.indexOf(i)\n    let copy = s.slice(0, index)\n    copy = copy.concat(s.slice(index + 1))\n    let permutation = copy.split('')\n    let permutationCopy = permutation.slice()\n    let isUnique = true\n\n    for (let j = 0; j < permutationCopy.length; j++) {\n      let next = permutationCopy[j]\n      if (used.indexOf(next)!= -1) {\n        isUnique = false\n        break\n      }\n    }\n\n    if (isUnique) {\n      permutations.push(permutation)\n    }\n  }\n\n  return permutations\n}\n\n/*\n\nYour task is to write a function that takes a string and returns a list of all the combinations that can be created from the string\n\n*/\nconst combinations = (s) => {\n  let combinations = []\n  let used = []\n  let usedIndices = []\n\n  for (let i = 0; i < s.length; i++) {\n    used.push(s.charCodeAt(i))\n    usedIndices.push(i)\n  }\n\n  for (let i = 0; i < used.length; i++) {\n    let index = usedIndices.indexOf(i)\n    let copy = s.slice(0, index)\n    let permutation = copy.concat(s.slice(index + 1))\n    let isUnique = true\n\n    for (let j = 0; j < permutation.length; j++) {\n      let next = permutation[j]\n      if (used.indexOf(next)!= -1) {\n        isUnique = false\n        break\n      }\n    }\n\n    if (isUnique) {\n      combinations.push(permutation)\n    }\n  }\n\n  return combinations\n}\n\n/*\n\nYour task is to write a function that takes a string and returns a list of all the strings that can be created using the digits in the string\n\n*/\nconst allStrings = (s) => {\n  let strings = []\n  let used = []\n  let usedIndices = []\n\n  for (let i = 0; i < s.length; i++) {\n    used.push(s.charCodeAt(i))\n    usedIndices.push(i)\n  }\n\n  for (let i = 0; i < used.length; i++) {\n    let index = usedIndices.indexOf(i)\n    let copy = s.slice(0, index)\n    let permutation = copy.concat(s.slice(index + 1))\n    let isUnique = true\n\n    for (let j = 0; j < permutation.length; j++) {\n      let next = permutation[j]\n      if (used.indexOf(next)!= -1) {\n        isUnique = false\n        break\n      }\n    }\n\n    if (isUnique) {\n      strings.push(permutation)\n    }\n  }\n\n  return strings\n}\n\n/*\n\nYour task is to write a function that takes an integer as an input and returns the number of different ways of writing that integer as a sum of the digits\n\n*/\nconst numberOfDifferentSum = (n) => {\n  let nDigits = []\n  let count = 0\n\n  while (n > 0) {\n    nDigits.push(n % 10)\n    n = n / 10\n  }\n\n  for (let i = nDigits.length - 1; i >= 0; i--) {\n    for (let j = i; j < nDigits.length; j++) {\n      count += numberOfDifferentSum(nDigits[i] * nDigits[j])\n    }\n  }\n\n  return count\n}\n\n/*\n\nYour task is to write a function that takes an integer as an input and returns the number of different ways of writing that integer as a sum of the digits\n\n*/\nconst numberOfDifferentSumRecursive = (n) => {\n  let count = 1\n\n  while (n > 0) {\n    count *= numberOfDifferentSumRecursive(n % 10)\n    n = n / 10\n  }\n\n  return count\n}\n\n/*\n\nYour task is to write a function that takes an integer as an input and returns the number of different ways of writing that integer as a sum of the digits\n\n*/\nconst numberOfDifferentSumIterative = (n) => {\n"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let x = a\n  let n = 0\n\n  while (x > 0) {\n    n += 1\n    x = x / 3\n  }\n\n  return n === a\n}\n\nconsole.log(iscube(64))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  const ret = [];\n  const length = num.length;\n  const last = length - 1;\n  let index = 0;\n  while (index <= last) {\n    const char = num[index];\n    const digit = char.charCodeAt(0);\n    const isPrime = digit >= 2 && digit <= 6 &&\n      Math.pow(digit, last) % 1!== 0 &&\n      Math.pow(digit, last)!== Math.pow(digit, last - 1);\n    if (isPrime) {\n      ret.push(digit);\n    }\n    index += 1;\n  }\n  return ret.length;\n};\n\nmodule.exports = hexesKeys;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  if (decimal === 0) {\n    return \"0b\"\n  }\n  let binary = \"\"\n  let isNegative = false\n  if (decimal < 0) {\n    isNegative = true\n    decimal *= -1\n  }\n  while (decimal > 0) {\n    let modulo = decimal % 2\n    binary += modulo\n    decimal = decimal / 2\n  }\n  if (isNegative) {\n    binary = \"1\" + binary\n  }\n  return \"b\" + binary + \"db\"\n}\n\nconst binaryToDecimals = (binary) => {\n  let decimals = 0\n  let binaryLength = binary.length\n  for (let i = 0; i < binaryLength; i++) {\n    if (binary.charAt(i) === \"1\") {\n      decimals += 1\n    }\n  }\n  return decimals\n}\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  let binaryLength = binary.length\n  for (let i = 0; i < binaryLength; i++) {\n    if (binary.charAt(i) === \"1\") {\n      decimal += 1\n    }\n  }\n  return decimal\n}\n\nconst checkInput = (num) => {\n  if (!num || isNaN(num)) {\n    throw new Error(\"Input should be a number\")\n  }\n  return num\n}\n\nmodule.exports = {\n  decimalsToBinary,\n  binaryToDecimals,\n  binaryToDecimal,\n  checkInput\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  if (s.length < 3) return false\n  const cmp = (a, b) => a === b\n  const sorted = [...s].sort(cmp)\n  const prev = sorted[0]\n  const curr = sorted[1]\n  const next = sorted[2]\n  return prev === curr && curr === next\n}\n\nconsole.log(isHappiest('a'))\nconsole.log(isHappiest('aa'))\nconsole.log(isHappiest('abcd'))\nconsole.log(isHappiest('aabb'))\nconsole.log(isHappiest('adb'))\nconsole.log(isHappiest('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n\n  for (let i = 0; i < grades.length; i += 1) {\n    let currentGrade = grades[i];\n    let currentLetterGrade;\n\n    if (currentGrade < 4) {\n      currentLetterGrade = 'A+';\n    } else if (currentGrade < 3.7) {\n      currentLetterGrade = 'A';\n    } else if (currentGrade < 3.3) {\n      currentLetterGrade = 'A-';\n    } else if (currentGrade < 3) {\n      currentLetterGrade = 'B+';\n    } else if (currentGrade < 2.7) {\n      currentLetterGrade = 'B';\n    } else if (currentGrade < 2.3) {\n      currentLetterGrade = 'B-';\n    } else if (currentGrade < 2) {\n      currentLetterGrade = 'C+';\n    } else if (currentGrade < 1.7) {\n      currentLetterGrade = 'C';\n    } else if (currentGrade < 1.3) {\n      currentLetterGrade = 'C-';\n    } else if (currentGrade < 1) {\n      currentLetterGrade = 'D+';\n    } else if (currentGrade < 0.7) {\n      currentLetterGrade = 'D';\n    } else {\n      currentLetterGrade = 'D-';\n    }\n\n    letterGrades.push(currentLetterGrade);\n  }\n\n  return letterGrades;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 0) return false;\n  const i = string.length - 1;\n  let c = string[i];\n  while (i > 0) {\n    if (c % 2 === 0) {\n      return false;\n    }\n    --i;\n    c = string[i];\n  }\n  return true;\n};\n\nconst isPrime = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let i, count = 0;\n  for (i = 1; i <= n; i++) {\n    if (i === 1) {\n      count++;\n    } else if (i === 2) {\n      count += 2;\n    } else if (i % 2 === 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(startOneEnds(5));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const str = String(N);\n  const sum = [0, 0, 0, 0, 0, 0];\n  for (let i = 0; i < str.length; i++) {\n    sum[i % 5] += str[i].charCodeAt(0);\n  }\n  return sum.reduce((x, y) => x + y).toString(2);\n};\n\nconst test = (N) => {\n  const output = solve(N);\n  console.log(`The sum of digits of ${N} is ${output}`);\n};\n\ntest(1000);\ntest(147);\ntest(150);\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\n// console.log(adding([4, 2, 6, 7]));\n// //=> 2\n\n/*\n  Given a non-empty array of integers nums. Add the number at index x, to the numbers at the index x+1, to the number at index x+2, and so on.\n\nExample:\n\nInput: nums = [4, 5, 2, 1, 8, 9, 0, 1, 2, 3, 4, 5]\nOutput: [16, 17, 13, 5, 6, 9, 8, 1, 1, 1, 2, 3, 4, 5, 6, 7, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nConstraints:\n\n1 <= nums.length <= 3 * 10^4\n-2^31 <= nums[i] <= 2^31 - 1\n*/\nconst arrayAdd = (nums) => {\n    const result = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0) {\n            result.push(nums[i] + nums[i + 1]);\n            i++;\n        } else {\n            result.push(nums[i]);\n        }\n    }\n    return result;\n};\n\n// console.log(arrayAdd([4, 5, 2, 1, 8, 9, 0, 1, 2, 3, 4, 5]));\n// //[16, 17, 13, 5, 6, 9, 8, 1, 1, 1, 2, 3, 4, 5, 6, 7, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n/*\n  Given two numbers, write a function to compute their sum.\n  The function should return a string of the sum.\n\nConstraints:\n\nThe function should return a string of the sum.\nThe given numbers may be positive, negative or zero.\n*/\nconst sum = (num1, num2) => {\n    const num1 = parseInt(num1);\n    const num2 = parseInt(num2);\n    let num1Sum = num1;\n    let num2Sum = num2;\n    if (num1 < 0) {\n        num1Sum = num1 * -1;\n    }\n    if (num2 < 0) {\n        num2Sum = num2 * -1;\n    }\n    let stringSum = '';\n    for (let i = 0; i < num1Sum + num2Sum; i++) {\n        stringSum = stringSum + '0';\n    }\n    return stringSum;\n};\n\n// console.log(sum(2, -2));\n// => -1\n\n/*\n  Given two numbers num1 and num2, write a function to compute their difference.\n  The function should return a string of the difference.\n\nConstraints:\n\nThe function should return a string of the difference.\nThe given numbers may be positive, negative or zero.\n*/\nconst difference = (num1, num2) => {\n    const num1 = parseInt(num1);\n    const num2 = parseInt(num2);\n    let num1Diff = num1;\n    let num2Diff = num2;\n    if (num1 < 0) {\n        num1Diff = num1 * -1;\n    }\n    if (num2 < 0) {\n        num2Diff = num2 * -1;\n    }\n    let stringDiff = '';\n    for (let i = 0; i < num1Diff - num2Diff; i++) {\n        stringDiff = stringDiff + '0';\n    }\n    return stringDiff;\n};\n\n// console.log(difference(2, -2));\n// => 1\n\n/*\n  Given two numbers num1 and num2, write a function to compute their product.\n  The function should return a string of the product.\n\nConstraints:\n\nThe function should return a string of the product.\nThe given numbers may be positive, negative or zero.\n*/\nconst product = (num1, num2) => {\n    const num1 = parseInt(num1);\n    const num2 = parseInt(num2);\n    let num1Prod = num1;\n    let num2Prod = num2;\n    if (num1 < 0) {\n        num1Prod = num1 * -1;\n    }\n    if (num2 < 0) {\n        num2Prod = num2 * -1;\n    }\n    let stringProd = '';\n    for (let i = 0; i < num1Prod * num2Prod; i++) {\n        stringProd = stringProd + '0';\n    }\n    return stringProd;\n};\n\n// console.log(product(2, -2));\n// => -2\n\n/*\n  Given two numbers num1 and num2, write a function to compute their quotient.\n  The function should return a string of the quotient.\n\nConstraints:\n\nThe function should return a string of the quotient.\nThe given numbers may be positive, negative or zero.\n*/\nconst quotient = (num1, num2) => {\n    const num1 = parseInt(num1);\n    const num2 = parseInt(num2);\n    let num1Quo = num1;\n    let num2Quo = num2;\n    if (num1 < 0) {\n        num1Quo = num1 * -1;\n    }\n    if (num2 < 0) {\n        num2Quo = num2 * -1;\n    }\n    let stringQuo = '';\n    for (let i = 0; i < num1Quo / num2Quo; i++) {\n        stringQuo = stringQuo + '0';\n    }\n    return stringQuo;\n};\n\n// console.log(quotient(2, -2));\n// => -1\n"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  if(s === '') {\n    return s;\n  }\n\n  // split the string into an array of words\n  let words = s.split(' ');\n\n  // sort the array of words according to their value\n  let sorted = words.sort( (a, b) => {\n    return a.charCodeAt(0) - b.charCodeAt(0);\n  });\n\n  // replace the words with a new word\n  let result = sorted.join(' ');\n  return result;\n}\n\nexport default antisShuffles;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  return lst.reduce((rows, row) => {\n    return rows.concat(\n      row.map((column) => {\n        return [x, row.indexOf(column)];\n      })\n    );\n  }, []);\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(0, 3), (1, 5), (1, 1), (2, 2)]\n  getRows([], 3) == []\n  getRows([[], [1], [1, 2, 3]], 1) == [(2, 2)]\n  */\nconst getColumns = (lst, x) => {\n  return lst.reduce((cols, col) => {\n    return cols.concat(\n      col.map((row) => {\n        return [row.indexOf(col), x];\n      })\n    );\n  }, []);\n}\n\nexport { getRows, getColumns };\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const sort = (array, i, j) => {\n    const sum = array[i] + array[j];\n    const tmp = array[i];\n    if (sum % 2 === 1) {\n      array[i] = array[j];\n      array[j] = tmp;\n    }\n  };\n  array.sort((a, b) => {\n    sort(array, a, b);\n    return a - b;\n  });\n  return array;\n};\n\nconst array = [2, 4, 3, 0, 1, 5, 6];\n\nconsole.log(sortsArray(array));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  if (s.length === 0) return ''\n  const length = s.length\n  const rotator = new Rotator(length)\n  const encrypted = ''\n  for (let i = 0; i < length; i++) {\n    encrypted += rotator.rotate(s.charCodeAt(i))\n  }\n  return encrypted\n}\n\nconst decrypt = (s) => {\n  if (s.length === 0) return ''\n  const length = s.length\n  const rotator = new Rotator(length)\n  const decrypted = ''\n  for (let i = 0; i < length; i++) {\n    decrypted += rotator.rotate(s.charCodeAt(i))\n  }\n  return decrypted\n}\n\nconst Rotator = (length) => {\n  this.rotate = (char) => {\n    const c = parseInt(char, 16)\n    return String.fromCharCode((c & 1) << (length - 2) | (c & 2) << (length - 1) | (c & 4) << (length - 2) | (c & 8) << (length - 1) | (c & 16) << (length - 2) | (c & 32) << (length - 1) | (c & 64) << (length - 2) | (c & 128) << (length - 1))\n  }\n}\n\nmodule.exports = {\n  encrypt,\n  decrypt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const first = lst.shift()\n  const second = lst.shift()\n  if (second) {\n    return second\n  }\n  return first\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\n// → 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\n// → 2\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n// → 2\nconsole.log(nextSmallest([1, 1]))\n// → null\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let s = S.split('.').map((v) => v.split('?').map((v) => v.split('!').map((v) => v.toLowerCase())))\n  return s.reduce((acc, v) => {\n    let c = 0\n    for (let i = 0; i < v.length; i++) {\n      if (v[i] === 'i') {\n        c++\n      }\n    }\n    return acc + c\n  }, 0)\n}\n\nmodule.exports = isBore\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const nums = [x, y, z];\n  const sum = nums.reduce((acc, num) => acc + num);\n  const isInt = x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n  return sum === x || sum === y || sum === z || isInt;\n};\n\nmodule.exports = anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\n  const uppercaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encodedString = '';\n  message = message.toLowerCase();\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i]) > -1) {\n      encodedString = encodedString + message[i] + message[i + 1];\n      i++;\n    } else {\n      encodedString = encodedString + lowercaseLetters.charAt(message[i] - 1);\n    }\n  }\n  encodedString = encodedString.toUpperCase();\n  return encodedString;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\n  const uppercaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let decodedString = '';\n  message = message.toUpperCase();\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i]) > -1) {\n      decodedString = decodedString + message[i + 1];\n      i++;\n    } else {\n      decodedString = decodedString + message[i] + lowercaseLetters.charAt(message[i] - 1);\n    }\n  }\n  decodedString = decodedString.toLowerCase();\n  return decodedString;\n};\n\nconst test = () => {\n  const message = 'This is a message';\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  console.log(message, encoded, decoded);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const n = lst[i];\n    if (isPrime(n)) {\n      sum += n;\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (n) => {\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n// TESTS\nconst tests = [\n  [0, 10],\n  [1, 10],\n  [2, 10],\n  [3, 10],\n  [4, 10],\n  [5, 10],\n  [6, 10],\n  [7, 10],\n  [8, 10],\n  [9, 10],\n  [10, 10],\n  [11, 10],\n  [12, 10],\n  [13, 10],\n  [14, 10],\n  [15, 10],\n  [16, 10],\n  [17, 10],\n  [18, 10],\n  [19, 10],\n  [20, 10],\n  [21, 10],\n  [22, 10],\n  [23, 10],\n  [24, 10],\n  [25, 10],\n  [26, 10],\n  [27, 10],\n  [28, 10],\n  [29, 10],\n  [30, 10],\n  [31, 10],\n  [32, 10],\n  [33, 10],\n  [34, 10],\n  [35, 10],\n  [36, 10],\n  [37, 10],\n  [38, 10],\n  [39, 10],\n  [40, 10],\n  [41, 10],\n  [42, 10],\n  [43, 10],\n  [44, 10],\n  [45, 10],\n  [46, 10],\n  [47, 10],\n  [48, 10],\n  [49, 10],\n  [50, 10],\n  [51, 10],\n  [52, 10],\n  [53, 10],\n  [54, 10],\n  [55, 10],\n  [56, 10],\n  [57, 10],\n  [58, 10],\n  [59, 10],\n  [60, 10],\n  [61, 10],\n  [62, 10],\n  [63, 10],\n  [64, 10],\n  [65, 10],\n  [66, 10],\n  [67, 10],\n  [68, 10],\n  [69, 10],\n  [70, 10],\n  [71, 10],\n  [72, 10],\n  [73, 10],\n  [74, 10],\n  [75, 10],\n  [76, 10],\n  [77, 10],\n  [78, 10],\n  [79, 10],\n  [80, 10],\n  [81, 10],\n  [82, 10],\n  [83, 10],\n  [84, 10],\n  [85, 10],\n  [86, 10],\n  [87, 10],\n  [88, 10],\n  [89, 10],\n  [90, 10],\n  [91, 10],\n  [92, 10],\n  [93, 10],\n  [94, 10],\n  [95, 10],\n  [96, 10],\n  [97, 10],\n  [98, 10],\n  [99, 10],\n  [100, 10],\n  [101, 10],\n  [102, 10],\n  [103, 10],\n  [104, 10],\n  [105, 10],\n  [106, 10],\n  [107, 10],\n  [108, 10],\n  [109, 10],\n  [110, 10],\n  [111, 10],\n  [112, 10],\n  [113, 10],\n  [114, 10],\n  [115, 10],\n  [116, 10],\n  [117, 10],\n  [118, 10],\n  [119, 10],\n  [120, 10],\n  [121, 10],\n  [122, 10],\n  [123, 10],\n  [124, 10],\n  [125, 10],\n  [126, 10],\n  [127, 10],\n  [128, 10],\n  [129, 10],\n  [130, 10],\n  [131, 10],\n  [132, 10],\n  [133, 10],\n  [134, 10],\n  [135, 10],\n  [136, 10],\n  [137, 10],\n  [138, 10],\n  [139, 10],\n  [140, 10],\n  [141, 10],\n  [142, 10],\n  [143, 10],\n  [144, 10],\n  [145, 10],\n  [146, 10],\n  [147, 10],\n  [148, 10],\n  [149, 10],\n  [150, 10],\n  [151, 10],\n  [152, 10],\n  [153, 10],\n  [154, 10],\n  [155, 10],\n  [156, 10],\n  [157, 10],\n  [158,"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n    var key;\n    for (key in dict) {\n        if (typeof(dict[key])!=='string') {\n            return false;\n        }\n        if (key.charAt(0).toUpperCase()!== key.charAt(0)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n  Given an array, return true if all elements are strings in lower \n  case or all elements are strings in upper case, else return false.\n  The function should return false is the given array is empty.\n  Examples:\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\"]) should return false.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) should return false.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) should return false.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]) should return false.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"]) should return false.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"]) should return true.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"]) should return false.\n  checkArrayCases([3, \"three\", \"Three\", \"THREE\", \"Three\", \"Thi3\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) should return true.\n  */\nconst checkArrayCases = (arr) => {\n    var index;\n    for (index = 0; index < arr.length; index++) {\n        if (typeof(arr[index])!=='string') {"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [];\n  }\n\n  const arr = [];\n\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n\n  return arr;\n};\n\nexport { countUpTo };\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let [a1, a2] = [a, b];\n  let [b1, b2] = [b, a];\n  if (a1 === 0) return 0;\n  if (b1 === 0) return 0;\n\n  let [a1_int, a1_frac] = split(a1);\n  let [b1_int, b1_frac] = split(b1);\n  let [a2_int, a2_frac] = split(a2);\n  let [b2_int, b2_frac] = split(b2);\n\n  let a1_int_int = a1_int * 10 + a1_frac;\n  let b1_int_int = b1_int * 10 + b1_frac;\n  let a2_int_int = a2_int * 10 + a2_frac;\n  let b2_int_int = b2_int * 10 + b2_frac;\n\n  let a1_int_frac = a1_int * b2_int_frac;\n  let b1_int_frac = a1_int * b2_int_frac;\n  let a2_int_frac = a2_int * b1_int_frac;\n  let b2_int_frac = a2_int * b1_int_frac;\n\n  let a1_int_int_frac = a1_int_int * b2_int_frac;\n  let b1_int_int_frac = a1_int_int * b2_int_frac;\n  let a2_int_int_frac = a2_int_int * b1_int_frac;\n  let b2_int_int_frac = a2_int_int * b1_int_frac;\n\n  let a_int = a1_int_int_frac + a2_int_int_frac;\n  let b_int = b1_int_int_frac + b2_int_int_frac;\n  let a_frac = a1_int_frac + a2_int_frac;\n  let b_frac = b1_int_frac + b2_int_frac;\n\n  return multiply(a_int, b_int) + multiply(a_frac, b_frac);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of distinct uppercase letters in the string.\n  \n  For example:\n  distinctUpper('aBCdEf') returns 3\n  distinctUpper('ABCDEF') returns 5\n  */\nconst distinctUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of distinct vowels in the string.\n  \n  For example:\n  distinctVowels('aBCdEf') returns 2\n  distinctVowels('ABCDEF') returns 3\n  */\nconst distinctVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\nmodule.exports = {\n    countUpper,\n    countVowels,\n    distinctUpper,\n    distinctVowels\n}<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  let valueAsNumber = parseFloat(value);\n  let closestInteger = Math.floor(valueAsNumber);\n  let differenceFromInteger = valueAsNumber - closestInteger;\n  if (Math.abs(differenceFromInteger) < Math.abs(valueAsNumber - closestInteger - 1)) {\n    closestInteger += 1;\n  }\n  return closestInteger;\n};\n\nmodule.exports = closerIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nexport { madeAPiles };\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const arr = s.split(/(\\s|,)/g);\n  return arr;\n};\n\n/*\n  Take an array of words and return an array of unique words.\n  \n  For example:\n  wordsArray([\"One\", \"Two\", \"One\", \"Three\", \"One\"]) == [\"One\", \"Two\", \"Three\"]\n  wordsArray([\"One\", \"Two\", \"One\", \"Three\", \"One\"]) == [\"One\", \"Two\", \"Three\", \"One\"]\n  wordsArray([\"One\", \"Two\", \"Three\", \"One\"]) == [\"One\", \"Two\", \"Three\", \"One\"]\n  */\nconst wordsArray = (arr) => {\n  const words = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (words.indexOf(arr[i]) < 0) {\n      words.push(arr[i]);\n    }\n  }\n  return words;\n};\n\n/*\n  Take an array of words and return an array of unique words with lowercase\n  letters only.\n  \n  For example:\n  wordsArray([\"One\", \"Two\", \"One\", \"Three\", \"One\"]) == [\"one\", \"two\", \"three\"]\n  wordsArray([\"One\", \"Two\", \"One\", \"Three\", \"One\"]) == [\"one\", \"two\", \"three\", \"one\"]\n  wordsArray([\"One\", \"Two\", \"Three\", \"One\"]) == [\"one\", \"two\", \"three\", \"one\"]\n  */\nconst wordsLowercaseArray = (arr) => {\n  const words = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (words.indexOf(arr[i].toLowerCase()) < 0) {\n      words.push(arr[i].toLowerCase());\n    }\n  }\n  return words;\n};\n\n/*\n  Take an array of words and return an array of unique words with upper-case\n  letters only.\n  \n  For example:\n  wordsArray([\"One\", \"Two\", \"One\", \"Three\", \"One\"]) == [\"ONE\", \"TWO\", \"THREE\"]\n  wordsArray([\"One\", \"Two\", \"One\", \"Three\", \"One\"]) == [\"ONE\", \"TWO\", \"THREE\", \"ONE\"]\n  wordsArray([\"One\", \"Two\", \"Three\", \"One\"]) == [\"ONE\", \"TWO\", \"THREE\", \"ONE\"]\n  */\nconst wordsUppercaseArray = (arr) => {\n  const words = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (words.indexOf(arr[i].toUpperCase()) < 0) {\n      words.push(arr[i].toUpperCase());\n    }\n  }\n  return words;\n};\n\n/*\n  Take an array of words and return an array of unique words with punctuation\n  removed.\n  \n  For example:\n  wordsArray([\"One\", \"Two\", \"One\", \"Three\", \"One\"]) == [\"One\", \"Two\", \"Three\"]\n  wordsArray([\"One\", \"Two\", \"One\", \"Three\", \"One\"]) == [\"One\", \"Two\", \"Three\", \"One\"]\n  wordsArray([\"One\", \"Two\", \"Three\", \"One\"]) == [\"One\", \"Two\", \"Three\", \"One\"]\n  */\nconst wordsNoPunctuationArray = (arr) => {\n  const words = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (words.indexOf(arr[i].replace(/[\\.,\\?!]/g, \"\")) < 0) {\n      words.push(arr[i].replace(/[\\.,\\?!]/g, \"\"));\n    }\n  }\n  return words;\n};\n\n/*\n  Take an array of words and return an array of unique words with all the\n  punctuation removed.\n  \n  For example:\n  wordsArray([\"One, two, three, four, five, six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  wordsArray([\"One, two, three, four, five, six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  wordsArray([\"One, two, three, four, five, six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNoPunctuationNoSpacesArray = (arr) => {\n  const words = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (words.indexOf(arr[i].replace(/[\\s,]+/g, \"\")) < 0) {\n      words.push(arr[i].replace(/[\\s,]+/g, \"\"));\n    }\n  }\n  return words;\n};\n\nmodule.exports = {\n  wordString,\n  wordsArray,\n  wordsLowercaseArray,\n  wordsUppercaseArray,\n  wordsNoPunctuationArray,\n  wordsNoPunctuationNoSpacesArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n\n  if (x === y) {\n    return x;\n  }\n\n  let num = x;\n  let tmp = x;\n  let tmp2 = x;\n  let isEven = true;\n\n  while (tmp < y) {\n    tmp2 = tmp;\n    tmp += 2;\n    if (tmp2 % 2 === 0) {\n      num = tmp;\n      isEven = true;\n    }\n    else {\n      isEven = false;\n    }\n  }\n\n  return isEven? num : -1;\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (m < n) return -1\n  const a = n + (n - m) / 2\n  const b = m + (m - n) / 2\n  const res = (a + b) / 2\n  const binary = parseInt(res.toString(2))\n  return binary\n}\n\n//const roundingAvg = (n, m) => {\n//  return Math.round((n + m) / 2)\n//}\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  const result = [];\n  const number = x;\n  const length = number.length;\n  const i = 0;\n  const j = length - 1;\n\n  while (i < j) {\n    const iVal = number[i];\n    const jVal = number[j];\n    if (iVal % 2 === 0) {\n      result.push(iVal);\n      i++;\n    }\n    if (jVal % 2 === 0) {\n      result.push(jVal);\n      j--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigit;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const arr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = arr.reverse()\n  const result = reverseArr.map((item, index) => {\n    const digits = item.toString()\n    return (index < arrLength)? `${digits}${name[parseInt(digits, 10) - 1]}` : `${digits}${name[parseInt(digits, 10) - 1]}`\n  })\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i))\n    } else {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst factorial = (n) => {\n  return n === 1? 1 : n * factorial(n - 1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const countEven = []\n  const countOdd = []\n  for (let i = 1; i <= n; i++) {\n    const str = String(i)\n    if (str.length % 2 === 0) {\n      countEven.push(str)\n    } else {\n      countOdd.push(str)\n    }\n  }\n  return [countEven.length, countOdd.length]\n}\n\n// Solution 2\nconst evenOdderPalindrome = (n) => {\n  const countEven = []\n  const countOdd = []\n  for (let i = 1; i <= n; i++) {\n    const str = String(i)\n    if (str.length % 2 === 0) {\n      countEven.push(str)\n    } else {\n      countOdd.push(str)\n    }\n  }\n  return [countEven.length, countOdd.length]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  if(arr.length === 0) return true;\n  let min = arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i] < min) min = arr[i];\n  }\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === min) count++;\n  }\n  while(count > 0){\n    let newArr = arr.slice();\n    let index = 0;\n    for(let i = 1; i < arr.length; i++){\n      if(arr[i] === min){\n        newArr[index++] = arr[i];\n      }\n    }\n    newArr.splice(0, 1);\n    if(newArr.length === 0){\n      return true;\n    }\n    let count = 0;\n    for(let i = 0; i < newArr.length; i++){\n      if(newArr[i] === min){\n        count++;\n      }\n    }\n    if(count === 0){\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a non-empty array containing N integers where 1 <= N <= 10000,\n  write an algorithm to check whether it is possible to sort the array\n  in non-decreasing order.\n  Example:\n  Input:\n  [3, 4, 5, 1, 2]\n  Output:\n  Is it possible to sort the array in non-decreasing order?\n  True\n  Explanation: The array can be sorted in non-decreasing order by moving\n              all elements one position in the right direction.\n              Moving the last element to the first position.\n  Moving the second last element to the second position.\n  Moving the third last element to the third position.\n  Moving the fourth last element to the fourth position.\n  Moving the fifth last element to the fifth position.\n  Moving the sixth last element to the sixth position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last element to the sixth-second position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last element to the sixth-second position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last element to the sixth-second position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last element to the sixth-second position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last element to the sixth-second position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last element to the sixth-second position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last element to the sixth-second position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last element to the sixth-second position.\n ...\n  Moving the second-second last element to the second-second position.\n  Moving the third-second last element to the third-second position.\n  Moving the fourth-second last element to the fourth-second position.\n  Moving the fifth-second last element to the fifth-second position.\n  Moving the sixth-second last"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  const len = lst1.length;\n  if (len === 0) return \"NO\";\n  const lst1_index = lst1.findIndex((i) => i % 2 === 0);\n  const lst2_index = lst2.findIndex((i) => i % 2 === 0);\n  if (lst1_index === -1) return \"NO\";\n  if (lst2_index === -1) return \"NO\";\n  const num_exchanges = Math.min(lst1_index, lst2_index);\n  const new_lst1 = lst1.slice(0);\n  const new_lst2 = lst2.slice(0);\n  new_lst1.splice(lst1_index, 1);\n  new_lst2.splice(lst2_index, 1);\n  const diff = new_lst1.length - new_lst2.length;\n  if (diff === 0) {\n    const equal_length = (\n      new_lst1.length === new_lst2.length &&\n      new_lst1.every((i) => i === new_lst2[i % new_lst2.length])\n    );\n    return equal_length? \"YES\" : \"NO\";\n  }\n  const result = [];\n  for (let i = 0; i < num_exchanges; i++) {\n    const index = Math.floor(Math.random() * new_lst2.length);\n    const value = new_lst1[i % new_lst1.length];\n    new_lst2.splice(index, 0, value);\n    result.push(value);\n  }\n  return result.join(\", \");\n};\n\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 5]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 6]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 7]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 8]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 9]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 10]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 11]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 12]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 13]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 14]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 15]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 16]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 17]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 18]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 19]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 20]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 21]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 22]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 23]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 24]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 25]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 26]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 27]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 28]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 29]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 30]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 31]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 32]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 33]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 34]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 35]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 36]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 37]));\nconsole."}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const letters = test.split(\" \").map((letter) => letter.toLowerCase())\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i]\n    if (!histogram[letter]) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter]++\n    }\n  }\n  return histogram\n}\n\nmodule.exports = histograms\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  // return c === ''? s : c + s.split(c).reverse().join('');\n  return c === ''? s : c + s.split(c).join('');\n};\n\nconst reverse = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[l - 1 - i] = s[i];\n  }\n  return r.join('');\n};\n\nconst palindrome = (s) => {\n  const l = s.length;\n  let i = 0;\n  let j = l - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nexport default {\n  reversesDelete,\n  reverse,\n  palindrome,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  if (!lst ||!lst.length) {\n    return [];\n  }\n  let ans = [];\n  lst.forEach(str => {\n    ans.push(`the number of odd elements ${str.length} of the ${str} of the ${str.length}put.`);\n  });\n  return ans;\n};\n\nexport default odderCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = nums[0]\n  let currentSum = nums[0]\n  for (let i = 1; i < nums.length; i++) {\n    currentSum += nums[i]\n    if (currentSum < minSum) {\n      minSum = currentSum\n    }\n    if (currentSum === 0) {\n      return currentSum\n    }\n  }\n  return minSum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let result = 0;\n  let index = 0;\n\n  while (index < grid.length) {\n    let row = grid[index];\n    let rowLength = row.length;\n\n    while (rowLength) {\n      let unit = row.shift();\n      if (unit === 1) {\n        row.shift();\n        result++;\n      } else {\n        row.push(unit);\n      }\n\n      rowLength--;\n    }\n\n    index++;\n  }\n\n  return result;\n};\n\nconst main = async () => {\n  let grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ];\n\n  let capacity = 1;\n  console.log(await maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  const ones = (num) => {\n    let num2 = num;\n    while (num2 > 0) {\n      num2 = Math.floor(num2 / 2);\n      if (num2 === 1) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const onesInBinary = (num) => {\n    let num2 = num;\n    let result = 0;\n    while (num2 > 0) {\n      num2 = Math.floor(num2 / 2);\n      result++;\n    }\n    return result;\n  };\n  const sortArray = (num) => {\n    const arrLength = arr.length;\n    let binaryArr = [];\n    let binaryArrLength = 0;\n    while (num > 0) {\n      binaryArr.push(num % 2);\n      binaryArrLength++;\n      num = Math.floor(num / 2);\n    }\n    let sortedArr = [];\n    let sortedArrLength = 0;\n    while (binaryArrLength > 0) {\n      sortedArr.push(binaryArr[binaryArrLength - 1]);\n      binaryArrLength--;\n      sortedArrLength++;\n    }\n    sortedArr.sort((a, b) => {\n      if (a === b) {\n        return 0;\n      } else if (ones(a) &&!ones(b)) {\n        return -1;\n      } else if (ones(b) &&!ones(a)) {\n        return 1;\n      } else if (ones(a)) {\n        return -1;\n      } else if (ones(b)) {\n        return 1;\n      }\n    });\n    return sortedArr;\n  };\n  return sortArray(arr);\n};\n\nconsole.log(sortsArray([1, 5, 2, 3, 4]));\nconsole.log(sortsArray([-2, -3, -4, -5, -6]));\nconsole.log(sortsArray([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  const words = [];\n  const result = s.split(\" \");\n  for (let i = 0; i < result.length; i++) {\n    const s1 = result[i];\n    let k = 1;\n    while (k < n && s1.length > 0) {\n      const sub = s1.slice(0, -1);\n      if (k > sub.length) {\n        break;\n      }\n      if (sub.length === n) {\n        words.push(sub);\n      }\n      k++;\n      s1 = s1.slice(1);\n    }\n  }\n  return words;\n};\n\nconst selectWord = (s, n) => {\n  const words = [];\n  const result = s.split(\" \");\n  for (let i = 0; i < result.length; i++) {\n    const s1 = result[i];\n    let k = 1;\n    while (k < n && s1.length > 0) {\n      const sub = s1.slice(0, -1);\n      if (k > sub.length) {\n        break;\n      }\n      if (sub.length === n) {\n        words.push(sub);\n      }\n      k++;\n      s1 = s1.slice(1);\n    }\n  }\n  return words;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  var consonants = ['a', 'e', 'i', 'o', 'u', 'y'];\n  var vowel = 'a';\n  var closestVowel = '';\n  var index = -1;\n  while (++index < word.length) {\n    if (consonants.indexOf(word[index])!== -1) {\n      break;\n    }\n    vowel = word[index];\n  }\n  while (--index >= 0) {\n    if (consonants.indexOf(word[index])!== -1) {\n      break;\n    }\n    if (vowel === word[index]) {\n      closestVowel = word[index];\n    }\n  }\n  return closestVowel;\n};\n\n/*\n  Given two words, return their intersection.\n  Return an empty string if they don't intersect.\n\n  Example:\n  intersect(\"watermelon\", \"orange\") ==> \"orange\"\n  intersect(\"water\", \"watermelon\") ==> \"\"\n  intersect(\"\", \"watermelon\") ==> \"\"\n  intersect(\"watermelon\", \"\") ==> \"\"\n  */\nconst intersect = (word1, word2) => {\n  var word1Start = 0;\n  var word2Start = 0;\n  var word1End = word1.length - 1;\n  var word2End = word2.length - 1;\n  var intersect = '';\n  while (++word1Start <= word1End && ++word2Start <= word2End) {\n    if (word1[word1Start]!== word2[word2Start]) {\n      break;\n    }\n    intersect = word1[word1Start];\n  }\n  return intersect;\n};\n\n/*\n  Given two words, return their union.\n  Return an empty string if they don't intersect.\n\n  Example:\n  union(\"watermelon\", \"watermelon\") ==> \"watermelonwatermelon\"\n  union(\"\", \"watermelon\") ==> \"watermelon\"\n  union(\"watermelon\", \"\") ==> \"watermelon\"\n  union(\"watermelon\", \"\") ==> \"watermelon\"\n  */\nconst union = (word1, word2) => {\n  var word1Start = 0;\n  var word2Start = 0;\n  var word1End = word1.length - 1;\n  var word2End = word2.length - 1;\n  var union = '';\n  while (++word1Start <= word1End && ++word2Start <= word2End) {\n    union = word1[word1Start] + union;\n  }\n  while (++word1Start <= word1End) {\n    union = union + word1[word1Start];\n  }\n  while (++word2Start <= word2End) {\n    union = union + word2[word2Start];\n  }\n  return union;\n};\n\n/*\n  Given a string, return the count of the number of words that contain at least \n  one vowel.\n  \n  Example:\n  countWords(\"watermelon\") ==> 1\n  countWords(\"watermelon and watermelon\") ==> 2\n  countWords(\"watermelon and apple\") ==> 1\n  countWords(\"\") ==> 0\n  countWords(\"apple\") ==> 0\n  */\nconst countWords = (word) => {\n  var count = 0;\n  var vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  for (var i = 0; i < word.length; i++) {\n    if (vowels.indexOf(word[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  gotCloserVowel,\n  intersect,\n  union,\n  countWords\n};\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let ret = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      let j = i;\n      while (lst[j]!== ')') {\n        j++;\n      }\n      if (lst[j - 1] === '(') {\n        ret = true;\n      }\n    }\n  }\n  return ret;\n};\n\nconst main = () => {\n  const lst = [\n    '()(',\n    ')',\n    '(())()',\n    '())()',\n    '((()()()))'\n  ];\n  lst.forEach(s => console.log(`matchParens(${s}) == ${matchParens(s)? 'Yes' : 'No'})`));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  let arrCopy = [...arr];\n  let indices = [];\n  while (arrCopy.length > 0) {\n    let max = -1;\n    let index = -1;\n    for (let i = 0; i < arrCopy.length; i++) {\n      if (arrCopy[i] > max) {\n        max = arrCopy[i];\n        index = i;\n      }\n    }\n    indices.push(index);\n    arrCopy.splice(index, 1);\n  }\n  return indices.slice(0, k);\n};\n\nconst test = () => {\n  let input = [-3, -4, 5], k = 3;\n  console.log(maximums(input, k));\n  input = [4, -4, 4], k = 2;\n  console.log(maximums(input, k));\n  input = [-3, 2, 1, 2, -1, -2, 1], k = 1;\n  console.log(maximums(input, k));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  const total = lst.reduce((acc, num) => (acc + (num & 1? num : 0)), 0);\n  return total;\n};\n\nconsole.log(solutions([5, 8, 7, 1, 3, 3, 3, 3, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    const sum = 0;\n    for (let i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;\n};\n\n// tag::solution[]\nconst addElements = (arr, k) => {\n    let sum = 0;\n    const kMinusOne = k - 1;\n    for (let i = 0; i < kMinusOne; i++) {\n        sum += arr[i];\n    }\n    return sum;\n};\n// end::solution[]\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n    let list = []\n\n    while(n) {\n        if(n % 2 === 1) {\n            list.push(n)\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n\n    return list\n}\n\nmodule.exports = gottenOdderCollatz<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  if (date === '') {\n    return false\n  }\n  const d = new Date(date)\n  if (d.getDate() < 1 || d.getDate() > 31) {\n    return false\n  }\n  const months = [1, 3, 5, 7, 8, 10, 12]\n  const m = d.getMonth()\n  if (months.indexOf(m) === -1) {\n    return false\n  }\n  if (d.getDate() < 1 || d.getDate() > 30) {\n    return false\n  }\n  const ds = months.indexOf(m)\n  if (ds === -1) {\n    return false\n  }\n  const dss = ds * 31\n  if (d.getDate() > dss) {\n    return false\n  }\n  return true\n}\n\nexport default validDates\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  return txt.split(/\\s+/).filter(s => s.length > 0)\n}\n\n/* Given a list of words, return the words that are anagrams\n  Examples\n  anagrams(\"abc\", \"bac\") ➞ [\"bac\", \"abc\"]\n  anagrams(\"bac\", \"abc\") ➞ [\"abc\", \"bac\"]\n  anagrams(\"cat\", \"act\") ➞ [\"act\", \"cat\"]\n  anagrams(\"bac\", \"abc\") ➞ [\"abc\", \"bac\"]\n  anagrams(\"bac\", \"abc\") ➞ [\"abc\", \"bac\"]\n  */\nconst anagrams = (w1, w2) => {\n  const list1 = splitWord(w1)\n  const list2 = splitWord(w2)\n  const dict1 = {}\n  const dict2 = {}\n  for (let i = 0; i < list1.length; i++) {\n    dict1[list1[i]] = i\n  }\n  for (let i = 0; i < list2.length; i++) {\n    dict2[list2[i]] = i\n  }\n  const intersection = Object.keys(dict1).filter(k => dict2.hasOwnProperty(k))\n  return intersection\n}\n\nmodule.exports = {\n  splitWord, anagrams\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    return a - b;\n  });\n  return sorted.toString() === lst.toString();\n};\n\nconst sort = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    return a - b;\n  });\n  return sorted.toString();\n};\n\nmodule.exports = {\n  isSort,\n  sort\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1.start;\n  const end1 = interval1.end;\n  const start2 = interval2.start;\n  const end2 = interval2.end;\n  const length = Math.abs(end1 - start1) + Math.abs(end2 - start2);\n  if (length === 1) return \"NO\";\n  if (length === 2) return \"YES\";\n  if (length % 2 === 1) return \"NO\";\n  let min = Math.min(start1, start2);\n  let max = Math.max(end1, end2);\n  for (let i = min + 1; i < max; i++) {\n    if (start1 <= i && end1 >= i) return \"YES\";\n    if (start2 <= i && end2 >= i) return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      return null\n    } else if (arr[i] < 0) {\n      product *= -1\n    } else {\n      product *= 1\n    }\n  }\n  return product\n}\n\nmodule.exports = prodsSign\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  if (grid.length === 0) {\n    return [];\n  }\n  const gridLen = grid.length;\n  const rows = grid[0].length;\n  const cols = grid[0][0].length;\n  const dp = new Array(rows + 1).fill(0);\n  const path = [];\n\n  // Initialize the DP table\n  for (let i = 0; i < rows + 1; i++) {\n    for (let j = 0; j < cols + 1; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j] = 1;\n      } else if (i === 0) {\n        dp[i][j] = 0;\n      } else if (j === 0) {\n        dp[i][j] = 0;\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n      }\n    }\n  }\n\n  // We just iterate through each cell of the grid and update the minimum path\n  for (let i = 1; i < gridLen; i++) {\n    for (let j = 1; j < grid[i].length; j++) {\n      const row = grid[i - 1][j - 1];\n      const col = grid[i][j];\n      const minPath = dp[i - 1][j] + 1;\n      if (row === col) {\n        dp[i][j] = minPath;\n      } else if (row < col) {\n        dp[i][j] = Math.min(dp[i - 1][j - 1], dp[i][j - 1]);\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j - 1], dp[i - 1][j]);\n      }\n    }\n  }\n  // Return the path from the shortest to the longest\n  return path.concat(\n    Array.from(Array(grid[rows - 1][cols - 1]), (v, i) => {\n      return dp[rows][cols] - dp[rows - 1][cols - 1] - 1;\n    })\n  );\n};\n\nconsole.log(minPaths([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPaths([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 1) {\n    return [1]\n  }\n  if (n === 2) {\n    return [1, 3]\n  }\n  const tri = [1, 3]\n  const fib = [1, 2]\n  const fib_tmp = []\n  for (let i = 0; i < n - 1; i++) {\n    fib_tmp.push(fib[0] + fib[1])\n    fib.push(fib[1])\n    fib.shift()\n  }\n  tri.push(fib_tmp.shift())\n  return tri\n}\n\nconsole.log(tri(7))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n    const arr = Array.from({length: n}, (_, i) => i + 1);\n    let result = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 1) {\n            result *= arr[i];\n        }\n    }\n    return result;\n};\n\nexport default digit;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      count++;\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n        count--;\n      }\n    }\n  }\n  return count === 0;\n};\n\n// TEST CODE\n\nconst test = [\n  ['[', ']', true],\n  ['[[', ']]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[[]]', true],\n  ['[][]', false],\n  ['[][[', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['[][]', false],\n  ['[][]', true],\n  ['"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  return lst.reduce((prev, current, index) => {\n    const next = index === lst.length - 1? null : lst[index + 1];\n    return prev + current * current + (next? next - current * current : 0);\n  }, 0);\n};\n\nconsole.log(sumsSquares([1,2,3]));\nconsole.log(sumsSquares([1,4,9]));\nconsole.log(sumsSquares([1,3,5,7]));\nconsole.log(sumsSquares([1.4,4.2,0]));\nconsole.log(sumsSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n    txt = txt.toLowerCase()\n    const lastChars = txt.slice(-1)\n    const isALetter = lastChars.match(/[a-z]/)\n    const notALetter =!isALetter\n    return isALetter && notALetter\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsADigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsADigit(\"apple pi e\") ➞ false\n  checkIfLastCharsIsADigit(\"apple pi e \") ➞ true\n  checkIfLastCharsIsADigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsADigit = (txt) => {\n    txt = txt.toLowerCase()\n    const lastChars = txt.slice(-1)\n    const isADigit = lastChars.match(/[0-9]/)\n    const notADigit =!isADigit\n    return isADigit && notADigit\n}\n\n/* Create a function that returns true if the last character\n  of a given string is an upper case letter, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsAupper(\"apple pie\") ➞ true\n  checkIfLastCharsIsAupper(\"apple pi e\") ➞ false\n  checkIfLastCharsIsAupper(\"apple pi e \") ➞ false\n  checkIfLastCharsIsAupper(\"\") ➞ false\n  */\nconst checkIfLastCharsIsAupper = (txt) => {\n    txt = txt.toLowerCase()\n    const lastChars = txt.slice(-1)\n    const isAupper = lastChars.match(/[A-Z]/)\n    const notAupper =!isAupper\n    return isAupper && notAupper\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a lower case letter, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsAlower(\"apple pie\") ➞ false\n  checkIfLastCharsIsAlower(\"apple pi e\") ➞ true\n  checkIfLastCharsIsAlower(\"apple pi e \") ➞ false\n  checkIfLastCharsIsAlower(\"\") ➞ false\n  */\nconst checkIfLastCharsIsAlower = (txt) => {\n    txt = txt.toLowerCase()\n    const lastChars = txt.slice(-1)\n    const isAlower = lastChars.match(/[a-z]/)\n    const notAlower =!isAlower\n    return isAlower && notAlower\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a number, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetterOrNumber(\"apple pie\") ➞ true\n  checkIfLastCharsIsALetterOrNumber(\"apple pi e\") ➞ false\n  checkIfLastCharsIsALetterOrNumber(\"apple pi e \") ➞ true\n  checkIfLastCharsIsALetterOrNumber(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetterOrNumber = (txt) => {\n    txt = txt.toLowerCase()\n    const lastChars = txt.slice(-1)\n    const isALetterOrNumber = lastChars.match(/[a-z0-9]/)\n    const notALetterOrNumber =!isALetterOrNumber\n    return isALetterOrNumber && notALetterOrNumber\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a space, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsASpace(\"apple pie\") ➞ false\n  checkIfLastCharsIsASpace(\"apple pi e\") ➞ true\n  checkIfLastCharsIsASpace(\"apple pi e \") ➞ false\n  checkIfLastCharsIsASpace(\"\") ➞ true\n  */\nconst checkIfLastCharsIsASpace = (txt) => {\n    txt = txt.toLowerCase()\n    const lastChars = txt.slice(-1)\n    const isASpace = lastChars.match(/[\\s]/)\n    const notASpace =!isASpace\n    return isASpace && notASpace\n}\n\n/* Create a function that returns true if the last character\n  of a given string is an apostrophe, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsApostrophe(\"apple pie\") ➞ false\n  checkIfLastCharsIsApostrophe(\"apple pi e\") ➞ false\n  checkIfLastCharsIsApostrophe(\"apple pi e \") ➞ true\n  checkIfLastCharsIsApostrophe(\"\") ➞ false\n  */\nconst checkIfLastCharsIsApostrophe = (txt) => {\n    txt = txt.toLowerCase()\n    const lastChars = txt.slice(-1)\n    const isApostrophe = lastChars.match(/[']/)\n    const notApostrophe =!isApostrophe\n    return isApostrophe && notApostrophe\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let result = -1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      result = i\n      break\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  if (!lst || lst.length === 0) {\n    return (null, null);\n  }\n\n  let largest = null;\n  let smallest = null;\n\n  lst.forEach((n) => {\n    if (largest === null || n > largest) {\n      largest = n;\n    }\n\n    if (smallest === null || n < smallest) {\n      smallest = n;\n    }\n  });\n\n  return [largest, smallest];\n};\n\n/*\n  Given an array of strings, return a list of pairs\n  where each pair contains two strings (e.g. ('a', 'b')\n  or ('c', 'd')).\n  If there are no strings, return an empty list.\n  If there are no pairs, return a list with one empty pair\n  (e.g. [()]).\n  Examples:\n  stringPairs(['a', 'b', 'c']) == [('a', 'b'), ('c', 'd')]\n  stringPairs(['a', 'b', 'c']) == [()]\n  stringPairs(['a']) == [()]\n  stringPairs([]) == [()]\n  stringPairs([]) == []\n  */\nconst stringPairs = (lst) => {\n  if (!lst || lst.length === 0) {\n    return [];\n  }\n\n  let pairs = [];\n\n  for (let i = 0; i < lst.length - 1; i++) {\n    pairs.push([lst[i], lst[i + 1]]);\n  }\n\n  pairs.push([]);\n\n  return pairs;\n};\n\n/*\n  Given an array of strings, return a list of tuples\n  where each tuple contains two strings (e.g. ('a', 'b')\n  or ('c', 'd')).\n  If there are no strings, return an empty list.\n  If there are no tuples, return a list with one empty tuple\n  (e.g. [(())]).\n  Examples:\n  stringTuples(['a', 'b', 'c']) == [('a', 'b'), ('c', 'd')]\n  stringTuples(['a', 'b', 'c']) == [(())]\n  stringTuples(['a', 'b', 'c']) == [()]\n  stringTuples([]) == [()]\n  stringTuples([]) == []\n  */\nconst stringTuples = (lst) => {\n  if (!lst || lst.length === 0) {\n    return [];\n  }\n\n  let tuples = [];\n\n  for (let i = 0; i < lst.length - 1; i++) {\n    tuples.push([lst[i], lst[i + 1]]);\n  }\n\n  tuples.push([]);\n\n  return tuples;\n};\n\n/*\n  Given a list of string pairs, return the length of the longest\n  pair in the list.\n  Examples:\n  longestPairLength(['a', 'b', 'c']) == 2\n  longestPairLength(['a', 'b', 'c', 'd']) == 3\n  longestPairLength(['a', 'b', 'c']) == 3\n  longestPairLength([]) == 0\n  longestPairLength([]) == 0\n  */\nconst longestPairLength = (lst) => {\n  if (!lst || lst.length === 0) {\n    return 0;\n  }\n\n  let max = 0;\n  let pair;\n\n  for (let i = 0; i < lst.length - 1; i++) {\n    pair = [lst[i], lst[i + 1]];\n    if (pair.length > max) {\n      max = pair.length;\n    }\n  }\n\n  return max;\n};\n\n/*\n  Given a list of string pairs, return the length of the shortest\n  pair in the list.\n  Examples:\n  shortestPairLength(['a', 'b', 'c']) == 1\n  shortestPairLength(['a', 'b', 'c', 'd']) == 2\n  shortestPairLength(['a', 'b', 'c']) == 2\n  shortestPairLength([]) == 0\n  shortestPairLength([]) == 0\n  */\nconst shortestPairLength = (lst) => {\n  if (!lst || lst.length === 0) {\n    return 0;\n  }\n\n  let min = null;\n  let pair;\n\n  for (let i = 0; i < lst.length - 1; i++) {\n    pair = [lst[i], lst[i + 1]];\n    if (min === null || pair.length < min) {\n      min = pair.length;\n    }\n  }\n\n  return min;\n};\n\n/*\n  Given a list of strings, return a list of the longest strings\n  in the list.\n  Examples:\n  longestStrings(['a', 'b', 'c']) == ['a', 'b', 'c']\n  longestStrings(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\n  longestStrings(['a', 'b', 'c']) == ['a', 'b', 'c']\n  longestStrings([]) == []\n  longestStrings([]) == []\n  */\nconst longestStrings = (lst) => {\n  if (!lst || lst.length === 0) {\n    return [];\n  }\n\n  let max = '';\n  let str;\n\n  for (let i = 0; i < lst.length - 1; i++) {\n    str = lst[i];\n    if (str.length > max.length) {\n      max = str;\n    }\n  }\n\n  return [max];\n};\n\n"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? a : b;\n    } else {\n      return a;\n    }\n  } else {\n    if (typeof b === 'number') {\n      return b;\n    } else {\n      return a;\n    }\n  }\n};\n\nconsole.log(comparingOne(1, 2.5));\nconsole.log(comparingOne(1, \"2,3\"));\nconsole.log(comparingOne(\"5,1\", \"6\"));\nconsole.log(comparingOne(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  return (n % 2) === 0 && n >= 4;\n}\n\nconst isSumOfFourPositiveEvenNumbers = (n) => {\n  return isEqualToSummingEven(n) && (n - 2) % 2 === 0;\n}\n\nexport { isEqualToSummingEven, isSumOfFourPositiveEvenNumbers };\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if(n <= 0) {\n    return 1\n  } else {\n    return n * specialFactorial(n-1) * specialFactorial(n-2) * specialFactorial(n-3) * 1\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixesSpace(\"_Example\") == \"Example\"\n  fixesSpace(\"_Example 1\") == \"Example 1\"\n  fixesSpace(\"_ Example 2\") == \"Example 2\"\n  fixesSpace(\" _Example   3\") == \"Example 3\"\n  */\nconst fixesUnderscore = (text) => {\n  return text.replace(/_+/g,'')\n}\n\nconst fixesDoubleUnderscore = (text) => {\n  return text.replace(/__+/g, '_')\n}\n\nconst fixesTripleUnderscore = (text) => {\n  return text.replace(/___+/g, '-')\n}\n\nconst fixesCamelCase = (text) => {\n  return text.replace(/[A-Z]+/g, (match) => {\n    return fixesSpace(match.charAt(0).toLowerCase() + match.substr(1))\n  })\n}\n\nconst fixesLowerCamelCase = (text) => {\n  return text.replace(/[A-Z]+/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesUpperCamelCase = (text) => {\n  return text.replace(/[a-z]+/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesLowerUnderscore = (text) => {\n  return text.replace(/_/g,'')\n}\n\nconst fixesLowerUnderscoreCamelCase = (text) => {\n  return text.replace(/_/g,'')\n}\n\nconst fixesLowerUnderscoreUpperCamelCase = (text) => {\n  return text.replace(/_/g,'')\n}\n\nconst fixesLowerUnderscoreUpperCamelCaseUpperCamelCase = (text) => {\n  return text.replace(/_/g,'')\n}\n\nconst fixesCamelCaseUpperCamelCase = (text) => {\n  return text.replace(/[a-z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesUpperUnderscoreCamelCase = (text) => {\n  return text.replace(/[A-Z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesUnderscoreUpperCamelCase = (text) => {\n  return text.replace(/[A-Z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesUnderscoreUpperCamelCaseUpperCamelCase = (text) => {\n  return text.replace(/[A-Z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesUnderscoreUpperCamelCaseUpperUnderscoreCamelCase = (text) => {\n  return text.replace(/[A-Z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesCamelCaseUnderscore = (text) => {\n  return text.replace(/[a-z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesCamelCaseUpperUnderscore = (text) => {\n  return text.replace(/[A-Z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesCamelCaseUpperUnderscoreCamelCase = (text) => {\n  return text.replace(/[A-Z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesCamelCaseUnderscoreCamelCase = (text) => {\n  return text.replace(/[a-z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesCamelCaseUnderscoreCamelCaseUnderscore = (text) => {\n  return text.replace(/[a-z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesUnderscoreCamelCaseUpperUnderscoreCamelCase = (text) => {\n  return text.replace(/[A-Z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixesCamelCaseUpperUnderscoreCamelCaseUnderscore = (text) => {\n  return text.replace(/[A-Z]/g, (match) => {\n    return fixesSpace(match.charAt(0).toUpperCase() + match.substr(1))\n  })\n}\n\nconst fixes"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n\tlet name = file_name;\n\tlet dot_pos = name.indexOf('.');\n\tlet before_dot_len = name.indexOf('.');\n\tlet after_dot_len = name.length - after_dot_len - 1;\n\tlet result = 'Yes';\n\t\n\tif (dot_pos == -1) {\n\t\tresult = 'No';\n\t}\n\t\n\tif (before_dot_len == -1) {\n\t\tresult = 'No';\n\t}\n\t\n\tif (after_dot_len == -1) {\n\t\tresult = 'No';\n\t}\n\t\n\tif (before_dot_len == 0) {\n\t\tresult = 'No';\n\t}\n\t\n\tif (after_dot_len == 0) {\n\t\tresult = 'No';\n\t}\n\t\n\tif (before_dot_len == 1) {\n\t\tif (name.charAt(0) >= 'A' && name.charAt(0) <= 'Z') {\n\t\t\tresult = 'No';\n\t\t}\n\t}\n\t\n\tif (after_dot_len == 3) {\n\t\tif (name.charAt(after_dot_len)!= 't' && name.charAt(after_dot_len)!= 'e' && name.charAt(after_dot_len)!= 'd' && name.charAt(after_dot_len)!= 'l') {\n\t\t\tresult = 'No';\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\n//Expose the function to the browser\nwindow.filesNamesCheck = filesNamesCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  let squares = 0;\n  lst.forEach((num, index) => {\n    if (index % 3 === 0) {\n      squares += num * num;\n    }\n    if (index % 4 === 0) {\n      sum += num * num * num;\n    }\n  });\n  return sum + squares;\n};\n\nconsole.log(sumsSquares([1,2,3]));\nconsole.log(sumsSquares([]));\nconsole.log(sumsSquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  let words = sentence.split(' ')\n  let wordsPrime = []\n  for (let word of words) {\n    if (isPrime(word.length)) {\n      wordsPrime.push(word)\n    }\n  }\n  let wordLength = wordsPrime.length\n  let arr = []\n  for (let i = 0; i < wordLength; i++) {\n    let arr1 = []\n    let arr2 = []\n    for (let j = 0; j < wordLength; j++) {\n      arr1.push(wordsPrime[j][i])\n      arr2.push(wordsPrime[j + i][wordLength - j - 1])\n    }\n    arr.push(arr1.join(''))\n    arr.push(arr2.join(''))\n  }\n  return arr.join(' ')\n}\n\nconsole.log(wordInSentences(\"This is a test\"))\nconsole.log(wordInSentences(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xn = x.split('/');\n  const yn = n.split('/');\n  const xlen = xn.length;\n  const ylen = yn.length;\n  const zlen = Math.max(xlen, ylen);\n  const z = [];\n  const xs = [];\n  let xd = xn[0];\n  let yd = yn[0];\n  let i = 1;\n\n  for (; i < zlen; i++) {\n    if (xlen === ylen && xn[i] === yn[i]) {\n      xd += yn[i];\n      yd += xn[i];\n    } else {\n      if (xlen === zlen && yn[i] === zn[i]) {\n        xd += zn[i];\n        yd += xn[i];\n      } else {\n        if (xd === yd) {\n          yd -= xd;\n          xd += yn[i];\n          yd += xn[i];\n        } else {\n          xd += yn[i];\n          yd += xn[i];\n        }\n      }\n    }\n  }\n\n  const zs = xd +'' + yd;\n\n  if (xd === yd) {\n    return true;\n  }\n\n  if (yd === '0') {\n    return false;\n  }\n\n  return zs.match(/^[1-9]*\\d*$/) && zs.replace(/\\d*$/, '')!== zs.replace(/\\d*$/, '');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  if (nums.length === 0) return nums;\n  const point = (num) => num % 10;\n  const index = nums.map(point).sort();\n  const sorted = nums.slice();\n  let i = 0;\n  for (let j = 0; j < sorted.length; j++) {\n    sorted[j] = index[i++];\n  }\n  return sorted;\n};\n\nexport default orderByPoint;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let oddNum = 0\n  for (let n of nums) {\n    if (n % 2 === 1) {\n      if (n > 10) {\n        oddNum++\n      }\n    }\n  }\n  return oddNum\n}\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const numOfTriples = 0\n  const i = 0\n  const j = 1\n  const k = 2\n  while (i < n) {\n    while (j < n) {\n      while (k < n) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          numOfTriples += 1\n        }\n        k++\n      }\n      j++\n    }\n    i++\n  }\n  return numOfTriples\n}\n\nconsole.log(gotMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let i = 0\n  let j = 0\n  let res = []\n  while (i < 7) {\n    if (res[j] === undefined) {\n      res[j] = planet1\n      i++\n    } else {\n      res[j] = res[j] + \", \" + planet1\n      i++\n    }\n    j++\n  }\n  while (j < 7) {\n    if (res[j] === undefined) {\n      res[j] = planet2\n      j++\n    } else {\n      res[j] = res[j] + \", \" + planet2\n      j++\n    }\n  }\n  return res\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Saturn\", \"Earth\"))\nconsole.log(bf(\"Saturn\", \"Jupiter\"))\nconsole.log(bf(\"Uranus\", \"Saturn\"))\nconsole.log(bf(\"Saturn\", \"Jupiter\"))\nconsole.log(bf(\"Jupiter\", \"Saturn\"))\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  return lst.reduce((a, b) => a + b, 0) % 2 == 0? lst : lst.sort((a, b) => a.length - b.length);\n}\n\n// console.log(sortListsSums([\"aa\", \"a\", \"aaa\"]));\n// console.log(sortListsSums([\"ab\", \"a\", \"aaa\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return (n % 2)? x : y\n}\n\nexport default xOrY\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  const list = lst.filter((num) => {\n    return typeof num === 'number' && num > 0 && num % 2 === 1\n  })\n\n  const sumOfSquares = list.reduce((prev, next) => {\n    return prev + next * next\n  }, 0)\n\n  return sumOfSquares\n}\n\n/* Given a list of numbers, return the number that is one more than the\n  difference between the largest and the smallest number in the list.\n  If the input list is empty, return 0.\n  */\nconst largest = (lst) => {\n  const min = lst.reduce((prev, next) => {\n    return Math.min(prev, next)\n  }, Number.MAX_SAFE_INTEGER)\n\n  const max = lst.reduce((prev, next) => {\n    return Math.max(prev, next)\n  }, Number.MIN_SAFE_INTEGER)\n\n  return max - min + 1\n}\n\n/* Given a list of numbers, return the number that is one less than the\n  difference between the largest and the smallest number in the list.\n  If the input list is empty, return 0.\n  */\nconst smallest = (lst) => {\n  const min = lst.reduce((prev, next) => {\n    return Math.min(prev, next)\n  }, Number.MAX_SAFE_INTEGER)\n\n  const max = lst.reduce((prev, next) => {\n    return Math.max(prev, next)\n  }, Number.MIN_SAFE_INTEGER)\n\n  return max - min - 1\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list.\n  If the input list is empty, return 0.\n  */\nconst sum = (lst) => {\n  return lst.reduce((prev, next) => {\n    return prev + next\n  }, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  If the input list is empty, return 0.\n  */\nconst sumOfSquares = (lst) => {\n  return lst.reduce((prev, next) => {\n    return prev + next * next\n  }, 0)\n}\n\n/* Given a list of numbers, return the difference between the largest and\n  the smallest number in the list.\n  If the input list is empty, return 0.\n  */\nconst difference = (lst) => {\n  return largest(lst) - smallest(lst)\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that\n  are odd.\n  If the input list is empty, return 0.\n  */\nconst sumOfOdd = (lst) => {\n  return lst.reduce((prev, next) => {\n    return prev + next\n  }, 0)\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that\n  are even.\n  If the input list is empty, return 0.\n  */\nconst sumOfEven = (lst) => {\n  return lst.reduce((prev, next) => {\n    return prev + next\n  }, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd.\n  If the input list is empty, return 0.\n  */\nconst sumOfOddSquares = (lst) => {\n  return lst.reduce((prev, next) => {\n    return prev + next * next\n  }, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even.\n  If the input list is empty, return 0.\n  */\nconst sumOfEvenSquares = (lst) => {\n  return lst.reduce((prev, next) => {\n    return prev + next * next\n  }, 0)\n}\n\n/* Given a list of numbers, return the number that is one more than the\n  difference between the largest number in the list and the smallest number\n  in the list.\n  If the input list is empty, return 0.\n  */\nconst largestDifference = (lst) => {\n  return largest(lst) - smallest(lst) + 1\n}\n\n/* Given a list of numbers, return the number that is one less than the\n  difference between the largest number in the list and the smallest number\n  in the list.\n  If the input list is empty, return 0.\n  */\nconst smallestDifference = (lst) => {\n  return largest(lst) - smallest(lst) - 1\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list.\n  If the input list is empty, return 0.\n  */\nconst sumOfAll = (lst) => {\n  return sum(lst)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  If the input list is empty, return 0.\n  */\nconst sumOfAllSquares = (lst) => {\n  return sumOfSquares(lst)\n}\n\n/* Given a list of numbers, return the difference between the largest number\n  in the list and the smallest number in the list.\n  If the input list is empty, return 0.\n  */\nconst differenceOfAll = (lst) => {\n  return largestDifference(lst)\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that\n  are odd.\n  If the input list is empty, return 0.\n  */\nconst sumOfOddOfAll = (lst) => {\n  return sumOfOdd(lst)\n}\n\n/* Given a list of numbers, return the sum of the numbers in the list that\n  are even.\n  If the input list is empty, return 0.\n  */\nconst sumOfEvenOfAll = (l"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let matches = game.slice(0);\n  let results = [];\n  \n  for (let i = 0; i < game.length; i++) {\n    let found = false;\n    for (let j = 0; j < guess.length; j++) {\n      if (game[i] === guess[j]) {\n        found = true;\n      }\n    }\n    \n    if (found) {\n      results.push(0);\n    } else {\n      results.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  \n  return results;\n};\n\ndescribe(\"compare\", () => {\n  it(\"should return the correct result\", () => {\n    expect(compare([1,2,3,4,5,1], [1,2,3,4,2,-2])).toEqual([0,0,0,0,3,3]);\n    expect(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])).toEqual([4,4,1,0,0,6]);\n  });\n});<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const length = extensions.length\n  const caps = 0\n  const sms = 0\n  const maxStrength = -1\n  const strength = 0\n  const name = ''\n\n  for (let i = 0; i < length; i++) {\n    const extension = extensions[i]\n\n    // Extract the name of the extension\n    const extensionName = extension.substring(extension.lastIndexOf('.') + 1)\n\n    // Extract the uppercase letters of the extension name\n    const extensionCaps = extensionName.split('_')\n    const extensionCapsLength = extensionCaps.length\n    const extensionCapStrength = 0\n\n    for (let j = 0; j < extensionCapsLength; j++) {\n      const cap = extensionCaps[j].toUpperCase()\n      if (cap === extensionCaps[j]) {\n        caps += 1\n      } else if (cap < extensionCaps[j]) {\n        caps += 1\n      } else {\n        sms += 1\n      }\n\n      if (cap > maxStrength) {\n        maxStrength = cap\n        strength = extensionCapStrength\n        name = extensionName\n      }\n    }\n  }\n\n  return `${class_name}.${name}`\n}\n\nexport default strongestExtension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let b2 = b.split('').reverse().join('');\n  let is_substring = b2.startsWith(a) || a.startsWith(b2);\n  return is_substring;\n};\n\nconsole.log(cycpatternCheck('abcd','abd'));\nconsole.log(cycpatternCheck('hello','ell'));\nconsole.log(cycpatternCheck('whassup','psus'));\nconsole.log(cycpatternCheck('abab','baa'));\nconsole.log(cycpatternCheck('efef','eeff'));\nconsole.log(cycpatternCheck('himenss','simen'));<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n    const arr = [];\n    for (let i = 0; i < num; i++) {\n        if (i % 2 === 0) {\n            arr.push(1);\n        } else {\n            arr.push(2);\n        }\n    }\n    return arr;\n};\n\nconsole.log(evenOdderCount(123));<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const map = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xvi',\n    50: 'l',\n    90: 'xvii',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'xcvii',\n    1000:'m',\n  };\n\n  const arr = [];\n  let num = number;\n  for (let i = 0; i < map.length; i++) {\n    while (num >= map[i]) {\n      arr.push(map[i]);\n      num -= map[i];\n    }\n  }\n  return arr.reverse().join('');\n};\n\n// TEST\n\nconst intToMiniRoman = (number) => {\n  const map = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xvi',\n    50: 'l',\n    90: 'xvii',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'xcvii',\n    1000:'m',\n  };\n\n  const arr = [];\n  let num = number;\n  for (let i = 0; i < map.length; i++) {\n    while (num >= map[i]) {\n      arr.push(map[i]);\n      num -= map[i];\n    }\n  }\n  return arr.reverse().join('');\n};\n\nconst tests = [\n  {\n    number: '1',\n    expected: 'i',\n  },\n  {\n    number: '4',\n    expected: 'iv',\n  },\n  {\n    number: '5',\n    expected: 'v',\n  },\n  {\n    number: '9',\n    expected: 'ix',\n  },\n  {\n    number: '10',\n    expected: 'x',\n  },\n  {\n    number: '40',\n    expected: 'xvi',\n  },\n  {\n    number: '50',\n    expected: 'l',\n  },\n  {\n    number: '90',\n    expected: 'xvii',\n  },\n  {\n    number: '100',\n    expected: 'c',\n  },\n  {\n    number: '400',\n    expected: 'cd',\n  },\n  {\n    number: '500',\n    expected: 'd',\n  },\n  {\n    number: '900',\n    expected: 'xcvii',\n  },\n  {\n    number: '1000',\n    expected:'m',\n  },\n];\n\n// TEST\n\nconst runTests = () => {\n  tests.forEach(({ number, expected }) => {\n    const actual = intToMiniRoman(number);\n    console.log(`${number} => ${actual}`);\n    console.log(`${expected}`);\n    console.log(`  => ${actual === expected}`);\n  });\n};\n\n// RUN\n\nrunTests();\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  let x = (a + b + c) / 2\n  if (a + b <= c) {\n    return false\n  }\n  if (b + c <= a) {\n    return false\n  }\n  if (a + c <= b) {\n    return false\n  }\n  if (x + b <= a) {\n    return false\n  }\n  if (x + c <= b) {\n    return false\n  }\n  if (x + a <= c) {\n    return false\n  }\n  return true\n}\n\nconst triangles = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\n/*\n Given the length of a side of a right-angled triangle, return the length of\n the hypotenuse of the triangle.\n  Example:\n  hypotenuse(3) == sqrt(3^2 + 3^2 + 3^2) = 6\n */\nconst hypotenuse = (a) => {\n  return Math.sqrt(a * a + a * a + a * a)\n}\n\n/*\n Given the lengths of two sides of a right-angled triangle, return the length\n of the right-angle.\n  Example:\n  rightAngle(3, 4) == sqrt(3^2 + 4^2) = 5\n */\nconst rightAngle = (a, b) => {\n  return Math.sqrt(a * a + b * b)\n}\n\n/*\n Given the length of a side of a right-angled triangle, return the length of\n the other side of the triangle.\n  Example:\n  otherSide(3, 4) == sqrt(4^2 + 4^2) = 4\n */\nconst otherSide = (a, b) => {\n  return Math.sqrt(b * b + a * a)\n}\n\nconst triangle = (a, b, c) => {\n  if (rightAngleTriangles(a, b, c)) {\n    return hypotenuse(a + b + c)\n  }\n  return rightAngle(a, b)\n}\n\nconst otherSide = (a, b, c) => {\n  if (rightAngleTriangles(a, b, c)) {\n    return hypotenuse(a + b + c)\n  }\n  return otherSide(a, b)\n}\n\nconst main = () => {\n  console.log(triangle(2, 3, 4))\n  console.log(otherSide(2, 3, 4))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  const uniqueChar = new Map();\n\n  const findUniqueChar = (string) => {\n    if (uniqueChar.has(string)) {\n      return string;\n    }\n    const len = string.length;\n    let char = '';\n    for (let i = 0; i < len; i++) {\n      char = string[i];\n      if (uniqueChar.has(char)) {\n        return char;\n      }\n    }\n    uniqueChar.set(string, char);\n    return char;\n  };\n\n  const findMax = (string) => {\n    let max = '';\n    for (let i = 0; i < string.length; i++) {\n      const char = string[i];\n      if (uniqueChar.has(char)) {\n        const max = char;\n      }\n    }\n    return max;\n  };\n\n  const findMaxUniqueChar = (string) => {\n    let max = '';\n    for (let i = 0; i < string.length; i++) {\n      const char = string[i];\n      if (uniqueChar.has(char)) {\n        const max = char;\n        break;\n      }\n    }\n    return max;\n  };\n\n  return words.reduce((max, string) => {\n    const maxUniqueChar = findMaxUniqueChar(string);\n    if (max.length < string.length) {\n      max = string;\n    }\n    return max;\n  });\n};\n\nconsole.log(foundMax([\"name\", \"of\", \"string\"]));\nconsole.log(foundMax([\"name\", \"enam\", \"game\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [ number, remaining ]\n  }\n\n  const eaten = number - (need - remaining)\n  const needToEat = Math.min(need - eaten, remaining)\n  return [ eaten, needToEat ]\n}\n\nconst test = [\n  {\n    number: 1,\n    need: 4,\n    remaining: 10\n  },\n  {\n    number: 3,\n    need: 5,\n    remaining: 10\n  },\n  {\n    number: 4,\n    need: 5,\n    remaining: 10\n  },\n  {\n    number: 10,\n    need: 5,\n    remaining: 10\n  }\n]\n\nconst correct = [\n  {\n    number: 3,\n    need: 5,\n    remaining: 8\n  },\n  {\n    number: 4,\n    need: 5,\n    remaining: 7\n  },\n  {\n    number: 5,\n    need: 5,\n    remaining: 5\n  },\n  {\n    number: 6,\n    need: 5,\n    remaining: 4\n  },\n  {\n    number: 7,\n    need: 5,\n    remaining: 3\n  },\n  {\n    number: 8,\n    need: 5,\n    remaining: 2\n  },\n  {\n    number: 9,\n    need: 5,\n    remaining: 1\n  },\n  {\n    number: 10,\n    need: 5,\n    remaining: 0\n  }\n]\n\nconst testCorrectness = () => {\n  for (let i = 0; i < test.length; i++) {\n    const result = eat(test[i].number, test[i].need, test[i].remaining)\n    const correctResult = correct[i]\n\n    if (result[0] === correctResult[0] && result[1] === correctResult[1]) {\n      console.log('Correct')\n    } else {\n      console.log(`result: ${result}`)\n      console.log('correct:', correctResult)\n    }\n  }\n}\n\nconst main = () => {\n  testCorrectness()\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operand.length === 1) {\n    const operandValue = operand[0];\n    if (typeof operator === 'number') {\n      return operator * operandValue;\n    }\n    return operator.map(operandValue);\n  }\n  const operatorLength = operator.length;\n  let result = operator[0];\n  for (let i = 1; i < operatorLength; i++) {\n    result = operator[i](result, operand[i]);\n  }\n  return result;\n};\n\nconst add = (num1, num2) => num1 + num2;\nconst sub = (num1, num2) => num1 - num2;\nconst mul = (num1, num2) => num1 * num2;\nconst div = (num1, num2) => num1 / num2;\nconst pow = (num1, num2) => num1 ** num2;\nconst floor = (num1, num2) => Math.floor(num1 / num2);\n\nconst getOperator = (num1, num2) => {\n  if (typeof num1 === 'number') {\n    if (typeof num2 === 'number') {\n      return [add, sub, mul, div, pow, floor];\n    }\n    return [add, sub, mul, div, pow];\n  }\n  if (typeof num2 === 'number') {\n    return [add, sub, mul, div, pow];\n  }\n  return [add, sub, mul, div, pow, floor];\n};\n\nconst sum = (numList) => {\n  if (numList.length === 1) {\n    return numList[0];\n  }\n  return numList.reduce(add, 0);\n};\n\nconst max = (numList) => {\n  if (numList.length === 1) {\n    return numList[0];\n  }\n  return numList.reduce(mul, 0);\n};\n\nconst min = (numList) => {\n  if (numList.length === 1) {\n    return numList[0];\n  }\n  return numList.reduce(sub, 0);\n};\n\nconst product = (numList) => {\n  if (numList.length === 1) {\n    return numList[0];\n  }\n  return numList.reduce(mul, 1);\n};\n\nconst floorDiv = (num1, num2) => Math.floor(num1 / num2);\nconst ceilDiv = (num1, num2) => Math.ceil(num1 / num2);\nconst ceil = (num1, num2) => Math.ceil(num1 / num2);\n\nconst alg = (operator, operand) => {\n  const operatorLength = operator.length;\n  let result = operator[0];\n  for (let i = 1; i < operatorLength; i++) {\n    result = operator[i](result, operand[i]);\n  }\n  return result;\n};\n\nexport {\n  doAlgebra,\n  getOperator,\n  sum,\n  max,\n  min,\n  floor,\n  ceil,\n  floorDiv,\n  ceilDiv,\n  alg\n};\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const lower = (c) => (c.toLowerCase() === c)\n  const upper = (c) => (c.toUpperCase() === c)\n  const isAlpha = (c) => ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n  let isAlphaIndex = 0\n  const reverse = (s) => (s.split('').reverse().join(''))\n\n  if (s.length > 0) {\n    let reverseStart = 0\n    for (let i = 0; i < s.length; i++) {\n      if (lower(s[i])) {\n        s[i] = upper(s[i])\n      } else if (upper(s[i])) {\n        s[i] = lower(s[i])\n      } else if (isAlpha(s[i])) {\n        s[i] = s[isAlphaIndex]\n        isAlphaIndex++\n      }\n    }\n  }\n  return s\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === null) return null;\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  const hash = md5.digest('hex');\n\n  return hash;\n};\n\nexport default stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i += 2) {\n    result.push(i)\n  }\n  return result\n}\n\nconst testGenerateIntegers = () => {\n  assert.deepEqual(generateIntegers(2, 8), [2, 4, 6, 8])\n  assert.deepEqual(generateIntegers(8, 2), [2, 4, 6, 8])\n  assert.deepEqual(generateIntegers(10, 14), [])\n}\n\nconst generateRanges = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i += 2) {\n    result.push([i, i + 1])\n  }\n  return result\n}\n\nconst testGenerateRanges = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges2 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges3 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges4 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges5 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges6 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges7 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges8 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges9 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges10 = () => {\n  assert.deepEqual(generateRanges(2, 8), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(8, 2), [[2, 3], [4, 5], [6, 7], [8, 9]])\n  assert.deepEqual(generateRanges(10, 14), [[10, 11], [12, 13], [14, 15]])\n}\n\nconst testGenerateRanges11 ="}
