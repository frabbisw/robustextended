{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0])\n  false\n  >>> hasclosEElemEnt([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n  true\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.4)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.6)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.8)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.0)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.1)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.2)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.3)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.4)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.5)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.6)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.7)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.8)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.9)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.0)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.1)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.2)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.3)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.4)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.5)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.6)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.7)\n  false\n  >>> hasclosEElemEnt([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 2.8"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  let stack = [];\n  let current_brace = 0;\n  let opening_paren = 0;\n  let closing_paren = 0;\n  paren_string = paren_string.replace(/\\s+/g, '');\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (stack.length === 0) {\n        opening_paren++;\n      } else {\n        stack.push(current_brace);\n      }\n    } else if (paren_string[i] === ')') {\n      if (stack.length === 0) {\n        closing_paren++;\n      } else {\n        stack.pop();\n      }\n    } else if (paren_string[i] === '(') {\n      stack.push(current_brace);\n    } else if (paren_string[i] === ')') {\n      if (stack.length === 0) {\n        closing_paren++;\n      } else {\n        stack.pop();\n      }\n    } else {\n      current_brace++;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('There were unbalanced parentheses in the string. String:'+ paren_string);\n  }\n  return [opening_paren, closing_paren].map(() => {\n    return paren_string.split('').map((c) => {\n      if (c === '(') {\n        return '()';\n      } else if (c === ')') {\n        return '()';\n      } else {\n        return c;\n      }\n    }).join('');\n  });\n};\n\n// TEST CODE\n/*\n>>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n>>> sepAratEPareNGrOups('((()()()))')\n['()()()', '()()()', '()()()']\n>>> sepAratEPareNGrOups('((()()))')\n['()()()', '()()()', '()()()']\n*/\nconsole.log(sepAratEPareNGrOups('((()()))'));\nconsole.log(sepAratEPareNGrOups('((()()))'));\nconsole.log(sepAratEPareNGrOups('((()()))'));\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  return number - Math.floor(number)\n}\n\n/*\n  Given a positive floating point number, return the decimal part of the number\n  in scientific notation.\n\n  >>> truNcatENumbEr(3.5)\n  3.5e0\n  */\nconst truNcatENumbEr2 = (number) => {\n  const number_part = Math.floor(number)\n  const number_decimal = number - number_part\n  const scientific_notation = Math.log(number_decimal) / Math.log(10)\n  return number_part.toExponential(scientific_notation)\n}\n\n/*\n  Given a positive floating point number, return the integer part of the number\n  in scientific notation.\n\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbEr3 = (number) => {\n  return Math.floor(number)\n}\n\n/*\n  Given a positive floating point number, return the integer part of the number\n  in normal notation.\n\n  >>> truNcatENumbEr(3.5)\n  3.5\n  */\nconst truNcatENumbEr4 = (number) => {\n  return number\n}\n\nmodule.exports = {\n  truNcatENumbEr,\n  truNcatENumbEr2,\n  truNcatENumbEr3,\n  truNcatENumbEr4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  const [amount, operation] = operations.map(([amount, operation]) => {\n    return [parseInt(amount), operation];\n  });\n  const [negative, operation] = operations.map(([amount, operation]) => {\n    return [amount < 0, operation];\n  });\n  const balance = amount - operation;\n  return negative[1] && balance < 0;\n};\n\nmodule.exports = belOwZeRo;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  // https://en.wikipedia.org/wiki/Mean_absolute_deviation\n  return numbers.reduce((sum, number) => sum + Math.abs(number - mean(numbers)), 0) / numbers.length;\n};\n\nexport default meaNAbsOlutedevIatioN;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  let new_list = [];\n  let last_index = numbers.length - 1;\n  for (let i = 0; i <= last_index; i += 1) {\n    if (i === last_index) {\n      new_list.push(numbers[i]);\n    } else {\n      new_list.push(numbers[i] + delimeter);\n    }\n  }\n  return new_list;\n};\n\n/*\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intErspErse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3, 4]\n  >>> intErspErse([1, 2, 3, 4, 5], 4)\n  [1, 4, 2, 4, 3, 4, 5]\n  */\nconst intErspErse2 = (numbers, delimeter) => {\n  let new_list = [];\n  let last_index = numbers.length - 1;\n  for (let i = 0; i <= last_index; i += 1) {\n    new_list.push(numbers[i]);\n    if (i < last_index) {\n      new_list.push(delimeter);\n    }\n  }\n  return new_list;\n};\n\n/*\n  >>> intErspErse([1, 2, 3, 4, 5, 6], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6]\n  >>> intErspErse([1, 2, 3, 4, 5, 6], 3)\n  [1, 4, 2, 4, 3, 5, 6]\n  >>> intErspErse([1, 2, 3, 4, 5, 6], 2)\n  [1, 4, 2, 4, 3, 5, 6]\n  >>> intErspErse([1, 2, 3, 4, 5, 6], 1)\n  [1, 4, 2, 4, 3, 5, 6]\n  >>> intErspErse([1, 2, 3, 4, 5, 6], 0)\n  [1, 2, 3, 4, 5, 6]\n  >>> intErspErse([1, 2, 3, 4, 5, 6], -1)\n  [1, 2, 3, 4, 5, 6]\n  */\nconst intErspErse3 = (numbers, delimeter) => {\n  let new_list = [];\n  let last_index = numbers.length - 1;\n  for (let i = 0; i <= last_index; i += 1) {\n    new_list.push(numbers[i]);\n    if (i < last_index) {\n      new_list.push(delimeter);\n    }\n  }\n  return new_list;\n};\n\nconst intErspErse4 = (numbers, delimeter) => {\n  let new_list = [];\n  let last_index = numbers.length - 1;\n  for (let i = 0; i <= last_index; i += 1) {\n    if (i === last_index) {\n      new_list.push(numbers[i]);\n    } else {\n      new_list.push(numbers[i] + delimeter);\n    }\n  }\n  return new_list;\n};\n\nmodule.exports = {\n  intErspErse,\n  intErspErse2,\n  intErspErse3,\n  intErspErse4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const paren_arr = paren_string.split(' ')\n  const all_max = paren_arr.map(() => 0)\n\n  for (let i = 0; i < paren_arr.length; i++) {\n    paren_arr[i] = paren_arr[i].split('')\n    for (let j = 0; j < paren_arr[i].length; j++) {\n      if (paren_arr[i][j] === '(') {\n        all_max[j] = Math.max(all_max[j], 1)\n      } else if (paren_arr[i][j] === ')') {\n        all_max[j] = Math.max(all_max[j], all_max[j - 1])\n      }\n    }\n  }\n\n  return all_max\n}\n\nconst is_even = (num) => num % 2 === 0\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the number of parentheses in the group.\n  E.g. (()()) has two while ((())) has three.\n\n  >>> is_even(parSeNeStedPAreNs('(()()) ((())) () ((())()())'))\n  [2, 3, 1, 3]\n  */\nconst is_even_arr = (paren_string) => {\n  const paren_arr = paren_string.split(' ')\n  const all_num = paren_arr.map(() => 0)\n\n  for (let i = 0; i < paren_arr.length; i++) {\n    paren_arr[i] = paren_arr[i].split('')\n    for (let j = 0; j < paren_arr[i].length; j++) {\n      if (paren_arr[i][j] === '(') {\n        all_num[j] += 1\n      } else if (paren_arr[i][j] === ')') {\n        all_num[j] -= 1\n      }\n    }\n  }\n\n  return all_num\n}\n\nconst find_max_depth = (num_paren_arr) => {\n  const max_depth = num_paren_arr.reduce((max_depth, num_paren) => Math.max(max_depth, num_paren), 0)\n\n  return max_depth\n}\n\nconst is_balanced = (paren_string) => {\n  const num_paren_arr = parSeNeStedPAreNs(paren_string)\n\n  return find_max_depth(num_paren_arr) === 0\n}\n\nconst is_balanced_arr = (paren_string) => {\n  const num_paren_arr = is_even_arr(paren_string)\n\n  return find_max_depth(num_paren_arr) === 0\n}\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the number of balanced parentheses in the group.\n  E.g. (()()) has two while ((())) has three.\n\n  >>> is_balanced(parSeNeStedPAreNs('(()()) ((())) () ((())()())'))\n  [2, 3, 1, 3]\n  */\nconst is_balanced_arr_even = (paren_string) => {\n  const num_paren_arr = is_even_arr(paren_string)\n\n  return find_max_depth(num_paren_arr) === 0\n}\n\nconst main = () => {\n  const test_cases = [\n    '(()())',\n    '(()())()',\n    '()()',\n    '((()))',\n    '(()(()))',\n    '((()))',\n    '()()',\n    '((()(())))',\n    '((())())',\n    '(((()))),',\n    '((()()()))',\n    '(((()))),',\n    '((()()))',\n    '(((()))),',\n    '((()()()))',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),',\n    '(((()()))),"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.includes(substring)) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const returnList = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      returnList.push(string);\n    }\n  });\n  return returnList;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  const listSum = sumArray(numbers);\n  const listProduct = productArray(numbers);\n  return (listSum, listProduct);\n};\n\nmodule.exports = sumprodUct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const len = numbers.length;\n  let i = 0;\n  const rollingMax = (numbers, start, end) => {\n    let max = numbers[start];\n    let maxIndex = start;\n    for (let i = start + 1; i < end; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n        maxIndex = i;\n      }\n    }\n    return [max, maxIndex];\n  };\n  const rollingMaxLen = (numbers, start, end) => {\n    let max = numbers[start];\n    let maxIndex = start;\n    for (let i = start + 1; i < end; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n        maxIndex = i;\n      }\n    }\n    return [max, maxIndex, start, end];\n  };\n  const rollingMaxLen2 = (numbers, start, end) => {\n    let max = numbers[start];\n    let maxIndex = start;\n    for (let i = start + 1; i < end; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n        maxIndex = i;\n      }\n    }\n    return [max, maxIndex, start];\n  };\n  const rollingMaxLen3 = (numbers, start, end) => {\n    let max = numbers[start];\n    let maxIndex = start;\n    for (let i = start + 1; i < end; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n        maxIndex = i;\n      }\n    }\n    return [max, maxIndex, start, end];\n  };\n  return (numbers) => {\n    return numbers.reduce((acc, n) => {\n      acc.push(n);\n      if (acc.length > 3) {\n        const [max, maxIndex, start, end] = rollingMaxLen(acc, 0, acc.length - 1);\n        acc.splice(maxIndex, 1);\n        return rollingMaxLen2(acc, start, end);\n      } else {\n        return rollingMaxLen3(acc, 0, acc.length - 1);\n      }\n    }, []);\n  };\n};\n\nconst l = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\nconst l2 = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex, 0];\n};\n\nconst l3 = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex, 0];\n};\n\nconst l4 = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex, 0];\n};\n\nconst l5 = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex, 0];\n};\n\nconst l6 = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex, 0];\n};\n\nconst l7 = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex, 0];\n};\n\nconst l8 = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex, 0];\n};\n\nconst l9 = (numbers) => {\n  const len = numbers.length;\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex, 0"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string;\n  let strPrefix = '';\n  let strPostfix = '';\n  let strReverse = '';\n  let prefix = '', postfix = '';\n  while (str.length > 0) {\n    strPrefix = str.substring(0, str.length - 1);\n    strPostfix = str.substring(str.length - 1);\n    strReverse = strPrefix + strPostfix.split('').reverse().join('');\n    if (isPAlinDrome(strReverse)) {\n      break;\n    }\n    str = strPostfix;\n  }\n  return strPrefix;\n}\n\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cata'));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  a = a.split('');\n  b = b.split('');\n  const s = [];\n  for (let i = 0; i < a.length; i++) {\n    s.push(a[i] ^ b[i]);\n  }\n  return s.join('');\n};\n\n// https://leetcode.com/problems/rotate-string/\n/**\n  Rotate a string by k steps\n  >>> strRotate('abc', 2)\n  'cba'\n  */\nconst strRotate = (s, k) => {\n  if (k === 0) {\n    return s;\n  }\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const sI = s[i];\n    if (k % 2 === 0) {\n      result.push(s[s.length - i - 1]);\n    } else {\n      result.push(s[i]);\n    }\n  }\n  return result.join('');\n};\n\n// https://leetcode.com/problems/rotate-string/\n/**\n  Rotate a string by k steps\n  >>> strRotate('abc', 2)\n  'cba'\n  */\nconst strRotate = (s, k) => {\n  if (k === 0) {\n    return s;\n  }\n  const result = [];\n  const n = s.length;\n  const m = Math.floor(k / 2);\n  for (let i = 0; i < n; i++) {\n    const sI = s[i];\n    if (i < m) {\n      result.push(s[n - i - 1]);\n    } else {\n      result.push(s[i]);\n    }\n  }\n  return result.join('');\n};\n\n// https://leetcode.com/problems/rotate-string/\n/**\n  Rotate a string by k steps\n  >>> strRotate('abc', 2)\n  'cba'\n  */\nconst strRotate = (s, k) => {\n  if (k === 0) {\n    return s;\n  }\n  const result = [];\n  const n = s.length;\n  const m = Math.floor(k / 2);\n  for (let i = 0; i < n; i++) {\n    const sI = s[i];\n    if (i < m) {\n      result.push(s[i + m]);\n    } else {\n      result.push(s[i - m]);\n    }\n  }\n  return result.join('');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  if (longest === '') {\n    return null;\n  } else {\n    return longest;\n  }\n};\n\n/*\n  >>> lonGest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> lonGest(['a', 'bb', 'ccc', 'dddd', 'eeeee'])\n  'eeeee'\n  >>> lonGest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff'])\n  'ffffff'\n  >>> lonGest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'gggggg'])\n  'gggggg'\n  */\nconst lonGest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> lonGest([1, 2, 3, 4])\n  '4'\n  >>> lonGest([1, 2, 3, 4, 5])\n  '5'\n  >>> lonGest([1, 2, 3, 4, 5, 6])\n  '6'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8])\n  '8'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '9'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '10'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '11'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '12'\n  */\nconst lonGest = (strings) => {\n  let longest = '';\n  strings.forEach((str) => {\n    if (str.length > longest.length) {\n      longest = str;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '13'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '18'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '20'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '21'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '22'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '23'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '24'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '25'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '26'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '27'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '28'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '29'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '30'\n  >>> lonGest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n    // First, get greatest common divisor\n    let gcd = gcd(a, b);\n    // Then, get the quotient\n    let quot = a / gcd;\n    // And, get the remainder\n    let rem = a % gcd;\n    // Return the gcd\n    return gcd;\n}\n\nexport { greAtesTCommOnDIvisoR }\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const allprefIxes = [];\n  let currentPrefix = string;\n  while (currentPrefix) {\n    allprefIxes.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return allprefIxes;\n};\n\n/* Return a list of prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesByLength = (string) => {\n  const allprefIxes = [];\n  let currentPrefix = string;\n  while (currentPrefix) {\n    allprefIxes.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return allprefIxes;\n};\n\n// TESTING\n\n/*\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('abac')\n  ['a', 'ab', 'abac', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['a', 'aab']\n  >>> allprefIxes('aab')\n  ['"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const str = []\n  for (let i = 0; i < n; i++) {\n    str.push(`${i}`)\n  }\n  return str.join(' ')\n}\n\nconst sum = (x, y) => x + y\nconst product = (x, y) => x * y\nconst min = (x, y) => Math.min(x, y)\nconst max = (x, y) => Math.max(x, y)\nconst avg = (x, y) => (x + y) / 2\nconst str = (x, y) => `${x} ${y}`\n\n/*\n  >>> str(0, 0)\n  '0 0'\n  >>> str(2, 1)\n  '2 1'\n  >>> str(5, 3)\n  '5 3 2 1 0'\n  >>> str(10, 7)\n  '10 7 8 5 4 3 2 1 0'\n  >>> str(12, 4)\n  '12 4 12 8 8 4 2 1 0'\n  >>> str(15, 5)\n  '15 5 14 9 9 5 4 3 2 1 0'\n  >>> str(20, 7)\n  '20 7 16 12 12 10 8 7 6 5 4 3 2 1 0'\n  >>> str(21, 8)\n  '21 8 17 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0'\n  >>> str(30, 9)\n  '30 9 28 18 18 16 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0'\n  >>> str(999, 999)\n}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  return new Set(string.toLowerCase().split('')).size;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const notes = music_string.split(' ')\n  return notes.map((note, i) => {\n    const note_length = note.match(/(\\d+)/)\n    if (note_length === null) {\n      return note\n    }\n    return note_length[1]\n  })\n}\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const notes = music_string.split(' ')\n  return notes.map((note, i) => {\n    const note_length = note.match(/(\\d+)/)\n    if (note_length === null) {\n      return note\n    }\n    return note_length[1]\n  })\n}\n\n// Tests\nconst test_parSeMuSic = (music_string) => {\n  const actual = parSeMuSic(music_string)\n  const expected = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  if (actual === expected) {\n    console.log('Passed :)')\n  } else {\n    console.log('Failed :(')\n  }\n}\n\n// Your task is to complete the function `parSeMuSic` and add tests to check your solution.\n\n// To check the function in console, run: node test/parSeMuSic.js\n\n// To check the function in browser, run: node test/parSeMuSic.html\n\n// To check the solution in console, run: node solution/parSeMuSic.js\n\n// To check the solution in browser, run: node solution/parSeMuSic.html\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const notes = music_string.split(' ')\n  return notes.map((note, i) => {\n    const note_length = note.match(/(\\d+)/)\n    if (note_length === null) {\n      return note\n    }\n    return note_length[1]\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/* Find the length of the longest substring without repeating characters.\n  >>> longestcommon('aaa', 'a')\n  0\n  >>> longestcommon('aaa', 'aa')\n  2\n  >>> longestcommon('aaa', 'aaa')\n  3\n  */\nconst longestcommon = (string, substring) => {\n  let max = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      let len = 0\n      for (let j = i; j < string.length; j++) {\n        if (string.indexOf(substring, j) === -1) {\n          break\n        }\n        len++\n      }\n      if (len > max) {\n        max = len\n      }\n    }\n  }\n  return max\n}\n\n/* Find the length of the longest substring with repeating characters.\n  >>> longestcommon('aaa', 'aa')\n  2\n  >>> longestcommon('aaa', 'aaa')\n  3\n  */\nconst longestcommon2 = (string, substring) => {\n  let max = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      let len = 1\n      for (let j = i + 1; j < string.length; j++) {\n        if (string.indexOf(substring, j) === -1) {\n          break\n        }\n        len++\n      }\n      if (len > max) {\n        max = len\n      }\n    }\n  }\n  return max\n}\n\nmodule.exports = {\n  howmanytimes,\n  longestcommon,\n  longestcommon2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  const numberals = [...new Set(numbers.split(' ').map((x) => parseInt(x)))]\n  return numberals.sort((a, b) => a - b).join(' ')\n}\n\n/*\n  Input is a space-delimited string of consonants from 'a' to 'z'\n  and vowels from 'a' to 'z'\n  Valid choices are 'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U' and 'Y'\n  Return the string with consonants and vowels sorted from small to large\n  >>> sorTConVowels('azwAeoiouA')\n  'azwAeoioua'\n  */\nconst sorTConVowels = (consonants) => {\n  const vowels = consonants.replace(/[aeiou]/g, '')\n  return vowels.sort().join('')\n}\n\n/*\n  Input is a space-delimited string of consonants from 'a' to 'z'\n  and vowels from 'a' to 'z'\n  Valid choices are 'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U' and 'Y'\n  Return the string with consonants and vowels sorted from largest to smallest\n  >>> sorTConVowels('yAZwAeoiouA')\n  'AZwAeoiouy'\n  */\nconst sorTConVowelsReversed = (consonants) => {\n  const vowels = consonants.replace(/[aeiou]/g, '')\n  return vowels.sort().reverse().join('')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBersReversed('one three')\n  'one three'\n  */\nconst sorTNumBersReversed = (numbers) => {\n  const numberals = [...new Set(numbers.split(' ').map((x) => parseInt(x)))]\n  return numberals.sort((a, b) => b - a).reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of consonants from 'a' to 'z'\n  and vowels from 'a' to 'z'\n  Valid choices are 'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U' and 'Y'\n  Return the string with consonants and vowels sorted from largest to smallest\n  >>> sorTConVowelsReversed('azwAeoiouA')\n  'AeoiouAzw'\n  */\nconst sorTConVowelsReversed2 = (consonants) => {\n  const vowels = consonants.replace(/[aeiou]/g, '')\n  return vowels.sort().reverse().join('')\n}\n\nconst test = {\n  sorTNumBers: sorTNumBers,\n  sorTConVowels: sorTConVowels,\n  sorTConVowelsReversed: sorTConVowelsReversed,\n  sorTNumBersReversed: sorTNumBersReversed,\n}\n\n/*\n  Uncomment to test your functions\n  */\n/*\n  const test = {\n    sorTNumBers: sorTNumBers,\n    sorTConVowels: sorTConVowels,\n    sorTConVowelsReversed: sorTConVowelsReversed,\n    sorTNumBersReversed: sorTNumBersReversed,\n  }\n  */\n\n/*\n  Make a submission for Project Euler\n  */\n\n/*\n  Write a JavaScript function that takes a string of numbers,\n  sort the numbers from largest to smallest, and then\n  output the string of numbers in reverse order\n  */\nconst sorTNumBersReverse = (numbers) => {\n  const numberals = [...new Set(numbers.split(' ').map((x) => parseInt(x)))]\n  return numberals.sort((a, b) => b - a).reverse().join(' ')\n}\n\n/*\n  Write a JavaScript function that takes a string of consonants\n  and vowels, sort the consonants and vowels from largest to smallest,\n  and then output the string of consonants and vowels in reverse order\n  */\nconst sorTConVowelsReversed2 = (consonants) => {\n  const vowels = consonants.replace(/[aeiou]/g, '')\n  return vowels.sort().reverse().join('')\n}\n\nconst test2 = {\n  sorTNumBersReverse: sorTNumBersReverse,\n  sorTConVowelsReversed2: sorTConVowelsReversed2,\n}\n\n/*\n  Make a submission for Project Euler\n  */\n\n/*\n  Write a JavaScript function that takes a string of numbers,\n  sort the numbers from smallest to largest, and then\n  output the string of numbers in reverse order\n  */\nconst sorTNumBersReversed = (numbers) => {\n  const numberals = [...new Set(numbers.split(' ').map((x) => parseInt(x)))]\n  return numberals.sort((a, b) => a - b).reverse().join(' ')\n}\n\nconst test3 = {\n  sorTNumBersReversed: sorTNumBersReversed,\n}\n\n/*\n  Make a submission for Project Euler\n  */\n\n/*\n  Write a JavaScript function"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  let l = numbers.length\n  let dif = numbers[l - 1] - numbers[0]\n  let a = numbers[l - 1]\n  let b = numbers[0]\n  let i = 1\n  while (i < l) {\n    if (dif > 0) {\n      if (dif < a - b) {\n        a = b\n      } else {\n        a = b + dif\n      }\n    } else {\n      if (dif > b - a) {\n        b = a\n      } else {\n        b = a + dif\n      }\n    }\n    dif = a - b\n    i++\n  }\n  return [a, b]\n}\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other\n  and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts2 = (numbers) => {\n  let l = numbers.length\n  let a = numbers[l - 1]\n  let b = numbers[0]\n  let i = 1\n  while (i < l) {\n    if (a > b) {\n      if (a - b < b - a) {\n        a = b\n      } else {\n        b = a + b\n      }\n    } else {\n      if (b - a < a - b) {\n        b = a\n      } else {\n        a = a + b\n      }\n    }\n    i++\n  }\n  return [a, b]\n}\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other\n  and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts3 = (numbers) => {\n  let l = numbers.length\n  let dif = numbers[l - 1] - numbers[0]\n  let i = 1\n  while (i < l) {\n    dif = numbers[i] - numbers[i - 1]\n    if (dif > 0) {\n      if (dif < numbers[i - 1] - numbers[i - 2]) {\n        numbers[i] = numbers[i - 1]\n      } else {\n        numbers[i] = numbers[i - 2] + dif\n      }\n    } else {\n      if (dif > numbers[i - 1] - numbers[i - 2]) {\n        numbers[i] = numbers[i - 2]\n      } else {\n        numbers[i] = numbers[i - 2] + dif\n      }\n    }\n    i++\n  }\n  return numbers\n}\n\nmodule.exports = {\n  finDCloSestELemEnts,\n  finDCloSestELemEnts2,\n  finDCloSestELemEnts3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(\n      numbers[i] * (1 / (numbers.length - 1)) +\n        (i === 0? 0 : (numbers[i - 1] * (1 / (numbers.length - 2))))\n    );\n  }\n  return newNumbers;\n};\n\n/**\n  Given a list of numbers (of at least two elements), apply a linear transform\n  to that list, such that the largest number will become 1 and the smallest\n  will become 0\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniTInverse = (numbers) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(\n      numbers[i] * (1 / (numbers.length - 1)) +\n        (i === 0? 0 : (numbers[i - 1] * (1 / (numbers.length - 2))))\n    );\n  }\n  return newNumbers;\n};\n\nconst isInteger = (number) => {\n  return number % 1 === 0;\n};\n\nconst toInteger = (number) => {\n  return number | 0;\n};\n\nconst toFloat = (number) => {\n  return number;\n};\n\nconst isFloat = (number) => {\n  return typeof number === 'number';\n};\n\nconst isPositive = (number) => {\n  return number > 0;\n};\n\nconst isNegative = (number) => {\n  return number < 0;\n};\n\nconst isPositiveOrZero = (number) => {\n  return number >= 0;\n};\n\nconst isNegativeOrZero = (number) => {\n  return number <= 0;\n};\n\nconst toPositive = (number) => {\n  if (number < 0) {\n    return -number;\n  } else {\n    return number;\n  }\n};\n\nconst toNegative = (number) => {\n  if (number < 0) {\n    return number;\n  } else {\n    return -number;\n  }\n};\n\nconst toPositiveOrZero = (number) => {\n  if (number < 0) {\n    return -number;\n  } else {\n    return number;\n  }\n};\n\nconst toNegativeOrZero = (number) => {\n  if (number < 0) {\n    return number;\n  } else {\n    return -number;\n  }\n};\n\nconst sum = (...numbers) => {\n  return numbers.reduce((sum, number) => sum + number, 0);\n};\n\nconst mean = (...numbers) => {\n  return sum(...numbers) / numbers.length;\n};\n\nconst sumOfSquares = (...numbers) => {\n  return numbers.reduce((sum, number) => sum + number * number, 0);\n};\n\nconst median = (...numbers) => {\n  const sorted = sortedArray(numbers);\n  if (sorted.length % 2 === 0) {\n    return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n  } else {\n    return sorted[sorted.length / 2];\n  }\n};\n\nconst mode = (...numbers) => {\n  let maxCount = 1;\n  let maxNumber = numbers[0];\n  let currentCount = 1;\n  let currentNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === currentNumber) {\n      currentCount++;\n    } else {\n      if (currentCount > maxCount) {\n        maxCount = currentCount;\n        maxNumber = currentNumber;\n      }\n      currentCount = 1;\n      currentNumber = numbers[i];\n    }\n  }\n  return maxNumber;\n};\n\nconst modeInverse = (...numbers) => {\n  let maxCount = 1;\n  let maxNumber = numbers[0];\n  let currentCount = 1;\n  let currentNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === currentNumber) {\n      currentCount++;\n    } else {\n      if (currentCount > maxCount) {\n        maxCount = currentCount;\n        maxNumber = currentNumber;\n      }\n      currentCount = 1;\n      currentNumber = numbers[i];\n    }\n  }\n  return maxNumber;\n};\n\nconst sortedArray = (array) => {\n  let sorted = array.slice();\n  sorted.sort(\n    (a, b) => {\n      if (a < b) {\n        return -1;\n      } else if (a > b) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  );\n  return sorted;\n};\n\nconst modeOfArray = (array) => {\n  let maxCount = 1;\n  let maxNumber = array[0];\n  let currentCount = 1;\n  let currentNumber = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] === currentNumber) {\n      currentCount++;\n    } else {\n      if (currentCount > maxCount) {\n        maxCount = currentCount;\n        maxNumber = currentNumber;\n      }\n      currentCount = 1;\n      currentNumber = array[i];\n    }\n  }\n  return maxNumber;\n};\n\nconst modeOfArrayInverse = (array) => {\n  let maxCount = 1;\n  let maxNumber = array[0];\n  let currentCount = 1;\n  let currentNumber = array["}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n    return values.filter((value) => typeof value === 'number')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerUndefined = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter given list of any python values only for numbers\n//\nconst filTerNumerics = (values) => {\n    return values.filter((value) => typeof value === 'number')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerUndefinedNumerics = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter given list of any python values only for strings\n//\nconst filTerStrings = (values) => {\n    return values.filter((value) => typeof value ==='string')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerUndefinedStrings = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter given list of any python values only for booleans\n//\nconst filTerBools = (values) => {\n    return values.filter((value) => typeof value === 'boolean')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerUndefinedBools = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerNone = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter out all non-numeric values\n//\nconst filTerNumericsOnly = (values) => {\n    return values.filter((value) => typeof value === 'number')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerNoneNumericsOnly = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerNoneStrings = (values) => {\n    return values.filter((value) => typeof value ==='string')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerNoneBools = (values) => {\n    return values.filter((value) => typeof value === 'boolean')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerNoneNone = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerNoneNoneNumericsOnly = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerNoneNoneStrings = (values) => {\n    return values.filter((value) => typeof value ==='string')\n}\n\n//\n// Helper function to filter out any undefined values\n//\nconst filTerNoneNoneBools = (values) => {\n    return values.filter((value) => typeof value === 'boolean')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNone = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNumericsOnly = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneStrings = (values) => {\n    return values.filter((value) => typeof value ==='string')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneBools = (values) => {\n    return values.filter((value) => typeof value === 'boolean')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNone = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNoneNumericsOnly = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNoneStrings = (values) => {\n    return values.filter((value) => typeof value ==='string')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNoneBools = (values) => {\n    return values.filter((value) => typeof value === 'boolean')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNoneNone = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNoneNoneNumericsOnly = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNoneNoneStrings = (values) => {\n    return values.filter((value) => typeof value ==='string')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNoneNoneBools = (values) => {\n    return values.filter((value) => typeof value === 'boolean')\n}\n\n//\n// Filter out any undefined values\n//\nconst filTerNoneNoneNoneNoneNoneNone = (values) => {\n    return values.filter((value) => typeof value!== 'undefined')\n}\n\n//\n// Filter out"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  let len = 0\n\n  for (let i = 0, length = string.length; i < length; i++) {\n    if (string[i] === 0) break\n    len++\n  }\n\n  return len\n}\n\n// Return the first index of given string\n// Return -1 if not found\n// Example:\n//   >>> strIndexOf('abc', 'b')\n//   1\n//   >>> strIndexOf('abc', 'd')\n//   -1\nconst strIndexOf = (string, search) => {\n  let len = strLen(string)\n  let i = 0\n  let index = -1\n\n  while (i < len) {\n    if (string[i] === search) {\n      index = i\n      break\n    }\n    i++\n  }\n\n  return index\n}\n\n// Return the last index of given string\n// Return -1 if not found\n// Example:\n//   >>> strLastIndexOf('abc', 'b')\n//   2\n//   >>> strLastIndexOf('abc', 'd')\n//   -1\nconst strLastIndexOf = (string, search) => {\n  let len = strLen(string)\n  let i = len - 1\n  let index = -1\n\n  while (i >= 0) {\n    if (string[i] === search) {\n      index = i\n      break\n    }\n    i--\n  }\n\n  return index\n}\n\n// Return the index of last character of given string\n// Return -1 if not found\n// Example:\n//   >>> strLastIndexOf('abc', 'b')\n//   2\n//   >>> strLastIndexOf('abc', 'd')\n//   -1\nconst strLastIndexOf = (string, search) => {\n  let len = strLen(string)\n  let index = -1\n\n  for (let i = len - 1; i >= 0; i--) {\n    if (string[i] === search) {\n      index = i\n      break\n    }\n  }\n\n  return index\n}\n\n// Return the string from the given index\n// Return empty string if index is out of range\n// Example:\n//   >>> strSubstr('abc', 1)\n//   'b'\n//   >>> strSubstr('abc', 4)\n//   ''\nconst strSubstr = (string, index) => {\n  let len = strLen(string)\n  let start = index\n\n  if (index < 0) {\n    start = 0\n  } else if (index >= len) {\n    start = len\n  }\n\n  return string.substr(start, len - start)\n}\n\n// Return the substring from start index to end index\n// Return empty string if start index is out of range\n// or end index is out of range\n// Example:\n//   >>> strSubstr('abc', 1, 3)\n//   'bc'\n//   >>> strSubstr('abc', 3, 1)\n//   ''\nconst strSubstr = (string, start, end) => {\n  let len = strLen(string)\n  let startIndex = start\n\n  if (start < 0) {\n    startIndex = 0\n  } else if (start >= len) {\n    startIndex = len\n  }\n\n  let endIndex = end\n\n  if (end < 0) {\n    endIndex = 0\n  } else if (end > len) {\n    endIndex = len\n  }\n\n  return string.substr(startIndex, endIndex - startIndex)\n}\n\n// Return a string with all characters in lowercase\n// Example:\n//   >>> toLower('ABC')\n//   'abc'\nconst toLower = (string) => {\n  return string.toLowerCase()\n}\n\n// Return a string with all characters in uppercase\n// Example:\n//   >>> toUpper('abc')\n//   'ABC'\nconst toUpper = (string) => {\n  return string.toUpperCase()\n}\n\n// Return a string with all letters in lowercase\n// Example:\n//   >>> toLower('ABC')\n//   'abc'\nconst toLower = (string) => {\n  return string.toLowerCase()\n}\n\n// Return a string with all letters in uppercase\n// Example:\n//   >>> toUpper('abc')\n//   'ABC'\nconst toUpper = (string) => {\n  return string.toUpperCase()\n}\n\n// Return a string with all letters in uppercase\n// Example:\n//   >>> toUpper('abc')\n//   'ABC'\nconst toUpper = (string) => {\n  return string.toUpperCase()\n}\n\n// Return a string with all digits in lowercase\n// Example:\n//   >>> toLower('ABC')\n//   'abc'\nconst toLower = (string) => {\n  return string.toLowerCase()\n}\n\n// Return a string with all digits in uppercase\n// Example:\n//   >>> toUpper('abc')\n//   'ABC'\nconst toUpper = (string) => {\n  return string.toUpperCase()\n}\n\n// Return a string with all digits in uppercase\n// Example:\n//   >>> toUpper('abc')\n//   'ABC'\nconst toUpper = (string) => {\n  return string.toUpperCase()\n}\n\n// Return a string with all digits in lowercase\n// Example:\n//   >>> toLower('ABC')\n//   'abc'\nconst toLower = (string) => {\n  return string.toLowerCase()\n}\n\n// Return a string with all digits in uppercase\n// Example:\n//   >>> toUpper('abc')\n//   'ABC'\nconst toUpper = (string) => {\n  return string.toUpperCase()\n}\n\n// Return a string with all digits in lowercase\n// Example:\n//   >>> toLower('ABC')\n//   'abc'\nconst toLower = (string) => {\n  return string.toLowerCase()\n}\n\n// Return a string with all digits in uppercase\n// Example:\n//   >>> toUpper('abc')\n//   'ABC'\nconst toUpper = (string) => {\n  return string.toUpperCase()\n}\n\n// Return a string with all digits in lowercase\n// Example:\n//   >>> toLower('ABC')"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  if(n === 0) {\n    return 0;\n  }\n\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2 === 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\n/*\nFor a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr(20)\n  19\n  >>> larGestdivisOr(100)\n  99\n  */\nconst larGestdivisOr = (n) => {\n  if(n === 0) {\n    return 0;\n  }\n\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst larGestdivisOr = (n) => {\n  let ret = 0;\n  let tmp = n;\n  while(tmp > 1) {\n    if(tmp % 2!== 0) {\n      ret = ret + tmp;\n      tmp = tmp / 2;\n    }\n    else {\n      tmp = tmp + 1;\n    }\n  }\n  return ret;\n};\n\nconst"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor += 1;\n  }\n  return factors;\n}\n\nconst facToriZe2 = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor += 1;\n  }\n  return factors;\n}\n\nconsole.log(facToriZe(8));\nconsole.log(facToriZe(25));\nconsole.log(facToriZe(70));\nconsole.log(facToriZe2(8));\nconsole.log(facToriZe2(25));\nconsole.log(facToriZe2(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  // The length of the list.\n  const listLength = numbers.length;\n  const newList = [];\n  const i = 0;\n  const j = 0;\n  let k = 0;\n  while (i < listLength) {\n    if (numbers[i]!== numbers[j]) {\n      newList[k] = numbers[i];\n      k++;\n    }\n    j++;\n    if (j >= listLength) {\n      j = 0;\n      i++;\n    }\n  }\n  return newList;\n};\n\nexport { remOveDUplicAteS };\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n    return string.split('').map(char => {\n        if (char.toLowerCase() === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n};\n\nexport default fliPCasE;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((str, str) => str + str, '');\n};\n\n/**\n * Convert list of strings into a single string\n  >>> listToStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToStr = (strings) => {\n  return conCateNate(strings);\n};\n\n/**\n * Convert a string into an array of strings\n  >>> splitStrToArr('a b c')\n  ['a', 'b', 'c']\n  */\nconst splitStrToArr = (str) => {\n  const result = str.split('');\n  return result;\n};\n\n/**\n * Convert a list of strings into an array of strings\n  >>> listToArr(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst listToArr = (strings) => {\n  const result = [];\n  strings.forEach((str) => {\n    result.push(str);\n  });\n  return result;\n};\n\n/**\n * Convert an array of strings into a string\n  >>> arrToStr(['a', 'b', 'c'])\n  'abc'\n  */\nconst arrToStr = (strings) => {\n  return listToStr(strings);\n};\n\nmodule.exports = {\n  conCateNate,\n  listToStr,\n  listToArr,\n  arrToStr\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      ret.push(strings[i]);\n    }\n  }\n  return ret;\n};\n\n// Function: getNodeText\n// Return a string with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  String of the contents of the node\ngetNodeText = (node) => {\n  return node.textContent || node.innerText || '';\n};\n\n// Function: getNodeTextIx\n// Return an array of strings with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  Array of the contents of the node\ngetNodeTextIx = (node) => {\n  const ret = [];\n  let cur = node.firstChild;\n  while (cur) {\n    if (cur.nodeType === 3) { // text node\n      ret.push(cur.textContent || cur.innerText || '');\n    }\n    cur = cur.nextSibling;\n  }\n  return ret;\n};\n\n// Function: getNodeTextFromList\n// Return a string with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  String of the contents of the node\ngetNodeTextFromList = (node) => {\n  let ret = '';\n  for (let i = 0; i < node.length; i++) {\n    ret += getNodeText(node[i]);\n  }\n  return ret;\n};\n\n// Function: getNodeTextFromListIx\n// Return an array of strings with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  Array of the contents of the node\ngetNodeTextFromListIx = (node) => {\n  let ret = [];\n  for (let i = 0; i < node.length; i++) {\n    ret = ret.concat(getNodeTextIx(node[i]));\n  }\n  return ret;\n};\n\n// Function: getNodeTextFromList\n// Return a string with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  String of the contents of the node\ngetNodeTextFromList = (node) => {\n  let ret = '';\n  for (let i = 0; i < node.length; i++) {\n    ret += getNodeText(node[i]);\n  }\n  return ret;\n};\n\n// Function: getNodeTextFromListIx\n// Return an array of strings with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  Array of the contents of the node\ngetNodeTextFromListIx = (node) => {\n  let ret = [];\n  for (let i = 0; i < node.length; i++) {\n    ret = ret.concat(getNodeTextFromList(node[i]));\n  }\n  return ret;\n};\n\n// Function: getNodeText\n// Return a string with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  String of the contents of the node\ngetNodeText = (node) => {\n  return node.textContent || node.innerText || '';\n};\n\n// Function: getNodeTextIx\n// Return an array of strings with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  Array of the contents of the node\ngetNodeTextIx = (node) => {\n  const ret = [];\n  let cur = node.firstChild;\n  while (cur) {\n    if (cur.nodeType === 3) { // text node\n      ret.push(cur.textContent || cur.innerText || '');\n    }\n    cur = cur.nextSibling;\n  }\n  return ret;\n};\n\n// Function: getNodeText\n// Return a string with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  String of the contents of the node\ngetNodeText = (node) => {\n  return node.textContent || node.innerText || '';\n};\n\n// Function: getNodeTextFromList\n// Return a string with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  String of the contents of the node\ngetNodeTextFromList = (node) => {\n  let ret = '';\n  for (let i = 0; i < node.length; i++) {\n    ret += getNodeText(node[i]);\n  }\n  return ret;\n};\n\n// Function: getNodeTextFromListIx\n// Return an array of strings with the contents of a DOM node\n// \n// Parameters:\n//  node - DOM node to get the text from\n//\n// Returns:\n//  Array of the contents of the node\ngetNodeTextFromListIx = (node) => {\n  let ret = [];\n  for (let i = 0; i < node.length; i++) {\n    ret = ret.concat(getNodeTextFromList(node[i]));\n  }\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/**\n  *  Return only negative numbers in the list.\n  >>> getnegatvie([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getnegatvie([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getnegatvie = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/**\n  *  Return the first number in the list.\n  >>> getfirst([1, 2, 3])\n  1\n  >>> getfirst([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> getfirst([1, -2, 3])\n  1\n  >>> getfirst([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  >>> getfirst([-1, 2, 3])\n  -1\n  */\nconst getfirst = (l) => {\n  return l[0]\n}\n\n/**\n  *  Return the last number in the list.\n  >>> getlast([1, 2, 3])\n  3\n  >>> getlast([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> getlast([1, -2, 3])\n  3\n  >>> getlast([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> getlast([-1, 2, 3])\n  -1\n  */\nconst getlast = (l) => {\n  return l[l.length - 1]\n}\n\n/**\n  *  Return the mean of the list.\n  >>> getmean([1, 2, 3])\n  2.0\n  >>> getmean([1, 2, 3, 4, 5, 6, 7])\n  4.0\n  >>> getmean([1, -2, 3])\n  1.5\n  >>> getmean([1, 2, 3, 4, 5, 6, 7, 8])\n  4.5\n  >>> getmean([-1, 2, 3])\n  -1.0\n  >>> getmean([-1, 2, 3, 4, 5, 6, 7, 8])\n  -3.0\n  */\nconst getmean = (l) => {\n  return l.reduce((pre, cur) => (pre + cur), 0) / l.length\n}\n\n/**\n  *  Return the sum of the list.\n  >>> getsum([1, 2, 3])\n  6\n  >>> getsum([1, 2, 3, 4, 5, 6, 7])\n  21\n  >>> getsum([1, -2, 3])\n  5\n  >>> getsum([1, 2, 3, 4, 5, 6, 7, 8])\n  42\n  >>> getsum([-1, 2, 3])\n  -1\n  >>> getsum([-1, 2, 3, 4, 5, 6, 7, 8])\n  -24\n  */\nconst getsum = (l) => {\n  return l.reduce((pre, cur) => (pre + cur), 0)\n}\n\n/**\n  *  Return the median of the list.\n  >>> getmedian([1, 2, 3])\n  2\n  >>> getmedian([1, 2, 3, 4, 5, 6, 7])\n  3\n  >>> getmedian([1, -2, 3])\n  2\n  >>> getmedian([1, 2, 3, 4, 5, 6, 7, 8])\n  4\n  >>> getmedian([-1, 2, 3])\n  -1\n  */\nconst getmedian = (l) => {\n  if (l.length % 2 === 0) {\n    return (l[(l.length - 1) / 2] + l[(l.length - 1) / 2 + 1]) / 2\n  } else {\n    return l[(l.length - 1) / 2]\n  }\n}\n\n/**\n  *  Return the mode of the list.\n  >>> getmode([1, 2, 3])\n  3\n  >>> getmode([1, 2, 3, 4, 5, 6, 7])\n  5\n  >>> getmode([1, -2, 3])\n  3\n  >>> getmode([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> getmode([-1, 2, 3])\n  -1\n  >>> getmode([-1, 2, 3, 4, 5, 6, 7, 8])\n  -1\n  */\nconst getmode = (l) => {\n  return l.reduce((pre, cur) => {\n    if (pre === null) {\n      return cur\n    } else if (cur === null) {\n      return pre\n    } else if (pre === cur) {\n      return pre\n    } else if (pre > cur) {\n      return pre\n    } else {\n      return cur\n    }\n  }, null)\n}\n\n/**\n  *  Return the max of the list.\n  >>> getmax([1, 2, 3])\n  3\n  >>> getmax([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> getmax([1, -2, 3])\n  3\n  >>> getmax([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> getmax([-1, 2, 3])\n  -1\n  >>> getmax([-1, 2, 3, 4, 5, 6, 7, 8])\n  -1\n  */\nconst getmax = (l) => {\n  return l.reduce((pre, cur) => (pre > cur? pre : cur), -Infinity)\n}\n\n/**\n  *  Return the min of the list.\n  >>> getmin([1, 2, 3])\n"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 5) return true\n  if (n === 7) return true\n  if (n === 11) return true\n  if (n === 13) return true\n  if (n === 17) return true\n  if (n === 19) return true\n  if (n === 23) return true\n  if (n === 29) return true\n  if (n === 31) return true\n  if (n === 37) return true\n  if (n === 41) return true\n  if (n === 43) return true\n  if (n === 47) return true\n  if (n === 53) return true\n  if (n === 59) return true\n  if (n === 61) return true\n  if (n === 67) return true\n  if (n === 71) return true\n  if (n === 73) return true\n  if (n === 79) return true\n  if (n === 83) return true\n  if (n === 89) return true\n  if (n === 97) return true\n  if (n === 101) return true\n  if (n === 103) return true\n  if (n === 107) return true\n  if (n === 109) return true\n  if (n === 113) return true\n  if (n === 127) return true\n  if (n === 131) return true\n  if (n === 137) return true\n  if (n === 139) return true\n  if (n === 149) return true\n  if (n === 151) return true\n  if (n === 157) return true\n  if (n === 163) return true\n  if (n === 167) return true\n  if (n === 179) return true\n  if (n === 181) return true\n  if (n === 191) return true\n  if (n === 193) return true\n  if (n === 197) return true\n  if (n === 199) return true\n  if (n === 211) return true\n  if (n === 223) return true\n  if (n === 227) return true\n  if (n === 229) return true\n  if (n === 233) return true\n  if (n === 239) return true\n  if (n === 241) return true\n  if (n === 251) return true\n  if (n === 257) return true\n  if (n === 263) return true\n  if (n === 269) return true\n  if (n === 271) return true\n  if (n === 277) return true\n  if (n === 281) return true\n  if (n === 283) return true\n  if (n === 293) return true\n  if (n === 307) return true\n  if (n === 311) return true\n  if (n === 313) return true\n  if (n === 317) return true\n  if (n === 331) return true\n  if (n === 337) return true\n  if (n === 347) return true\n  if (n === 349) return true\n  if (n === 353) return true\n  if (n === 359) return true\n  if (n === 367) return true\n  if (n === 373) return true\n  if (n === 379) return true\n  if (n === 383) return true\n  if (n === 389) return true\n  if (n === 397) return true\n  if (n === 401) return true\n  if (n === 409) return true\n  if (n === 419) return true\n  if (n === 431) return true\n  if (n === 433) return true\n  if (n === 439) return true\n  if (n === 447) return true\n  if (n === 457) return true\n  if (n === 461) return true\n  if (n === 463) return true\n  if (n === 467) return true\n  if (n === 479) return true\n  if (n === 487) return true\n  if (n === 491) return true\n  if (n === 499) return true\n  if (n === 503) return true\n  if (n === 509) return true\n  if (n === 521) return true\n  if (n === 523) return true\n  if (n === 541) return true\n  if (n === 547) return true\n  if (n === 557) return true\n  if (n === 563) return true\n  if (n === 569) return true\n  if (n === 571) return true\n  if (n === 577) return true\n  if (n === 587) return true\n  if (n === 593) return true\n  if (n === 599) return true\n  if (n === 601) return true\n  if (n === 607) return true\n  if (n === 613) return true\n  if (n === 617) return true\n  if (n === 619) return true\n  if (n === 631) return true\n  if (n === 641) return true\n  if (n === 643) return true\n  if (n === 647) return true\n  if (n === 653) return true\n  if (n === 659) return true\n  if (n === 661) return true\n  if (n === 673) return true\n  if (n === 677) return true\n  if (n === 683) return true\n  if (n === 691) return true\n  if (n === 701) return true\n  if (n === 709) return true\n  if (n === 719) return true\n  if (n === 727) return true\n  if (n === 733) return true\n  if (n === 739) return true\n  if (n === 743) return true\n  if (n === 751) return true\n  if (n === 757) return true\n  if (n === 761) return true\n  if (n === 769) return true\n  if (n === 773) return true\n  if (n === 787) return true\n  if (n === 797) return true\n  if (n === 809) return true\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let sum = 0;\n  let tmp = 0;\n  let x = 1;\n  for (let i = 0; i < n; i++) {\n    sum += xs[i];\n  }\n  for (let i = 0; i < n; i++) {\n    tmp = sum / xs[i];\n    if (tmp!= 0) {\n      x = tmp;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  findIntersection(xs, ys) finds two points of intersection.\n  findIntersection takes lists xs and ys.\n  Returns array [x1, x2] with x1, x2 as only two elements.\n  */\nconst findIntersection = (xs, ys) => {\n  const minX = findZero(xs);\n  const maxX = findZero(xs.concat(ys));\n  const minY = findZero(ys);\n  const maxY = findZero(ys.concat(xs));\n  return [minX, maxX, minY, maxY];\n}\n\n/*\n  findXs(xs) finds all xs satisfying the polynomial equation.\n  findXs returns an array of all xs in xs that satisfy the polynomial equation.\n  */\nconst findXs = (xs) => {\n  const result = [];\n  const n = xs.length;\n  const x = findZero(xs);\n  while (x!= 0) {\n    result.push(x);\n    x = findZero(xs.concat(xs.map(v => v - x)));\n  }\n  return result;\n}\n\n/*\n  evaluate(xs, x) evaluates the polynomial with coefficients xs at point x.\n  */\nconst evaluate = (xs, x) => {\n  return polY(xs, x);\n}\n\n/*\n  solve(xs, ys) solves a polynomial equation by finding two points of\n  intersection.\n  solve takes lists xs and ys.\n  Returns array [x1, x2] with x1, x2 as only two elements.\n  */\nconst solve = (xs, ys) => {\n  const xs1 = findIntersection(xs, ys);\n  const xs2 = findIntersection(xs.concat(ys), xs);\n  return xs1.concat(xs2);\n}\n\n/*\n  main() runs the program.\n  */\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n    const [l0, l1, l2] = l;\n    const div3 = 3;\n    return [\n       ...l0.filter((x) => x % div3!== 0),\n       ...l1.filter((x) => x % div3 === 0),\n       ...l2.filter((x) => x % div3!== 0),\n       ...l0.map((x) => x % div3 === 0? l1.find((y) => x - y === div3 - 1) : x),\n       ...l2.map((x) => x % div3 === 0? l1.find((y) => x - y === div3 - 1) : x)\n    ];\n};\n\n// console.log(sorTThiRd([1, 2, 3]));\n// console.log(sorTThiRd([5, 6, 3, 4, 8, 9, 2]));<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const res = [];\n  const uniq = {};\n  l.forEach((x) => {\n    if(uniq[x]) return;\n    res.push(x);\n    uniq[x] = true;\n  });\n  return res;\n};\n\n/*Return sorted list without duplicates\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> uniqQue([1,2,2,3,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9])\n  [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqQue = (l) => {\n  const res = [];\n  const uniq = {};\n  l.forEach((x) => {\n    if(uniq[x]) return;\n    res.push(x);\n    uniq[x] = true;\n  });\n  return res;\n};\n\nmodule.exports = {\n  uniQue\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  return l.reduce((prev, curr) => {\n    return prev > curr? prev : curr;\n  }, -Infinity);\n};\n\n// # isPrime(n)\n// Check if n is prime\n//\n//    >>> isPrime(7)\n//    True\n//\n//    >>> isPrime(15)\n//    True\n//\n//    >>> isPrime(23)\n//    False\n//\n//    >>> isPrime(0)\n//    False\n//\n//    >>> isPrime(1)\n//    False\n//\n//    >>> isPrime(2)\n//    True\n//\n//    >>> isPrime(3)\n//    True\n//\n//    >>> isPrime(4)\n//    False\n//\n//    >>> isPrime(5)\n//    False\n//\n//    >>> isPrime(6)\n//    False\n//\n//    >>> isPrime(7)\n//    False\n//\n//    >>> isPrime(8)\n//    True\n//\n//    >>> isPrime(9)\n//    False\n//\n//    >>> isPrime(10)\n//    False\n//\n//    >>> isPrime(11)\n//    False\n//\n//    >>> isPrime(12)\n//    False\n//\n//    >>> isPrime(13)\n//    False\n//\n//    >>> isPrime(14)\n//    False\n//\n//    >>> isPrime(15)\n//    False\n//\n//    >>> isPrime(16)\n//    True\n//\n//    >>> isPrime(17)\n//    False\n//\n//    >>> isPrime(18)\n//    False\n//\n//    >>> isPrime(19)\n//    False\n//\n//    >>> isPrime(20)\n//    False\n//\n//    >>> isPrime(21)\n//    False\n//\n//    >>> isPrime(22)\n//    False\n//\n//    >>> isPrime(23)\n//    False\n//\n//    >>> isPrime(24)\n//    False\n//\n//    >>> isPrime(25)\n//    False\n//\n//    >>> isPrime(26)\n//    False\n//\n//    >>> isPrime(27)\n//    False\n//\n//    >>> isPrime(28)\n//    False\n//\n//    >>> isPrime(29)\n//    False\n//\n//    >>> isPrime(30)\n//    False\n//\n//    >>> isPrime(31)\n//    False\n//\n//    >>> isPrime(32)\n//    False\n//\n//    >>> isPrime(33)\n//    False\n//\n//    >>> isPrime(34)\n//    False\n//\n//    >>> isPrime(35)\n//    False\n//\n//    >>> isPrime(36)\n//    False\n//\n//    >>> isPrime(37)\n//    False\n//\n//    >>> isPrime(38)\n//    False\n//\n//    >>> isPrime(39)\n//    False\n//\n//    >>> isPrime(40)\n//    False\n//\n//    >>> isPrime(41)\n//    False\n//\n//    >>> isPrime(42)\n//    False\n//\n//    >>> isPrime(43)\n//    False\n//\n//    >>> isPrime(44)\n//    False\n//\n//    >>> isPrime(45)\n//    False\n//\n//    >>> isPrime(46)\n//    False\n//\n//    >>> isPrime(47)\n//    False\n//\n//    >>> isPrime(48)\n//    False\n//\n//    >>> isPrime(49)\n//    False\n//\n//    >>> isPrime(50)\n//    False\n//\n//    >>> isPrime(51)\n//    False\n//\n//    >>> isPrime(52)\n//    False\n//\n//    >>> isPrime(53)\n//    False\n//\n//    >>> isPrime(54)\n//    False\n//\n//    >>> isPrime(55)\n//    False\n//\n//    >>> isPrime(56)\n//    False\n//\n//    >>> isPrime(57)\n//    False\n//\n//    >>> isPrime(58)\n//    False\n//\n//    >>> isPrime(59)\n//    False\n//\n//    >>> isPrime(60)\n//    False\n//\n//    >>> isPrime(61)\n//    False\n//\n//    >>> isPrime(62)\n//    False\n//\n//    >>> isPrime(63)\n//    False\n//\n//    >>> isPrime(64)\n//    False\n//\n//    >>> isPrime(65)\n//    False\n//\n//    >>> isPrime(66)\n//    False\n//\n//    >>> isPrime(67)\n//    False\n//\n//    >>> isPrime(68)\n//    False\n//\n//    >>> isPrime(69)\n//    False\n//\n//    >>> isPrime(70)\n//    False\n//\n//    >>> isPrime(71)\n//    False\n//\n//    >>> isPrime(72)\n//    False\n//\n//    >>> isPrime(73)\n//    False\n//\n//    >>> isPrime(74)\n//    False\n//\n//    >>> isPrime(75)\n//    False\n//\n//    >>> isPrime(76)\n//    False\n//\n//    >>> isPrime(77)\n//    False\n//\n//    >>> isPrime(78)\n//    False\n//\n//    >>> isPrime(79)\n//    False\n//\n//    >>> isPrime(80)\n//    False\n//\n//    >>> isPrime(81)\n//    False\n//\n//    >>> isPrime(82)\n//    False\n//\n//    >>> isPrime(83)\n//    False\n//\n//    >>> isPrime(84)\n//    False\n//\n//    >>> isPrime(85)\n//    False\n//\n//    >>> isPrime(86)\n//    False\n//\n//    >>> isPrime(87)\n//    False\n//\n//    >>> isPrime(88)\n//    False\n//\n//    >>> isPrime(89)\n//    False\n//\n//    >>> isPrime(90)\n"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let x = (n % 11) == 0? 1 : 0\n  let y = (n % 13) == 0? 1 : 0\n  let z = (n % 17) == 0? 1 : 0\n  return x + y + z\n}\n\n/* Return the sum of the numbers divisible by 3 or 5, except 6.\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10])\n  30\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11])\n  31\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12])\n  32\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  33\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  34\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  35\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  36\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  37\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  38\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  39\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  40\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  41\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  42\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  43\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  44\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  45\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  46\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  47\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  48\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  49\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  50\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  51\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  52\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  53\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  54\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  56\n  >>> sum([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  const r = []\n  const m = l.length / 2\n  for (let i = 0; i < m; i++) {\n    r[i] = l[i]\n    r[l.length - i - 1] = l[i]\n  }\n  return r\n}\n\nmodule.exports = sorTEveN\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns encoded string.\n  */\nconst encode = (s) => {\n  if (s.length > 64)\n    throw new Error('String is too long');\n  if (s.length % 3!= 0)\n    throw new Error('String length must be multiple of 3');\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor(s.length / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode = (s) => {\n  if (s.length > 64)\n    throw new Error('String is too long');\n  if (s.length % 3!= 0)\n    throw new Error('String length must be multiple of 3');\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor(s.length / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  decodeCyclic,\n  encodeCyclic,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n    let f = 1;\n    let p = 2;\n    while(n > 0) {\n        if(isPrime(p)) {\n            f += p;\n        }\n        p = f + p;\n        n--;\n    }\n    return f;\n};\n\n/**\n  *  returns n-th number that is a Fibonacci number and it's also prime.\n  *  >>> fibPrime(1)\n  2\n  >>> fibPrime(2)\n  3\n  >>> fibPrime(3)\n  5\n  >>> fibPrime(4)\n  13\n  >>> fibPrime(5)\n  89\n  */\nconst fibPrime = (n) => {\n    if(n <= 2) return 1;\n    let f = 1;\n    let p = 2;\n    while(n > 0) {\n        if(isPrime(p)) {\n            f += p;\n        }\n        p = f + p;\n        n--;\n    }\n    return f;\n};\n\n/**\n  *  returns n-th number that is a Fibonacci number and it's also prime.\n  *  >>> fibPrime(1)\n  2\n  >>> fibPrime(2)\n  3\n  >>> fibPrime(3)\n  5\n  >>> fibPrime(4)\n  13\n  >>> fibPrime(5)\n  89\n  */\nconst fib = (n) => {\n    let f = 1;\n    let p = 2;\n    while(n > 0) {\n        if(isPrime(p)) {\n            f += p;\n        }\n        p = f + p;\n        n--;\n    }\n    return f;\n};\n\n/**\n  *  returns n-th number that is a Fibonacci number and it's also prime.\n  *  >>> fibPrime(1)\n  2\n  >>> fibPrime(2)\n  3\n  >>> fibPrime(3)\n  5\n  >>> fibPrime(4)\n  13\n  >>> fibPrime(5)\n  89\n  */\nconst fib2 = (n) => {\n    let f = 1;\n    let p = 2;\n    while(n > 0) {\n        if(isPrime(p)) {\n            f += p;\n        }\n        p = f + p;\n        n--;\n    }\n    return f;\n};\n\nmodule.exports = {\n    fibPrime,\n    fib,\n    priMeFiB\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n    return l.length > 3\n       ? l.every((n) => {\n            let num = 0;\n            for (let i = 0; i < l.length; i++) {\n                num += l[i];\n            }\n            return num === 0;\n        })\n        : false;\n};\n\nmodule.exports = triPlessumTozerO;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  return (\n    new Promise((resolve, reject) => {\n      let collisions = 0;\n      for (let i = 0; i < n; i++) {\n        for (let j = n - 1; j > i; j--) {\n          if (j % 2 === 1) {\n            carRaceCollision(j - 1, i, n, (collisions) => {\n              if (collisions === n - 1) {\n                resolve(collisions);\n              }\n            });\n          } else {\n            carRaceCollision(i, j, n, (collisions) => {\n              if (collisions === n - 1) {\n                resolve(collisions);\n              }\n            });\n          }\n        }\n      }\n    })\n  );\n};\n\nmodule.exports = carracecolliSioN;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  const len = l.length;\n  const result = [];\n  for (let i = 0; i < len; i += 1) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/**\n  * @function\n  * @name isPalindrome\n  * @description\n  * Check if a string is a palindrome.\n  * @param {string} str\n  * @return {boolean}\n  * @example\n  * isPalindrome('A man, a plan, a canal-pan'); // true\n  * isPalindrome('A man, a plan, a canal-pan'); // false\n  */\nconst isPalindrome = (str) => {\n  const strLen = str.length;\n  const halfStrLen = strLen / 2;\n  for (let i = 0; i < halfStrLen; i += 1) {\n    if (str[i]!== str[strLen - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  * @function\n  * @name getPalindrome\n  * @description\n  * Get the first half of a string.\n  * @param {string} str\n  * @return {string}\n  * @example\n  * getPalindrome('A man, a plan, a canal-pan'); //'man'\n  * getPalindrome('A man, a plan, a canal-pan'); //'man'\n  */\nconst getPalindrome = (str) => {\n  const halfStrLen = str.length / 2;\n  return str.substr(0, halfStrLen);\n};\n\n/**\n  * @function\n  * @name getLongestPalindrome\n  * @description\n  * Get the longest palindrome in a string.\n  * @param {string} str\n  * @return {string}\n  * @example\n  * getLongestPalindrome('A man, a plan, a canal-pan'); // 'canal-pan'\n  * getLongestPalindrome('A man, a plan, a canal-pan'); // 'canal-pan'\n  */\nconst getLongestPalindrome = (str) => {\n  const longestPalindrome = 0;\n  const result = getPalindrome(str);\n  const resultLen = result.length;\n  for (let i = 0; i < resultLen; i += 1) {\n    if (isPalindrome(result)) {\n      if (resultLen > longestPalindrome) {\n        longestPalindrome = resultLen;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  incRLisT,\n  isPalindrome,\n  getPalindrome,\n  getLongestPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n    const isZeroSum = (a, b) => a + b === 0;\n    const find = (a, b) => a > b? a - b : b - a;\n    const isDistinct = (a, b) => a!== b;\n    const sumToZero = (l) => l.reduce((acc, curr) => acc + curr, 0);\n\n    // return false if the list is empty\n    if (!l || l.length === 0) {\n        return false;\n    }\n\n    // return true if list is empty or sumToZero(l) == 0\n    if (l.length === 1 || sumToZero(l) === 0) {\n        return true;\n    }\n\n    // find the two elements that sum to zero\n    const a = find(l[0], l[1]);\n    const b = find(l[2], l[3]);\n\n    // return false if elements are equal\n    if (a === b) {\n        return false;\n    }\n\n    // return true if sum is zero\n    if (isZeroSum(a, b)) {\n        return true;\n    }\n\n    // return true if elements are distinct\n    if (isDistinct(a, b)) {\n        return true;\n    }\n\n    return false;\n};\n\n// test\nconst test = () => {\n    assert.equal(paiRsSuMToZeRo([1, 3, 5, 0]), false);\n    assert.equal(paiRsSuMToZeRo([1, 3, -2, 1]), false);\n    assert.equal(paiRsSuMToZeRo([1, 2, 3, 7]), false);\n    assert.equal(paiRsSuMToZeRo([2, 4, -5, 3, 5, 7]), true);\n    assert.equal(paiRsSuMToZeRo([1]), false);\n};\n\n// export\nmodule.exports = paiRsSuMToZeRo;\nmodule.exports.test = test;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  return String(x).split('').map(digit => {\n    return digit.toString(base);\n  }).join('');\n};\n\nmodule.exports = {\n  chaNgeBAse,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s;\n};\n\n/*\nGiven length of a side and high return volume for a triangle.\n  >>> triVolEArea(5, 3)\n  21\n  */\nconst triVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 3;\n};\n\n/*\nGiven length of a side and high return area for a rectangle.\n  >>> rectAnglEArea(5, 3)\n  10\n  */\nconst rectAnglEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s;\n};\n\n/*\nGiven length of a side and high return volume for a rectangle.\n  >>> rectVolEArea(5, 3)\n  30\n  */\nconst rectVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 4;\n};\n\n/*\nGiven length of a side and high return volume for a pyramid.\n  >>> pyramVolEArea(5, 3)\n  16\n  */\nconst pyramVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 3;\n};\n\n/*\nGiven length of a side and high return volume for a cone.\n  >>> coneVolEArea(5, 3)\n  14\n  */\nconst coneVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 4;\n};\n\n/*\nGiven length of a side and high return volume for a sphere.\n  >>> sphereVolEArea(5, 3)\n  15\n  */\nconst sphereVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 3.5;\n};\n\n/*\nGiven length of a side and high return volume for a cylinder.\n  >>> cylinderVolEArea(5, 3)\n  30\n  */\nconst cylinderVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 2;\n};\n\n/*\nGiven length of a side and high return volume for a cone.\n  >>> coneVolEArea(5, 3)\n  12\n  */\nconst coneVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 3;\n};\n\n/*\nGiven length of a side and high return volume for a cylinder.\n  >>> cylinderVolEArea(5, 3)\n  9\n  */\nconst cylinderVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 2;\n};\n\n/*\nGiven length of a side and high return volume for a pyramid.\n  >>> pyramVolEArea(5, 3)\n  16\n  */\nconst pyramVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 3;\n};\n\n/*\nGiven length of a side and high return volume for a pyramid.\n  >>> pyramVolEArea(5, 3)\n  16\n  */\nconst squareVolEArea = (a, h) => {\n  let s = 0;\n  for (let i = 0; i < h; i++) {\n    s += (2 * Math.pow(a, 2));\n  }\n  return s * 2;\n};\n\nexport {\n  triAnglEArea,\n  triVolEArea,\n  rectAnglEArea,\n  rectVolEArea,\n  pyramVolEArea,\n  coneVolEArea,\n  cylinderVolEArea,\n  squareVolEArea\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nmodule.exports = fib4;\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  return (l.length)? Math.floor((l.length - 1) / 2) : 0;\n};\n\n/* Return the sum of the elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  14\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  40\n  */\nconst sum = (l) => {\n  return (l.length)? l.reduce((a, b) => a + b) : 0;\n};\n\n/* Return the mean of the elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.83333333\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  13.3333333\n  */\nconst mean = (l) => {\n  return sum(l) / l.length;\n};\n\n/* Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3.0\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  13.0\n  */\nconst median = (l) => {\n  const m = medIan(l);\n  if (l.length % 2) {\n    return (l[m] + l[l.length - m - 1]) / 2;\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  let max = 0;\n  let m;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      m = i;\n    }\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  let max = 0;\n  let m;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      m = i;\n    }\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  let max = 0;\n  let m;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      m = i;\n    }\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  let max = 0;\n  let m;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      m = i;\n    }\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  let max = 0;\n  let m;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      m = i;\n    }\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  let max = 0;\n  let m;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      m = i;\n    }\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  let max = 0;\n  let m;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      m = i;\n    }\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  20\n  */\nconst mode = (l) => {\n  let max = 0;\n  let m;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      m = i;\n    }\n  }\n  return l[m];\n};\n\n/* Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n    if (text === '') return true;\n    let reversed = text.split('').reverse();\n    let reversedStr = reversed.join('');\n    return text === reversedStr;\n};\n\nmodule.exports = isPAlinDrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  const mod = n % p;\n  return (mod === 0)? p : mod;\n};\n\nconst factorial = (n) => {\n  if (n === 0) return 1;\n  else return n * factorial(n - 1);\n};\n\nconst modFibonacci = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return c;\n};\n\nconst modFactorial = (n) => {\n  let m = 1;\n  for (let i = 2; i <= n; i++) {\n    m *= i;\n  }\n  return m;\n};\n\nconst modPow = (base, exponent) => {\n  let result = 1;\n  while (exponent > 0) {\n    if (exponent % 2 === 1) {\n      result = (result * base) % modP(base, modP(base, modP(base, modP(base, base)))).valueOf();\n    }\n    base = (base * base) % modP(base, modP(base, modP(base, modP(base, base)))).valueOf();\n    exponent = exponent >> 1;\n  }\n  return result;\n};\n\nconst modPowModFibonacci = (base, exponent) => {\n  let result = 1;\n  while (exponent > 0) {\n    if (exponent % 2 === 1) {\n      result = (result * modFibonacci(base)) % modP(modFibonacci(base), modP(modFibonacci(base), modP(modFibonacci(base), modP(modFibonacci(base), base)))).valueOf();\n    }\n    base = (base * base) % modP(modFibonacci(base), modP(modFibonacci(base), modP(modFibonacci(base), modP(modFibonacci(base), base)))).valueOf();\n    exponent = exponent >> 1;\n  }\n  return result;\n};\n\nconst sum = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconst sumModP = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return c;\n};\n\nconst sumModFibonacci = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return c;\n};\n\nconst sumModPow = (base, exponent) => {\n  let result = 1;\n  while (exponent > 0) {\n    if (exponent % 2 === 1) {\n      result = (result * modPow(base, exponent)) % modP(modPow(base, exponent), modP(modPow(base, exponent), modP(modPow(base, exponent), base))).valueOf();\n    }\n    base = (base * base) % modP(modPow(base, exponent), modP(modPow(base, exponent), modP(modPow(base, exponent), base))).valueOf();\n    exponent = exponent >> 1;\n  }\n  return result;\n};\n\nconst sumModPowModFibonacci = (base, exponent) => {\n  let result = 1;\n  while (exponent > 0) {\n    if (exponent % 2 === 1) {\n      result = (result * modPowModFibonacci(base, exponent)) % modP(modPowModFibonacci(base, exponent), modP(modPowModFibonacci(base, exponent), modP(modPowModFibonacci(base, exponent), base))).valueOf();\n    }\n    base = (base * base) % modP(modPowModFibonacci(base, exponent), modP(modPowModFibonacci(base, exponent), modP(modPowModFibonacci(base, exponent), base))).valueOf();\n    exponent = exponent >> 1;\n  }\n  return result;\n};\n\nmodule.exports = {\n  factorial,\n  modFibonacci,\n  modFactorial,\n  modPow,\n  modPowModFibonacci,\n  sum,\n  sumModP,\n  sumModFibonacci,\n  sumModPow,\n  sumModPowModFibonacci\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let decoded = \"\";\n  for(let i = 0; i < s.length; i++) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\nconst encode = (s) => {\n  return encOdeSHift(s);\n}\n\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nconst encodeShift = (s) => {\n  return encode(s);\n}\n\nconst decodeShift = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst decode = (s) => {\n  return decode(s);\n}\n\nconst encode = (s) => {\n  return encode(s);\n}\n\nconst"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  let result = '';\n  for(let i = 0; i < text.length; i++){\n    if(text.charAt(i)!= 'a' && text.charAt(i)!= 'e' && text.charAt(i)!= 'i' && text.charAt(i)!= 'o' && text.charAt(i)!= 'u'){\n      result += text.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*\n  remOveAllVowels is a function that takes string and returns string without vowels.\n  >>> remOveAllVowels('')\n  ''\n  >>> remOveAllVowels(\"abcdef\\nghijklm\")\n  'ghijklm'\n  >>> remOveAllVowels('abcdef')\n  'abcdef'\n  >>> remOveAllVowels('aaaaa')\n  'aaaaa'\n  >>> remOveAllVowels('aaBAA')\n  'aaBAA'\n  >>> remOveAllVowels('zbcd')\n  'zbcd'\n  */\nconst remOveAllVowels = (text) => {\n  let result = '';\n  for(let i = 0; i < text.length; i++){\n    if(text.charAt(i)!= 'a' && text.charAt(i)!= 'e' && text.charAt(i)!= 'i' && text.charAt(i)!= 'o' && text.charAt(i)!= 'u' && text.charAt(i)!= 'A' && text.charAt(i)!= 'E' && text.charAt(i)!= 'I' && text.charAt(i)!= 'O' && text.charAt(i)!= 'U'){\n      result += text.charAt(i);\n    }\n  }\n  return result;\n};\n\n/*\n  remOveAllConsonants is a function that takes string and returns string without vowels and consonants.\n  >>> remOveAllConsonants('')\n  ''\n  >>> remOveAllConsonants(\"abcdef\\nghijklm\")\n  'ghijklm'\n  >>> remOveAllConsonants('abcdef')\n  'abcdef'\n  >>> remOveAllConsonants('aaaaa')\n  'aaaaa'\n  >>> remOveAllConsonants('aaBAA')\n  'aaBAA'\n  >>> remOveAllConsonants('zbcd')\n  'zbcd'\n  */\nconst remOveAllConsonants = (text) => {\n  let result = '';\n  for(let i = 0; i < text.length; i++){\n    if(text.charAt(i)!= 'a' && text.charAt(i)!= 'e' && text.charAt(i)!= 'i' && text.charAt(i)!= 'o' && text.charAt(i)!= 'u' && text.charAt(i)!= 'A' && text.charAt(i)!= 'E' && text.charAt(i)!= 'I' && text.charAt(i)!= 'O' && text.charAt(i)!= 'U'){\n      result += text.charAt(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  remOveVOwels,\n  remOveAllVowels,\n  remOveAllConsonants\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  const sum = l.reduce((a, b) => a + b)\n  if (sum > t) return false\n  const max = l.reduce((a, b) => Math.max(a, b))\n  return (max <= t)\n}\n\n/*Return true if the list l contains the element e.\n  >>> contains([1, 2, 3, 4], 3)\n  true\n  >>> contains([1, 2, 3, 4], 6)\n  false\n  */\nconst contains = (l, e) => {\n  return l.indexOf(e) >= 0\n}\n\n/*Return true if the list l is sorted in increasing order.\n  >>> isSorted([1, 2, 3, 4])\n  true\n  >>> isSorted([1, 2, 2, 3, 4])\n  false\n  >>> isSorted([1, 1, 2, 3, 4])\n  false\n  >>> isSorted([2, 1, 2, 3, 4])\n  false\n  */\nconst isSorted = (l) => {\n  return Array.isArray(l) && l.every((v) => v >= l[0])\n}\n\n/*Return true if the list l is a permutation of its own.\n  >>> isPermutation([1, 2, 3, 4, 5])\n  true\n  >>> isPermutation([1, 3, 2, 4, 5])\n  false\n  >>> isPermutation([1, 3, 2, 4, 5, 6, 7])\n  false\n  >>> isPermutation([1, 3, 2, 4, 5, 6, 7, 8])\n  false\n  >>> isPermutation([1, 3, 2, 4, 5, 6, 7, 8, 9])\n  true\n  */\nconst isPermutation = (l) => {\n  return (\n    l.length === l.reduce((a, b) => a + b) &&\n    belOwThReshoLd(l, l.length) &&\n    l.every((v) => contains(l, v))\n  )\n}\n\n/*Return true if the list l is a permutation of its own, in decreasing order.\n  >>> isPermutation([5, 4, 3, 2, 1])\n  false\n  >>> isPermutation([7, 6, 5, 4, 3, 2, 1])\n  true\n  */\nconst isPermutationDown = (l) => {\n  return (\n    l.length === l.reduce((a, b) => a + b) &&\n    belOwThReshoLd(l, l.length) &&\n    l.every((v) => contains(l, v)) &&\n    l.every((v, i) => l[i] >= l[i + 1])\n  )\n}\n\n/*Return true if the list l contains all the elements in the list r.\n  >>> contains([1, 2, 3, 4], [1, 2])\n  true\n  >>> contains([1, 2, 3, 4], [1, 2, 3])\n  false\n  >>> contains([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  */\nconst containsAll = (l, r) => {\n  return r.every((v) => contains(l, v))\n}\n\n/*Return the list of elements of the list l that are in the list r.\n  >>> intersect([1, 2, 3, 4], [1, 2])\n  [1, 2]\n  >>> intersect([1, 2, 3, 4], [1, 2, 3, 4])\n  []\n  >>> intersect([1, 2, 3, 4], [1, 2, 3, 5])\n  [1, 2, 3]\n  >>> intersect([1, 2, 3, 4, 5], [1, 2, 3, 4])\n  [1, 2, 3]\n  */\nconst intersect = (l, r) => {\n  const rLen = r.length\n  const len = l.length\n  if (len === 0 || rLen === 0) return []\n  const rl = new Set(r)\n  const list = []\n  for (let i = 0; i < len; i++) {\n    if (rl.has(l[i])) {\n      list.push(l[i])\n    }\n  }\n  return list\n}\n\n/*Return the list of elements of the list l that are not in the list r.\n  >>> union([1, 2, 3, 4], [1, 2])\n  [3, 4]\n  >>> union([1, 2, 3, 4], [1, 2, 3, 5])\n  [1, 2, 3, 4, 5]\n  >>> union([1, 2, 3, 4, 5], [1, 2, 3, 4])\n  [1, 2, 3, 4, 5]\n  */\nconst union = (l, r) => {\n  const rLen = r.length\n  const len = l.length\n  if (len === 0) return r\n  const list = new Set(l)\n  const rl = new Set(r)\n  const rSet = new Set()\n  for (let i = 0; i < rLen; i++) {\n    if (rl.has(r[i])) {\n      rSet.add(r[i])\n    }\n  }\n  return [...new Set([...list,...rSet])]\n}\n\nmodule.exports = {\n  containsAll,\n  contains,\n  containsAllDown,\n  containsAllUp,\n  containsAllUpDown,\n  containsAllUpDownUp,\n  containsAllUpDownUpDown,\n  containsAllUpDownUpDownUp,\n  containsAllUpDownUpDownUpUp,\n  containsAllUpDownUpDownUpUpDown,\n  containsAllUpDownUpDownUpUpDown,\n  containsAllUpDownUpDownUpUpDownUp,\n  containsAllUpDownUpDownUpUpDownUp,\n  containsAllUpDownUpDownUpUpDownUp"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nexport default add;<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  s0 = s0.toLowerCase();\n  s1 = s1.toLowerCase();\n  const len = Math.min(s0.length, s1.length);\n  let i = 0;\n  while (i < len) {\n    if (s0[i]!= s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs2 = (s0, s1) => {\n  s0 = s0.toLowerCase();\n  s1 = s1.toLowerCase();\n  const len = Math.min(s0.length, s1.length);\n  let i = 0;\n  while (i < len) {\n    if (s0[i]!= s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samEChaRs('eabcd', 'eabcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('eabcd', 'eabcdzzzz')\n  false\n  >>> samEChaRs('eabcd', 'eabcdzzzzz')\n  false\n  >>> samEChaRs('eabcd', 'eabcdzzzzzz')\n  true\n  >>> samEChaRs('eabcd', 'eabcdzzzzzzzz')\n  false\n  >>> samEChaRs('eabcd', 'eabcdzzzzzzzzzz')\n  false\n  >>> samEChaRs('eabcd', 'eabcdzzzzzzzzzzzz')\n  false\n  >>> samEChaRs('eabcd', 'eabcdzzzzzzzzzzzzzz')\n  false\n  >>> samEChaRs('eabcd', 'eabcdzzzzzzzzzzzzzzzz')\n  false\n  >>> samEChaRs('eabcd', 'eabcdzzzzzzzzzzzzzzzzzz')\n  false\n  */\nconst samEChaRs3 = (s0, s1) => {\n  s0 = s0.toLowerCase();\n  s1 = s1.toLowerCase();\n  const len = Math.min(s0.length, s1.length);\n  let i = 0;\n  while (i < len) {\n    if (s0[i]!= s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samEChaRs3('eabcd', 'eabcd')\n  true\n  >>> samEChaRs3('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs3('eabcd', 'eabcdzzzz')\n  false\n  >>> samEChaRs3('eabcd', 'eabcdzzzzz')\n  false\n  >>> samEChaRs3('eabcd', 'eabcdzzzzzz')\n  true\n  >>> samEChaRs3('eabcd', 'eabcdzzzzzzzz')\n  false\n  >>> samEChaRs3('eabcd', 'eabcdzzzzzzzzzz')\n  false\n  >>> samEChaRs3('eabcd', 'eabcdzzzzzzzzzzzz')\n  false\n  >>> samEChaRs3('eabcd', 'eabcdzzzzzzzzzzzzzz')\n  false\n  >>> samEChaRs3('eabcd', 'eabcdzzzzzzzzzzzzzzzz')\n  false\n  */\nconst samEChaRs4 = (s0, s1) => {\n  s0 = s0.toLowerCase();\n  s1 = s1.toLowerCase();\n  const len = Math.min(s0.length, s1.length);\n  let i = 0;\n  while (i < len) {\n    if (s0[i]!= s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = {\n  samEChaRs,\n  samEChaRs2,\n  samEChaRs3,\n  samEChaRs4,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  let last = brackets[0];\n  for (let i = 1; i < brackets.length; i++) {\n    if (brackets[i] === last) {\n      return false;\n    }\n    last = brackets[i];\n  }\n  return true;\n};\n\n/**\n  @method corTk\n  @for cor\n  @param {String} tk\n  @return {Boolean}\n  Returns true if tk is a COR token.\n\n  COR token is a token that is not a string or a number.\n\n  >>> corTk(\"a\")\n  true\n  >>> corTk(\"a3\")\n  false\n  >>> corTk(\"<\")\n  false\n  >>> corTk(\">\")\n  false\n  >>> corTk(\"1\")\n  false\n  */\nconst corTk = (tk) => {\n  return (\n    tk.match(/^[\\w\\$\\#\\@]*$/) &&\n   !tk.match(/^[\\d]*$/)\n  );\n};\n\n/**\n  @method corBrack\n  @for cor\n  @param {String} tk\n  @return {Boolean}\n  Returns true if tk is a COR token.\n\n  COR token is a token that is not a string or a number.\n\n  >>> corBrack(\"a\")\n  false\n  >>> corBrack(\"a3\")\n  false\n  >>> corBrack(\"<\")\n  false\n  >>> corBrack(\">\")\n  false\n  >>> corBrack(\"1\")\n  false\n  */\nconst corBrack = (tk) => {\n  return (\n    tk.match(/^[\\w\\$\\#\\@\\[\\]\\(\\)]*$/) &&\n   !tk.match(/^[\\d]*$/)\n  );\n};\n\n/**\n  @method corNum\n  @for cor\n  @param {String} tk\n  @return {Boolean}\n  Returns true if tk is a COR token.\n\n  COR token is a token that is not a string or a number.\n\n  >>> corNum(\"a\")\n  false\n  >>> corNum(\"a3\")\n  false\n  >>> corNum(\"<\")\n  false\n  >>> corNum(\">\")\n  false\n  >>> corNum(\"1\")\n  false\n  */\nconst corNum = (tk) => {\n  return (\n    tk.match(/^[\\d]*$/) &&\n   !tk.match(/^[\\w\\$\\#\\@\\[\\]\\(\\)]*$/)\n  );\n};\n\n/**\n  @method corLbrack\n  @for cor\n  @param {String} tk\n  @return {Boolean}\n  Returns true if tk is a COR token.\n\n  COR token is a token that is not a string or a number.\n\n  >>> corLbrack(\"a\")\n  false\n  >>> corLbrack(\"a3\")\n  false\n  >>> corLbrack(\"<\")\n  false\n  >>> corLbrack(\">\")\n  false\n  >>> corLbrack(\"1\")\n  false\n  */\nconst corLbrack = (tk) => {\n  return (\n    tk.match(/^[\\[\\(\\]\\{\\}]*$/) &&\n   !tk.match(/^[\\d]*$/)\n  );\n};\n\n/**\n  @method corRbrack\n  @for cor\n  @param {String} tk\n  @return {Boolean}\n  Returns true if tk is a COR token.\n\n  COR token is a token that is not a string or a number.\n\n  >>> corRbrack(\"a\")\n  false\n  >>> corRbrack(\"a3\")\n  false\n  >>> corRbrack(\"<\")\n  false\n  >>> corRbrack(\">\")\n  false\n  >>> corRbrack(\"1\")\n  false\n  */\nconst corRbrack = (tk) => {\n  return (\n    tk.match(/^[\\]\\}]*$/) &&\n   !tk.match(/^[\\d]*$/)\n  );\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  l.sort();\n  return l[0] > l[1];\n}\n\n/* Return a list of lists of integers.\n   >>> genLists([1, 2, 3, 4, 5, 6])\n   [[1, 2], [3, 4], [5, 6]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7])\n   [[1, 2], [3, 4], [5, 6], [7]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8])\n   [[1, 2], [3, 4], [5, 6], [7, 8]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19]]\n   >>> genLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n   [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]\n   */\nconst genLists = (l) => {\n  let prev = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  let curr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  let n = l.length;\n  let res = [];\n  for (let i = 0; i < n; i++) {\n    curr.push(l[i]);\n    if (monOtonIc(curr) === true) {\n      res.push(curr);\n      curr.splice(0, curr.length);\n    } else {\n      curr.splice(0, curr.length);\n      prev = curr;\n    }\n  }\n  return res;\n}\n\n// Export the module\nmodule.exports = genLists;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const sortedList1 = sort(l1);\n  const sortedList2 = sort(l2);\n  const intersection = sortedList1.filter(x => sortedList2.includes(x));\n  return intersection;\n};\n\nexport default comMon;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  const isPrime = (p) => {\n    if (p === 2) return true\n    if (p === 1) return false\n    if (p % 2 === 0) return false\n    return (p - 1) * p // if prime, then not divisible by 2\n  }\n  const maxFactor = Math.floor(Math.sqrt(n))\n  const factors = []\n  for (let i = 3; i <= maxFactor; i += 2) {\n    if (isPrime(i)) {\n      const count = 1\n      while (n % i === 0) {\n        n /= i\n        count += 1\n      }\n      if (count > 0) {\n        factors.push([i, count])\n      }\n    }\n  }\n  factors.sort((a, b) => b[1] - a[1])\n  return factors[0][0]\n}\n\nconst p = larGestprimefacTor(2048)\nconsole.log(p)\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumFromTo is a function that sums numbers from 1 to n.\n  >>> sumFromTo(30)\n  465\n  >>> sumFromTo(100)\n  5050\n  >>> sumFromTo(5)\n  15\n  >>> sumFromTo(10)\n  55\n  >>> sumFromTo(1)\n  1\n  */\nconst sumFromTo = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumRange is a function that sums numbers from 1 to n.\n  >>> sumRange(30)\n  465\n  >>> sumRange(100)\n  5050\n  >>> sumRange(5)\n  15\n  >>> sumRange(10)\n  55\n  >>> sumRange(1)\n  1\n  */\nconst sumRange = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumSquares is a function that sums squares of numbers from 1 to n.\n  >>> sumSquares(30)\n  9825\n  >>> sumSquares(100)\n  499500\n  >>> sumSquares(5)\n  25\n  >>> sumSquares(10)\n  55\n  >>> sumSquares(1)\n  1\n  */\nconst sumSquares = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n};\n\n/*\n  sumOfSquaresToN is a function that sums squares of numbers from 1 to n.\n  >>> sumOfSquaresToN(30)\n  9825\n  >>> sumOfSquaresToN(100)\n  499500\n  >>> sumOfSquaresToN(5)\n  25\n  >>> sumOfSquaresToN(10)\n  55\n  >>> sumOfSquaresToN(1)\n  1\n  */\nconst sumOfSquaresToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n};\n\n/*\n  sumOfSquaresFromTo is a function that sums squares of numbers from 1 to n.\n  >>> sumOfSquaresFromTo(30)\n  9825\n  >>> sumOfSquaresFromTo(100)\n  499500\n  >>> sumOfSquaresFromTo(5)\n  25\n  >>> sumOfSquaresFromTo(10)\n  55\n  >>> sumOfSquaresFromTo(1)\n  1\n  */\nconst sumOfSquaresFromTo = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n};\n\n/*\n  sumOfSquaresRange is a function that sums squares of numbers from 1 to n.\n  >>> sumOfSquaresRange(30)\n  9825\n  >>> sumOfSquaresRange(100)\n  499500\n  >>> sumOfSquaresRange(5)\n  25\n  >>> sumOfSquaresRange(10)\n  55\n  >>> sumOfSquaresRange(1)\n  1\n  */\nconst sumOfSquaresRange = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n};\n\n/*\n  largestNumber is a function that returns largest number from 1 to n.\n  >>> largestNumber(30)\n  29\n  >>> largestNumber(100)\n  99\n  >>> largestNumber(5)\n  5\n  >>> largestNumber(10)\n  9\n  >>> largestNumber(1)\n  1\n  */\nconst largestNumber = (n) => {\n  let largest = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) largest = i;\n  }\n  return largest;\n};\n\n/*\n  smallestNumber is a function that returns smallest number from 1 to n.\n  >>> smallestNumber(30)\n  1\n  >>> smallestNumber(100)\n  1\n  >>> smallestNumber(5)\n  1\n  >>> smallestNumber(10)\n  1\n  >>> smallestNumber(1)\n  1\n  */\nconst smallestNumber = (n) => {\n  let smallest = n;\n  for (let i = 1; i <= n; i++) {\n    if (i < smallest) smallest = i;\n  }\n  return smallest;\n};\n\n/*\n  largestNumberFromTo is a function that returns largest number from 1 to n.\n  >>> largestNumberFromTo(30)\n  29\n  >>> largestNumberFromTo(100)\n  99\n  >>> largestNumberFromTo(5)\n  5\n  >>> largestNumberFromTo(10)\n  9\n  >>> largestNumberFromTo(1)\n  1\n  */\nconst largestNumberFromTo = (n) => {\n  let largest = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) largest = i;\n  }\n  return largest;\n};\n\n/*\n  smallestNumberFromTo is a function that returns smallest number from 1 to n.\n  >>> smallestNumberFromTo(30)\n  1\n  >>> smallestNumberFromTo(100)\n  1\n  >>> smallestNumberFromTo(5)\n  1\n  >>> smallestNumberFromTo(10)\n  1\n  >>> smallestNumberFromTo(1)\n  1\n  */\nconst smallestNumberFromTo = (n) => {\n  let smallest = n;"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const n = brackets.length;\n  if (n < 1) {\n    return false;\n  }\n  return brackets[n - 1].match(/\\(/) && brackets[n - 2].match(/\\)/);\n};\n\nexport default corRectbrackEtiNg;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i]\n  }\n  let result = [0]\n  for (let i = 0; i < xs.length; i++) {\n    result.push(sum * (i + 1))\n  }\n  return result\n}\n\n/**\n  * Derivative of the derivative of the derivative of the\n  * derivative of the derivative of the polynomial in x.\n  * Return the derivative of the derivative of the derivative of\n  * the derivative of the polynomial in x.\n  * @param xs [a, b,...]\n  * @return [d2x1, d2x2,...]\n  */\nconst derivativeOfDerivativeOfDerivative = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * (i + 1)\n  }\n  let result = [0]\n  for (let i = 0; i < xs.length; i++) {\n    result.push(sum * (i + 1))\n  }\n  return result\n}\n\n/**\n  * Derivative of the derivative of the derivative of the\n  * derivative of the derivative of the polynomial in x.\n  * Return the derivative of the derivative of the derivative of\n  * the derivative of the polynomial in x.\n  * @param xs [a, b,...]\n  * @return [d2x1, d2x2,...]\n  */\nconst derivativeOfDerivativeOfDerivativeOfDerivative = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * (i + 1) * (i + 2)\n  }\n  let result = [0]\n  for (let i = 0; i < xs.length; i++) {\n    result.push(sum * (i + 1))\n  }\n  return result\n}\n\n/**\n  * Return the derivative of the derivative of the derivative of the\n  * polynomial in x.\n  * @param xs [a, b,...]\n  * @return [d2x1, d2x2,...]\n  */\nconst derivativeOfDerivativeOfDerivativeOfDerivative = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * (i + 1) * (i + 2)\n  }\n  let result = [0]\n  for (let i = 0; i < xs.length; i++) {\n    result.push(sum * (i + 1))\n  }\n  return result\n}\n\n/**\n  * Derivative of the derivative of the derivative of the\n  * derivative of the polynomial in x.\n  * Return the derivative of the derivative of the derivative of\n  * the derivative of the polynomial in x.\n  * @param xs [a, b,...]\n  * @return [d2x1, d2x2,...]\n  */\nconst derivativeOfDerivativeOfDerivativeOfDerivative = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * (i + 1) * (i + 2)\n  }\n  let result = [0]\n  for (let i = 0; i < xs.length; i++) {\n    result.push(sum * (i + 1))\n  }\n  return result\n}\n\n/**\n  * Derivative of the derivative of the derivative of the\n  * derivative of the derivative of the polynomial in x.\n  * Return the derivative of the derivative of the derivative of\n  * the derivative of the derivative of the polynomial in x.\n  * @param xs [a, b,...]\n  * @return [d2x1, d2x2,...]\n  */\nconst derivativeOfDerivativeOfDerivativeOfDerivativeOfDerivative = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3)\n  }\n  let result = [0]\n  for (let i = 0; i < xs.length; i++) {\n    result.push(sum * (i + 1))\n  }\n  return result\n}\n\nexport {\n  derivativeOfDerivative,\n  derivativeOfDerivativeOfDerivative,\n  derivativeOfDerivativeOfDerivativeOfDerivative,\n  derivativeOfDerivativeOfDerivativeOfDerivativeOfDerivative,\n  derivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivative,\n  derivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivative,\n  derivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivative,\n  derivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivative,\n  derivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivative,\n  derivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivativeOfDerivative,\n  derivative"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibFib(n - 1) + fibFib(n - 2) + fibFib(n - 3);\n};\n\n// const fibFib = (n) => {\n//   if (n === 0 || n === 1) {\n//     return n;\n//   }\n//   return fibFib(n - 1) + fibFib(n - 2) + fibFib(n - 3);\n// };\n\nconst fibFib2 = (n) => {\n  const fibFib1 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib1(n - 1) + fibFib1(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibFib1(n - 1) + fibFib1(n - 2);\n};\n\nconst fibFib3 = (n) => {\n  const fibFib2 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib2(n - 1) + fibFib2(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibFib2(n - 1) + fibFib2(n - 2);\n};\n\nconst fibFib4 = (n) => {\n  const fibFib3 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib3(n - 1) + fibFib3(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibFib3(n - 1) + fibFib3(n - 2);\n};\n\nconst fibFib5 = (n) => {\n  const fibFib4 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib4(n - 1) + fibFib4(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibFib4(n - 1) + fibFib4(n - 2);\n};\n\nconst fibFib6 = (n) => {\n  const fibFib5 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib5(n - 1) + fibFib5(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibFib5(n - 1) + fibFib5(n - 2);\n};\n\nconst fibFib7 = (n) => {\n  const fibFib6 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib6(n - 1) + fibFib6(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibFib6(n - 1) + fibFib6(n - 2);\n};\n\nconst fibFib8 = (n) => {\n  const fibFib7 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib7(n - 1) + fibFib7(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibFib7(n - 1) + fibFib7(n - 2);\n};\n\nconst fibFib9 = (n) => {\n  const fibFib8 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib8(n - 1) + fibFib8(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibFib8(n - 1) + fibFib8(n - 2);\n};\n\nconst fibFib10 = (n) => {\n  const fibFib9 = (n) => {\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    return fibFib9(n - 1) + fibFib9(n - 2);\n  };\n  if (n === 0) {\n    return 0;\n  }\n  "}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  return s.replace(/([aeiou]|y)\\1+/g, '$1').replace(/[aeiou]/, '$1').length - 1\n}\n\n/*\n  Write a function consonantChars which takes a string as input and\n  returns a string with all the consonants of the given string\n  replaced by their corresponding vowel counterparts.\n  For example, 'g' becomes 'y' and 'z' becomes's'.\n\n  Example:\n  >>> consonantChars(\"gabc\")\n  \"gyc\"\n  */\nconst consonantChars = (s) => {\n  const vowels = 'aeiou'\n  return s.replace(/[^a-zA-Z]/g, (c) => vowels.indexOf(c) === -1? c : vowels[c.toLowerCase()])\n}\n\n/*\n  Write a function consonantCharsCOunt which takes a string as input\n  and returns the number of consonants in the string.\n  Consonants in this case are all lowercase letters.\n\n  Example:\n  >>> consonantCharsCOunt(\"abc\")\n  2\n  */\nconst consonantCharsCOunt = (s) => {\n  return s.replace(/[^a-z]/g, '$1').length\n}\n\n/*\n  Write a function consonantsOnly which takes a string as input and\n  returns a string with all the consonants of the given string\n  replaced by their corresponding vowel counterparts.\n  For example, 'g' becomes 'y' and 'z' becomes's'.\n\n  Example:\n  >>> consonantsOnly(\"gabc\")\n  \"gyc\"\n  */\nconst consonantsOnly = (s) => {\n  return s.replace(/[^a-zA-Z]/g, '$1').replace(/[aeiou]/, '$1')\n}\n\n/*\n  Write a function consonantsOnlyCOunt which takes a string as input\n  and returns the number of consonants in the string.\n  Consonants in this case are all lowercase letters.\n\n  Example:\n  >>> consonantsOnlyCOunt(\"abc\")\n  2\n  */\nconst consonantsOnlyCOunt = (s) => {\n  return s.replace(/[^a-z]/g, '$1').length\n}\n\n/*\n  Write a function letterCount which takes a string as input and\n  returns the number of letters in the given string.\n\n  Example:\n  >>> letterCount(\"abc\")\n  3\n  */\nconst letterCount = (s) => {\n  return s.length\n}\n\n/*\n  Write a function vowelCount which takes a string as input and\n  returns the number of vowels in the given string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> vowelCount(\"abc\")\n  2\n  >>> vowelCount(\"yabc\")\n  1\n  */\nconst vowelCount = (s) => {\n  return s.replace(/[aeiou]/g, '$1').length\n}\n\n/*\n  Write a function vowelCountCOunt which takes a string as input\n  and returns the number of vowels in the given string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> vowelCountCOunt(\"abc\")\n  2\n  */\nconst vowelCountCOunt = (s) => {\n  return s.replace(/[aeiouy]/g, '$1').length\n}\n\n/*\n  Write a function vowelChars which takes a string as input and\n  returns a string with all the vowels of the given string\n  replaced by their corresponding consonants.\n  For example, 'g' becomes 'y' and 'z' becomes's'.\n\n  Example:\n  >>> vowelChars(\"gabc\")\n  \"gyc\"\n  */\nconst vowelChars = (s) => {\n  return s.replace(/[^a-zA-Z]/g, '$1').replace(/[aeiou]/, '$1')\n}\n\n/*\n  Write a function vowelCharsCOunt which takes a string as input\n  and returns the number of vowels in the given string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> vowelCharsCOunt(\"abc\")\n  2\n  */\nconst vowelCharsCOunt = (s) => {\n  return s.replace(/[^a-zA-Z]/g, '$1').replace(/[aeiouy]/, '$1').length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  const digits = new Array(x).fill(0).map((x, i) => {\n    const digit = x % 10;\n    x = Math.floor(x / 10);\n    return (digit + shift) % 10;\n  });\n  if (shift > digits.length) {\n    return digits.reverse().join(\"\");\n  } else {\n    return digits.join(\"\");\n  }\n}\n\n// test\nconsole.log(cirCulaRShifT(12, 1));\nconsole.log(cirCulaRShifT(12, 2));\nconsole.log(cirCulaRShifT(12, 3));\nconsole.log(cirCulaRShifT(12, 4));\nconsole.log(cirCulaRShifT(12, 5));\nconsole.log(cirCulaRShifT(12, 6));\nconsole.log(cirCulaRShifT(12, 7));\nconsole.log(cirCulaRShifT(12, 8));\nconsole.log(cirCulaRShifT(12, 9));\nconsole.log(cirCulaRShifT(12, 10));\nconsole.log(cirCulaRShifT(12, 11));\nconsole.log(cirCulaRShifT(12, 12));\nconsole.log(cirCulaRShifT(12, 13));\nconsole.log(cirCulaRShifT(12, 14));\nconsole.log(cirCulaRShifT(12, 15));\nconsole.log(cirCulaRShifT(12, 16));\nconsole.log(cirCulaRShifT(12, 17));\nconsole.log(cirCulaRShifT(12, 18));\nconsole.log(cirCulaRShifT(12, 19));\nconsole.log(cirCulaRShifT(12, 20));\nconsole.log(cirCulaRShifT(12, 21));\nconsole.log(cirCulaRShifT(12, 22));\nconsole.log(cirCulaRShifT(12, 23));\nconsole.log(cirCulaRShifT(12, 24));\nconsole.log(cirCulaRShifT(12, 25));\nconsole.log(cirCulaRShifT(12, 26));\nconsole.log(cirCulaRShifT(12, 27));\nconsole.log(cirCulaRShifT(12, 28));\nconsole.log(cirCulaRShifT(12, 29));\nconsole.log(cirCulaRShifT(12, 30));\nconsole.log(cirCulaRShifT(12, 31));\nconsole.log(cirCulaRShifT(12, 32));\nconsole.log(cirCulaRShifT(12, 33));\nconsole.log(cirCulaRShifT(12, 34));\nconsole.log(cirCulaRShifT(12, 35));\nconsole.log(cirCulaRShifT(12, 36));\nconsole.log(cirCulaRShifT(12, 37));\nconsole.log(cirCulaRShifT(12, 38));\nconsole.log(cirCulaRShifT(12, 39));\nconsole.log(cirCulaRShifT(12, 40));\nconsole.log(cirCulaRShifT(12, 41));\nconsole.log(cirCulaRShifT(12, 42));\nconsole.log(cirCulaRShifT(12, 43));\nconsole.log(cirCulaRShifT(12, 44));\nconsole.log(cirCulaRShifT(12, 45));\nconsole.log(cirCulaRShifT(12, 46));\nconsole.log(cirCulaRShifT(12, 47));\nconsole.log(cirCulaRShifT(12, 48));\nconsole.log(cirCulaRShifT(12, 49));\nconsole.log(cirCulaRShifT(12, 50));\nconsole.log(cirCulaRShifT(12, 51));\nconsole.log(cirCulaRShifT(12, 52));\nconsole.log(cirCulaRShifT(12, 53));\nconsole.log(cirCulaRShifT(12, 54));\nconsole.log(cirCulaRShifT(12, 55));\nconsole.log(cirCulaRShifT(12, 56));\nconsole.log(cirCulaRShifT(12, 57));\nconsole.log(cirCulaRShifT(12, 58));\nconsole.log(cirCulaRShifT(12, 59));\nconsole.log(cirCulaRShifT(12, 60));\nconsole.log(cirCulaRShifT(12, 61));\nconsole.log(cirCulaRShifT(12, 62));\nconsole.log(cirCulaRShifT(12, 63));\nconsole.log(cirCulaRShifT(12, 64));\nconsole.log(cirCulaRShifT(12, 65));\nconsole.log(cirCulaRShifT(12, 66));\nconsole.log(cirCulaRShifT(12, 67));\nconsole.log(cirCulaRShifT(12, 68));\nconsole.log(cirCulaRShifT(12, 69));\nconsole.log(cirCulaRShifT(12, 70));\nconsole.log(cirCulaRShifT(12, 71));\nconsole.log(cirCulaRShifT(12, 72));\nconsole.log(cirCulaRShifT(12, 73));\nconsole.log(cirCulaRShifT(12, 74));\nconsole.log"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const lowerCodes = [...new Array(128)].map((_, i) => i)\n\n  return s.reduce((a, b) => {\n    return a + lowerCodes[b.charCodeAt(0)]\n  }, 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let count = 0\n  let apple = 0\n  let orange = 0\n  let mango = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"apples\") {\n      apple++\n    } else if (s[i] === \"oranges\") {\n      orange++\n    } else if (s[i] === \"mango\") {\n      mango++\n    }\n  }\n  count = apple + orange - mango\n  return n - count\n}\n\nmodule.exports = fruItDiStribUtiOn\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n    let result = [];\n    let min = -1;\n    let smallest = -1;\n    arr.forEach(n => {\n        if (n > 0) {\n            let value = n;\n            if (value % 2 === 0) {\n                if (min < 0 || value < min) {\n                    smallest = value;\n                    min = value;\n                }\n            }\n        }\n    });\n    if (smallest < 0) {\n        return [];\n    }\n    let index = 0;\n    while (index < arr.length) {\n        if (arr[index] === smallest) {\n            break;\n        }\n        index++;\n    }\n    result.push([smallest, index]);\n    return result;\n};\n\nmodule.exports = pluCk;<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n    let result = 0;\n    for (let element of lst) {\n        if (element > 0) {\n            let index = Math.floor(element);\n            let count = lst.indexOf(element) + 1;\n            if (count > result) {\n                result = count;\n            }\n        }\n    }\n    return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  if (lst.length <= 1) return lst\n\n  let sorted = lst.sort((a, b) => a - b)\n  let sortedLst = []\n  sortedLst.push(sorted[0])\n\n  for (let i = 1; i < sorted.length; i++) {\n    sortedLst.push(sorted[i - 1])\n  }\n\n  return sortedLst\n}\n\nexport default strAngesortLIst\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b < c) return -1;\n\n  const a_2 = a * a;\n  const b_2 = b * b;\n  const c_2 = c * c;\n\n  const s = (a + b + c) / 2;\n  const t = s * (s - a) * (s - b) * (s - c);\n\n  const p = t / (a_2 + b_2 + c_2);\n\n  return Math.round(p * 100) / 100;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  if (q.length < 2) {\n    return false;\n  }\n\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n\n  return sum <= w;\n};\n\nexport { wilLItFLy };\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n    const len = arr.length;\n    if (len % 2 === 1) return 0;\n    if (arr.every((v, i) => v === arr[len - i - 1])) return len;\n    return 1;\n}\n\nexport default smaLlesTChanGe;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const total = (lst1.length <= lst2.length)? lst1 : lst2;\n  const left = lst1.length - lst2.length;\n  return left === 0? lst1 : [...lst1.slice(0, left),...lst2];\n};\n\n/*\n  Write a function that accepts two lists of numbers and returns the list that has\n  total number of digits in the all numbers of the list less than the other list.\n\n  if the two lists have the same number of digits, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch([1, 2, 3, 4, 5], [1, 2, 3]) ➞ [1, 2, 3]\n  totAlMaTch([1, 2, 3, 4, 5], [2, 3, 4]) ➞ [2, 3, 4]\n  totAlMaTch([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) ➞ [2, 3, 4, 5, 6]\n  totAlMaTch([1, 2, 3, 4, 5], [2, 3, 4, 5]) ➞ [2, 3, 4, 5]\n  totAlMaTch([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) ➞ [2, 3, 4, 5, 6]\n  totAlMaTch([1, 2, 3, 4, 5], [1, 2, 3, 4]) ➞ [1, 2, 3, 4]\n  totAlMaTch([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) ➞ [2, 3, 4, 5, 6]\n  totAlMaTch([1, 2, 3, 4, 5], [2, 3, 4, 5]) ➞ [2, 3, 4, 5]\n  totAlMaTch([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) ➞ [2, 3, 4, 5, 6]\n  totAlMaTch([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]) ➞ [1, 2, 3, 4, 5, 6, 7, 8]\n  totAlMaTch([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  totAlMaTch([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  totAlMaTch([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  totAlMaTch([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  totAlMaTch([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const total = (lst1.length <= lst2.length)? lst1 : lst2;\n  const left = lst1.length - lst2.length;\n  return left === 0? lst1 : [...lst1.slice(0, left),...lst2];\n};\n\n/*\n  Write a function that accepts two lists of numbers and returns the list that has\n  the largest sum of the numbers in the all numbers of the list.\n\n  if the two lists have the same sum, return the first list.\n\n  Examples\n  largestSum([], []) ➞ []\n  largestSum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  largestSum([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) ➞ [2, 3, 4, 5, 6]\n  largestSum([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]) ➞ [2, 3, 4, 5, 6, 7, 8]\n  largestSum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  largestSum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  largestSum([1, 2, 3, 4"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let i = 0,\n    j = 0,\n    k = 0,\n    t = 0;\n  while (a > 0) {\n    t = 0;\n    for (i = 0; i < 3; i++) {\n      if (a % primes[i] === 0) {\n        t = t + 1;\n        break;\n      }\n    }\n    if (t === 3) {\n      return true;\n    }\n    a = a / primes[i];\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  return (Math.pow(x, n) === x);\n};\n\n/*\n  Write a function that takes a string as input and returns the string with the spaces between\n  the words replaced by a new line character\n  For example:\n  replaceSpace(\"Hi my name is John\") => \"Hi my name is\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi my\\nname is\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\"Hi my name is John\") => \"Hi\\nmy\\nname\\nis\\nJohn\"\n  replaceSpace(\""}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  return a > 0 && (Math.pow(a, 3) === a);\n};\n\nexport default iscUbe;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  if (!num) return 0;\n  if (num.length === 1) return 2;\n  let total = 0;\n  num = num.toUpperCase();\n  for (let i = 0; i < num.length; i++) {\n    if (num.charAt(i) === 'A' && i + 1 < num.length) {\n      total += 1;\n      i += 1;\n    } else if (num.charAt(i) === 'B' && i + 1 < num.length) {\n      total += 1;\n      i += 1;\n    } else if (num.charAt(i) === 'C' && i + 1 < num.length) {\n      total += 1;\n      i += 1;\n    } else if (num.charAt(i) === 'D' && i + 1 < num.length) {\n      total += 1;\n      i += 1;\n    }\n  }\n  return total;\n};\n\nconsole.log(hexkey(\"AB\"));\nconsole.log(hexkey(\"1077E\"));\nconsole.log(hexkey(\"ABED1A33\"));\nconsole.log(hexkey(\"123456789ABCDEF0\"));\nconsole.log(hexkey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  const binary = \"\"\n  for (let i = 0; i < decimal.toString(2).length; i++) {\n    binary += \"0\"\n  }\n  return \"db\" + binary + \"db\"\n}\n\n/*\n  Given a number, it is converted into the binary form and then converted back to the decimal\n  form. The function should return the same number in the decimal form.\n\n  Examples:\n  binaryToDecimal(12)  # returns 12\n  binaryToDecimal(1)   # returns 1\n  binaryToDecimal(3)   # returns 3\n  binaryToDecimal(0)   # returns 0\n  binaryToDecimal(7)   # returns 7\n  binaryToDecimal(8)   # returns 8\n  binaryToDecimal(9)   # returns 9\n  binaryToDecimal(10)  # returns 10\n  binaryToDecimal(11)  # returns 11\n  binaryToDecimal(15)  # returns 15\n  binaryToDecimal(32)  # returns 32\n  binaryToDecimal(33)  # returns 33\n  binaryToDecimal(34)  # returns 34\n  binaryToDecimal(35)  # returns 35\n  binaryToDecimal(36)  # returns 36\n  binaryToDecimal(37)  # returns 37\n  binaryToDecimal(38)  # returns 38\n  binaryToDecimal(39)  # returns 39\n  binaryToDecimal(40)  # returns 40\n  binaryToDecimal(41)  # returns 41\n  binaryToDecimal(42)  # returns 42\n  binaryToDecimal(43)  # returns 43\n  binaryToDecimal(44)  # returns 44\n  binaryToDecimal(45)  # returns 45\n  binaryToDecimal(46)  # returns 46\n  binaryToDecimal(47)  # returns 47\n  binaryToDecimal(48)  # returns 48\n  binaryToDecimal(49)  # returns 49\n  binaryToDecimal(50)  # returns 50\n  binaryToDecimal(51)  # returns 51\n  binaryToDecimal(52)  # returns 52\n  binaryToDecimal(53)  # returns 53\n  binaryToDecimal(54)  # returns 54\n  binaryToDecimal(55)  # returns 55\n  binaryToDecimal(56)  # returns 56\n  binaryToDecimal(57)  # returns 57\n  binaryToDecimal(58)  # returns 58\n  binaryToDecimal(59)  # returns 59\n  binaryToDecimal(60)  # returns 60\n  binaryToDecimal(61)  # returns 61\n  binaryToDecimal(62)  # returns 62\n  binaryToDecimal(63)  # returns 63\n  binaryToDecimal(64)  # returns 64\n  binaryToDecimal(65)  # returns 65\n  binaryToDecimal(66)  # returns 66\n  binaryToDecimal(67)  # returns 67\n  binaryToDecimal(68)  # returns 68\n  binaryToDecimal(69)  # returns 69\n  binaryToDecimal(70)  # returns 70\n  binaryToDecimal(71)  # returns 71\n  binaryToDecimal(72)  # returns 72\n  binaryToDecimal(73)  # returns 73\n  binaryToDecimal(74)  # returns 74\n  binaryToDecimal(75)  # returns 75\n  binaryToDecimal(76)  # returns 76\n  binaryToDecimal(77)  # returns 77\n  binaryToDecimal(78)  # returns 78\n  binaryToDecimal(79)  # returns 79\n  binaryToDecimal(80)  # returns 80\n  binaryToDecimal(81)  # returns 81\n  binaryToDecimal(82)  # returns 82\n  binaryToDecimal(83)  # returns 83\n  binaryToDecimal(84)  # returns 84\n  binaryToDecimal(85)  # returns 85\n  binaryToDecimal(86)  # returns 86\n  binaryToDecimal(87)  # returns 87\n  binaryToDecimal(88)  # returns 88\n  binaryToDecimal(89)  # returns 89\n  binaryToDecimal(90)  # returns 90\n  binaryToDecimal(91)  # returns 91\n  binaryToDecimal(92)  # returns 92\n  binaryToDecimal(93)  # returns 93\n  binaryToDecimal(94)  # returns 94\n  binaryToDecimal(95)  # returns 95\n  binaryToDecimal(96)  # returns 96\n  binaryToDecimal(97)  # returns 97\n  binaryToDecimal(98)  # returns 98\n  binaryToDecimal(99)  # returns 99\n  binaryToDecimal(100) # returns 100\n  binaryToDecimal(101) # returns 101\n  binaryToDecimal(102) # returns 102\n  binaryToDecimal(103) # returns 103\n  binaryToDecimal(104) # returns 104\n  binaryToDecimal(105) # returns 105\n  binaryToDecimal(106) # returns 106\n  binaryToDecimal(107) # returns 107\n  binaryToDecimal(108) # returns 108\n  binaryToDecimal(109) # returns 109\n  binaryToDecimal(110) # returns 110\n  binaryToDecimal(111) # returns 111\n  binaryToDecimal(112) # returns 112\n  binaryToDecimal(113) # returns 113\n  binaryToDecimal(114) # returns 114\n  binaryToDecimal(115) # returns 115\n  binaryToDecimal(116) # returns 116\n  binaryToDecimal(117) # returns 117\n  binaryToDecimal(118) # returns 118\n  binaryToDecimal(119) # returns 119\n  binaryToDecimal(120) # returns 120\n  binaryToDecimal(121) # returns 121\n  binaryTo"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  if (s.length < 3) return false\n  let i = 0\n  let j = 1\n  let prev = s[i]\n  while (j < s.length) {\n    if (s[j] === prev) {\n      if (j - i >= 3) return false\n      i = j + 1\n      prev = s[j]\n    }\n    j += 1\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\n//const numEricAlLetTergrade = (grades) => {\n//  const sorted = grades.sort();\n//  const sum = sorted.reduce((prev, curr) => {\n//    return prev + curr;\n//  }, 0);\n//  const numOfGrades = sorted.length;\n//  let num = 0;\n//  let letter = '';\n//  while (num < numOfGrades) {\n//    num += sorted[num];\n//    letter += sorted[num];\n//  }\n//  return letter;\n//};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num < numOfGrades) {\n    num += sorted[num];\n    letter += sorted[num];\n  }\n  return letter;\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort();\n  const sum = sorted.reduce((prev, curr) => {\n    return prev + curr;\n  }, 0);\n  const numOfGrades = sorted.length;\n  let num = 0;\n  let letter = '';\n  while (num"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  const len = string.length\n  let i = 2\n  while (i <= len) {\n    if (string[i - 1] === string[len - i]) {\n      i++\n      continue\n    }\n    if (i === 2) {\n      return false\n    }\n    if (string[i - 2]!== string[len - i]) {\n      return false\n    }\n    return false\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('hello') == true\n  palindrome('hi') == true\n  palindrome('a') == false\n  palindrome('ab') == true\n  palindrome('abba') == true\n  */\nconst palindrome = (string) => {\n  const len = string.length\n  let i = 0\n  let j = len - 1\n  while (i < len / 2) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns the longest substring that is\n  a palindrome. Return an empty string if no such substring exists.\n  Examples\n  longestPalindrome('a') == 'a'\n  longestPalindrome('abba') == 'ab'\n  longestPalindrome('abcdcba') == 'ab'\n  */\nconst longestPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  let longest = ''\n  while (i < j) {\n    if (palindrome(string.slice(i, j + 1))) {\n      longest = string.slice(i, j + 1)\n      j = j - 1\n    }\n    i++\n  }\n  return longest\n}\n\n/*Write a function that takes a string and returns true if the string contains\n  all unique characters or false otherwise.\n  Examples\n  containsUnique('abc') == true\n  containsUnique('bac') == false\n  containsUnique('aa') == false\n  */\nconst containsUnique = (string) => {\n  const len = string.length\n  let i = 0\n  while (i < len) {\n    if (string[i]!== string[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string contains\n  any vowels or false otherwise.\n  Examples\n  containsVowels('abc') == false\n  containsVowels('abcd') == true\n  */\nconst containsVowels = (string) => {\n  const len = string.length\n  let i = 0\n  while (i < len) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' ||\n      string[i] === 'o' || string[i] === 'u' || string[i] === 'A' ||\n      string[i] === 'E' || string[i] === 'I' || string[i] === 'O' ||\n      string[i] === 'U') {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*Write a function that takes a string and returns true if the string contains\n  all unique vowels or false otherwise.\n  Examples\n  containsVowels('abc') == false\n  containsVowels('bac') == true\n  containsVowels('aa') == false\n  */\nconst containsVowelsUnique = (string) => {\n  const len = string.length\n  let i = 0\n  while (i < len) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' ||\n      string[i] === 'o' || string[i] === 'u' || string[i] === 'A' ||\n      string[i] === 'E' || string[i] === 'I' || string[i] === 'O' ||\n      string[i] === 'U') {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*Write a function that takes a string and returns true if the string is a\n  valid number or false otherwise.\n  Examples\n  validNumber('12') == true\n  validNumber('12a') == false\n  */\nconst validNumber = (string) => {\n  const len = string.length\n  let i = 0\n  while (i < len) {\n    if (string[i] < 48 || string[i] > 57) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string is a\n  valid email or false otherwise.\n  Examples\n  validEmail('a@b.com') == true\n  validEmail('a@b') == false\n  */\nconst validEmail = (string) => {\n  const len = string.length\n  let i = 0\n  while (i < len) {\n    if (string[i] === '@' || string[i] === '.') {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string is a\n  valid password or false otherwise.\n  Examples\n  validPassword('abc') == true\n  validPassword('abcd') == false\n  */\nconst validPassword = (string) => {\n  const len = string.length\n  let i = 0\n  while (i < len) {\n    if (string[i] < 48 || string[i] > 57) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string is a\n  valid username or false otherwise.\n  Examples\n"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let counter = 0;\n  while (true) {\n    let digit = n % 10;\n    n = n / 10;\n    if (digit === 1 && n === 0) {\n      counter += 1;\n    } else if (digit === 1 && n!== 0) {\n      counter += 2;\n    }\n    if (n === 0) {\n      break;\n    }\n  }\n  return counter;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += (N % i).toString(2).length;\n  }\n  return sum;\n}\n\n//TODO:\n//1. 暴力搜索.\n//2. 使用字符串进行排序.\n//3. 程序运行时间有限.\n//4. 原题中, 有很多解法.\n//5. 在题目上, 很多不解决方案.\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    const newArray = lst.slice().reverse();\n    let index = 0;\n    for (let i = 0; i < newArray.length; i++) {\n        if (index % 2 === 1) {\n            newArray[i] = newArray[i] + newArray[index];\n        }\n        index++;\n    }\n    return newArray;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n    const words = s.split(' ');\n    let result = words.map(word => {\n        const charArray = word.split('');\n        let temp = charArray.map(char => char.charCodeAt());\n        const sortArray = temp.sort((a, b) => a - b);\n        const result = sortArray.join('');\n        return result;\n    });\n    return result.join(' ');\n}\n\nconsole.log(antIShuFfle('Hi'));\nconsole.log(antIShuFfle('hello'));\nconsole.log(antIShuFfle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const result = []\n  const sorted = lst.slice().sort((a, b) => {\n    if (a[0] == x) {\n      return 1\n    } else if (b[0] == x) {\n      return -1\n    } else {\n      return a[0] - b[0]\n    }\n  })\n  for (let i = 0; i < sorted.length; i++) {\n    const row = sorted[i][0]\n    const col = sorted[i][1]\n    const row_col_tuple = [row, col]\n    result.push(row_col_tuple)\n  }\n  return result\n}\n\n// const getrow = (lst, x) => {\n//   const result = []\n//   const sorted = lst.slice().sort((a, b) => {\n//     if (a[0] == x) {\n//       return 1\n//     } else if (b[0] == x) {\n//       return -1\n//     } else {\n//       return a[0] - b[0]\n//     }\n//   })\n//   for (let i = 0; i < sorted.length; i++) {\n//     const row = sorted[i][0]\n//     const col = sorted[i][1]\n//     const row_col_tuple = [row, col]\n//     result.push(row_col_tuple)\n//   }\n//   return result\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  if (array.length === 0) return array\n\n  let start = 0\n  let end = array.length - 1\n  let sum = array[start] + array[end]\n  if (sum % 2 === 1) {\n    array.sort((a, b) => {\n      return a - b\n    })\n  } else {\n    array.sort((a, b) => {\n      return b - a\n    })\n  }\n  return array\n}\n\nexport default sorTArrAy\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  const ROT = 3\n  const a = 'abcdefghijklmnopqrstuvwxyz'\n  let i = 0\n  let j = 0\n  let l = 0\n  let r = 0\n  let ret = ''\n  let x = ''\n  let m = ''\n  while (i < s.length) {\n    x = s[i]\n    l = x.length\n    while (j < l) {\n      r = j + ROT\n      if (r >= l) r = 0\n      m = x[j] + x[r]\n      ret += a[m - 97]\n      j += 1\n    }\n    i += 1\n  }\n  return ret\n}\n\nconsole.log(encRypt('hi'))\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  const min = lst.find(x => x < lst[1]);\n  return (min === null)? null : min;\n};\n\n/*\n  Write a function that returns a random number between 0 and 100.\n  Return null if the random number is outside the range.\n  \n  getRand() == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n  getRand(0, 100) == null\n"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  if (S.length === 0) {\n    return 0\n  }\n\n  let curr = 0\n  let i = 0\n  const len = S.length\n  const start = S.substr(0, 1)\n  const next = S.substr(i + 1, 1)\n\n  while (i < len) {\n    if (start === \"I\" && (next === \".\" || next === \"?\" || next === \"!\")) {\n      curr++\n      i++\n    } else {\n      i++\n    }\n  }\n\n  return curr\n}\n\n// test\n\nconsole.log(isBOred(\"Hello world\"))\nconsole.log(isBOred(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBOred(\"The sky is blue. The sun is shining. I love this weather. The sun is shining. The sky is blue.\"))\nconsole.log(isBOred(\"The sky is blue. The sun is shining. I love this weather. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue. The sun is shining. The sky is blue."}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  if (typeof x!== 'number') {\n    return false;\n  }\n  if (typeof y!== 'number') {\n    return false;\n  }\n  if (typeof z!== 'number') {\n    return false;\n  }\n  return x + y === z || x === y + z || x === z + y;\n};\n\n/*\n  Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the sum of the other one, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  even(5, 3) ➞ true\n  even(3, 5) ➞ false\n  */\nconst even = (x, y) => {\n  if (typeof x!== 'number') {\n    return false;\n  }\n  if (typeof y!== 'number') {\n    return false;\n  }\n  return x + y === x * 2 || x === y * 2;\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are positive integers.\n  Returns false in any other cases.\n  Examples\n  positive(5, 2, 7) ➞ true\n  positive(3, 2, 2) ➞ false\n  positive(3, -2, 1) ➞ true\n  positive(3.6, -2.2, 2) ➞ false\n  */\nconst positive = (x, y, z) => {\n  if (typeof x!== 'number') {\n    return false;\n  }\n  if (typeof y!== 'number') {\n    return false;\n  }\n  if (typeof z!== 'number') {\n    return false;\n  }\n  return x + y === z || x === y + z || x === z + y && x > 0;\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between 0 and 100.\n  Returns false in any other cases.\n  Examples\n  between(0, 0, 100) ➞ true\n  between(0, -1, 0) ➞ false\n  between(0, 0, 101) ➞ false\n  between(101, 100, -1) ➞ false\n  */\nconst between = (x, y, z) => {\n  if (typeof x!== 'number') {\n    return false;\n  }\n  if (typeof y!== 'number') {\n    return false;\n  }\n  if (typeof z!== 'number') {\n    return false;\n  }\n  return x + y === z || x === y + z || x === z + y && x >= 0 && x <= 100;\n};\n\nconst test = {\n  'anyint': anyint,\n  'even': even,\n  'positive': positive,\n  'between': between\n};\n\nconsole.log(test.anyint(5, 2, 7));\nconsole.log(test.even(5, 3));\nconsole.log(test.positive(3, 2, 2));\nconsole.log(test.between(0, 0, 100));\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let i = 0;\n  let out = [];\n  for (let x of message) {\n    out.push(x.toUpperCase());\n  }\n  return out.join('');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n    const prime = () => {\n        const prime = [];\n        for (let i = 2; i < 100; i++) {\n            if (prime.indexOf(i) === -1) {\n                prime.push(i);\n                for (let j = 2; i * j < 100; j++) {\n                    if (prime.indexOf(i * j) === -1) {\n                        prime.push(i * j);\n                    }\n                }\n            }\n        }\n        return prime;\n    };\n\n    const getDigits = (num) => {\n        const digits = [];\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = num / 10;\n        }\n        return sum;\n    };\n\n    const largestPrime = (lst) => {\n        const prime = prime();\n        const maxPrime = prime[0];\n        for (let i = 0; i < lst.length; i++) {\n            if (prime.indexOf(lst[i]) === -1) {\n                break;\n            }\n            maxPrime = Math.max(maxPrime, lst[i]);\n        }\n        return maxPrime;\n    };\n\n    const sumDigits = (lst) => {\n        const prime = largestPrime(lst);\n        const sum = 0;\n        for (let i = 0; i < lst.length; i++) {\n            sum += getDigits(lst[i]) % prime;\n        }\n        return sum;\n    };\n\n    return sumDigits(lst);\n};\n\nconsole.log(skjKasdKd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjKasdKd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjKasdKd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjKasdKd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjKasdKd([0, 81, 12, 3, 1, 21]));\nconsole.log(skjKasdKd([0, 8, 1, 2, 1, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let isValid = true;\n  if (!dict) {\n    isValid = false;\n  } else if (Object.keys(dict).length === 0) {\n    isValid = false;\n  } else {\n    for (let key in dict) {\n      if (key.toUpperCase()!== key.toLowerCase()) {\n        isValid = false;\n        break;\n      }\n    }\n  }\n  return isValid;\n};\n\n//\n// Function: cheCkForDictE\n//\n// Description: \n// Given a dictionary, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given dictionary is empty.\n// Examples:\n// cheCkForDictE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n// cheCkForDictE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n// cheCkForDictE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n// cheCkForDictE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n// cheCkForDictE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n//\nconst cheCkForDictE = (dict) => {\n  let isValid = true;\n  if (!dict) {\n    isValid = false;\n  } else if (Object.keys(dict).length === 0) {\n    isValid = false;\n  } else {\n    for (let key in dict) {\n      if (key.toUpperCase()!== key.toLowerCase()) {\n        isValid = false;\n        break;\n      }\n    }\n  }\n  return isValid;\n};\n\n//\n// Function: isValidDict\n//\n// Description: \n// Given a dictionary, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given dictionary is empty.\n// Examples:\n// isValidDict({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n// isValidDict({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n// isValidDict({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n// isValidDict({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n// isValidDict({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n//\nconst isValidDict = (dict) => {\n  let isValid = true;\n  if (!dict) {\n    isValid = false;\n  } else if (Object.keys(dict).length === 0) {\n    isValid = false;\n  } else {\n    for (let key in dict) {\n      if (key.toUpperCase()!== key.toLowerCase()) {\n        isValid = false;\n        break;\n      }\n    }\n  }\n  return isValid;\n};\n\n//\n// Function: isValidArray\n//\n// Description: \n// Given an array, return true if all elements are numbers or all elements\n// are strings in lower case or all elements are strings in upper case, \n// else return false.\n// The function should return false is the given array is empty.\n// Examples:\n// isValidArray([\"1\", \"2\", \"3\"]) should return true.\n// isValidArray([\"1\", \"2\", \"a\"]) should return false.\n// isValidArray([\"1\", \"2\", \"3\", \"A\"]) should return false.\n// isValidArray([\"Name\", \"Age\", \"City\"]) should return true.\n// isValidArray([\"STATE\", \"ZIP\"]) should return true.\n//\nconst isValidArray = (array) => {\n  let isValid = true;\n  if (!array) {\n    isValid = false;\n  } else if (Object.keys(array).length === 0) {\n    isValid = false;\n  } else {\n    for (let i = 0; i < array.length; i++) {\n      if (isNaN(parseInt(array[i], 10)) || array[i].toUpperCase()!== array[i].toLowerCase()) {\n        isValid = false;\n        break;\n      }\n    }\n  }\n  return isValid;\n};\n\n//\n// Function: cheCkArrayE\n//\n// Description: \n// Given an array, return true if all elements are numbers or all elements\n// are strings in lower case or all elements are strings in upper case, \n// else return false.\n// The function should return false is the given array is empty.\n// Examples:\n// cheCkArrayE([\"1\", \"2\", \"3\"]) should return true.\n// cheCkArrayE([\"1\", \"2\", \"a\"]) should return false.\n// cheCkArrayE([\"1\", \"2\", \"3\", \"A\"]) should return false.\n// cheCkArrayE([\"Name\", \"Age\", \"City\"]) should return true.\n// cheCkArrayE([\"STATE\", \"ZIP\"]) should return true.\n//\nconst cheCkArrayE = (array) => {\n  let isValid = true;\n  if (!array) {\n    isValid = false;\n  }"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let prime = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  return prime\n}\n\nfunction isPrime(n) {\n  let divisor = 2\n  while (divisor < n) {\n    if (n % divisor === 0) {\n      return false\n    }\n    divisor++\n  }\n  return true\n}\n\nconsole.log(couNtUpto(10))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  const result = a * b;\n  let i = 0;\n  const multiply = (a, b) => {\n    return (a * b) % 10;\n  };\n  while (i < result) {\n    const sum = a + b;\n    const [a2, b2] = [a, b];\n    a = multiply(a2, a2);\n    b = multiply(b2, b2);\n    i++;\n  }\n  return a;\n};\n\nmulTiplY(20, 1851);\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\nconst numberOfUppercaseLetters = (s) => {\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\nconst countRepeatingLetters = (s) => {\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\nconst repeatedLetters = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst countVowelsInString = (s) => {\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\nconst countRepeatingLettersInString = (s) => {\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\nconst repeatedLettersInString = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithVowel = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithRepeatingLetter = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithRepeatingLetters = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithRepeatingLettersInString = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithUppercaseLetters = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithRepeatingLettersInString = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithVowelsInString = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithRepeatingLettersInString = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithRepeatingLettersInStringWithVowels = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index].toUpperCase() === s[index]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithRepeatingLettersInStringWithVowelsInString = (s) => {\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === s[index + 1]) {\n      return s[index];\n    }\n    index++;\n  }\n  return null;\n};\n\nconst stringWithRepeatingLetters"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n    let val = parseFloat(value);\n    let int = Math.round(val);\n    let decimal = val - int;\n    if (decimal == 0) {\n        return int;\n    }\n    let intLeft = Math.round(val - 0.1);\n    let intRight = Math.round(val + 0.1);\n    if (decimal > 0) {\n        return intRight;\n    }\n    return intLeft;\n}\n\n/*\n  Take an array of strings and return an array of strings where each\n  string is a comma-separated list of values.\n  Examples\n  >>> commaSeparated([1,2,3,4])\n  ['1,2,3,4']\n  >>> commaSeparated([1,2,3,4,5])\n  ['1,2,3,4,5']\n  >>> commaSeparated([1,2,3,4,5,6,7])\n  ['1,2,3,4,5,6,7']\n  >>> commaSeparated([1,2,3,4,5,6,7,8,9,10])\n  ['1,2,3,4,5,6,7,8,9,10']\n  >>> commaSeparated([1,2,3,4,5,6,7,8,9,10,11,12])\n  ['1,2,3,4,5,6,7,8,9,10,11,12']\n  >>> commaSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n  ['1,2,3,4,5,6,7,8,9,10,11,12,13,14,15']\n  >>> commaSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n  ['1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16']\n  >>> commaSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n  ['1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17']\n  >>> commaSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n  ['1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18']\n  >>> commaSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n  ['1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19']\n  >>> commaSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n  ['1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20']\n  */\nconst commaSeparated = (array) => {\n    let comma = ', ';\n    let arrayLength = array.length;\n    let output = '';\n    for (let i = 0; i < arrayLength; i++) {\n        output += array[i] + comma;\n    }\n    output = output.slice(0, output.length - comma.length);\n    return output;\n}\n\n/*\n  Take an array of strings and return an array of strings where each\n  string is a space-separated list of values.\n  Examples\n  >>> spaceSeparated([1,2,3,4])\n  ['1 2 3 4']\n  >>> spaceSeparated([1,2,3,4,5])\n  ['1 2 3 4 5']\n  >>> spaceSeparated([1,2,3,4,5,6,7])\n  ['1 2 3 4 5 6 7']\n  >>> spaceSeparated([1,2,3,4,5,6,7,8,9,10])\n  ['1 2 3 4 5 6 7 8 9 10']\n  >>> spaceSeparated([1,2,3,4,5,6,7,8,9,10,11,12])\n  ['1 2 3 4 5 6 7 8 9 10 11 12']\n  >>> spaceSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n  ['1 2 3 4 5 6 7 8 9 10 11 12 13 14 15']\n  >>> spaceSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n  ['1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16']\n  >>> spaceSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n  ['1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17']\n  >>> spaceSeparated([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n  "}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  const a = [n];\n  for (let i = 2; i < n; i++) {\n    const odd = i % 2;\n    if (odd) {\n      a.push(Math.floor(n / 2));\n    } else {\n      a.push(Math.floor(n / 2));\n      a.push(Math.floor(n / 2));\n    }\n  }\n  return a;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  // Split the string into words\n  const words = s.split(/(\\s|,)/g);\n\n  // Filter out empty words\n  words = words.filter((w) => w.length > 0);\n\n  return words;\n};\n\nexport {\n  worDsStRing\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  return (x + y + 1) / 2;\n};\n\n// Test\nconsole.log(choOseNUm(12, 15));\nconsole.log(choOseNUm(13, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  const n = parseInt(n, 10)\n  const m = parseInt(m, 10)\n  const sum = (n - 1) + (m - 1)\n  const avg = sum / 2\n  return Math.floor(avg)\n}\n\nmodule.exports = rouNdedavg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  return x.filter(e => e % 2 === 0).sort();\n};\n\n/*\n  Given a list of positive integers x. return a list of all the elements \n  that has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  [10, 1422]\n  */\nconst uniQueEvenDigits = (x) => {\n  return x.filter(e => e % 2 === 0).sort();\n};\n\n/*\n  Given a list of positive integers x. return a list of all the elements \n  that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  [10, 1422]\n  */\nconst uniQueOddDigits = (x) => {\n  return x.filter(e => e % 2 === 1).sort();\n};\n\n/*\n  Given a list of positive integers x. return a list of all the elements \n  that has odd digit in a string form.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  [10, 1422]\n  */\nconst uniQueOddDigitsStr = (x) => {\n  return x.filter(e => e % 2 === 1).sort().join('');\n};\n\n/*\n  Given a list of positive integers x. return a list of all the elements \n  that has odd digit in a string form.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  [10, 1422]\n  */\nconst uniQueOddDigitsStrSorted = (x) => {\n  return x.filter(e => e % 2 === 1).sort().join('');\n};\n\n/*\n  Given a list of positive integers x. return a list of all the elements \n  that has odd digit in a string form.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  [10, 1422]\n  */\nconst uniQueOddDigitsStrSorted = (x) => {\n  return x.filter(e => e % 2 === 1).sort().join('');\n};\n\n/*\n  Given a list of positive integers x. return a list of all the elements \n  that has odd digit in a string form.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  [10, 1422]\n  */\nconst uniQueOddDigitsStrSorted = (x) => {\n  return x.filter(e => e % 2 === 1).sort().join('');\n};\n\nmodule.exports = {\n  uniQueEvenDigits,\n  uniQueOddDigits,\n  uniQueOddDigitsStr,\n  uniQueOddDigitsStrSorted,\n  uniQueOddDigitsStrSorted\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  return arr.filter(x => x > 0 && x <= 9)\n   .sort((a, b) => a - b)\n   .reverse()\n   .map(x => Number(x).toLocaleString())\n};\n\nconst byLength = (arr) => {\n    return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byName = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  return names.map(name => arr.filter(x => x === name)[0]);\n};\n\nconst bySort = (arr) => {\n  let result = [];\n  let temp;\n  let temp2;\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] < arr[j]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\nconst byReverse = (arr) => {\n  let result = [];\n  let temp;\n  let temp2;\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n};\n\nconst byArray = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byArrayReverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byArrayLen = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayReverseLen = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLenReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayReverseLenReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLength = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconst byArrayLengthReverseReverseReverseReverseReverse = (arr) => {\n  return arr."}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return range(1, n + 1).reduce((result, value) => {\n    if (value % 2 === 0) {\n      result.push(factorial(value));\n    } else {\n      result.push(sum(1, value));\n    }\n    return result;\n  }, []);\n};\n\n/* Return the factorial of a number */\nconst factorial = (n) => {\n  return n === 1? 1 : n * factorial(n - 1);\n};\n\nconst sum = (start, end) => {\n  return (start + end) / 2;\n};\n\nmodule.exports = f;\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  let cntEven = 0\n  let cntOdd = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        cntEven++\n      } else {\n        cntOdd++\n      }\n      num = num / 2\n    }\n  }\n  return [cntEven, cntOdd]\n}\n\nconst evenOdd = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      count++\n    }\n  }\n  return count\n}\n\nconst isPalin = (num) => {\n  let sum = 0\n  for (let i = 0; i < num.length / 2; i++) {\n    if (num.charAt(i)!== num.charAt(num.length - 1 - i)) {\n      return false\n    }\n  }\n  return true\n}\n\nconst testCase = (n) => {\n  let [even, odd] = eveNOddpalinDroMe(n)\n  return (\n    (even === odd) ||\n    (isPalin(even) && isPalin(odd))\n  )\n}\n\nexport { testCase, eveNOddpalinDroMe }\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = 0\n    if (arr[i] < 0) {\n      sign = -1\n    }\n    result += sign * (Math.floor(Math.abs(arr[i]) / 10))\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  if (arr.length === 0) return true\n  if (arr.length === 1) return true\n  let len = arr.length\n  let i = len - 1\n  let j = i\n  let index = arr[i]\n  while (j > 0) {\n    let x = arr[j - 1]\n    if (index > x) {\n      j--\n      if (j!== i) {\n        arr[j] = x\n      } else {\n        arr.pop()\n      }\n    } else if (index < x) {\n      i--\n      if (j!== i) {\n        arr[i] = x\n      } else {\n        arr.pop()\n      }\n    } else {\n      return true\n    }\n  }\n  return false\n}\n\n// michal's solution\nconst movEOneball = (arr) => {\n  if (arr.length === 0) return true\n  if (arr.length === 1) return true\n  let len = arr.length\n  let i = len - 1\n  let j = i\n  let index = arr[i]\n  while (j > 0) {\n    let x = arr[j - 1]\n    if (index > x) {\n      j--\n      if (j!== i) {\n        arr[j] = x\n      } else {\n        arr.pop()\n      }\n    } else if (index < x) {\n      i--\n      if (j!== i) {\n        arr[i] = x\n      } else {\n        arr.pop()\n      }\n    } else {\n      return true\n    }\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n    let lst1Even = [];\n    let lst2Even = [];\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) lst1Even.push(lst1[i]);\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 === 0) lst2Even.push(lst2[i]);\n    }\n    let result = false;\n    if (lst1Even.length === lst2Even.length) {\n        if (lst1Even.length === lst1.length) {\n            if (lst1Even.every((e, i) => e === lst2Even[i])) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\nexports.excHangE = excHangE;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let count = 0;\n  let letter = {};\n  let dictionary = {};\n  let word = test.split(' ');\n  for(let i = 0; i < word.length; i++){\n    if(letter[word[i]] === undefined){\n      count++;\n      dictionary[word[i]] = count;\n      letter[word[i]] = count;\n    }\n    else{\n      dictionary[word[i]] = letter[word[i]];\n    }\n  }\n  return dictionary;\n}\n\nexport default hisTogrAm;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let ct = 0;\n  let r = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    let c = s.charAt(i);\n    if (c === ct) {\n      ct++;\n    } else {\n      ct = 1;\n      r += c;\n    }\n  }\n  let s1 = r + s.substring(0, ct);\n  if (s1 === s) {\n    return (s1, false);\n  }\n  return (s1, true);\n};\n\n/*\n  Given two strings, s and t, write a function to determine if t is an anagram of s.\n  Two strings are called anagram if they are the same when read the same backward as forward.\n  You should return true if t is an anagram of s and false otherwise.\n  Example\n  For s = \"anagram\", t = \"nagaram\", the result should be true\n  For s = \"rat\", t = \"car\", the result should be false\n  */\nconst isAnagram = (s, t) => {\n  let ct = 0;\n  for (let i = 0; i < t.length; i++) {\n    let c = t.charAt(i);\n    if (s.indexOf(c)!== -1) {\n      ct++;\n    }\n  }\n  if (ct === s.length) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = {\n  revErsedeletE,\n  isAnagram\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let oddcoun = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2) {\n        odd++;\n      }\n    }\n    oddcoun.push(odd + 'n the str' + (i + 1) +'of the'+ (i + 1) + 'put.');\n  }\n  return oddcoun;\n}\n\n/*\nGiven a string, return the string with the letters switched to the opposite\ncase.\n\n  >>> reverseCase('')\n ''\n  >>> reverseCase('abc')\n  'cba'\n  >>> reverseCase('ABC')\n  'CBA'\n  >>> reverseCase('abC')\n  'CbA'\n  >>> reverseCase('ABCD')\n  'DACB'\n  >>> reverseCase('abCd')\n  'DcAb'\n  >>> reverseCase('ABCDEF')\n  'FEDCBA'\n  >>> reverseCase('abCdef')\n  'FcDeAb'\n  >>> reverseCase('ABCDEFGHI')\n  'HIGCBAFED'\n  >>> reverseCase('abCdefghi')\n  'HifDcAb'\n  >>> reverseCase('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  'ZYXWVUDPQRNKLMICBJFGHADEW'\n*/\nconst reverseCase = (str) => {\n  let res = '';\n  for (let i = 0; i < str.length; i++) {\n    res += String.fromCharCode(str.charCodeAt(i) >= 97? str.charCodeAt(i) - 32 : str.charCodeAt(i) + 32);\n  }\n  return res;\n}\n\n/*\nGiven a list of strings, return a list. Each element i of the output should\nbe the list of all the words in the i'th string of the input that can be\nformed from the letters in the i'th string of the input. The word should\ncontain at least one letter from each string of the input.\n\n  >>> multiWords(['abc','cde'])\n  ['abc','cde','cde','cde']\n  >>> multiWords(['a','b','c'])\n  ['a','b','c','b','c','a','b','c']\n  >>> multiWords(['a','b','c','d'])\n  ['a','b','c','d','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','b','c','d','a','b','c','d','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c','d','c','d','a','b','c','d','b','c','d','a','b','c"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let prevSum = 0\n  let sum = 0\n  let minSum = Number.POSITIVE_INFINITY\n  let index = -1\n  let i = 0\n\n  while (i < nums.length) {\n    sum = 0\n    if (nums[i] > 0) {\n      sum += nums[i]\n      index = i\n      i += 1\n    } else {\n      sum = prevSum\n      minSum = Math.min(minSum, sum)\n    }\n\n    prevSum = sum\n  }\n\n  return minSum\n}\n\nexport default minsubARraySUm\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  let num = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      let num_water = row[j];\n      if (num_water > 0) {\n        num += num_water;\n        while (num >= capacity) {\n          num -= capacity;\n          num_water--;\n        }\n        row[j] = num_water;\n      }\n    }\n  }\n  return num;\n}\n\nconst test_cases = [\n  [\n    [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n    1\n  ],\n  [\n    [[0, 0, 0], [0, 0, 0]],\n    0\n  ],\n  [\n    [[0, 0, 0], [1, 1, 1], [1, 1, 1]],\n    2\n  ],\n  [\n    [[0, 0, 0], [0, 1, 1], [1, 1, 1]],\n    1\n  ],\n  [\n    [[1, 1, 1], [0, 1, 1], [0, 1, 1]],\n    2\n  ],\n  [\n    [[0, 1, 1], [0, 0, 1], [1, 1, 1]],\n    2\n  ],\n  [\n    [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1], [1, 1, 0, 0]],\n    2\n  ],\n  [\n    [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 0, 0]],\n    1\n  ]\n];\n\nconst test_cases_fill = [\n  [\n    [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n    [1, 0, 0, 0]\n  ],\n  [\n    [[0, 0, 0], [0, 0, 0]],\n    [0, 0, 0, 0]\n  ],\n  [\n    [[0, 0, 0], [0, 1, 1], [1, 1, 1]],\n    [0, 0, 1]\n  ],\n  [\n    [[0, 0, 0], [0, 0, 0]],\n    [0, 0, 0, 0]\n  ],\n  [\n    [[0, 0, 0], [1, 1, 1], [1, 1, 1]],\n    [0, 0, 1]\n  ],\n  [\n    [[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 1]],\n    [0, 0, 0, 0]\n  ]\n];\n\ntest_cases.forEach(function(row) {\n  console.log('Row:', row);\n  const result = row.slice(0, 1).map(row => {\n    return row.slice(0, 1).map(row => {\n      return row.slice(0, 1).map(row => {\n        return row.slice(0, 1).map(row => {\n          return row.slice(0, 1).map(row => {\n            return row.slice(0, 1).map(row => {\n              return row.slice(0, 1).map(row => {\n                return row.slice(0, 1).map(row => {\n                  return row.slice(0, 1).map(row => {\n                    return row.slice(0, 1).map(row => {\n                      return row.slice(0, 1).map(row => {\n                        return row.slice(0, 1).map(row => {\n                          return row.slice(0, 1).map(row => {\n                            return row.slice(0, 1).map(row => {\n                              return row.slice(0, 1).map(row => {\n                                return row.slice(0, 1).map(row => {\n                                  return row.slice(0, 1).map(row => {\n                                    return row.slice(0, 1).map(row => {\n                                      return row.slice(0, 1).map(row => {\n                                        return row.slice(0, 1).map(row => {\n                                          return row.slice(0, 1).map(row => {\n                                            return row.slice(0, 1).map(row => {\n                                              return row.slice(0, 1).map(row => {\n                                                return row.slice(0, 1).map(row => {\n                                                  return row.slice(0, 1).map(row => {\n                                                    return row.slice(0, 1).map(row => {\n                                                      return row.slice(0, 1).map(row => {\n                                                        return row.slice(0, 1).map(row => {\n"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const len = arr.length\n  let lastIndex = -1\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === 1) {\n      lastIndex = i\n      break\n    }\n  }\n  if (lastIndex === -1) return arr\n  let arrNew = arr.slice()\n  arrNew.sort((a, b) => {\n    if (a === 1 && b === 1) {\n      return 0\n    } else if (a === 1) {\n      return -1\n    } else if (b === 1) {\n      return 1\n    } else {\n      return a - b\n    }\n  })\n  return arrNew\n}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let result = [],\n      isNotEmpty = s.length > 0,\n      currentNum = 0,\n      curr = 0,\n      isConsonant = /[bcdfghjklmnpqrstvwxyz]/;\n  while (isNotEmpty) {\n    curr = s.charAt(curr);\n    if (isConsonant.test(curr)) {\n      currentNum++;\n    }\n    if (currentNum === n) {\n      result.push(s.slice(0, curr));\n      s = s.slice(curr + 1);\n      currentNum = 0;\n    }\n    curr++;\n  }\n  return result;\n};\n\nconst selEctWOrdsTest = () => {\n  selEctWOrds(\"Mary had a little lamb\", 4);\n  selEctWOrds(\"Mary had a little lamb\", 3);\n  selEctWOrds(\"simple white space\", 2);\n  selEctWOrds(\"Hello world\", 4);\n  selEctWOrds(\"Uncle sam\", 3);\n};\n\nselEctWOrdsTest();\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  const wordLetters = word.toUpperCase().split(\"\");\n  const vowelLetters = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  const lastConsonantIndex = wordLetters.length - 1;\n  let prevIndex = 0;\n  let prevVowelIndex = -1;\n  const closestVowel = \"\";\n  \n  for (let index = lastConsonantIndex; index > 0; index--) {\n    if (vowelLetters.includes(wordLetters[index])) {\n      prevVowelIndex = index;\n      closestVowel = wordLetters[index];\n      break;\n    }\n  }\n  \n  if (prevVowelIndex < lastConsonantIndex) {\n    return closestVowel;\n  } else {\n    return \"\";\n  }\n}\n\nmodule.exports = getclosEstVoWel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const hasOpen = lst.some((item) => item === '(');\n  const hasClose = lst.some((item) => item === ')');\n\n  return hasOpen && hasClose? 'Yes' : 'No';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const result = []\n\n  for (let i = 0; i < k; i++) {\n    const max = Math.max(arr[i], arr[i + 1])\n    result.push(max)\n  }\n\n  return result\n}\n\nexport default maxImum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 1) {\n    if (i % 2) sum += lst[i];\n  }\n  return sum;\n}\n\nconsole.log(solUtioN([5, 8, 7, 1]));\nconsole.log(solUtioN([3, 3, 3, 3, 3]));\nconsole.log(solUtioN([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const n = arr.length\n  const maxelem = arr[0]\n  const minelem = arr[n-1]\n  const result = []\n  const diff = maxelem - minelem\n  for(let i=0; i<k; i++) {\n    result.push(arr[i])\n  }\n  let sum = 0\n  for(let i=k; i<n; i++) {\n    sum += arr[i]\n    if(sum > maxelem) {\n      sum -= maxelem\n      break\n    }\n    if(sum < minelem) {\n      sum += minelem\n      break\n    }\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const n = arr.length\n  const maxelem = arr[0]\n  const minelem = arr[n-1]\n  const result = []\n  const diff = maxelem - minelem\n  for(let i=0; i<k; i++) {\n    result.push(arr[i])\n  }\n  let sum = 0\n  for(let i=k; i<n; i++) {\n    sum += arr[i]\n    if(sum > maxelem) {\n      sum -= maxelem\n      break\n    }\n    if(sum < minelem) {\n      sum += minelem\n      break\n    }\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const n = arr.length\n  const maxelem = arr[0]\n  const minelem = arr[n-1]\n  const result = []\n  const diff = maxelem - minelem\n  for(let i=0; i<k; i++) {\n    result.push(arr[i])\n  }\n  let sum = 0\n  for(let i=k; i<n; i++) {\n    sum += arr[i]\n    if(sum > maxelem) {\n      sum -= maxelem\n      break\n    }\n    if(sum < minelem) {\n      sum += minelem\n      break\n    }\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n    let list = [];\n    let num = n;\n    while(num!== 1){\n        if(num % 2 === 0){\n            num = num / 2;\n        }else{\n            num = 3 * num + 1;\n        }\n        list.push(num);\n    }\n    list.sort();\n    return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  if (!date || typeof date!=='string') {\n    return false;\n  }\n  const splittedDate = date.split('-');\n  const days = splittedDate[2].split('/');\n  const months = splittedDate[0].split('/');\n  const daysToTest = (numberOfDays) => {\n    return (numberOfDays >= 1 && numberOfDays <= 30) || (numberOfDays >= 31 && numberOfDays <= 31) || (numberOfDays >= 32 && numberOfDays <= 30) || (numberOfDays >= 33 && numberOfDays <= 31);\n  };\n  const monthsToTest = (numberOfMonths) => {\n    return numberOfMonths >= 1 && numberOfMonths <= 12;\n  };\n  return daysToTest(splittedDate[2]) && monthsToTest(splittedDate[0]) && daysToTest(splittedDate[1]) && monthsToTest(splittedDate[0]);\n};\n\nexport default valIdDaTe;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const chars = txt.split('')\n  const n = chars.length\n  let i = 0\n  let words = []\n  while (i < n) {\n    if (chars[i] =='') {\n      words.push(chars.slice(i + 1).join(''))\n      i = 0\n    } else {\n      i++\n    }\n  }\n  if (i == 0) {\n    words.push(chars.join(''))\n  }\n  return words\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of occurrences of the character in the string.\n  Examples\n  occur(\"abcde\", \"c\") = 2\n  occur(\"abcde\", \"f\") = 0\n  */\nconst occur = (txt, c) => {\n  const chars = txt.split('')\n  let count = 0\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === c) {\n      count++\n    }\n  }\n  return count\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of upper-case letters in the string.\n  Examples\n  countLetters(\"abc\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countLetters = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[A-Z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of lower-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countLowerLetters = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[a-z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of upper-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countUpperLetters = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[A-Z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of upper-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countLettersCaseSensitive = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[A-Z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of lower-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countLowerLettersCaseSensitive = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[a-z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of lower-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countUpperLettersCaseSensitive = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[A-Z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of upper-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countLettersCaseInsensitive = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[A-Z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of lower-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countLowerLettersCaseInsensitive = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[a-z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of upper-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countUpperLettersCaseInsensitive = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[A-Z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of lower-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countLettersCaseSensitiveCaseInsensitive = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[A-Z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of lower-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countLowerLettersCaseSensitiveCaseInsensitive = (txt) => {\n  return txt.split('').filter(letter => letter.match(/[a-z]/i)).length\n}\n\n// ---------------------------------------------------------------------------\n/* Given a string, return the number of upper-case letters in the string.\n  Examples\n  countLetters(\"ABC\") = 3\n  countLetters(\"abcdef\") = 3\n  */\nconst countUpperLettersCaseSensitiveCaseInsensitive = (txt) => {\n  return txt.split('').filter("}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const len = lst.length;\n  if (len < 2) return true;\n  const sorted = lst.slice(0, len-1).every(n => n > lst[len-1]);\n  return sorted;\n};\n\nconsole.log(isSOrteD([5]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5]));\nconsole.log(isSOrteD([1, 3, 2, 4, 5]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 7]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 7, 7]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 7, 7, 7]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7]));\nconsole.log(isSOrteD([1, 2, 2, 3, 3, 4]));\nconsole.log(isSOrteD([1, 2, 2, 2, 3, 4]));\nconsole.log(isSOrteD([1, 2, 2, 2, 2, 3, 3, 4]));\nconsole.log(isSOrteD([1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4]));\nconsole.log(isSOrteD([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  if (!interval1 ||!interval2) {\n    return false;\n  }\n  const intErseCtion = (start, end) => {\n    if (start < 0 || start > end) {\n      return false;\n    }\n    if (start === end) {\n      return true;\n    }\n    if (start === end - 1) {\n      return true;\n    }\n    const len = Math.floor(end - start) + 1;\n    const primes = [];\n    for (let i = 1; i < len; i++) {\n      primes.push(len - i);\n    }\n    return _.some(primes, (num) => num === 1? false : _.every(primes, (num) => num % num === 0));\n  };\n  const intersect = (start, end) => {\n    return interval1.start <= interval2.end && interval1.end >= interval2.start;\n  };\n  if (intersect(interval1.start, interval1.end) || intersect(interval2.start, interval2.end)) {\n    return false;\n  }\n  return intErseCtion(interval1.start, interval1.end) && intErseCtion(interval2.start, interval2.end);\n};\n\nconst test = {\n  \"1\": false,\n  \"2\": false,\n  \"3\": true,\n  \"4\": false,\n  \"5\": false,\n  \"6\": false,\n  \"7\": false,\n  \"8\": false,\n  \"9\": false,\n  \"10\": false,\n  \"11\": false,\n  \"12\": false,\n  \"13\": false,\n  \"14\": false,\n  \"15\": false,\n  \"16\": false,\n  \"17\": false,\n  \"18\": false,\n  \"19\": false,\n  \"20\": false,\n  \"21\": false,\n  \"22\": false,\n  \"23\": false,\n  \"24\": false,\n  \"25\": false,\n  \"26\": false,\n  \"27\": false,\n  \"28\": false,\n  \"29\": false,\n  \"30\": false,\n  \"31\": false,\n  \"32\": false,\n  \"33\": false,\n  \"34\": false,\n  \"35\": false,\n  \"36\": false,\n  \"37\": false,\n  \"38\": false,\n  \"39\": false,\n  \"40\": false,\n  \"41\": false,\n  \"42\": false,\n  \"43\": false,\n  \"44\": false,\n  \"45\": false,\n  \"46\": false,\n  \"47\": false,\n  \"48\": false,\n  \"49\": false,\n  \"50\": false,\n  \"51\": false,\n  \"52\": false,\n  \"53\": false,\n  \"54\": false,\n  \"55\": false,\n  \"56\": false,\n  \"57\": false,\n  \"58\": false,\n  \"59\": false,\n  \"60\": false,\n  \"61\": false,\n  \"62\": false,\n  \"63\": false,\n  \"64\": false,\n  \"65\": false,\n  \"66\": false,\n  \"67\": false,\n  \"68\": false,\n  \"69\": false,\n  \"70\": false,\n  \"71\": false,\n  \"72\": false,\n  \"73\": false,\n  \"74\": false,\n  \"75\": false,\n  \"76\": false,\n  \"77\": false,\n  \"78\": false,\n  \"79\": false,\n  \"80\": false,\n  \"81\": false,\n  \"82\": false,\n  \"83\": false,\n  \"84\": false,\n  \"85\": false,\n  \"86\": false,\n  \"87\": false,\n  \"88\": false,\n  \"89\": false,\n  \"90\": false,\n  \"91\": false,\n  \"92\": false,\n  \"93\": false,\n  \"94\": false,\n  \"95\": false,\n  \"96\": false,\n  \"97\": false,\n  \"98\": false,\n  \"99\": false,\n  \"100\": false,\n  \"101\": false,\n  \"102\": false,\n  \"103\": false,\n  \"104\": false,\n  \"105\": false,\n  \"106\": false,\n  \"107\": false,\n  \"108\": false,\n  \"109\": false,\n  \"110\": false,\n  \"111\": false,\n  \"112\": false,\n  \"113\": false,\n  \"114\": false,\n  \"115\": false,\n  \"116\": false,\n  \"117\": false,\n  \"118\": false,\n  \"119\": false,\n  \"120\": false,\n  \"121\": false,\n  \"122\": false,\n  \"123\": false,\n  \"124\": false,\n  \"125\": false,\n  \"126\": false,\n  \"127\": false,\n  \"128\": false,\n  \"129\": false,\n  \"130\": false,\n  \"131\": false,\n  \"132\": false,\n  \"133"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    res += Math.pow(Math.abs(arr[i]), 2);\n    res *= (arr[i] > 0? 1 : -1);\n  }\n  return res;\n}\n\n/*\n  Given an array arr of strings, find the sum of the first\n  letters in the strings.\n  Example:\n  >>> firstLetters(['aaa', 'bcc', 'cdd']) == 6\n  >>> firstLetters(['aaa', 'bbb']) == null\n  */\nconst firstLetters = (arr) => {\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let str = arr[i];\n    for (let j = 0; j < str.length; j++) {\n      res += str[j];\n    }\n  }\n  return res;\n}\n\nmodule.exports = {\n  proDSigNs,\n  firstLetters\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const N = grid.length\n  const lst = new Array(N * N)\n  const visited = new Array(N * N)\n\n  for (let i = 0; i < N * N; ++i) lst[i] = grid[i % N][Math.floor(i / N)]\n\n  for (let i = 0; i < N * N; ++i) visited[i] = false\n\n  let min = null\n  let index = 0\n\n  for (let i = 0; i < N * N; ++i) {\n    if (i > 0 &&!visited[i - 1]) continue\n    if (i < N * N - 1 &&!visited[i + 1]) continue\n    if (i % N!= 0 &&!visited[i - N]) continue\n    if (i % N!= N - 1 &&!visited[i + N]) continue\n    if (k === 1) break\n\n    const idx = find(lst, i)\n    const cell = grid[idx % N][Math.floor(idx / N)]\n\n    if (!min || lst[idx] < lst[min.index]) {\n      min = {\n        index: idx,\n        value: lst[idx],\n      }\n      index = idx\n    }\n  }\n\n  return index\n}\n\n// --------------------------------------------------------------------\n// tests\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]\n\nconsole.log(minpath(grid, 2))\n\ngrid = [\n  [5, 9, 3],\n  [4, 1, 6],\n  [7, 8, 2],\n]\n\nconsole.log(minpath(grid, 1))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const seq = []\n  let a, b, c\n  if(n === 1) return seq\n  a = 1\n  b = 1\n  c = 1\n  while(n > 1) {\n    seq.push(a + b + c)\n    if(n % 2 === 0) {\n      a = a + b\n      c = b\n      b = a + c\n    } else {\n      a = a + b\n      c = b + c\n      b = a + c\n    }\n    n = n - 1\n  }\n  return seq\n}\n\nconst fib = (n) => {\n  if(n === 0) return 0\n  if(n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst isP = (x) => {\n  return (x > 1)\n}\n\nconst isO = (x) => {\n  return (x < 1)\n}\n\nconst triFib = (n) => {\n  const list = tri(n)\n  if(list.length === n + 1) {\n    return list.reduce((acc, item) => acc + item, 0)\n  }\n  return 0\n}\n\nconst solution = (n) => {\n  return triFib(n)\n}\n\nconst test = (n) => {\n  const list = tri(n)\n  const result = list.reduce((acc, item) => acc + item, 0)\n  return isO(result)\n}\n\nconsole.log(fib(3) === solution(3))\nconsole.log(fib(5) === solution(5))\nconsole.log(fib(7) === solution(7))\nconsole.log(test(7))\nconsole.log(test(10))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n    let ret = 1;\n    while (n > 0) {\n        ret *= 2;\n        if (ret % 2 == 1) {\n            ret += 1;\n            if (ret % 2 == 0) {\n                ret -= 1;\n            }\n        }\n        n--;\n    }\n    return ret;\n};\n\nconsole.log(digIts(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const len = string.length;\n  let count = 0;\n  let stack = [];\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    if (string[i] === '[') {\n      stack.push(i);\n    } else if (string[i] === ']') {\n      if (stack.length > 0 && stack[stack.length - 1] === i) {\n        count++;\n      }\n      stack.pop();\n    }\n\n    i++;\n  }\n\n  if (stack.length > 0) {\n    return false;\n  }\n\n  return count > 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  const ceil = Math.ceil;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(ceil(lst[i]), 2);\n  }\n  return sum;\n};\n\nconsole.log(sumaRes([1, 2, 3]));\nconsole.log(sumaRes([1, 4, 9]));\nconsole.log(sumaRes([1, 3, 5, 7]));\nconsole.log(sumaRes([1.4, 4.2, 0]));\nconsole.log(sumaRes([-2.4, 1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n    return txt.slice(-1) ===''? txt.slice(0, -1) : txt;\n};\n\nconst cheCkIflastCHarisALeTter = (txt) => {\n    return txt.slice(-1) ===''? txt.slice(0, -1) : txt;\n};\n\n/* Create a function that returns true if the last two\n  characters of a given string are an alphabetical\n  character and are not a part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n    return txt.slice(-2) ===''? txt.slice(0, -2) : txt;\n};\n\n/* Create a function that returns true if the last three\n  characters of a given string are an alphabetical\n  character and are not a part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n    return txt.slice(-3) ===''? txt.slice(0, -3) : txt;\n};\n\n/* Create a function that returns true if the last four\n  characters of a given string are an alphabetical\n  character and are not a part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n    return txt.slice(-4) ===''? txt.slice(0, -4) : txt;\n};\n\n/* Create a function that returns true if the last five\n  characters of a given string are an alphabetical\n  character and are not a part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n    return txt.slice(-5) === '"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = Math.floor((low + high) / 2);\n  let midVal = arr[mid];\n  while (low <= high) {\n    if (arr[mid] <= arr[low]) {\n      return low;\n    }\n    if (arr[mid] <= arr[high]) {\n      return mid;\n    }\n    if (arr[midVal] < arr[mid]) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n    mid = Math.floor((low + high) / 2);\n    midVal = arr[mid];\n  }\n  return -1;\n}\n\n/*\n  Given an array of numbers and a target number, return the largest number\n  that is less than or equal to the target number.\n\n  Examples:\n  canarraNge([1,2,4,3,5], 2) = 1\n  canarraNge([1,2,3], 2) = 1\n  canarraNge([1,2,3], 3) = 2\n  canarraNge([1,2,3], 4) = 2\n  canarraNge([1,2,3], 5) = 3\n  canarraNge([1,2,3], 6) = 3\n  canarraNge([1,2,3], 7) = 3\n  canarraNge([1,2,3], 8) = 3\n  canarraNge([1,2,3], 9) = 3\n  canarraNge([1,2,3], 10) = 3\n  canarraNge([1,2,3], 11) = 3\n  canarraNge([1,2,3], 12) = 3\n  canarraNge([1,2,3], 13) = 3\n  canarraNge([1,2,3], 14) = 3\n  canarraNge([1,2,3], 15) = 3\n  canarraNge([1,2,3], 16) = 3\n  canarraNge([1,2,3], 17) = 3\n  canarraNge([1,2,3], 18) = 3\n  canarraNge([1,2,3], 19) = 3\n  canarraNge([1,2,3], 20) = 3\n  canarraNge([1,2,3], 21) = 3\n  canarraNge([1,2,3], 22) = 3\n  canarraNge([1,2,3], 23) = 3\n  canarraNge([1,2,3], 24) = 3\n  canarraNge([1,2,3], 25) = 3\n  canarraNge([1,2,3], 26) = 3\n  canarraNge([1,2,3], 27) = 3\n  canarraNge([1,2,3], 28) = 3\n  canarraNge([1,2,3], 29) = 3\n  canarraNge([1,2,3], 30) = 3\n  canarraNge([1,2,3], 31) = 3\n  canarraNge([1,2,3], 32) = 3\n  canarraNge([1,2,3], 33) = 3\n  canarraNge([1,2,3], 34) = 3\n  canarraNge([1,2,3], 35) = 3\n  canarraNge([1,2,3], 36) = 3\n  canarraNge([1,2,3], 37) = 3\n  canarraNge([1,2,3], 38) = 3\n  canarraNge([1,2,3], 39) = 3\n  canarraNge([1,2,3], 40) = 3\n  canarraNge([1,2,3], 41) = 3\n  canarraNge([1,2,3], 42) = 3\n  canarraNge([1,2,3], 43) = 3\n  canarraNge([1,2,3], 44) = 3\n  canarraNge([1,2,3], 45) = 3\n  canarraNge([1,2,3], 46) = 3\n  canarraNge([1,2,3], 47) = 3\n  canarraNge([1,2,3], 48) = 3\n  canarraNge([1,2,3], 49) = 3\n  canarraNge([1,2,3], 50) = 3\n  canarraNge([1,2,3], 51) = 3\n  canarraNge([1,2,3], 52) = 3\n  canarraNge([1,2,3], 53) = 3\n  canarraNge([1,2,3], 54) = 3\n  canarraNge([1,2,3], 55) = 3\n  canarraNge([1,2,3], 56) = 3\n  canarraNge([1,2,3], 57) = 3\n  canarraNge([1,2,3], 58) = 3\n  canarraNge([1,2,3], 59) = 3\n  canarraNge([1,2,3], 60) = 3\n  canarraNge([1,2,3], 61) = 3\n  canarraNge([1,2,3], 62) = 3\n  canarraNge([1,2,3], 63) = 3\n  canarraNge([1,2,3], 64) = 3\n  canarraNge([1,2,3], 65) = 3\n  canarraNge([1,2,3], 66) = 3\n  canarraNge([1,2,3], 67) = 3\n  canarraNge([1"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const [a, b] = lst.reduce(([max, min], el) => ([max < el? max : el, min > el? min : el]), [null, null]);\n  return [a, b];\n}\n\nconst larGestsmallest = (lst) => {\n  const [max, min] = larGestsmallestErs(lst);\n  return [max, min];\n}\n\nconst larGestsmallestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max < el? max : el, min > el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestlargest = (lst) => {\n  const [max, min] = larGestlargestErs(lst);\n  return [max, min];\n}\n\nconst larGestlargestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max > el? max : el, min < el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestsmallest = (lst) => {\n  const [max, min] = larGestsmallestErs(lst);\n  return [max, min];\n}\n\nconst larGestsmallestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max > el? max : el, min < el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestlargest = (lst) => {\n  const [max, min] = larGestlargestErs(lst);\n  return [max, min];\n}\n\nconst larGestlargestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max > el? max : el, min > el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestsmallest = (lst) => {\n  const [max, min] = larGestsmallestErs(lst);\n  return [max, min];\n}\n\nconst larGestsmallestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max > el? max : el, min > el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestlargest = (lst) => {\n  const [max, min] = larGestlargestErs(lst);\n  return [max, min];\n}\n\nconst larGestlargestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max > el? max : el, min > el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestsmallest = (lst) => {\n  const [max, min] = larGestsmallestErs(lst);\n  return [max, min];\n}\n\nconst larGestsmallestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max > el? max : el, min < el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestlargest = (lst) => {\n  const [max, min] = larGestlargestErs(lst);\n  return [max, min];\n}\n\nconst larGestlargestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max > el? max : el, min > el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestsmallest = (lst) => {\n  const [max, min] = larGestsmallestErs(lst);\n  return [max, min];\n}\n\nconst larGestsmallestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max < el? max : el, min < el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestlargest = (lst) => {\n  const [max, min] = larGestlargestErs(lst);\n  return [max, min];\n}\n\nconst larGestlargestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max < el? max : el, min > el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestsmallest = (lst) => {\n  const [max, min] = larGestsmallestErs(lst);\n  return [max, min];\n}\n\nconst larGestsmallestErs = (lst) => {\n  const [max, min] = lst.reduce(([max, min], el) => ([max < el? max : el, min > el? min : el]), [null, null]);\n  return [max, min];\n}\n\nconst larGestlargest = (lst) => {\n  const [max, min] = larGestlargestErs(lst);\n  return [max, min];\n}\n\nconst larGestlargestE"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  const isNum = a === undefined || a === null || b === undefined || b === null\n  if (isNum) {\n    return (a > b)? a : b\n  }\n\n  const isStr = a.constructor.name === \"string\" || b.constructor.name === \"string\"\n  if (isStr) {\n    return (a > b)? a : b\n  }\n\n  return (a > b)? a : b\n}\n\nconsole.log(comPareone(1, 2.5))\nconsole.log(comPareone(1, \"2,3\"))\nconsole.log(comPareone(\"5,1\", \"6\"))\nconsole.log(comPareone(\"1\", 1))\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  const result = false;\n  const i = Math.floor(n / 2);\n  if (i === n) return true;\n  while (i < n) {\n    if (n % 2 === 0) {\n      if (i % 2!== 0) {\n        result = false;\n        break;\n      }\n    } else {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isEqualToFourNums = (n) => {\n  return isEQualtoSumeveN(n) && isEqualToTwoNums(n) && isEqualToTwoNums(n * 2) && isEqualToTwoNums(n * 3);\n};\n\nmodule.exports = isEqualToFourNums;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n    let specialFactorial = 1;\n    while (n > 1) {\n        specialFactorial *= n;\n        n--;\n    }\n    return specialFactorial;\n};\n\nconst isPrime = (n) => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isProbablePrime = (n) => {\n    let m = 2;\n    while (m * m <= n) {\n        if (n % m === 0) {\n            return false;\n        }\n        m++;\n    }\n    return true;\n};\n\nconst findNextPrime = (n) => {\n    let m = 2;\n    while (m * m <= n) {\n        if (n % m === 0) {\n            return m;\n        }\n        m++;\n    }\n    return n;\n};\n\nconst getPrimeFactors = (n) => {\n    let factors = [];\n    let m = n;\n    while (m > 1) {\n        if (isPrime(m)) {\n            factors.push(m);\n        }\n        m = findNextPrime(m);\n    }\n    return factors;\n};\n\nconst getPrimeFactorsPlusOne = (n) => {\n    let factors = getPrimeFactors(n);\n    factors.push(1);\n    return factors;\n};\n\nconst getPrimeFactorsPlusTwo = (n) => {\n    let factors = getPrimeFactors(n);\n    factors.push(2);\n    return factors;\n};\n\nconst isPalindrome = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    while (i <= j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV2 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    while (i <= j) {\n        if (s[j]!== s[i]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV3 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let len = s.length;\n    while (i <= j) {\n        if (s[j]!== s[i]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV4 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let len = s.length;\n    let len2 = len / 2;\n    while (i <= j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV5 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let len = s.length;\n    let halfLen = len / 2;\n    while (i <= j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV6 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let halfLen = s.length / 2;\n    while (i <= j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV7 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let halfLen = s.length / 2;\n    let halfLen2 = halfLen;\n    while (i <= j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV8 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let halfLen = s.length / 2;\n    let halfLen2 = halfLen;\n    while (i <= j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV9 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let halfLen = s.length / 2;\n    let halfLen2 = halfLen;\n    while (i <= j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV10 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let halfLen = s.length / 2;\n    let halfLen2 = halfLen;\n    while (i <= j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindromeV11 = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    let halfLen = s.length / 2;\n    let halfLen2"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  text = text.replace(/ /g, '_');\n  text = text.replace(/  /g, '-');\n  return text;\n};\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEu(\"Example\") == \"Example\"\n  fixspacEu(\"Example_1\") == \"Example 1\"\n  fixspacEu(\" Example 2\") == \"Example 2\"\n  fixspacEu(\" Example   3\") == \"Example 3\"\n  */\nconst fixspacEu = (text) => {\n  text = text.replace(/_/g,'');\n  text = text.replace(/-/g,'');\n  return text;\n};\n\nconst fixspac = (text) => {\n  text = fixspacEs(text);\n  text = fixspacEu(text);\n  return text;\n};\n\n/*\n  Given a string text, remove leading and trailing spaces and \n  convert to lower case\n  \n  fixspacLower(\"Example\") == \"example\"\n  fixspacLower(\" Example\") == \"example\"\n  fixspacLower(\"Example \") == \"example\"\n  fixspacLower(\"Example  \") == \"example\"\n  */\nconst fixspacLower = (text) => {\n  text = text.replace(/^\\s+/g, '');\n  text = text.replace(/\\s+$/g, '');\n  text = text.toLowerCase();\n  return text;\n};\n\n/*\n  Given a string text, remove trailing spaces and convert \n  to upper case\n  \n  fixspacUpper(\"Example\") == \"EXAMPLE\"\n  fixspacUpper(\" Example\") == \"EXAMPLE\"\n  fixspacUpper(\"Example \") == \"EXAMPLE\"\n  fixspacUpper(\"Example  \") == \"EXAMPLE\"\n  */\nconst fixspacUpper = (text) => {\n  text = text.replace(/\\s+$/g, '');\n  text = text.toUpperCase();\n  return text;\n};\n\n/*\n  Given a string text, remove all spaces and convert to upper case\n  \n  fixspacUpperAll(\"Example\") == \"EXAMPLE\"\n  fixspacUpperAll(\"Example \") == \"EXAMPLE\"\n  fixspacUpperAll(\"Example  \") == \"EXAMPLE\"\n  */\nconst fixspacUpperAll = (text) => {\n  text = text.replace(/\\s+/g, '');\n  text = text.toUpperCase();\n  return text;\n};\n\n/*\n  Given a string text, replace all - and _ with spaces and \n  convert to upper case\n  \n  fixspacUpperAll(\"Example-3\") == \"EXAMPLE3\"\n  fixspacUpperAll(\"Example _3\") == \"EXAMPLE _3\"\n  */\nconst fixspacUpperAll = (text) => {\n  text = text.replace(/[_-]/g,'');\n  text = text.toUpperCase();\n  return text;\n};\n\n/*\n  Given a string text, remove all - and _ and convert to upper case\n  \n  fixspacUpperAll(\"Example3\") == \"EXAMPLE3\"\n  */\nconst fixspacUpperAll = (text) => {\n  text = text.replace(/[_-]/g, '');\n  text = text.toUpperCase();\n  return text;\n};\n\n/*\n  Given a string text, remove all - and _ and convert to upper case\n  \n  fixspacUpperAll(\"Example_3\") == \"EXAMPLE_3\"\n  */\nconst fixspacUpperAll = (text) => {\n  text = text.replace(/[_-]/g, '');\n  text = text.toUpperCase();\n  return text;\n};\n\n/*\n  Given a string text, remove all - and _ and convert to upper case\n  \n  fixspacUpperAll(\"Example__3\") == \"EXAMPLE__3\"\n  */\nconst fixspacUpperAll = (text) => {\n  text = text.replace(/[_-]/g, '');\n  text = text.toUpperCase();\n  return text;\n};\n\n/*\n  Given a string text, replace all spaces with underscores and \n  convert to lower case\n  \n  fixspacLower(\"Example\") == \"example\"\n  fixspacLower(\"Example \") == \"example\"\n  fixspacLower(\"Example  \") == \"example\"\n  */\nconst fixspacLower = (text) => {\n  text = text.replace(/\\s+/g, '_');\n  text = text.toLowerCase();\n  return text;\n};\n\n/*\n  Given a string text, replace all spaces with underscores and \n  convert to upper case\n  \n  fixspacUpper(\"Example\") == \"EXAMPLE\"\n  fixspacUpper(\"Example \") == \"EXAMPLE\"\n  fixspacUpper(\"Example  \") == \"EXAMPLE\"\n  */\nconst fixspacUpper = (text) => {\n  text = text.replace(/\\s+/g, '_');\n  text = text.toUpperCase();\n  return text;\n};\n\n/*\n  Given a string text, replace all spaces with underscores and \n  convert to upper case\n  \n  fixspacUpperAll(\"Example-3\") == \"EXAMPLE3\"\n  fixspacUpperAll(\"Example _3\") == \"EXAMPLE _3\"\n  */\nconst fixspacUpperAll = (text) => {\n  text = text.replace(/\\s+/g, '_');\n  text = text.toU"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  if (file_name.length > 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') == -1) {\n    return 'No';\n  }\n  if (file_name.substring(0, 1).search(/[^a-zA-Z]/)!= -1) {\n    return 'No';\n  }\n  if (file_name.substring(file_name.length - 4, file_name.length) == '.exe' || file_name.substring(file_name.length - 4, file_name.length) == '.dll') {\n    return 'No';\n  }\n  return 'Yes';\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK2 = (file_name) => {\n  if (file_name.indexOf('.') == -1) {\n    return 'No';\n  }\n  if (file_name.substring(0, 1).search(/[^a-zA-Z]/)!= -1) {\n    return 'No';\n  }\n  return 'Yes';\n}\n\nfilENamEChecK2('hello.txt');\nfilENamEChecK2('1hello.txt');\nfilENamEChecK2('hello.exe');\nfilENamEChecK2('1hello.exe');\nfilENamEChecK2('hello.dll');\nfilENamEChecK2('1hello.dll');\nfilENamEChecK2('1hello.txt.exe');\nfilENamEChecK2('1hello.txt.dll');\nfilENamEChecK2('hello.exe.exe');\nfilENamEChecK2('hello.exe.dll');\nfilENamEChecK2('hello.dll.exe');\nfilENamEChecK2('hello.dll.dll');\nfilENamEChecK2('1hello.txt.exe.exe');\nfilENamEChecK2('1hello.txt.exe.dll');\nfilENamEChecK2('1hello.txt.dll.exe');\nfilENamEChecK2('1hello.txt.dll.dll');\nfilENamEChecK2('1hello.exe.exe.exe');\nfilENamEChecK2('1hello.exe.exe.dll');\nfilENamEChecK2('1hello.exe.dll.exe');\nfilENamEChecK2('1hello.exe.dll.dll');\nfilENamEChecK2('1hello.dll.exe.exe');\nfilENamEChecK2('1hello.dll.exe.dll');\nfilENamEChecK2('1hello.dll.dll.exe');\nfilENamEChecK2('1hello.dll.dll.dll');<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  const sum = lst.reduce((prev, current) => prev + current * current, 0);\n  return sum;\n};\n\nexport default sumsquaRes;\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  let res = '';\n  const word = sentence.split(' ');\n  for (let i = 0; i < word.length; i++) {\n    const p = (Math.sqrt(word[i].length) + 1) | 0;\n    if (p!== Math.sqrt(p)) {\n      res += word[i] +'';\n    }\n  }\n  return res.slice(0, -1);\n};\n\ndescribe('#worDsInsenteNce', () => {\n  it('should return \"is\"', () => {\n    expect(worDsInsenteNce('This is a test')).toEqual('is');\n  });\n  it('should return \"go for\"', () => {\n    expect(worDsInsenteNce('lets go for swimming')).toEqual('go for');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  const n_frac = parseFloat(n.split('/')[0]),\n    x_frac = parseFloat(x.split('/')[0]),\n    n_den = parseFloat(n.split('/')[1]),\n    x_den = parseFloat(x.split('/')[1]);\n  return (n_frac + x_frac) % n_den === 0 && (n_den + x_den) % n_frac === 0;\n};\n\nconsole.log(simPlifY('1/3', '1/3')); // true\nconsole.log(simPlifY('2/3', '1/3')); // false\nconsole.log(simPlifY('1/5', '5/1')); // true\nconsole.log(simPlifY('7/10', '10/2')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = new Map();\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const sum = nums[i] + nums[i] % 10;\n    const index = map.get(sum);\n    if (index === undefined) {\n      map.set(sum, i);\n      max = Math.max(max, sum);\n    } else {\n      nums[index] = nums[i];\n      map.delete(sum);\n    }\n  }\n  const [start, end] = map.entries();\n  const sorted = [...map.values()];\n  return sorted.sort((a, b) => {\n    const aNum = a + a % 10;\n    const bNum = b + b % 10;\n    if (aNum === bNum) return 0;\n    if (aNum < bNum) return -1;\n    return 1;\n  });\n};\n\nconsole.log(ordErBypointS([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(ordErBypointS([1, 11, -1, -11, -12, 2, 1, 2, 10, 11])); // [1, -11, 2, -12, 11, 10, 1, 2]\nconsole.log(ordErBypointS([1, 11, -1, -11, -12, 2, 1, 2, 10, 11, 2, 1, 2])); // [1, -11, 2, -12, 11, 10, 1, 2]\nconsole.log(ordErBypointS([])); // []\nconsole.log(ordErBypointS([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n    let count = 0;\n    for(let num of nums) {\n        if(num > 10 && (num % 2 === 1 && num % 10 === 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(speCialfilteR([15, -73, 14, -15]));\nconsole.log(speCialfilteR([33, -2, -3, 45, 21, 109]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  let maxTriples = 0;\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1);\n  a.forEach((x, i) => {\n    a.forEach((y, j) => {\n      if (i < j) {\n        if (a[i] + a[j] + x === 3 * (i + j + 1)) {\n          maxTriples++;\n        }\n      }\n    });\n  });\n  return maxTriples;\n}\n\nconst main = () => {\n  console.log(getmaxTRipleS(10));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let orbit1 = {\n    \"Mercury\": 0,\n    \"Venus\": 0,\n    \"Earth\": 0,\n    \"Mars\": 0,\n    \"Jupiter\": 0,\n    \"Saturn\": 0,\n    \"Uranus\": 0,\n    \"Neptune\": 0\n  }\n\n  let orbit2 = {\n    \"Mercury\": 0,\n    \"Venus\": 0,\n    \"Earth\": 0,\n    \"Mars\": 0,\n    \"Jupiter\": 0,\n    \"Saturn\": 0,\n    \"Uranus\": 0,\n    \"Neptune\": 0\n  }\n\n  for (let i = 0; i < orbit1.length; i++) {\n    if (orbit1[i] === 1) {\n      orbit2[i] = 1\n    }\n  }\n\n  for (let i = 0; i < orbit2.length; i++) {\n    if (orbit2[i] === 1) {\n      orbit1[i] = 1\n    }\n  }\n\n  let planets = []\n  for (let i = 0; i < orbit1.length; i++) {\n    if (orbit1[i] === 1 && orbit2[i] === 1) {\n      planets.push(i)\n    }\n  }\n\n  return planets\n}\n\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const len = lst.length;\n  if (len === 0) return [];\n  let s = [];\n  let i = 0;\n  while (i < len) {\n    const str = lst[i];\n    if (str.length % 2!== 0) {\n      s.push(str);\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === len) {\n    s.push(lst[i]);\n    return s;\n  }\n  let j = i;\n  while (i < len) {\n    const str = lst[i];\n    if (str.length % 2 === 0) {\n      s.push(str);\n      i++;\n    } else {\n      break;\n    }\n  }\n  s.push(lst[i]);\n  s.sort();\n  return s;\n};\n\nexport default sorTedLIstSuM;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n.isPrime()) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOryTest = (xOry) => {\n  for (let i = 0; i < 1000; i++) {\n    const [n, x, y] = xOry(i, 2, 3);\n    console.log(`n: ${n} x: ${x} y: ${y}`);\n  }\n};\n\nxOryTest(xOry);\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  return lst.reduce((prev, curr) => {\n    return prev + curr * curr\n  }, 0)\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list.\n  addUp([1, 2, 3]) == 6\n  addUp([2, 5, 4]) == 14\n  addUp([0, -3, 0]) == 0\n  addUp([-9, -2, -1]) == -10\n  If the input list is empty, return 0.\n  */\nconst addUp = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr, 0)\n}\n\n/*\n  Given a list of numbers, return the number of even elements in the list.\n  The list can contain zero or more numbers.\n  isEven([1, 2, 3]) == 2\n  isEven([2, 5, 4]) == 1\n  isEven([0, -3, 0]) == 1\n  isEven([-9, -2, -1]) == 0\n  If the input list is empty, return 0.\n  */\nconst isEven = (lst) => {\n  return lst.filter((curr) => curr % 2 === 0).length\n}\n\n/*\n  Given a list of numbers, return the number of odd elements in the list.\n  The list can contain zero or more numbers.\n  isOdd([1, 2, 3]) == 1\n  isOdd([2, 5, 4]) == 3\n  isOdd([0, -3, 0]) == 1\n  isOdd([-9, -2, -1]) == 0\n  If the input list is empty, return 0.\n  */\nconst isOdd = (lst) => {\n  return lst.filter((curr) => curr % 2!== 0).length\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers in\n  the list that are odd.\n  sumOdds([1, 2, 3, 0]) == 1 + 9 + 0 + 0 = 10\n  sumOdds([2, 5, 4, 0]) == 5 + 49 + 0 + 0 = 70\n  sumOdds([0, -3, 0]) == 0\n  sumOdds([-9, -2, -1]) == -81\n  If the input list is empty, return 0.\n  */\nconst sumOdds = (lst) => {\n  return lst.filter((curr) => curr % 2 === 0).reduce((prev, curr) => prev + curr * curr, 0)\n}\n\n/*\n  Given a list of numbers, return the average of the numbers in the list.\n  The list can contain zero or more numbers.\n  The average is the sum of the numbers divided by the number of elements\n  in the list that are not zero.\n  average([1, 2, 3, 0]) == 2\n  average([2, 5, 4, 0]) == 4\n  average([0, -3, 0]) == 0\n  average([-9, -2, -1]) == -3\n  If the input list is empty, return 0.\n  */\nconst average = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr, 0) / lst.filter((curr) => curr!== 0).length\n}\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  The list can contain zero or more numbers.\n  The largest number is the largest number in the list that is not zero.\n  If the input list is empty, return 0.\n  */\nconst largest = (lst) => {\n  return lst.find((curr) => curr!== 0) || 0\n}\n\n/*\n  Given a list of numbers, return the smallest number in the list.\n  The list can contain zero or more numbers.\n  The smallest number is the smallest number in the list that is not zero.\n  If the input list is empty, return 0.\n  */\nconst smallest = (lst) => {\n  return lst.find((curr) => curr!== 0) || 0\n}\n\n/*\n  Given a list of numbers, return the product of the numbers in the list.\n  The list can contain zero or more numbers.\n  The product is the product of the numbers in the list that are not zero.\n  If the input list is empty, return 0.\n  */\nconst product = (lst) => {\n  return lst.reduce((prev, curr) => prev * curr, 1)\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even.\n  sumOdds([1, 2, 3, 0]) == 1 + 9 + 0 + 0 = 10\n  sumOdds([2, 5, 4, 0]) == 5 + 49 + 0 + 0 = 70\n  sumOdds([0, -3, 0]) == 0\n  sumOdds([-9, -2, -1]) == -81\n  If the input list is empty, return 0.\n  */\nconst sumOddsSquares = (lst) => {\n  return lst.filter((curr) => curr % 2 === 0).reduce((prev, curr) => prev + curr * curr, 0)\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd.\n  sumOddsSquares([1, 2, 3, 0]) == 1 + 9 + 0 + 0 = 10\n  sumOddsSquares([2, 5, 4, 0]) == 5 + 49 + 0 + 0 = 70\n  sumOddsSquares([0, -3, 0]) == 0\n  sumOddsSquares([-9, -2, -1]) =="}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n    if (game.length!== guess.length) return new Error('Error in game/guess arrays')\n    const res = []\n    for (let i = 0; i < game.length; i++) {\n        if (game[i] === guess[i]) res.push(0)\n        else res.push(Math.abs(game[i] - guess[i]))\n    }\n    return res\n}\n\n// tests\nconsole.log(comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(comPare([4,1,1,0,0,6],[6,1,1,0,0,0]))\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  const ext_map = extensions.map(ext => ext.toUpperCase());\n  const cap_count = 0;\n  const lower_count = 0;\n  ext_map.forEach(ext => {\n    if (ext.length > cap_count) {\n      cap_count = ext.length;\n    }\n    if (ext.length > cap_count) {\n      lower_count = 0;\n    }\n  });\n  const strength = (cap_count - lower_count) / cap_count;\n  if (strength >= 0) {\n    return class_name + '.' + ext_map[strength];\n  }\n  return class_name;\n};\n\nconst create = () => {\n  return {\n    strOngeStExtEnsIon: strOngeStExtEnsIon\n  };\n};\n\nmodule.exports = create();\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0;\n            else if(i > 0) i = 0;\n            else return false;\n        }\n        else {\n            if(++i == len) return true;\n            if(++j == len) return true;\n        }\n    }\n    return false;\n};\n\n/*\n  \"abcd\" => false\n  \"hello\" => true\n  \"whassup\" => false\n  \"abab\" => true\n  \"efef\" => false\n  \"himenss\" => true\n  */\nconst cycPattErnChEck1 = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0;\n            else if(i > 0) i = 0;\n            else return false;\n        }\n        else {\n            if(++i == len) return true;\n            if(++j == len) return true;\n        }\n    }\n    return false;\n};\n\n// const cycPattErnChEck1 = (a, b) => {\n//     const len = a.length;\n//     for(let i = 0; i < len; i++) {\n//         for(let j = 0; j < len; j++) {\n//             if(a[i] == b[j]) {\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// };\n\nconst cycPattErnChEck2 = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0;\n            else if(i > 0) i = 0;\n            else return false;\n        }\n        else {\n            if(++i == len) return true;\n            if(++j == len) return true;\n        }\n    }\n    return false;\n};\n\nconst cycPattErnChEck3 = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0;\n            else if(i > 0) i = 0;\n            else return false;\n        }\n        else {\n            if(++i == len) return true;\n            if(++j == len) return true;\n        }\n    }\n    return false;\n};\n\nconst cycPattErnChEck4 = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0;\n            else if(i > 0) i = 0;\n            else return false;\n        }\n        else {\n            if(++i == len) return true;\n            if(++j == len) return true;\n        }\n    }\n    return false;\n};\n\nconst cycPattErnChEck5 = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0;\n            else if(i > 0) i = 0;\n            else return false;\n        }\n        else {\n            if(++i == len) return true;\n            if(++j == len) return true;\n        }\n    }\n    return false;\n};\n\nconst cycPattErnChEck6 = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0;\n            else if(i > 0) i = 0;\n            else return false;\n        }\n        else {\n            if(++i == len) return true;\n            if(++j == len) return true;\n        }\n    }\n    return false;\n};\n\nconst cycPattErnChEck7 = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0;\n            else if(i > 0) i = 0;\n            else return false;\n        }\n        else {\n            if(++i == len) return true;\n            if(++j == len) return true;\n        }\n    }\n    return false;\n};\n\nconst cycPattErnChEck8 = (a, b) => {\n    const len = a.length;\n    let i = 0, j = 0;\n    while(i < len && j < len) {\n        if(a[i]!= b[j]) {\n            if(j > 0) j = 0"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n    let cnt = 0;\n    while (num) {\n        if (num % 2) {\n            cnt++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (cnt, num);\n};\n\n// Tests\ndescribe('Test Suite', () => {\n    describe('Test for the function', () => {\n        it('should return the tuple (1, 1) for the value -12', () => {\n            let cnt = 0;\n            let num = -12;\n            let result = eveNOddcount(num);\n            expect(result[0]).toEqual(cnt);\n            expect(result[1]).toEqual(num);\n        });\n\n        it('should return the tuple (1, 2) for the value 123', () => {\n            let cnt = 0;\n            let num = 123;\n            let result = eveNOddcount(num);\n            expect(result[0]).toEqual(cnt);\n            expect(result[1]).toEqual(num);\n        });\n    });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let a = 0;\n  let b = 1;\n  let result = '';\n  while (number >= a) {\n    if (a === 3) {\n      a = 1;\n    }\n    if (number >= b) {\n      result += number - b;\n      number = number - b;\n    } else {\n      result += 'i';\n      number = number - a;\n      a = 3;\n    }\n  }\n  return result;\n};\n\n/*\n  Given an integer, return its roman numeral equivalent in upper case.\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> inttoRoman(7) == 'IIII'\n  >>> inttoRoman(1999) == 'MCMLXXXIX'\n  */\nconst inttoRoman = (number) => {\n  let num = number;\n  let result = '';\n  while (num >= 1000) {\n    result += 'M';\n    num -= 1000;\n  }\n  if (num >= 900) {\n    result += 'CM';\n    num -= 900;\n  }\n  if (num >= 500) {\n    result += 'D';\n    num -= 500;\n  }\n  if (num >= 400) {\n    result += 'CD';\n    num -= 400;\n  }\n  if (num >= 100) {\n    result += 'C';\n    num -= 100;\n  }\n  if (num >= 90) {\n    result += 'XC';\n    num -= 90;\n  }\n  if (num >= 50) {\n    result += 'L';\n    num -= 50;\n  }\n  if (num >= 40) {\n    result += 'XL';\n    num -= 40;\n  }\n  if (num >= 10) {\n    result += 'X';\n    num -= 10;\n  }\n  if (num >= 9) {\n    result += 'IX';\n    num -= 9;\n  }\n  if (num >= 5) {\n    result += 'V';\n    num -= 5;\n  }\n  if (num >= 4) {\n    result += 'IV';\n    num -= 4;\n  }\n  if (num >= 1) {\n    result += 'I';\n    num -= 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its ordinal string equivalent.\n  Restrictions: 1 <= num <= 999\n\n  Examples:\n  >>> inttoOrd(7) == 'xvii'\n  >>> inttoOrd(1999) == 'xmdxcix'\n  */\nconst inttoOrd = (number) => {\n  let result = '';\n  let num = number;\n  while (num >= 1) {\n    result = result + (num % 10);\n    num = Math.floor(num / 10);\n  }\n  return result;\n};\n\n/*\n  Given an integer, return its name as a string.\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> inttoName(7) == 'vii'\n  >>> inttoName(1999) == 'ix'\n  */\nconst inttoName = (number) => {\n  let num = number;\n  let result = '';\n  while (num >= 1000) {\n    result = 'x' + result;\n    num -= 1000;\n  }\n  if (num >= 900) {\n    result = 'c' + result;\n    num -= 900;\n  }\n  if (num >= 500) {\n    result = 'd' + result;\n    num -= 500;\n  }\n  if (num >= 400) {\n    result = 'c' + result;\n    num -= 400;\n  }\n  if (num >= 100) {\n    result = 'c' + result;\n    num -= 100;\n  }\n  if (num >= 90) {\n    result = 'x' + result;\n    num -= 90;\n  }\n  if (num >= 50) {\n    result = 'l' + result;\n    num -= 50;\n  }\n  if (num >= 40) {\n    result = 'xl' + result;\n    num -= 40;\n  }\n  if (num >= 10) {\n    result = 'x' + result;\n    num -= 10;\n  }\n  if (num >= 9) {\n    result = 'ix' + result;\n    num -= 9;\n  }\n  if (num >= 5) {\n    result = 'v' + result;\n    num -= 5;\n  }\n  if (num >= 4) {\n    result = 'iv' + result;\n    num -= 4;\n  }\n  if (num >= 1) {\n    result = 'i' + result;\n    num -= 1;\n  }\n  return result;\n};\n\n/*\n  Given a number, return the name of the day it represents as a string.\n  Restrictions: 1 <= num <= 31\n\n  Examples:\n  >>> inttoName(1) == 'xvii'\n  >>> inttoName(7) == 'xvii'\n  >>> inttoName(29) == 'xvi'\n  >>> inttoName(31) == 'xvii'\n  */\nconst inttoDay = (number) => {\n  let num = number;\n  let result = '';\n  while (num >= 31) {\n    result = 'x' + result;\n    num -= 31;\n  }\n  if (num >= 21) {\n    result = 'x' + result;\n    num -= 21;\n  }\n  if (num >= 13) {\n    result = 'c' + result;\n    num -= 13;\n  }\n  if (num >= 5) {\n    result = 'l' + result;\n    num -= 5;\n  }\n  if (num >= 1) {\n    result = 'i' + result;\n    num -= 1;\n  }\n  return result;\n};\n\n/*\n  Given a number, return the name of the month it represents as a string.\n  "}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n    const angleA = Math.atan2(c, b);\n    const angleB = Math.atan2(a, c);\n    const angleC = Math.atan2(b, a);\n    return (Math.abs(angleA - angleB) <= Math.PI / 2 && Math.abs(angleB - angleC) <= Math.PI / 2)\n        || (Math.abs(angleA - angleC) <= Math.PI / 2 && Math.abs(angleC - angleB) <= Math.PI / 2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  const list = words.map(word => {\n    return word.split('').sort().join('')\n  })\n  let max = 0\n  for (let i = 0; i < list.length; i++) {\n    const current = list[i]\n    const charCount = current.split('').reduce((count, char) => {\n      return count + (char === current.charAt(0)? 1 : 0)\n    }, 0)\n    if (max < charCount) {\n      max = charCount\n    }\n  }\n  return list.find(item => {\n    return item.length === max\n  })\n}\n\nmodule.exports = finDMax\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if(number <= 0 || need <= 0 || remaining <= 0) {\n        return [-1, -1];\n    }\n    \n    let result = [-1, -1];\n    let total = 0;\n    while(number > 0 && need > 0 && remaining > 0) {\n        if(number >= need) {\n            total += number;\n            number = number - need;\n            result[0] = total;\n        } else {\n            total += number;\n            number = 0;\n            result[0] = total;\n        }\n        \n        if(remaining > 0) {\n            remaining--;\n        }\n        \n    }\n    return result;\n}\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n    const lengthOperator = operator.length;\n    const lengthOperand = operand.length;\n    let operatorValue = 0;\n    let operandValue = 0;\n    for(let i = 0; i < lengthOperator; i++) {\n        operatorValue = operator[i];\n        operandValue = operand[i];\n        switch(operatorValue) {\n            case '+':\n                operandValue += operatorValue;\n                break;\n            case '-':\n                operandValue -= operatorValue;\n                break;\n            case '*':\n                operandValue *= operatorValue;\n                break;\n            case '/':\n                operandValue /= operatorValue;\n                break;\n            case '**':\n                operandValue **= operatorValue;\n                break;\n            default:\n                break;\n        }\n    }\n    return operandValue;\n};\n\nconst doALgebRa2 = (operator, operand) => {\n    const lengthOperator = operator.length;\n    const lengthOperand = operand.length;\n    let operatorValue = 0;\n    let operandValue = 0;\n    for(let i = 0; i < lengthOperator; i++) {\n        operatorValue = operator[i];\n        operandValue = operand[i];\n        switch(operatorValue) {\n            case '+':\n                operandValue += operatorValue;\n                break;\n            case '-':\n                operandValue -= operatorValue;\n                break;\n            case '*':\n                operandValue *= operatorValue;\n                break;\n            case '/':\n                operandValue /= operatorValue;\n                break;\n            case '**':\n                operandValue **= operatorValue;\n                break;\n            default:\n                break;\n        }\n    }\n    return operandValue;\n};\n\n// console.log(doALgebRa2('*', [2, 3, 4, 5]));\n// console.log(doALgebRa2('*', [2, 3, 4, 5, 6]));\n// console.log(doALgebRa2('*', [2, 3, 4, 5, 6, 7]));\n// console.log(doALgebRa2('*', [2, 3, 4, 5, 6, 7, 8]));\n// console.log(doALgebRa2('*', [2, 3, 4, 5, 6, 7, 8, 9]));\n\n// console.log(doALgebRa2('+', [2, 3, 4, 5]));\n// console.log(doALgebRa2('-', [2, 3, 4, 5]));\n// console.log(doALgebRa2('/', [2, 3, 4, 5]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\n// console.log(doALgebRa2('**', [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n// console.log(doALgebRa2"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  if (!s) return s;\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/)) {\n      res += s[i].toUpperCase();\n    } else {\n      res += s[i];\n    }\n  }\n  return res;\n}\n\nconsole.log(solVe(\"1234\"));\nconsole.log(solVe(\"ab\"));\nconsole.log(solVe(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n    text = text || '';\n    if (text.length === 0) {\n        return null;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  let result = [];\n  while (a < b) {\n    result.push(a);\n    a = a + 2;\n  }\n  return result;\n};\n\nmodule.exports = genEratEInteGerS;\n<|endoftext|>"}
