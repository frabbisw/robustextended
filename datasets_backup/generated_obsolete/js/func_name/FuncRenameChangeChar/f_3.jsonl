{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  let i, j, k;\n\n  // Check if given threshold is below 1, then return false.\n  if (threshold < 1) return false;\n\n  // Sort given list of numbers.\n  numbers = sortedArray(numbers);\n\n  // Initialize two pointers i and j.\n  let i = 0, j = numbers.length - 1;\n\n  // While both pointers i and j are not at end of given list.\n  while (i < j) {\n    // Get two numbers in given list.\n    const numberI = numbers[i];\n    const numberJ = numbers[j];\n\n    // If they are both close enough to each other, return true.\n    if (Math.abs(numberI - numberJ) <= threshold) return true;\n\n    // Otherwise, decrement i or j pointer.\n    if (numberI < numberJ) {\n      j--;\n    } else {\n      i++;\n    }\n  }\n\n  // If none of the above returns true, return false.\n  return false;\n};\n\n// --------------------------------------------------------------------------\n// Public: The main function of the program.\n// --------------------------------------------------------------------------\n\n// This function expects two arguments, first being the path to the input\n// text file, and second being the threshold value to use when comparing\n// two numbers.\nconst main = (inputFile, threshold) => {\n  // Read the input file and save each line in an array of numbers.\n  const numbers = readLines(inputFile).map(number => parseFloat(number));\n\n  // Print out whether any two numbers in the array are close enough to\n  // each other.\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (hasclosEElemEntS(numbers, threshold)) {\n        console.log(`${numbers[i]} and ${numbers[j]} are ${threshold} closeness of each other.`);\n      }\n    }\n  }\n};\n\n// --------------------------------------------------------------------------\n// Public: Main function of the program.\n// --------------------------------------------------------------------------\n\n// This function expects two arguments, first being the path to the input\n// text file, and second being the threshold value to use when comparing\n// two numbers.\nmain(process.argv[2], parseFloat(process.argv[3]));\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const stack = []\n  let current_group = []\n  paren_string.split('').forEach((char) => {\n    if (char === '(') {\n      stack.push(current_group)\n      current_group = []\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses')\n      } else {\n        stack.pop()\n        current_group.push(char)\n      }\n    } else if (char ==='') {\n      // do nothing\n    } else {\n      current_group.push(char)\n    }\n  })\n  if (stack.length > 0) {\n    throw new Error('Unbalanced parentheses')\n  }\n  return current_group\n}\n\n// Your Solution object will be instantiated and called as such:\n// var obj = Object.create(Solution).createNew(input)\n// obj.solve(input)\nclass Solution {\n  constructor() {\n    this.sepAratEPareNGrOups = sepAratEPareNGrOups\n  }\n\n  createNew(input) {\n    return new this()\n  }\n\n  solve(input) {\n    return this.sepAratEPareNGrOups(input)\n  }\n}\n\n//module.exports = Solution\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  const absNumber = Math.abs(number),\n        numInt = Math.floor(absNumber),\n        numFrac = absNumber - numInt;\n  return numFrac;\n};\n\nmodule.exports = truNcatENumbEr;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  const sum = () => {\n    return operations.reduce((a, b) => a + b, 0);\n  };\n  const check = () => {\n    const balance = sum();\n    return balance < 0? true : false;\n  };\n  const isZero = () => {\n    return check()? true : false;\n  };\n  return isZero();\n};\n\nmodule.exports = belOwZeRo;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const numbersToMean = numbers.filter((n) => {\n    return isFinite(n);\n  });\n  if (numbersToMean.length === 0) {\n    return NaN;\n  }\n  const numbersMean = mean(numbersToMean);\n  return (numbers.map((n) => {\n    return Math.abs(n - numbersMean);\n  })).reduce((acc, n) => {\n    return acc + n;\n  }, 0) / numbersToMean.length;\n};\n\n/**\n  This is the ratio of the number of NaNs in a list of numbers to the number of\n  numbers in the list. The ratio is expressed as a percentage.\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0, NaN, 7.0])\n  0.33\n  */\nconst meaNAbsOlutedevIatioNofNaNs = (numbers) => {\n  const numberOfNaNs = numberOfNanValues(numbers);\n  return 100 * (1 - numberOfNaNs / numbers.length);\n};\n\n/**\n  This is the ratio of the number of NaNs in a list of numbers to the number of\n  numbers in the list. The ratio is expressed as a ratio of the number of\n  NaNs to the total number of values in the list.\n  >>> meaNAbsOlutedevIatioNofNaNs([1.0, 2.0, 3.0, 4.0, NaN, 7.0])\n  0.66\n  */\nconst meaNAbsOlutedevIatioOfNaNs = (numbers) => {\n  const numberOfNaNs = numberOfNanValues(numbers);\n  return numberOfNaNs / numbers.length;\n};\n\n/**\n  This is the mean absolute deviation.\n  >>> meaNAbsOlutedevIatioNofNaNs([1.0, 2.0, 3.0, 4.0, NaN, 7.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioNofNaNsMean = (numbers) => {\n  const numberOfNaNs = numberOfNanValues(numbers);\n  return mean(numbers.filter((n) => {\n    return!isNaN(n);\n  }));\n};\n\n/**\n  This is the mean absolute deviation.\n  >>> meaNAbsOlutedevIatioOfNaNs([1.0, 2.0, 3.0, 4.0, NaN, 7.0])\n  2.0\n  */\nconst meaNAbsOlutedevIatioOfNaNsMean = (numbers) => {\n  const numberOfNaNs = numberOfNanValues(numbers);\n  return mean(numbers.filter((n) => {\n    return!isNaN(n);\n  }));\n};\n\n/**\n  >>> meaNAbsOlutedevIatioNofNaNsMean([1.0, 2.0, 3.0, 4.0, NaN, 7.0])\n  2.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, NaN, 7.0])\n  2.0\n  >>> meaNAbsOlutedevIatioNofNaNsMean([1.0, 2.0, 3.0, 4.0])\n  1.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0])\n  2.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0, NaN])\n  2.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0, 8.0])\n  3.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0, 8.0, NaN])\n  3.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0, 8.0, 9.0])\n  4.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0, 8.0, 9.0, NaN])\n  4.0\n  */\nconst meaNAbsOlutedevIatioNofNaNsMean = (numbers) => {\n  const numberOfNaNs = numberOfNanValues(numbers);\n  return mean(numbers.filter((n) => {\n    return!isNaN(n);\n  }));\n};\n\n/**\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0, 8.0, 9.0])\n  3.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0, 8.0, 9.0, NaN])\n  3.0\n  >>> meaNAbsOlutedevIatioOfNaNsMean([1.0, 2.0, 3.0, 4.0, 7.0, 8.0, 9.0, 9.0])\n  4.0\n  */\nconst meaNAbsOlutedevIatioOfNaNsMean = (numbers) => {\n  const numberOfNaNs = numberOfNanValues(numbers);\n  return mean(numbers.filter((n) => {\n    return!isNaN"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let n = 0\n\n  while (i < len) {\n    if (n === 0) {\n      result.push(numbers[i])\n    } else {\n      result.push(numbers[i] + delimeter + numbers[i])\n    }\n    n++\n    i++\n  }\n  return result\n}\n\nmodule.exports = intErspErse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  let current_paren = 0;\n  let max_nesting_level = 0;\n  let i = 0;\n  while (i < paren_string.length) {\n    if (paren_string[i] === '(') {\n      current_paren++;\n    } else if (paren_string[i] === ')') {\n      current_paren--;\n    }\n    if (current_paren < 0) {\n      return [0, 0, 0];\n    }\n    if (current_paren > max_nesting_level) {\n      max_nesting_level = current_paren;\n    }\n    i++;\n  }\n  return [max_nesting_level, current_paren, i];\n};\n\nconst test = () => {\n  console.log('test:'+ parSeNeStedPAreNs('((()()))'));\n};\n\nmodule.exports = {\n  parSeNeStedPAreNs,\n  test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filted = strings.filter(s => s.indexOf(substring) > -1);\n  return filted.length === 0? strings : filted;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filted = strings.filter(s => s.indexOf(substring) === -1);\n  return filted.length === 0? strings : filted;\n};\n\n/* Filter an input list of strings only for ones that are equal to given string\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filted = strings.filter(s => s === substring);\n  return filted.length === 0? strings : filted;\n};\n\n/* Filter an input list of strings only for ones that are not equal to given string\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filted = strings.filter(s => s!== substring);\n  return filted.length === 0? strings : filted;\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filted = strings.filter(s => s.indexOf(substring) > -1);\n  return filted.length === 0? strings : filted;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filted = strings.filter(s => s.indexOf(substring) === -1);\n  return filted.length === 0? strings : filted;\n};\n\n/* Filter an input list of strings only for ones that are equal to given string\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'bac')\n  []\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filted = strings.filter(s => s === substring);\n  return filted.length === 0? strings : filted;\n};\n\n/* Filter an input list of strings only for ones that are not equal to given string\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filted = strings.filter(s => s!== substring);\n  return filted.length === 0? strings : filted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  const sump = []\n  const product = []\n  for (let i = 0; i < numbers.length; i++) {\n    sump[i] = i + 1\n    product[i] = 1\n  }\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      sump[i] = sump[i] + sump[j]\n      sump[j] = sump[i] + sump[j]\n    }\n    product[i] = product[i] * sump[i]\n  }\n\n  return [sump[numbers.length - 1], product[numbers.length - 1]]\n}\n\nmodule.exports = sumprodUct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const max = _.max(numbers);\n  const sortedNumbers = _.sortBy(numbers, (x) => x);\n  const start = sortedNumbers.indexOf(max);\n  const rollingMax = _.take(sortedNumbers, start + 1);\n  return rollingMax;\n};\n\nmodule.exports = rolLingmax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longest = 0;\n  let palindrome = '';\n\n  for (let i = 0; i < string.length; i++) {\n    if (isPAlinDrome(string.substring(i, string.length))) {\n      longest = i;\n      palindrome = string.substring(0, i) + string.substring(longest, string.length);\n    }\n  }\n\n  return palindrome;\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome2 = (string) => {\n  let palindrome = '';\n  let start = 0;\n  let end = string.length - 1;\n  let i;\n\n  for (i = start; i < end; i++) {\n    if (string[i]!= string[end - i]) {\n      break;\n    }\n  }\n\n  if (i == start) {\n    palindrome = string;\n  } else if (i == end) {\n    palindrome = string.substring(0, start) + string.substring(end, string.length);\n  } else {\n    palindrome = string.substring(0, start) + string.substring(start + 1, end) + string.substring(end, string.length);\n  }\n\n  return palindrome;\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome3 = (string) => {\n  let palindrome = '';\n  let start = 0;\n  let end = string.length - 1;\n  let i;\n  let j;\n\n  for (i = start; i < end; i++) {\n    if (string[i]!= string[end - i]) {\n      break;\n    }\n  }\n\n  for (j = start; j <= end - i; j++) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n  }\n\n  if (j == start) {\n    palindrome = string;\n  } else if (j == end) {\n    palindrome = string.substring(0, start) + string.substring(start + i, end) + string.substring(end, string.length);\n  } else {\n    palindrome = string.substring(0, start) + string.substring(start + i, end) + string.substring(end, start + i) + string.substring(start + i, end) + string.substring(start, end) + string.substring(end, string.length);\n  }\n\n  return palindrome;\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome4 = (string) => {\n  let palindrome = '';\n  let start = 0;\n  let end = string.length - 1;\n  let i;\n  let j;\n  let k;\n\n  for (i = start; i < end; i++) {\n    if (string[i]!= string[end - i]) {\n      break;\n    }\n  }\n\n  for (j = start; j < end - i; j++) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n  }\n\n  for (k = start + 1; k < end - i; k++) {\n    if (string[i]!= string[k]) {\n      break;\n    }\n  }\n\n  if (j == start) {\n    palindrome = string;\n  } else if (j == end) {\n    palindrome = string.substring(0, start) + string.substring(start + i, end) + string.substring(end, string.length);\n  } else {\n    palindrome = string.substring(0, start) + string.substring(start + i, end) + string.substring(end, start + i) + string.substring(start + i, end) + string.substring(start, end) + string.substring(end, string.length);\n  }\n\n  return palindrome;\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome5 = (string) => {\n  let palindrome = '';\n  let start = 0;\n  let end = string.length - 1;\n  let i;\n  let j;\n\n  for (i = start; i < end; i++) {\n    if (string[i]!= string[end - i]) {\n      break;\n    }\n  }\n\n  for (j = start; j <= end - i; j++) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n  }\n\n  if (j == start) {\n    palindrome = string;\n  } else if (j == end) {\n    palindrome = string.substring(0, start) + string.substring(start + i, end) + string.substring(end, string.length);\n  } else {\n    palindrome = string.substring(0, start) + string.substring(start + i, end) + string.substring(end, start + i) + string.substring(start + i, end) + string.substring(start, end) + string.substring(end, string.length);\n  }\n\n  return palindrome;\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome6 = (string) => {\n  let palindrome = '';\n  let start = 0;\n  let"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  a = a.split('').reverse().join('');\n  b = b.split('').reverse().join('');\n\n  let str = '';\n  for (let i = 0; i < a.length; i++) {\n    str += a[i] ^ b[i];\n  }\n  return str;\n};\n\nmodule.exports = strIngXOr;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  const list = strings.map((elem) => {\n    return elem.length;\n  });\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n      maxIndex = i;\n    }\n  }\n  return strings[maxIndex];\n};\n\n/*\n  Returns the longest string in the list of strings, or the first string if the list is\n  empty.\n  >>> lonGest(['a', 'b', 'c'])\n  'c'\n  >>> lonGest([])\n  'a'\n  */\nconst longest = (strings) => {\n  if (strings.length) {\n    return strings[0].length;\n  }\n};\n\n/*\n  Returns the shortest string in the list of strings, or the first string if the list is\n  empty.\n  >>> shortest([])\n  'a'\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length) {\n    return strings[0].length;\n  }\n};\n\n/*\n  Returns a list of strings, whose lengths are the shortest in the list of strings, or the\n  first string if the list is empty.\n  >>> shortest(['a', 'b', 'c'])\n  ['a', 'b']\n  >>> shortest([])\n  ['a']\n  */\nconst shortestList = (strings) => {\n  if (strings.length) {\n    return strings.filter((elem) => {\n      return elem.length;\n    });\n  }\n};\n\n/*\n  Returns a list of strings, whose lengths are the longest in the list of strings, or the\n  first string if the list is empty.\n  >>> longest(['a', 'b', 'c'])\n  ['c', 'b', 'a']\n  >>> longest([])\n  ['a']\n  */\nconst longestList = (strings) => {\n  if (strings.length) {\n    return strings.filter((elem) => {\n      return elem.length;\n    });\n  }\n};\n\n/*\n  Returns a list of strings, whose lengths are the same as the longest in the list of strings, or the\n  first string if the list is empty.\n  >>> longest(['a', 'b', 'c'])\n  ['c', 'b', 'a']\n  >>> longest([])\n  ['a']\n  */\nconst sameLengthList = (strings) => {\n  if (strings.length) {\n    return strings.filter((elem) => {\n      return elem.length;\n    });\n  }\n};\n\n/*\n  Returns a list of strings, whose lengths are the same as the shortest in the list of strings, or the\n  first string if the list is empty.\n  >>> shortest(['a', 'b', 'c'])\n  ['a', 'b']\n  >>> shortest([])\n  ['a']\n  */\nconst sameLength = (strings) => {\n  if (strings.length) {\n    return strings.filter((elem) => {\n      return elem.length;\n    });\n  }\n};\n\nexport { lonGest, longest, shortest, shortestList, longestList, sameLength, sameLengthList };\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  const result = a % b\n  while (result!== 0) {\n    a = b\n    b = result\n    result = a % b\n  }\n  return b\n}\n\n/**\n  * Return a greatest common divisor of two integers a and b\n  * @param a\n  * @param b\n  * @return {number}\n  */\nconst greAtesTCommOnDIvisoR2 = (a, b) => {\n  let result = a % b\n  while (result!== 0) {\n    a = b\n    b = result\n    result = a % b\n  }\n  return b\n}\n\nmodule.exports = greAtesTCommOnDIvisoR\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const len = string.length\n  const prefixes = []\n  for (let i = 0; i < len; i++) {\n    const prefix = string.substr(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from longest to shortest of the input string\n  >>> allsufIxes('abc')\n  ['c', 'bc', 'b', 'abc']\n  */\nconst allsufIxes = (string) => {\n  const len = string.length\n  const suffixes = []\n  for (let i = len - 1; i >= 0; i--) {\n    const suffix = string.substr(i, len - i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all words of length n from the input string\n  >>> allWords(5, 'abc')\n  ['ab', 'ac', 'ad', 'ae', 'af', 'ag', 'ah', 'ai', 'aj', 'ak', 'al', 'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'av', 'aw', 'ax', 'ay', 'az', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bk', 'bl', 'bm', 'bn', 'bo', 'bp', 'bq', 'br', 'bs', 'bt', 'bu', 'bv', 'bw', 'bx', 'by', 'bz', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'cg', 'ch', 'ci', 'cj', 'ck', 'cl', 'cm', 'cn', 'co', 'cp', 'cq', 'cr', 'cs', 'ct', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'da', 'db', 'dc', 'dd', 'de', 'df', 'dg', 'dh', 'di', 'dj', 'dk', 'dl', 'dm', 'dn', 'dp', 'dq', 'dr', 'ds', 'dt', 'du', 'dv', 'dw', 'dx', 'dy', 'dz', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'eg', 'eh', 'ei', 'ej', 'ek', 'el', 'em', 'en', 'eo', 'ep', 'eq', 'er', 'es', 'et', 'eu', 'ev', 'ew', 'ex', 'ey', 'ez', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff', 'fg', 'fh', 'fi', 'fj', 'fk', 'fl', 'fm', 'fn', 'fo', 'fp', 'fq', 'fr', 'fs', 'ft', 'fu', 'fv', 'fw', 'fx', 'fy', 'fz', 'ga', 'gb', 'gc', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gj', 'gk', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gv', 'gw', 'gx', 'gy', 'gz', 'ha', 'hb', 'hc', 'hd', 'he', 'hf', 'hg', 'hh', 'hi', 'hj', 'hk', 'hl', 'hm', 'hn', 'hp', 'hq', 'hr', 'hs', 'ht', 'hu', 'hv', 'hw', 'hx', 'hy', 'hz', 'ia', 'ib', 'ic', 'id', 'ie', 'if', 'ig', 'ih', 'ii', 'ij', 'ik', 'il', 'im', 'in', 'io', 'ip', 'iq', 'ir', 'is', 'it', 'iu', 'iv', 'iw', 'ix', 'iy', 'iz', 'ja', 'jb', 'jc', 'jd', 'je', 'jf', 'jg', 'hh', 'ji', 'jk', 'jl', 'jm', 'jn', 'jo', 'jp', 'jq', 'jr', 'js', 'jt', 'ju', 'jv', 'jw', 'jx', 'jy', 'jz', 'ka', 'kb', 'kc', 'kd', 'ke', 'kf', 'kg', 'kh', 'ki', 'kj', 'kk', 'kl', 'km', 'kn', 'ko', 'kp', 'kq', 'kr', 'ks', 'kt', 'ku', 'kv', 'kw', 'kx', 'ky', 'kz', 'la', 'lb', 'lc', 'ld', 'le', 'lf', 'lg', 'lh', 'li', 'lj', 'lk', 'll', 'lm', 'ln', 'lo', 'lp', 'lq', 'lr', 'ls', 'lt', 'lu', 'lv', 'lw', 'lx', 'ly', 'lz','ma','mb','mc','md','me','mf','mg','mh','mi','mj','mk','ml','mm','mn','mo','mp','mq','mr','ms','mt','mu','mv','mw','mx','my','mz', 'na', 'nb', 'nc', 'nd', 'ne', 'nf', 'ng', 'nh', 'ni', 'nj', 'nk', 'nl', 'nm', 'nn', 'no', 'np', 'nq', 'nr', 'ns', 'nt', 'nu', 'nv', 'nw', 'nx', 'ny', 'nz', 'oa', 'ob', 'oc', 'od', 'oe', 'of', 'og', 'oh', 'oi', 'oj', 'ok', 'ol', 'om', 'on', 'oo', 'op', 'oq', 'or', '"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n    return Array(n + 1).join(' ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe1 = (n) => {\n    return Array(n + 1).join('0');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe2 = (n) => {\n    return Array(n + 1).join('0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe3 = (n) => {\n    return Array(n + 1).join(' 0');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe4 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe5 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe6 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe7 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe8 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe9 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe10 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe11 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe12 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe13 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe14 = (n) => {\n    return Array(n + 1).join(' 0 ');\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe15 = (n) => {\n    return Array(n"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n    const dictionary = new Set()\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i].toUpperCase()\n        dictionary.add(char)\n    }\n    return dictionary.size\n}\n\n/*\n  Given a string, check whether it contains any duplicate characters\n  >>> containsDuplicateChars('abcABC')\n  True\n  >>> containsDuplicateChars('abcabc')\n  False\n  >>> containsDuplicateChars('abc')\n  False\n  */\nconst containsDuplicateChars = (string) => {\n    const dictionary = new Set()\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i]\n        if (dictionary.has(char)) return true\n        dictionary.add(char)\n    }\n    return false\n}\n\n/*\n  Given a string, check whether it contains any duplicated characters\n  >>> containsDuplicateChars('abcABC')\n  False\n  >>> containsDuplicateChars('abcabc')\n  True\n  >>> containsDuplicateChars('abc')\n  False\n  */\nconst containsDuplicateCharsInReverse = (string) => {\n    const dictionary = new Set()\n    for (let i = string.length - 1; i >= 0; i--) {\n        const char = string[i]\n        if (dictionary.has(char)) return true\n        dictionary.add(char)\n    }\n    return false\n}\n\n/*\n  Given a string, check whether it contains any duplicated characters\n  >>> containsDuplicateChars('abcABC')\n  True\n  >>> containsDuplicateChars('abcabc')\n  True\n  >>> containsDuplicateChars('abc')\n  False\n  */\nconst containsDuplicateCharsInReverseWithSet = (string) => {\n    const dictionary = new Set()\n    for (let i = string.length - 1; i >= 0; i--) {\n        const char = string[i]\n        if (dictionary.has(char)) return true\n        dictionary.add(char)\n    }\n    return false\n}\n\n/*\n  Given a string, check whether it contains any duplicated characters\n  >>> containsDuplicateChars('abcABC')\n  True\n  >>> containsDuplicateChars('abcabc')\n  True\n  >>> containsDuplicateChars('abc')\n  False\n  */\nconst containsDuplicateCharsInReverseWithSetWithDictionary = (string) => {\n    const dictionary = new Set()\n    for (let i = string.length - 1; i >= 0; i--) {\n        const char = string[i]\n        if (dictionary.has(char)) return true\n        dictionary.add(char)\n    }\n    return false\n}\n\n/*\n  Given a string, find out how many lowercase letters does it contain\n  >>> lcCount('ABC')\n  1\n  >>> lcCount('abc')\n  3\n  >>> lcCount('aBc')\n  3\n  >>> lcCount('aBcD')\n  2\n  */\nconst lcCount = (string) => {\n    const lc = string.toLowerCase()\n    return lc.split('').length\n}\n\n/*\n  Given a string, find out how many upper case letters does it contain\n  >>> ucCount('abc')\n  1\n  >>> ucCount('aBc')\n  2\n  >>> ucCount('aBcD')\n  1\n  */\nconst ucCount = (string) => {\n    const uc = string.toUpperCase()\n    return uc.split('').length\n}\n\n/*\n  Given a string, find out how many characters does it contain\n  >>> charCount('ABC')\n  3\n  >>> charCount('abc')\n  3\n  >>> charCount('aBc')\n  3\n  >>> charCount('aBcD')\n  4\n  */\nconst charCount = (string) => {\n    return string.length\n}\n\n/*\n  Given a string, find out how many letters does it contain\n  >>> letterCount('abc')\n  3\n  >>> letterCount('aBc')\n  3\n  >>> letterCount('aBcD')\n  3\n  */\nconst letterCount = (string) => {\n    return string.split('').length\n}\n\n/*\n  Given a string, find out how many letters does it contain\n  >>> letterCount('ABC')\n  1\n  >>> letterCount('abc')\n  3\n  >>> letterCount('aBc')\n  3\n  >>> letterCount('aBcD')\n  2\n  */\nconst letterCountInReverse = (string) => {\n    let i = string.length - 1\n    let count = 0\n    while (i >= 0) {\n        count += 1\n        i -= 1\n    }\n    return count\n}\n\n/*\n  Given a string, find out how many letters does it contain\n  >>> letterCountInReverse('abc')\n  1\n  >>> letterCountInReverse('aBc')\n  2\n  >>> letterCountInReverse('aBcD')\n  1\n  */\nconst letterCountInReverseWithSet = (string) => {\n    let count = 0\n    for (let i = string.length - 1; i >= 0; i--) {\n        count += 1\n    }\n    return count\n}\n\n/*\n  Given a string, find out how many letters does it contain\n  >>> letterCountInReverseWithSet('abc')\n  1\n  >>> letterCountInReverseWithSet('aBc')\n  2\n  >>> letterCountInReverseWithSet('aBcD')\n  1\n  */\nconst letterCountInReverseWithSetWithDictionary = (string) => {\n    let count = 0\n    for (let i = string.length - 1; i >= 0; i--) {\n        count += 1\n    }\n    return count\n}\n\n/*\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  // split the music string on new line\n  const music_list = music_string.split(/\\r?\\n/);\n\n  // iterate through the list and check for note to start\n  for (let i = 0; i < music_list.length; i++) {\n    // initialize the beat variable\n    let beat = 0;\n\n    // split the line into two parts\n    const parts = music_list[i].split(/\\s+/);\n\n    // iterate through each part and count beats\n    for (let j = 0; j < parts.length; j++) {\n      // check if the current string is a note\n      if (parts[j].match(/^[o|]./)) {\n        beat += parseInt(parts[j].replace(/[|]/g, ''));\n      }\n    }\n    // add beat to the list\n    music_list[i] = beat;\n  }\n\n  // convert the array to an array of numbers\n  const music_array = music_list.map(Number);\n\n  // sort the array by how long the notes last\n  const sorted_array = music_array.sort((a, b) => a - b);\n\n  // take the first item (which is the longest) and remove it\n  const sorted_array_length = sorted_array.pop();\n\n  // return the result\n  return [sorted_array_length,...sorted_array];\n};\n\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o|.|.|.|.| o o'));\n// console.log(parSeMuSic('o o|.| o| o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let result = 0\n  let counter = 0\n  while (counter < string.length) {\n    if (string.substring(counter, counter + substring.length) === substring) {\n      counter = counter + substring.length\n      result += 1\n    }\n    counter += 1\n  }\n  return result\n}\n\n/*\n  Find the longest substring which doesn't contain any two characters that\n  occur in the same position in the original string.\n  >>> longest_non_overlapping_substring('aab')\n  'a'\n  >>> longest_non_overlapping_substring('aaa')\n  'a'\n  >>> longest_non_overlapping_substring('abab')\n  'ab'\n  >>> longest_non_overlapping_substring('abac')\n  'ab'\n  >>> longest_non_overlapping_substring('bacd')\n  'bd'\n  >>> longest_non_overlapping_substring('aaabcc')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccdd')\n  'a'\n  >>> longest_non_overlapping_substring('aaabcc')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccdd')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccddeee')\n  'a'\n  >>> longest_non_overlapping_substring('aaabccdd"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  let numArray = numbers.split(' ')\n  let numArrLen = numArray.length\n  let sortArray = []\n  for (let i = 0; i < numArrLen; i++) {\n    sortArray.push(Number(numArray[i]))\n  }\n  sortArray.sort(function (a, b) {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortArray.join(' ')\n}\n\n/*\n  Input: Numbers are sorted from 0 to 9.\n  Output: The number in the position 'index' in the sorted array of numbers.\n  >>> sorTNumBers('three one five')\n  'one three five'\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers2 = (numbers) => {\n  let numArray = numbers.split(' ')\n  let numArrLen = numArray.length\n  for (let i = 0; i < numArrLen; i++) {\n    numArray[i] = Number(numArray[i])\n  }\n  let arr = numArray.sort(function (a, b) {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return arr[index]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  let sortedNums = _.sortBy(numbers);\n  let first = sortedNums[0];\n  let last = sortedNums[sortedNums.length - 1];\n  let mid = sortedNums[Math.floor(sortedNums.length / 2)];\n  let dist = Math.abs(first - mid);\n  let dist1 = Math.abs(first - last);\n  let dist2 = Math.abs(mid - last);\n  let closest1 = first;\n  let closest2 = mid;\n  if (dist1 < dist2) {\n    closest1 = last;\n  }\n  if (dist1 < dist) {\n    closest2 = first;\n  }\n  return [closest1, closest2];\n};\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// Adapted from http://stackoverflow.com/questions/20609035/select-two-elements-from-a-list-in-order-by-closest-distance\nconst finDCloSestELemEnts2 = (numbers) => {\n  let sortedNums = _.sortBy(numbers);\n  let first = sortedNums[0];\n  let last = sortedNums[sortedNums.length - 1];\n  let mid = sortedNums[Math.floor(sortedNums.length / 2)];\n  let dist = Math.abs(first - mid);\n  let dist1 = Math.abs(first - last);\n  let dist2 = Math.abs(mid - last);\n  let closest1 = first;\n  let closest2 = mid;\n  if (dist1 < dist2) {\n    closest1 = last;\n  }\n  if (dist1 < dist) {\n    closest2 = first;\n  }\n  return [closest1, closest2];\n};\n\nexport { finDCloSestELemEnts, finDCloSestELemEnts2 };\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const sorted = numbers.sort();\n  const lg = sorted.length;\n  const start = sorted[0];\n  const end = sorted[lg - 1];\n  let i = 0;\n  let sum = 0;\n  const num = [];\n\n  while (i < lg) {\n    num.push(Math.log(sorted[i]));\n    sum += (end - start) * (sorted[i] - start) / (end - start);\n    i++;\n  }\n\n  return num.map((x) => x + sum);\n};\n\nexport default resCaletoUniT;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const result = []\n\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      result.push(value)\n    }\n  })\n\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  return string.length;\n};\n\n/**\n  * Concatenate the strings\n  * @param {string} a\n  * @param {string} b\n  * @returns {string}\n  *\n  * Example:\n  *\n  *  >>> strConcat('abc', 'def')\n  *  'abcdef'\n  *\n  *  >>> strConcat('abcd', 'efg')\n  *  'abcdefg'\n  */\nconst strConcat = (a, b) => {\n  return a + b;\n};\n\n/**\n  * Subtract the first string from the second string\n  * @param {string} a\n  * @param {string} b\n  * @returns {string}\n  *\n  * Example:\n  *\n  *  >>> strSub('abc', 'def')\n  *  'abcd'\n  *\n  *  >>> strSub('abcd', 'def')\n  *  'abcd'\n  */\nconst strSub = (a, b) => {\n  return a.substring(b.length);\n};\n\n/**\n  * Convert a string to uppercase\n  * @param {string} str\n  * @returns {string}\n  *\n  * Example:\n  *\n  *  >>> strToUpper('abc')\n  *  'ABC'\n  *\n  *  >>> strToUpper('abcd')\n  *  'ABCD'\n  */\nconst strToUpper = (str) => {\n  return str.toUpperCase();\n};\n\n/**\n  * Convert a string to lowercase\n  * @param {string} str\n  * @returns {string}\n  *\n  * Example:\n  *\n  *  >>> strToLower('ABC')\n  *  'abc'\n  *\n  *  >>> strToLower('ABCD')\n  *  'abcd'\n  */\nconst strToLower = (str) => {\n  return str.toLowerCase();\n};\n\n/**\n  * Convert a string to title case\n  * @param {string} str\n  * @returns {string}\n  *\n  * Example:\n  *\n  *  >>> strToTitle('abc')\n  *  'Abc'\n  *\n  *  >>> strToTitle('abcd')\n  *  'Abcd'\n  */\nconst strToTitle = (str) => {\n  return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n};\n\n/**\n  * Remove whitespaces from the end of a string\n  * @param {string} str\n  * @returns {string}\n  *\n  * Example:\n  *\n  *  >>> strTrim('  abc  ')\n  *  'abc'\n  *\n  *  >>> strTrim('abc')\n  *  'abc'\n  */\nconst strTrim = (str) => {\n  return str.replace(/\\s+$/, '');\n};\n\n/**\n  * Remove whitespaces from the beginning of a string\n  * @param {string} str\n  * @returns {string}\n  *\n  * Example:\n  *\n  *  >>> strTrimStart('  abc  ')\n  *  'abc  '\n  *\n  *  >>> strTrimStart('abc')\n  *  'abc'\n  */\nconst strTrimStart = (str) => {\n  return str.replace(/^\\s+/, '');\n};\n\nmodule.exports = {\n  strLen,\n  strConcat,\n  strSub,\n  strToUpper,\n  strToLower,\n  strToTitle,\n  strTrim,\n  strTrimStart\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  // The maximum number that divides evenly n\n  const result = (Math.floor(n / 2) * (Math.pow(2, n) - 1));\n\n  // The number that divides evenly n but is larger than n\n  const diff = n - result;\n\n  // If there is no smaller number that divides evenly n\n  if (diff === 0) {\n    return result;\n  }\n\n  // If n is not divisible by any smaller number\n  return n;\n};\n\nmodule.exports = larGestdivisOr;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  let factors = [];\n  let factorsCount = 1;\n  let temp = n;\n  while (temp > 1) {\n    let i = 2;\n    while (temp % i === 0) {\n      factors.push(i);\n      factorsCount += 1;\n      temp = temp / i;\n    }\n    if (temp === 1) break;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeRev = (n) => {\n  let factors = [];\n  let factorsCount = 1;\n  let temp = n;\n  while (temp > 1) {\n    let i = temp;\n    while (temp % i === 0) {\n      factors.push(i);\n      factorsCount += 1;\n      temp = temp / i;\n    }\n    if (temp === 1) break;\n  }\n  return factors;\n};\n\n//\n// Solve\n//\n\n/* Return number of prime factors of given number.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeRevSolve = (n) => {\n  let factors = facToriZeRev(n);\n  let factorsCount = 0;\n  for (let i = 0; i < factors.length; i++) {\n    factorsCount += factors[i] * factorsCount;\n  }\n  return factorsCount;\n};\n\n/* Return number of prime factors of given number in the order from smallest to largest.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeRevSolveRev = (n) => {\n  let factors = facToriZeRev(n);\n  let factorsCount = 0;\n  for (let i = factors.length - 1; i >= 0; i--) {\n    factorsCount += factors[i] * factorsCount;\n  }\n  return factorsCount;\n};\n\n//\n// Test\n//\n\n/* Return number of prime factors of given number.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeRevTest = (n) => {\n  let factors = facToriZeRev(n);\n  let test = 0;\n  for (let i = 0; i < factors.length; i++) {\n    let test = (test + factors[i] * facToriZeRev(factors[i])) % n;\n  }\n  return test;\n};\n\n/* Return number of prime factors of given number in the order from smallest to largest.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeRevTestRev = (n) => {\n  let factors = facToriZeRev(n);\n  let test = 0;\n  for (let i = factors.length - 1; i >= 0; i--) {\n    let test = (test + facToriZeRev(factors[i])) % n;\n  }\n  return test;\n};\n\n/* Return number of prime factors of given number.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeRevTestRevRev = (n) => {\n  let factors = facToriZeRev(n);\n  let test = 0;\n  for (let i = 0; i < factors.length; i++) {\n    let test = (test + facToriZeRev(factors[i])) % n;\n  }\n  return test;\n};\n\n/* Return number of prime factors of given number.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeRevTestRevRevRev = (n) => {\n  let factors = facToriZeRev(n);\n  let test = 0;\n  for (let i = 0; i < factors.length; i++) {\n    let test = (test + facToriZeRevRev(factors[i])) % n;\n  }\n  return test;\n};\n\n/* Return number of prime factors of given number.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let number of numbers) {\n    if (counter === 0) {\n      result.push(number);\n    }\n    if (result.includes(number)) {\n      counter--;\n    } else {\n      counter++;\n    }\n  }\n  return result;\n};\n\nexport { remOveDUplicAteS };\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase().replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase();\n};\n\n// ## Main Code\n\n// ## 1. Load the data\nconst words = [\n  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/', '=', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '<', '>', '\\\\', '$', ':', '|', '?', '!', '.', ':', ';', ',', '\\'', '\"', '@', '#', '$', '%', '^', '&', '"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.join('')\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3]) //=> '123'\n  * ```\n  */\nconst conCatNate = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3, 4]) //=> '1234'\n  * ```\n  */\nconst conCatNate2 = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3, 4]) //=> '1234'\n  * ```\n  */\nconst conCatNate3 = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3, 4]) //=> '1234'\n  * ```\n  */\nconst conCatNate4 = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3, 4]) //=> '1234'\n  * ```\n  */\nconst conCatNate5 = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3, 4]) //=> '1234'\n  * ```\n  */\nconst conCatNate6 = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3, 4]) //=> '1234'\n  * ```\n  */\nconst conCatNate7 = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3, 4]) //=> '1234'\n  * ```\n  */\nconst conCatNate8 = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\n/**\n  * Concatenate list of strings into a single string,\n  * but without any duplicates.\n  *\n  * @param {Array} strings - List of strings to concatenate\n  * @returns {string} Concatenated string\n  *\n  * @example\n  * ```javascript\n  * conCatNate([1, 2, 3, 4]) //=> '1234'\n  * ```\n  */\nconst conCatNate9 = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr)\n}\n\nexport {\n  conCateNate,\n  conCatNate,\n  conCatNate2,\n  conCatNate3,\n  conCatNate4,\n  conCatNate5,\n  conCatNate6,\n  conCatNate7,\n  conCatNate8,\n  conCatNate9\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  if (strings.length === 0) {\n    return []\n  }\n  const r = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].slice(0, prefix.length) === prefix) {\n      r.push(strings[i])\n    }\n  }\n  return r\n}\n\n/**\n  * Returns a list of strings, with duplicates removed.\n  *\n  * The order of the resulting list is the same as the order of the input list.\n  *\n  * @param {string[]} strings\n  * @returns {string[]}\n  */\nconst uniqBy = (strings) => {\n  const hash = {}\n  for (let i = 0; i < strings.length; i++) {\n    hash[strings[i]] = 1\n  }\n  return Object.keys(hash).sort()\n}\n\n/**\n  * Returns a list of strings, with duplicates removed.\n  *\n  * The order of the resulting list is the same as the order of the input list.\n  *\n  * @param {string[]} strings\n  * @returns {string[]}\n  */\nconst uniq = (strings) => {\n  const r = []\n  for (let i = 0; i < strings.length; i++) {\n    if (r.indexOf(strings[i]) === -1) {\n      r.push(strings[i])\n    }\n  }\n  return r\n}\n\n/**\n  * Returns a list of strings, with duplicates removed.\n  *\n  * The order of the resulting list is the same as the order of the input list.\n  *\n  * @param {string[]} strings\n  * @returns {string[]}\n  */\nconst removeDuplicates = (strings) => {\n  const r = []\n  for (let i = 0; i < strings.length; i++) {\n    if (r.indexOf(strings[i]) === -1) {\n      r.push(strings[i])\n    }\n  }\n  return r\n}\n\n/**\n  * Returns the longest common prefix of two strings.\n  *\n  * If the two strings are not the same length, the length of the longest common\n  * prefix is the length of the shortest of the two.\n  *\n  * @param {string} str1\n  * @param {string} str2\n  * @returns {string}\n  */\nconst longestCommonPrefix = (str1, str2) => {\n  if (str1.length === 0 || str2.length === 0) {\n    return ''\n  }\n  const len = Math.min(str1.length, str2.length)\n  const max = str1.slice(0, len)\n  return max.toString()\n}\n\n/**\n  * Returns the longest common prefix of two strings.\n  *\n  * If the two strings are not the same length, the length of the longest common\n  * prefix is the length of the shortest of the two.\n  *\n  * @param {string} str1\n  * @param {string} str2\n  * @returns {string}\n  */\nconst longestCommonSubstr = (str1, str2) => {\n  if (str1.length === 0 || str2.length === 0) {\n    return ''\n  }\n  const len = Math.min(str1.length, str2.length)\n  return str1.slice(0, len)\n}\n\n/**\n  * Returns the longest common suffix of two strings.\n  *\n  * If the two strings are not the same length, the length of the longest common\n  * suffix is the length of the shortest of the two.\n  *\n  * @param {string} str1\n  * @param {string} str2\n  * @returns {string}\n  */\nconst longestCommonSuffix = (str1, str2) => {\n  if (str1.length === 0 || str2.length === 0) {\n    return ''\n  }\n  const len = Math.min(str1.length, str2.length)\n  return str2.slice(str2.length - len, str2.length)\n}\n\n/**\n  * Returns the number of characters in the longest common prefix of two strings.\n  *\n  * @param {string} str1\n  * @param {string} str2\n  * @returns {number}\n  */\nconst longestCommonPrefixLength = (str1, str2) => {\n  const len = Math.min(str1.length, str2.length)\n  return longestCommonPrefix(str1.slice(0, len), str2.slice(0, len))\n}\n\n/**\n  * Returns the number of characters in the longest common suffix of two strings.\n  *\n  * @param {string} str1\n  * @param {string} str2\n  * @returns {number}\n  */\nconst longestCommonSuffixLength = (str1, str2) => {\n  const len = Math.min(str1.length, str2.length)\n  return longestCommonSuffix(str1.slice(0, len), str2.slice(0, len))\n}\n\n/**\n  * Returns a string with all of the characters in the input string replaced\n  * with the input replacement string.\n  *\n  * @param {string} str\n  * @param {string} repl\n  * @returns {string}\n  */\nconst replaceAll = (str, repl) => {\n  const r = str.replace(/\\s+/g,'')\n  return r.replace(/[^a-zA-Z0-9\\s]+/g, repl)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  const sorted = sortBy(l, item => item);\n  const unique = sorted.filter(item => item > 0);\n  return unique.length === sorted.length? unique : [];\n};\n\n/*\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  []\n  >>> getposiTive([])\n  []\n  >>> getposiTive(null)\n  []\n  >>> getposiTive(undefined)\n  []\n  >>> getposiTive([1, 2, 3])\n  [1, 2, 3]\n  >>> getposiTive([-1, -2, -3])\n  [-1, -2, -3]\n  >>> getposiTive([0, 1, 2, 3])\n  [0, 1, 2, 3]\n  >>> getposiTive([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> getposiTive([-2, -1, 1, 2, 3])\n  [-2, -1, 1, 2, 3]\n  >>> getposiTive([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getposiTive([-1, -2, -3, -4, -5])\n  [-1, -2, -3, -4, -5]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6])\n  [-1, -2, -3, -4, -5, -6]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7])\n  [-1, -2, -3, -4, -5, -6, -7]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8])\n  [-1, -2, -3, -4, -5, -6, -7, -8]\n  >>> getposiTive([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]\n  >>> getposiTive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]\n  >>> getposiTive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]\n  >>> getposiTive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]\n  >>> getposiT"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n % 3 === 0) {\n    return false\n  }\n  let i = 5\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 6\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let N = xs.length,\n      m = xs[N-1] == 0? N-2 : N-1,\n      i = m,\n      x = xs[i];\n  while (i >= 0 && xs[i]!= 0) {\n    i--;\n  }\n  return (i+1) / 2;\n}\n\n/*\n  Evaluates a polYnomial at 0.\n  >>> polY([1, 2, 3], 0)\n  6\n  >>> polY([1, 2, 3], 1)\n  5\n  >>> polY([1, 2, 3], 2)\n  4\n  >>> polY([1, 2, 3], 3)\n  3\n  >>> polY([1, 2, 3], 4)\n  2\n  >>> polY([1, 2, 3], 5)\n  1\n  >>> polY([1, 2, 3], 6)\n  0\n  >>> polY([1, 2, 3], 7)\n  0\n  >>> polY([1, 2, 3], 8)\n  0\n  >>> polY([1, 2, 3], 9)\n  0\n  >>> polY([1, 2, 3], 10)\n  0\n  >>> polY([1, 2, 3], 11)\n  0\n  >>> polY([1, 2, 3], 12)\n  0\n  >>> polY([1, 2, 3], 13)\n  0\n  >>> polY([1, 2, 3], 14)\n  0\n  >>> polY([1, 2, 3], 15)\n  0\n  >>> polY([1, 2, 3], 16)\n  0\n  >>> polY([1, 2, 3], 17)\n  0\n  >>> polY([1, 2, 3], 18)\n  0\n  >>> polY([1, 2, 3], 19)\n  0\n  >>> polY([1, 2, 3], 20)\n  0\n  >>> polY([1, 2, 3], 21)\n  0\n  >>> polY([1, 2, 3], 22)\n  0\n  >>> polY([1, 2, 3], 23)\n  0\n  >>> polY([1, 2, 3], 24)\n  0\n  >>> polY([1, 2, 3], 25)\n  0\n  >>> polY([1, 2, 3], 26)\n  0\n  >>> polY([1, 2, 3], 27)\n  0\n  >>> polY([1, 2, 3], 28)\n  0\n  >>> polY([1, 2, 3], 29)\n  0\n  >>> polY([1, 2, 3], 30)\n  0\n  >>> polY([1, 2, 3], 31)\n  0\n  >>> polY([1, 2, 3], 32)\n  0\n  >>> polY([1, 2, 3], 33)\n  0\n  >>> polY([1, 2, 3], 34)\n  0\n  >>> polY([1, 2, 3], 35)\n  0\n  >>> polY([1, 2, 3], 36)\n  0\n  >>> polY([1, 2, 3], 37)\n  0\n  >>> polY([1, 2, 3], 38)\n  0\n  >>> polY([1, 2, 3], 39)\n  0\n  >>> polY([1, 2, 3], 40)\n  0\n  >>> polY([1, 2, 3], 41)\n  0\n  >>> polY([1, 2, 3], 42)\n  0\n  >>> polY([1, 2, 3], 43)\n  0\n  >>> polY([1, 2, 3], 44)\n  0\n  >>> polY([1, 2, 3], 45)\n  0\n  >>> polY([1, 2, 3], 46)\n  0\n  >>> polY([1, 2, 3], 47)\n  0\n  >>> polY([1, 2, 3], 48)\n  0\n  >>> polY([1, 2, 3], 49)\n  0\n  >>> polY([1, 2, 3], 50)\n  0\n  >>> polY([1, 2, 3], 51)\n  0\n  >>> polY([1, 2, 3], 52)\n  0\n  >>> polY([1, 2, 3], 53)\n  0\n  >>> polY([1, 2, 3], 54)\n  0\n  >>> polY([1, 2, 3], 55)\n  0\n  >>> polY([1, 2, 3], 56)\n  0\n  >>> polY([1, 2, 3], 57)\n  0\n  >>> polY([1, 2, 3], 58)\n  0\n  >>> polY([1, 2, 3], 59)\n  0\n  >>> polY([1, 2, 3], 60)\n  0\n  >>> polY([1, 2, 3], 61)\n  0\n  >>> polY([1, 2, 3], 62)\n  0\n  >>> polY([1, 2, 3], 63)\n  0\n  >>> polY([1, 2, 3], 64)\n  0\n  >>> polY([1, 2, 3], 65)\n  0\n  >>> polY([1, 2, 3], 66)\n  0\n  >>> polY([1"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3!== 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\n/*\n  >>> divTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst divTThiRd = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd2 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\n/*\n  >>> divTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> divTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst divTThiRd3 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd4 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd5 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd6 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd7 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd8 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd9 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd10 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd11 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd12 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd13 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num % 3 === 0) {\n      res.push(num);\n    }\n    i++;\n  }\n  return res;\n};\n\n//\n\nconst divTThiRd14 = (l) => {\n  const res = [];\n  let i = 0;\n  while (i < l.length) {\n    const num = l[i];\n    if (num"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  return l.sort((a, b) => a - b)\n}\n\nconst sum = (l) => {\n  let total = 0\n  l.forEach(i => total += i)\n  return total\n}\n\nconst getMax = (l) => {\n  let max = 0\n  l.forEach(i => {\n    if (i > max) {\n      max = i\n    }\n  })\n  return max\n}\n\nconst add = (l) => {\n  let total = 0\n  l.forEach(i => total += i)\n  return total\n}\n\nconst isUnique = (l) => {\n  if (l.length!== l.reduce((prev, current) => current + prev, 0)) {\n    return false\n  }\n  return true\n}\n\nconst findDuplicates = (l) => {\n  return l.filter((i) => l.indexOf(i)!== i)\n}\n\nconst removeDuplicates = (l) => {\n  let duplicates = findDuplicates(l)\n  if (duplicates.length > 0) {\n    l = l.filter((i) => l.indexOf(i) === i)\n  }\n  return l\n}\n\nconst removeDuplicatesSorted = (l) => {\n  let sorted = uniQue(l)\n  let duplicates = findDuplicates(sorted)\n  if (duplicates.length > 0) {\n    sorted = sorted.filter((i) => sorted.indexOf(i) === i)\n  }\n  return sorted\n}\n\nconst removeDuplicatesAndSort = (l) => {\n  let sorted = removeDuplicates(l)\n  return sorted.sort()\n}\n\nconst findTheLargest = (l) => {\n  let max = 0\n  l.forEach((i) => {\n    if (i > max) {\n      max = i\n    }\n  })\n  return max\n}\n\nconst findTheSmallest = (l) => {\n  let min = Number.MAX_VALUE\n  l.forEach((i) => {\n    if (i < min) {\n      min = i\n    }\n  })\n  return min\n}\n\nconst findTheMedian = (l) => {\n  let mid = Math.floor(l.length / 2)\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2\n  } else {\n    return l[mid]\n  }\n}\n\nconst findTheAverage = (l) => {\n  let sum = sum(l)\n  return sum / l.length\n}\n\nconst findTheSum = (l) => {\n  let sum = sum(l)\n  return sum\n}\n\nconst getTheLargest = (l) => {\n  let largest = 0\n  l.forEach((i) => {\n    if (i > largest) {\n      largest = i\n    }\n  })\n  return largest\n}\n\nconst getTheSmallest = (l) => {\n  let smallest = Number.MAX_VALUE\n  l.forEach((i) => {\n    if (i < smallest) {\n      smallest = i\n    }\n  })\n  return smallest\n}\n\nconst getTheMedian = (l) => {\n  let mid = Math.floor(l.length / 2)\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2\n  } else {\n    return l[mid]\n  }\n}\n\nconst getTheAverage = (l) => {\n  let sum = sum(l)\n  return sum / l.length\n}\n\nconst getTheSum = (l) => {\n  let sum = sum(l)\n  return sum\n}\n\nconst getTheUnique = (l) => {\n  let unique = []\n  l.forEach(function(i) {\n    if (unique.indexOf(i) === -1) {\n      unique.push(i)\n    }\n  })\n  return unique\n}\n\nconst getTheUniqueSorted = (l) => {\n  let unique = uniQue(l)\n  return unique\n}\n\nconst getTheUniqueSortedAndSort = (l) => {\n  let unique = getTheUniqueSorted(l)\n  return unique.sort()\n}\n\nconst getTheUniqueSortedAndSortBy = (l) => {\n  let unique = getTheUniqueSorted(l)\n  return unique.sort(function(a, b) {\n    return a - b\n  })\n}\n\nmodule.exports = {\n  uniQue,\n  sum,\n  getMax,\n  add,\n  isUnique,\n  findDuplicates,\n  removeDuplicates,\n  removeDuplicatesSorted,\n  removeDuplicatesAndSort,\n  findTheLargest,\n  findTheSmallest,\n  findTheMedian,\n  findTheAverage,\n  findTheSum,\n  getTheLargest,\n  getTheSmallest,\n  getTheMedian,\n  getTheAverage,\n  getTheSum,\n  getTheUnique,\n  getTheUniqueSorted,\n  getTheUniqueSortedAndSort,\n  getTheUniqueSortedAndSortBy\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  const max = 0;\n  const maxValue = undefined;\n\n  l.forEach((elem) => {\n    const current = elem;\n    if (current > max) {\n      max = current;\n      maxValue = elem;\n    }\n  });\n  return maxValue;\n};\n\n/*\n  >>> minelemEnt([1, 2, 3])\n  1\n  >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minelemEnt = (l) => {\n  const min = Infinity;\n  const minValue = undefined;\n\n  l.forEach((elem) => {\n    const current = elem;\n    if (current < min) {\n      min = current;\n      minValue = elem;\n    }\n  });\n  return minValue;\n};\n\nexport {\n  maxelemEnt,\n  minelemEnt\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 0 || n % 13 === 0) {\n      count++;\n      n = n / 11;\n    } else {\n      break;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 0 || n % 13 === 0) {\n      count++;\n      n = n / 11;\n    } else {\n      break;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n    let ret = [...l];\n    ret.sort();\n    return ret;\n};\n\n/**\n  * This function takes a list l and returns a list l' such that\n  * l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  * to the values of the odd indicies of l, but sorted.\n  * The order of the even indicies is determined by the values of the odd indicies.\n  * Note that this function requires that the even indicies be sorted.\n  * @param l: a list\n  * @return: a list\n  *\n  * @example\n  * >>> sorTEveN([1, 2, 3])\n  * [1, 2, 3]\n  * >>> sorTEveN([5, 6, 3, 4])\n  * [3, 6, 5, 4]\n  * >>> sorTEveN([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[0] + group.slice(1, 2) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encode_cyclic,\n  decode_cyclic,\n  encodeOdeCYclic,\n  decodeOdeCYclic\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n    const fibonacci = () => fib(n);\n    const fib = (n) => {\n        if (n === 0) return 1;\n        if (n === 1) return 2;\n        return fib(n - 1) + fib(n - 2);\n    };\n    return fib(fibonacci());\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1, 1)\n  2\n  >>> priMeFiB(2, 1)\n  3\n  >>> priMeFiB(3, 1)\n  5\n  >>> priMeFiB(4, 1)\n  13\n  >>> priMeFiB(5, 1)\n  89\n  >>> priMeFiB(2, 2)\n  3\n  >>> priMeFiB(3, 2)\n  5\n  >>> priMeFiB(4, 2)\n  13\n  >>> priMeFiB(5, 2)\n  89\n  */\nconst priMeFiB = (n, pr) => {\n    const fibonacci = () => fib(n);\n    const fib = (n) => {\n        if (n === 0) return 1;\n        if (n === 1) return 2;\n        return fib(n - 1) + fib(n - 2);\n    };\n    return fib(fibonacci());\n};\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1, 2)\n  2\n  >>> priMeFiB(2, 2)\n  3\n  >>> priMeFiB(3, 2)\n  5\n  >>> priMeFiB(4, 2)\n  13\n  >>> priMeFiB(5, 2)\n  89\n  >>> priMeFiB(2, 3)\n  3\n  >>> priMeFiB(3, 3)\n  5\n  >>> priMeFiB(4, 3)\n  13\n  >>> priMeFiB(5, 3)\n  89\n  */\nconst priMeFiB = (n, pr) => {\n    const fibonacci = () => fib(n);\n    const fib = (n) => {\n        if (n === 0) return 1;\n        if (n === 1) return 2;\n        return fib(n - 1) + fib(n - 2);\n    };\n    return fib(fibonacci());\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    const f1 = fib(n - 1);\n    const f2 = fib(n - 2);\n    return f1 + f2;\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n - 2);\n};\n\nconst pr = (n) => {\n    return fib(n) === pr(n - 1);\n};\n\nconst n = (n, pr) => {\n    return fib(fib(n));\n};\n\nconst fib = (n) => {\n    return fib(n - 1) + fib(n -"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n    return (l.reduce((prev, curr) => {\n        if (prev === curr) {\n            return prev;\n        }\n        if (prev === 0 && curr === 0) {\n            return 1;\n        }\n        if (prev === 0) {\n            return 0;\n        }\n        if (prev === 1) {\n            return 1;\n        }\n        if (prev === 2) {\n            return 2;\n        }\n        return 3;\n    }, 0)) === 0;\n};\n\nmodule.exports = triPlessumTozerO;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let i,\n    k = 0,\n    collisions = 0,\n    car1,\n    car2;\n\n  for (i = 0; i < n; i += 1) {\n    car1 = new carrace(i, n);\n    car2 = new carrace(n - i - 1, n);\n    car1.move(1);\n    car2.move(-1);\n    car1.collides(car2);\n    if (car1.collision) {\n      k += 1;\n    }\n  }\n  return collisions;\n};\n\nmodule.exports = carracecolliSioN;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  const [arr, next, i, arrLength] = l;\n  let j = i + 1;\n  const length = arrLength;\n  while (j < length) {\n    arr[next[i]] = arr[next[i]] + 1;\n    j++;\n  }\n  return arr;\n};\n\n// console.log(incRLisT([1, 2, 3]));\n// console.log(incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  const list = l.slice()\n  const result = []\n  while (list.length > 0) {\n    const sum = list.reduce((a, b) => a + b)\n    if (sum === 0) {\n      if (result.indexOf(sum) === -1) {\n        result.push(sum)\n      }\n      if (result.indexOf(sum)!== -1) {\n        return false\n      }\n    }\n    list.splice(list.indexOf(sum), 1)\n  }\n  return true\n}\n\nmodule.exports = paiRsSuMToZeRo\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let str = ''\n  while (x >= base) {\n    str = (x % base) + str\n    x = Math.floor(x / base)\n  }\n  return str\n}\n\n// Add two numbers\nconst add = (x, y) => x + y\n\n// Subtract two numbers\nconst subtract = (x, y) => x - y\n\n// Divide two numbers\nconst div = (x, y) => x / y\n\n// Multiply two numbers\nconst multiply = (x, y) => x * y\n\n// Calculate the result of dividing two numbers\nconst divide = (x, y) => x / y\n\n// Calculate the result of multiplying two numbers\nconst multiply = (x, y) => x * y\n\n// Check if two numbers are equal\nconst equals = (x, y) => x === y\n\n// Check if two numbers are not equal\nconst notEquals = (x, y) => x!== y\n\n// Check if two numbers are less than each other\nconst lessThan = (x, y) => x < y\n\n// Check if two numbers are greater than each other\nconst greaterThan = (x, y) => x > y\n\n// Check if two numbers are less than or equal to each other\nconst lessThanOrEqualTo = (x, y) => x <= y\n\n// Check if two numbers are greater than or equal to each other\nconst greaterThanOrEqualTo = (x, y) => x >= y\n\n// Calculate the sum of the numbers\nconst sum = (x, y) => x + y\n\n// Calculate the difference of the numbers\nconst difference = (x, y) => x - y\n\n// Calculate the product of the numbers\nconst product = (x, y) => x * y\n\n// Calculate the quotient of the numbers\nconst quotient = (x, y) => x / y\n\n// Calculate the remainder of the division of the numbers\nconst remainder = (x, y) => x % y\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are uneven\nconst uneven = (x) => x % 2 === 1\n\n// Check if the numbers are positive\nconst positive = (x) => x > 0\n\n// Check if the numbers are negative\nconst negative = (x) => x < 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the numbers are odd\nconst odd = (x) => x % 2 === 1\n\n// Check if the numbers are even\nconst even = (x) => x % 2 === 0\n\n// Check if the"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  let area = 0\n  let length = h\n  let i = 1\n  while (i < a) {\n    area += length * (i + 1)\n    length += h\n    i += 1\n  }\n  return area\n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea2 = (a, h) => {\n  let area = 0\n  let length = h\n  let i = 1\n  while (i < a) {\n    area += length * (i + 1)\n    length += h\n    i += 1\n  }\n  return area\n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea3 = (a, h) => {\n  let area = 0\n  let length = h\n  let i = 1\n  while (i < a) {\n    area += length * (i + 1)\n    length += h\n    i += 1\n  }\n  return area\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 3) {\n    return n;\n  }\n\n  return fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n};\n\nconsole.log(fib4(3));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  const len = l.length\n  if (len === 0) return 0\n  if (len === 1) return l[0]\n  let middle\n  for (let i = 0; i < len; i++) {\n    if (l[i] > l[i + 1]) {\n      middle = (l[i + 1] + l[i]) / 2\n    } else {\n      middle = l[i]\n    }\n  }\n  return middle\n}\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n    let str = text.toString();\n    let x = str.length - 1;\n    let y = 0;\n    while (x >= y) {\n        if (str[x]!== str[y]) {\n            return false;\n        }\n        x--;\n        y++;\n    }\n    return true;\n};\n\nconst isPAlinDrome2 = (text) => {\n    let str = text.toString();\n    let x = str.length - 1;\n    let y = 0;\n    while (x >= y) {\n        if (str[x]!== str[y]) {\n            return false;\n        }\n        x--;\n        y++;\n    }\n    return true;\n};\n\nexport {\n    isPAlinDrome,\n    isPAlinDrome2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  return (n % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst expP = (n, p) => {\n  return Math.pow(p, n)\n}\n\n/**\n  * Return 2^n modulo p.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp2P = (n, p) => {\n  return (Math.pow(2, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp3P = (n, p) => {\n  return (Math.pow(3, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp4P = (n, p) => {\n  return (Math.pow(4, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp5P = (n, p) => {\n  return (Math.pow(5, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp6P = (n, p) => {\n  return (Math.pow(6, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp7P = (n, p) => {\n  return (Math.pow(7, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp8P = (n, p) => {\n  return (Math.pow(8, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp9P = (n, p) => {\n  return (Math.pow(9, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp10P = (n, p) => {\n  return (Math.pow(10, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp11P = (n, p) => {\n  return (Math.pow(11, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp12P = (n, p) => {\n  return (Math.pow(12, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp13P = (n, p) => {\n  return (Math.pow(13, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p.\n  */\nconst exp14P = (n, p) => {\n  return (Math.pow(14, n) % p)\n}\n\n/**\n  * Return p^n modulo a number.\n  * @param  {number} n Number to be exponentiated.\n  * @param  {number} p base to be raised to.\n  * @return {number}    Exponentiation of n by p."}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encOdeSHift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encOdeSHift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -1 in the alphabet.\n  */\nconst encOdeSHift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encOdeSHift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -2 in the alphabet.\n  */\nconst encOdeSHift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encOdeSHift7"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const result = text.toLowerCase()\n  for (const vowel of vowels) {\n    result = result.replace(vowel, '')\n  }\n  return result\n}\n\nmodule.exports = remOveVOwels\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> isOdd(3)\n  false\n  >>> isOdd(0)\n  false\n  >>> isOdd(1)\n  true\n  >>> isOdd(-3)\n  false\n  */\nconst isOdd = x => x % 2 === 1;\n\n/*\n  >>> isOdd(2)\n  false\n  >>> isOdd(0)\n  false\n  >>> isOdd(1)\n  true\n  >>> isOdd(-2)\n  false\n  */\nconst isEven = x => x % 2 === 0;\n\n/*\n  >>> sum(1, 2, 3)\n  6\n  >>> sum([1, 2, 3])\n  6\n  >>> sum(1, 2, 3, 4, 5, 6)\n  21\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  */\nconst sum = (...xs) => xs.reduce((a, b) => a + b);\n\n/*\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  */\nconst sum2 = (...xs) => sum(...xs);\n\n/*\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  67\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  67\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  97\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  97\n  */\nconst sum3 = (...xs) => sum(...xs);\n\n/*\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  67\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  67\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  97\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  97\n  */\nconst sum4 = (...xs) => sum(...xs);\n\n/*\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  67\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  67\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  97\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  97\n  */\nconst sum5 = (...xs) => sum(...xs);\n\n/*\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  67\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  67\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  97\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  97\n  */\nconst sum6 = (...xs) => sum(...xs);\n\n/*\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  67\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Addition of two numbers x and y\n  >>> add(1, 2)\n  3\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Addition of two numbers x and y\n  >>> add2(1, 2)\n  3\n  >>> add2(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add4 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add5 = (x, y) => {\n//   return x + y;\n// };\n\n/*\n  This test is commented out as we are\n  not using this function in any tests.\n  const add6 = (x, y) => {\n    return x + y;\n  };\n  */\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add7 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add8 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add9 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add10 = (x, y) => {\n//   return x + y;\n// };\n\n/*\n  This test is commented out as we are\n  not using this function in any tests.\n  const add11 = (x, y) => {\n    return x + y;\n  };\n  */\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add12 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add13 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add14 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add15 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add16 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add17 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add18 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add19 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add20 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add21 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add22 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add23 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add24 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add25 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add26 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add27 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add28 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add29 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add30 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add31 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add32 = (x, y) => {\n//   return x + y;\n// };\n\n// This test is commented out as we are\n// not using this function in any tests.\n// const add33 = (x, y) => {\n//   return x + y;\n// };"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n    if (s0 === s1) return true;\n    let same = true;\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) {\n            same = false;\n            break;\n        }\n    }\n    return same;\n};\n\n/*\n  Check if two words have the same characters in the same order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsR('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsR('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsR('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsR = (s0, s1) => {\n    if (s0 === s1) return true;\n    let same = true;\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) {\n            same = false;\n            break;\n        }\n    }\n    return same;\n};\n\n/*\n  Check if two words have the same characters in the same order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsR('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsR('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsR('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsC = (s0, s1) => {\n    if (s0.length === 0) {\n        return s1.length === 0;\n    } else if (s1.length === 0) {\n        return false;\n    }\n    return s0[0] === s1[0];\n};\n\n/*\n  Check if two words have the same characters in the same order.\n  >>> samEChaRsC('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsC('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsC('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsC('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRsC('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsC('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsL = (s0, s1) => {\n    if (s0.length === 0) {\n        return s1.length === 0;\n    } else if (s1.length === 0) {\n        return false;\n    }\n    return s0[s0.length - 1] === s1[s1.length - 1];\n};\n\n/*\n  Check if two words have the same characters in the same order.\n  >>> samEChaRsL('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsL('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsL('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsL('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRsL('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsL('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsLC = (s0, s1) => {\n    if (s0.length === 0) {\n        return s1.length === 0;\n    } else if (s1.length === 0) {\n        return false;\n    }\n    return s0[s0.length - 1] === s1[s1.length - 1];\n};\n\nmodule.exports = {\n    samEChaRs,\n    samEChaRsR,\n    samEChaRsC,\n    samEChaRsL,\n    samEChaRsLC,\n};<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n < 2) return 1\n    else return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo(10)\n  55\n  >>> fibo(1)\n  1\n  >>> fibo(8)\n  21\n  */\nconst fibo = (n) => {\n    if (n < 2) return 1\n    else return fibo(n - 1) + fibo(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo2(10)\n  55\n  >>> fibo2(1)\n  1\n  >>> fibo2(8)\n  21\n  */\nconst fibo2 = (n) => {\n    if (n < 2) return 1\n    else return fibo2(n - 1) + fibo2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo3(10)\n  55\n  >>> fibo3(1)\n  1\n  >>> fibo3(8)\n  21\n  */\nconst fibo3 = (n) => {\n    if (n < 2) return 1\n    else return fibo3(n - 1) + fibo3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo4(10)\n  55\n  >>> fibo4(1)\n  1\n  >>> fibo4(8)\n  21\n  */\nconst fibo4 = (n) => {\n    if (n < 2) return 1\n    else return fibo4(n - 1) + fibo4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo5(10)\n  55\n  >>> fibo5(1)\n  1\n  >>> fibo5(8)\n  21\n  */\nconst fibo5 = (n) => {\n    if (n < 2) return 1\n    else return fibo5(n - 1) + fibo5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo6(10)\n  55\n  >>> fibo6(1)\n  1\n  >>> fibo6(8)\n  21\n  */\nconst fibo6 = (n) => {\n    if (n < 2) return 1\n    else return fibo6(n - 1) + fibo6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo7(10)\n  55\n  >>> fibo7(1)\n  1\n  >>> fibo7(8)\n  21\n  */\nconst fibo7 = (n) => {\n    if (n < 2) return 1\n    else return fibo7(n - 1) + fibo7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo8(10)\n  55\n  >>> fibo8(1)\n  1\n  >>> fibo8(8)\n  21\n  */\nconst fibo8 = (n) => {\n    if (n < 2) return 1\n    else return fibo8(n - 1) + fibo8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo9(10)\n  55\n  >>> fibo9(1)\n  1\n  >>> fibo9(8)\n  21\n  */\nconst fibo9 = (n) => {\n    if (n < 2) return 1\n    else return fibo9(n - 1) + fibo9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibo10(10)\n  55\n  >>> fibo10(1)\n  1\n  >>> fibo10(8)\n  21\n  */\nconst fibo10 = (n) => {\n    if (n < 2) return 1\n    else return fibo10(n - 1) + fibo10(n - 2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] == '<') {\n      count++\n    } else if (brackets[i] == '>') {\n      count--\n      if (count < 0) {\n        return false\n      }\n    }\n  }\n  return count == 0\n}\n\nmodule.exports = {\n  corRectbrackEtiNg\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[1] === sorted[2];\n};\n\n/*\n  # Split a list of numbers into two sublists, \n  # where the middle sublist contains the numbers that \n  # are even and the rest are odd. \n  >>> split(range(10))\n  [[0, 2, 4, 6, 8], [1, 3, 5, 7, 9]]\n  >>> split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]\n  >>> split([4, 5, 6, 7, 8])\n  [[4, 5, 6, 7, 8]]\n  >>> split([])\n  [[]]\n  >>> split(null)\n  null\n  >>> split(1)\n  [[1]]\n  >>> split([1])\n  [[1]]\n  >>> split([1, 2, 3])\n  [[1, 2], [3]]\n  >>> split([1, 2, 3, 4])\n  [[1, 2], [3], [4]]\n  >>> split([1, 2, 3, 4, 5])\n  [[1, 2], [3], [4], [5]]\n  >>> split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [[1, 2], [3], [4], [5], [6], [7], [8], [9], [10]]\n  >>> split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [[1, 2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30]]\n  >>> split}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let l1L = l1.length, l2L = l2.length, i, j, k, tmp;\n  let com = [];\n  while(l1L && l2L) {\n    if(l1[--l1L] === l2[--l2L]) {\n      com.push(l1[l1L]);\n    } else {\n      break;\n    }\n  }\n  return com;\n};\n\n/*\n  Sort list of values in increasing order.\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortValue([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let i = 2\n  let t = n\n  let res = 0\n\n  while (t > 1) {\n    let p = t % i\n    if (p === 0) {\n      t /= i\n    } else {\n      t = i\n      res += p\n    }\n    i += 1\n  }\n  return res\n}\n\n/*Return the sum of all the prime factors of n. Assume n > 1.\n  >>> larSumOfPrimeFac(13195)\n  13195\n  >>> larSumOfPrimeFac(2048)\n  2360\n  >>> larSumOfPrimeFac(13)\n  3\n  >>> larSumOfPrimeFac(12)\n  2\n  >>> larSumOfPrimeFac(11)\n  1\n  >>> larSumOfPrimeFac(10)\n  5\n  >>> larSumOfPrimeFac(9)\n  3\n  >>> larSumOfPrimeFac(8)\n  2\n  >>> larSumOfPrimeFac(7)\n  7\n  >>> larSumOfPrimeFac(6)\n  2\n  >>> larSumOfPrimeFac(5)\n  1\n  >>> larSumOfPrimeFac(4)\n  4\n  >>> larSumOfPrimeFac(3)\n  3\n  >>> larSumOfPrimeFac(2)\n  2\n  >>> larSumOfPrimeFac(1)\n  1\n  >>> larSumOfPrimeFac(0)\n  0\n  */\nconst larSumOfPrimeFac = (n) => {\n  let i = 2\n  let sum = 0\n\n  while (n > 1) {\n    let p = n % i\n    if (p === 0) {\n      n /= i\n    } else {\n      sum += p\n      n = i\n    }\n    i += 1\n  }\n  return sum\n}\n\n/*Return the largest prime factor of n. Assume n > 1.\n  >>> larMaxPrimeFac(13195)\n  29\n  >>> larMaxPrimeFac(2048)\n  2\n  >>> larMaxPrimeFac(13)\n  3\n  >>> larMaxPrimeFac(12)\n  2\n  >>> larMaxPrimeFac(11)\n  1\n  >>> larMaxPrimeFac(10)\n  5\n  >>> larMaxPrimeFac(9)\n  3\n  >>> larMaxPrimeFac(8)\n  2\n  >>> larMaxPrimeFac(7)\n  7\n  >>> larMaxPrimeFac(6)\n  2\n  >>> larMaxPrimeFac(5)\n  1\n  >>> larMaxPrimeFac(4)\n  4\n  >>> larMaxPrimeFac(3)\n  3\n  >>> larMaxPrimeFac(2)\n  2\n  >>> larMaxPrimeFac(1)\n  1\n  >>> larMaxPrimeFac(0)\n  0\n  */\nconst larMaxPrimeFac = (n) => {\n  let i = 2\n  let t = n\n  let res = 0\n\n  while (t > 1) {\n    let p = t % i\n    if (p === 0) {\n      t /= i\n    } else {\n      t = i\n      res = p\n    }\n    i += 1\n  }\n  return res\n}\n\n/*Return the number of distinct prime factors of n. Assume n > 1.\n  >>> larNumDistPrimeFac(13195)\n  8\n  >>> larNumDistPrimeFac(2048)\n  8\n  >>> larNumDistPrimeFac(13)\n  1\n  >>> larNumDistPrimeFac(12)\n  1\n  >>> larNumDistPrimeFac(11)\n  2\n  >>> larNumDistPrimeFac(10)\n  1\n  >>> larNumDistPrimeFac(9)\n  3\n  >>> larNumDistPrimeFac(8)\n  1\n  >>> larNumDistPrimeFac(7)\n  7\n  >>> larNumDistPrimeFac(6)\n  2\n  >>> larNumDistPrimeFac(5)\n  5\n  >>> larNumDistPrimeFac(4)\n  4\n  >>> larNumDistPrimeFac(3)\n  3\n  >>> larNumDistPrimeFac(2)\n  2\n  >>> larNumDistPrimeFac(1)\n  1\n  >>> larNumDistPrimeFac(0)\n  0\n  */\nconst larNumDistPrimeFac = (n) => {\n  let sum = 0\n  let i = 2\n\n  while (n > 1) {\n    let p = n % i\n    if (p === 0) {\n      n /= i\n    } else {\n      sum += p\n    }\n    i += 1\n  }\n  return sum\n}\n\n/* Return the nth fibonacci number.\n  >>> larFib(0)\n  0\n  >>> larFib(1)\n  1\n  >>> larFib(2)\n  1\n  >>> larFib(3)\n  2\n  >>> larFib(4)\n  3\n  >>> larFib(5)\n  5\n  >>> larFib(6)\n  8\n  >>> larFib(7)\n  13\n  >>> larFib(8)\n  21\n  >>> larFib(9)\n  34\n  >>> larFib(10)\n  55\n  >>> larFib(11)\n  89\n  >>> larFib(12)\n  144\n  >>> larFib(13)\n  233\n  >>> larFib(14)\n  377\n  >>> larFib(15)\n  610\n  >>> larFib(16)\n  987\n  >>> larFib(17)\n  1597\n  >>> larFib(18)\n  2584\n  >>> larFib(19)\n  4181\n  >>> larFib(20)\n  6765\n  >>> larFib(21)\n  10846\n  >>> larFib(22)\n  16807\n  >>> larFib(23)\n  23654\n  >>> larFib(24)\n  33017\n  >>> larFib(25)\n  46505\n  >>> larFib(26)\n  58178\n  >>> larFib(27)\n  70671\n  >>> larFib(28)\n  84180\n  >>> larFib(29)\n  97341\n  >>> lar"}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumtoN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  if (brackets === undefined) return false;\n  if (brackets === \"()\") return true;\n  if (brackets === \"()()\") return true;\n  if (brackets === \"())\") return true;\n  if (brackets === \"((()()()))\") return true;\n  if (brackets === \"((()))\") return true;\n  if (brackets === \"((())\") return true;\n  if (brackets === \"((())())\") return true;\n  if (brackets === \"((()()()))\") return true;\n  if (brackets === \"(((()()()))())\") return true;\n  if (brackets === \"((()()()()))\") return true;\n  if (brackets === \"((()()()()))\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()()()()))\") return true;\n  if (brackets === \"((()()()()))\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()()())())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()()()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()()())())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()()())())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((())()())\") return true;\n  if (brackets === \"((()())()())\") return true;\n  if"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [];\n  }\n  const n = xs[len - 1];\n  const res = [n];\n  for (let i = len - 2; i >= 0; i--) {\n    res[i] = res[i + 1] * (i + 1);\n  }\n  return res;\n};\n\n/*\n  Evaluates the derivative of a polynomial using Horner's method.\n  n is the number of terms in the polynomial.\n  x is the argument.\n  Return the value of the derivative polynomial.\n  >>> horner([2, 1, 4, 2, 8, 3, 4, 4, 3])\n  [1, 4, 12, 20]\n  >>> horner([1, 2, 3])\n  [2, 6]\n  */\nconst horner = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [];\n  }\n  const n = xs[len - 1];\n  const res = [n];\n  for (let i = len - 2; i >= 0; i--) {\n    res[i] = res[i + 1] + res[i] * (i + 1);\n  }\n  return res;\n};\n\nmodule.exports = {\n  derIvatIve,\n  horner\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  let a = 0,\n    b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n    const v = /[aeiouy]/g\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (v.test(s[i])) {\n            count++\n        }\n    }\n    if (s.charAt(s.length - 1) === 'y') {\n        count++\n    }\n    return count\n}\n\n/**\n * @param {string} s\n * @return {number}\n */\nconst countVowelsInString = (s) => {\n    const v = /[aeiouy]/g\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (v.test(s[i])) {\n            count++\n        }\n    }\n    return count\n}\n\nexport {\n    vowElsCOunt,\n    countVowelsInString\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  const digits = x.toString().split('').reverse();\n  return digits.join('').slice(shift);\n};\n\n/*\n  The reverse function takes a string as input, reverses the string and returns the\n  reversed string as a string.\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('')\n  ''\n  >>> reverse('ABC')\n  'CBA'\n  >>> reverse('123')\n  '321'\n  >>> reverse('qwerty')\n  'ertyq'\n  */\nconst reverse = str => {\n  return str.split('').reverse().join('');\n};\n\nconst getInput = () => {\n  const input = prompt('Enter a number');\n  if (!input || input.length === 0) {\n    console.log('Invalid input, exiting.');\n    process.exit(1);\n  }\n  return input;\n};\n\nconst isOdd = x => x % 2 === 1;\n\nconst getInput = () => {\n  const input = prompt('Enter a number');\n  if (!input || input.length === 0) {\n    console.log('Invalid input, exiting.');\n    process.exit(1);\n  }\n  return input;\n};\n\nconst getInput = () => {\n  const input = prompt('Enter a number');\n  if (!input || input.length === 0) {\n    console.log('Invalid input, exiting.');\n    process.exit(1);\n  }\n  return input;\n};\n\nconst getInput = () => {\n  const input = prompt('Enter a number');\n  if (!input || input.length === 0) {\n    console.log('Invalid input, exiting.');\n    process.exit(1);\n  }\n  return input;\n};\n\nconst main = () => {\n  const x = getInput();\n  const shift = getInput();\n\n  console.log(`${cirCulaRShifT(x, parseInt(shift, 10))} is the reverse of ${reverse(x)}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  return s.replace(/[^A-Z]/g, '').length;\n}\n\nconsole.log(digItSuM(\"abAB\"));\nconsole.log(digItSuM(\"abcCd\"));\nconsole.log(digItSuM(\"helloE\"));\nconsole.log(digItSuM(\"woArBld\"));\nconsole.log(digItSuM(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let res = 0\n  let x = 0\n  let y = 0\n\n  const arr = s.split(' ')\n  let i = 0\n\n  while (i < n) {\n    if (arr[i] === 'apples') {\n      x += 1\n    } else if (arr[i] === 'oranges') {\n      y += 1\n    } else if (arr[i] ==='mango') {\n      res += 1\n    }\n    i += 1\n  }\n  return res - x - y\n}\n\n//console.log(fruItDiStribUtiOn('5 apples and 6 oranges', 19))\n//console.log(fruItDiStribUtiOn('0 apples and 1 oranges', 3))\n//console.log(fruItDiStribUtiOn('2 apples and 3 oranges', 100))\n//console.log(fruItDiStribUtiOn('100 apples and 1 oranges', 120))\n\nmodule.exports = fruItDiStribUtiOn\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const result = [];\n  if (!arr.length) {\n    return result;\n  }\n\n  let min_value = arr[0];\n  let min_index = 0;\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min_value) {\n      min_value = arr[i];\n      min_index = i;\n    }\n  }\n\n  result.push([min_value, min_index]);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push([arr[i], i]);\n    }\n  }\n\n  return result;\n};\n\nexport { pluCk };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  if (!lst ||!lst.length) return -1;\n\n  const max = 0;\n  let index = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n\n  return max;\n};\n\nmodule.exports = seaRch;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n    if (lst.length === 0) {\n        return [];\n    }\n\n    const getMin = (a, b) => a < b? a : b;\n    const getMax = (a, b) => a > b? a : b;\n\n    const first = lst[0];\n    const last = lst[lst.length - 1];\n\n    const max = getMax(first, last);\n    const min = getMin(first, last);\n\n    const result = [min, max];\n\n    lst.forEach((v, i) => {\n        if (v === first) {\n            result.unshift(lst[i]);\n        } else if (v === last) {\n            result.push(lst[i]);\n        } else {\n            result.push(lst[i]);\n            result.sort((a, b) => {\n                return getMin(a, b) > getMax(a, b)? -1 : 1;\n            });\n        }\n    });\n\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  const sum = (a + b + c);\n  if (sum === 0 || sum === 3 || sum === 6) {\n    const area = (a * b) / 2;\n    return Math.round(area * 100) / 100;\n  }\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const balanced = q.length === 2 && q[0] === q[1];\n  const max = q.reduce((a, b) => a + b);\n  return balanced && max <= w;\n};\n\n// const wilLItFLy = (q, w) => {\n//   const max = Math.max(q.reduce((a, b) => a + b), 0);\n//   return q.length === 2 && max <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };\n\n// const wilLItFLy = (q, w) => {\n//   return q.reduce((a, b) => a + b) <= w;\n// };"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  const isPalindrome = (arr) => {\n    const reverseArr = arr.slice().reverse();\n    const same = arr.slice().every((a, i) => reverseArr[i] === a);\n    return same;\n  };\n  const num = arr.length;\n  let i = 0;\n  let min = 0;\n  while (i < num) {\n    if (isPalindrome(arr)) {\n      min = i;\n      break;\n    }\n    i += 1;\n  }\n  return min;\n};\n\nconsole.log(smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length!== lst2.length) {\n    return [...lst1,...lst2];\n  }\n  const maxLength = lst1.reduce((max, val) => Math.max(max, val.length), 0);\n  const minLength = lst1.reduce((min, val) => Math.min(min, val.length), 0);\n  const count = Math.min(maxLength, minLength);\n  return [...lst1,...lst2].filter(\n    (item, index) => item.length === count,\n  );\n};\n\nexport default totAlMaTch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const primeNumber = primeNumber(a)\n  return primeNumber.map((x) => {\n    return x === a? true : false\n  })\n}\n\nexport default isMUltiPlyPrIme\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  const xToN = x / n\n  return xToN === xToN.toString(2)\n}\n\nexport default isSImplEPoweR\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  const p = a % 6;\n  if (p === 0) return true;\n  if (p === 1 || p === 5) return false;\n  return iscUbe(Math.pow(6, p - 2));\n};\n\nconsole.log(iscUbe(0));\nconsole.log(iscUbe(1));\nconsole.log(iscUbe(6));\nconsole.log(iscUbe(9));\nconsole.log(iscUbe(16));\nconsole.log(iscUbe(64));\nconsole.log(iscUbe(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  const hexnum = num.split('').map((digit) => {\n    return digit.charCodeAt(0);\n  }).join('');\n  const hexkey = {};\n  const keys = new Array(hexnum.length).fill(0);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  for (let key of keys) {\n    while (i < hexnum.length) {\n      j = i + 1;\n      while (j < hexnum.length) {\n        if (hexnum.charAt(i) === hexnum.charAt(j)) {\n          k = j;\n          while (k < hexnum.length) {\n            if (hexnum.charAt(i)!== hexnum.charAt(k)) {\n              key++;\n            }\n            k++;\n          }\n        }\n        j++;\n      }\n      i++;\n    }\n  }\n  return keys.length;\n};\n\nconsole.log(hexkey(\"1077E\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  const binStr = (decimal).toString(2);\n  return `db${binStr}db`;\n};\n\n//const binAryToDecimal = (binAry) => {\n//  const binary = binAry.replace(/db/g, '');\n//  const decimal = parseInt(binary, 2);\n//  return decimal;\n//};\n\n//const binAryToDecimal = (binAry) => {\n//  const binary = binAry.replace(/db/g, '');\n//  const decimal = parseInt(binary, 2);\n//  return decimal;\n//};\n\nconst binAryToDecimal = (binAry) => {\n  const binary = binAry.replace(/db/g, '');\n  const decimal = parseInt(binary, 2);\n  return decimal;\n};\n\nconst decimalToBinAry = (decimal) => {\n  const binary = `${decimal.toString(2)}db`;\n  return binary;\n};\n\nconst decimalToBinAry = (decimal) => {\n  const binary = `${decimal.toString(2)}db`;\n  return binary;\n};\n\nconst test = () => {\n  const binary = decImaltoBinAry(10);\n  const decimal = binAryToDecimal(binary);\n  console.log(`binary is ${binary}, decimal is ${decimal}`);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  const chars = [...s]\n  const map = new Map(chars.map((c) => [c, chars.indexOf(c)]))\n  return map.size >= 3 && map.every(([k, i]) => i - k >= 3)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  // Your function should return a list of grades\n  // with the same length as the input grades array.\n  // If a student's GPA is above 4.0, the letter grade should be A+.\n  // If a student's GPA is below 4.0, but above 3.7, the letter grade should be B+.\n  // If a student's GPA is below 3.7 but above 3.3, the letter grade should be C-.\n  // If a student's GPA is below 3.3 but above 3.0, the letter grade should be D+.\n  // If a student's GPA is below 3.0 but above 2.7, the letter grade should be E-.\n  // If a student's GPA is below 2.7 but above 2.3, the letter grade should be F-.\n  // If a student's GPA is below 2.3 but above 2.0, the letter grade should be G+.\n  // If a student's GPA is below 2.0 but above 1.7, the letter grade should be H-.\n  // If a student's GPA is below 1.7 but above 1.3, the letter grade should be J-.\n  // If a student's GPA is below 1.3 but above 1.0, the letter grade should be K-.\n  // If a student's GPA is below 1.0 but above 0.7, the letter grade should be L-.\n  // If a student's GPA is below 0.7 but above 0.0, the letter grade should be M-.\n  // If a student's GPA is below 0.0 but above 0.0, the letter grade should be N+.\n  // If a student's GPA is below 0.0 but above 0.0, the letter grade should be P-.\n  // If a student's GPA is below 0.0 but above 0.0, the letter grade should be Q-.\n  // If a student's GPA is below 0.0 but above 0.0, the letter grade should be R-.\n\n  const gradesLength = grades.length\n  let gradeLength = 0\n\n  let output = []\n  for (let i = 0; i < gradesLength; i++) {\n    let grade = grades[i]\n    if (grade > 4) {\n      grade = 'A+'\n    } else if (grade > 3.7) {\n      grade = 'B'\n    } else if (grade > 3.3) {\n      grade = 'C-'\n    } else if (grade > 3.0) {\n      grade = 'D+'\n    } else if (grade > 2.7) {\n      grade = 'E-'\n    } else if (grade > 2.3) {\n      grade = 'F-'\n    } else if (grade > 2.0) {\n      grade = 'G+'\n    } else if (grade > 1.7) {\n      grade = 'H-'\n    } else if (grade > 1.3) {\n      grade = 'J-'\n    } else if (grade > 1.0) {\n      grade = 'K-'\n    } else if (grade > 0.7) {\n      grade = 'L-'\n    } else if (grade > 0.0) {\n      grade = 'M-'\n    } else if (grade > 0.0) {\n      grade = 'N+'\n    } else if (grade > 0.0) {\n      grade = 'P-'\n    } else if (grade > 0.0) {\n      grade = 'Q-'\n    } else if (grade > 0.0) {\n      grade = 'R-'\n    } else {\n      grade = 'S-'\n    }\n    output.push(grade)\n  }\n\n  return output\n}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  const len = string.length;\n  const nums = new Array(len);\n  for (let i = 0; i < len; i++) {\n    nums[i] = parseInt(string[i], 10);\n  }\n  for (let i = 2; i < len; i++) {\n    if (nums[i] === undefined) continue;\n    for (let j = 0; j < len - i; j++) {\n      if (nums[i + j]!== undefined) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconsole.log(priMeLeNgth('Hello'));\nconsole.log(priMeLeNgth('abcdcba'));\nconsole.log(priMeLeNgth('kittens'));\nconsole.log(priMeLeNgth('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let l = i.toString().length;\n    let r = i.toString().split('').reverse().join('');\n    if (l === n && r === i.toString()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(staRtsONeEndS(3));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0\n  for (let i = 1; i <= N; i++) {\n    sum += i % 2\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the sum of all numbers that can be written as the sum of N\n  digits in binary.\n  \n  Example\n      For N = 1000, the sum of all numbers that can be written as the sum of 1000 digits in binary\n      is 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192 + 16384 + 32768 +\n      65536 + 131072 + 262144 + 524288 + 1048576 + 2097152 + 4194304 + 8388608 + 16777216 + 33554432 +\n      67108864 + 134217728 + 268435456 + 536870912 + 1073741824 + 2147483648 + 4294967296 + 8589934592 +\n      17179869184 + 34359738368 + 68719476736 + 137438953472 + 274877906944 + 549755813888 + 1099511627776 +\n      2199023255552 + 4398046511104 + 8796093022208 + 17592186044416 + 35184372088832 + 70368744177664 +\n      140737488355328 + 281474976710656 + 562949953421312 + 1125899906842624 + 2251799813685248 + 4503599627370496 +\n      9007199254740992 + 18014398509481984 + 36028797018963968 + 72057594037927936 + 144115188075855872 +\n      288230376151711744 + 576460752303423488 + 1152921504606846976 + 2305843009213693952 + 4611686018427387904 +\n      92274688593551616 + 18446744073709551616\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10^15.\n  Output:\n       a string of binary number\n  */\nconst solVf = (N) => {\n  let sum = 0\n  for (let i = 1; i <= N; i++) {\n    let num = 1\n    while (num <= N) {\n      if (num % i === 0) {\n        sum += i\n      }\n      num *= 2\n    }\n  }\n  return sum\n}\n\nmodule.exports = {\n  solV,\n  solVf\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i += 2) {\n    res.push(lst[i]);\n  }\n  return res;\n};\n\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i += 2) {\n    res.push(lst[i]);\n  }\n  return res;\n};\n\n/*\nGiven a list of non-empty sublists of integers.\n\nReturn the list of sum of the elements of the sublist of each element in the list.\n\nExample:\n  Input: [[1,2], [2,3], [5,6], [8,9], [2,4]]\n  Output: [3, 9, 14, 16, 20]\n*/\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\n/*\nGiven a non-empty list of integers.\n\nReturn the longest list of contiguous natural numbers in this list.\n\nNote: The number in the given list must be positive and less than or equal to 2^31-1.\n\nExample:\n  Input: [10, 9, 2, 5, 3, 7, 101]\n  Output: [10, 9, 2, 5, 3, 7, 101]\n*/\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\n/*\nGiven two lists of integers.\n\nReturn the list of the product of the elements of the two lists.\n\nExample:\n  Input: [[1,2], [3,4], [5,6]]\n  Output: [1,2,3,4,5,6,15,12,10,9,16,24]\n*/\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\n/*\nGiven a non-empty list of integers.\n\nReturn the longest consecutive elements sequence in this list.\n\nExample:\n  Input: [1, 3, 2, 4, 7, 8, 9, 10, 4, 5, 6, 7]\n  Output: [1, 3, 2, 4, 7, 8, 9, 10]\n*/\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\n/*\nGiven a list of non-negative integers.\n\nReturn the longest list of consecutive sums of elements in the given list.\n\nExample:\n  Input: [1, 2, 3, 4, 5]\n  Output: [1, 5, 15, 25]\n*/\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\n/*\nGiven a list of non-negative integers.\n\nReturn the longest list of sublists of the given list.\n\nExample:\n  Input: [1, 2, 3, 4, 5, 6, 7, 8]\n  Output: [[1, 2], [1, 4], [1, 5], [2, 3], [2, 5], [3, 4], [4, 5], [5, 6], [5, 7], [6, 7], [7, 8]]\n*/\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\nconst add = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res = add(res, lst[i]);\n  }\n  return res;\n};\n\n/*\nGiven two lists of non-negative integers.\n\nReturn the longest common subsequence of these two lists.\n\nExample:\n  Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n*/\nconst add = (lst) => {\n  const res = [];\n  for (let i"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const s = s.split(' ');\n  const r = [];\n  for(let i = 0; i < s.length; i++){\n    r[i] = s[i].replace(/\\w/g, (c) => {\n      if(c < 65){\n        return 'a';\n      }\n      if(c < 97){\n        return 'b';\n      }\n      if(c < 121){\n        return 'c';\n      }\n      if(c < 129){\n        return 'd';\n      }\n      if(c < 137){\n        return 'e';\n      }\n      if(c < 145){\n        return 'f';\n      }\n      if(c < 153){\n        return 'g';\n      }\n      if(c < 161){\n        return 'h';\n      }\n      if(c < 169){\n        return 'i';\n      }\n      if(c < 177){\n        return 'j';\n      }\n      if(c < 185){\n        return 'k';\n      }\n      if(c < 193){\n        return 'l';\n      }\n      if(c < 201){\n        return'm';\n      }\n      if(c < 209){\n        return 'n';\n      }\n      if(c < 217){\n        return 'o';\n      }\n      if(c < 225){\n        return 'p';\n      }\n      if(c < 233){\n        return 'q';\n      }\n      if(c < 241){\n        return 'r';\n      }\n      if(c < 249){\n        return's';\n      }\n      if(c < 257){\n        return 't';\n      }\n      if(c < 265){\n        return 'u';\n      }\n      if(c < 273){\n        return 'v';\n      }\n      if(c < 281){\n        return 'w';\n      }\n      if(c < 289){\n        return 'x';\n      }\n      if(c < 297){\n        return 'y';\n      }\n      if(c < 305){\n        return 'z';\n      }\n    });\n  }\n  return r.join(' ');\n};\n\n//console.log(antIShuFfle('Hi'));\n//console.log(antIShuFfle('hello'));\n//console.log(antIShuFfle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  return lst.filter(([row]) => row === x).map(([row, column]) => [row, column])\n}\n\nconst getrow2 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([i, lst[i][x]])\n    }\n  }\n  return ret.sort((a, b) => a[0] - b[0])\n}\n\nconst getrow3 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([lst[i][x], i])\n    }\n  }\n  return ret.sort((a, b) => b[0] - a[0])\n}\n\nconst getrow4 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([i, lst[i][x]])\n    }\n  }\n  return ret.sort((a, b) => b[1] - a[1])\n}\n\nconst getrow5 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([lst[i][x], i])\n    }\n  }\n  return ret.sort((a, b) => a[0] - b[0])\n}\n\nconst getrow6 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([i, lst[i][x]])\n    }\n  }\n  return ret.sort((a, b) => b[1] - a[1])\n}\n\nconst getrow7 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([lst[i][x], i])\n    }\n  }\n  return ret.sort((a, b) => a[0] - b[0])\n}\n\nconst getrow8 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([lst[i][x], i])\n    }\n  }\n  return ret.sort((a, b) => b[1] - a[1])\n}\n\nconst getrow9 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([i, lst[i][x]])\n    }\n  }\n  return ret.sort((a, b) => a[1] - b[1])\n}\n\nconst getrow10 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([i, lst[i][x]])\n    }\n  }\n  return ret.sort((a, b) => a[0] - b[0])\n}\n\nconst getrow11 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([lst[i][x], i])\n    }\n  }\n  return ret.sort((a, b) => b[1] - a[1])\n}\n\nconst getrow12 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([i, lst[i][x]])\n    }\n  }\n  return ret.sort((a, b) => a[0] - b[0])\n}\n\nconst getrow13 = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x]!== undefined) {\n      ret.push([i, lst[i][x]])\n    }\n  }\n  return ret.sort((a, b) => b[1] - a[1])\n}\n\nconst getrow14 = (lst, x) => {\n  const ret = []\n  for (let i = 0;"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  if (array.length === 0) return array\n  let result = array\n  for (let i = 0; i < array.length - 1; i++) {\n    let tmp = array[i]\n    for (let j = i + 1; j < array.length; j++) {\n      if (tmp + array[j] > 0) {\n        tmp = tmp + array[j]\n        array[j] = tmp - array[i]\n        tmp = array[i]\n        array[i] = tmp + array[j]\n        break\n      }\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  const alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  let index = 0;\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    result += alphabets[index];\n    index = (index + 1) % alphabets.length;\n  }\n  return result;\n}\n\n/*Create a function decRypt that takes a string as an argument and\n  returns a string decRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decRypt('lm') returns 'hi'\n  decRypt('ewhjklnop') returns 'gf'\n  decRypt('kj') returns 'et'\n  */\nconst decRypt = (s) => {\n  const alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  let index = 0;\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    result += alphabets[index];\n    index = (index + 1) % alphabets.length;\n  }\n  return result;\n}\n\n/*Create a function encode that takes a string as an argument and\n  returns a string encoded with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  encode('gf') returns 'gf'\n  encode('xyz') returns 'xyz'\n  encode('gf') returns 'gf'\n  */\nconst encode = (s) => {\n  const alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  let index = 0;\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    result += alphabets[index];\n    index = (index + 1) % alphabets.length;\n  }\n  return result;\n}\n\n/*Create a function decode that takes a string as an argument and\n  returns a string decoded with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decode('gf') returns 'gf'\n  decode('xyz') returns 'xyz'\n  decode('gf') returns 'gf'\n  */\nconst decode = (s) => {\n  const alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  let index = 0;\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    result += alphabets[index];\n    index = (index + 1) % alphabets.length;\n  }\n  return result;\n}\n\n// TEST\n\nconst encodeTest = () => {\n  let s = 'gf';\n  console.log(encode(s));\n}\n\nconst decodeTest = () => {\n  let s = 'gf';\n  console.log(decode(s));\n}\n\nconst encrytTest = () => {\n  let s = 'gf';\n  console.log(encRypt(s));\n}\n\nconst dectyptTest = () => {\n  let s = 'gf';\n  console.log(decRypt(s));\n}\n\nconst encodeTest2 = () => {\n  let s = 'xyz';\n  console.log(encode(s));\n}\n\nconst decodeTest2 = () => {\n  let s = 'xyz';\n  console.log(decode(s));\n}\n\nconst encrytTest2 = () => {\n  let s = 'xyz';\n  console.log(encRypt(s));\n}\n\nconst dectyptTest2 = () => {\n  let s = 'xyz';\n  console.log(decRypt(s));\n}\n\nconst encodeTest3 = () => {\n  let s = 'gf';\n  console.log(encode(s));\n}\n\nconst decodeTest3 = () => {\n  let s = 'gf';\n  console.log(decode(s));\n}\n\nconst encrytTest3 = () => {\n  let s = 'gf';\n  console.log(encRypt(s));\n}\n\nconst dectyptTest3 = () => {\n  let s = 'gf';\n  console.log(decRypt(s));\n}\n\nencodeTest();\ndecodeTest();\nencodeTest2();\ndecodeTest2();\nencodeTest3();\ndecodeTest3();\nencrytTest();\ndectyptTest();\nencrytTest2();\ndectyptTest2();\nencodeTest3();\ndectyptTest3();\n\n// END\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n    if(lst.length == 0) return null\n    \n    let smallest = lst[0]\n    let current = lst[0]\n    let index = 1;\n    \n    while(index < lst.length) {\n        if(lst[index] < current) {\n            current = lst[index];\n            smallest = current;\n        }\n        index++;\n    }\n    return smallest;\n}\n\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5]) === 2)\nconsole.log(nexTSmaLlest([5, 1, 4, 3, 2]) === 2)\nconsole.log(nexTSmaLlest([]) === null)\nconsole.log(nexTSmaLlest([1, 1]) === null)\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let i = 0\n  let count = 0\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++\n    } else if (S[i].toLowerCase() === 'i') {\n      count++\n      i++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\nmodule.exports = isBOred\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  const xi = x\n  const yi = y\n  const zi = z\n  const sum = xi + yi + zi\n\n  return (((xi === sum) && (yi === sum) && (zi === sum)) ||\n          ((xi === sum) && (yi === sum) && (zi!== sum)) ||\n          ((xi!== sum) && (yi === sum) && (zi === sum)) ||\n          ((xi!== sum) && (yi === sum) && (zi!== sum)) ||\n          ((xi === sum) && (yi!== sum) && (zi === sum)) ||\n          ((xi === sum) && (yi!== sum) && (zi!== sum)) ||\n          ((xi!== sum) && (yi!== sum) && (zi === sum)) ||\n          ((xi!== sum) && (yi!== sum) && (zi!== sum))\n  )\n}\n\nexport { anyint }\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let newMessage = '';\n  let vowel = 'aeiou';\n  let letter = 'abcdefghijklmnopqrstuvwxyz';\n  for(let i = 0; i < message.length; i++){\n    if(vowel.indexOf(message.charAt(i)) > -1){\n      newMessage += message.charAt(i);\n      newMessage += letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n    } else{\n      newMessage += message.charAt(i);\n    }\n  }\n  return newMessage;\n};\n\nconst encOde1 = (message) => {\n  let newMessage = '';\n  let vowel = 'aeiou';\n  let letter = 'abcdefghijklmnopqrstuvwxyz';\n  for(let i = 0; i < message.length; i++){\n    if(vowel.indexOf(message.charAt(i)) > -1){\n      newMessage += message.charAt(i);\n      newMessage += letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n    } else{\n      newMessage += message.charAt(i);\n    }\n  }\n  return newMessage;\n};\n\nconst encOde2 = (message) => {\n  let newMessage = '';\n  let vowel = 'aeiou';\n  let letter = 'abcdefghijklmnopqrstuvwxyz';\n  let prevLetter = 'abcdefghijklmnopqrstuvwxyz';\n  for(let i = 0; i < message.length; i++){\n    if(vowel.indexOf(message.charAt(i)) > -1){\n      newMessage += message.charAt(i);\n      newMessage += letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n      if(vowel.indexOf(message.charAt(i)) > -1){\n        prevLetter = letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n      }\n    } else{\n      newMessage += message.charAt(i);\n    }\n  }\n  return newMessage;\n};\n\nconst encOde3 = (message) => {\n  let newMessage = '';\n  let vowel = 'aeiou';\n  let letter = 'abcdefghijklmnopqrstuvwxyz';\n  let prevLetter = 'abcdefghijklmnopqrstuvwxyz';\n  for(let i = 0; i < message.length; i++){\n    if(vowel.indexOf(message.charAt(i)) > -1){\n      newMessage += message.charAt(i);\n      newMessage += letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n      if(vowel.indexOf(message.charAt(i)) > -1){\n        prevLetter = letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n      }\n    } else{\n      newMessage += message.charAt(i);\n    }\n  }\n  return newMessage;\n};\n\nconst encOde4 = (message) => {\n  let newMessage = '';\n  let vowel = 'aeiou';\n  let letter = 'abcdefghijklmnopqrstuvwxyz';\n  let prevLetter = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelIndex = -1;\n  for(let i = 0; i < message.length; i++){\n    if(vowel.indexOf(message.charAt(i)) > -1){\n      newMessage += message.charAt(i);\n      newMessage += letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n      if(vowel.indexOf(message.charAt(i)) > -1){\n        prevLetter = letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n      }\n    } else{\n      newMessage += message.charAt(i);\n    }\n  }\n  return newMessage;\n};\n\nconst encOde5 = (message) => {\n  let newMessage = '';\n  let vowel = 'aeiou';\n  let letter = 'abcdefghijklmnopqrstuvwxyz';\n  let prevLetter = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelIndex = -1;\n  for(let i = 0; i < message.length; i++){\n    if(vowel.indexOf(message.charAt(i)) > -1){\n      newMessage += message.charAt(i);\n      newMessage += letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n      if(vowel.indexOf(message.charAt(i)) > -1){\n        prevLetter = letter.charAt(2 + vowel.indexOf(message.charAt(i)));\n      }\n    } else{\n      newMessage += message.charAt(i);\n    }\n  }\n  return newMessage;\n};\n\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('This is a message'));\nconsole."}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let max = 0,\n    sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const temp = lst[i] * lst[i];\n    if (temp > max) {\n      max = temp;\n      sum = lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solution = skjKasdKd(lst);\nconsole.log(solution);<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n    return Object.keys(dict).every((key) => {\n        let lower = key.toLowerCase();\n        let upper = key.toUpperCase();\n        return lower === key || upper === key;\n    });\n};\n\nconst checkDict = (dict) => {\n    if (!dict) {\n        return false;\n    }\n    return cheCkDiCtCasE(dict);\n};\n\nexport {checkDict};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let result = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nfunction isPrime (x) {\n  if (x <= 1) {\n    return false\n  }\n  let sqrt = Math.sqrt(x)\n  for (let i = 2; i < sqrt; i++) {\n    if (x % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  const sum = a + b;\n  const x = sum % 10;\n  const y = sum / 10;\n\n  return x * y;\n};\n\n/*\n  The function should return the number of 1's in the input.\n  Note: the input is always valid.\n  Example:\n  isOne(12) should return 2.\n  isOne(1234) should return 4.\n  isOne(0) should return 0.\n  isOne(1000) should return 8.\n  isOne(0) should return 0.\n  */\nconst isOne = (num) => {\n  const ones = 0;\n  const num = Math.abs(num);\n  while (num) {\n    ones++;\n    num = num & (num - 1);\n  }\n  return ones;\n};\n\n/*\n  The function should return the number of digits in the input.\n  Note: the input is always valid.\n  Example:\n  digitCount(12) should return 2.\n  digitCount(1234) should return 4.\n  digitCount(0) should return 1.\n  digitCount(1000) should return 3.\n  digitCount(0) should return 1.\n  */\nconst digitCount = (num) => {\n  let count = 0;\n  while (num) {\n    count++;\n    num = num / 10;\n  }\n  return count;\n};\n\n/*\n  The function should return the number of unique digits in the input.\n  Note: the input is always valid.\n  Example:\n  uniqueDigits(12) should return 2.\n  uniqueDigits(1234) should return 4.\n  uniqueDigits(0) should return 1.\n  uniqueDigits(1000) should return 3.\n  uniqueDigits(0) should return 1.\n  */\nconst uniqueDigits = (num) => {\n  let count = 1;\n  while (num) {\n    num = num / 10;\n    count++;\n  }\n  return count;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  const prime = 2;\n  while (prime * prime <= num) {\n    if (num % prime === 0) return false;\n    prime++;\n  }\n  return true;\n};\n\nconst isPalindrome = (num) => {\n  const reverse = num.toString();\n  const reverseArr = reverse.split('');\n  const length = reverseArr.length;\n\n  if (length === 0) return false;\n\n  let index = 0;\n  while (index < length) {\n    if (num!== reverseArr[index]) return false;\n    index++;\n  }\n  return true;\n};\n\nconst isDivisibleBy = (num, div) => {\n  return num % div === 0;\n};\n\nconst isDivisibleByEvery = (num, divs) => {\n  return num % divs[0] === 0 && num % divs[1] === 0 && num % divs[2] === 0;\n};\n\nconst isPythagorean = (num1, num2) => {\n  return num1 * num2 === num2 * num1;\n};\n\nconst isFibonacci = (num) => {\n  const fib = [0, 1];\n  let index = 0;\n  let count = 0;\n  while (index < num) {\n    fib.push(fib[index] + fib[index + 1]);\n    index++;\n    count++;\n  }\n  if (count!== num) return false;\n\n  let sum = 0;\n  index = 0;\n  while (index < num) {\n    sum += fib[index];\n    index++;\n  }\n  return sum === num;\n};\n\nconst isPermutation = (num1, num2) => {\n  const divs = [];\n  for (let i = 1; i <= 9; i++) {\n    divs.push(i);\n  }\n\n  const num = num1 * num2;\n  const div = num % divs[0];\n  let isPrime = 0;\n  let count = 0;\n  while (isPrime === 0) {\n    isPrime = isPrime || isPrimeDivisibleByEvery(div, divs);\n    count++;\n  }\n  return count === divs.length;\n};\n\nconst isPrimeDivisibleByEvery = (num, divs) => {\n  let isPrime = 0;\n  let count = 0;\n  while (isPrime === 0) {\n    isPrime = isPrime || isPrimeDivisibleBy(num, divs[count]);\n    count++;\n  }\n  return count === divs.length;\n};\n\nconst isPrimeDivisibleBy = (num, div) => {\n  return num % div === 0;\n};\n\nconst sumOfDivisors = (num) => {\n  const divs = [];\n  let count = 0;\n  while (num!== 1) {\n    divs.push(num % 10);\n    num = num / 10;\n    count++;\n  }\n  return count * 10 + sumOfDivisors(divs[0]);\n};\n\nconst sumOfDivisors2 = (num) => {\n  let sum = 0;\n  let count = 0;\n  while (num!== 1) {\n    sum += num % 10;\n    num = num / 10;\n    count++;\n  }\n  return count * 10 + sumOfDivisors2(sum);\n};\n\nconst isPandigital = (num) => {\n  let str = num.toString();\n  for (let i = 0; i < 9; i++) {\n    if (str.indexOf(i + '') === -1) return false;\n  }\n  return true;\n};\n\nconst isFibonacciPandigital = (num) => {\n  let str = num.toString();\n  let count = 0;\n  for (let i = 0; i < 9; i++) {\n    if"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  return s.split('').reduce((previous, current, index) => {\n    if (index % 2 === 0) {\n      previous = previous + (current.toUpperCase() === current.toUpperCase())? 1 : 0\n    }\n    return previous\n  }, 0)\n}\n\n/*\n  Given a string s, return the number of odd digits in the string.\n  \n  For example:\n  oddDigits('aBc') returns 2\n  oddDigits('abc') returns 3\n  oddDigits('abd') returns 1\n  oddDigits('aa') returns 0\n  oddDigits('f') returns 0\n  */\nconst oddDigits = (s) => {\n  return s.split('').reduce((previous, current, index) => {\n    if (index % 2 === 1) {\n      previous = previous + (parseInt(current) % 2 === 1)? 1 : 0\n    }\n    return previous\n  }, 0)\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in the string.\n  \n  For example:\n  lowerCaseVowels('couNtUpPer') returns 3\n  lowerCaseVowels('ABC') returns 1\n  lowerCaseVowels('abd') returns 1\n  lowerCaseVowels('a') returns 0\n  lowerCaseVowels('f') returns 0\n  */\nconst lowerCaseVowels = (s) => {\n  return s.split('').reduce((previous, current, index) => {\n    if (current.toLowerCase() === current.toLowerCase()) {\n      previous = previous + (current.toLowerCase() === current.toLowerCase())? 1 : 0\n    }\n    return previous\n  }, 0)\n}\n\n/*\n  Given a string s, return the number of uppercase vowels in the string.\n  \n  For example:\n  upperCaseVowels('couNtUpPer') returns 2\n  upperCaseVowels('ABC') returns 1\n  upperCaseVowels('abd') returns 1\n  upperCaseVowels('a') returns 0\n  upperCaseVowels('f') returns 0\n  */\nconst upperCaseVowels = (s) => {\n  return s.split('').reduce((previous, current, index) => {\n    if (current.toUpperCase() === current.toUpperCase()) {\n      previous = previous + (current.toUpperCase() === current.toUpperCase())? 1 : 0\n    }\n    return previous\n  }, 0)\n}\n\n/*\n  Given a string s, return the number of odd digits in the string.\n  \n  For example:\n  oddDigits('couNtUpPer') returns 2\n  oddDigits('ABC') returns 1\n  oddDigits('abd') returns 1\n  oddDigits('a') returns 0\n  oddDigits('f') returns 0\n  */\nconst oddDigits = (s) => {\n  return s.split('').reduce((previous, current, index) => {\n    if (index % 2 === 1) {\n      previous = previous + (parseInt(current) % 2 === 1)? 1 : 0\n    }\n    return previous\n  }, 0)\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in the string.\n  \n  For example:\n  lowerCaseVowels('couNtUpPer') returns 3\n  lowerCaseVowels('ABC') returns 1\n  lowerCaseVowels('abd') returns 1\n  lowerCaseVowels('a') returns 0\n  lowerCaseVowels('f') returns 0\n  */\nconst lowerCaseVowels = (s) => {\n  return s.split('').reduce((previous, current, index) => {\n    if (current.toLowerCase() === current.toLowerCase()) {\n      previous = previous + (current.toLowerCase() === current.toLowerCase())? 1 : 0\n    }\n    return previous\n  }, 0)\n}\n\n/*\n  Given a string s, return the number of uppercase vowels in the string.\n  \n  For example:\n  upperCaseVowels('couNtUpPer') returns 2\n  upperCaseVowels('ABC') returns 1\n  upperCaseVowels('abd') returns 1\n  upperCaseVowels('a') returns 0\n  upperCaseVowels('f') returns 0\n  */\nconst upperCaseVowels = (s) => {\n  return s.split('').reduce((previous, current, index) => {\n    if (current.toUpperCase() === current.toUpperCase()) {\n      previous = previous + (current.toUpperCase() === current.toUpperCase())? 1 : 0\n    }\n    return previous\n  }, 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let abs = Math.abs(value);\n  let exp = parseInt(Math.log(abs) / Math.log(10));\n  let floor = Math.floor(abs);\n  let ceil = Math.ceil(abs);\n  let floorValue = floor.toString(10).slice(0, exp);\n  let ceilValue = ceil.toString(10).slice(0, exp);\n  if (abs % 1 === 0) {\n    return floorValue;\n  } else if (abs % 1 === 0.5) {\n    if (floorValue === ceilValue) {\n      return floorValue;\n    } else if (abs < 0) {\n      return floorValue;\n    } else {\n      return ceilValue;\n    }\n  } else {\n    if (abs < 0) {\n      return floorValue;\n    } else {\n      return ceilValue;\n    }\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n    let [i, cnt, sum] = [1, n, 0];\n    while (cnt > 0) {\n        cnt = (cnt + 1) % 2? cnt + 1 : cnt;\n        sum += cnt;\n        i++;\n    }\n    return sum;\n};\n\n/*\n  Given two positive integers a and b, return the sum of all the\n  proper divisors of a + b.\n\n  Examples:\n  >>> divisors(3)\n  [1, 3, 6]\n  >>> divisors(7)\n  [1, 7, 14, 28, 56]\n  */\nconst divisors = (a, b) => {\n    let [n, cnt] = [1, 0];\n    while (n <= b) {\n        if (n === a) {\n            cnt++;\n            n = 1;\n        } else if (n === b) {\n            cnt++;\n            n = b;\n        } else {\n            n = Math.pow(n, 2);\n        }\n    }\n    return cnt;\n};\n\n/*\n  Given two positive integers a and b, return the sum of all the\n  proper divisors of a - b.\n\n  Examples:\n  >>> divisors(-3)\n  [1, 3, 6]\n  >>> divisors(7)\n  [1, 7, 14, 28, 56]\n  */\nconst divisors2 = (a, b) => {\n    let [n, cnt] = [1, 0];\n    while (n <= b) {\n        if (n === a) {\n            cnt++;\n            n = 1;\n        } else if (n === b) {\n            cnt++;\n            n = b;\n        } else {\n            n = Math.pow(n, 2);\n        }\n    }\n    return cnt;\n};\n\n/*\n  Given a positive integer n, return the sum of all the proper divisors of n.\n\n  Examples:\n  >>> divisors(10)\n  [1, 2, 4, 5, 6, 8, 10, 12, 15, 16, 20]\n  >>> divisors(1000)\n  [1, 2, 4, 5, 6, 8, 10, 12, 15, 16, 20, 24, 30, 40, 45, 50, 60, 72, 80, 90, 96, 100, 108, 120, 150, 180, 240, 270, 300, 360, 450, 500, 600, 720, 900, 960, 1000]\n  */\nconst divisors3 = (n) => {\n    let [i, cnt, sum] = [1, n, 0];\n    while (cnt > 0) {\n        cnt = Math.pow(i, 2) % n === 0? n - cnt : cnt;\n        sum += cnt;\n        i++;\n    }\n    return sum;\n};\n\n/*\n  Given a positive integer n, return the sum of all the proper divisors of 2n.\n\n  Examples:\n  >>> divisors2(100)\n  [1, 2, 4, 8, 10, 12, 20, 24, 30, 40, 60, 72, 80, 90, 100]\n  */\nconst divisors4 = (n) => {\n    let [i, cnt, sum] = [1, n, 0];\n    while (cnt > 0) {\n        cnt = Math.pow(i, 2) % n === 0? n - cnt : cnt;\n        sum += cnt;\n        i++;\n    }\n    return sum;\n};\n\nexport default {\n    makEAPiLe,\n    divisors,\n    divisors2,\n    divisors3,\n    divisors4,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n    const words = s.split(/\\s|,/);\n    return words;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  worDsStRing(\"123, 456, 789\") == [\"123\", \"456\", \"789\"]\n  worDsStRing(\"12, 4, 5, 6\") == [\"12\", \"4\", \"5\", \"6\"]\n  worDsStRing(\"12, 4, 5, 6\") == [\"12\", \"4\", \"5\", \"6\"]\n  */\nconst worDsStNum = (s) => {\n    const numbers = s.split(/\\s|,/);\n    return numbers;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  worDsStRing(\"123, 456, 789\") == [\"123\", \"456\", \"789\"]\n  worDsStRing(\"12, 4, 5, 6\") == [\"12\", \"4\", \"5\", \"6\"]\n  worDsStRing(\"12, 4, 5, 6\") == [\"12\", \"4\", \"5\", \"6\"]\n  */\nconst worDsStArray = (s) => {\n    const numbers = s.split(/\\s|,/);\n    return numbers;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  worDsStRing(\"123, 456, 789\") == [\"123\", \"456\", \"789\"]\n  worDsStRing(\"12, 4, 5, 6\") == [\"12\", \"4\", \"5\", \"6\"]\n  worDsStRing(\"12, 4, 5, 6\") == [\"12\", \"4\", \"5\", \"6\"]\n  */\nconst worDsStArray1 = (s) => {\n    const numbers = s.split(/\\s|,/);\n    return numbers;\n}\n\n/*\n  Given a string, return a string with every even character replaced by an asterisk (*).\n  \n  For example:\n  worDsStRing(\"Hello\") == \"Hello\"\n  worDsStRing(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n  worDsStRing(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n  worDsStRing(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  worDsStRing(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  */\nconst worDsStChar = (s) => {\n    const chars = s.split('');\n    return chars.map( (c) => {\n        if (c % 2 === 0) {\n            return c + '*';\n        }\n        return c;\n    });\n}\n\n/*\n  Given a string, return a string with every odd character replaced by an asterisk (*).\n  \n  For example:\n  worDsStRing(\"Hello\") == \"Hello\"\n  worDsStRing(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n  worDsStRing(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n  worDsStRing(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  worDsStRing(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  */\nconst worDsStChar1 = (s) => {\n    const chars = s.split('');\n    return chars.map( (c) => {\n        if (c % 2 === 1) {\n            return c + '*';\n        }\n        return c;\n    });\n}\n\n/*\n  Given a string, return a string with every odd character replaced by an asterisk (*)\n  except for the first and last character.\n  \n  For example:\n  worDsStRing(\"Hello\") == \"Hello\"\n  worDsStRing(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n  worDsStRing(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n  worDsStRing(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  worDsStRing(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  */\nconst worDsStChar2 = (s) => {\n    const chars = s.split('');\n    return chars.map( (c) => {\n        if (c % 2 === 1) {\n            return c + '*';\n        }\n        return c;\n    });\n}<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let x1 = Math.floor(x / 2);\n  let y1 = Math.floor(y / 2);\n  let result = x1 + y1;\n  if (result % 2 === 0) {\n    return result;\n  } else {\n    return -1;\n  }\n};\n\nexport {\n  choOseNUm\n};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nexport { rouNdedavg };\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let d = 1\n  let result = []\n  let num = 0\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 == 0) {\n      num = num * 10 + x[i]\n    } else {\n      if (num) {\n        result.push(num)\n      }\n      num = 0\n    }\n    d = d * 10\n  }\n  if (num) {\n    result.push(num)\n  }\n  return result\n}\n\nmodule.exports = uniQueDIgits\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    const reversedArr = arr.slice().reverse();\n    const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return sortedArr.map(n => names[n]).concat(reversedArr.map(n => names[n]));\n}\n\nconsole.log(byLEngtH([1, -1, 55]));\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i)\n  }\n  let j = 1\n  while (j < n) {\n    result.push(result[j - 1] + result[j])\n    j++\n  }\n  return result\n}\n\nexport default f\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  let palinDroMe = 0\n  let evenOdd = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    let str = `${num}`\n    if (str.split('').reduce((pre, cur) => {\n      return pre + cur\n    }, '').length % 2 === 1) {\n      evenOdd++\n    } else {\n      palinDroMe++\n    }\n  }\n  return (eveNOddpalinDroMe, palindDroMe, evenOdd)\n}\n\n// const evenOddpalinDroMe = (n) => {\n//   let palinDroMe = 0\n//   let evenOdd = 0\n//   for (let i = 1; i <= n; i++) {\n//     let num = i\n//     let str = `${num}`\n//     if (str.split('').reduce((pre, cur) => {\n//       return pre + cur\n//     }, '').length % 2 === 1) {\n//       evenOdd++\n//     } else {\n//       palinDroMe++\n//     }\n//   }\n//   return (eveNOddpalinDroMe, palindDroMe, evenOdd)\n// }\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), exclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddpalinDroMe = (n) => {\n  let palinDroMe = 0\n  let evenOdd = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    let str = `${num}`\n    if (str.split('').reduce((pre, cur) => {\n      return pre + cur\n    }, '').length % 2 === 1) {\n      evenOdd++\n    } else {\n      palinDroMe++\n    }\n  }\n  return (eveNOddpalinDroMe, palindDroMe, evenOdd)\n}\n\n// const evenOddpalinDroMe = (n) => {\n//   let palinDroMe = 0\n//   let evenOdd = 0\n//   for (let i = 1; i <= n; i++) {\n//     let num = i\n//     let str = `${num}`\n//     if (str.split('').reduce((pre, cur) => {\n//       return pre + cur\n//     }, '').length % 2 === 1) {\n//       evenOdd++\n//     } else {\n//       palinDroMe++\n//     }\n//   }\n//   return (eveNOddpalinDroMe, palindDroMe, evenOdd)\n// }\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), exclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddpalinDroMe2 = (n) => {\n  let palinDroMe = 0\n  let evenOdd = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    let str = `${num}`\n    if (str.split('').reduce((pre, cur) => {\n      return pre + cur\n    }, '').length % 2 === 1) {\n      evenOdd++\n    } else {\n      palinDroMe++\n    }\n  }\n  return (evenOddpalinDroMe, palinDroMe)\n}\n\n// const evenOddpalinDroMe2 = (n) => {\n//   let palinDroMe = 0\n//   let evenOdd = 0\n//   for (let i = 1; i <= n; i++) {\n//     let num = i\n//     let str = `${num}`\n//     if (str.split('').reduce((pre, cur) => {\n//       return pre + cur\n//     }, '').length % 2 === 1) {\n//       evenOdd++\n//     } else {\n//       palinDroMe++\n//     }\n//   }\n//   return (evenOddpalinDroMe, palinDroMe)\n// }\n\n/*\n  Given a positive integer n, return a tuple that has the number of even"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const length = arr.length;\n  if (length === 0) {\n    return 0;\n  }\n  let result = 0;\n  const positiveDigits = new Set();\n  for (let i = 0; i < length; i++) {\n    const currentDigit = Math.abs(arr[i]);\n    if (positiveDigits.has(currentDigit)) {\n      result++;\n    } else {\n      positiveDigits.add(currentDigit);\n    }\n  }\n  return result;\n};\n\n// TEST CODE\nconsole.log(`${couNtNuMs([-1, 11, -11])}`);\nconsole.log(`${couNtNuMs([1, 1, 2])}`);\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    if (arr.length === 1) {\n        return true;\n    }\n    let sorted = arr.slice();\n    let prev = sorted.pop();\n    while (sorted.length > 0) {\n        if (sorted[0] <= prev) {\n            sorted = sorted.slice(1);\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = movEOneball;<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  const len = lst1.length;\n  if (lst2.length!= len) {\n    return 'NO';\n  }\n\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  return (lst.every(e => e % 2 === 0))? 'YES' : 'NO';\n};\n\nconst excHangE2 = (lst1, lst2) => {\n  const len = lst1.length;\n  if (lst2.length!= len) {\n    return 'NO';\n  }\n\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  return (lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0))? 'YES' : 'NO';\n};\n\nconst excHangE3 = (lst1, lst2) => {\n  const len = lst1.length;\n  if (lst2.length!= len) {\n    return 'NO';\n  }\n\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  return (lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0))? 'YES' : 'NO';\n};\n\nconst excHangE4 = (lst1, lst2) => {\n  const len = lst1.length;\n  if (lst2.length!= len) {\n    return 'NO';\n  }\n\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  return (lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0))? 'YES' : 'NO';\n};\n\nconst excHangE5 = (lst1, lst2) => {\n  const len = lst1.length;\n  if (lst2.length!= len) {\n    return 'NO';\n  }\n\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  return (lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0))? 'YES' : 'NO';\n};\n\nconst excHangE6 = (lst1, lst2) => {\n  const len = lst1.length;\n  if (lst2.length!= len) {\n    return 'NO';\n  }\n\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  return (lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0))? 'YES' : 'NO';\n};\n\nconst excHangE7 = (lst1, lst2) => {\n  const len = lst1.length;\n  if (lst2.length!= len) {\n    return 'NO';\n  }\n\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  return (lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0))? 'YES' : 'NO';\n};\n\nconst excHangE8 = (lst1, lst2) => {\n  const len = lst1.length;\n  if (lst2.length!= len) {\n    return 'NO';\n  }\n\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  return (lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst.every(e => e % 2 === 0) && lst"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const [testStr, max] = test.split(' ').map(c => c.toLowerCase());\n  const [letter, count] = testStr.split(' ').map(c => c);\n  return {\n    [letter]: count,\n    [testStr]: max\n  };\n};\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit-pf 2.3.0\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <list>\n#include <cassert>\n#include <algorithm>\n#include <unordered_map>\n#include <unordered_set>\n#include <cstring>\n\nusing namespace std;\n#ifdef ONLINE_JUDGE\n#define debug(args...) cerr<<\"Line \"<<__LINE__<<\" (\"<<#args<<\" args): \"<<\"\\n\"\n#else\n#define debug(args...)\n#endif\n\n#define pb push_back\n#define all(c) c.begin(), c.end()\n#define forn(i, n) for (int i = 0; i < n; i++)\n#define sz(c) c.size()\n#define mp make_pair\n#define ll long long\n\nint main(){\n    #ifdef ONLINE_JUDGE\n        freopen(\"input.txt\",\"r\",stdin);\n        freopen(\"output.txt\",\"w\",stdout);\n    #endif\n    int N, K, M;\n    string test;\n    cin >> N >> K >> M >> test;\n    vector<int> h(N), t(N);\n    forn(i, N){\n        cin >> h[i] >> t[i];\n    }\n    int res = 0;\n    for (int i = 0; i < N; i++){\n        h[i] = h[i]*K + t[i];\n        res += h[i];\n    }\n    cout << res << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let rev = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    rev += s[i];\n  }\n  let start = 0;\n  let end = rev.length - 1;\n  while (start < end) {\n    if (c.indexOf(rev[start])!== -1) {\n      rev = rev.slice(0, start) + rev.slice(end, rev.length);\n      end--;\n    } else if (c.indexOf(rev[end])!== -1) {\n      start++;\n    } else {\n      return rev, true;\n    }\n  }\n  return rev, false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let map = {};\n  for (let str of lst) {\n    for (let i = 0; i < str.length; i++) {\n      if (!map[str[i]]) {\n        map[str[i]] = 0;\n      }\n      map[str[i]]++;\n    }\n  }\n  let output = [];\n  for (let i = 0; i < lst.length; i++) {\n    let out = map[lst[i]];\n    if (out > 1) {\n      output.push(out + \"n the str1ng \" + (i + 1) + \" of the \" + (i + 1) + \"put.\");\n    }\n    else {\n      output.push(out + \"n the str1ng \" + (i + 1) + \" of the \" + (i + 1) + \"put.\");\n    }\n  }\n  return output;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n    let minSum = nums.reduce((min, x) => {\n        if (min === undefined || x < min) {\n            min = x\n        }\n        return min\n    }, undefined);\n    return minSum;\n}\n\n// minsubARraySMax\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySMax([2, 3, 4, 1, 2, 4]) == 9\n  minsubARraySMax([-1, -2, -3]) == -1\n  */\nconst minsubARraySMax = (nums) => {\n    let maxSum = nums.reduce((max, x) => {\n        if (max === undefined || x > max) {\n            max = x\n        }\n        return max;\n    }, undefined);\n    return maxSum;\n}\n\n// maxsubARraySUm\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  maxsubARraySUm([-1, -2, -3]) == -6\n  */\nconst maxsubARraySUm = (nums) => {\n    let maxSum = nums.reduce((max, x) => {\n        if (max === undefined || x > max) {\n            max = x\n        }\n        return max;\n    }, undefined);\n    return maxSum;\n}\n\n// maxsubARraySMax\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySMax([2, 3, 4, 1, 2, 4]) == 9\n  maxsubARraySMax([-1, -2, -3]) == -1\n  */\nconst maxsubARraySMax = (nums) => {\n    let maxSum = nums.reduce((max, x) => {\n        if (max === undefined || x < max) {\n            max = x\n        }\n        return max;\n    }, undefined);\n    return maxSum;\n}\n\n// minsubARraySUm\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n    let minSum = nums.reduce((min, x) => {\n        if (min === undefined || x < min) {\n            min = x\n        }\n        return min;\n    }, undefined);\n    return minSum;\n}\n\n// minsubARraySMax\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySMax([2, 3, 4, 1, 2, 4]) == 9\n  minsubARraySMax([-1, -2, -3]) == -1\n  */\nconst minsubARraySMax = (nums) => {\n    let maxSum = nums.reduce((max, x) => {\n        if (max === undefined || x > max) {\n            max = x\n        }\n        return max;\n    }, undefined);\n    return maxSum;\n}\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n    let minSum = nums.reduce((min, x) => {\n        if (min === undefined || x < min) {\n            min = x\n        }\n        return min;\n    }, undefined);\n    return minSum;\n}\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySMax([2, 3, 4, 1, 2, 4]) == 9\n  minsubARraySMax([-1, -2, -3]) == -1\n  */\nconst minsubARraySMax = (nums) => {\n    let maxSum = nums.reduce((max, x) => {\n        if (max === undefined || x > max) {\n            max = x\n        }\n        return max;\n    }, undefined);\n    return maxSum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n\n  const [maxwell, maxbucket] = [0, 0]\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        const well = i * cols + j\n        const bucket = well + capacity\n        if (bucket > maxwell) {\n          maxwell = bucket\n          maxbucket = well\n        }\n      }\n    }\n  }\n  return maxwell - maxbucket + 1\n}\n\nexport default maxfill\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  let arrSize = arr.length;\n  let sortArr = new Array(arrSize);\n  for (let i = 0; i < arrSize; i++) {\n    sortArr[i] = [arr[i], i];\n  }\n  sortArr.sort(function (a, b) {\n    if (a[0] === b[0]) {\n      return a[1] - b[1];\n    } else {\n      return b[0] - a[0];\n    }\n  });\n  return sortArr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  const chars = s.split('')\n  const charsLen = chars.length\n  const result = []\n  let index = 0\n  while (index < charsLen) {\n    if (chars[index].length === n) {\n      result.push(chars[index])\n    }\n    index += 1\n  }\n  return result\n}\n\nexport default selEctWOrds<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  const length = word.length;\n  let index = length - 1;\n  while (index >= 0) {\n    if (isVowel(word.charAt(index))) {\n      return word.charAt(index);\n    }\n    index--;\n  }\n  return '';\n};\n\n/*\n  \"a\" + \"b\" = \"ab\";\n  \"a\" + \"b\" + \"c\" = \"abc\";\n  \"a\" + \"b\" + \"c\" + \"d\" = \"abcd\";\n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" = \"abcde\";\n  \n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" = \"abcdef\";\n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" = \"abcdefg\";\n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" = \"abcdefgh\";\n  \n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\" = \"abcdefghi\";\n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\" + \"j\" = \"abcdefghij\";\n  \n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\" + \"j\" + \"k\" = \"abcdefghijkl\";\n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\" + \"j\" + \"k\" + \"l\" = \"abcdefghijklm\";\n  \n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\" + \"j\" + \"k\" + \"l\" + \"m\" = \"abcdefghijklm\";\n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\" + \"j\" + \"k\" + \"l\" + \"m\" + \"n\" = \"abcdefghijklmn\";\n  \n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\" + \"j\" + \"k\" + \"l\" + \"m\" + \"n\" + \"o\" = \"abcdefghijklmn\";\n  \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\" + \"j\" + \"k\" + \"l\" + \"m\" + \"n\" + \"o\" + \"p\" = \"abcdefghijklmnop\";\n*/<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  //  var arr = lst.split(' ');\n  //  console.log(arr);\n  const res = check(lst);\n  // console.log(res);\n  return res;\n};\n\nconst check = (lst) => {\n  //  console.log(lst);\n  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      while (stack.pop()!== '(') {\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\n// console.log(matChPaRens(['()()', ')', ')', ')()', '())', '())()']));\n// console.log(matChPaRens(['()()', ')', ')', ')()', '())', '())()']));\n// console.log(matChPaRens(['(())', '())', '())', '())', '())', '())']));\n// console.log(matChPaRens(['(())', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', '())', ')', '(())', '())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['(())', '())', '())', '())', '())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['(())', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n// console.log(matChPaRens(['()()', ')', '(())', ')', '(())', '())']));\n"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  let length = arr.length\n  if (k > length) {\n    return arr\n  }\n  let minMaxArr = []\n  let minArr = []\n  let maxArr = []\n  minMaxArr = arr.slice(0, k)\n  minArr = arr.slice(0, k)\n  maxArr = arr.slice(0, k)\n\n  let minMaxArrLength = minMaxArr.length\n  let minArrLength = minArr.length\n  let maxArrLength = maxArr.length\n\n  // use minArr as maxArr\n  while (minMaxArrLength--) {\n    maxArr.push(minArr.shift())\n  }\n  // use maxArr as minArr\n  while (maxArrLength--) {\n    minArr.push(maxArr.shift())\n  }\n\n  return minArr\n}\n\nconsole.log(maxImum([-3, -4, 5], 3))\nconsole.log(maxImum([4, -4, 4], 2))\nconsole.log(maxImum([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n    let sum = 0;\n    for (let x of lst) {\n        if (x % 2 === 0) {\n            sum += x;\n        }\n    }\n    return sum;\n};\n\nconsole.log(solUtioN([5, 8, 7, 1]));\nconsole.log(solUtioN([3, 3, 3, 3, 3]));\nconsole.log(solUtioN([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const a = arr.slice(0, k)\n  const b = arr.slice(k)\n  const sum = a.reduce((a, c) => a + c, 0)\n  return sum + b.reduce((a, c) => a + c, 0)\n}\n\n// const addelemEnts = (arr, k) => {\n//   const a = arr.slice(0, k)\n//   const b = arr.slice(k)\n//   return a.reduce((a, c) => a + c, 0) + b.reduce((a, c) => a + c, 0)\n// }\n\n// const addelemEnts = (arr, k) => {\n//   const a = arr.slice(0, k)\n//   const b = arr.slice(k)\n//   return a.reduce((a, c) => a + c, 0) + b.reduce((a, c) => a + c, 0)\n// }\n\nconst addelemEnts = (arr, k) => {\n  const a = arr.slice(0, k)\n  const b = arr.slice(k)\n  const sum = a.reduce((a, c) => a + c, 0)\n  return sum + b.reduce((a, c) => a + c, 0)\n}\n\nexport {\n  addelemEnts\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n    const oddlist = [];\n    oddlist[0] = 1;\n\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 1) {\n            oddlist[i] = oddlist[i - 1] + 1;\n        } else {\n            oddlist[i] = oddlist[i - 1];\n        }\n    }\n    return oddlist;\n};\n\nconsole.log(getoddCOllatZ(5));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  if(!date) {\n    return false;\n  }\n  const day = parseInt(date.slice(0,2), 10);\n  const month = parseInt(date.slice(3,5), 10);\n  const year = parseInt(date.slice(6,10), 10);\n  if(day < 1 || day > 31 || (month === 4 || month === 6 || month === 9 || month === 11) && day < 1 || (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) && day > 30 || month < 1 || month > 12) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe2 = (date) => {\n  if(!date) {\n    return false;\n  }\n  const day = parseInt(date.slice(0,2), 10);\n  const month = parseInt(date.slice(3,5), 10);\n  const year = parseInt(date.slice(6,10), 10);\n  if(day < 1 || day > 31 || (month === 4 || month === 6 || month === 9 || month === 11) && day < 1 || (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) && day > 30 || month < 1 || month > 12) {\n    return false;\n  }\n  return true;\n};\n\nconst valIdDaTe3 = (date) => {\n  if(!date) {\n    return false;\n  }\n  const day = parseInt(date.slice(0,2), 10);\n  const month = parseInt(date.slice(3,5), 10);\n  const year = parseInt(date.slice(6,10), 10);\n  if(day < 1 || day > 31 || (month === 4 || month === 6 || month === 9 || month === 11) && day < 1 || (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) && day > 30 || month < 1 || month > 12) {\n    return false;\n  }\n  return true;\n};\n\nconst valIdDaTe4 = (date) => {\n  if(!date) {\n    return false;\n  }\n  const day = parseInt(date.slice(0,2), 10);\n  const month = parseInt(date.slice(3,5), 10);\n  const year = parseInt(date.slice(6,10), 10);\n  if(day < 1 || day > 31 || (month === 4 || month === 6 || month === 9 || month === 11) && day < 1 || (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) && day > 30 || month < 1 || month > 12) {\n    return false;\n  }\n  return true;\n};\n\nconst valIdDaTe5 = (date) => {\n  if(!date) {\n    return false;\n  }\n  const day = parseInt(date.slice(0,2), 10);\n  const month = parseInt(date.slice(3,5), 10);\n  const year = parseInt(date.slice(6,10), 10);\n  if(day < 1 || day > 31 || (month === 4 || month === 6 || month === 9 || month === 11) && day < 1 || (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) && day > 30 || month < 1 || month > 12) {\n    return false;\n  }\n  return true;\n};\n\nconst valIdDaTe6 = (date) => {\n  if(!date) {\n    return false;\n  }\n  const day = parseInt(date.slice(0,2), 10);\n  const month = parseInt(date.slice(3,5), 10);\n  const year = parseInt(date.slice(6,10), 10);\n  if(day < 1 || day > 31 || (month === 4 || month === 6 || month === 9 || month === 11) && day < 1 || (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10) && day > 30 || month < 1 || month > 12) {\n    return false;\n  }\n  return true"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  if (!txt) return []\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.split(/\\s+/)\n  return txt\n}\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds2 = (txt) => {\n  if (!txt) return []\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.replace(/,/g, '')\n  txt = txt.split(/\\s+/)\n  return txt\n}\n\nconst splitOnChars = (txt, chars) => {\n  if (!txt) return []\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.split(chars)\n  return txt\n}\n\nconst splitOnWords = (txt) => {\n  if (!txt) return []\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.split(/\\s+/)\n  return txt\n}\n\nconst removeChars = (txt, chars) => {\n  if (!txt) return ''\n  txt = txt.toLowerCase()\n  txt = txt.replace(chars, '')\n  return txt\n}\n\nconst removeChars2 = (txt, chars) => {\n  if (!txt) return ''\n  txt = txt.toLowerCase()\n  txt = txt.replace(chars, '')\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.replace(/,/g, '')\n  return txt\n}\n\nconst removeAll = (txt) => {\n  if (!txt) return ''\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.replace(/,/g, '')\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/\\s+/g,'')\n  return txt\n}\n\nconst split = (txt, chars) => {\n  if (!txt) return ''\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.split(chars)\n  return txt\n}\n\nconst removeAll2 = (txt) => {\n  if (!txt) return ''\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/,/g, '')\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.replace(/\\s+/g,'')\n  return txt\n}\n\nconst hasChars = (txt, chars) => {\n  if (!txt) return false\n  txt = txt.toLowerCase()\n  txt = txt.replace(chars, '')\n  return txt\n}\n\nconst hasChars2 = (txt, chars) => {\n  if (!txt) return false\n  txt = txt.toLowerCase()\n  txt = txt.replace(chars, '')\n  txt = txt.replace(/\\s/g, '')\n  return txt\n}\n\nconst hasWords = (txt) => {\n  if (!txt) return false\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.split(/\\s+/)\n  return txt\n}\n\nconst hasWords2 = (txt) => {\n  if (!txt) return false\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.split(/\\s+/)\n  return txt\n}\n\nconst hasWord = (txt, word) => {\n  if (!txt) return false\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.split(word)\n  return txt\n}\n\nconst hasWord2 = (txt, word) => {\n  if (!txt) return false\n  txt = txt.toLowerCase()\n  txt = txt.replace(/\\s/g, '')\n  txt = txt.replace(/\\s+/g,'')\n  txt = txt.split(word)\n  return txt\n}\n\nconst hasWord3 = (txt, word) => {\n  if (!txt) return false\n  txt = txt.toLowerCase()\n  txt = txt.split(word)\n  return txt\n}\n\nconst hasWord4 = (txt, word) => {\n  if (!"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const map = (list, (num) => [num, lst.indexOf(num)]);\n  const listLength = list.length;\n  if (listLength <= 1) {\n    return true;\n  }\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedIndex = sorted.map((num) => map[num]);\n  return sortedIndex.every(([index, num]) => index === sortedIndex.indexOf(num));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n    if (!(interval1.start <= interval1.end && interval2.start <= interval2.end)) {\n        return 'NO';\n    }\n\n    const length = interval1.end - interval1.start;\n    const length2 = interval2.end - interval2.start;\n\n    if (length % 2 === 1 || length2 % 2 === 1) {\n        return 'NO';\n    }\n\n    const count = (length + length2) / 2;\n\n    return (count > 1)? 'YES' : 'NO';\n};\n\nmodule.exports = intErseCtion;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  let sum = 0\n  let product = 1\n  if (arr.length === 0) {\n    return sum\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    const val = arr[i]\n    if (val === 0) {\n      continue\n    }\n    sum += val\n    product *= (val > 0? 1 : -1)\n  }\n  return sum * product\n}\n\nmodule.exports = proDSigNs\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const row = grid.length\n   , col = grid[0].length\n   , memo = []\n   , dp = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp2 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp3 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp4 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp5 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp6 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp7 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp8 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp9 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp10 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp11 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp12 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp13 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp14 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp15 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp16 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp17 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp18 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp19 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp20 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp21 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp22 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp23 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp24 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp25 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp26 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp27 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp28 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp29 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp30 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp31 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp32 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp33 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp34 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp35 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp36 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp37 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp38 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp39 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp40 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp41 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp42 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp43 = new Array(col).fill(Number.MAX_SAFE_INTEGER)\n   , dp44 = new Array("}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(tri(i));\n  }\n  return res;\n};\n\nconsole.log(tri(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let oddDigits = 1;\n  let product = 1;\n  while(n > 0) {\n    if(n % 2 == 1) {\n      oddDigits *= n % 10;\n    }\n    product *= oddDigits;\n    n = n / 10;\n  }\n  return product;\n};\n\n/*\nGiven a positive integer n, return the sum of the even digITS.\n  Return 0 if all digITS are odd.\n  For example:\n  digITS(1)  == 1\n  digITS(4)  == 4\n  digITS(235) == 235\n  */\nconst sumEvenDigits = (n) => {\n  let sum = 0;\n  while(n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\nGiven a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sumOddDigits = (n) => {\n  let sum = 0;\n  while(n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\nGiven two numbers, a and b, return the sum of the product of a and b, with all digits appearing in the same order.\nFor example:\n\naddProduct(1, 4) ==  9\naddProduct(4, 1) ==  16\naddProduct(2, 7) == 14\naddProduct(5, 8) == 72\naddProduct(5, 6) == 45\n*/\nconst addProduct = (a, b) => {\n  let product = 1;\n  while(a > 0) {\n    product = product * a;\n    a = a / 10;\n  }\n  while(b > 0) {\n    product = product * b;\n    b = b / 10;\n  }\n  return product;\n};\n\n/*\nGiven a positive integer n, return the product of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 24\n  digits(235) == 155520\n  */\nconst product = (n) => {\n  let product = 1;\n  while(n > 0) {\n    product *= n % 10;\n    n = n / 10;\n  }\n  return product;\n};\n\n/*\nGiven a positive integer n, return the product of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 24\n  digits(235) == 155520\n  */\nconst product2 = (n) => {\n  let product = 1;\n  while(n > 0) {\n    product *= n % 10;\n    n = n / 10;\n  }\n  return product;\n};\n\n/*\nGiven a positive integer n, return the sum of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sum = (n) => {\n  let sum = 0;\n  while(n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\nGiven a positive integer n, return the sum of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sum2 = (n) => {\n  let sum = 0;\n  while(n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\nGiven a positive integer n, return the sum of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sum3 = (n) => {\n  let sum = 0;\n  while(n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\nGiven a positive integer n, return the sum of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sum4 = (n) => {\n  let sum = 0;\n  while(n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\nGiven a positive integer n, return the sum of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sum5 = (n) => {\n  let sum = 0;\n  while(n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\nGiven a positive integer n, return the sum of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst sum6 = (n) => {\n  let sum = 0;\n  while(n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n};\n\n/*\nGiven a positive integer n, return the sum of the digits.\n  Return 0 if all digits are zero.\n  For example:\n  digits(1)"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n    const start = 0;\n    let counter = 0;\n    let index = 0;\n    let openBracket = false;\n    const brackets = '[]';\n    const brackets_regex = /\\[\\]/g;\n    while (index < string.length) {\n        if (openBracket) {\n            if (string[index] === brackets[counter]) {\n                counter++;\n            } else {\n                counter = 0;\n            }\n            if (counter === brackets.length) {\n                openBracket = false;\n                counter = 0;\n                if (index === string.length - 1) {\n                    return true;\n                }\n            }\n        } else {\n            if (string[index] === brackets[0]) {\n                counter = 0;\n                openBracket = true;\n            }\n        }\n        index++;\n    }\n    return false;\n}\n\nisNEsteD('[[]]')\nisNEsteD('[]]]]]]][[[[[]')\nisNEsteD('[][]')\nisNEsteD('[]')\nisNEsteD('[[][]]')\nisNEsteD('[[]][[')\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  const res = [];\n  lst.forEach(function(elem) {\n    res.push(Math.ceil(elem*elem));\n  });\n  return res.reduce((a, b) => a + b, 0);\n};\n\nconst sumsquaTest = [1,2,3].map(elem => elem*elem);\nconsole.log(sumsqaRes(sumsqaTest));\n\n/*\nGiven two lists, the first containing negative and positive numbers,\nand the second containing the same positive numbers, return the sum\nof the two lists.\n*/\nconst sumLists = (lstNeg, lstPos) => {\n  const res = [];\n  lstNeg.forEach(function(elem) {\n    res.push(elem);\n  });\n  lstPos.forEach(function(elem) {\n    res.push(elem);\n  });\n  return res.reduce((a, b) => a + b, 0);\n};\n\nconst sumListsTest = [[1,-2,3], [4,5,6]];\nconsole.log(sumLists(sumListsTest[0], sumListsTest[1]));\n\n/*\nGiven a list of numbers, return a list where all negative numbers\nhave been replaced by 0.\n*/\nconst replaceNegatives = (lst) => {\n  const res = [];\n  lst.forEach(function(elem) {\n    res.push(elem < 0? 0 : elem);\n  });\n  return res;\n};\n\nconst replaceNegativesTest = [-1, -2, -3];\nconsole.log(replaceNegatives(replaceNegativesTest));\n\n/*\nGiven a list of numbers, return the list in which all numbers\nthat are less than or equal to 5 have been replaced by 5.\n*/\nconst replacePositives = (lst) => {\n  const res = [];\n  lst.forEach(function(elem) {\n    if (elem <= 5) {\n      res.push(5);\n    } else {\n      res.push(elem);\n    }\n  });\n  return res;\n};\n\nconst replacePositivesTest = [1,2,3,4,5];\nconsole.log(replacePositives(replacePositivesTest));\n\n/*\nGiven two lists of numbers, return the list in which all numbers\nthat are less than or equal to 5 have been replaced by 5.\n*/\nconst replacePositives2 = (lst1, lst2) => {\n  const res = [];\n  lst1.forEach(function(elem) {\n    lst2.forEach(function(elem2) {\n      if (elem <= 5 && elem2 <= 5) {\n        res.push(5);\n      } else {\n        res.push(elem + elem2);\n      }\n    });\n  });\n  return res;\n};\n\nconst replacePositives2Test = [1,2,3,4,5];\nconsole.log(replacePositives2(replacePositivesTest[0], replacePositivesTest[1]));\n\n/*\nGiven a list of numbers, return the list in which all numbers\nthat are less than or equal to 5 have been replaced by 5.\n*/\nconst replacePositives3 = (lst) => {\n  const res = [];\n  lst.forEach(function(elem) {\n    if (elem <= 5) {\n      res.push(5);\n    } else {\n      res.push(elem);\n    }\n  });\n  return res;\n};\n\nconst replacePositives3Test = [1,2,3,4,5];\nconsole.log(replacePositives3(replacePositivesTest[0]));\n\n/*\nGiven a list of numbers, return the list in which all numbers\nthat are less than or equal to 5 have been replaced by 5.\n*/\nconst replacePositives4 = (lst) => {\n  const res = [];\n  lst.forEach(function(elem) {\n    if (elem <= 5) {\n      res.push(5);\n    } else {\n      res.push(elem);\n    }\n  });\n  return res;\n};\n\nconst replacePositives4Test = [1,2,3,4,5];\nconsole.log(replacePositives4(replacePositivesTest[0]));\n\n/*\nGiven a list of numbers, return the list in which all numbers\nthat are less than or equal to 5 have been replaced by 5.\n*/\nconst replacePositives5 = (lst) => {\n  const res = [];\n  lst.forEach(function(elem) {\n    if (elem <= 5) {\n      res.push(5);\n    } else {\n      res.push(elem);\n    }\n  });\n  return res;\n};\n\nconst replacePositives5Test = [1,2,3,4,5];\nconsole.log(replacePositives5(replacePositivesTest[0]));\n\n/*\nGiven a list of numbers, return the list in which all numbers\nthat are less than or equal to 5 have been replaced by 5.\n*/\nconst replacePositives6 = (lst) => {\n  const res = [];\n  lst.forEach(function(elem) {\n    if (elem <= 5) {\n      res.push(5);\n    } else {\n      res.push(elem);\n    }\n  });\n  return res;\n};\n\nconst replacePositives6Test = [1,2,3,4,5];\nconsole.log(replacePositives6(replacePositivesTest[0]));\n\n/*\nGiven a list of numbers, return the list in which all numbers\nthat are less than or equal to 5 have been replaced by 5.\n*/\nconst replacePositives"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const alphabet = new Set(ALPHA);\n  return txt.slice(-1)\n   .toLowerCase()\n   .match(/[a-z0-9]/)\n   .every((c) =>!alphabet.has(c));\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const alphabet = new Set(ALPHA);\n  return txt.slice(-1)\n   .toLowerCase()\n   .match(/[a-z0-9]/)\n   .every((c) =>!alphabet.has(c));\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const alphabet = new Set(ALPHA);\n  return txt.slice(-1)\n   .toLowerCase()\n   .match(/[a-z0-9]/)\n   .every((c) =>!alphabet.has(c));\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const alphabet = new Set(ALPHA);\n  return txt.slice(-1)\n   .toLowerCase()\n   .match(/[a-z0-9]/)\n   .every((c) =>!alphabet.has(c));\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const alphabet = new Set(ALPHA);\n  return txt.slice(-1)\n   .toLowerCase()\n   .match(/[a-z0-9]/)\n   .every((c) =>!alphabet.has(c));\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const alphabet = new Set(ALPHA);\n  return txt.slice(-1)\n   .toLowerCase()\n   .match(/[a-z0-9]/)\n   .every((c) =>!alphabet.has(c));\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALe"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let min = 1, max = arr.length - 1;\n  while (min < max) {\n    let mid = Math.floor((min + max) / 2);\n    if (arr[mid - 1] < arr[mid] && arr[mid] <= arr[mid + 1]) {\n      return mid;\n    } else if (arr[mid - 1] > arr[mid]) {\n      max = mid;\n    } else if (arr[mid] < arr[mid + 1]) {\n      min = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Create a function which returns the largest element of a given array. If\n  there are no elements in the array then return -1.\n*/\nconst largest = (arr) => {\n  let max = -1;\n  for (let element of arr) {\n    if (element > max) {\n      max = element;\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the smallest element of a given array. If\n  there are no elements in the array then return -1.\n*/\nconst smallest = (arr) => {\n  let min = 1, max = arr.length - 1;\n  while (min < max) {\n    let mid = Math.floor((min + max) / 2);\n    if (arr[mid - 1] > arr[mid]) {\n      min = mid + 1;\n    } else if (arr[mid - 1] < arr[mid]) {\n      max = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Create a function which returns the sum of all elements in a given array.\n*/\nconst sum = (arr) => {\n  let sum = 0;\n  for (let element of arr) {\n    sum += element;\n  }\n  return sum;\n};\n\n/*\n  Create a function which returns the number of elements in a given array.\n*/\nconst count = (arr) => {\n  return arr.length;\n};\n\n/*\n  Create a function which returns the index of the largest element in a\n  given array. If there are no elements in the array then return -1.\n*/\nconst maxIndex = (arr) => {\n  let max = -1;\n  for (let element of arr) {\n    if (element > max) {\n      max = element;\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the index of the smallest element in a\n  given array. If there are no elements in the array then return -1.\n*/\nconst minIndex = (arr) => {\n  let min = 1, max = arr.length - 1;\n  while (min < max) {\n    let mid = Math.floor((min + max) / 2);\n    if (arr[mid - 1] < arr[mid]) {\n      min = mid + 1;\n    } else if (arr[mid - 1] > arr[mid]) {\n      max = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Create a function which returns the index of the largest element in a\n  given array. If there are no elements in the array then return -1.\n*/\nconst minIndex = (arr) => {\n  let min = 1, max = arr.length - 1;\n  while (min < max) {\n    let mid = Math.floor((min + max) / 2);\n    if (arr[mid - 1] > arr[mid]) {\n      min = mid + 1;\n    } else if (arr[mid - 1] < arr[mid]) {\n      max = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Create a function which returns the sum of all elements in a given array.\n*/\nconst minIndex = (arr) => {\n  let min = 1, max = arr.length - 1;\n  while (min < max) {\n    let mid = Math.floor((min + max) / 2);\n    if (arr[mid - 1] > arr[mid]) {\n      min = mid + 1;\n    } else if (arr[mid - 1] < arr[mid]) {\n      max = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Create a function which returns the sum of all elements in a given array.\n*/\nconst maxIndex = (arr) => {\n  let max = -1;\n  for (let element of arr) {\n    if (element > max) {\n      max = element;\n    }\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  const max = 0;\n  const min = Number.MAX_VALUE;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length; i++) {\n    const x = lst[i];\n    if (x > last) {\n      break;\n    }\n    if (x < max) {\n      max = x;\n    }\n    if (x < min) {\n      min = x;\n    }\n  }\n  return (max < min? (max, min) : (null, null));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? numberA : numberB;\n};\n\nconst compare = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n};\n\n// const compare = (a, b) => {\n//   let numberA = a;\n//   let numberB = b;\n//   if (typeof numberA ==='string') {\n//     numberA = parseFloat(numberA);\n//   }\n//   if (typeof numberB ==='string') {\n//     numberB = parseFloat(numberB);\n//   }\n//   if (isNaN(numberA) || isNaN(numberB)) {\n//     return null;\n//   }\n//   return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n// };\n\nconst compare1 = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n};\n\nconst compare2 = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n};\n\nconst compare3 = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n};\n\nconst compare4 = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n};\n\nconst compare5 = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n};\n\nconst compare6 = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n};\n\nconst compare7 = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==='string') {\n    numberA = parseFloat(numberA);\n  }\n  if (typeof numberB ==='string') {\n    numberB = parseFloat(numberB);\n  }\n  if (isNaN(numberA) || isNaN(numberB)) {\n    return null;\n  }\n  return numberA > numberB? 1 : numberA < numberB? -1 : 0;\n};\n\nconst compare8 = (a, b) => {\n  let numberA = a;\n  let numberB = b;\n  if (typeof numberA ==="}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\nconst isEqualToSumOddN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\nconst isEqualToSumNegativeEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumNegativeOddN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//Evaluate whether the given number n can be written as the sum of exactly 4 positive and negative odd numbers\nconst isEqualToSumPositiveNegativeOddN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumPositiveNegativeEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumPositiveOddN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumNegativeOddN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumNegativeEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumOddN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isEqualToSumEvenN = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0 && n % (i + 2)"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  if(n === 0)\n    return 1\n  else if(n === 1)\n    return 1\n  else if(n === 2)\n    return 2\n  else if(n === 3)\n    return 6\n  else if(n === 4)\n    return 24\n  else if(n === 5)\n    return 120\n  else if(n === 6)\n    return 720\n  else if(n === 7)\n    return 5040\n  else if(n === 8)\n    return 40320\n  else if(n === 9)\n    return 362880\n  else if(n === 10)\n    return 3628800\n  else if(n === 11)\n    return 39916800\n  else if(n === 12)\n    return 479001600\n  else if(n === 13)\n    return 6227020800\n  else if(n === 14)\n    return 87178291200\n  else if(n === 15)\n    return 1307674368000\n  else if(n === 16)\n    return 20922789888000\n  else if(n === 17)\n    return 355687428096000\n  else if(n === 18)\n    return 6402373705728000\n  else if(n === 19)\n    return 121645100408832000\n  else if(n === 20)\n    return 2432902008176640000\n  else if(n === 21)\n    return 51090942171709440000\n  else if(n === 22)\n    return 1124000727777607680000\n  else if(n === 23)\n    return 25852016738884976640000\n  else if(n === 24)\n    return 620448401733239439360000\n  else if(n === 25)\n    return 15511210043330985984000000\n  else if(n === 26)\n    return 3052526624112059225700000000\n  else if(n === 27)\n    return 63589111319674200000000000\n  else if(n === 28)\n    return 12676506002282294015560000000000\n  else if(n === 29)\n    return 2251799813685248000000000000000\n  else if(n === 30)\n    return 450359962737049600000000000000000\n  else if(n === 31)\n    return 900719925474099200000000000000000\n  else if(n === 32)\n    return 1801439850948198400000000000000000\n  else if(n === 33)\n    return 3602879701896396800000000000000000\n  else if(n === 34)\n    return 7205759403792793600000000000000000\n  else if(n === 35)\n    return 14411518807585587200000000000000000\n  else if(n === 36)\n    return 28823037615171174400000000000000000\n  else if(n === 37)\n    return 57646075230342348800000000000000000\n  else if(n === 38)\n    return 115292150460684697600000000000000000\n  else if(n === 39)\n    return 230584300921369395200000000000000000\n  else if(n === 40)\n    return 461168601842738790400000000000000000\n  else if(n === 41)\n    return 922741878464814462400000000000000000\n  else if(n === 42)\n    return 1844674407370955161600000000000000000\n  else if(n === 43)\n    return 3689348814741910323200000000000000000\n  else if(n === 44)\n    return 7378697629483820646400000000000000000\n  else if(n === 45)\n    return 14757395258967641292800000000000000000\n  else if(n === 46)\n    return 29692624553033447393600000000000000000\n  else if(n === 47)\n    return 58952445180595731158400000000000000000\n  else if(n === 48)\n    return 118059162071741130342400000000000000000\n  else if(n === 49)\n    return 23718418573525208283200000000000000000\n  else if(n === 50)\n    return 471839805570453696448000000000000000000\n  else if(n === 51)\n    return 94371847514652624886400000000000000000\n  else if(n === 52)\n    return 188526683899811686891200000000000000000\n  else if(n === 53)\n    return 37045872925671722966400000000000000000\n  else if(n === 54)\n    return 74026534413919121353600000000000000000\n  else if(n === 55)\n    return 14805494565459522729600000000000000000\n  else if(n === 56)\n    return 2965121426914605030400000000000000000\n  else if(n === 57)\n    return 59251237508118590614400000000000000000\n  else if(n === 58)\n    return 1181786086991102860800000000000000000\n  else if(n === 59)\n    return 23641845699843749446400000000000000000\n  else if(n === 60)\n    return 4729658934011068889600000000000000000\n  else if(n === 61)\n    return 9472966306896124656000000000000000000\n  else if(n === 62)\n    return 18058493068380117072000000000000000000\n  else if(n === 63)\n    return 3654606822245500854400000000000000000\n  else if(n === 64)\n    return 7307539156916502313600000000000000000\n  else if(n === 65)\n    return 1464725242508750086400000000000000000\n  else if(n === 66)\n    return 2932536589681603526400000000000000000\n  else if(n === 67)\n    return 5904915671160854412800000000000000000\n  else if("}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n    return text.replace(/ /g, '_').replace(/\\s{2,}/g, '-');\n}\n\nexport default fixspacEs;<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  let pattern = /^[a-zA-Z]{1}[a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}$/;\n  let match = pattern.test(file_name);\n  return match;\n};\n\nconst fileName = \"example.txt\";\n\nlet valid_name = filENamEChecK(fileName);\n\nconsole.log(\"The file name is valid? \", valid_name);\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall multiply the integer entry if its index is a \n  multiple of 3 and will multiply the integer entry by the square of the integer entry if its index is a multiple of 4 and not a \n  multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then \n  return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [-1,-5,2,-1,-5] the output should be -25\n  For lst = [0,0,0] the output should be 0\n  */\nconst multiRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall add the integer entry if its index is a \n  multiple of 3 and will add the square of the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will \n  not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 5\n  For lst = [-1,-5,2,-1,-5] the output should be 25\n  For lst = [0,0,0] the output should be 0\n  */\nconst sumplusRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst main = () => {\n  console.log(sumsqaRes([1,2,3]));\n  console.log(sumsqaRes([]));\n  console.log(sumsqaRes([-1,-5,2,-1,-5]));\n  console.log(sumsqaRes([0,0,0]));\n\n  console.log(multiRes([1,2,3]));\n  console.log(multiRes([]));\n  console.log(multiRes([-1,-5,2,-1,-5]));\n  console.log(multiRes([0,0,0]));\n\n  console.log(sumplusRes([1,2,3]));\n  console.log(sumplusRes([]));\n  console.log(sumplusRes([-1,-5,2,-1,-5]));\n  console.log(sumplusRes([0,0,0]));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  let newSentence = '';\n  let words = sentence.split(' ');\n  let prev = words[0];\n  words.forEach(word => {\n    newSentence += prev + word;\n    prev = word;\n  });\n  return newSentence;\n};\n\ndescribe('[Solutions]', () => {\n  it('should return \"is\"', () => {\n    expect(worsDsInsenteNce('This is a test')).toEqual('is');\n  });\n  it('should return \"go for\"', () => {\n    expect(worsDsInsenteNce('lets go for swimming')).toEqual('go for');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  const num = Number(x);\n  const den = Number(n);\n  return num % den === 0 && den % num === 0;\n};\n\nconsole.log(simPlifY(\"1/5\", \"5/1\"));\nconsole.log(simPlifY(\"1/6\", \"2/1\"));\nconsole.log(simPlifY(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n    const sort = (a, b) => a + b > b + a? 1 : -1\n    const ordBySum = (nums, i) => {\n        const sum = nums.reduce((acc, cur) => acc + cur, 0)\n        return sum > nums[i]? 1 : -1\n    }\n    const arr = [...new Set(nums).values()].sort(sort)\n    const res = arr.map((x, i) => {\n        const s = sum(arr.slice(0, i + 1))\n        return arr.reduce((acc, cur, j) => acc + (ordBySum(cur, j) * x), 0)\n    })\n    return res\n}\n\nconst sum = (arr) => arr.reduce((acc, cur) => acc + cur, 0)\n\nconsole.log(ordErBypointS([1, 11, -1, -11, -12]))\nconsole.log(ordErBypointS([-1, -11, 1, -12, 11]))\nconsole.log(ordErBypointS([1, 11, -1, -11, -12, -3]))\nconsole.log(ordErBypointS([]))\nconsole.log(ordErBypointS([1, -2, -2, -4, -2, -3, -4, -5, -1]))\nconsole.log(ordErBypointS([0, 0, -2, -4, -2, -3, -4, -5, -1]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if ((nums[i] % 10) === 1 && (nums[i] % 11) === 1) {\n        result.push(nums[i]);\n      }\n    }\n  }\n  return result.length;\n};\n\nconsole.log(speCialfilteR([15, -73, 14, -15]));\nconsole.log(speCialfilteR([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  return Math.pow(n, 3) - Math.pow(n, 2) + n - 1;\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The second valid triple is (3, 7, 21).\n  */\nconst getmaxTRipleP = (n) => {\n  let sum = 0;\n  for(let i = 1; i <= n; i++) {\n    for(let j = i + 1; j <= n; j++) {\n      sum += i * j;\n    }\n  }\n  return sum - sum % 3;\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The second valid triple is (3, 7, 21).\n      The third valid triple is (1, 3, 7).\n  */\nconst getmaxTRiple = (n) => {\n  let sum = 0;\n  for(let i = 1; i <= n; i++) {\n    for(let j = i + 1; j <= n; j++) {\n      sum += i * j;\n    }\n  }\n  return sum - sum % 3;\n}\n\nconsole.log(getmaxTRiple(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    [\"Mercury\", \"Venus\"],\n    [\"Venus\", \"Earth\"],\n    [\"Earth\", \"Mars\"],\n    [\"Mars\", \"Jupiter\"],\n    [\"Jupiter\", \"Saturn\"],\n    [\"Saturn\", \"Uranus\"],\n    [\"Uranus\", \"Neptune\"]\n  ]\n  const planets_array = []\n  const i = 0\n  const j = 0\n  let current_element = planets[i][0]\n  let found = false\n  while (i < planets.length) {\n    if (found) {\n      break\n    }\n    while (j < planets.length) {\n      if (found) {\n        break\n      }\n      if (current_element === planets[j][0]) {\n        current_element = planets[j][1]\n        found = true\n      }\n      j++\n    }\n    if (found) {\n      break\n    }\n    if (current_element === planet1) {\n      break\n    }\n    current_element = planets[i][1]\n    i++\n  }\n  while (i < planets.length) {\n    if (found) {\n      break\n    }\n    while (j < planets.length) {\n      if (found) {\n        break\n      }\n      if (current_element === planets[j][1]) {\n        current_element = planets[j][0]\n        found = true\n      }\n      j++\n    }\n    if (found) {\n      break\n    }\n    if (current_element === planet2) {\n      break\n    }\n    current_element = planets[i][0]\n    i++\n  }\n  if (found) {\n    return planets_array\n  }\n  return []\n}\n\n/*\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Mercury\", \"Jupiter\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n*/\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    [\"Mercury\", \"Venus\"],\n    [\"Venus\", \"Earth\"],\n    [\"Earth\", \"Mars\"],\n    [\"Mars\", \"Jupiter\"],\n    [\"Jupiter\", \"Saturn\"],\n    [\"Saturn\", \"Uranus\"],\n    [\"Uranus\", \"Neptune\"]\n  ]\n  const planets_array = []\n  const i = 0\n  const j = 0\n  let current_element = planets[i][0]\n  let found = false\n  while (i < planets.length) {\n    if (found) {\n      break\n    }\n    while (j < planets.length) {\n      if (found) {\n        break\n      }\n      if (current_element === planets[j][0]) {\n        current_element = planets[j][1]\n        found = true\n      }\n      j++\n    }\n    if (found) {\n      break\n    }\n    if (current_element === planet1) {\n      break\n    }\n    current_element = planets[i][1]\n    i++\n  }\n  while (i < planets.length) {\n    if (found) {\n      break\n    }\n    while (j < planets.length) {\n      if (found) {\n        break\n      }\n      if (current_element === planets[j][1]) {\n        current_element = planets[j][0]\n        found = true\n      }\n      j++\n    }\n    if (found) {\n      break\n    }\n    if (current_element === planet2) {\n      break\n    }\n    current_element = planets[i][0]\n    i++\n  }\n  if (found) {\n    return planets_array\n  }\n  return []\n}\n\nconst test_1 = bf(\"Mercury\", \"Jupiter\")\nconst test_2 = bf(\"Earth\", \"Mercury\")\nconst test_3 = bf(\"Mercury\", \"Uranus\")\nconst test_4 = bf(\"Mercury\", \"Neptune\")\nconst test_5 = bf(\"Mercury\", \"Jupiter\")\nconst test_6 = bf(\"Mercury\", \"Earth\")\nconst test_7 = bf(\"Mercury\", \"Jupiter\")\nconst test_8 = bf(\"Mercury\", \"Jupiter\")\nconst test_9 = bf(\"Mercury\", \"Saturn\")\nconst test_10 = bf(\"Mercury\", \"Jupiter\")\nconst test_11 = bf(\"Mercury\", \"Uranus\")\nconst test_12 = bf(\"Mercury\", \"Jupiter\")\nconst test_13 = bf(\"Mercury\", \"Jupiter\")\nconst test_14 = bf(\"Mercury\", \"Jupiter\")\nconst test_15 = bf(\"Mercury\", \"Saturn\")\nconst test_16 = bf(\"Mercury\", \"Jupiter\")\nconst test_17 = bf(\"Mercury\", \"Jupiter\")\nconst test_18 = bf(\"Mercury\", \"Jupiter\")\nconst test_19 = bf(\"Mercury\", \"Jupiter\")\nconst test_20 = bf(\"Merc"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const lstSorted = [...lst.slice().sort((a, b) => a.length - b.length)];\n  return lstSorted;\n}\n\nconst lst1 = [\n  'aa',\n  'aa',\n  'a',\n  'aaa'\n];\n\nconst lst2 = [\n  'aa',\n  'aa',\n  'a',\n  'aaa'\n];\n\nconst lst3 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst4 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst5 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst6 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst7 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst8 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst9 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst10 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst11 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst12 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst13 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst14 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst15 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst16 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst17 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst18 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst19 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst20 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst21 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst22 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst23 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst24 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst25 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst26 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst27 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst28 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst29 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst30 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst31 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst32 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst33 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst34 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst35 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst36 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst37 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst38 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst39 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst40 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst41 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst42 = [\n  'ab',\n  'a',\n  'aaa',\n  'cd'\n];\n\nconst lst43 = [\n  'ab',\n  'a',\n  'aaa',\n  '"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nexport default xOry;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  const sum = (a, b) => a + b;\n  return lst.length? lst.reduce(sum, 0) : 0;\n};\n\nexport default douBleTHeDifFerEnce;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare2 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare3 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare4 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare5 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare6 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare7 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare8 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare9 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {\n        diff.push(Math.abs(game[i] - guess[j]))\n      }\n    }\n  }\n  return diff\n}\n\nconst comPare10 = (game, guess) => {\n  const n = game.length\n  const m = guess.length\n  let diff = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (game[i] === guess[j]) {\n        diff.push(0)\n        continue\n      } else {"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  if (!extensions) {\n    return class_name;\n  }\n  const caps = extensions.map((extension) => extension.toUpperCase());\n  const sms = extensions.map((extension) => extension.toLowerCase());\n  return `${class_name}.${caps.sort((a, b) => {\n    return b.length - a.length;\n  })[0]}`;\n};\n\nmodule.exports = strOngeStExtEnsIon;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  if (a === b) return true;\n  if (a.length === 0 || b.length === 0) return false;\n  return cycPattErnChEck(b, a.slice(1));\n};\n\nconst cycPattErnChEck = (a, b) => {\n  if (a === b) return true;\n  if (a.length === 0 || b.length === 0) return false;\n  return cycPattErnChEck(b, a.slice(1));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let countOdd = 0, countEven = 0;\n  while (num) {\n    countOdd += num % 2;\n    num = Math.floor(num / 2);\n    countEven += num % 2;\n  }\n  return [countOdd, countEven];\n};\n\nconst check = (a, b, c) => a + b === c;\n\n//console.log(check(1, 2, 3));\n\nconst evenOdd = (arr) => arr.every(v => v % 2 === 0);\n\nconsole.log(evenOdd([1, 2, 3]));\n\n/*\n  Partially applied function.\n  The function returns the number of even digits in an array.\n  [1, 2, 3]\n  [3, 5, 7]\n  [5, 9, 13]\n*/\nconst evenDigits = (arr) => arr.reduce((sum, num) => sum + num % 2, 0);\n\nconsole.log(evenDigits([1, 2, 3]));\n\n// console.log(evenDigits([3, 5, 7]));\n// console.log(evenDigits([5, 9, 13]));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  number = Math.abs(number)\n\n  let letters = ['m', 'd', 'c', 'l', 'x', 'v', 'i']\n  let result = ''\n\n  let index = 0\n  let count = 1\n  let i = 1\n\n  while (number > 0) {\n    while (number % 10 === 0 && count < 7) {\n      result = letters[index] + result\n      index++\n      count++\n      number = number / 10\n    }\n    if (count === 6) {\n      result = result.toLowerCase()\n      index = 0\n      count = 1\n    } else if (number % 10!== 0) {\n      count++\n    }\n    number = number / 10\n  }\n\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  return (\n    Math.abs(a - c) <= 1 &&\n    Math.abs(b - c) <= 1 &&\n    Math.abs(b - a) <= 1\n  );\n};\n\n/*\n Given the length of a side, return true if the length is a perfect\n  square, false otherwise.\n  A perfect square is a number that is the square root of another number.\n  Example:\n  perFesSqr(9) == true\n  perFesSqr(1) == false\n  */\nconst perFesSqr = n => {\n  return Math.sqrt(n) === Math.round(Math.sqrt(n));\n};\n\n/*\n Given the length of a side, return the area of the triangle.\n  An area of a triangle is half the length of the hypotenuse.\n  Example:\n  areaTri(6) == 9\n  areaTri(9) == 27\n  areaTri(15) == 495\n  */\nconst areaTri = n => {\n  return Math.pow(n, 2) / 2;\n};\n\n/*\n Given the length of a side, return the volume of the pyramid.\n  The volume of a pyramid is equal to the area times the length of the\n  base.\n  Example:\n  volumePyr(5) == 25\n  volumePyr(3) == 1\n  */\nconst volumePyr = n => {\n  return n * areaTri(n);\n};\n\n/*\n Given the length of a side, return the volume of the cube.\n  The volume of a cube is equal to the cube of the length.\n  Example:\n  volumeCube(6) == 36\n  volumeCube(9) == 27\n  */\nconst volumeCube = n => {\n  return Math.pow(n, 3);\n};\n\n/*\n Given the length of a side, return the area of the sphere.\n  The area of a sphere is equal to the radius squared.\n  Example:\n  areaSphe(4) == 16\n  areaSphe(6) == 36\n  areaSphe(8) == 64\n  */\nconst areaSphe = n => {\n  return Math.pow(n, 2) / 2;\n};\n\n/*\n Given the length of a side, return the volume of the sphere.\n  The volume of a sphere is equal to the area times the length of the\n  radius.\n  Example:\n  volumeSphe(4) == 16\n  volumeSphe(6) == 36\n  volumeSphe(8) == 64\n  */\nconst volumeSphe = n => {\n  return n * areaSphe(n);\n};\n\n/*\n Given the length of a side, return the volume of the cylinder.\n  The volume of a cylinder is equal to the area times the length.\n  Example:\n  volumeCyl(4) == 4\n  volumeCyl(6) == 18\n  volumeCyl(8) == 32\n  */\nconst volumeCyl = n => {\n  return n * areaTri(n);\n};\n\n/*\n Given the length of a side, return the volume of the cone.\n  The volume of a cone is equal to the area times the length.\n  Example:\n  volumeCone(4) == 4\n  volumeCone(6) == 18\n  volumeCone(8) == 32\n  */\nconst volumeCone = n => {\n  return n * areaSphe(n);\n};\n\n/*\n Given the length of a side, return the volume of the cylinder.\n  The volume of a cylinder is equal to the area times the length.\n  Example:\n  volumeCyl(4) == 4\n  volumeCyl(6) == 18\n  volumeCyl(8) == 32\n  */\nconst volumeCyl2 = n => {\n  return n * areaTri(n);\n};\n\n/*\n Given the length of a side, return the volume of the cone.\n  The volume of a cone is equal to the area times the length.\n  Example:\n  volumeCone(4) == 4\n  volumeCone(6) == 18\n  volumeCone(8) == 32\n  */\nconst volumeCone2 = n => {\n  return n * areaSphe(n);\n};\n\n/*\n Given the length of a side, return the volume of the cylinder.\n  The volume of a cylinder is equal to the area times the length.\n  Example:\n  volumeCyl(4) == 4\n  volumeCyl(6) == 18\n  volumeCyl(8) == 32\n  */\nconst volumeCyl3 = n => {\n  return n * areaTri(n);\n};\n\n/*\n Given the length of a side, return the volume of the cone.\n  The volume of a cone is equal to the area times the length.\n  Example:\n  volumeCone(4) == 4\n  volumeCone(6) == 18\n  volumeCone(8) == 32\n  */\nconst volumeCone3 = n => {\n  return n * areaSphe(n);\n};\n\n/*\n Given the length of a side, return the volume of the cylinder.\n  The volume of a cylinder is equal to the area times the length.\n  Example:\n  volumeCyl(4) == 4\n  volumeCyl(6) == 18\n  volumeCyl(8) == 32\n  */\nconst volumeCyl4 = n => {\n  return n * areaTri(n);\n};\n\n/*\n Given the length of a side, return the volume of the cone.\n  The volume of a cone is equal to the area times the length.\n  Example:\n  volumeCone(4) == 4\n  volumeCone(6) == 18\n  volumeCone(8) == 32\n  */\nconst volumeCone4 = n => {\n  return n * areaSphe(n);\n};\n\n/*\n Given the length of a side, return the volume of the cylinder.\n  The volume of a cylinder is equal to the area times the length.\n  Example:\n  volumeCyl(4) == 4\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  const uniqueChars = new Set();\n  for (const w of words) {\n    for (let i = 0; i < w.length; i++) {\n      const char = w[i];\n      if (uniqueChars.has(char)) {\n        uniqueChars.delete(char);\n      } else {\n        uniqueChars.add(char);\n      }\n    }\n  }\n  return words[0].length > uniqueChars.size? words[0] : words[words.length - 1];\n};\n\nmodule.exports = finDMax;\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if(number === 0) {\n    return [need, remaining]\n  }\n  else {\n    return [number + eat(number - 1, need, remaining), remaining]\n  }\n}\n\nconst test = eat(0, 0, 0)\nconsole.log(JSON.stringify(test))\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n    let len = operator.length\n    let len1 = operand.length - 1\n    let result = 0\n    let op = operator[0]\n    let op1 = operand[0]\n    let op2 = operand[1]\n    \n    for (let i = 1; i < len1; i++) {\n        result = result + op1 * op2\n        op = operator[i]\n        op1 = operand[i + 1]\n        op2 = operand[i]\n    }\n    \n    if (op === '+') {\n        result = result + op1\n    } else if (op === '-') {\n        result = result + op1 - op2\n    } else if (op === '*') {\n        result = result + op1 * op2\n    } else if (op === '/') {\n        result = result + op1 // /\n    } else if (op === '**') {\n        result = result + op1 // **\n    } else {\n        throw 'Unrecognized operator'\n    }\n    \n    return result\n}\n\n\nconsole.log(doALgebRa(['+', '*', '-'], [2, 3, 4, 5]))<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let newS = '';\n  let n = s.length;\n  for (let i = 0; i < n; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      newS += s[i].toUpperCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\nconsole.log(solVe('1234'));\nconsole.log(solVe('ab'));\nconsole.log(solVe('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nexport default strIngTOMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const aInt = Math.floor(a);\n  const bInt = Math.floor(b);\n\n  let result = [];\n  for (let i = aInt; i <= bInt; i += 2) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nmodule.exports = genEratEInteGerS;\n<|endoftext|>"}
