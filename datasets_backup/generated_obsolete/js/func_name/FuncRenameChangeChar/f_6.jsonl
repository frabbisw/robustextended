{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const e = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const c = (numbers[i] - e);\n    if (Math.abs(c) <= threshold) return true;\n  }\n  return false;\n};\n\nexport {\n  hasclosEElemEntS,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const paren_array = paren_string.split('');\n  const open_paren_array = [];\n  const close_paren_array = [];\n  let current_paren_string = '';\n  let current_open_paren_index = -1;\n  let current_close_paren_index = -1;\n  for (let i = 0; i < paren_array.length; i++) {\n    if (paren_array[i] === '(') {\n      open_paren_array.push(paren_array[i]);\n      current_open_paren_index = i;\n    } else if (paren_array[i] === ')') {\n      if (current_open_paren_index!== -1) {\n        current_paren_string = current_paren_string + paren_array[i];\n        close_paren_array.push(paren_array[i]);\n        current_close_paren_index = i;\n      }\n    }\n  }\n  return open_paren_array.concat(close_paren_array);\n};\n\n/**\n  * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups(' (()) ((())')\n  ['(())', '(()())']\n  */\nconst sepAratEPareNGrOups2 = (paren_string) => {\n  const paren_array = paren_string.split('');\n  const open_paren_array = [];\n  const close_paren_array = [];\n  let current_paren_string = '';\n  let current_open_paren_index = -1;\n  let current_close_paren_index = -1;\n  for (let i = 0; i < paren_array.length; i++) {\n    if (paren_array[i] === '(') {\n      open_paren_array.push(paren_array[i]);\n      current_open_paren_index = i;\n    } else if (paren_array[i] === ')') {\n      if (current_open_paren_index!== -1) {\n        current_paren_string = current_paren_string + paren_array[i];\n        close_paren_array.push(paren_array[i]);\n        current_close_paren_index = i;\n      }\n    }\n  }\n  return open_paren_array.concat(close_paren_array);\n};\n\ndescribe('sepAratEPareNGrOups', () => {\n  it('should return correct output', () => {\n    const paren_string = '(()) ((())';\n    expect(sepAratEPareNGrOups(paren_string)).toBe(['()', '(())', '(()())']);\n    expect(sepAratEPareNGrOups2(paren_string)).toBe(['(())', '(()())']);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  return parseInt(number, 10) - Math.floor(number)\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(5)\n  0\n  */\nconst truNcatENumbEr2 = (number) => {\n  return Math.floor(number) - parseInt(number, 10)\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr3 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr4 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr5 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr6 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr7 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr8 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr9 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr10 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr11 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr12 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr13 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(15)\n  5\n  */\nconst truNcatENumbEr14 = (number) => {\n  return Math.floor(number) - parseInt(number, 10) + 5\n}\n\n/* Given a positive integer number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  const {\n    operations: [],\n    add = (operations, val) => operations.push(val),\n    subtract = (operations, val) => {\n      operations.push(-val);\n    },\n    total = () => operations.reduce((acc, val) => acc + val, 0),\n  } = operations;\n\n  const findMin = () => {\n    let min = operations.shift();\n    operations.forEach(value => {\n      if (value < min) {\n        min = value;\n      }\n    });\n    return min;\n  };\n\n  return operations.reduce(\n    (prev, current) => prev === min? current : (current > 0 && current < prev)? current : prev,\n    findMin(),\n  );\n};\n\nexport default belOwZeRo;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  return (x) => {\n    let sum = 0.0\n    let i = 0\n    numbers.forEach(x => {\n      sum += Math.abs(x - (i + 0.5))\n      i++\n    })\n    return sum / numbers.length\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  let res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      res.push(delimeter);\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  let stack = [0];\n  let i = 0;\n  let len = paren_string.length;\n  while (i < len) {\n    if (paren_string[i] === '(') {\n      stack.push(i);\n    } else if (paren_string[i] === ')') {\n      let top = stack.pop();\n      if (stack.length === 0) {\n        return top;\n      } else {\n        let index = stack[stack.length - 1];\n        stack[stack.length - 1] = Math.max(index, top);\n      }\n    }\n    i++;\n  }\n  return 0;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs2 = (paren_string) => {\n  let stack = [];\n  let i = 0;\n  let len = paren_string.length;\n  while (i < len) {\n    if (paren_string[i] === '(') {\n      stack.push(i);\n    } else if (paren_string[i] === ')') {\n      let top = stack.pop();\n      if (stack.length === 0) {\n        return top;\n      } else {\n        let index = stack[stack.length - 1];\n        stack[stack.length - 1] = Math.max(index, top);\n      }\n    }\n    i++;\n  }\n  return 0;\n};\n\n/*\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  >>> parSeNeStedPAreNs2('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str => regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNgInverse = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str =>!regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgInverse([], 'a')\n  []\n  >>> filTerBYSubsTriNgInverse(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNgInverseByRegExp = (strings, substring) => {\n  const regex = new RegExp(substring);\n  return strings.filter(str =>!regex.test(str));\n};\n\n/*\n  >>> filTerBYSubsTriNgInverseByRegExp(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNgInverseByRegExpWithSubstring = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str =>!regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgInverseByRegExp(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNgInverseByRegExpWithSubstring2 = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str => regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring2([], 'a')\n  []\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring2(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNgInverseByRegExpWithSubstring3 = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str => regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring3([], 'a')\n  []\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring3(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNgInverseByRegExpWithSubstring4 = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str => regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring4([], 'a')\n  []\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring4(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNgInverseByRegExpWithSubstring5 = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str => regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring5([], 'a')\n  []\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring5(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNgInverseByRegExpWithSubstring6 = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str => regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring6([], 'a')\n  []\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring6(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNgInverseByRegExpWithSubstring7 = (strings, substring) => {\n  const regex = new RegExp(substring, 'i');\n  return strings.filter(str => regex.test(str));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring7([], 'a')\n  []\n  >>> filTerBYSubsTriNgInverseByRegExpWithSubstring7(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBY"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return sum, product\n}\n\n/*\n  Given a list of numbers, return the sum and the product of all the numbers in a list.\n  >>> sumprod([])\n  (0, 1)\n  >>> sumprod([1, 2, 3, 4])\n  (10, 24)\n  >>> sumprod([1, 1, 1, 1])\n  (4, 1)\n  */\nconst sumprod = (numbers) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return sum, product\n}\n\n/*\n  Given a list of numbers, return the sum and the product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumprodUct([1, 1, 1, 1])\n  (4, 1)\n  */\nconst sumprodUct = (numbers) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return sum, product\n}\n\n/*\n  Given a list of numbers, return the sum and the product of all the numbers in a list.\n  >>> sumprod([1, 2, 3, 4])\n  (10, 24)\n  >>> sumprod([1, 1, 1, 1])\n  (4, 1)\n  */\nconst sumprod = (numbers) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return sum, product\n}\n\n/*\n  Given a list of numbers, return the sum and the product of all the numbers in a list.\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumprodUct([1, 1, 1, 1])\n  (4, 1)\n  */\nconst sumprodUct = (numbers) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return sum, product\n}\n\nmodule.exports = {\n    sumprod,\n    sumprodUct,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  let res = [];\n  let max = 0;\n  let maxIndex = 0;\n  let current = 0;\n\n  while (current < numbers.length) {\n    if (numbers[current] > max) {\n      max = numbers[current];\n      maxIndex = current;\n    }\n    res.push(numbers[current]);\n    current += 1;\n  }\n  return res;\n}\n\n// console.log(rolLingmax([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (isPAlinDrome(string.substr(i))) {\n      prefix += string.substr(i);\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (isPAlinDrome(string.substr(i, string.length - i))) {\n      suffix += string.substr(i, string.length - i);\n      break;\n    }\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Main */\nconst main = () => {\n  let string = 'cata';\n  console.log(makePalindrome(string));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  if (a.length!== b.length) {\n    return '';\n  }\n  let arrXor = [];\n  let i = a.length - 1;\n  let j = b.length - 1;\n  while (i >= 0 && j >= 0) {\n    arrXor.push(a[i] ^ b[j]);\n    i--;\n    j--;\n  }\n  return arrXor.join('');\n};\n\nconsole.log(strIngXOr('010', '110'));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n\nexport default lonGest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  let i;\n  let tmp = a % b;\n  while (tmp!= 0) {\n    i = b;\n    b = tmp;\n    tmp = a % b;\n  }\n  return i;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  */\nconst greAtesTCommOnDIvisoR2 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    let tmp = a % b;\n    a = b;\n    b = tmp;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR3 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = a % b;\n    a = b;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR4 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = a % b;\n    a = b;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR5 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = a % b;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR6 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = a % b;\n  }\n  return b;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR7 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = b % a;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR8 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = b % a;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR9 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = a % b;\n  }\n  return b;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR10 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = b % a;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR11 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = b % a;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR12 = (a, b) => {\n  let i = 0;\n  while (b!= 0) {\n    i = b;\n    b = a % b;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtes"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  if (string.length === 0) return []\n  let result = []\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    let len = j - i\n    let s = string.substring(i, j + 1)\n    if (s.length > 0) {\n      result.push(s)\n    }\n    i += len + 1\n  }\n  return result\n}\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  *\n  * @param {string} string - input string\n  * @return {Array} - list of all suffixes from shortest to longest\n  */\nconst allsuffixes = (string) => {\n  if (string.length === 0) return []\n  let result = []\n  let i = string.length - 1\n  let j = 0\n  while (i > 0) {\n    let len = i\n    let s = string.substring(j, i + 1)\n    if (s.length > 0) {\n      result.push(s)\n    }\n    j -= len + 1\n    i--\n  }\n  return result\n}\n\n/**\n * Return list of all substrings of the input string\n *\n * @param {string} string - input string\n * @return {Array} - list of all substrings of the input string\n */\nconst allsubStrings = (string) => {\n  if (string.length === 0) return []\n  let result = []\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    let len = j - i\n    let s = string.substring(i, j + 1)\n    if (s.length > 0) {\n      result.push(s)\n    }\n    i += len + 1\n  }\n  return result\n}\n\n/**\n * Return list of all prefixes and suffixes of the input string\n *\n * @param {string} string - input string\n * @return {Array} - list of all prefixes and suffixes of the input string\n */\nconst allSubStrings = (string) => {\n  if (string.length === 0) return []\n  let result = []\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    let len = j - i\n    let s = string.substring(i, j + 1)\n    if (s.length > 0) {\n      result.push(s)\n    }\n    i += len + 1\n  }\n  return result\n}\n\n/**\n * Return list of all unique prefixes of the input string\n *\n * @param {string} string - input string\n * @return {Array} - list of all unique prefixes of the input string\n */\nconst uniquePrefixes = (string) => {\n  if (string.length === 0) return []\n  let result = []\n  let prefixes = allprefIxes(string)\n  let len = prefixes.length\n  let index = 0\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    let prefix = prefixes[index]\n    let suffix = string.substring(i, j + 1)\n    if (suffix.length > 0) {\n      result.push(prefix + suffix)\n    }\n    index++\n    i += len + 1\n    j -= len + 1\n  }\n  return result\n}\n\n/**\n * Return list of all unique suffixes of the input string\n *\n * @param {string} string - input string\n * @return {Array} - list of all unique suffixes of the input string\n */\nconst uniqueSuffixes = (string) => {\n  if (string.length === 0) return []\n  let result = []\n  let suffixes = allsuffixes(string)\n  let len = suffixes.length\n  let index = 0\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    let suffix = suffixes[index]\n    let prefix = string.substring(j - len + 1, j + 1)\n    if (prefix.length > 0) {\n      result.push(prefix + suffix)\n    }\n    index++\n    i += len + 1\n    j -= len + 1\n  }\n  return result\n}\n\n/**\n * Return list of all unique substrings of the input string\n *\n * @param {string} string - input string\n * @return {Array} - list of all unique substrings of the input string\n */\nconst uniqueSubStrings = (string) => {\n  if (string.length === 0) return []\n  let result = []\n  let substrings = allsubStrings(string)\n  let len = substrings.length\n  let index = 0\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    let substring = substrings[index]\n    let prefix = string.substring(0, i + 1)\n    if (prefix.length > 0) {\n      result.push(prefix + substring)\n    }\n    index++\n    i += len + 1\n    j -= len + 1\n  }\n  return result\n}\n\n/**\n * Return list of all unique substrings of the input string\n *\n * @param {string} string - input string\n * @return {Array} - list of all unique substrings of the input string\n */\nconst uniqueSubStrings = (string) => {\n  if (string.length === 0) return []\n  let result = []\n  let substrings = allsubStrings(string)\n  let len = substrings.length\n  let index = 0\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    let substring = substrings[index]\n    let prefix = string.substring(0, i + 1)\n    if (prefix.length > 0) {\n      result.push(prefix + substring)\n    }\n    index++\n    i += len + 1\n    j -= len + 1\n  }\n  return result\n}\n\nexport default {\n  allprefIxes,\n  allsuffixes,\n  allsubStrings,\n  all"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(i.toString());\n  }\n  return a.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe2 = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(i.toString());\n  }\n  return a.join('');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe3 = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(i.toString());\n  }\n  return a.join(' ');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n    const chars = string.split('')\n    let count = 0\n    for (let i = 0; i < chars.length; i++) {\n        for (let j = i + 1; j < chars.length; j++) {\n            if (chars[i] === chars[j]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\n/*\n  Given a string, return the frequency of each distinct character\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  [0, 1, 2, 1, 1]\n  >>> couNtDiStincTChAractErs('Jerry')\n  [0, 1, 1, 0, 1]\n  */\nconst couNtDiStincTChAractErs = (string) => {\n    const chars = string.split('')\n    let count = []\n    for (let i = 0; i < chars.length; i++) {\n        let found = false\n        for (let j = 0; j < count.length; j++) {\n            if (chars[i] === count[j]) {\n                found = true\n            }\n        }\n        if (!found) {\n            count.push(chars[i])\n        }\n    }\n    return count\n}\n\nmodule.exports = {\n    countChar: couNtDiStincTChAractErs\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  let current_beat = 0\n  let current_beat_duration = 0\n\n  const beat_lengths = []\n\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      if (current_beat === 0) {\n        beat_lengths.push(4)\n      } else if (current_beat > 0) {\n        beat_lengths.push(current_beat_duration)\n      }\n      current_beat = 0\n      current_beat_duration = 4\n    } else if (music_string[i] === '|') {\n      if (current_beat === 0) {\n        beat_lengths.push(2)\n      } else if (current_beat > 0) {\n        beat_lengths.push(current_beat_duration)\n      }\n      current_beat = 0\n      current_beat_duration = 2\n    } else if (music_string[i] === '.') {\n      if (current_beat === 0) {\n        beat_lengths.push(1)\n      } else if (current_beat > 0) {\n        beat_lengths.push(current_beat_duration)\n      }\n      current_beat = 0\n      current_beat_duration = 1\n    } else {\n      current_beat += 1\n      current_beat_duration = 1\n    }\n  }\n\n  return beat_lengths\n}\n\nmodule.exports = parSeMuSic\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n    let count = 0;\n    let start = 0;\n    while ((start = string.indexOf(substring, start + 1))!== -1) {\n        count++;\n    }\n    return count;\n};\n\nconst _str = str => str.replace(/\\s+/g,'');\n\nconst _str2 = str => str.replace(/^\\s+|\\s+$/g, '');\n\nconst str2 = str => _str2(str);\n\nconst str = str => _str(str);\n\nmodule.exports = {\n    str2,\n    str\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => a - b).join(' ');\n  return sorted;\n};\n\n/*\n  Input:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Output:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Sorts the input numbers and removes duplicates\n  */\nconst sortUnique = (numbers) => {\n  return _.uniq(numbers.split(' ')).join(' ');\n};\n\n/*\n  Input:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Output:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Sort the input numbers in descending order,\n  then add 'zero' at the beginning\n  */\nconst sortAndAddZero = (numbers) => {\n  const sorted = sortUnique(numbers);\n  const sortedAddZero = 'zero' + sorted;\n  return sortedAddZero;\n};\n\n/*\n  Input:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Output:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Sort the input numbers in descending order,\n  then add 'zero' at the end\n  */\nconst sortAndAddZero2 = (numbers) => {\n  const sorted = sortUnique(numbers);\n  const sortedAddZero = sorted + 'zero';\n  return sortedAddZero;\n};\n\n/*\n  Input:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Output:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Sort the input numbers in descending order,\n  then add 'zero' at the beginning and 'nine' at the end\n  */\nconst sortAndAddZero3 = (numbers) => {\n  const sorted = sortUnique(numbers);\n  const sortedAddZero = 'zero' + sorted + 'nine';\n  return sortedAddZero;\n};\n\n/*\n  Input:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Output:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Sort the input numbers in descending order,\n  then add 'zero' at the beginning and 'nine' at the end\n  */\nconst sortAndAddZero4 = (numbers) => {\n  const sorted = sortUnique(numbers);\n  const sortedAddZero = sorted + 'zero' + sorted + 'nine';\n  return sortedAddZero;\n};\n\n/*\n  Input:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Output:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Sort the input numbers in descending order,\n  then add 'zero' at the beginning and 'nine' at the end\n  */\nconst sortAndAddZero5 = (numbers) => {\n  const sorted = sortUnique(numbers);\n  const sortedAddZero = sorted + 'zero' + sorted + 'nine';\n  return sortedAddZero;\n};\n\n/*\n  Input:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Output:\n  [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n   'six',\n   'seven',\n    'eight',\n    'nine'\n  ]\n\n  Sort the input numbers in descending order,\n  then add 'zero' at the beginning and 'nine' at the end\n  */\nconst sortAndAddZero6 = (numbers) => {\n  const sorted = sortUnique(numbers);\n  const sortedAddZero = sorted + 'zero' + sorted + 'nine';\n  return sortedAddZero;\n};\n\n/*\n  Input:\n  [\n    "}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    let minIndex = 0;\n    let maxIndex = 0;\n    let distance = -1;\n    numbers.forEach((n, i) => {\n        if (distance == -1 || distance > Math.abs(n - max)) {\n            max = n;\n            maxIndex = i;\n            distance = Math.abs(n - max);\n        }\n        if (distance == -1 || distance > Math.abs(n - min)) {\n            min = n;\n            minIndex = i;\n            distance = Math.abs(n - min);\n        }\n    });\n    return [min, max];\n};\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\nconst finDCloSestELemEnts = (numbers) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    let minIndex = 0;\n    let maxIndex = 0;\n    let distance = -1;\n    numbers.forEach((n, i) => {\n        if (distance == -1 || distance > Math.abs(n - max)) {\n            max = n;\n            maxIndex = i;\n            distance = Math.abs(n - max);\n        }\n        if (distance == -1 || distance > Math.abs(n - min)) {\n            min = n;\n            minIndex = i;\n            distance = Math.abs(n - min);\n        }\n    });\n    return [min, max];\n};\n\nexport { finDCloSestELemEnts, finDCloSestELemEnts };\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const len = numbers.length\n  const [low, high] = [...numbers].sort((a, b) => a - b)\n  const factor = (high - low) / (len - 1)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(low + (i * factor))\n  }\n  return result\n}\n\n/* Given a list of numbers, compute the median of that list */\nconst median = (numbers) => {\n  const len = numbers.length\n  if (len === 0) {\n    return undefined\n  } else if (len === 1) {\n    return numbers[0]\n  } else if (len === 2) {\n    return (numbers[0] + numbers[1]) / 2\n  } else if (len % 2 === 0) {\n    const medianOfEven = (numbers[len / 2 - 1] + numbers[len / 2]) / 2\n    return medianOfEven\n  } else {\n    return numbers[len / 2]\n  }\n}\n\n/* Given a list of numbers, compute the mean of that list */\nconst mean = (numbers) => {\n  return (numbers.reduce((a, b) => a + b) / numbers.length)\n}\n\n/* Given a list of numbers, compute the mode of that list */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len === 0) {\n    return undefined\n  } else if (len === 1) {\n    return numbers[0]\n  } else {\n    const modes = []\n    const max = {}\n    for (let i = 0; i < len; i++) {\n      const value = numbers[i]\n      if (value in max) {\n        modes.push(max[value])\n      } else {\n        max[value] = 1\n      }\n    }\n    return modes.reduce((a, b) => a.concat(b))\n  }\n}\n\n/* Given a list of numbers, compute the std deviation of that list */\nconst stdDev = (numbers) => {\n  const len = numbers.length\n  if (len === 0) {\n    return undefined\n  } else if (len === 1) {\n    return undefined\n  } else {\n    const mean = mean(numbers)\n    const diff = []\n    for (let i = 0; i < len; i++) {\n      diff.push((numbers[i] - mean))\n    }\n    return (diff.reduce((a, b) => a + b) / (len - 1)) / (mean * (len - 1))\n  }\n}\n\n/* Given a list of numbers, compute the variance of that list */\nconst variance = (numbers) => {\n  const len = numbers.length\n  if (len === 0) {\n    return undefined\n  } else if (len === 1) {\n    return undefined\n  } else {\n    const mean = mean(numbers)\n    const diff = []\n    for (let i = 0; i < len; i++) {\n      diff.push((numbers[i] - mean))\n    }\n    return (diff.reduce((a, b) => a + b) / (len - 1)) / (mean * (len - 1))\n  }\n}\n\n/* Given a list of numbers, compute the standard deviation of that list */\nconst stdDev = (numbers) => {\n  const len = numbers.length\n  if (len === 0) {\n    return undefined\n  } else if (len === 1) {\n    return undefined\n  } else {\n    const mean = mean(numbers)\n    const diff = []\n    for (let i = 0; i < len; i++) {\n      diff.push((numbers[i] - mean))\n    }\n    return (diff.reduce((a, b) => a + b) / (len - 1)) / (mean * (len - 1))\n  }\n}\n\n/* Given a list of numbers, compute the skewness of that list */\nconst skewness = (numbers) => {\n  const len = numbers.length\n  if (len === 0) {\n    return undefined\n  } else if (len === 1) {\n    return undefined\n  } else {\n    const mean = mean(numbers)\n    const diff = []\n    for (let i = 0; i < len; i++) {\n      diff.push((numbers[i] - mean))\n    }\n    const variance = variance(numbers)\n    const diffSq = diff.reduce((a, b) => a + b)\n    return (diffSq / (len - 1)) / (variance * (len - 1))\n  }\n}\n\n/* Given a list of numbers, compute the kurtosis of that list */\nconst kurtosis = (numbers) => {\n  const len = numbers.length\n  if (len === 0) {\n    return undefined\n  } else if (len === 1) {\n    return undefined\n  } else {\n    const mean = mean(numbers)\n    const diff = []\n    for (let i = 0; i < len; i++) {\n      diff.push((numbers[i] - mean))\n    }\n    const variance = variance(numbers)\n    const diffSq = diff.reduce((a, b) => a + b)\n    const diffSqDev = diffSq / (len - 1)\n    const diffSqSq = diffSqDev * diffSqDev\n    return (diffSqSq / (len - 1)) / (variance * (len - 1))\n  }\n}\n\n/* Given a list of numbers, compute the mode of that list */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len === 0) {\n    return undefined\n  } else if (len === 1) {\n    return numbers[0]\n  } else {\n    const modes = []\n    const max = {}\n    for (let i = 0; i < len; i"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const retVal = [];\n  const valuesToIterate = typeof values === 'object'? values.values() : values;\n  for (const item of valuesToIterate) {\n    if (typeof item === 'number') {\n      retVal.push(item);\n    }\n  }\n  return retVal;\n};\n\n// Converts given list of values to a string\nconst valuesToString = (values) => {\n  return values.join(' ');\n};\n\n// Filters given list of values from a given string\nconst filTerString = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.filter(item => {\n    return stringToFilTer.indexOf(item) > -1;\n  });\n};\n\n// Checks if given list of values contains given string\nconst isTerStringInTer = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.some(item => {\n    return stringToFilTer.indexOf(item) > -1;\n  });\n};\n\n// Filters given list of values from a given string\nconst filTerString2 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.filter(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase() === item;\n    });\n  });\n};\n\n// Converts given string to a set of numbers\nconst stringToNum = (string) => {\n  const nums = string.split(' ').map(Number);\n  return nums.filter(item => {\n    return isFinite(item);\n  });\n};\n\n// Filters given list of values from a given string\nconst filTerString3 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.filter(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase() === item;\n    });\n  });\n};\n\n// Filters given list of values from a given string\nconst filTerString4 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.filter(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase().replace(/\\s/g, '') === item;\n    });\n  });\n};\n\n// Converts given list of values to a string\nconst valuesToString2 = (values) => {\n  return values.join(' ');\n};\n\n// Checks if given list of values contains given string\nconst isTerStringInTer2 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.some(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase() === item;\n    });\n  });\n};\n\n// Filters given list of values from a given string\nconst filTerString5 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.filter(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase().replace(/\\s/g, '') === item;\n    });\n  });\n};\n\n// Converts given list of values to a string\nconst valuesToString3 = (values) => {\n  return values.join(' ');\n};\n\n// Checks if given list of values contains given string\nconst isTerStringInTer3 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.some(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase().replace(/\\s/g, '') === item;\n    });\n  });\n};\n\n// Converts given list of values to a string\nconst valuesToString4 = (values) => {\n  return values.join(' ');\n};\n\n// Filters given list of values from a given string\nconst filTerString6 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.filter(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase().replace(/\\s/g, '') === item;\n    });\n  });\n};\n\n// Checks if given list of values contains given string\nconst isTerStringInTer4 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.some(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase().replace(/\\s/g, '') === item;\n    });\n  });\n};\n\n// Filters given list of values from a given string\nconst filTerString7 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.filter(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase().replace(/\\s/g, '') === item;\n    });\n  });\n};\n\n// Checks if given list of values contains given string\nconst isTerStringInTer5 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.some(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase().replace(/\\s/g, '') === item;\n    });\n  });\n};\n\n// Filters given list of values from a given string\nconst filTerString8 = (values, string) => {\n  const stringToFilTer = string.split(' ');\n  return values.filter(item => {\n    return stringToFilTer.every(item => {\n      return item.toLowerCase().replace(/\\s/g, '') === item;\n    });\n  });\n};\n\n// Checks if given list of values contains given string\nconst isTerString"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n    return string.length;\n};\n\n/* Return character at specified index of given string\n  >>> strCharAt('')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strCharAt('abc')\n  'a'\n  >>> strCharAt('abc', 1)\n  'b'\n  */\nconst strCharAt = (string, index) => {\n    if (index < 0 || index >= strLen(string)) {\n        throw new IndexError(`string index out of range: ${index}`);\n    }\n    return string[index];\n};\n\n/* Return character at specified index of given string\n  >>> strCharAt('')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strCharAt('abc')\n  'a'\n  >>> strCharAt('abc', 1)\n  'b'\n  */\nconst strCharAtReverse = (string, index) => {\n    if (index < 0 || index >= strLen(string)) {\n        throw new IndexError(`string index out of range: ${index}`);\n    }\n    return string[strLen(string) - 1 - index];\n};\n\n/* Return characters at specified indices of given string\n  >>> strCharAtReverse('')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strCharAtReverse('abc')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strCharAtReverse('abc', 1, 2)\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strCharAtReverse('abc', 1, 2, 3)\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strCharAtReverse('abc', 1, 2, 3, 4)\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strCharAtReverse('abc', 1, 2, 3, 4, 5)\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  */\nconst strCharAtReverse = (string, index1, index2) => {\n    if (index1 < 0 || index1 >= strLen(string) ||\n        index2 < 0 || index2 >= strLen(string)) {\n        throw new IndexError(`string index out of range: ${index1}`);\n    }\n    return string.substring(index1, index2 + 1);\n};\n\n/* Return character at specified index of given string\n  >>> strIndexOf('')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strIndexOf('abc')\n  0\n  >>> strIndexOf('abc', 1)\n  1\n  >>> strIndexOf('abc', 2)\n  -1\n  >>> strIndexOf('abc', 2, 3)\n  -1\n  */\nconst strIndexOf = (string, substring, index) => {\n    if (index < 0 || index >= strLen(string)) {\n        throw new IndexError(`string index out of range: ${index}`);\n    }\n    return string.indexOf(substring, index);\n};\n\n/* Return character at specified index of given string\n  >>> strIndexOfReverse('')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strIndexOfReverse('abc')\n  -1\n  >>> strIndexOfReverse('abc', 1)\n  1\n  >>> strIndexOfReverse('abc', 2)\n  0\n  >>> strIndexOfReverse('abc', 2, 3)\n  2\n  */\nconst strIndexOfReverse = (string, substring, index) => {\n    if (index < 0 || index >= strLen(string)) {\n        throw new IndexError(`string index out of range: ${index}`);\n    }\n    return string.lastIndexOf(substring, index);\n};\n\n/* Return character at specified index of given string\n  >>> strLastIndexOf('')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strLastIndexOf('abc')\n  -1\n  >>> strLastIndexOf('abc', 1)\n  1\n  >>> strLastIndexOf('abc', 2)\n  -1\n  >>> strLastIndexOf('abc', 2, 3)\n  2\n  */\nconst strLastIndexOf = (string, substring, index) => {\n    if (index < 0 || index >= strLen(string)) {\n        throw new IndexError(`string index out of range: ${index}`);\n    }\n    return string.lastIndexOf(substring, index);\n};\n\n/* Return character at specified index of given string\n  >>> strLastIndexOfReverse('')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strLastIndexOfReverse('abc')\n  0\n  >>> strLastIndexOfReverse('abc', 1)\n  -1\n  >>> strLastIndexOfReverse('abc', 2)\n  1\n  >>> strLastIndexOfReverse('abc', 2, 3)\n  2\n  */\nconst strLastIndexOfReverse = (string, substring, index) => {\n    if (index < 0 || index >= strLen(string)) {\n        throw new IndexError(`string index out of range: ${index}`);\n    }\n    return string.lastIndexOf(substring, index);\n};\n\n/* Return character at specified index of given string\n  >>> strIndexOf('')\n  Traceback (most recent call last):\n     ...\n  IndexError: string index out of range\n  >>> strIndexOf('abc')\n  0\n  >>> strIndexOf('abc', 1)\n  1\n  >>> strIndexOf('abc', 2)\n  -1\n  >>> strIndexOf('abc', 2, 3)\n  -1\n"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let a = 0;\n  let b = n;\n  while (b!== 0) {\n    a = a + b;\n    b = Math.floor(b / 2);\n  }\n  return a;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(20)\n  10\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr2 = (n) => {\n  const n2 = n * 2;\n  const n1 = n * 1;\n  return Math.min(n2, n1);\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  >>> larGestdivisOr(20)\n  10\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  */\nconst larGestdivisOr3 = (n) => {\n  const n1 = n * 1;\n  const n2 = n * 2;\n  const n3 = n * 3;\n  return Math.min(n1, n2, n3);\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  >>> larGestdivisOr(20)\n  10\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  */\nconst larGestdivisOr4 = (n) => {\n  const n1 = n * 1;\n  const n2 = n * 2;\n  const n3 = n * 3;\n  const n4 = n * 4;\n  return Math.min(n1, n2, n3, n4);\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  >>> larGestdivisOr(20)\n  10\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  */\nconst larGestdivisOr5 = (n) => {\n  const n1 = n * 1;\n  const n2 = n * 2;\n  const n3 = n * 3;\n  const n4 = n * 4;\n  const n5 = n * 5;\n  return Math.min(n1, n2, n3, n4, n5);\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  >>> larGestdivisOr(20)\n  10\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  */\nconst larGestdivisOr6 = (n) => {\n  const n1 = n * 1;\n  const n2 = n * 2;\n  const n3 = n * 3;\n  const n4 = n * 4;\n  const n5 = n * 5;\n  const n6 = n * 6;\n  return Math.min(n1, n2, n3, n4, n5, n6);\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  >>> larGestdivisOr(20)\n  10\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  */\nconst larGestdivisOr7 = (n) => {\n  const n1 = n * 1;\n  const n2 = n * 2;\n  const n3 = n * 3;\n  const n4 = n * 4;\n  const n5 = n * 5;\n  const n6 = n * 6;\n  const n7 = n * 7;\n  return Math.min(n1, n2, n3, n4, n5, n6, n7);\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  >>> larGestdivisOr(20)\n  10\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  */\nconst larGestdivisOr8 = (n) => {\n  const n1 = n * 1;\n  const n2 = n * 2;\n  const n3 = n * 3;\n  const n4 = n * 4;\n  const n5 = n * 5;\n  const n6 = n * 6;\n  const n7 = n * 7;\n  const n8 = n * 8;\n  return Math.min(n1, n2, n3, n4, n5, n6, n7, n8);\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  >>> larGestdivisOr(20)\n  10\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  >>> larGestdivisOr(30)\n  15\n  */\nconst larGestdivisOr9 = (n) => {\n  const n1 = n * 1;\n  const n2"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n    const factors = []\n    const factorsArray = [2, 2, 2, 2, 2, 2, 2, 2]\n    const product = n\n    const factorization = n\n    while (factorization) {\n        const nextFactor = factorization\n        const isFactor = nextFactor > 1\n        const isPrime = nextFactor % 1 === 0\n        if (isFactor && isPrime) {\n            factorsArray.push(nextFactor)\n        }\n        factorization = nextFactor * factorization\n    }\n    return factorsArray\n}\n\n/* Return list of factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse = (n) => {\n    const factors = []\n    const factorsArray = [2, 2, 2, 2, 2, 2, 2, 2]\n    const factorization = n\n    const nextFactor = factorization\n    while (nextFactor) {\n        const isFactor = nextFactor > 1\n        const isPrime = nextFactor % 1 === 0\n        if (isFactor && isPrime) {\n            factorsArray.push(nextFactor)\n        }\n        nextFactor = factorization * nextFactor\n    }\n    return factorsArray\n}\n\nconst test = (n, facToriZe, facToriZeReverse) => {\n    const result = facToriZe(n)\n    const resultReverse = facToriZeReverse(n)\n    console.log(result, resultReverse)\n}\n\ntest(8, facToriZe, facToriZeReverse)\ntest(70, facToriZe, facToriZeReverse)\ntest(25, facToriZe, facToriZeReverse)\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const sortedNums = sorted(numbers);\n  const result = [];\n  let last = -1;\n  for (let i = 0; i < sortedNums.length; i++) {\n    if (last!== sortedNums[i]) {\n      result.push(sortedNums[i]);\n      last = sortedNums[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = remOveDUplicAteS;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toUpperCase()\n   .replace(/\\w\\S*/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE = (string) => {\n  return string.toUpperCase()\n   .replace(/\\W+/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_2 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]*[^\\s]/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_2('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_3 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_3('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_4 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]{2,}/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_4('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_5 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_5('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_6 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_6('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_7 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_7('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_8 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toLowerCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_8('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_9 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toUpperCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_9('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_10 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toUpperCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_10('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_11 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toUpperCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_11('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_12 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toUpperCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_12('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_13 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toUpperCase()\n    })\n   .replace(/\\s+/g, '')\n};\n\n/*\n  >>> fliPtCAsE_13('Hello')\n  'hELLO'\n  */\nconst fliPtCAsE_14 = (string) => {\n  return string.toUpperCase()\n   .replace(/[^\\s]+/g, (match) => {\n      return match.toUpperCase()\n    })\n   .replace"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  if (!Array.isArray(strings)) return ''\n  return strings.reduce((acc, item) => acc + item, '')\n}\n\n/*\n  >>> test = (arr) => arr.reduce((acc, item) => acc + item)\n  >>> test([1, 2, 3])\n  '123'\n  */\nconst test = (arr) => arr.reduce((acc, item) => acc + item, '')\n\nmodule.exports = {\n  conCateNate,\n  test\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n// Filter an input list of objects using a predicate function.\n//\n// The predicate function should accept two values at a time:\n//\n//     predicate([object1, object2])\n//\n// Return a list of objects that match the predicate.\n//\n// This method is not thread-safe.\n//\n// The predicate function should return true if the two objects match.\n//\n// This method does not accept a default value.\n//\n// This method does not accept a key as the first argument.\n//\n// This method does not accept a key as the second argument.\nconst filByPredicate = (strings, predicate) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (predicate(strings[i], strings[i])) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n// Filter an input list of objects using a predicate function.\n//\n// The predicate function should accept two values at a time:\n//\n//     predicate([object1, object2])\n//\n// Return a list of objects that match the predicate.\n//\n// This method is not thread-safe.\n//\n// This method accepts a default value.\n//\n// This method accepts a key as the first argument.\n//\n// This method accepts a key as the second argument.\nconst filByPredicateIx = (strings, predicate, key) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (predicate(strings[i], strings[i][key])) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n// Filter an input list of objects using a predicate function.\n//\n// The predicate function should accept two values at a time:\n//\n//     predicate([object1, object2])\n//\n// Return a list of objects that match the predicate.\n//\n// This method is not thread-safe.\n//\n// This method accepts a default value.\n//\n// This method accepts a key as the first argument.\n//\n// This method accepts a key as the second argument.\nconst filByPredicateIx2 = (strings, predicate, key1, key2) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (predicate(strings[i], strings[i][key1], strings[i][key2])) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n// Filter an input list of objects using a predicate function.\n//\n// The predicate function should accept two values at a time:\n//\n//     predicate([object1, object2])\n//\n// Return a list of objects that match the predicate.\n//\n// This method is not thread-safe.\n//\n// This method accepts a default value.\n//\n// This method accepts a key as the first argument.\n//\n// This method accepts a key as the second argument.\nconst filByPredicateIx3 = (strings, predicate, key1, key2, key3) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (predicate(strings[i], strings[i][key1], strings[i][key2], strings[i][key3])) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n// Filter an input list of objects using a predicate function.\n//\n// The predicate function should accept two values at a time:\n//\n//     predicate([object1, object2])\n//\n// Return a list of objects that match the predicate.\n//\n// This method is not thread-safe.\n//\n// This method accepts a default value.\n//\n// This method accepts a key as the first argument.\n//\n// This method accepts a key as the second argument.\nconst filByPredicateIx4 = (strings, predicate, key1, key2, key3, key4) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (predicate(strings[i], strings[i][key1], strings[i][key2], strings[i][key3], strings[i][key4])) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n// Filter an input list of objects using a predicate function.\n//\n// The predicate function should accept two values at a time:\n//\n//     predicate([object1, object2])\n//\n// Return a list of objects that match the predicate.\n//\n// This method is not thread-safe.\n//\n// This method accepts a default value.\n//\n// This method accepts a key as the first argument.\n//\n// This method accepts a key as the second argument.\nconst filByPredicateIx5 = (strings, predicate, key1, key2, key3, key4, key5) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (predicate(strings[i], strings[i][key1], strings[i][key2], strings[i][key3], strings[i][key4], strings[i][key5])) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n\n// Filter an input list of objects using a predicate function.\n//\n// The predicate function should accept two values at a time:\n//\n//     predicate([object1, object2])\n//\n// Return a list of objects that match the predicate.\n//\n// This method is not thread-safe.\n//\n// This method accepts a default value.\n//\n// This method accepts a key as the first argument.\n//\n// This method accepts a key as the"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  let i = 0\n  const res = []\n  while (i < l) {\n    if (l[i] > 0) {\n      res.push(l[i])\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> getnegiTive([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getnegiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getnegiTive = (l) => {\n  let i = 0\n  const res = []\n  while (i < l) {\n    if (l[i] < 0) {\n      res.push(l[i])\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> getmin([-1, 2, -4, 5, 6])\n  -1\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  >>> getmin([-1, 2, -4, 5, 6, 9])\n  -1\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9, -1])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9, -1, -8])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9, -1, -8, -9])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9, -1, -8, -9, -9])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9, -1, -8, -9, -9, -9])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9, -1, -8, -9, -9, -9, -9])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9, -1, -8, -9, -9, -9, -9, -9, -9])\n  -10\n  >>> getmin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 12, 1, 0, -9, 1, -8, 9, 1, -7, 0, -9, -1, -8, -9, -9, -9, -9,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  return n % 2 === 0? false : n === 1 || (n + 1) % 2 === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  // largest coefficient is first\n  let first = xs[0],\n      x = 0;\n  for (let i = 1; i < xs.length; i += 1) {\n    if (xs[i] > first) {\n      first = xs[i];\n      x = i;\n    }\n  }\n\n  // start xs[0] is the smallest\n  let result = polY(xs.slice(1).reverse(), xs[0]),\n      zeroPoint = xs.length - 1;\n  if (result > 0) {\n    return {x, result};\n  }\n  // if result = 0, find largest non zero coefficient and start again\n  for (let i = 1; i < xs.length; i += 1) {\n    if (xs[i] > 0) {\n      result = polY(xs.slice(1).reverse(), xs[i]);\n      if (result > 0) {\n        zeroPoint = i;\n        return {x, result};\n      }\n    }\n  }\n  return {x, result};\n}\n\n/*\n  Given x and y, return the x and y values at t = 0.5\n  >>> round(polynomial(0.5, 0.5, 1, 1), 2) # f(x, y) = 1x + 1y\n  1.0\n  >>> round(polynomial(0.5, 0.5, -1, -1), 2) # f(x, y) = -1x - 1y\n  -1.0\n  >>> round(polynomial(0.5, 0.5, 1, -1), 2) # f(x, y) = 1x - 1y\n  -1.0\n  >>> round(polynomial(0.5, 0.5, -1, 1), 2) # f(x, y) = -1x + 1y\n  1.0\n  */\nconst polynomial = (x, y, x1, y1) => {\n  if (x1 == 0 && y1 == 0) {\n    return x;\n  }\n\n  let t = (x - x1) / (y - y1),\n      x2 = x1 + t * (x - x1),\n      y2 = y1 + t * (y - y1),\n      x3 = x2 + t * (x2 - x1),\n      y3 = y2 + t * (y2 - y1);\n  return {x: x3, y: y3};\n}\n\nconst evalPolynomial = (xs, ys) => {\n  let x = 0,\n      y = 0,\n      x1 = 0,\n      y1 = 0;\n  for (let i = xs.length - 1; i >= 0; i -= 1) {\n    x1 = x;\n    y1 = y;\n    x = xs[i];\n    y = ys[i];\n    // f(x, y) = x + yx + yx^2 + yx^3\n    //      = x + yx + yx^2 + yx^3 + yx^4\n    //      = x + yx + yx^2 + yx^4\n    //      = x + yx^2 + yx^4\n    y = y * y;\n    x = x * x;\n    y = y * y;\n  }\n  return x + y;\n}\n\n/*\n  x = -1\n  y = 1\n  >>> round(polynomial(0.5, 0.5, -1, 1), 2) # f(x, y) = -1x + 1y\n  -1.0\n  >>> round(polynomial(0.5, 0.5, -1, -1), 2) # f(x, y) = -1x - 1y\n  1.0\n  >>> round(polynomial(0.5, 0.5, 1, -1), 2) # f(x, y) = 1x - 1y\n  -1.0\n  >>> round(polynomial(0.5, 0.5, 1, 1), 2) # f(x, y) = 1x + 1y\n  1.0\n  */\nconst evalPolynomial2 = (x, y) => {\n  if (x == 0 && y == 0) {\n    return x;\n  }\n  return x * y + y * x;\n}\n\nconst evalPolynomial3 = (x, y) => {\n  return x * x * x + x * x * y + x * y * y + y * y * y;\n}\n\nconst evalPolynomial4 = (x, y) => {\n  return x * x * x * x + x * x * x * y + x * x * y * y + x * y * y * y + y * y * y * y;\n}\n\nconst evalPolynomial5 = (x, y) => {\n  return x * x * x * x * x + x * x * x * x * y + x * x * x * y * y + x * x * y * y * y + x * y * y * y * y + y * y * y * y * y;\n}\n\nconst evalPolynomial6 = (x,"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const lNew = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      lNew.push(l[i]);\n    } else {\n      lNew.push(l[i]);\n      lNew.sort((a, b) => a - b);\n    }\n  }\n  return lNew;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const result = [...l];\n  let i = 0;\n  while (i < result.length) {\n    if (result[i] < result[i + 1]) {\n      const t = result[i];\n      result[i] = result[i + 1];\n      result[i + 1] = t;\n      i += 2;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Return the index of the largest element in an array\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  6\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  7\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  8\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\nconst uniQueMax = (l) => {\n  return uniQue(l).reduce((a, b) => a > b? a : b, 9999);\n};\n\n/* Return the index of the smallest element in an array\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  */\nconst uniQueMin = (l) => {\n  return uniQue(l).reduce((a, b) => a < b? a : b, 9999);\n};\n\n/* Return the maximum element in an array\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\nconst uniQueMax = (l) => {\n  return uniQue(l).reduce((a, b) => a > b? a : b, 9999);\n};\n\n/* Return the minimum element in an array\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  */\nconst uniQueMin = (l) => {\n  return uniQue(l).reduce((a, b) => a < b? a : b, 9999);\n};\n\n/* Return the index of the first element in an array that equals\n  an element in another array\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  */\nconst uniQueFind = (l, m) => {\n  return uniQue(l).reduce((a, b) => a === b? a : null, null);\n};\n\n/* Return the index of the last element in an array that equals\n  an element in another array\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  */\nconst uniQueFindLast = (l, m) => {\n  return uniQue(l).reduce((a, b) => a === b? a : null, null);\n};\n\n/* Return the index of the first element in an array that doesn't equal\n  an element in another array\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> uniQue([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  "}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  if (l.length === 0) {\n    throw new Error('list must contain at least one element');\n  }\n  let m = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    m = Math.max(l[i], m);\n  }\n  return m;\n};\n\n/**\n  * @name minelemEnt\n  * @function\n  * @memberOf Entities\n  * @param {Array} l\n  * @return {number}\n  * @summary Return minimum element in the list.\n  * @description\n  *   Return minimum element in the list.\n  * @example\n  *   >>> minelemEnt([1, 2, 3])\n  *   1\n  *   >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *   -10\n  */\nconst minelemEnt = (l) => {\n  if (l.length === 0) {\n    throw new Error('list must contain at least one element');\n  }\n  let m = Infinity;\n  for (let i = 0; i < l.length; i++) {\n    m = Math.min(l[i], m);\n  }\n  return m;\n};\n\n/**\n  * @name meanEnt\n  * @function\n  * @memberOf Entities\n  * @param {Array} l\n  * @return {number}\n  * @summary Return mean value of the list.\n  * @description\n  *   Return mean value of the list.\n  * @example\n  *   >>> meanEnt([1, 2, 3])\n  *   2\n  *   >>> meanEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *   -1.0\n  */\nconst meanEnt = (l) => {\n  return sumEnt(l) / l.length;\n};\n\n/**\n  * @name sumEnt\n  * @function\n  * @memberOf Entities\n  * @param {Array} l\n  * @return {number}\n  * @summary Return sum of the list.\n  * @description\n  *   Return sum of the list.\n  * @example\n  *   >>> sumEnt([1, 2, 3])\n  *   6\n  *   >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *   26.0\n  */\nconst sumEnt = (l) => {\n  let s = 0;\n  for (let i = 0; i < l.length; i++) {\n    s += l[i];\n  }\n  return s;\n};\n\n/**\n  * @name varianceEnt\n  * @function\n  * @memberOf Entities\n  * @param {Array} l\n  * @return {number}\n  * @summary Return variance of the list.\n  * @description\n  *   Return variance of the list.\n  * @example\n  *   >>> varianceEnt([1, 2, 3])\n  *   0.0\n  *   >>> varianceEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *   11.0\n  */\nconst varianceEnt = (l) => {\n  let m = meanEnt(l);\n  let s = 0;\n  for (let i = 0; i < l.length; i++) {\n    s += (l[i] - m) * (l[i] - m);\n  }\n  return s;\n};\n\n/**\n  * @name stddevEnt\n  * @function\n  * @memberOf Entities\n  * @param {Array} l\n  * @return {number}\n  * @summary Return standard deviation of the list.\n  * @description\n  *   Return standard deviation of the list.\n  * @example\n  *   >>> stddevEnt([1, 2, 3])\n  *   0.0\n  *   >>> stddevEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *   2.8712132034355964\n  */\nconst stddevEnt = (l) => {\n  return Math.sqrt(varianceEnt(l));\n};\n\n/**\n  * @name medianEnt\n  * @function\n  * @memberOf Entities\n  * @param {Array} l\n  * @return {number}\n  * @summary Return median of the list.\n  * @description\n  *   Return median of the list.\n  * @example\n  *   >>> medianEnt([1, 2, 3])\n  *   2\n  *   >>> medianEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *   -1.0\n  */\nconst medianEnt = (l) => {\n  return Math.floor(l.length / 2);\n};\n\nexport {\n  maxelemEnt,\n  minelemEnt,\n  meanEnt,\n  sumEnt,\n  varianceEnt,\n  stddevEnt,\n  medianEnt\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 2;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  0\n  >>> fizZBuzZ(79)\n  1\n  */\nconst fizZBuz = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  1\n  >>> fizZBuzZ(78)\n  0\n  >>> fizZBuzZ(79)\n  1\n  */\nconst fizZ = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 10 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  1\n  >>> fizZBuzZ(78)\n  1\n  >>> fizZBuzZ(79)\n  2\n  */\nconst buzZ = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 11 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  0\n  >>> fizZBuzZ(79)\n  1\n  */\nconst buz = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 12 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  1\n  >>> fizZBuzZ(78)\n  0\n  >>> fizZBuzZ(79)\n  1\n  */\nconst buzZ = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 13 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  1\n  >>> fizZBuzZ(78)\n  0\n  >>> fizZBuzZ(79)\n  2\n  */\nconst buzz = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 14 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  1\n  >>> fizZBuzZ(78)\n  1\n  >>> fizZBuzZ(79)\n  2\n  */\nconst buzzZ = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 15 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  0\n  >>> fizZBuzZ(79)\n  1\n  */\nconst buzzZ = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if (i === 11) {\n      c += 1;\n    }\n  }\n  return c;\n};\n\n/*Return the number of times the digit 16 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  0\n  >>> fizZBuzZ(79)\n  1\n  */\nconst buzzZ = (n) => {\n  let c = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      c += 1;\n    }\n    if"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  if (!l || l.length === 0) {\n    return []\n  }\n  const sorted = [...l].sort()\n  return [...sorted,...sorted.slice(1, -1)]\n}\n\nexport default sorTEveN\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3 + 2), s.length), Math.min((i * 3 + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0] + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOde = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3 + 2), s.length), Math.min((i * 3 + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3 + 2), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeOde = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3 + 2), s.length), Math.min((i * 3 + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push"}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n    const f = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        f.push(f[i - 1] + f[i - 2]);\n    }\n    return f[n];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  const lLength = l.length\n  if (lLength < 3) return false\n  let sum = 0\n  for (let i = 0; i < lLength; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n    return n * (n - 1)\n}\n\nexport default carracecolliSioN\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  Return list with elements decremented by 1.\n  >>> decRLisT([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  >>> decRLisT([2, 3, 4])\n  [1, 2, 3]\n  >>> decRLisT([2, 3, 4, 3])\n  [1, 2, 3, 2]\n  */\nconst decRLisT = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*\n  Return list with elements incremented by 1.\n  >>> incRLisT(1)\n  [2]\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  Return list with elements decremented by 1.\n  >>> decRLis(1)\n  [0]\n  >>> decRLis([1, 2, 3])\n  [1, 2, 3]\n  >>> decRLis([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 3, 8, 1, 122]\n  */\nconst decRLis = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*\n  Return list with elements incremented by 1.\n  >>> incRLis(1)\n  [2]\n  >>> incRLis([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLis([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis1 = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  Return list with elements decremented by 1.\n  >>> decRLis(1)\n  [0]\n  >>> decRLis([1, 2, 3])\n  [1, 2, 3]\n  >>> decRLis([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 3, 8, 1, 122]\n  */\nconst decRLis1 = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*\n  Return list with elements incremented by 1.\n  >>> incRLis(1)\n  [2]\n  >>> incRLis([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLis([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis2 = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 2);\n  }\n  return newList;\n};\n\n/*\n  Return list with elements decremented by 1.\n  >>> decRLis(1)\n  [0]\n  >>> decRLis([1, 2, 3])\n  [1, 2, 3]\n  >>> decRLis([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 3, 8, 1, 122]\n  */\nconst decRLis2 = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 2);\n  }\n  return newList;\n};\n\nmodule.exports = {\n  incRLis,\n  incRLis1,\n  incRLis2,\n  decRLis,\n  decRLis1,\n  decRLis2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  const result = l.filter(x => x % 2 === 0).filter(x => x % 2!== 0).find(x => x > 0 && x < 0).length\n  return result === 0\n}\n\n/*\n  paiRsSuMToZeRo2 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo2([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo2([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo2([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo2([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo2([1])\n  false\n  */\nconst paiRsSuMToZeRo2 = (l) => {\n  const result = l.filter(x => x % 2 === 0).filter(x => x % 2!== 0).find(x => x > 0 && x < 0).reduce((sum, x) => sum + x, 0)\n  return result === 0\n}\n\nmodule.exports = {\n  paiRsSuMToZeRo,\n  paiRsSuMToZeRo2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  // If x is negative, return '-1'.\n  if (x < 0) {\n    return '-1';\n  }\n\n  // If base is less than 2, return '0'.\n  if (base < 2) {\n    return '0';\n  }\n\n  // If x is zero, return '0'.\n  if (x === 0) {\n    return '0';\n  }\n\n  // Else, we can use the formula for converting a base-10 number to\n  // base-x.\n  return convertBase(x, base);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return volume for a triangle.\n  >>> triAnglEArea(5, 3)\n  30\n  */\nconst triAnglEAreaV = (a, h) => {\n  return (a * h * h) / 6;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV(5, 3)\n  30\n  */\nconst triAnglEAreaV2 = (a, h) => {\n  return Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV2(5, 3)\n  30\n  */\nconst triAnglEAreaV3 = (a, h) => {\n  return (Math.pow(a, 2) * h * h) / 6;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV3(5, 3)\n  30\n  */\nconst triAnglEAreaV4 = (a, h) => {\n  return (Math.pow(a, 3) * h) / 6;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV4(5, 3)\n  30\n  */\nconst triAnglEAreaV5 = (a, h) => {\n  return (Math.pow(a, 4) * h) / 8;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV5(5, 3)\n  30\n  */\nconst triAnglEAreaV6 = (a, h) => {\n  return (Math.pow(a, 5) * h) / 10;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV6(5, 3)\n  30\n  */\nconst triAnglEAreaV7 = (a, h) => {\n  return (Math.pow(a, 6) * h) / 12;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV7(5, 3)\n  30\n  */\nconst triAnglEAreaV8 = (a, h) => {\n  return (Math.pow(a, 7) * h) / 14;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV8(5, 3)\n  30\n  */\nconst triAnglEAreaV9 = (a, h) => {\n  return (Math.pow(a, 8) * h) / 16;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV9(5, 3)\n  30\n  */\nconst triAnglEAreaV10 = (a, h) => {\n  return (Math.pow(a, 9) * h) / 18;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV10(5, 3)\n  30\n  */\nconst triAnglEAreaV11 = (a, h) => {\n  return (Math.pow(a, 10) * h) / 20;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV11(5, 3)\n  30\n  */\nconst triAnglEAreaV12 = (a, h) => {\n  return (Math.pow(a, 11) * h) / 22;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV12(5, 3)\n  30\n  */\nconst triAnglEAreaV13 = (a, h) => {\n  return (Math.pow(a, 12) * h) / 24;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV13(5, 3)\n  30\n  */\nconst triAnglEAreaV14 = (a, h) => {\n  return (Math.pow(a, 13) * h) / 26;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV14(5, 3)\n  30\n  */\nconst triAnglEAreaV15 = (a, h) => {\n  return (Math.pow(a, 14) * h) / 28;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV15(5, 3)\n  30\n  */\nconst triAnglEAreaV16 = (a, h) => {\n  return (Math.pow(a, 15) * h) / 30;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV16(5, 3)\n  30\n  */\nconst triAnglEAreaV17 = (a, h) => {\n  return (Math.pow(a, 16) * h) / 32;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV17(5, 3)\n  30\n  */\nconst triAnglEAreaV18 = (a, h) => {\n  return (Math.pow(a, 17) * h) / 34;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV18(5, 3)\n  30\n  */\nconst triAnglEAreaV19 = (a, h) => {\n  return (Math.pow(a, 18) * h) / 36;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEAreaV19(5, 3)\n  30\n  */\nconst triAnglEAreaV20 = (a, h) => {\n  return (Math."}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  let median = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxIndex = l.indexOf(e);\n    }\n  });\n  l.splice(maxIndex + 1, l.length);\n  l.splice(0, maxIndex + 1);\n  return (l.length % 2 === 0)? (l[Math.floor(l.length / 2)] + l[Math.floor(l.length / 2) - 1]) / 2 : l[Math.floor(l.length / 2)];\n};\n\nexport default medIan;<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n  const length = text.length\n  for (let i = 0, j = length - 1; i < length; i += 1, j -= 1) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = isPAlinDrome\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  return n % p;\n};\n\nmodule.exports = modP;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 13 in the alphabet.\n  */\nconst encOdeLShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 13 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_lshift function. Returns decoded string.\n  */\nconst decodeLShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 25 in the alphabet.\n  */\nconst encOdeOShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 25 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_oshift function. Returns decoded string.\n  */\nconst decodeOShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 21 in the alphabet.\n  */\nconst encOdeQShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 21 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_qshift function. Returns decoded string.\n  */\nconst decodeQShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 19 in the alphabet.\n  */\nconst encOdeSShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 19 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_sshift function. Returns decoded string.\n  */\nconst decodeSShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 17 in the alphabet.\n  */\nconst encOdeTShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 17 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_tshift function. Returns decoded string.\n  */\nconst decodeTShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 15 in the alphabet.\n  */\nconst encOdeUShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 15 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_ushift function. Returns decoded string.\n  */\nconst decodeUShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 13 in the alphabet.\n  */\nconst encOdeVShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 13 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_vshift function. Returns decoded string.\n  */\nconst decodeVShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0)\n  )).join"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  return text.replace(/[aeiouAEIOU]+/g, '');\n};\n\nconst getWordCount = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels = (text) => {\n  return remOveVOwels(text).match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_1 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_2 = (text) => {\n  return remOveVOwels(text).match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_3 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_4 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_5 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_6 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_7 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_8 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_9 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_10 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_11 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_12 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_13 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_14 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_15 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_16 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_17 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_18 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_19 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_20 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_21 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_22 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_23 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_24 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_25 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_26 = (text) => {\n  return text.match(/[a-zA-Z0-9]+/g).length;\n};\n\nconst getWordCountAfterRemOveVOwels_27 = (text) => {\n  return text.match(/[a-zA-Z"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  const { isArray, isNumber } = typeof l;\n  if (isArray!== true || isNumber!== true) {\n    throw new TypeError('Input must be an array and number');\n  }\n  const len = l.length;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum <= t;\n};\n\n/**\n * @param {Array} a\n * @param {Array} b\n * @return {Array}\n * @example\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * [2, 4, 10, 20]\n * #>\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * false\n * #>\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * true\n */\nconst belOwThReshoLd = (a, b) => {\n  const { isArray, isNumber } = typeof a;\n  if (isArray!== true || isNumber!== true) {\n    throw new TypeError('Input must be an array and number');\n  }\n  const len = a.length;\n  const sum = a.reduce((a, b) => a + b, 0);\n  const bLen = b.length;\n  const sumB = b.reduce((a, b) => a + b, 0);\n  if (sum > sumB) {\n    return false;\n  }\n  return a.every(n => n < b[n % bLen]);\n};\n\n/**\n * @param {Array} a\n * @param {Array} b\n * @return {Array}\n * @example\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * [2, 4, 10, 20]\n * #>\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * false\n * #>\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * true\n */\nconst belOwThReshoLd = (a, b) => {\n  const { isArray, isNumber } = typeof a;\n  if (isArray!== true || isNumber!== true) {\n    throw new TypeError('Input must be an array and number');\n  }\n  const len = a.length;\n  const sum = a.reduce((a, b) => a + b, 0);\n  const bLen = b.length;\n  const sumB = b.reduce((a, b) => a + b, 0);\n  if (sum > sumB) {\n    return false;\n  }\n  return a.every(n => n < b[n % bLen]);\n};\n\n/**\n * @param {Array} a\n * @param {Array} b\n * @return {Array}\n * @example\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * [2, 4, 10, 20]\n * #>\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * false\n * #>\n * >>>\n * #> belOwThReshoLd([1, 2, 4, 10], [2, 4, 10, 20])\n * true\n */\nconst belOwThReshoLd = (a, b) => {\n  const { isArray, isNumber } = typeof a;\n  if (isArray!== true || isNumber!== true) {\n    throw new TypeError('Input must be an array and number');\n  }\n  const len = a.length;\n  const sum = a.reduce((a, b) => a + b, 0);\n  const bLen = b.length;\n  const sumB = b.reduce((a, b) => a + b, 0);\n  if (sum > sumB) {\n    return false;\n  }\n  return a.every(n => n < b[n % bLen]);\n};\n\nexport default belOwThReshoLd;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconsole.log(add(1, 2));\nconsole.log(add(2, 3));\nconsole.log(add(5, 7));\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n    return s0.length === s1.length &&\n        s0.split('').every((c, i) => {\n            return s1.split('').every((c1, j) => {\n                return c === c1;\n            });\n        });\n};\n\n/*\n  Check if two words are anagrams\n  >>> isAnagram('abcde', 'abcd')\n  true\n  >>> isAnagram('abcde', 'abce')\n  false\n  >>> isAnagram('abcd', 'abce')\n  false\n  >>> isAnagram('abcde', 'abce')\n  true\n  >>> isAnagram('abcde', 'bcd')\n  false\n  >>> isAnagram('abcde', 'abc')\n  false\n  >>> isAnagram('abc', 'abcde')\n  false\n  >>> isAnagram('abcde', 'efgh')\n  false\n  */\nconst isAnagram = (s0, s1) => {\n    if (s0 === s1) return true;\n    if (s0.length!== s1.length) return false;\n\n    const ch1 = s1.split('');\n    const ch0 = s0.split('');\n    const map = new Map();\n    ch0.forEach((char) => {\n        map.set(char, map.get(char) + 1 || 1);\n    });\n\n    const sum = Object.values(map).reduce((prev, curr) => prev + curr, 0);\n    return sum === ch1.length;\n};\n\n/*\n  Check if two words are anagrams\n  >>> isAnagram('abcde', 'abc')\n  true\n  >>> isAnagram('abcde', 'abce')\n  false\n  >>> isAnagram('abcde', 'abce')\n  true\n  >>> isAnagram('abcde', 'bcd')\n  false\n  >>> isAnagram('abcde', 'abc')\n  false\n  >>> isAnagram('abc', 'abcde')\n  false\n  >>> isAnagram('abcde', 'efgh')\n  false\n  */\nconst isAnagram2 = (s0, s1) => {\n    if (s0 === s1) return true;\n    if (s0.length!== s1.length) return false;\n\n    const ch0 = s0.split('');\n    const ch1 = s1.split('');\n    const map = new Map();\n    ch0.forEach((char) => {\n        map.set(char, map.get(char) + 1 || 1);\n    });\n\n    const sum = Object.values(map).reduce((prev, curr) => prev + curr, 0);\n    return sum === ch1.length;\n};\n\n/*\n  Check if two words are anagrams\n  >>> isAnagram('abcde', 'abcd')\n  true\n  >>> isAnagram('abcde', 'abce')\n  false\n  >>> isAnagram('abcde', 'bcd')\n  false\n  >>> isAnagram('abcde', 'abc')\n  false\n  >>> isAnagram('abc', 'abcde')\n  false\n  >>> isAnagram('abcde', 'efgh')\n  false\n  */\nconst isAnagram3 = (s0, s1) => {\n    if (s0 === s1) return true;\n    if (s0.length!== s1.length) return false;\n\n    const ch0 = s0.split('');\n    const ch1 = s1.split('');\n    const map = new Map();\n    ch0.forEach((char) => {\n        map.set(char, map.get(char) + 1 || 1);\n    });\n\n    const sum = Object.values(map).reduce((prev, curr) => prev + curr, 0);\n    return sum === ch1.length;\n};\n\n/*\n  Check if two words are anagrams\n  >>> isAnagram('abcde', 'abc')\n  false\n  >>> isAnagram('abcde', 'abce')\n  true\n  >>> isAnagram('abcde', 'bcd')\n  false\n  >>> isAnagram('abcde', 'abc')\n  true\n  >>> isAnagram('abc', 'abcde')\n  false\n  >>> isAnagram('abcde', 'efgh')\n  false\n  */\nconst isAnagram4 = (s0, s1) => {\n    if (s0 === s1) return true;\n    if (s0.length!== s1.length) return false;\n\n    const ch0 = s0.split('');\n    const ch1 = s1.split('');\n    const map = new Map();\n    ch0.forEach((char) => {\n        map.set(char, map.get(char) + 1 || 1);\n    });\n\n    const sum = Object.values(map).reduce((prev, curr) => prev + curr, 0);\n    return sum === ch1.length;\n};\n\nmodule.exports = {\n    samEChaRs,\n    isAnagram,\n    isAnagram2,\n    isAnagram3,\n    isAnagram4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n// ###############################################################################\n\n/**\n  Generate random integers within a range.\n  >>> randint(0, 10)\n  9\n  >>> randint(0, 10, False)\n  10\n  >>> randint(0, 10, True)\n  9\n  >>> randint(10, 20)\n  11\n  >>> randint(10, 20, False)\n  11\n  >>> randint(10, 20, True)\n  10\n  */\nconst randint = (min, max, skip) => {\n  if (typeof skip === 'undefined') {\n    skip = true\n  }\n  let v = Math.floor(Math.random() * (max - min + 1)) + min\n  while (skip) {\n    skip = false\n    v = Math.floor(Math.random() * (max - min + 1)) + min\n  }\n  return v\n}\n\n// ###############################################################################\n\n/**\n  Prints all the fibonacci numbers up to N.\n  >>> fibrange(10)\n  1\n  2\n  3\n  5\n  8\n  13\n  21\n  34\n  55\n  */\nconst fibrange = (n) => {\n  for (let i = 1; i <= n; i++) {\n    console.log(fib(i))\n  }\n}\n\n// ###############################################################################\n\n/**\n  Prints all the fibonacci numbers up to N, using memoization.\n  >>> fibrangeMemoized(10)\n  1\n  2\n  3\n  5\n  8\n  13\n  21\n  34\n  55\n  */\nconst fibrangeMemoized = (n) => {\n  if (fibmemo[n]!== undefined) {\n    return fibmemo[n]\n  }\n  let result = fib(n)\n  fibmemo[n] = result\n  return result\n}\n\n// ###############################################################################\n\n/**\n  Prints all the fibonacci numbers up to N, using recursion.\n  >>> fibrangeRecursive(10)\n  1\n  2\n  3\n  5\n  8\n  13\n  21\n  34\n  55\n  */\nconst fibrangeRecursive = (n) => {\n  if (n === 1 || n === 2) {\n    return 1\n  }\n  return fibrangeRecursive(n - 1) + fibrangeRecursive(n - 2)\n}\n\n// ###############################################################################\n\n/**\n  Prints all the fibonacci numbers up to N, using recursion memoization.\n  >>> fibrangeMemoized(10)\n  1\n  2\n  3\n  5\n  8\n  13\n  21\n  34\n  55\n  */\nconst fibrangeRecursiveMemoized = (n) => {\n  if (n === 1 || n === 2) {\n    return 1\n  }\n  if (recmemo[n]!== undefined) {\n    return recmemo[n]\n  }\n  recmemo[n] = fibrangeRecursiveMemoized(n - 1) + fibrangeRecursiveMemoized(n - 2)\n  return recmemo[n]\n}\n\n// ###############################################################################\n\n/**\n  Prints all the fibonacci numbers up to N, using a memoized version of the\n  recursive algorithm.\n  >>> fibrangeMemoizedRecursive(10)\n  1\n  2\n  3\n  5\n  8\n  13\n  21\n  34\n  55\n  */\nconst fibrangeMemoizedRecursive = (n) => {\n  if (n === 1 || n === 2) {\n    return 1\n  }\n  if (recmemo[n]!== undefined) {\n    return recmemo[n]\n  }\n  recmemo[n] = fibrangeRecursiveMemoized(n - 1) + fibrangeRecursiveMemoized(n - 2)\n  return recmemo[n]\n}\n\n// ###############################################################################\n\nfibrange(1)\nfibrange(2)\nfibrange(3)\nfibrange(5)\nfibrange(8)\nfibrange(13)\nfibrange(21)\nfibrange(34)\nfibrange(55)\n\nfibrangeMemoized(1)\nfibrangeMemoized(2)\nfibrangeMemoized(3)\nfibrangeMemoized(5)\nfibrangeMemoized(8)\nfibrangeMemoized(13)\nfibrangeMemoized(21)\nfibrangeMemoized(34)\nfibrangeMemoized(55)\n\nfibrangeRecursive(1)\nfibrangeRecursive(2)\nfibrangeRecursive(3)\nfibrangeRecursive(5)\nfibrangeRecursive(8)\nfibrangeRecursive(13)\nfibrangeRecursive(21)\nfibrangeRecursive(34)\nfibrangeRecursive(55)\n\nfibrangeRecursiveMemoized(1)\nfibrangeRecursiveMemoized(2)\nfibrangeRecursiveMemoized(3)\nfibrangeRecursiveMemoized(5)\nfibrangeRecursiveMemoized(8)\nfibrangeRecursiveMemoized(13)\nfibrangeRecursiveMemoized(21)\nfibrangeRecursiveMemoized(34)\nfibrangeRecursiveMemoized(55)\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  return brackets.reduce((prev, curr) => {\n    if (curr === '<') {\n      return prev + '>';\n    }\n    return prev;\n  }, '');\n};\n\n/*\n  Bracket matching.\n\n  >>> bracketMatch(\"(<>\")\n  '(<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\">>>\")\n  '>>>'\n  >>> bracketMatch(\"(<<<>\")\n  '(<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>> bracketMatch(\"<>\")\n  '<>'\n  >>> bracketMatch(\"<<<>\")\n  '<<<>'\n  >>>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  const isIncreasing = (a, b) => a >= b;\n  const isDecreasing = (a, b) => a <= b;\n  const isMonotonic = (l, comparator) =>\n    l.every((x) => comparator(x, x + 1) || comparator(x, x - 1));\n  const isMonotonicDecreasing = (l, comparator) =>\n    l.every((x) => comparator(x, x - 1));\n  const isMonotonicIncreasing = (l, comparator) =>\n    l.every((x) => comparator(x, x + 1));\n  return isMonotonic(l, isDecreasing) && isMonotonic(l, isIncreasing);\n};\n\nexport default monOtonIc;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let result = [],\n    n1 = l1.length,\n    n2 = l2.length,\n    i = 0,\n    j = 0;\n  while (i < n1 && j < n2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nexport default comMon;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let f = 1;\n  let b = 2;\n  let t = n;\n  while (t > 1) {\n    while (t % b === 0) {\n      f = b;\n      t = t / b;\n    }\n    b = b + 1;\n  }\n  return f;\n};\n\nexport default larGestprimefacTor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return (n - 1) * n / 2 + sumtoN(n - 1)\n  }\n}\n\n// Exercício 1\n/*sumtoN2 is a function that sums numbers from 1 to n.\n  >>> sumtoN2(30)\n  465\n  >>> sumtoN2(100)\n  5050\n  >>> sumtoN2(5)\n  15\n  >>> sumtoN2(10)\n  55\n  >>> sumtoN2(1)\n  1\n  */\nconst sumtoN2 = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return sumtoN(n - 1) + n\n  }\n}\n\n// Exercício 2\n/*sumtoN3 is a function that sums numbers from 1 to n.\n  >>> sumtoN3(30)\n  465\n  >>> sumtoN3(100)\n  5050\n  >>> sumtoN3(5)\n  15\n  >>> sumtoN3(10)\n  55\n  >>> sumtoN3(1)\n  1\n  */\nconst sumtoN3 = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return (n - 1) * n / 2 + sumtoN(n - 1) + n\n  }\n}\n\n// Exercício 3\n/*sumtoN4 is a function that sums numbers from 1 to n.\n  >>> sumtoN4(30)\n  465\n  >>> sumtoN4(100)\n  5050\n  >>> sumtoN4(5)\n  15\n  >>> sumtoN4(10)\n  55\n  >>> sumtoN4(1)\n  1\n  */\nconst sumtoN4 = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return sumtoN(n - 1) + sumtoN(n - 1) + n\n  }\n}\n\n// Exercício 4\n/*sumtoN5 is a function that sums numbers from 1 to n.\n  >>> sumtoN5(30)\n  465\n  >>> sumtoN5(100)\n  5050\n  >>> sumtoN5(5)\n  15\n  >>> sumtoN5(10)\n  55\n  >>> sumtoN5(1)\n  1\n  */\nconst sumtoN5 = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return (n - 1) * n / 2 + sumtoN(n - 1) + sumtoN(n - 1) + n\n  }\n}\n\n// Exercício 5\n/*sumtoN6 is a function that sums numbers from 1 to n.\n  >>> sumtoN6(30)\n  465\n  >>> sumtoN6(100)\n  5050\n  >>> sumtoN6(5)\n  15\n  >>> sumtoN6(10)\n  55\n  >>> sumtoN6(1)\n  1\n  */\nconst sumtoN6 = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return (n - 1) * n / 2 + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + n\n  }\n}\n\n// Exercício 6\n/*sumtoN7 is a function that sums numbers from 1 to n.\n  >>> sumtoN7(30)\n  465\n  >>> sumtoN7(100)\n  5050\n  >>> sumtoN7(5)\n  15\n  >>> sumtoN7(10)\n  55\n  >>> sumtoN7(1)\n  1\n  */\nconst sumtoN7 = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return (n - 1) * n / 2 + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + n\n  }\n}\n\n// Exercício 7\n/*sumtoN8 is a function that sums numbers from 1 to n.\n  >>> sumtoN8(30)\n  465\n  >>> sumtoN8(100)\n  5050\n  >>> sumtoN8(5)\n  15\n  >>> sumtoN8(10)\n  55\n  >>> sumtoN8(1)\n  1\n  */\nconst sumtoN8 = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return (n - 1) * n / 2 + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + n\n  }\n}\n\n// Exercício 8\n/*sumtoN9 is a function that sums numbers from 1 to n.\n  >>> sumtoN9(30)\n  465\n  >>> sumtoN9(100)\n  5050\n  >>> sumtoN9(5)\n  15\n  >>> sumtoN9(10)\n  55\n  >>> sumtoN9(1)\n  1\n  */\nconst sumtoN9 = (n) => {\n  if(n === 0) {\n    return 0\n  }\n  else {\n    return (n - 1) * n / 2 + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + sumtoN(n - 1) + n\n  }\n}\n\n// Exercício 9\n/*sumtoN10 is a function that sums numbers from 1 to n.\n  >>> sumtoN10(30)"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n    if (!brackets) {\n        return false;\n    }\n    const stack = [brackets];\n    while (stack.length > 0) {\n        const [open, close] = stack.shift();\n        if (open === close) {\n            return false;\n        }\n        if (open === \"(\" && close === \")\") {\n            stack.push(open);\n            stack.push(close);\n            continue;\n        }\n        if (open === \")\") {\n            stack.push(open);\n            stack.push(close);\n            continue;\n        }\n        return false;\n    }\n    return true;\n};\n\nmodule.exports = corRectbrackEtiNg;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return []\n  } else if (len === 1) {\n    return [1]\n  } else if (len === 2) {\n    return [2]\n  } else if (len === 3) {\n    return [3, 2]\n  } else if (len === 4) {\n    return [4, 3, 2]\n  } else if (len === 5) {\n    return [5, 4, 3, 2]\n  } else if (len === 6) {\n    return [6, 5, 4, 3, 2]\n  } else {\n    const num = xs.reduce((acc, x, i) => acc + (x * (i + 1)), 0)\n    const den = xs.reduce((acc, x, i) => acc + (x * (i + 2)), 0)\n    return [num, den]\n  }\n}\n\n/*\n   Given the coefficients of a polynomial, return the derivative.\n   >>> derIvatIve([3, 1, 2, 4, 5])\n   [1, 4, 12, 20]\n   >>> derIvatIve([1, 2, 3])\n   [2, 6]\n   >>> derIvatIve([1, 2, 3, 4, 5, 6, 7])\n   [1, 4, 12, 20, 36, 56, 84]\n   >>> derIvatIve([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n   [1, 4, 12, 20, 36, 56, 84, 104, 132, 160, 196, 224]\n   */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const res = xs.slice()\n  let resIdx = len - 1\n  let i = resIdx - 1\n  while (i >= 0) {\n    res[i] = res[i] - res[i + 1]\n    i--\n  }\n  return res\n}\n\n/*\n   Given the coefficients of a polynomial, return the derivative.\n   >>> derIvatIve([3, 1, 2, 4, 5])\n   [1, 4, 12, 20]\n   >>> derIvatIve([1, 2, 3])\n   [2, 6]\n   >>> derIvatIve([1, 2, 3, 4, 5, 6, 7])\n   [1, 4, 12, 20, 36, 56, 84]\n   >>> derIvatIve([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n   [1, 4, 12, 20, 36, 56, 84, 104, 132, 160, 196, 224]\n   */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const res = xs.slice()\n  let resIdx = len - 1\n  let i = resIdx - 1\n  while (i >= 0) {\n    res[i] = res[i] + res[i + 1]\n    i--\n  }\n  return res\n}\n\n/*\n   Given the coefficients of a polynomial, return the derivative.\n   >>> derIvatIve([3, 1, 2, 4, 5])\n   [1, 4, 12, 20]\n   >>> derIvatIve([1, 2, 3])\n   [2, 6]\n   >>> derIvatIve([1, 2, 3, 4, 5, 6, 7])\n   [1, 4, 12, 20, 36, 56, 84]\n   >>> derIvatIve([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n   [1, 4, 12, 20, 36, 56, 84, 104, 132, 160, 196, 224]\n   */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const res = xs.slice()\n  let resIdx = len - 2\n  let i = resIdx - 1\n  while (i >= 0) {\n    res[i] = res[i] + res[i + 1]\n    i--\n  }\n  return res\n}\n\nexport {derIvatIve}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    } else if (n === 3) {\n        return 1;\n    } else if (n === 4) {\n        return 2;\n    } else if (n === 5) {\n        return 3;\n    } else if (n === 6) {\n        return 5;\n    } else if (n === 7) {\n        return 8;\n    } else if (n === 8) {\n        return 13;\n    } else if (n === 9) {\n        return 21;\n    } else if (n === 10) {\n        return 34;\n    } else if (n === 11) {\n        return 55;\n    } else if (n === 12) {\n        return 89;\n    } else if (n === 13) {\n        return 144;\n    } else if (n === 14) {\n        return 233;\n    } else if (n === 15) {\n        return 377;\n    } else if (n === 16) {\n        return 610;\n    } else if (n === 17) {\n        return 987;\n    } else if (n === 18) {\n        return 1597;\n    } else if (n === 19) {\n        return 2584;\n    } else if (n === 20) {\n        return 4181;\n    } else if (n === 21) {\n        return 6765;\n    } else if (n === 22) {\n        return 10946;\n    } else if (n === 23) {\n        return 17711;\n    } else if (n === 24) {\n        return 28657;\n    } else if (n === 25) {\n        return 46368;\n    } else if (n === 26) {\n        return 75025;\n    } else if (n === 27) {\n        return 121393;\n    } else if (n === 28) {\n        return 196418;\n    } else if (n === 29) {\n        return 317811;\n    } else if (n === 30) {\n        return 507751;\n    } else if (n === 31) {\n        return 888899;\n    } else if (n === 32) {\n        return 1342177;\n    } else if (n === 33) {\n        return 2252815;\n    } else if (n === 34) {\n        return 3776411;\n    } else if (n === 35) {\n        return 6267050;\n    } else if (n === 36) {\n        return 9720081;\n    } else if (n === 37) {\n        return 15480106;\n    } else if (n === 38) {\n        return 24159949;\n    } else if (n === 39) {\n        return 31747500;\n    } else if (n === 40) {\n        return 4957500;\n    } else if (n === 41) {\n        return 6888999;\n    } else if (n === 42) {\n        return 100000000;\n    } else if (n === 43) {\n        return 16777215;\n    } else if (n === 44) {\n        return 268435455;\n    } else if (n === 45) {\n        return 433494415;\n    } else if (n === 46) {\n        return 67108861;\n    } else if (n === 47) {\n        return 134217759;\n    } else if (n === 48) {\n        return 2147483647;\n    } else if (n === 49) {\n        return 4294967295;\n    } else if (n === 50) {\n        return 5904967291;\n    } else if (n === 51) {\n        return 8796093021;\n    } else if (n === 52) {\n        return 1475839521;\n    } else if (n === 53) {\n        return 213073792;\n    } else if (n === 54) {\n        return 287948901;\n    } else if (n === 55) {\n        return 396570608;\n    } else if (n === 56) {\n        return 5111296322;\n    } else if (n === 57) {\n        return 626846442;\n    } else if (n === 58) {\n        return 793769069;\n    } else if (n === 59) {\n        return 1012635892;\n    } else if (n === 60) {\n        return 1205112654;\n    } else if (n === 61) {\n        return 1441151881;\n    } else if (n === 62) {\n        return 175921860444;\n    } else if (n === 63) {\n        return 23058430092;\n    } else if (n === 64) {\n        return 30541989623;\n    } else if (n === 65) {\n        return 4606609229;\n    } else if (n === 66) {\n        return 576460752303423487;\n    } else if (n === 67) {\n        return 7036874417766428681;\n    } else if (n === 68) {\n        return 8419947676027042373;\n    } else if (n === 69) {\n        return 9227418782128147559;\n    } else if (n === 70) {\n        return 11448222677017041525;\n    } else if (n === 71) {\n        return 14073748835532810605;\n    } else if (n === 72) {\n        return 16777215L;\n    } else if (n === 73) {\n        return 209715200L;\n    } else if (n === 74)"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!= -1) {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\nconsole.log(vowElsCOunt('ACEDY'))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n    let result = x.toString();\n    result = result.substr(0, shift);\n    result = result.concat(result.slice(1).reverse());\n    return result;\n};\n\nconst cirCulaRShifT2 = (x, shift) => {\n    let result = x.toString();\n    let reversed = result.split('').reverse();\n    let reversedShifted = reversed.join('');\n    result = result.concat(reversedShifted);\n    return result;\n};\n\nexport { cirCulaRShifT, cirCulaRShifT2 };\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += (s[i].charCodeAt() - 97)\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n    let arr = s.split('');\n    let count = arr.reduce((a, b, i) => {\n        return (a + Number(b) + Number(arr[i + 1]));\n    });\n    return (n - count)\n};\n\nconsole.log(fruItDiStribUtiOn('2 apples and 3 oranges', 100));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  let root = 0;\n  let answer = 0;\n  let count = 0;\n\n  arr.forEach(node => {\n    if (node === 0) return;\n    root = root * 10 + node;\n    count++;\n    if (count % 2 === 0) {\n      if (answer === 0 || answer > root) {\n        answer = root;\n      }\n    }\n  });\n\n  return [answer, count % 2];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let max = 0, i = 0, j = 0, res = 0, cur = 0;\n  while (i < lst.length) {\n    cur = lst[i];\n    j = i;\n    while (j < lst.length && lst[j] === cur) j++;\n    if (j - i > max) {\n      max = j - i;\n      res = cur;\n    }\n    i = j;\n  }\n  return res;\n};\n\nconst test = [4, 1, 2, 2, 3, 1];\nconsole.log(seaRch(test));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const sorted = lst.slice().sort();\n  const reversed = sorted.slice().reverse();\n  return sorted.concat(reversed);\n};\n\nmodule.exports = strAngesortLIst;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a < 1 || b < 1 || c < 1) {\n    return -1\n  } else if (a > c) {\n    return -1\n  } else if (b > c) {\n    return -1\n  } else if (b <= c) {\n    return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c + b * b)) / 2\n  } else if (a <= c) {\n    return (Math.sqrt(a * a + b * b) + Math.sqrt(c * c + c * c)) / 2\n  } else {\n    return -1\n  }\n}\n\nmodule.exports = triAnglEArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n    const n = q.length;\n    const max = (n-1) * w;\n    const sum = q.reduce((p, n) => p + n, 0);\n    return sum <= max;\n};\n\nmodule.exports = wilLItFLy;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  // TODO: implement your solution here\n  let a = arr.sort();\n  let b = arr.slice();\n  b.reverse();\n  let c = a.length;\n  let d = b.length;\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < c; i++) {\n    if (a[i] === b[i]) {\n      count++;\n    } else {\n      if (count > max) {\n        max = count;\n      }\n      count = 0;\n    }\n  }\n  if (count > max) {\n    max = count;\n  }\n  return max;\n}\n\n/*\n  Given an array arr of integers, return the number of palindrome pairs in the array.\n  For example:\n  palinDromePairs([1,2,3,4,5,6,7,8,9]) == 4\n  palinDromePairs([1,2,3,2,1]) == 1\n  palinDromePairs([1,2,3,4,3,2,2,2]) == 0\n  palinDromePairs([1,2,3,2,1]) == 1\n  */\nconst palindromePairs = (arr) => {\n  // TODO: implement your solution here\n  let a = arr.slice();\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    let b = a.slice();\n    b.splice(i, 1);\n    let c = a.slice();\n    c.splice(i, 1);\n    if (a[i] === b[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given an array arr of integers, return the number of palindromes in the array.\n  A palindrome is an array that is read the same backwards and forwards.\n  For example:\n  palindrome([1,2,3,4,5,6,7,8,9]) == 9\n  palindrome([1,2,3,2,1]) == 4\n  palindrome([1,2,3,4,3,2,2,2]) == 1\n  palindrome([1,2,3,2,1]) == 1\n  */\nconst palindrome = (arr) => {\n  // TODO: implement your solution here\n  let a = arr.slice();\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    let b = a.slice();\n    b.splice(i, 1);\n    if (a[i] === b[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\nmodule.exports = {\n  smaLlesTChanGe,\n  palindromePairs,\n  palindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst1\n  }\n\n  if (lst2.length === 0) {\n    return lst2\n  }\n\n  const min = Math.min(lst1.length, lst2.length)\n  const same = []\n\n  for (let i = 0; i < min; i++) {\n    if (lst1[i] === lst2[i]) {\n      same.push(lst1[i])\n    }\n  }\n\n  if (same.length === 0) {\n    return lst1\n  }\n\n  return lst1.filter(str => lst2.indexOf(str) === -1)\n}\n\nconsole.log(totAlMaTch(['hi', 'admin'], ['hI', 'Hi']))\nconsole.log(totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nconsole.log(totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']))\nconsole.log(totAlMaTch(['4'], ['1', '2', '3', '4', '5']))\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == false\n  30 = 2 * 3 + 5\n  */\nconst isMUltiPlyPrIme2 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme3 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme4 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme5 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme6 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme7 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme8 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme9 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme10 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme11 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme12 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme13 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme14 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme15 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme16 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme17 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme18 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme19 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme20 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme21 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme22 = (a) => {\n  return /^[0-9]*$/.test(a) &&\n    (a % 3 === 0 || a % 5 === 0 || a % 7 === 0);\n};\n\nconst isMUltiPlyPrIme"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n};\n\nmodule.exports = isSImplEPoweR;\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  return (a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0);\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectCube(1) ==> true\n  isPerfectCube(2) ==> false\n  isPerfectCube(3) ==> false\n  isPerfectCube(4) ==> false\n  isPerfectCube(5) ==> false\n  isPerfectCube(6) ==> true\n  isPerfectCube(7) ==> false\n  isPerfectCube(8) ==> false\n  isPerfectCube(9) ==> true\n  isPerfectCube(16) ==> true\n  */\nconst isPerfectCube = (a) => {\n  return (a % 6 === 0);\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect fourth cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectFourthCube(1) ==> false\n  isPerfectFourthCube(2) ==> false\n  isPerfectFourthCube(3) ==> false\n  isPerfectFourthCube(4) ==> true\n  isPerfectFourthCube(5) ==> false\n  isPerfectFourthCube(6) ==> false\n  isPerfectFourthCube(7) ==> false\n  isPerfectFourthCube(8) ==> false\n  isPerfectFourthCube(9) ==> false\n  */\nconst isPerfectFourthCube = (a) => {\n  return (a % 4 === 0);\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect fifth cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectFifthCube(1) ==> false\n  isPerfectFifthCube(2) ==> false\n  isPerfectFifthCube(3) ==> false\n  isPerfectFifthCube(4) ==> false\n  isPerfectFifthCube(5) ==> true\n  isPerfectFifthCube(6) ==> false\n  isPerfectFifthCube(7) ==> false\n  isPerfectFifthCube(8) ==> false\n  isPerfectFifthCube(9) ==> false\n  */\nconst isPerfectFifthCube = (a) => {\n  return (a % 5 === 0);\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect sixth cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectSixthCube(1) ==> false\n  isPerfectSixthCube(2) ==> false\n  isPerfectSixthCube(3) ==> false\n  isPerfectSixthCube(4) ==> false\n  isPerfectSixthCube(5) ==> false\n  isPerfectSixthCube(6) ==> true\n  isPerfectSixthCube(7) ==> false\n  isPerfectSixthCube(8) ==> false\n  isPerfectSixthCube(9) ==> false\n  */\nconst isPerfectSixthCube = (a) => {\n  return (a % 6 === 0);\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect seventh cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectSeventhCube(1) ==> false\n  isPerfectSeventhCube(2) ==> false\n  isPerfectSeventhCube(3) ==> false\n  isPerfectSeventhCube(4) ==> false\n  isPerfectSeventhCube(5) ==> false\n  isPerfectSeventhCube(6) ==> false\n  isPerfectSeventhCube(7) ==> true\n  isPerfectSeventhCube(8) ==> false\n  isPerfectSeventhCube(9) ==> false\n  */\nconst isPerfectSeventhCube = (a) => {\n  return (a % 7 === 0);\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect eighth cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectEighthCube(1) ==> false\n  isPerfectEighthCube(2) ==> false\n  isPerfectEighthCube(3) ==> false\n  isPerfectEighthCube(4) ==> false\n  isPerfectEighthCube(5) ==> false\n  isPerfectEighthCube(6) ==> false\n  isPerfectEighthCube(7) ==> false\n  isPerfectEighthCube(8) ==> true\n  isPerfectEighthCube(9) ==> false\n  */\nconst isPerfectEighthCube = (a) => {\n  return (a % 8 === 0);\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect ninth cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectNinthCube(1) ==> false\n  isPerfectNinthCube(2) ==> false\n  isPerfectNinthCube(3) ==> false\n  isPerfectNinthCube(4) ==> false\n  isPerfectNinthCube(5) ==> false\n  isPerfectNinthCube(6) ==> false\n  isPerfectNinthCube(7) ==> false\n  isPerfectNinthCube(8) ==> false\n  isPerfectNinthCube(9) ==> true\n  */\nconst isPerfectNinthCube = (a) => {\n  return (a % 9 === 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  if (!num) return 0;\n  let result = 0;\n  num.split('').forEach((digit, index) => {\n    if (index % 2 === 0) return;\n    const number = parseInt(digit, 16);\n    if (isPrime(number)) {\n      result += 2;\n    }\n    if (index === 2) {\n      result += 2;\n    }\n    if (index === 4) {\n      result += 2;\n    }\n  });\n  return result;\n};\n\nmodule.exports = hexkey;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n    let binary = \"\";\n    while (decimal > 0) {\n        let digit = (decimal % 2);\n        binary = `${digit}${binary}`;\n        decimal = Math.floor(decimal / 2);\n    }\n    return `${binary}db`;\n};\n\n// tests\nconst decImaltoBinAryTest = () => {\n    assert(decImaltoBinAry(15) === \"db1111db\", \"decimal to binary\");\n    assert(decImaltoBinAry(32) === \"db100000db\", \"decimal to binary\");\n};\n\ndescribe(\"decimal to binary\", () => {\n    it(\"decimal to binary\", () => {\n        decImaltoBinAryTest();\n    });\n});\n\ndescribe(\"decimal to binary\", () => {\n    it(\"decimal to binary\", () => {\n        decImaltoBinAryTest();\n    });\n});\n\n// end of file<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  if (s.length === 0) return false\n  let sLength = s.length\n  let counter = 0\n  for (let i = 0; i < sLength - 1; i++) {\n    if (s[i] === s[i + 1]) {\n      counter++\n    }\n  }\n  return counter >= 3\n}\n\nconsole.log(isHAppy('abcd'))\nconsole.log(isHAppy('aabb'))\nconsole.log(isHAppy('adb'))\nconsole.log(isHAppy('xyy'))\nconsole.log(isHAppy('aaaa'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const gradeRange = [5, 7, 3, 1, 5]\n  const result = []\n\n  for (let i = 0; i < grades.length; i++) {\n    const currentGrade = grades[i]\n    const currentIndex = gradeRange.indexOf(currentGrade)\n    const nextIndex = i + 1\n    const nextGrade = grades[nextIndex]\n\n    const nextIndexInRange = gradeRange.indexOf(nextGrade)\n\n    if (currentIndex >= 0 && nextIndexInRange > currentIndex) {\n      result.push('A+')\n    } else if (currentIndex >= 0 && nextIndexInRange < currentIndex) {\n      result.push('A')\n    } else if (currentIndex < 0 && nextIndexInRange > currentIndex) {\n      result.push('A-')\n    } else if (currentIndex < 0 && nextIndexInRange < currentIndex) {\n      result.push('B+')\n    } else if (currentIndex < 0 && nextIndexInRange === currentIndex) {\n      result.push('B')\n    } else if (currentIndex === 0 && nextIndexInRange === currentIndex) {\n      result.push('C+')\n    } else if (currentIndex === 0 && nextIndexInRange === currentIndex) {\n      result.push('C')\n    } else if (currentIndex === 0 && nextIndexInRange === currentIndex) {\n      result.push('D+')\n    } else if (currentIndex === 0 && nextIndexInRange === currentIndex) {\n      result.push('D')\n    } else if (currentIndex === 0 && nextIndexInRange === currentIndex) {\n      result.push('E')\n    } else {\n      result.push('D-')\n    }\n  }\n\n  return result\n}\n\nconst main = () => {\n  const result = numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5])\n  console.log(result)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  if(string.length === 1) return false\n  const len = string.length\n  if(len === 3) return true\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const isPalindrome = (str) => {\n    const strLength = str.length\n    const strBits = str.split('')\n    const reversedBits = strBits.reverse()\n    for(let i = 0; i < strLength; i++) {\n      if(strBits[i]!== reversedBits[i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const isPalindrome = (str) => {\n    const strLength = str.length\n    const strBits = str.split('')\n    const reversedBits = strBits.reverse()\n    for(let i = 0; i < strLength; i++) {\n      if(strBits[i]!== reversedBits[i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const isPalindrome = (str) => {\n    const strLength = str.length\n    const strBits = str.split('')\n    const reversedBits = strBits.reverse()\n    for(let i = 0; i < strLength; i++) {\n      if(strBits[i]!== reversedBits[i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const isPalindrome = (str) => {\n    const strLength = str.length\n    const strBits = str.split('')\n    const reversedBits = strBits.reverse()\n    for(let i = 0; i < strLength; i++) {\n      if(strBits[i]!== reversedBits[i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const isPalindrome = (str) => {\n    const strLength = str.length\n    const strBits = str.split('')\n    const reversedBits = strBits.reverse()\n    for(let i = 0; i < strLength; i++) {\n      if(strBits[i]!== reversedBits[i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const isPalindrome = (str) => {\n    const strLength = str.length\n    const strBits = str.split('')\n    const reversedBits = strBits.reverse()\n    for(let i = 0; i < strLength; i++) {\n      if(strBits[i]!== reversedBits[i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const isPalindrome = (str) => {\n    const strLength = str.length\n    const strBits = str.split('')\n    const reversedBits = strBits.reverse()\n    for(let i = 0; i < strLength; i++) {\n      if(strBits[i]!== reversedBits[i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    return true\n  }\n  const isPalindrome = (str) => {\n    const strLength = str.length\n    const strBits = str.split('')\n    const reversedBits = strBits.reverse()\n    for(let i = 0; i < strLength; i++) {\n      if(strBits[i]!== reversedBits[i]) {\n        return false\n      }\n    }\n    return true\n  }\n  const isPrime = (n) => {\n    if(n <= 1) return false\n    let i = 2\n    while(i <= Math.sqrt(n)) {\n      if(n % i === 0) return false\n      i++\n    }\n    "}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let start = 1\n  let end = 10\n  let count = 0\n  while (end <= n) {\n    if (start > 1 && end > 1) {\n      count += 1\n    }\n    start += 1\n    end += 1\n  }\n  return count\n}\n\nconsole.log(staRtsONeEndS(4))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let output = 0;\n  for (let i = 1; i <= N; i++) {\n    let binary = (N / i).toString(2);\n    output += parseInt(binary);\n  }\n  return output.toString();\n};\n\nmodule.exports = solVe;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const words = s.split(' ');\n  const result = [];\n  words.forEach(word => {\n    const arr = [];\n    word.split('').sort((a, b) => a > b? 1 : -1).forEach(c => arr.push(c));\n    result.push(arr.join(''));\n  });\n  return result.join(' ');\n};\n\nconsole.log(antIShuFfle('Hello World!!!'));<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const list = []\n  for (let row of lst) {\n    for (let column of row) {\n      if (column === x) {\n        list.push([row, column])\n      }\n    }\n  }\n  \n  return list.sort((a, b) => (a[0][1] < b[0][1]? -1 : 1))\n}\n\nconst getrow2 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? -1 : 1))\n  return row\n}\n\nconst getrow3 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? -1 : 1))\n  return row.reverse()\n}\n\nconst getrow4 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? 1 : -1))\n  return row\n}\n\nconst getrow5 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? 1 : -1))\n  return row.reverse()\n}\n\nconst getrow6 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? 1 : -1))\n  return row\n}\n\nconst getrow7 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? -1 : 1))\n  return row\n}\n\nconst getrow8 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? 1 : -1))\n  return row.reverse()\n}\n\nconst getrow9 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? 1 : -1))\n  return row\n}\n\nconst getrow10 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? -1 : 1))\n  return row.reverse()\n}\n\nconst getrow11 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? 1 : -1))\n  return row\n}\n\nconst getrow12 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? 1 : -1))\n  return row.reverse()\n}\n\nconst getrow13 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? 1 : -1))\n  return row\n}\n\nconst getrow14 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? -1 : 1))\n  return row\n}\n\nconst getrow15 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n  row.sort((a, b) => (b < a? -1 : 1))\n  return row.reverse()\n}\n\nconst getrow16 = (lst, x) => {\n  let row = []\n  for (let row of lst) {\n    row.push(row.length? row.pop() : x)\n  }\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const sorted = array.slice();\n  sorted.sort((a, b) => {\n    const sum = a + b;\n    return sum % 2? -1 : 1;\n  });\n  return sorted;\n};\n\nmodule.exports = sorTArrAy;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  let enc = '';\n  for (let i = 0; i < s.length; i++) {\n    enc += s[s.length - 1 - i];\n  }\n  return enc;\n}\n\n/*\n  Create a function decRypt that takes a string as an argument and\n  returns a string decRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decRypt('lm') returns 'hi'\n  decRypt('ewhjklnop') returns 'gf'\n  decRypt('kj') returns 'et'\n  */\nconst decRypt = (s) => {\n  let dec = '';\n  for (let i = 0; i < s.length; i++) {\n    dec += s[i];\n  }\n  return dec;\n}\n\n/*\n  Create a function encRyptDecrypt that takes a string as an argument \n  and returns a string encrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRyptDecrypt('lm') returns 'hi'\n  encRyptDecrypt('ewhjklnop') returns 'gf'\n  encRyptDecrypt('kj') returns 'et'\n  */\nconst encRyptDecrypt = (s) => {\n  return decRypt(encRypt(s));\n}\n\n/*\n  Create a function decRyptEncrypt that takes a string as an argument \n  and returns a string decrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decRyptEncrypt('lm') returns 'hi'\n  decRyptEncrypt('ewhjklnop') returns 'gf'\n  decRyptEncrypt('kj') returns 'et'\n  */\nconst decRyptEncrypt = (s) => {\n  return encRypt(decRypt(s));\n}\n\n/*\n  Create a function encrypt that takes a string as an argument and \n  returns a string encrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  return encRyptDecrypt(encRypt(s));\n}\n\n/*\n  Create a function decrypt that takes a string as an argument and \n  returns a string decrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  return decRyptEncrypt(decRypt(s));\n}\n\n/*\n  Create a function encryptDecrypt that takes a string as an argument \n  and returns a string encrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt('lm') returns 'hi'\n  encryptDecrypt('ewhjklnop') returns 'gf'\n  encryptDecrypt('kj') returns 'et'\n  */\nconst encryptDecrypt = (s) => {\n  return encrypt(decrypt(s));\n}\n\n/*\n  Create a function main that takes a string as an argument and \n  returns a string decrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  main('hi') returns 'lm'\n  main('asdfghjkl') returns 'ewhjklnop'\n  main('gf') returns 'kj'\n  main('et') returns 'ix'\n  */\nconst main = (s) => {\n  let s1 = encrypt(s);\n  let s2 = decrypt(s1);\n  return s2;\n}\n\n/*\n  Create a function main2 that takes a string as an argument and \n  returns a string encrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  main2('hi') returns 'lm'\n  main2('asdfghjkl') returns 'ewhjklnop'\n  main2('gf') returns 'kj'\n  main2('et') returns 'ix'\n  */\nconst main2 = (s) => {\n  let s1 = encryptDecrypt(s);\n  let s2 = decrypt(s1);\n  return s2;\n}\n\n/*\n  Create a function main3 that takes a string as an argument and \n  returns a string encrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  main3('lm') returns 'hi'\n  main3('ewhjklnop') returns 'gf'\n  main3('kj') returns 'et'\n  */\nconst main3 = (s) => {\n  let s1 = encryptDecrypt(s);\n  let s2 = encrypt(s1);\n  return s2;\n}\n\n/*\n  Create a function main4 that"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  const sorted = lst.sort();\n  const len = sorted.length;\n  if (len < 2) {\n    return null;\n  }\n  return sorted[1];\n};\n\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5]) === 2);\nconsole.log(nexTSmaLlest([5, 1, 4, 3, 2]) === 2);\nconsole.log(nexTSmaLlest([]) === null);\nconsole.log(nexTSmaLlest([1, 1]) === null);<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  let word = '';\n  let isBored = false;\n  for(let i = 0; i < S.length; i++){\n    word += S.charAt(i);\n    if(word === 'I'){\n      isBored = true;\n      word = '';\n    }\n  }\n  return isBored;\n};\n\nconsole.log(isBOred(\"The sky is blue. The sun is shining. I love this weather\"));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  const sum = x + y + z;\n  return (sum === x || sum === y || sum === z) && x.constructor === Number && y.constructor === Number && z.constructor === Number;\n};\n\nmodule.exports = anyint;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  // convert message to array of chars\n  const messageArray = message.split('');\n  // convert messageArray to array of upper case letters\n  const messageArrayUpperCase = messageArray.map(char => char.toUpperCase());\n  // convert messageArrayUpperCase to array of chars\n  const messageArrayChars = messageArrayUpperCase.join('');\n  // loop through messageArrayChars\n  const messageArrayCharsLength = messageArrayChars.length;\n  for (let i = 0; i < messageArrayCharsLength; i += 2) {\n    // swap two characters\n    const first = messageArrayChars[i];\n    const second = messageArrayChars[i + 1];\n    messageArrayChars[i] = second;\n    messageArrayChars[i + 1] = first;\n  }\n  return messageArrayChars;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a way that it\n  swaps case of all letters, replaces all vowels in the message with the letter\n  that appears 2 places ahead of that vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('This is a message')\n  'This is a message'\n  */\nconst decode = (message) => {\n  // convert message to array of chars\n  const messageArray = message.split('');\n  // convert messageArray to array of upper case letters\n  const messageArrayUpperCase = messageArray.map(char => char.toUpperCase());\n  // convert messageArrayUpperCase to array of chars\n  const messageArrayChars = messageArrayUpperCase.join('');\n  // loop through messageArrayChars\n  const messageArrayCharsLength = messageArrayChars.length;\n  for (let i = 0; i < messageArrayCharsLength; i += 2) {\n    // swap two characters\n    const first = messageArrayChars[i];\n    const second = messageArrayChars[i + 1];\n    messageArrayChars[i] = second;\n    messageArrayChars[i + 1] = first;\n  }\n  return messageArrayChars;\n};\n\n// Test\nconsole.log('encode', encode('This is a message'));\nconsole.log('decode', decode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  const maxPrime = lst.reduce((a, b) => Math.max(a, b), 0);\n  let sum = 0;\n  for (let i = 2; i <= maxPrime; i++) {\n    if (lst.includes(i)) {\n      sum += lst.filter(n => n % i === 0).reduce((a, b) => a + b, 0);\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  if (n % 2 === 0) return false;\n  if (n < 9) return true;\n  if (n < 99) return false;\n  if (n % 3 === 0) return false;\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeRecursive = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count === 2) return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count === 2) return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNaive = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count === 2) return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count === 2) return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count === 2) return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count === 2) return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count === 2) return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let result = true;\n  keys.forEach((key) => {\n    let value = dict[key];\n    if (typeof value ==='string') {\n      let valueLowerCase = value.toLowerCase();\n      let valueUpperCase = value.toUpperCase();\n      result = result && (valueLowerCase === valueUpperCase);\n    }\n  });\n  return result;\n};\n\n/*\n  Given a dictionary, return true if all values are strings in lower case\n  or all values are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let values = Object.values(dict);\n  let result = true;\n  values.forEach((value) => {\n    let valueLowerCase = value.toLowerCase();\n    let valueUpperCase = value.toUpperCase();\n    result = result && (valueLowerCase === valueUpperCase);\n  });\n  return result;\n};\n\nexport {cheCkDiCtCasE};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n    const prime = primeFinder(n)\n    const result = []\n    const isPrime = (n) => {\n        if(n === 1) {\n            return false\n        } else if(n === 2) {\n            return true\n        } else if(n === 3) {\n            return true\n        } else if(n % 2 === 0) {\n            return false\n        } else if(n % 3 === 0) {\n            return false\n        }\n        for(let i = 2; i <= Math.sqrt(n); i++) {\n            if(n % i === 0) {\n                return false\n            }\n        }\n        return true\n    }\n    for(let i = 0; i < prime.length; i++) {\n        if(isPrime(prime[i])) {\n            result.push(prime[i])\n        }\n    }\n    return result\n}\n\nconsole.log(couNtUpto(5))\nconsole.log(couNtUpto(11))\nconsole.log(couNtUpto(0))\nconsole.log(couNtUpto(20))\nconsole.log(couNtUpto(1))\nconsole.log(couNtUpto(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  // return Math.abs(a) * Math.abs(b);\n  const aDigits = parseInt(a, 10);\n  const bDigits = parseInt(b, 10);\n  const product = Math.abs(aDigits) * Math.abs(bDigits);\n  return product;\n};\n\n// Test cases\n\nconst testCases = [\n  [148, 412, 16],\n  [19, 28, 72],\n  [2020, 1851, 0],\n  [14, -15, 20]\n];\n\nconst testCase = (a, b, expected) => {\n  const actual = mulTiplY(a, b);\n  console.log(`Product of ${a} and ${b} is ${actual}`);\n  console.log(`Expected: ${expected}`);\n};\n\nfor (let [a, b, expected] of testCases) {\n  testCase(a, b, expected);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let vowels = ['A','E','I','O','U'];\n  let result = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (vowels.indexOf(s[i].toUpperCase())!== -1) {\n      result++;\n    }\n  }\n  return result;\n}\n\nexport default couNtUpPer;<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let num = value.split(\".\")[0]\n  let parts = num.split(\"/\")\n  let intPart = parts[0]\n  let decPart = parts[1]\n  let res = intPart + (decPart / 2)\n\n  return res\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest half-integer to it. If the number is equidistant\n  from two half-integers, round it away from zero.\n  Examples\n  >>> cloSestHalfintegEr(\"10\")\n  10\n  >>> cloSestHalfintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two half-integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestHalfintegEr(\"14.5\") should\n  return 15 and cloSestHalfintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestHalfintegEr = (value) => {\n  let num = value.split(\".\")[0]\n  let parts = num.split(\"/\")\n  let intPart = parts[0]\n  let decPart = parts[1]\n  let res = intPart + (decPart / 2)\n\n  return res\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two whole numbers, round it away from zero.\n  Examples\n  >>> cloSestWholeEr(\"10\")\n  10\n  >>> cloSestWholeEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example cloSestWholeEr(\"14.5\") should\n  return 15 and cloSestWholeEr(\"-14.5\") should return -15.\n  */\nconst cloSestWholeEr = (value) => {\n  let num = value.split(\".\")[0]\n  let parts = num.split(\"/\")\n  let intPart = parts[0]\n  let decPart = parts[1]\n  let res = intPart + (decPart / 2)\n\n  return res\n}\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest decimal number to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> cloSestdecEr(\"10\")\n  10\n  >>> cloSestdecEr(\"15.3\")\n  15.3\n  >>> cloSestdecEr(\"-14.5\")\n  -14.5\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example cloSestdecEr(\"14.5\") should\n  return 15.5 and cloSestdecEr(\"-14.5\") should return -14.5.\n  */\nconst cloSestdecEr = (value) => {\n  let num = value.split(\".\")[0]\n  let parts = num.split(\"/\")\n  let intPart = parts[0]\n  let decPart = parts[1]\n  let res = intPart + (decPart / 2)\n\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  const odd = n & 1\n  const even = n & 2\n  const num = [1, even, odd]\n\n  for (let i = 2; i <= n; i += 2) {\n    num.push(num[i-1] + num[i])\n  }\n\n  return num\n}\n\nexport default makEAPiLe\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n    let str = s.replace(/\\s/g, '');\n    str = str.split(',').concat(str.split(' '));\n    return str;\n}\n\nmodule.exports = worDsStRing;\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x == y) return x;\n  const xMod = Math.floor(x / 2);\n  const yMod = Math.floor(y / 2);\n  if (xMod <= yMod) return xMod;\n  else return yMod;\n}\n\nconst main = () => {\n  console.log(choOseNUm(12, 15));\n  console.log(choOseNUm(13, 12));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1)\n}\n\n/*\n  Round the result of rouNdedavg to the nearest integer, using\n  Math.round(). If the result of rouNdedavg is not an integer,\n  return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst roundRoutedavg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let rounded = Math.round(sum / (m - n + 1));\n  return rounded\n}\n\n// Test cases\n[{\n  input: 1,\n  expected: \"0b11\"\n}, {\n  input: 7,\n  expected: -1\n}, {\n  input: 10,\n  expected: \"0b1111\"\n}, {\n  input: 20,\n  expected: \"0b11010\"\n}, {\n  input: 30,\n  expected: -1\n}, {\n  input: 50,\n  expected: \"0b11010\"\n}, {\n  input: 80,\n  expected: -1\n}, {\n  input: 120,\n  expected: \"0b11010\"\n}, {\n  input: 200,\n  expected: -1\n}, {\n  input: 300,\n  expected: -1\n}, {\n  input: 500,\n  expected: \"0b11010\"\n}, {\n  input: 800,\n  expected: -1\n}, {\n  input: 1000,\n  expected: -1\n}].forEach((t) => {\n  const actual = roundRoutedavg(t.input, t.input);\n  const expected = t.expected;\n  t.actual.should.equal(expected);\n});\n\n[{\n  input: 1,\n  expected: \"0b11\"\n}, {\n  input: 7,\n  expected: -1\n}, {\n  input: 10,\n  expected: \"0b1111\"\n}, {\n  input: 20,\n  expected: \"0b11010\"\n}, {\n  input: 30,\n  expected: -1\n}, {\n  input: 50,\n  expected: \"0b11010\"\n}, {\n  input: 80,\n  expected: -1\n}, {\n  input: 120,\n  expected: \"0b11010\"\n}, {\n  input: 200,\n  expected: -1\n}, {\n  input: 300,\n  expected: -1\n}, {\n  input: 500,\n  expected: \"0b11010\"\n}, {\n  input: 800,\n  expected: -1\n}, {\n  input: 1000,\n  expected: -1\n}].forEach((t) => {\n  const actual = rouNdedavg(t.input, t.input);\n  const expected = t.expected;\n  t.actual.should.equal(expected);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  if(x.length <= 1) {\n    return x;\n  }\n  const evenDigits = new Set(x.filter(n => n%2 == 0));\n  const sorted = x.filter(n =>!evenDigits.has(n));\n  return sorted.sort();\n};\n\nconsole.log(uniQueDIgits([15, 33, 1422, 1])); //[1, 15, 33]\nconsole.log(uniQueDIgits([152, 323, 1422, 10])); //[]\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byLenghtH = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byLength = (arr) => {\n  return arr.sort((a, b) => b.length - a.length);\n};\n\nconst byNumber = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byToString = (arr) => {\n  return arr.sort((a, b) => a.toString() - b.toString());\n};\n\nconst byName = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNameLength = (arr) => {\n  return arr.sort((a, b) => b.length - a.length);\n};\n\nconst byNameLengthReverse = (arr) => {\n  return arr.sort((a, b) => a.length - b.length);\n};\n\nconst byNameToString = (arr) => {\n  return arr.sort((a, b) => a.toString() - b.toString());\n};\n\nconst byNameReverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumName = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameReverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameLength = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameLengthReverse = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameToString = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameReverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameLengthReverse = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameLengthReverse2 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameToStringReverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameReverse2 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameLengthReverse2 = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameLengthReverse3 = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameToStringReverse3 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameReverse3 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameLengthReverse3 = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameLengthReverse4 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameToStringReverse4 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameReverse4 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameLengthReverse4 = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameLengthReverse5 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameToStringReverse5 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameReverse5 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameLengthReverse5 = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameLengthReverse6 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameToStringReverse6 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameReverse6 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst byNumNameLengthReverse6 = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst byNumNameLengthReverse7 = (arr) => {\n  return arr.sort"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    const current = f(i - 1);\n    for (let j = 0; j < current.length; j++) {\n      result.push(current[j] * i);\n    }\n  }\n  return result;\n};\n\n// f(5) == [1, 2, 6, 24, 15]\n// f(6) == [1, 2, 6, 12, 9, 6]\n// f(7) == [1, 2, 6, 12, 21, 7, 6]\n// f(8) == [1, 2, 6, 12, 24, 8, 6, 6]\n// f(9) == [1, 2, 6, 12, 18, 9, 6, 6, 6]\n// f(10) == [1, 2, 6, 12, 15, 10, 6, 6, 6, 6]\n\n/*\n  Implement the function g that takes a string, s, and returns the first letter of the string\n  Example:\n  g(\"abc\") == \"a\"\n  g(\"abcd\") == \"a\"\n  g(\"xyz\") == \"x\"\n  */\nconst g = (s) => {\n  return s[0];\n};\n\n// g(\"abc\") == \"a\"\n// g(\"abcd\") == \"a\"\n// g(\"xyz\") == \"x\"\n\n/*\n  Implement the function h that takes a string, s, and returns the number of vowels in the string\n  Example:\n  h(\"a\") == 1\n  h(\"ab\") == 1\n  h(\"abc\") == 3\n  */\nconst h = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\") {\n      result++;\n    }\n  }\n  return result;\n};\n\n// h(\"a\") == 1\n// h(\"ab\") == 1\n// h(\"abc\") == 3\n\n/*\n  Implement the function i that takes a string, s, and returns the number of consonants in the string\n  Example:\n  i(\"a\") == 0\n  i(\"ab\") == 1\n  i(\"abc\") == 2\n  */\nconst i = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== \"a\" && s[i]!== \"e\" && s[i]!== \"i\" && s[i]!== \"o\" && s[i]!== \"u\") {\n      result++;\n    }\n  }\n  return result;\n};\n\n// i(\"a\") == 0\n// i(\"ab\") == 1\n// i(\"abc\") == 2\n\n/*\n  Implement the function k that takes a string, s, and returns the number of consonants and vowels in the string\n  Example:\n  k(\"a\") == 0\n  k(\"ab\") == 1\n  k(\"abc\") == 2\n  k(\"abcde\") == 3\n  k(\"abcc\") == 2\n  */\nconst k = (s) => {\n  return i(s) + h(s);\n};\n\n// k(\"a\") == 0\n// k(\"ab\") == 1\n// k(\"abc\") == 2\n// k(\"abcde\") == 3\n// k(\"abcc\") == 2\n\n/*\n  Implement the function l that takes a string, s, and returns the number of consonants and vowels in the string\n  Example:\n  l(\"a\") == 0\n  l(\"ab\") == 1\n  l(\"abc\") == 2\n  l(\"abcde\") == 3\n  l(\"abcc\") == 2\n  l(\"abbb\") == 3\n  l(\"abb\") == 2\n  l(\"abbbb\") == 5\n  */\nconst l = (s) => {\n  const result = k(s);\n  if (result > 0) {\n    return result;\n  } else {\n    return 0;\n  }\n};\n\n// l(\"a\") == 0\n// l(\"ab\") == 1\n// l(\"abc\") == 2\n// l(\"abcde\") == 3\n// l(\"abcc\") == 2\n// l(\"abbb\") == 3\n// l(\"abb\") == 2\n// l(\"abbbb\") == 5\n\n/*\n  Implement the function m that takes a string, s, and returns the number of consonants and vowels in the string\n  Example:\n  m(\"a\") == 1\n  m(\"ab\") == 1\n  m(\"abc\") == 2\n  m(\"abcde\") == 3\n  m(\"abcc\") == 2\n  m(\"abbb\") == 3\n  m(\"abb\") == 2\n  m(\"abbbb\") == 5\n  */\nconst m = (s) => {\n  const result = l(s);\n  if (result > 0) {\n    return result;\n  } else {\n    return 0;\n  }\n};\n\n// m(\"a\") == 1\n// m(\"ab\") == 1\n// m(\"abc\") == 2\n// m(\"abcde\") == 3\n// m(\"abcc\") == 2\n// m(\"abbb\") == 3\n// m(\"abb\") == 2\n// m(\"abbbb\") == 5\n\n/*\n  Implement the function n that takes a string, s, and returns the number of consonants and vowels in the string\n  Example:\n  n(\"a\") == 1\n  n(\"ab\") == 1\n  n(\"abc\") == 2\n  n(\"abcde\") == 3\n  n(\"abcc\") == 2\n  n(\"abbb\") == 3\n  n(\"abb\") == 2\n"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  let res = [0, 0];\n  for (let i = 1; i < n; i++) {\n    let a = Math.pow(10, i);\n    let b = Math.pow(10, i) - 1;\n    let c = Math.pow(10, i - 1);\n    let d = Math.pow(10, i - 1) - 1;\n    let even = a + b;\n    let odd = c + d;\n    if (even % 2 === 0) res[0] += 1;\n    if (odd % 2 === 0) res[1] += 1;\n  }\n  return res;\n};\n\nexport default eveNOddpalinDroMe;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    for (let j = 0; j < num.length; j++) {\n      sum += num[j];\n    }\n    if (sum > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = couNtNuMs;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return true;\n  }\n  const left = 0;\n  const right = len - 1;\n  let leftBound = left;\n  let rightBound = right;\n  while (leftBound < rightBound) {\n    while (arr[leftBound] < arr[rightBound] && leftBound < rightBound) {\n      rightBound--;\n    }\n    if (leftBound === rightBound) {\n      return false;\n    }\n    if (arr[rightBound] < arr[leftBound]) {\n      return false;\n    }\n    const temp = arr[rightBound];\n    arr[rightBound] = arr[leftBound];\n    arr[leftBound] = temp;\n    leftBound++;\n    rightBound--;\n  }\n  return true;\n};\n\nexport default movEOneball;<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  let result = [];\n  let lst1Copy = lst1.slice();\n  let lst2Copy = lst2.slice();\n  while (lst1Copy.length > 0 && lst2Copy.length > 0) {\n    if (lst1Copy[0] % 2 === 0) {\n      lst1Copy.shift();\n      result.push(lst2Copy[0]);\n    } else if (lst2Copy[0] % 2 === 0) {\n      lst2Copy.shift();\n    } else {\n      return false;\n    }\n  }\n  return lst1.length === 0 && lst2.length === 0;\n};\n\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let map = {}\n  let letter = ''\n  let count = 0\n  test.split(' ').forEach(e => {\n    e = e.toLowerCase()\n    if (!map[e]) map[e] = 0\n    if (count < map[e]) {\n      count = map[e]\n      letter = e\n    }\n  })\n  return map\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a list of the letters sorted by occurrence.\n\nExample:\nsortLetters('a b c') == ['a', 'b', 'c']\nsortLetters('a b c a b a') == ['a', 'b', 'c']\nsortLetters('a b c a b a') == ['a', 'b', 'c']\nsortLetters('b b b b a') == ['b']\nsortLetters('a') == []\nsortLetters('') == []\nsortLetters('a b') == ['a', 'b']\nsortLetters('a b c d e f') == ['a', 'b', 'c', 'd', 'e', 'f']\nsortLetters('a b c d e f g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nsortLetters('b b b b b a') == ['b', 'b']\n*/\nconst sortLetters = (test) => {\n  let result = []\n  let letter = ''\n  let count = 0\n  test.split(' ').forEach(e => {\n    e = e.toLowerCase()\n    if (!result[count]) result[count] = e\n    if (e < result[count]) {\n      result[count] = e\n    }\n    if (count < result.length - 1) count += 1\n  })\n  return result\n}\n\n// let test = 'a b c a b a b a b c b a c b c c'\n// console.log(hisTogrAm(test))\n// console.log(sortLetters(test))\n\nlet test = 'a b c a b a b a b c b a c b c c'\nconsole.log(sortLetters(test))\n\nlet test = 'a b c a b a b a b c b a c b c c'\nconsole.log(sortLetters(test))\n\nlet test = 'a b c a b a b a b c b a c b c c'\nconsole.log(sortLetters(test))\n\nlet test = 'b b b b a b b b b b b b b a b a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n    let cLen = c.length,\n        rev = \"\";\n\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (s.charAt(i) === c.charAt(cLen - 1 - i)) {\n            rev = rev + s.charAt(i);\n        }\n    }\n    return (rev, true);\n};\n\nlet test = revErsedeletE(\"abcdedcba\", \"ab\");\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n    let counter = 0\n    let numDigits = 0\n    lst.forEach((s) => {\n        let nums = s.split('')\n        numDigits = numDigits + nums.length\n        nums.forEach((n, i) => {\n            if (i % 2 === 0) {\n                counter = counter + n\n            }\n        })\n    })\n    return [`the number of odd elements ${counter} of the ${numDigits} input.`]\n}\n\nmodule.exports = oddcounT\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  const len = nums.length\n  const dp = new Array(len + 1)\n\n  dp[0] = nums[0]\n\n  for (let i = 1; i <= len; i++) {\n    dp[i] = nums[i]\n    for (let j = 0; j < i; j++) {\n      dp[i] = Math.min(dp[i], dp[j] + nums[i])\n    }\n  }\n\n  return dp[len]\n}\n\nconst minsubARraySUmSolution = (nums) => {\n  let min = nums[0]\n\n  for (let i = 1; i < nums.length; i++) {\n    min = Math.min(min, nums[i])\n  }\n\n  return min\n}\n\nmodule.exports = {\n  minsubARraySUm,\n  minsubARraySUmSolution\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const fill = []\n  let max = 0\n  for (let row of grid) {\n    fill.push(row.map((n) => (n === 1)? 1 : 0))\n    fill.push(row.map((n) => (n === 1)? 1 : 0))\n    max = Math.max(max, fill.reduce((a, b) => Math.max(a, b), 0))\n  }\n  return fill.reduce((a, b) => a - b, max)\n}\n\nconsole.log(maxfill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))\nconsole.log(maxfill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2))\nconsole.log(maxfill([[0, 0, 0], [0, 0, 0]], 5))\nconsole.log(maxfill([[0, 0, 0]], 0))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const len = arr.length\n  const res = []\n\n  for (let i = 0; i < len; i++) {\n    let curr = arr[i]\n    let left = 0\n    let right = 0\n    let pos = 0\n    let t = 0\n    let k = 1\n\n    while (left < len && right < len) {\n      if (curr > 0) {\n        pos = left\n        t = left\n        while (t < len) {\n          if (curr % 2 === 1) {\n            t += 1\n          } else {\n            t += 2\n          }\n          curr = curr / 2\n          k = k * 2\n          if (t >= len) {\n            break\n          }\n        }\n        res[pos] = k\n        if (t >= len) {\n          break\n        }\n      } else {\n        pos = right\n        t = right\n        while (t < len) {\n          if (curr % 2 === 0) {\n            t += 1\n          } else {\n            t += 2\n          }\n          curr = curr / 2\n          k = k * 2\n          if (t >= len) {\n            break\n          }\n        }\n        res[pos] = k\n        if (t >= len) {\n          break\n        }\n      }\n      left = t + 1\n      right = t + 2\n    }\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let c = 0;\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let curChar = s[i];\n    if (curChar.match(/[a-zA-Z]/)) {\n      c++;\n      if (c === n) {\n        words.push(s.substr(i));\n      }\n    }\n    i++;\n  }\n  return words;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  const word = word.toLowerCase()\n  const length = word.length\n  let i = length - 1\n  let j = 0\n  const min = 0\n  const max = length\n  let current = i\n\n  while (i >= min && j < length) {\n    if (word[i] === word[j] && word[i]!== 'e' && word[i]!== 'i' && word[i]!== 'o') {\n      i--\n      j++\n      current = i\n    } else {\n      if (word[i]!== 'e' && word[i]!== 'i' && word[i]!== 'o') {\n        if (current === i) {\n          break\n        } else {\n          current = i\n          i--\n          j++\n        }\n      }\n      if (word[j] === word[i] && word[j]!== 'e' && word[j]!== 'i' && word[j]!== 'o') {\n        j++\n      }\n    }\n  }\n  return word.substring(0, current + 1)\n}\n\nconsole.log(getclosEstVoWel(\"yogurt\"))\nconsole.log(getclosEstVoWel(\"FULL\"))\nconsole.log(getclosEstVoWel(\"quick\"))\nconsole.log(getclosEstVoWel(\"ab\"))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const l = lst.length\n  const len = l - 1\n  let count = 0\n  let stack = []\n  let p = 1\n  for (let i = 0; i < l; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n      count++\n    } else if (lst[i] === ')') {\n      p--\n      if (p === 0) {\n        stack.pop()\n        count--\n      }\n    }\n  }\n  if (count!== 0) {\n    return 'No'\n  }\n  const lst2 = []\n  for (let i = 0; i < len; i++) {\n    if (stack.length === 0) {\n      return 'No'\n    }\n    lst2.push(stack.pop())\n  }\n  return `${lst2.join('')}`\n}\n\n// TEST\n\nconst tests = [\n  [['()()'], 'Yes'],\n  [['()()'], 'No'],\n  [['()()'], 'No'],\n  [['()'], 'No'],\n  [['()()']],\n  [['()'], 'No'],\n  [['()', '()']],\n  [['()', '()', '()']],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'Yes'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()', '()'], 'No'],\n  [['()', '()"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n    let len = arr.length;\n    let sorted = [];\n    let min = arr[0];\n    let max = arr[len - 1];\n    let cur;\n    let i = 0;\n    let j = 0;\n    while (i < len && j < k) {\n        if (arr[i] > min) {\n            sorted.push(arr[i]);\n            min = arr[i];\n            i++;\n        } else if (arr[i] < min) {\n            sorted.push(min);\n            min = arr[i];\n            j++;\n        }\n    }\n    while (i < len) {\n        sorted.push(arr[i]);\n        i++;\n    }\n    return sorted;\n};\n\nmodule.exports = maxImum;<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let i = 0, j = lst.length - 1, sum = 0;\n  while (i <= j) {\n    sum += (lst[i] % 2)? lst[i] : 0;\n    i++;\n    j--;\n  }\n  return sum;\n};\n\nmodule.exports = solUtioN;\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const arr2 = arr.slice(0, k)\n  return arr2.reduce((pre, curr) => pre + curr, 0)\n}\n\nexport default addelemEnts\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let collatz = []\n  collatz.push(n)\n  let cur = n\n  let count = 1\n  while(count <= n){\n    cur = getOdd(cur)\n    count += 1\n    collatz.push(cur)\n  }\n  return collatz.sort((a, b) => {\n    if(a < b){\n      return 1\n    }else{\n      return -1\n    }\n  })\n}\n\nconst getOdd = (num) => {\n  if(num % 2 === 1){\n    return (num * 3 + 1)\n  }else{\n    return num //return num // 2 * num\n  }\n}\n\nconsole.log(getoddCOllatZ(5))\n\n/*\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ2 = (n) => {\n  let collatz = []\n  collatz.push(n)\n  let count = 1\n  while(count <= n){\n    let prev = collatz[count - 1]\n    let next = getOdd(prev)\n    collatz.push(next)\n    count += 1\n  }\n  return collatz.sort((a, b) => {\n    if(a < b){\n      return 1\n    }else{\n      return -1\n    }\n  })\n}\n\nconsole.log(getoddCOllatZ2(5))<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  if (date === null || date === undefined || date === '') {\n    return false;\n  }\n  const dateParts = date.split('-');\n  if (dateParts.length!== 3) {\n    return false;\n  }\n  const dateLength = parseInt(dateParts[2], 10);\n  const year = parseInt(dateParts[0], 10);\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[2], 10);\n  const isValid = (month > 0 && month < 13) && (day > 0 && day < 32) && (dateLength >= 1 && dateLength <= 30);\n  return isValid;\n}\n\n/*\n  You have to write a function which validates a given number string and\n  returns true if the number is valid otherwise false.\n  The number is valid if it contains only digits.\n  For example:\n  valIdNaN('123') => true\n  valIdNaN('abc') => false\n  valIdNaN('1.23') => true\n  valIdNaN('1a.23') => false\n  valIdNaN('1.23a') => false\n*/\nconst valIdNaN = (number) => {\n  if (number === null || number === undefined || number === '') {\n    return false;\n  }\n  return /^\\d+$/.test(number);\n}\n\n/*\n  You have to write a function which validates a given string and\n  returns true if the string is valid otherwise false.\n  The string is valid if it contains only letters.\n  For example:\n  valIdNaN('abc') => true\n  valIdNaN('abcd') => true\n  valIdNaN('abc1') => true\n  valIdNaN('a1b') => true\n  valIdNaN('aBc') => true\n  valIdNaN('aBc1') => true\n  valIdNaN('aBc12') => true\n*/\nconst valIdNaN = (str) => {\n  if (str === null || str === undefined || str === '') {\n    return false;\n  }\n  return /^[a-zA-Z]+$/.test(str);\n}\n\n/*\n  You have to write a function which validates a given string and\n  returns true if the string is valid otherwise false.\n  The string is valid if it contains only letters and digits.\n  For example:\n  valIdNaN('abc') => true\n  valIdNaN('abcd') => true\n  valIdNaN('abc1') => true\n  valIdNaN('a1b') => true\n  valIdNaN('aBc') => true\n  valIdNaN('aBc1') => true\n  valIdNaN('aBc12') => true\n*/\nconst valIdNaN = (str) => {\n  if (str === null || str === undefined || str === '') {\n    return false;\n  }\n  return /^[a-zA-Z0-9]+$/.test(str);\n}\n\n/*\n  You have to write a function which validates a given string and\n  returns true if the string is valid otherwise false.\n  The string is valid if it contains only numbers.\n  For example:\n  valIdNaN('123') => true\n  valIdNaN('abc') => true\n  valIdNaN('1.23') => true\n  valIdNaN('1a.23') => true\n  valIdNaN('1.23a') => true\n  valIdNaN('1.23A') => true\n  valIdNaN('1.23a1') => true\n*/\nconst valIdNaN = (str) => {\n  if (str === null || str === undefined || str === '') {\n    return false;\n  }\n  return /^\\d+$/.test(str);\n}\n\n/*\n  You have to write a function which validates a given string and\n  returns true if the string is valid otherwise false.\n  The string is valid if it contains only letters and numbers.\n  For example:\n  valIdNaN('123') => true\n  valIdNaN('abc') => true\n  valIdNaN('1.23') => true\n  valIdNaN('1a.23') => true\n  valIdNaN('1.23a') => true\n  valIdNaN('1.23A') => true\n  valIdNaN('1.23a1') => true\n*/\nconst valIdNaN = (str) => {\n  if (str === null || str === undefined || str === '') {\n    return false;\n  }\n  return /^[a-zA-Z0-9]+$/.test(str);\n}\n\n/*\n  You have to write a function which validates a given string and\n  returns true if the string is valid otherwise false.\n  The string is valid if it contains only letters and digits\n  and the length of the string is in the range of 3 to 20.\n  For example:\n  valIdNaN('123') => true\n  valIdNaN('abc') => true\n  valIdNaN('1.23') => true\n  valIdNaN('1a.23') => true\n  valIdNaN('1.23a') => true\n  valIdNaN('1.23A')"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  return txt.split(/\\s+/g).filter((e) => e.length > 0)\n}\n\nconst isOdd = (x) => {\n  let count = 0\n  for(let i = 0; i < x.length; i++) {\n    count += x[i].toUpperCase() === x[i].toLowerCase()? 0 : 1\n  }\n  return count % 2 === 1\n}\n\n//console.log(splItWoRds(\"Hello world!\"))\n//console.log(splItWoRds(\"Hello,world!\"))\n//console.log(splItWoRds(\"abcdef\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello,world!\"))\n//console.log(isOdd(\"Hello"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const last = lst.slice(-1)[0];\n  const sorted = lst.slice().sort(function (a, b) {\n    return a - b;\n  });\n  return (sorted[sorted.length - 1] === last);\n};\n\nmodule.exports = isSOrteD;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const arr1 = [...interval1];\n  const arr2 = [...interval2];\n  const len1 = arr1.length;\n  const len2 = arr2.length;\n  if (arr1[len1 - 1] > arr2[0] || arr1[0] < arr2[len2 - 1]) {\n    return 'NO';\n  }\n  const sum = arr1.reduce((pre, cur) => pre + cur, 0);\n  if (sum % len1!== 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  let n = arr.length\n  let product = 1\n  let sum = 0\n  let sign = 0\n  for (let i = 0; i < n; i++) {\n    sign = arr[i]\n    if (sign === 0) {\n      break\n    }\n    product *= sign\n    sum += sign\n  }\n  return sum * product\n}\n\nconst sum = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst multiply = (arr) => {\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\nconst multiplyAndSum = (arr) => {\n  return sum(multiply(arr))\n}\n\nconst isArray = (arr) => {\n  return typeof arr === 'object' && Array.isArray(arr)\n}\n\nconst isArrayEmpty = (arr) => {\n  return arr.length === 0\n}\n\nconst isArrayNotEmpty = (arr) => {\n  return arr.length > 0\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmpty = (arr) => {\n  return arr.length === 0\n}\n\nconst isArrayNotEmpty = (arr) => {\n  return arr.length > 0\n}\n\nconst isArray = (arr) => {\n  return typeof arr === 'object' && Array.isArray(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmpty = (arr) => {\n  return arr.length === 0\n}\n\nconst isArrayNotEmpty = (arr) => {\n  return arr.length > 0\n}\n\nconst isArray = (arr) => {\n  return typeof arr === 'object' && Array.isArray(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmpty = (arr) => {\n  return arr.length === 0\n}\n\nconst isArrayNotEmpty = (arr) => {\n  return arr.length > 0\n}\n\nconst isArray = (arr) => {\n  return typeof arr === 'object' && Array.isArray(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmpty = (arr) => {\n  return arr.length === 0\n}\n\nconst isArrayNotEmpty = (arr) => {\n  return arr.length > 0\n}\n\nconst isArray = (arr) => {\n  return typeof arr === 'object' && Array.isArray(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmpty = (arr) => {\n  return arr.length === 0\n}\n\nconst isArrayNotEmpty = (arr) => {\n  return arr.length > 0\n}\n\nconst isArray = (arr) => {\n  return typeof arr === 'object' && Array.isArray(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmpty = (arr) => {\n  return arr.length === 0\n}\n\nconst isArrayNotEmpty = (arr) => {\n  return arr.length > 0\n}\n\nconst isArray = (arr) => {\n  return typeof arr === 'object' && Array.isArray(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOrNot = (arr) => {\n  return isArrayEmpty(arr) || isArrayNotEmpty(arr)\n}\n\nconst isArrayEmptyOr"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const length = grid.length\n\n  let prev_row = 0\n  let prev_col = 0\n\n  let row = 0\n  let col = 0\n\n  const min = Array.from(grid[0]).concat(Array.from(grid[1]).concat(Array.from(grid[2])))\n   .sort((a, b) => {\n      return min[a] - min[b]\n    })\n   .map(val => {\n      return [row, col, val]\n    })\n\n  let min_path = []\n\n  while (length - min.length >= k) {\n    const cur_row = row\n    const cur_col = col\n    const next_row = row + 1\n    const next_col = col + 1\n\n    if (cur_row >= length) {\n      row = 0\n    } else if (cur_col >= length) {\n      col = 0\n    } else {\n      row = cur_row\n      col = cur_col\n    }\n\n    if (row === prev_row && col === prev_col) {\n      break\n    }\n\n    if (row === next_row) {\n      row = 0\n      col += 1\n    } else if (col === next_col) {\n      col = 0\n      row += 1\n    }\n\n    min_path = [...min_path,...min.slice(row, row + col)]\n\n    min = Array.from(grid[row]).concat(Array.from(grid[row + 1]).concat(Array.from(grid[row + 2])))\n     .sort((a, b) => {\n        return min[a] - min[b]\n      })\n     .map(val => {\n        return [row, col, val]\n      })\n\n    prev_row = row\n    prev_col = col\n  }\n\n  return min_path\n}\n\nexport default minpath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n === 1) {\n    return [1]\n  }\n  const tri = [1]\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 2] + tri[i - 1] + tri[i])\n  }\n  return tri\n}\n\ntri(6)\n// [1, 3, 2, 8, 4, 1]\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let result = 1;\n  while (n) {\n    let odd = n & 1;\n    result *= odd;\n    n >>= 1;\n  }\n  return result;\n};\n\n// BEGIN ALL CODE\n\nconsole.log(digIts(1));\nconsole.log(digIts(4));\nconsole.log(digIts(235));\n\n// END ALL CODE\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n    const stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') stack.push(string[i]);\n        else if (string[i] === ']') {\n            if (stack.length > 0 && stack[stack.length - 1] === '[') {\n                stack.pop();\n                stack.push(string[i]);\n            }\n            else return false;\n        }\n    }\n    return stack.length === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let total = 0;\n  for (let num of lst) {\n    total += Number(num).toFixed(Number(Math.ceil(Math.log10(Number(lst.length)))));\n  }\n  return total;\n}\n\nconsole.log(sumsqaRes([1,2,3]));\nconsole.log(sumsqaRes([1,4,9]));\nconsole.log(sumsqaRes([1,3,5,7]));\nconsole.log(sumsqaRes([1.4,4.2,0]));\nconsole.log(sumsqaRes([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  let ch = txt.charAt(txt.length - 1)\n  let txt_char = txt.charAt(txt.length - 2)\n  if (txt_char === ch && ch!=='' && ch!== '\\t' && ch!== '\\n') {\n    return true\n  }\n  return false\n}\n\n/*\n  Create a function that returns the length of a given string,\n  and the length of the longest substring of that string that\n  contains no whitespace.\n  Note: \"whitespace\" is a group of characters separated by space.\n  Examples:\n  getLongestStringLength(\"apple pie\") ➞ 4\n  getLongestStringLength(\"apple pi e\") ➞ 4\n  getLongestStringLength(\"apple pi e \") ➞ 5\n  getLongestStringLength(\"\") ➞ 0\n  */\nconst getLongestStringLength = (txt) => {\n  let len = 0\n  let ch = txt.charAt(len)\n  let len_substr = 0\n  while (ch!=='' && ch!== '\\t' && ch!== '\\n') {\n    len_substr += 1\n    len += 1\n    ch = txt.charAt(len)\n  }\n  return len_substr\n}\n\n/*\n  Create a function that returns the length of the longest substring\n  of a given string that contains no whitespace.\n  Note: \"whitespace\" is a group of characters separated by space.\n  Examples:\n  getLongestStringLength(\"apple pie\") ➞ 4\n  getLongestStringLength(\"apple pi e\") ➞ 4\n  getLongestStringLength(\"apple pi e \") ➞ 5\n  getLongestStringLength(\"\") ➞ 0\n  */\nconst getLongestStringLengthWithoutWhitespace = (txt) => {\n  let len = 0\n  let ch = txt.charAt(len)\n  let len_substr = 0\n  while (ch!=='' && ch!== '\\t' && ch!== '\\n') {\n    len_substr += 1\n    len += 1\n    ch = txt.charAt(len)\n  }\n  return len_substr\n}\n\n/*\n  Create a function that returns a list of strings\n  that can be created by the given string.\n  Note: \"whitespace\" is a group of characters separated by space.\n  Examples:\n  findStrings(\"apple pie\") ➞ [\"apple\", \"pie\"]\n  findStrings(\"apple pie \") ➞ [\"apple\", \"pie\"]\n  findStrings(\"apple pi e\") ➞ [\"apple\", \"pi\", \"e\"]\n  findStrings(\"apple pi e \") ➞ [\"apple\", \"pi\", \"e\"]\n  findStrings(\"apple pi e  \") ➞ [\"apple\", \"pi\", \"e\"]\n  findStrings(\"apple pi e \") ➞ [\"apple\", \"pi\", \"e\"]\n  findStrings(\"\") ➞ []\n  */\nconst findStrings = (txt) => {\n  let txt_char = txt.charAt(0)\n  let len = 0\n  let substr = \"\"\n  let len_substr = 0\n  let ret = []\n  while (txt_char!=='' && txt_char!== '\\t' && txt_char!== '\\n') {\n    len += 1\n    txt_char = txt.charAt(len)\n  }\n  while (len_substr < len) {\n    substr += txt_char\n    len_substr += 1\n    len -= 1\n    txt_char = txt.charAt(len)\n    let tmp = substr\n    let tmp_len = len_substr\n    let len_substr_tmp = len_substr\n    while (txt_char!=='' && txt_char!== '\\t' && txt_char!== '\\n') {\n      tmp += txt_char\n      len_substr_tmp += 1\n      len_substr += 1\n      txt_char = txt.charAt(len_substr)\n    }\n    ret.push(tmp)\n    substr = \"\"\n    len_substr = 0\n  }\n  return ret\n}\n\n/*\n  Create a function that returns a list of strings\n  that can be created by the given string.\n  Note: \"whitespace\" is a group of characters separated by space.\n  Examples:\n  findStrings(\"apple pie\") ➞ [\"apple\", \"pie\"]\n  findStrings(\"apple pie \") ➞ [\"apple\", \"pie\"]\n  findStrings(\"apple pi e\") ➞ [\"apple\", \"pi\", \"e\"]\n  findStrings(\"apple pi e \") ➞ [\"apple\", \"pi\", \"e\"]\n  findStrings(\"apple pi e  \") ➞ [\"apple\", \"pi\", \"e\"]\n  findStrings(\"apple pi e \") ➞ [\"apple\", \"pi\", \"e\"]\n  findStrings(\"\") ➞ []\n  */\nconst findStringsWithoutWhitespace = (txt) => {\n  let txt_char = txt.charAt(0)\n  let len = 0\n  let substr = \"\"\n  let len_substr = 0\n  let ret = []\n  while (txt_char!=='' && txt_char!== '\\t' && txt_char!== '\\n') {\n    len += 1\n    txt_char = txt.charAt(len)\n  }\n  while (len_substr < len) {\n    substr += txt_char\n    len_substr += 1\n    len -= 1\n    txt_char = txt.charAt("}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n    let i = arr.length - 1, max = 0, min = 0;\n    while (i >= 0 && arr[i] <= arr[i + 1]) {\n        if (arr[i] > arr[max]) {\n            max = i;\n        }\n        if (arr[i] < arr[min]) {\n            min = i;\n        }\n        i--;\n    }\n    return min < 0? -1 : max;\n}\n\n/*\n  Create a function which returns the largest index of an element which is\n  greater than or equal to the element immediately preceding it. If no such\n  element exists then return -1. The given array will not contain duplicate\n  values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 4\n  canarraNge([1,2,3]) = 2\n  */\nconst canarraNge = (arr) => {\n    let i = arr.length - 1, max = 0;\n    while (i >= 0 && arr[i] >= arr[i + 1]) {\n        if (arr[i] > arr[max]) {\n            max = i;\n        }\n        i--;\n    }\n    return max < 0? -1 : max;\n}\n\nconst arr = [1,2,3,4,5,6,7,8,9];\nconsole.log(canarraNge(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  // We start by iterating over the list, adding the largest\n  // value of the previous element to the largest value of the\n  // current element.\n  let largest = 0;\n  let smallest = null;\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    // If the current value is negative, set the largest value\n    // to the current value and add the largest value of the\n    // previous element to the current value.\n    if (curr < 0) {\n      largest = curr;\n      i++;\n    } else {\n      // If the current value is positive, check the largest value\n      // to see if it is greater than the current value. If it is,\n      // set the largest value to the current value and set the\n      // smallest value to the largest value.\n      if (largest < curr) {\n        largest = curr;\n        smallest = largest;\n      }\n      i++;\n    }\n  }\n  return (smallest, largest);\n};\n\n// Your function should return a tuple (a, b), where 'a' is\n// the smallest of negative integers, and 'b' is the largest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// larGestlargEstintegErs([2, 4, 1, 3, 5, 7]) == (1, 7)\n// larGestlargEstintegErs([0]) == (null, null)\n// larGestlargEstintegErs([]) == (null, null)\nconst larGestlargEstintegErs = (lst) => {\n  // We start by iterating over the list, adding the largest\n  // value of the previous element to the largest value of the\n  // current element.\n  let largest = null;\n  let smallest = null;\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    // If the current value is negative, set the largest value\n    // to the current value and add the largest value of the\n    // previous element to the current value.\n    if (curr < 0) {\n      largest = curr;\n      i++;\n    } else {\n      // If the current value is positive, check the largest value\n      // to see if it is less than the current value. If it is,\n      // set the largest value to the current value and set the\n      // smallest value to the largest value.\n      if (largest < curr) {\n        largest = curr;\n        smallest = largest;\n      }\n      i++;\n    }\n  }\n  return (smallest, largest);\n};\n\n// The main function\n// Your function should return a tuple (a, b), where 'a' is\n// the smallest of negative integers, and 'b' is the largest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// main([2, 4, 1, 3, 5, 7]) == (1, 7)\n// main([0]) == (null, null)\n// main([]) == (null, null)\nconst main = (lst) => {\n  // Your function should return a tuple (a, b), where 'a' is\n  // the smallest of negative integers, and 'b' is the largest\n  // of positive integers in a list.\n  // If there is no negative or positive integers, return them as null.\n  // Examples:\n  // main([2, 4, 1, 3, 5, 7]) == (1, 7)\n  // main([0]) == (null, null)\n  // main([]) == (null, null)\n  let a = null;\n  let b = null;\n  if (lst.length === 0) {\n    return (null, null);\n  } else if (lst.length === 1) {\n    return (lst[0], lst[0]);\n  } else {\n    let smallest = larGestsmallestElements(lst);\n    let largest = larGestlargestElements(lst);\n    if (smallest!== null && largest!== null) {\n      if (smallest < largest) {\n        return (smallest, largest);\n      } else {\n        return (largest, smallest);\n      }\n    } else if (smallest!== null && largest === null) {\n      return (smallest, largest);\n    } else {\n      return (largest, smallest);\n    }\n  }\n};\n\n// Your function should return a tuple (a, b), where 'a' is\n// the smallest of negative integers, and 'b' is the largest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// main([2, 4, 1, 3, 5, 7]) == (1, 7)\n// main([0]) == (null, null)\n// main([]) == (null, null)\nconst larGestlargestElements = (lst) => {\n  // Your function should return a tuple (a, b), where 'a' is\n  // the smallest of negative integers, and 'b' is the largest\n  // of positive integers in a list.\n  // If there is no negative or positive integers, return them as null.\n  // Examples:\n  // main([2, 4, 1, 3, 5, 7]) == (1, 7)\n  // main([0]) == (null, null)\n  // main([]) == (null, null)\n  let largest = null;\n  let i = 0;\n  while (i < lst.length) {\n    let curr = lst[i];\n    if (largest === null || largest < curr) {\n      largest = curr;\n    }\n    i++;\n  }\n"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  let firstType = type(a);\n  let secondType = type(b);\n  if (firstType === secondType) {\n    return comPare(a, b);\n  } else if (firstType === 'number' && secondType ==='string') {\n    return parseFloat(a) > parseFloat(b)? a : b;\n  } else if (firstType ==='string' && secondType === 'number') {\n    return parseFloat(a) > parseFloat(b)? b : a;\n  } else {\n    return null;\n  }\n};\n\n//test\nconsole.log(comPareone(1, 2.5));\nconsole.log(comPareone(1, \"2,3\"));\nconsole.log(comPareone(\"5,1\", \"6\"));\nconsole.log(comPareone(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 0 && n % 4 === 0) {\n      count++;\n      n -= 4;\n    } else if (n % 2!== 0 && n % 4!== 0) {\n      return false;\n    } else {\n      n -= 2;\n    }\n  }\n  return count === 4;\n};\n\nconst isEqualToSumeveN = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      count++;\n      n -= 2;\n    } else {\n      n -= 1;\n    }\n  }\n  return count === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isEqualToSumeveN(8) == true\n  isEqualToSumeveN(9) == false\n  isEqualToSumeveN(10) == false\n  isEqualToSumeveN(11) == false\n  isEqualToSumeveN(15) == true\n  */\nconst isEqualToSumeveN = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      count++;\n      n -= 2;\n    } else {\n      n -= 1;\n    }\n  }\n  return count === 5;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  isEqualToSumeveN(12) == true\n  isEqualToSumeveN(16) == false\n  isEqualToSumeveN(18) == false\n  isEqualToSumeveN(20) == false\n  isEqualToSumeveN(24) == true\n  */\nconst isEqualToSumeveN = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      count++;\n      n -= 2;\n    } else {\n      n -= 1;\n    }\n  }\n  return count === 6;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  isEqualToSumeveN(28) == true\n  isEqualToSumeveN(32) == false\n  isEqualToSumeveN(36) == false\n  isEqualToSumeveN(40) == false\n  isEqualToSumeveN(48) == true\n  isEqualToSumeveN(56) == true\n  */\nconst isEqualToSumeveN = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      count++;\n      n -= 2;\n    } else {\n      n -= 1;\n    }\n  }\n  return count === 7;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  isEqualToSumeveN(64) == true\n  isEqualToSumeveN(128) == false\n  isEqualToSumeveN(256) == false\n  isEqualToSumeveN(384) == false\n  isEqualToSumeveN(512) == true\n  isEqualToSumeveN(768) == true\n  isEqualToSumeveN(1024) == true\n  */\nconst isEqualToSumeveN = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      count++;\n      n -= 2;\n    } else {\n      n -= 1;\n    }\n  }\n  return count === 8;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n  Example\n  isEqualToSumeveN(512) == true\n  isEqualToSumeveN(768) == false\n  isEqualToSumeveN(1024) == false\n  isEqualToSumeveN(1536) == false\n  isEqualToSumeveN(2048) == true\n  isEqualToSumeveN(3072) == true\n  isEqualToSumeveN(4096) == true\n  isEqualToSumeveN(6144) == true\n  */\nconst isEqualToSumeveN = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      count++;\n      n -= 2;\n    } else {\n      n -= 1;\n    }\n  }\n  return count === 9;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\n  Example\n  isEqualToSumeveN(2048) == true\n  isEqualToSumeveN(3072) == false\n  isEqualToSumeveN(4096) == false\n  isEqualToSumeveN(6144) == false\n  isEqualToSumeveN(8192) == true\n  isEqualToSumeveN(12288) == true\n  isEqualToSumeveN(16384) == true\n  isEqualToSumeveN(24576) == true\n  isEqualToSumeveN(32768) == true\n  */\nconst isEqualToSumeveN = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      count++;\n      n -= 2;\n    } else {\n      n -= 1;\n    }\n  }\n  return count === 10;\n};\n\n/*Evaluate whether the given number n"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  let bfact = 1;\n  for (let i = 1; i <= n; i++) {\n    bfact = bfact * i;\n  }\n  return bfact;\n};\n\n/*The Egyptian factorial is defined as:\n  egyptian_factorial(n) = n * (n + 1) / 2 * (n + 2) / 3 *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  144\n  >>> speCialfactoRiaL(3)\n  6\n  >>> speCialfactoRiaL(2)\n  2\n  >>> speCialfactoRiaL(1)\n  1\n  */\nconst speCialfactoEgyptian = (n) => {\n  let efact = 1;\n  for (let i = 1; i <= n; i++) {\n    efact = efact * (i + 1) / 2;\n  }\n  return efact;\n};\n\n/*The Russian factorial is defined as:\n  russian_factorial(n) = n! * (n-1)! * (n-2)! *... * 3! * 2! * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n  >>> speCialfactoRiaL(3)\n  6\n  >>> speCialfactoRiaL(2)\n  2\n  >>> speCialfactoRiaL(1)\n  1\n  */\nconst speCialfactoRussian = (n) => {\n  let rfact = 1;\n  for (let i = 1; i <= n; i++) {\n    rfact = rfact * (i + 1);\n  }\n  return rfact;\n};\n\n/*The Japanese factorial is defined as:\n  japanese_factorial(n) = n! * (n-1)! * (n-2)! *... * 10! * 9! * 8! * 7!\n  * 6! * 5! * 4! * 3! * 2! * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  144\n  >>> speCialfactoRiaL(3)\n  6\n  >>> speCialfactoRiaL(2)\n  2\n  >>> speCialfactoRiaL(1)\n  1\n  */\nconst speCialfactoJapanese = (n) => {\n  let jfact = 1;\n  for (let i = 1; i <= n; i++) {\n    jfact = jfact * (i + 1);\n  }\n  return jfact;\n};\n\nconst spefactorial = {\n  brazilian_factorial: speCialfactoBrazilian,\n  egyptian_factorial: speCialfactoEgyptian,\n  russian_factorial: speCialfactoRussian,\n  japanese_factorial: speCialfactoJapanese\n};\n\nexport default spefactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  text = text.replace(/ /g, \"_\");\n  if (text.length > 2) {\n    text = text.replace(/\\s{2,}/g, \"-\");\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all the - in it with spaces,\n  and if a string has more than 2 consecutive -, then replace\n  all consecutive - with underscores\n  \n  fixdashEs(\"Example\") == \"Example\"\n  fixdashEs(\"Example 1\") == \"Example_1\"\n  fixdashEs(\" Example 2\") == \"Example--2\"\n  fixdashEs(\" Example   3\") == \"Example___3\"\n  */\nconst fixdashEs = (text) => {\n  text = text.replace(/-/g, \" \");\n  if (text.length > 2) {\n    text = text.replace(/-{2,}/g, \"_\");\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all the - in it with spaces,\n  and if a string has more than 2 consecutive -, then replace\n  all consecutive - with underscores\n  \n  fixdashEs(\"Example\") == \"Example\"\n  fixdashEs(\"Example 1\") == \"Example_1\"\n  fixdashEs(\" Example 2\") == \"Example--2\"\n  fixdashEs(\" Example   3\") == \"Example___3\"\n  */\nconst fixspaceEs = (text) => {\n  text = text.replace(/ /g, \" \");\n  if (text.length > 2) {\n    text = text.replace(/\\s{2,}/g, \" \");\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all the spaces in it with -,\n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspaceEs(\"Example\") == \"Example\"\n  fixspaceEs(\"Example 1\") == \"Example1\"\n  fixspaceEs(\" Example 2\") == \"Example2\"\n  fixspaceEs(\" Example   3\") == \"Example3\"\n  */\nconst fixspaceDashEs = (text) => {\n  text = text.replace(/ /g, \"-\");\n  if (text.length > 2) {\n    text = text.replace(/\\s{2,}/g, \"-\");\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all the spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspaceDashEs(\"Example\") == \"Example\"\n  fixspaceDashEs(\"Example 1\") == \"Example1\"\n  fixspaceDashEs(\" Example 2\") == \"Example2\"\n  fixspaceDashEs(\" Example   3\") == \"Example3\"\n  */\nconst fixspaceDashEsDash = (text) => {\n  text = text.replace(/ /g, \"-\");\n  if (text.length > 2) {\n    text = text.replace(/\\s{2,}/g, \"-\");\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all the spaces in it with -,\n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspaceDashEs(\"Example\") == \"Example\"\n  fixspaceDashEs(\"Example 1\") == \"Example1\"\n  fixspaceDashEs(\" Example 2\") == \"Example2\"\n  fixspaceDashEs(\" Example   3\") == \"Example3\"\n  */\nconst fixspaceDashEsDashDash = (text) => {\n  text = text.replace(/ /g, \"-\");\n  if (text.length > 2) {\n    text = text.replace(/\\s{2,}/g, \"-\");\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all the spaces in it with -,\n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspaceDashEs(\"Example\") == \"Example\"\n  fixspaceDashEs(\"Example 1\") == \"Example1\"\n  fixspaceDashEs(\" Example 2\") == \"Example2\"\n  fixspaceDashEs(\" Example   3\") == \"Example3\"\n  */\nconst fixspaceDashEsDashDashDash = (text) => {\n  text = text.replace(/ /g, \"-\");\n  if (text.length > 2) {\n    text = text.replace(/\\s{2,}/g, \"-\");\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all the spaces in it with -,\n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspaceDashEs(\"Example\") == \"Example\"\n  fixspaceDashEs(\"Example 1\") == \"Example1\"\n  fixspaceDashEs(\" Example 2\") == \"Example2\"\n  fixspaceDashEs(\" Example   3\") == \"Example3\"\n  */\nconst fixspaceDashEsDashDashDash = (text) => {\n  text = text.replace(/ /g, \"-\");\n  if (text.length > 2) {\n    text = text.replace(/\\s{2,}/g, \"-\");\n  }\n  return text;\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  let valid_file = true;\n  const file_name_split = file_name.split(\".\");\n  let file_name_last_part = file_name_split[file_name_split.length - 1];\n  const number_of_digits = /\\d+/.exec(file_name_last_part);\n  if (number_of_digits === null) {\n    valid_file = false;\n  }\n  else {\n    let first_letter = /[a-zA-Z]+/.exec(file_name_last_part);\n    if (first_letter === null) {\n      valid_file = false;\n    }\n    else {\n      let second_letter = /[a-zA-Z]+/.exec(file_name_last_part);\n      if (second_letter === null) {\n        valid_file = false;\n      }\n      else {\n        let third_letter = /[a-zA-Z]+/.exec(file_name_last_part);\n        if (third_letter === null) {\n          valid_file = false;\n        }\n        else {\n          let file_name_last_part_substring = file_name_last_part.substring(1);\n          if (file_name_last_part_substring === \"txt\" || file_name_last_part_substring === \"exe\" || file_name_last_part_substring === \"dll\") {\n            valid_file = true;\n          }\n          else {\n            valid_file = false;\n          }\n        }\n      }\n    }\n  }\n  return valid_file;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  let valid_file = true;\n  const file_name_split = file_name.split(\".\");\n  let file_name_last_part = file_name_split[file_name_split.length - 1];\n  const number_of_digits = /\\d+/.exec(file_name_last_part);\n  if (number_of_digits === null) {\n    valid_file = false;\n  }\n  else {\n    let first_letter = /[a-zA-Z]+/.exec(file_name_last_part);\n    if (first_letter === null) {\n      valid_file = false;\n    }\n    else {\n      let second_letter = /[a-zA-Z]+/.exec(file_name_last_part);\n      if (second_letter === null) {\n        valid_file = false;\n      }\n      else {\n        let third_letter = /[a-zA-Z]+/.exec(file_name_last_part);\n        if (third_letter === null) {\n          valid_file = false;\n        }\n        else {\n          let file_name_last_part_substring = file_name_last_part.substring(1);\n          if (file_name_last_part_substring === \"txt\" || file_name_last_part_substring === \"exe\" || file_name_last_part_substring === \"dll\") {\n            valid_file = true;\n          }\n          else {\n            valid_file = false;\n          }\n        }\n      }\n    }\n  }\n  return valid_file;\n};\n\nfilENamEChecK(\"example.txt\");\nfilENamEChecK(\"1example.dll\");<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if ((i + 1) % 3 === 0 && (i + 1) % 4!== 0) {\n      result += lst[i];\n    } else if ((i + 1) % 3!== 0 && (i + 1) % 4 === 0) {\n      result += lst[i] * lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(sumsqaRes([1,2,3]));\nconsole.log(sumsqaRes([]));\nconsole.log(sumsqaRes([-1,-5,2,-1,-5]));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  const words = sentence.split(' ')\n  let output = ''\n  let i = 0\n  while (i < words.length) {\n    if (isPrime(words[i].length)) {\n      output += words[i]\n      i++\n    } else {\n      let tmp = words[i]\n      while (tmp!= '') {\n        output += tmp\n        tmp = words[i + 1]\n        i++\n      }\n    }\n  }\n  return output\n}\n\nexport default worDsInsenteNce\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  const [x, n] = [...x,...n];\n  let res = false;\n  while (x.length) {\n    if (x.length === n.length) {\n      if (x === n) {\n        return res = true;\n      }\n      x = x.slice(1);\n      n = n.slice(1);\n    } else if (x.length > n.length) {\n      x = x.slice(1);\n    } else {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nexport {\n  simPlifY\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const numsMap = {}\n  for (let i = 0; i < nums.length; i++) {\n    numsMap[nums[i]] = i\n  }\n  const sum = (x) => x % 10\n  const sortedNums = [...nums].sort((a, b) => {\n    const diff = sum(a) - sum(b)\n    if (diff === 0) {\n      return numsMap[a] - numsMap[b]\n    }\n    return diff\n  })\n  return sortedNums\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let cnt = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 2)!== 0 && (nums[i] % 2)!== 0) {\n      cnt++;\n    }\n  }\n  return cnt;\n};\n\nconsole.log(speCialfilteR([15, -73, 14, -15])); // 1\nconsole.log(speCialfilteR([33, -2, -3, 45, 21, 109])); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  let a = []\n  for(let i = 1; i < n; i++){\n    a.push(i * i - i + 1)\n  }\n  let total = 0\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        total += a[i] + a[j] + a[k]\n      }\n    }\n  }\n  return total % 3\n}\n\n// if we have the same triple values we are repeating.\n// we can have triple values in any order.\n// so we can ignore the triple values which are repeated.\nconst getmaxTRiple = (n) => {\n  let a = []\n  for(let i = 1; i < n; i++){\n    a.push(i * i - i + 1)\n  }\n  let total = 0\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        total += a[i] + a[j] + a[k]\n      }\n    }\n  }\n  return total % 3\n}\n\n// the same as above but we can have same triple values in any order.\n// we can ignore the triple values which are repeated.\nconst getmaxTRiple2 = (n) => {\n  let a = []\n  for(let i = 1; i < n; i++){\n    a.push(i * i - i + 1)\n  }\n  let total = 0\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        for(let l = k+1; l < n; l++){\n          total += a[i] + a[j] + a[k] + a[l]\n        }\n      }\n    }\n  }\n  return total % 3\n}\n\nconst getmaxTRiple3 = (n) => {\n  let a = []\n  for(let i = 1; i < n; i++){\n    a.push(i * i - i + 1)\n  }\n  let total = 0\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        for(let l = k+1; l < n; l++){\n          for(let m = l+1; m < n; m++){\n            total += a[i] + a[j] + a[k] + a[l] + a[m]\n          }\n        }\n      }\n    }\n  }\n  return total % 3\n}\n\nconst getmaxTRiple4 = (n) => {\n  let a = []\n  for(let i = 1; i < n; i++){\n    a.push(i * i - i + 1)\n  }\n  let total = 0\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        for(let l = k+1; l < n; l++){\n          for(let m = l+1; m < n; m++){\n            for(let n = m+1; n < n; n++){\n              total += a[i] + a[j] + a[k] + a[l] + a[m] + a[n]\n            }\n          }\n        }\n      }\n    }\n  }\n  return total % 3\n}\n\nconst getmaxTRiple5 = (n) => {\n  let a = []\n  for(let i = 1; i < n; i++){\n    a.push(i * i - i + 1)\n  }\n  let total = 0\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        for(let l = k+1; l < n; l++){\n          for(let m = l+1; m < n; m++){\n            for(let n = m+1; n < n; n++){\n              for(let o = n+1; o < n; o++){\n                total += a[i] + a[j] + a[k] + a[l] + a[m] + a[n] + a[o]\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return total % 3\n}\n\nconst getmaxTRiple6 = (n) => {\n  let a = []\n  for(let i = 1; i < n; i++){\n    a.push(i * i - i + 1)\n  }\n  let total = 0\n  for(let i = 0; i < n; i++){\n    for(let j = i+1; j < n; j++){\n      for(let k = j+1; k < n; k++){\n        for(let l = k+1; l < n; l++){\n          for(let m = l+1; m < n; m++){\n            for(let n = m+1; n < n; n++){\n              for(let o = n+1;"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet = [...new Set([...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                            ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                            ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"])]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]),\n                  ...new Set([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]),\n                  ...new Set([\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"])])\n  const res = planet.filter(\n    (planet) => (\n      planet.includes(planet1) && planet.includes(planet2)\n    )\n  )\n  return res.sort()\n}\n\nbf(\"Jupiter\", \"Saturn\")\nbf(\"Earth\", \"Mercury\")\nbf(\"Mercury\", \"Uranus\")\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n    if (lst.length <= 1) {\n        return lst;\n    }\n\n    const sortedList = [];\n\n    const [len, len2] = [lst.length, 1];\n    while (len > 1) {\n        const len3 = len2;\n        while (len3 > 1) {\n            if (len3 % 2 === 0) {\n                break;\n            }\n            len3--;\n        }\n        if (len3 === 1) {\n            sortedList.push(lst.splice(0, len3));\n            break;\n        }\n        if (len3 === 0) {\n            sortedList.push(lst.splice(0, len3));\n            break;\n        }\n        len--;\n        len2--;\n    }\n\n    return sortedList.concat(lst);\n};\n\nconsole.log(sorTedLIstSuM([\"aa\", \"a\", \"aaa\", \"ab\", \"a\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  }\n  if (isPrime(n)) {\n    return x;\n  }\n  return xOry(n - 1, x * x, y * y);\n}\n\nconst isPrime = n => {\n  const sqrtN = Math.sqrt(n);\n  for (let i = 2; i <= sqrtN; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst prime = () => {\n  const prime = [];\n  for (let i = 2; i <= 100; i++) {\n    if (isPrime(i)) {\n      prime.push(i);\n    }\n  }\n  return prime;\n}\n\nconst main = () => {\n  const p = prime();\n  const n = parseInt(process.argv[2]);\n  console.log(xOry(n, 1, 0));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  const ret = 0;\n  if (lst.length === 0) return ret;\n  const i = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2!== 0) {\n      ret += lst[i] * lst[i];\n    }\n    i++;\n  }\n  return ret;\n};\n\nmodule.exports = douBleTHeDifFerEnce;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  let diff = 0;\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i];\n    const guess = guess[i];\n    if (guess === score) {\n      continue;\n    } else {\n      diff = Math.abs(score - guess);\n    }\n    break;\n  }\n  return diff;\n};\n\nconst solution = comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\n\nconsole.log(solution);<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  if(extensions.length === 0) {\n    return class_name\n  }\n\n  const maxStrength = extensions.reduce((prev, curr) => {\n    const [, strength] = curr.split('.')\n    return strength > prev? strength : prev\n  }, 0)\n\n  const maxStrengthLength = extensions.find((curr) => {\n    const [, strength] = curr.split('.')\n    return strength > maxStrength\n  })\n\n  return `${class_name}.${maxStrengthLength.split('.').pop()}`\n}\n\nmodule.exports = strOngeStExtEnsIon\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    const strArr = a.split(\"\");\n    const bArr = b.split(\"\");\n    for (let i = 0; i < strArr.length; i++) {\n        const firstChar = strArr[i];\n        const nextChar = strArr[(i + 1) % strArr.length];\n        const rotations = [firstChar, nextChar].concat(rotate(firstChar, strArr));\n        for (let j = 0; j < bArr.length; j++) {\n            const bChar = bArr[j];\n            if (bArr.indexOf(bChar)!== -1) {\n                return true;\n            }\n            for (let k = 0; k < rotations.length; k++) {\n                const rot = rotations[k];\n                if (rot === bChar) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  if (num < 0) {\n    return [0, 0];\n  }\n  let count = 0;\n  while (num) {\n    count += num % 2;\n    num = num / 2;\n  }\n  return [count, count + (num? 1 : 0)];\n};\n\nexport { eveNOddcount };\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  if (number === 1) {\n    return 'I'\n  } else if (number === 2) {\n    return 'II'\n  } else if (number % 10 === 0 && number % 100!== 0) {\n    return `${number / 10}X`\n  } else if (number % 10 === 1 && number % 100!== 1) {\n    return `${number / 10}IX`\n  } else if (number % 10 === 2 && number % 100!== 2) {\n    return `${number / 10}V`\n  } else if (number % 10 === 3 && number % 100!== 3) {\n    return `${number / 10}IV`\n  } else if (number % 10 === 4 && number % 100!== 4) {\n    return `${number / 10}I`\n  } else if (number % 10 === 5 && number % 100!== 5) {\n    return `${number / 10}VX`\n  } else if (number % 10 === 6 && number % 100!== 6) {\n    return `${number / 10}VI`\n  } else if (number % 10 === 7 && number % 100!== 7) {\n    return `${number / 10}VII`\n  } else if (number % 10 === 8 && number % 100!== 8) {\n    return `${number / 10}VIII`\n  } else if (number % 10 === 9 && number % 100!== 9) {\n    return `${number / 10}IX`\n  } else {\n    return `${number}`\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  let isRightAngled = ((a * b) / c === 0 || ((a * c) / b) === 0 || ((b * c) / a) === 0)\n  return isRightAngled\n}\n\n/*\n  Given the lengths of the three sides of a triangle, return the length of\n  the longest side of the triangle.\n  Example:\n  triangleLength(3, 4, 5) == 5\n  triangleLength(1, 2, 3) == 3\n  */\nconst triangleLength = (a, b, c) => {\n  return Math.max(a, Math.max(b, c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the length of\n  the hypotenuse of the triangle.\n  Example:\n  hypotenuse(3, 4, 5) == 5\n  hypotenuse(1, 2, 3) == 3\n  */\nconst hypotenuse = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the area of\n  the triangle.\n  Example:\n  area(3, 4, 5) == 12\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return triangleLength(a, b, c) * 0.5\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of\n  the triangle.\n  Example:\n  perimeter(3, 4, 5) == 10\n  perimeter(1, 2, 3) == 6\n  */\nconst perimeter = (a, b, c) => {\n  return triangleLength(a, b, c) + hypotenuse(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of\n  the triangle.\n  Example:\n  area(3, 4, 5) == 12\n  area(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return area(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the perimeter of\n  the triangle.\n  Example:\n  perimeter(3, 4, 5) == 10\n  perimeter(1, 2, 3) == 6\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return perimeter(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of\n  the triangle.\n  Example:\n  area(3, 4, 5) == 12\n  area(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return perimeter(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the volume of\n  the triangle.\n  Example:\n  volume(3, 4, 5) == 30\n  volume(1, 2, 3) == 0\n  */\nconst volume = (a, b, c) => {\n  return area(a, b, c) * hypotenuse(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the volume of\n  the triangle.\n  Example:\n  volume(3, 4, 5) == 30\n  volume(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return area(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the volume of\n  the triangle.\n  Example:\n  volume(3, 4, 5) == 30\n  volume(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return perimeter(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the volume of\n  the triangle.\n  Example:\n  volume(3, 4, 5) == 30\n  volume(1, 2, 3) == 0\n  */\nconst volumeOfTriangle = (a, b, c) => {\n  return volume(a, b, c)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let max = 0\n  let maxLength = 0\n\n  for (let i = 0; i < words.length; i++) {\n    let len = words[i].length\n    if (max < len) {\n      max = len\n      maxLength = i\n    }\n  }\n  return words[maxLength]\n}\n\n// console.log(finDMax([\"name\", \"of\", \"string\"]))\n// console.log(finDMax([\"name\", \"enam\", \"game\"]))\n// console.log(finDMax([\"aaaaaaa\", \"bb\", \"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let count = 0;\n  \n  while (number >= need) {\n    count += number;\n    number -= need;\n  }\n  \n  return [count, remaining];\n}\n\nconst count = (number, remaining) => {\n  if (number === 0) {\n    return remaining;\n  }\n  \n  return count(number - 1, remaining);\n}\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let operatorList = operator.slice(0);\n  let operandList = operand.slice(0);\n  let result = 0;\n\n  for (let i = 0; i < operatorList.length; i++) {\n    result = operandList[i];\n    for (let j = i + 1; j < operatorList.length; j++) {\n      result = operatorList[i] * operandList[j] + result;\n    }\n  }\n\n  return result;\n};\n\nconst doALgebRaTest = [\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],\n  ['+', ['1', '2', '3'], '4'],"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  return s.split('').reverse().join('');\n}\n\nconst solVe2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      result += (s[i].toUpperCase() || s[i].toLowerCase());\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconst solVe3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      result += (s[i].toUpperCase() || s[i].toLowerCase());\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconst solVe4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      result += (s[i].toUpperCase() || s[i].toLowerCase());\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solVe('1234'));\nconsole.log(solVe('ab'));\nconsole.log(solVe('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given an array of strings 'text', return its md5 hash equivalent string.\n  If 'text' is an empty array, return null.\n\n  >>> strIngTOMd5(['Hello', 'world']) == 'e1d5d4f2f3bacd9dcd6a30a3b1e59b7f'\n  */\nconst strIngTOMd5 = (text) => {\n  const hash = crypto.createHash('md5');\n  text.forEach(t => hash.update(t));\n  return hash.digest('hex');\n};\n\n/*\n  Given a hash 'hash' (which is hex string), return its md5 hash equivalent\n  string. If 'hash' is an empty string, return null.\n\n  >>> strIngTOMd5('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst strIngTOMd5 = (hash) => {\n  const hashHex = new Buffer(hash, 'hex');\n  const hashBuf = crypto.createHash('md5');\n  hashBuf.update(hashHex);\n  return hashBuf.digest('hex');\n};\n\n/*\n  Given a buffer 'buffer' (which is hex string), return its md5 hash\n  equivalent string. If 'buffer' is an empty string, return null.\n\n  >>> strIngTOMd5(new Buffer('3e25960a79dbc69b674cd4ec67a72c62', 'hex')) == 'Hello world'\n  */\nconst strIngTOMd5 = (buffer) => {\n  const hashBuf = crypto.createHash('md5');\n  hashBuf.update(buffer);\n  return hashBuf.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. If 'text' is\n  an empty string, return null.\n\n  >>> strIngTOMd5('') == 'd41d8cd98f00b204e9800998ecf8427e'\n  */\nconst strIngTOMd5 = (text) => {\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  strIngTOMd5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const res = []\n  for (let i = a; i <= b; i++) {\n    const n = i\n    if (n % 2 === 0) {\n      res.push(n)\n    }\n  }\n  return res\n}\n\nexport default genEratEInteGerS\n<|endoftext|>"}
