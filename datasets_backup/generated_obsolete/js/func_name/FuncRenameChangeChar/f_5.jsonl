{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n    let found = false;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                found = true;\n            }\n        }\n    }\n    return found;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntA = (numbers, threshold) => {\n    let found = false;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                found = true;\n            }\n        }\n    }\n    return found;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntA([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS2 = (numbers, threshold) => {\n    let found = false;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                found = true;\n            }\n        }\n    }\n    return found;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS3 = (numbers, threshold) => {\n    let found = false;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                found = true;\n            }\n        }\n    }\n    return found;\n};\n\nconst hasclosEElemEntA2 = (numbers, threshold) => {\n    let found = false;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                found = true;\n            }\n        }\n    }\n    return found;\n};\n\nconst hasclosEElemEntS4 = (numbers, threshold) => {\n    let found = false;\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                found = true;\n            }\n        }\n    }\n    return found;\n};\n\nexport { hasclosEElemEntA, hasclosEElemEntS, hasclosEElemEntA2, hasclosEElemEntS2, hasclosEElemEntS3, hasclosEElemEntS4 };\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  let result = [];\n  const stack = [];\n  paren_string.split('').forEach( (char) => {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      while (stack.length > 0 && stack[stack.length - 1]!== '(') {\n        result.push(stack.pop());\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Input: string containing a single number\n  Your goal is to split the string into two pieces, one containing the digits and the other containing the rest\n  of the string.\n  Ignore any spaces in the input string.\n  >>> splitSingleNumber('3')\n  ['3']\n  >>> splitSingleNumber(' 3 ')\n  ['3']\n  >>> splitSingleNumber(' 3')\n  ['3']\n  >>> splitSingleNumber('3 ')\n  ['3']\n  >>> splitSingleNumber('3 a')\n  ['3', 'a']\n  >>> splitSingleNumber('3 a b')\n  ['3', 'a', 'b']\n  */\nconst splitSingleNumber = (single_number) => {\n  let result = [];\n  const tokens = single_number.split('');\n  let token_index = 0;\n  while (token_index < tokens.length) {\n    const token = tokens[token_index];\n    if (token.match(/\\d/)) {\n      result.push(token);\n    } else {\n      break;\n    }\n    token_index++;\n  }\n  return result;\n};\n\n/*\n  Input: list of strings\n  Your goal is to concatenate all strings in the list together and return the resulting string.\n  Ignore any spaces in the input string.\n  >>> concatStrings(['a', 'b', 'c'])\n  'abc'\n  >>> concatStrings(['a','', 'b', 'c'])\n  'abc'\n  >>> concatStrings(['a','', 'b', 'c',''])\n  'abc'\n  >>> concatStrings([' ', 'a', 'b', 'c'])\n  'abc'\n  >>> concatStrings([' ', 'a','', 'b','', 'c'])\n  'abc'\n  */\nconst concatStrings = (strings) => {\n  return strings.join('');\n};\n\n/*\n  Input: list of strings\n  Your goal is to determine if any of the strings in the list contains a substring that is not\n  contained within the other strings in the list.\n  Ignore any spaces in the input string.\n  >>> containsSubstring(['a', 'b', 'c'], ['a', 'b'])\n  False\n  >>> containsSubstring(['a', 'b', 'c'], ['a', 'c'])\n  True\n  >>> containsSubstring(['a', 'b', 'c'], ['a', 'b', 'c'])\n  False\n  >>> containsSubstring(['a', 'b', 'c'], ['b', 'c'])\n  False\n  >>> containsSubstring(['a', 'b', 'c'], ['a', 'b', 'd'])\n  True\n  >>> containsSubstring(['a', 'b', 'c'], ['a', 'd', 'c'])\n  False\n  >>> containsSubstring(['a', 'b', 'c'], ['a', 'd', 'e'])\n  True\n  */\nconst containsSubstring = (strings, substring) => {\n  let found = false;\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.includes(substring)) {\n      found = true;\n    }\n  }\n  return found;\n};\n\n/*\n  Input: list of strings\n  Your goal is to determine if any of the strings in the list contains a substring that is not\n  contained within the other strings in the list, but occurs at the same position.\n  Ignore any spaces in the input string.\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'b'])\n  False\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'c'])\n  True\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'b', 'c'])\n  False\n  >>> containsSubstringPos(['a', 'b', 'c'], ['b', 'c'])\n  False\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'b', 'd'])\n  True\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'd', 'c'])\n  False\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'd', 'e'])\n  True\n  */\nconst containsSubstringPos = (strings, substring) => {\n  let found = false;\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.includes(substring, i)) {\n      found = true;\n    }\n  }\n  return found;\n};\n\n/*\n  Input: list of strings\n  Your goal is to determine if any of the strings in the list contains a substring that is not\n  contained within the other strings in the list, but occurs at a different position.\n  Ignore any spaces in the input string.\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'b'])\n  False\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'c'])\n  True\n  >>> containsSubstringPos(['a', 'b', 'c'], ['a', 'b', 'c'])\n  "}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  if (decimalPart >= 0.5) {\n    integerPart++;\n  }\n  return decimalPart;\n};\n\nexport { truNcatENumbEr };\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n    const balance = 0;\n    const balanceIncrement = 1;\n    let previousValue = 0;\n    for (const operation of operations) {\n        if (operation === -1) {\n            balance -= balanceIncrement;\n        } else if (operation === 1) {\n            balance += balanceIncrement;\n        }\n        if (balance < 0) {\n            return true;\n        }\n        previousValue = balance;\n    }\n    return false;\n};\n\nmodule.exports = belOwZeRo;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const numbersLength = numbers.length;\n  const mean = _.mean(numbers);\n  return _.map(numbers, (x) => Math.abs(x - mean));\n};\n\n/**\n  Calculate Mean Absolute Deviation for a given list of input numbers.\n  This is a function instead of a function, because in some cases we\n  may not have the whole list in memory at the same time.\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nexport default (numbers) => {\n  const numbersLength = numbers.length;\n  if (numbersLength <= 1) {\n    return numbers[0];\n  }\n  const mean = _.mean(numbers);\n  const deviations = _.map(numbers, (x) => Math.abs(x - mean));\n  return _.reduce(deviations, (acc, x) => acc + x, 0) / numbersLength;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const len = numbers.length - 1\n  const result = []\n  let cur = 0\n  let i = 0\n  while (i < len) {\n    result.push(numbers[cur++])\n    result.push(delimeter)\n    i++\n  }\n  result.push(numbers[cur])\n  return result\n}\n\n/* Return a list of integers that sum to 'target' */\nconst sumInts = (target, nums) => {\n  const result = []\n  const total = 0\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    total += num\n    if (total === target) {\n      result.push(num)\n    }\n  }\n  return result\n}\n\n/* Return a list of pairs of integers that sum to 'target' */\nconst sumPairs = (target, nums) => {\n  const result = []\n  const total = 0\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    if (i === nums.length - 1) {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i]])\n      }\n    } else {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i + 1]])\n      }\n    }\n  }\n  return result\n}\n\n/* Return a list of triplets of integers that sum to 'target' */\nconst sumTriplets = (target, nums) => {\n  const result = []\n  const total = 0\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    if (i === nums.length - 1) {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i], nums[i + 1]])\n      }\n    } else {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i + 1], nums[i + 2]])\n      }\n    }\n  }\n  return result\n}\n\n/* Return a list of quadruplets of integers that sum to 'target' */\nconst sumQuadruplets = (target, nums) => {\n  const result = []\n  const total = 0\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    if (i === nums.length - 1) {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i], nums[i + 1], nums[i + 2]])\n      }\n    } else {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i + 1], nums[i + 2], nums[i + 3]])\n      }\n    }\n  }\n  return result\n}\n\n/* Return a list of quintuplets of integers that sum to 'target' */\nconst sumQuintuplets = (target, nums) => {\n  const result = []\n  const total = 0\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    if (i === nums.length - 1) {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i], nums[i + 1], nums[i + 2], nums[i + 3]])\n      }\n    } else {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i + 1], nums[i + 2], nums[i + 3], nums[i + 4]])\n      }\n    }\n  }\n  return result\n}\n\n/* Return a list of sextuplets of integers that sum to 'target' */\nconst sumSextuplets = (target, nums) => {\n  const result = []\n  const total = 0\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    if (i === nums.length - 1) {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i], nums[i + 1], nums[i + 2], nums[i + 3], nums[i + 4]])\n      }\n    } else {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i + 1], nums[i + 2], nums[i + 3], nums[i + 4], nums[i + 5]])\n      }\n    }\n  }\n  return result\n}\n\n/* Return a list of septuplets of integers that sum to 'target' */\nconst sumSeptuplets = (target, nums) => {\n  const result = []\n  const total = 0\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    if (i === nums.length - 1) {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i], nums[i + 1], nums[i + 2], nums[i + 3], nums[i + 4], nums[i + 5]])\n      }\n    } else {\n      total += num\n      if (total === target) {\n        result.push([num, nums[i + 1], nums[i + 2], nums[i + 3], nums[i + 4], nums[i + 5], nums[i + 6]])\n      }\n    }\n  }\n  return result\n}\n\n/* Return a list of octuplets of integers that sum to 'target' */\nconst sumOctuplets = (target, nums) => {\n  "}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const stack = []\n  let i = 0\n  let depth = 0\n  for (; i < paren_string.length; i++) {\n    if (paren_string[i] === ')') {\n      stack.push(depth)\n      depth = 0\n    } else if (paren_string[i] === '(') {\n      depth++\n      stack.push(depth)\n    }\n  }\n  stack.push(depth)\n  return stack\n}\n\nexport default parSeNeStedPAreNs\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const result = [];\n  const sub = substring.split(' ');\n  strings.forEach(str => {\n    let t = str.toLowerCase();\n    sub.forEach(s => {\n      if (t.includes(s)) {\n        result.push(str);\n      }\n    });\n  });\n  return result;\n};\n\n// Function to convert string to lower case\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n// Function to get random number\nconst getRandomNumber = () => {\n  return Math.floor(Math.random() * 9999);\n};\n\n// Function to get timestamp\nconst getTimestamp = () => {\n  return Math.floor(Date.now() / 1000);\n};\n\n// Function to create a string with a random length of the given length\nconst getRandomString = (length) => {\n  let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomStr = '';\n  for (let i = 0; i < length; i++) {\n    randomStr += chars[getRandomNumber()];\n  }\n  return randomStr;\n};\n\n// Function to check if a string is a palindrome\nconst isPalindrome = (string) => {\n  let str = string.toLowerCase();\n  return str === str.split('').reverse().join('');\n};\n\n// Function to get the number of lower case letters in a string\nconst getNumLowerLetters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).toLowerCase() === string.charAt(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Function to get the number of upper case letters in a string\nconst getNumUpperLetters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).toUpperCase() === string.charAt(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Function to check if a string contains any of the given substrings\nconst containsSubStrings = (string, substrings) => {\n  return substrings.some(sub => string.includes(sub));\n};\n\n// Function to get a substring of a given string\nconst getSubStrings = (string, length) => {\n  let result = [];\n  for (let i = 0; i < length; i++) {\n    result.push(string.charAt(i));\n  }\n  return result;\n};\n\n// Function to check if a string contains any of the given substrings\nconst containsSubStrings2 = (string, substrings) => {\n  let result = false;\n  for (let i = 0; i < substrings.length; i++) {\n    result = string.includes(substrings[i]);\n    if (result) {\n      break;\n    }\n  }\n  return result;\n};\n\n// Function to check if a string contains any of the given substrings\nconst containsSubStrings3 = (string, substrings) => {\n  let result = false;\n  for (let i = 0; i < substrings.length; i++) {\n    result = string.indexOf(substrings[i]) >= 0;\n    if (result) {\n      break;\n    }\n  }\n  return result;\n};\n\n// Function to check if a string contains any of the given substrings\nconst containsSubStrings4 = (string, substrings) => {\n  let result = false;\n  for (let i = 0; i < substrings.length; i++) {\n    result = string.includes(substrings[i]);\n    if (result) {\n      break;\n    }\n  }\n  return result;\n};\n\n// Function to check if a string contains any of the given substrings\nconst containsSubStrings5 = (string, substrings) => {\n  let result = false;\n  for (let i = 0; i < substrings.length; i++) {\n    result = string.indexOf(substrings[i]) >= 0;\n    if (result) {\n      break;\n    }\n  }\n  return result;\n};\n\n// Function to check if a string contains any of the given substrings\nconst containsSubStrings6 = (string, substrings) => {\n  let result = false;\n  for (let i = 0; i < substrings.length; i++) {\n    result = string.includes(substrings[i]);\n    if (result) {\n      break;\n    }\n  }\n  return result;\n};\n\n// Function to check if a string contains any of the given substrings\nconst containsSubStrings7 = (string, substrings) => {\n  let result = false;\n  for (let i = 0; i < substrings.length; i++) {\n    result = string.indexOf(substrings[i]) >= 0;\n    if (result) {\n      break;\n    }\n  }\n  return result;\n};\n\n// Function to check if a string contains any of the given substrings\nconst containsSubStrings8 = (string, substrings) => {\n  let result = false;\n  for (let i = 0; i < substrings.length; i++) {\n    result = string.includes(substrings[i]);\n    if (result) {\n      break;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n\n  // sum all the numbers\n  numbers.forEach((number) => {\n    sum += number\n  })\n\n  // multiply all the numbers\n  numbers.forEach((number) => {\n    product *= number\n  })\n\n  return sum, product\n}\n\n/*\n  For a given list of strings, return a tuple consisting of a sum and a product of all the strings in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctStr([])\n  (0, 1)\n  >>> sumprodUctStr([\"a\", \"b\", \"c\", \"d\"])\n  ('abc', 'abcd')\n  */\nconst sumprodUctStr = (strings, string) => {\n  let sum = 0\n  let product = 1\n\n  // sum all the strings\n  strings.forEach((string) => {\n    sum += string\n  })\n\n  // multiply all the strings\n  strings.forEach((string) => {\n    product *= string\n  })\n\n  return sum, product\n}\n\n/*\n  Given a list of lists, return a tuple consisting of a sum and a product of all the lists in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctLst([[1, 2, 3, 4], [5, 6, 7, 8]])\n  ([10, 24], [15, 64])\n  */\nconst sumprodUctLst = (lists, list) => {\n  let sum = 0\n  let product = 1\n\n  // sum all the lists\n  lists.forEach((list) => {\n    sum += list\n  })\n\n  // multiply all the lists\n  lists.forEach((list) => {\n    product *= list\n  })\n\n  return sum, product\n}\n\n/*\n  Given a list of tuples, return a tuple consisting of a sum and a product of all the tuples in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctTup([(1, 2), (3, 4), (5, 6)])\n  (15, 120)\n  */\nconst sumprodUctTup = (tuples, tuple) => {\n  let sum = 0\n  let product = 1\n\n  // sum all the tuples\n  tuples.forEach((tuple) => {\n    sum += tuple\n  })\n\n  // multiply all the tuples\n  tuples.forEach((tuple) => {\n    product *= tuple\n  })\n\n  return sum, product\n}\n\n/*\n  Given a list of dictionaries, return a tuple consisting of a sum and a product of all the dictionaries in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctDct([{a: 1, b: 2}, {a: 3, b: 4}, {a: 5, b: 6}])\n  ({'a': 15, 'b': 120}, {'a': 15, 'b': 120})\n  */\nconst sumprodUctDct = (dictionaries, dictionary) => {\n  let sum = 0\n  let product = 1\n\n  // sum all the dictionaries\n  dictionaries.forEach((dictionary) => {\n    for (let key in dictionary) {\n      if (dictionary.hasOwnProperty(key)) {\n        sum += dictionary[key]\n      }\n    }\n  })\n\n  // multiply all the dictionaries\n  dictionaries.forEach((dictionary) => {\n    for (let key in dictionary) {\n      if (dictionary.hasOwnProperty(key)) {\n        product *= dictionary[key]\n      }\n    }\n  })\n\n  return sum, product\n}\n\n/*\n  Given a list of lists of dictionaries, return a tuple consisting of a sum and a product of all the lists in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctLstDct([[{a: 1, b: 2}, {a: 3, b: 4}, {a: 5, b: 6}], [{a: 7, b: 8}, {a: 9, b: 10}, {a: 11, b: 12}]])\n  ([{'a': 15, 'b': 120}, {'a': 15, 'b': 120}], [{'a': 15, 'b': 120}, {'a': 15, 'b': 120}])\n  */\nconst sumprodUctLstDct = (lists, list) => {\n  let sum = 0\n  let product = 1\n\n  // sum all the lists\n  lists.forEach((list) => {\n    // sum all the dictionaries\n    list.forEach((dictionary) => {\n      for (let key in dictionary) {\n        if (dictionary.hasOwnProperty(key)) {\n          sum += dictionary[key]\n        }\n      }\n    })\n  })\n\n  // multiply all the lists\n  lists.forEach((list) => {\n    // multiply all the dictionaries\n    list.forEach((dictionary) => {\n      for (let key in dictionary) {\n        if (dictionary.hasOwnProperty(key)) {\n          product *= dictionary[key]\n        }\n      }\n    })\n  })\n\n  return sum, product\n}\n\n/*\n  Given a list of tuples of dictionaries, return a tuple consisting of a sum and a product of all the tuples in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUctTupDct([({a: 1, b: 2}, {a: 3, b: 4}), ({a: 5, b: 6}, {a: 7, b: 8})])\n  ({'a': 15, 'b': 120}, {'a': 15, 'b': 120})\n  */\nconst sumprodUctTupDct ="}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n    return (\n        numbers.slice().reverse().reduce((a, b) => {\n            if (a.length === 0) {\n                return [b];\n            }\n            const l = a.length;\n            const max = a.slice(l - 1);\n            const result = [b].concat(max);\n            return result.reverse();\n        })\n    );\n};\n\nmodule.exports = rolLingmax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let result = '';\n  for(let i = 0; i < string.length; i++) {\n    let prefix = string.slice(0, i);\n    let suffix = string.slice(i + 1);\n    if(isPAlinDrome(prefix + suffix)) {\n      result = prefix + suffix;\n      break;\n    }\n  }\n  return result;\n}\n\n/* Print a string in a way that makes it look like a palindrome.\n  >>> printPalindrome('cat')\n  'cat'\n  >>> printPalindrome('cata')\n  'cata'\n  >>> printPalindrome('catat')\n  'cata'\n  >>> printPalindrome('ca')\n  'ca'\n  >>> printPalindrome('c')\n  'c'\n  */\nconst printPalindrome = (string) => {\n  let output = '';\n  for(let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if(isPAlinDrome(char + string.slice(0, i + 1))) {\n      output += char;\n    } else {\n      output +='';\n    }\n  }\n  return output;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cata'\n  >>> findLongestPalindrome('catat')\n  'catat'\n  >>> findLongestPalindrome('ca')\n  'ca'\n  >>> findLongestPalindrome('c')\n  'c'\n  */\nconst findLongestPalindrome = (string) => {\n  let result = '';\n  for(let i = 0; i < string.length; i++) {\n    let prefix = string.slice(0, i);\n    let suffix = string.slice(i + 1);\n    if(isPAlinDrome(prefix + suffix)) {\n      if(string.length - i > result.length) {\n        result = prefix + suffix;\n      }\n    }\n  }\n  return result;\n}\n\n/* Print a string in a way that makes it look like a palindrome.\n  >>> printLongestPalindrome('cat')\n  'cat'\n  >>> printLongestPalindrome('cata')\n  'cata'\n  >>> printLongestPalindrome('catat')\n  'catat'\n  >>> printLongestPalindrome('ca')\n  'ca'\n  >>> printLongestPalindrome('c')\n  'c'\n  */\nconst printLongestPalindrome = (string) => {\n  let output = '';\n  for(let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if(isPAlinDrome(char + string.slice(0, i + 1))) {\n      output += char;\n    } else {\n      output +='';\n    }\n  }\n  return output;\n}\n\n/* Test the palindrome code */\nconst test = () => {\n  let palindrome = 'aab';\n  let result = printPalindrome(palindrome);\n  console.log(result);\n  console.log(printLongestPalindrome(palindrome));\n}\n\n/* Test the palindrome code */\nconst test2 = () => {\n  let palindrome = 'ab';\n  let result = printPalindrome(palindrome);\n  console.log(result);\n  console.log(printLongestPalindrome(palindrome));\n}\n\n/* Test the palindrome code */\nconst test3 = () => {\n  let palindrome = 'ab';\n  let result = findLongestPalindrome(palindrome);\n  console.log(result);\n  console.log(findLongestPalindrome(palindrome));\n}\n\n/* Test the palindrome code */\nconst test4 = () => {\n  let palindrome = 'cac';\n  let result = printPalindrome(palindrome);\n  console.log(result);\n  console.log(printLongestPalindrome(palindrome));\n}\n\n/* Test the palindrome code */\nconst test5 = () => {\n  let palindrome = 'cac';\n  let result = findLongestPalindrome(palindrome);\n  console.log(result);\n  console.log(findLongestPalindrome(palindrome));\n}\n\n/* Run the tests */\ntest();\ntest2();\ntest3();\ntest4();\ntest5();\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n    let str = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] == '1') {\n            str += '1';\n        } else if (b[i] == '1') {\n            str += '0';\n        } else {\n            str += '1';\n        }\n    }\n    return str;\n};\n\n/*\n  Perform a binary AND on two strings a and b and return result as a string.\n  >>> strAnd('010', '110')\n  '00'\n  >>> strAnd('01', '110')\n  '00'\n  >>> strAnd('010', '001')\n  '00'\n  */\nconst strAnd = (a, b) => {\n    let str = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] == '1' && b[i] == '1') {\n            str += '1';\n        } else {\n            str += '0';\n        }\n    }\n    return str;\n};\n\n/*\n  Perform a binary OR on two strings a and b and return result as a string.\n  >>> strOr('010', '110')\n  '10'\n  >>> strOr('01', '110')\n  '10'\n  >>> strOr('010', '001')\n  '10'\n  */\nconst strOr = (a, b) => {\n    let str = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] == '1' || b[i] == '1') {\n            str += '1';\n        } else {\n            str += '0';\n        }\n    }\n    return str;\n};\n\n/*\n  Print all combinations of strings\n  >>> printCombinations(['01', '10'])\n  0\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n  10\n  11\n  12\n  13\n  14\n  15\n  16\n  17\n  18\n  19\n  20\n  21\n  22\n  23\n  24\n  25\n  26\n  27\n  28\n  29\n  30\n  31\n  32\n  33\n  34\n  35\n  36\n  37\n  38\n  39\n  40\n  41\n  42\n  43\n  44\n  45\n  46\n  47\n  48\n  49\n  50\n  51\n  52\n  53\n  54\n  55\n  56\n  57\n  58\n  59\n  60\n  61\n  62\n  63\n  64\n  65\n  66\n  67\n  68\n  69\n  70\n  71\n  72\n  73\n  74\n  75\n  76\n  77\n  78\n  79\n  80\n  81\n  82\n  83\n  84\n  85\n  86\n  87\n  88\n  89\n  90\n  91\n  92\n  93\n  94\n  95\n  96\n  97\n  98\n  99\n  100\n  101\n  102\n  103\n  104\n  105\n  106\n  107\n  108\n  109\n  110\n  111\n  112\n  113\n  114\n  115\n  116\n  117\n  118\n  119\n  120\n  121\n  122\n  123\n  124\n  125\n  126\n  127\n  128\n  129\n  130\n  131\n  132\n  133\n  134\n  135\n  136\n  137\n  138\n  139\n  140\n  141\n  142\n  143\n  144\n  145\n  146\n  147\n  148\n  149\n  150\n  151\n  152\n  153\n  154\n  155\n  156\n  157\n  158\n  159\n  160\n  161\n  162\n  163\n  164\n  165\n  166\n  167\n  168\n  169\n  170\n  171\n  172\n  173\n  174\n  175\n  176\n  177\n  178\n  179\n  180\n  181\n  182\n  183\n  184\n  185\n  186\n  187\n  188\n  189\n  190\n  191\n  192\n  193\n  194\n  195\n  196\n  197\n  198\n  199\n  200\n  201\n  202\n  203\n  204\n  205\n  206\n  207\n  208\n  209\n  210\n  211\n  212\n  213\n  214\n  215\n  216\n  217\n  218\n  219\n  220\n  221\n  222\n  223\n  224\n  225\n  226\n  227\n  228\n  229\n  230\n  231\n  232\n  233\n  234\n  235\n  236\n  237\n  238\n  239\n  240\n  241\n  242\n  243\n  244\n  245\n  246\n  247\n  248\n  249\n  250\n  251\n  252\n  253\n  254\n  255\n  256\n  257\n  258\n  259\n  260\n  261\n  262\n  263\n  264\n  265\n  266\n  267\n  268\n  269\n  270\n  271\n  272\n  273\n  274\n  275\n  276\n  277\n  278\n  279\n  280\n  281\n  282\n  283\n  284\n  285\n  286\n  287\n  288\n  289\n  290\n  291\n  292\n  293\n  294\n  295\n  296\n  297\n  298\n  299\n  300\n  301\n  302\n  303\n  304\n  305\n  306\n  307\n  308\n  309\n  310\n  311\n  312\n  313\n  314\n  315\n  316\n  317\n  318\n  319\n  320\n  321\n  322\n  323\n  324\n  325\n  326\n  327\n  328\n  329\n  330\n  331\n  332\n  333\n  334\n  335\n  336\n  337\n  338\n  339"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  let maxLen = 0\n  let longest = ''\n  strings.forEach((s) => {\n    const l = s.length\n    if (l > maxLen) {\n      maxLen = l\n      longest = s\n    }\n  })\n  return longest\n}\n\nmodule.exports = lonGest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  const gcd = a % b\n  const x = a\n  const y = b\n  while (y) {\n    x = x - y\n    y = x % y\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR2 = (a, b) => {\n  const gcd = a\n  while (b) {\n    a = a % b\n    b = b % a\n  }\n  return a\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR3 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x - y\n    y = y % x\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR4 = (a, b) => {\n  const gcd = a\n  const x = b\n  while (x) {\n    a = a % x\n    b = b % x\n  }\n  return a\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR5 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x - y\n    y = y % x\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR6 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x - y\n    y = y % x\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR7 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x - y\n    y = y % x\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR8 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x - y\n    y = y % x\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR9 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x - y\n    y = y % x\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR10 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x - y\n    y = y % x\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR11 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x - y\n    y = y % x\n  }\n  return x\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR12 = (a, b) => {\n  const gcd = a\n  const x = b\n  const y = a\n  while (y) {\n    x = x -"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  let prefixes = []\n  let curPrefix = ''\n  for (let i = 0; i < string.length; i++) {\n    curPrefix += string[i]\n    if (i === string.length - 1) {\n      prefixes.push(curPrefix)\n    } else {\n      curPrefix = curPrefix.substr(1)\n    }\n  }\n  return prefixes\n}\n\n// Return list of all suffixes from longest to shortest of the input string\n// >>> allsuffIxes('abc')\n// ['abc', 'ab', 'c', 'b', 'a']\nconst allsuffIxes = (string) => {\n  let suffixes = []\n  let curSuffix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    curSuffix += string[i]\n    if (i === 0) {\n      suffixes.push(curSuffix)\n    } else {\n      curSuffix = curSuffix.substr(0, curSuffix.length - 1)\n    }\n  }\n  return suffixes\n}\n\n// Return list of all prefixes from shortest to longest of the input string\n// >>> allprefIxes('abc')\n// ['a', 'ab', 'abc']\nconst allsuffIxes = (string) => {\n  let suffixes = []\n  let curSuffix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    curSuffix += string[i]\n    if (i === 0) {\n      suffixes.push(curSuffix)\n    } else {\n      curSuffix = curSuffix.substr(0, curSuffix.length - 1)\n    }\n  }\n  return suffixes\n}\n\n// Return list of all prefixes from shortest to longest of the input string\n// >>> allprefIxes('abc')\n// ['a', 'ab', 'abc']\nconst allsuffIxes = (string) => {\n  let prefixes = []\n  let curPrefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    curPrefix += string[i]\n    if (i === 0) {\n      prefixes.push(curPrefix)\n    } else {\n      curPrefix = curPrefix.substr(0, curPrefix.length - 1)\n    }\n  }\n  return prefixes\n}\n\n// Given a string, return a list of strings with all prefixes, e.g.\n// ['abc', 'ab', 'a', 'ba', 'abc', 'abcd', 'a', 'b', 'c', 'd', 'e']\n// >>> allprefIxes('abc')\n// ['a', 'ab', 'abc']\nconst allprefIxes = (string) => {\n  let prefixes = []\n  let curPrefix = ''\n  for (let i = 0; i < string.length; i++) {\n    curPrefix += string[i]\n    if (i === string.length - 1) {\n      prefixes.push(curPrefix)\n    } else {\n      curPrefix = curPrefix.substr(1)\n    }\n  }\n  return prefixes\n}\n\n// Given a string, return a list of strings with all suffixes, e.g.\n// ['abc', 'ab', 'c', 'b', 'a', 'abc', 'abcd', 'a', 'b', 'c', 'd', 'e']\n// >>> allsuffIxes('abc')\n// ['abc', 'ab', 'abc']\nconst allsuffIxes = (string) => {\n  let suffixes = []\n  let curSuffix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    curSuffix += string[i]\n    if (i === 0) {\n      suffixes.push(curSuffix)\n    } else {\n      curSuffix = curSuffix.substr(0, curSuffix.length - 1)\n    }\n  }\n  return suffixes\n}\n\n// Given a string, return a list of strings with all prefixes, e.g.\n// ['abc', 'ab', 'a', 'ba', 'abc', 'abcd', 'a', 'b', 'c', 'd', 'e']\n// >>> allprefIxes('abc')\n// ['a', 'ab', 'abc']\nconst allsuffIxes = (string) => {\n  let prefixes = []\n  let curPrefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    curPrefix += string[i]\n    if (i === 0) {\n      prefixes.push(curPrefix)\n    } else {\n      curPrefix = curPrefix.substr(1)\n    }\n  }\n  return prefixes\n}\n\n// Given a string, return a list of strings with all suffixes, e.g.\n// ['abc', 'ab', 'c', 'b', 'a', 'abc', 'abcd', 'a', 'b', 'c', 'd', 'e']\n// >>> allsuffIxes('abc')\n// ['abc', 'ab', 'abc']\nconst allsuffIxes = (string) => {\n  let suffixes = []\n  let curSuffix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    curSuffix += string[i]\n    if (i === 0) {\n      suffixes.push(curSuffix)\n    } else {\n      curSuffix = curSuffix.substr(0, curSuffix.length - 1)\n    }\n  }\n  return suffixes\n}\n\n// Given a string, return a list of strings with all prefixes, e.g.\n// ['abc', 'ab', 'a', 'ba', 'abc', 'abcd', 'a', 'b', 'c', 'd', 'e']\n// >>> allprefIxes('abc')\n// ['a', 'ab', 'abc']\nconst allsuffIxes = (string) => {\n  let"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIntSQuenCe = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIntSQuenCe(0)\n  '0'\n  >>> strIntSQuenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strLongSQuenCe = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strLongSQuenCe(0)\n  '0'\n  >>> strLongSQuenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strLongCe = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strLongCe(0)\n  '0'\n  >>> strLongCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIntCe = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIntCe(0)\n  '0'\n  >>> strIntCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIntR = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIntR(0)\n  '0'\n  >>> strIntR(5)\n  '0 1 2 3 4 5'\n  */\nconst strInt = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strInt(0)\n  '0'\n  >>> strInt(5)\n  '0 1 2 3 4 5'\n  */\nconst strLongR = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strLongR(0)\n  '0'\n  >>> strLongR(5)\n  '0 1 2 3 4 5'\n  */\nconst strLong = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strLong(0)\n  '0'\n  >>> strLong(5)\n  '0 1 2 3 4 5'\n  */\nconst strSQuenCe = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strSQuenCe(0)\n  '0'\n  >>> strSQuenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst str = (n) => {\n    let i = 0;\n    return String(n).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const stringLength = string.length;\n  if (stringLength === 0) {\n    return 0;\n  }\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < stringLength) {\n    const char = string[i];\n    if (char.toUpperCase()!== char.toLowerCase()) {\n      count++;\n    }\n    i++;\n    while (i < stringLength && string[i].toUpperCase() === string[i].toLowerCase()) {\n      i++;\n    }\n    j++;\n  }\n  return count;\n};\n\nexport default couNtDiStincTChAractErs;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const beat = 1\n  const beat_num = music_string.split('').map(function (s) {\n    return parseInt(s);\n  }).filter(function (n) {\n    return n > 0;\n  }).reduce((acc, n) => acc + n, 0)\n  const beats = beat_num / beat;\n  return beats;\n};\n\nmodule.exports = parSeMuSic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i] === substring[j]) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nmodule.exports = howmanytimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const sortedNumbers = []\n\n  numbersArr.sort((a, b) => {\n    if (parseInt(a) > parseInt(b)) {\n      return 1\n    } else if (parseInt(a) < parseInt(b)) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n\n  for (let i = 0; i < numbersArr.length; i += 1) {\n    sortedNumbers.push(numbersArr[i])\n  }\n\n  return sortedNumbers.join(' ')\n}\n\n/*\n  >>> sorTNumBers('two one')\n  'one two'\n  >>> sorTNumBers('one two')\n  'one two'\n  >>> sorTNumBers('zero four two')\n  'zero four two'\n  */\nconst sorTNumBers2 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const sortedNumbers = []\n\n  numbersArr.sort((a, b) => {\n    if (parseInt(a) > parseInt(b)) {\n      return 1\n    } else if (parseInt(a) < parseInt(b)) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n\n  for (let i = 0; i < numbersArr.length; i += 1) {\n    sortedNumbers.push(numbersArr[i])\n  }\n\n  return sortedNumbers.join(' ')\n}\n\n/*\n  >>> sorTNumBers('three one five')\n  'one three five'\n  >>> sorTNumBers('one two three')\n  'one two three'\n  >>> sorTNumBers('one two five')\n  'one two five'\n  >>> sorTNumBers('one two five three')\n  'one two five three'\n  >>> sorTNumBers('one two three four')\n  'one two three four'\n  >>> sorTNumBers('one two three four five')\n  'one two three four five'\n  >>> sorTNumBers('one two three four five six')\n  'one two three four five six'\n  >>> sorTNumBers('one two three four five six seven')\n  'one two three four five six seven'\n  >>> sorTNumBers('one two three four five six seven eight')\n  'one two three four five six seven eight'\n  >>> sorTNumBers('one two three four five six seven eight nine')\n  'one two three four five six seven eight nine'\n  >>> sorTNumBers('one two three four five six seven eight nine ten')\n  'one two three four five six seven eight nine ten'\n  */\nconst sorTNumBers3 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const sortedNumbers = []\n\n  numbersArr.sort((a, b) => {\n    if (parseInt(a) > parseInt(b)) {\n      return 1\n    } else if (parseInt(a) < parseInt(b)) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n\n  for (let i = 0; i < numbersArr.length; i += 1) {\n    sortedNumbers.push(numbersArr[i])\n  }\n\n  return sortedNumbers.join(' ')\n}\n\nexport default sorTNumBers3\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const {\n    length,\n    sort,\n    subtract,\n    subtractBy,\n    max,\n    min\n  } = require(`lodash`)\n  const arr = numbers.slice()\n  const sortArr = sort(arr)\n  const result = [\n    max(arr),\n    min(arr)\n  ]\n  const resultArr = [\n    sortArr[0],\n    sortArr[1]\n  ]\n  const resultArr2 = [\n    result[0],\n    result[1]\n  ]\n  let i = 0\n  while (i < length) {\n    const number = subtract(arr[i], resultArr[0])\n    if (subtractBy(arr[i], resultArr[1]) === number) {\n      resultArr2[0] = resultArr[0]\n      resultArr2[1] = resultArr[1]\n      resultArr.shift()\n      resultArr.shift()\n      i = 0\n    } else {\n      resultArr2[1] = resultArr[1]\n      resultArr2[0] = resultArr[0]\n      resultArr.shift()\n      resultArr.shift()\n      i++\n    }\n  }\n  return resultArr2\n}\n\nmodule.exports = finDCloSestELemEnts\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const n = numbers.length;\n  const l = [...new Array(n)].map(() => 0);\n  for (let i = 0; i < n; i++) {\n    l[i] = i + 1;\n  }\n  const min = l.reduce((a, b) => a < b? a : b, Infinity);\n  const max = l.reduce((a, b) => a > b? a : b, 0);\n  const range = max - min;\n  let scale = 1 / range;\n  return numbers.map(n => scale * (n - min));\n};\n\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n/**\n * Given a list of numbers, returns the first number with a given value\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.0\n  */\nconst resCaletoUniTByValue = (numbers, value) => {\n  const n = numbers.length;\n  let i = 0;\n  while (numbers[i]!== value) {\n    i++;\n    if (i >= n) {\n      return undefined;\n    }\n  }\n  return i;\n};\n\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n/**\n * Given a list of numbers, return the list of the same length with the\n  * numbers reversed\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [5.0, 4.0, 3.0, 2.0, 1.0]\n  */\nconst resCaletoUniTInverse = (numbers) => {\n  const n = numbers.length;\n  const l = [...new Array(n)].map(() => 0);\n  for (let i = 0; i < n; i++) {\n    l[i] = i + 1;\n  }\n  const min = l.reduce((a, b) => a < b? a : b, Infinity);\n  const max = l.reduce((a, b) => a > b? a : b, 0);\n  const range = max - min;\n  let scale = 1 / range;\n  return numbers.map(n => scale * (max - n));\n};\n\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n/**\n * Given a list of numbers, return the list of the same length with the\n  * numbers reversed\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [5.0, 4.0, 3.0, 2.0, 1.0]\n  */\nconst resCaletoUniTInverseByValue = (numbers, value) => {\n  const n = numbers.length;\n  let i = 0;\n  while (numbers[i]!== value) {\n    i++;\n    if (i >= n) {\n      return undefined;\n    }\n  }\n  return i;\n};\n\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n// Tests\n\n// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\nconst t0 = resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0]);\nconst t1 = resCaletoUniTByValue(t0, 1.0);\nconst t2 = resCaletoUniTInverse(t0);\nconst t3 = resCaletoUniTInverseByValue(t0, 1.0);\n\nconsole.log(`${t0} => ${t1}`);\nconsole.log(`${t0} => ${t2}`);\nconsole.log(`${t0} => ${t3}`);\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const results = [];\n\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      results.push(value);\n    }\n  });\n\n  return results;\n};\n\nexport default filTerINtegeRs;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  return string.length\n}\n\n/* Return index of given string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'b')\n  1\n  >>> strIndexOf('abc', 'c')\n  2\n  */\nconst strIndexOf = (string, substring) => {\n  let idx = 0\n  while (string.indexOf(substring, idx)!== -1) {\n    idx = idx + 1\n  }\n  return idx\n}\n\n/* Return new string with given substring replaced by new substring\n  >>> strReplace('abc', 'a', 'A')\n  'Abc'\n  >>> strReplace('abc', 'c', 'x')\n  'abx'\n  >>> strReplace('abc', 'c', 'x', 2)\n  'abx'\n  */\nconst strReplace = (string, old, new, index) => {\n  if (index === undefined) {\n    index = strIndexOf(string, old)\n  }\n  return string.substring(0, index) + new + string.substring(index + old.length)\n}\n\n/* Return new string with first occurrences of given substring replaced by new substring\n  >>> strReplaceFirst('abc', 'a', 'A')\n  'Abc'\n  >>> strReplaceFirst('abc', 'c', 'x')\n  'abx'\n  */\nconst strReplaceFirst = (string, old, new) => {\n  let idx = strIndexOf(string, old)\n  return strReplace(string, old, new, idx)\n}\n\n/* Return new string with last occurrences of given substring replaced by new substring\n  >>> strReplaceLast('abc', 'a', 'A')\n  'abc'\n  >>> strReplaceLast('abc', 'c', 'x')\n  'abx'\n  */\nconst strReplaceLast = (string, old, new) => {\n  let idx = strIndexOf(string, old)\n  return strReplace(string, old, new, idx, -1)\n}\n\n/* Return substring of given string\n  >>> strSubstr('abc', 0, 3)\n  'abc'\n  >>> strSubstr('abc', 3, 6)\n  'cde'\n  >>> strSubstr('abc', 3, 6, 2)\n  'cde'\n  >>> strSubstr('abc', 0, 3, 2)\n  'ab'\n  */\nconst strSubstr = (string, start, length, from = 0) => {\n  if (from === undefined) {\n    from = 0\n  }\n  return string.substring(start, start + length)\n}\n\n/* Return string without whitespace characters\n  >>> strTrim(' abc ')\n  'abc'\n  >>> strTrim('abc')\n  'abc'\n  */\nconst strTrim = (string) => {\n  return string.trim()\n}\n\n/* Return string with characters removed in given range\n  >>> strTrim('abcd', 0, 1)\n  'abcd'\n  >>> strTrim('abcd', 1, 2)\n  'abd'\n  >>> strTrim('abcd', 2, 3)\n  'abc'\n  */\nconst strTrim = (string, start, length) => {\n  return string.substring(start, start + length)\n}\n\n/* Return string with characters removed in given range\n  >>> strTrimEnd(' abc ')\n 'abc '\n  >>> strTrimEnd('abc')\n  'abc'\n  */\nconst strTrimEnd = (string) => {\n  return string.substring(0, string.length - 1)\n}\n\n/* Return string with characters removed in given range\n  >>> strTrimStart(' abc ')\n 'abc '\n  >>> strTrimStart('abc')\n  'abc'\n  */\nconst strTrimStart = (string) => {\n  return string.substring(1)\n}\n\n/* Return number of characters in given string\n  >>> strLength('abc')\n  3\n  >>> strLength('')\n  0\n  */\nconst strLength = (string) => {\n  return string.length\n}\n\n/* Return last character of given string\n  >>> strLast('abc')\n  'c'\n  >>> strLast('')\n  ''\n  */\nconst strLast = (string) => {\n  return string.slice(-1)\n}\n\n/* Return first character of given string\n  >>> strFirst('abc')\n  'a'\n  >>> strFirst('')\n  ''\n  */\nconst strFirst = (string) => {\n  return string.slice(0, 1)\n}\n\n/* Return string with all occurrences of given character removed\n  >>> strReplaceAll('abc', 'a')\n  'bc'\n  >>> strReplaceAll('abc', 'c')\n  'ab'\n  >>> strReplaceAll('abc', 'c', 2)\n  'ab'\n  */\nconst strReplaceAll = (string, char, count) => {\n  if (count === undefined) {\n    count = 1\n  }\n  return string.replace(new RegExp(`[${char}]`, 'g'), '')\n}\n\n/* Return string with first occurrence of given character replaced by given string\n  >>> strReplaceFirst('abc', 'a', 'A')\n  'ABC'\n  >>> strReplaceFirst('abc', 'c', 'x')\n  'abx'\n  >>> strReplaceFirst('abc', 'c', 'x', 2)\n  'abx'\n  */\nconst strReplaceFirst = (string, char, newString, index) => {\n  if (index === undefined) {\n    index = strIndexOf(string, char)\n  }\n  return strReplace(string, char, newString, index)\n}\n\n/* Return string with last occurrence of given character replaced by given string\n  >>> strReplaceLast('abc', 'a', 'A')\n  'ABC'\n  >>> strReplaceLast('abc', 'c', 'x')\n  'abx'\n  >>> strReplaceLast('abc', 'c', 'x', 2)\n  'abx'\n  */\nconst strRe"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  if (n < 1) return undefined\n  let p = []\n  while (n > 0) {\n    p.push(n % 10)\n    n = Math.floor(n / 10)\n  }\n  p = p.reverse()\n  let count = 0\n  let result = 0\n  for (let i = 0; i < p.length; i++) {\n    if (p[i] === 0) continue\n    count++\n    if (count > 1) {\n      if (p[i] > result) result = p[i]\n    }\n  }\n  return result\n}\n\n/*\n  For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOrReverse = (n) => {\n  if (n < 1) return undefined\n  let p = []\n  while (n > 0) {\n    p.push(n % 10)\n    n = Math.floor(n / 10)\n  }\n  p = p.reverse()\n  let count = 0\n  let result = n\n  for (let i = 0; i < p.length; i++) {\n    if (p[i] === 0) continue\n    count++\n    if (count > 1) {\n      if (p[i] < result) result = p[i]\n    }\n  }\n  return result\n}\n\n/*\n  For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisOrReverse(15)\n  5\n  */\nconst larGestdivisOrReverse2 = (n) => {\n  if (n < 1) return undefined\n  let p = []\n  while (n > 0) {\n    p.push(n % 10)\n    n = Math.floor(n / 10)\n  }\n  p = p.reverse()\n  let count = 0\n  let result = n\n  for (let i = 0; i < p.length; i++) {\n    if (p[i] === 0) continue\n    count++\n    if (count > 1) {\n      if (p[i] > result) result = p[i]\n    }\n  }\n  return result\n}\n\n/*\n  Find the maximum number that can be divided by every other number, starting from 1.\n  >>> larGestdivisOrReverse(15)\n  5\n  >>> larGestdivisOrReverse(1)\n  1\n  >>> larGestdivisOrReverse(5)\n  3\n  >>> larGestdivisOrReverse(15)\n  5\n  >>> larGestdivisOrReverse(9)\n  4\n  >>> larGestdivisOrReverse(17)\n  4\n  >>> larGestdivisOrReverse(23)\n  7\n  >>> larGestdivisOrReverse(25)\n  8\n  >>> larGestdivisOrReverse(31)\n  11\n  >>> larGestdivisOrReverse(37)\n  11\n  >>> larGestdivisOrReverse(39)\n  13\n  >>> larGestdivisOrReverse(41)\n  13\n  >>> larGestdivisOrReverse(47)\n  11\n  >>> larGestdivisOrReverse(53)\n  13\n  >>> larGestdivisOrReverse(55)\n  15\n  >>> larGestdivisOrReverse(63)\n  11\n  >>> larGestdivisOrReverse(77)\n  11\n  >>> larGestdivisOrReverse(89)\n  15\n  >>> larGestdivisOrReverse(97)\n  13\n  >>> larGestdivisOrReverse(103)\n  11\n  >>> larGestdivisOrReverse(111)\n  9\n  >>> larGestdivisOrReverse(113)\n  11\n  >>> larGestdivisOrReverse(127)\n  11\n  >>> larGestdivisOrReverse(129)\n  13\n  >>> larGestdivisOrReverse(131)\n  13\n  >>> larGestdivisOrReverse(137)\n  15\n  >>> larGestdivisOrReverse(139)\n  11\n  >>> larGestdivisOrReverse(143)\n  13\n  >>> larGestdivisOrReverse(145)\n  13\n  >>> larGestdivisOrReverse(151)\n  15\n  >>> larGestdivisOrReverse(157)\n  11\n  >>> larGestdivisOrReverse(163)\n  13\n  >>> larGestdivisOrReverse(167)\n  15\n  >>> larGestdivisOrReverse(179)\n  15\n  >>> larGestdivisOrReverse(181)\n  15\n  >>> larGestdivisOrReverse(191)\n  15\n  >>> larGestdivisOrReverse(199)\n  17\n  >>> larGestdivisOrReverse(201)\n  17\n  >>> larGestdivisOrReverse(207)\n  11\n  >>> larGestdivisOrReverse(221)\n  11\n  >>> larGestdivisOrReverse(223)\n  15\n  >>> larGestdivisOrReverse(227)\n  17\n  >>> larGestdivisOrReverse(229)\n  17\n  >>> larGestdivisOrReverse(233)\n  17\n  >>> larGestdivisOrReverse(239)\n  11\n  >>> larGestdivisOrReverse(241)\n  11\n  >>> larGestdivisOrReverse(251)\n  13\n  >>> larGestdivisOrReverse(257)\n  15\n  >>> larGestdivisOrReverse(263)\n  17\n  >>> larGestdivisOrReverse(269)\n  17\n  >>> larGestdivisOrReverse(271)\n  "}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  var factors = [];\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n    const map = new Map();\n    const result = [];\n\n    for (let i = 0; i < numbers.length; i++) {\n        const num = numbers[i];\n        const res = map.get(num);\n\n        if (res) {\n            map.set(num, res + 1);\n        } else {\n            map.set(num, 1);\n        }\n    }\n\n    for (let [key, count] of map) {\n        if (count > 1) {\n            result.push(key);\n        }\n    }\n\n    return result;\n};\n\nmodule.exports = remOveDUplicAteS;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => {\n    return letter.toUpperCase()\n  }).replace(/[A-Z]/g, (letter) => {\n    return letter.toLowerCase()\n  })\n}\n\n/**\n  * For a given string, flip uppercase to lowercase and lowercase to uppercase.\n  * @param string\n  * @returns string\n  * @example\n  * For a given string, flip uppercase to lowercase and lowercase to uppercase.\n  * >>> fliUCasE('Hello')\n  * 'hELLO'\n  */\nconst fliUCasE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (letter) => {\n    return letter.toLowerCase()\n  }).replace(/[a-z]/g, (letter) => {\n    return letter.toUpperCase()\n  })\n}\n\n/**\n  * For a given string, remove all non-alphanumeric characters from the end of the string.\n  * @param string\n  * @returns string\n  * @example\n  * For a given string, remove all non-alphanumeric characters from the end of the string.\n  * >>> fliRemoveLetters('Hello')\n  * 'Hello'\n  */\nconst fliRemoveLetters = (string) => {\n  return string.replace(/[^a-zA-Z0-9]+$/g, '')\n}\n\n/**\n  * For a given string, remove all non-alphanumeric characters from the beginning of the string.\n  * @param string\n  * @returns string\n  * @example\n  * For a given string, remove all non-alphanumeric characters from the beginning of the string.\n  * >>> fliRemoveLetters('Hello')\n  * 'Hello'\n  */\nconst fliRemoveLettersFromBegin = (string) => {\n  return string.replace(/^[^a-zA-Z0-9]+/g, '')\n}\n\n/**\n  * For a given string, remove all non-alphanumeric characters from the beginning and end of the string.\n  * @param string\n  * @returns string\n  * @example\n  * For a given string, remove all non-alphanumeric characters from the beginning and end of the string.\n  * >>> fliRemoveLetters('Hello')\n  * 'Hello'\n  */\nconst fliRemoveLettersFromBeginAndEnd = (string) => {\n  return fliRemoveLettersFromBegin(fliRemoveLetters(string))\n}\n\nmodule.exports = {\n  fliPCasE,\n  fliUCasE,\n  fliRemoveLetters,\n  fliRemoveLettersFromBegin,\n  fliRemoveLettersFromBeginAndEnd\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  if (strings.length == 0) {\n    return ''\n  } else {\n    return strings.join('')\n  }\n}\n\nexport default conCateNate\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return [...strings.filter(s => s.startsWith(prefix))]\n}\n\n/* Filter an input list of strings only for ones that match a given regex.\n  >>> filTerBYRegx([], 'a')\n  []\n  >>> filTerBYRegx(['abc', 'bcd', 'cde', 'array'], /a/)\n  ['abc', 'array']\n  */\nconst filTerBYRegx = (strings, regex) => {\n  return [...strings.filter(s => regex.test(s))]\n}\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> filTerBYNotRegx([], /a/)\n  []\n  >>> filTerBYNotRegx(['abc', 'bcd', 'cde', 'array'], /a/)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYNotRegx = (strings, regex) => {\n  return [...strings.filter(s =>!regex.test(s))]\n}\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filTerBYContains([], 'a')\n  []\n  >>> filTerBYContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYContains = (strings, contains) => {\n  return [...strings.filter(s => contains.test(s))]\n}\n\n/* Filter an input list of strings only for ones that do not contain a given string.\n  >>> filTerBYNotContains([], 'a')\n  []\n  >>> filTerBYNotContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYNotContains = (strings, contains) => {\n  return [...strings.filter(s =>!contains.test(s))]\n}\n\n/* Filter an input list of strings only for ones that contain a given string or\n  start with a given prefix.\n  >>> filTerBYContainsOrStartPrefix([], 'a')\n  []\n  >>> filTerBYContainsOrStartPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filTerBYContainsOrStartPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  */\nconst filTerBYContainsOrStartPrefix = (strings, containsOrStart) => {\n  return [...strings.filter(s => containsOrStart.test(s) || s.startsWith(containsOrStart))]\n}\n\n/* Filter an input list of strings only for ones that do not contain a given string or\n  start with a given prefix.\n  >>> filTerBYNotContainsOrStartPrefix([], 'a')\n  []\n  >>> filTerBYNotContainsOrStartPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filTerBYNotContainsOrStartPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYNotContainsOrStartPrefix = (strings, containsOrStart) => {\n  return [...strings.filter(s =>!containsOrStart.test(s) ||!s.startsWith(containsOrStart))]\n}\n\n/* Filter an input list of strings only for ones that do not contain a given string or\n  start with a given prefix.\n  >>> filTerBYContainsOrNotStartPrefix([], 'a')\n  []\n  >>> filTerBYContainsOrNotStartPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filTerBYContainsOrNotStartPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYContainsOrNotStartPrefix = (strings, containsOrStart) => {\n  return [...strings.filter(s => containsOrStart.test(s) ||!s.startsWith(containsOrStart))]\n}\n\n/* Filter an input list of strings only for ones that do not contain a given string or\n  start with a given prefix.\n  >>> filTerBYNotContainsOrNotStartPrefix([], 'a')\n  []\n  >>> filTerBYNotContainsOrNotStartPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filTerBYNotContainsOrNotStartPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYNotContainsOrNotStartPrefix = (strings, containsOrStart) => {\n  return [...strings.filter(s =>!containsOrStart.test(s) ||!s.startsWith(containsOrStart))]\n}\n\n/* Filter an input list of strings only for ones that do not contain a given string or\n  start with a given prefix.\n  >>> filTerBYContainsOrNotStartPrefixOrNotContains([], 'a')\n  []\n  >>> filTerBYContainsOrNotStartPrefixOrNotContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filTerBYContainsOrNotStartPrefixOrNotContains(['abc', 'bcd', 'cde', 'array'], 'x')\n  ['abc', 'bcd',"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let i = 1;\n  for (const e of sorted) {\n    if (e > 0) {\n      return [...l.slice(0, i), e];\n    }\n    i++;\n  }\n  return [...l];\n};\n\nmodule.exports = getposiTive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  const i = n | 1\n  const sqrtN = Math.sqrt(n)\n  const isPrime = (n) => {\n    let p = 2\n    while (p <= sqrtN) {\n      if (n % p === 0) {\n        return false\n      }\n      p += 1\n    }\n    return true\n  }\n  while (i <= sqrtN) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return isPrime(n)\n}\n\nmodule.exports = isPRime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length\n  let c = xs[0]\n  for(let i = 0; i < n; i++) {\n    if(xs[i] === 0) {\n      c = 0;\n      break;\n    }\n    c = Math.max(c, xs[i]);\n  }\n  const g = c - 1\n  const gs = g * (g + 1) / 2;\n  let x0 = -(1 + gs / c);\n  for(let i = 1; i < n; i++) {\n    x0 = x0 + (1 + gs / c) * xs[i];\n  }\n  return x0;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  findZero finds x such that polY2(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const n = xs.length\n  let c = xs[0]\n  for(let i = 0; i < n; i++) {\n    if(xs[i] === 0) {\n      c = 0;\n      break;\n    }\n    c = Math.max(c, xs[i]);\n  }\n  const g = c - 1\n  const gs = g * (g + 1) / 2;\n  let x0 = -(1 + gs / c);\n  for(let i = 1; i < n; i++) {\n    x0 = x0 + (1 + gs / c) * xs[i];\n  }\n  return x0;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  findZero finds x such that polY3(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const n = xs.length\n  let c = xs[0]\n  for(let i = 0; i < n; i++) {\n    if(xs[i] === 0) {\n      c = 0;\n      break;\n    }\n    c = Math.max(c, xs[i]);\n  }\n  const g = c - 1\n  const gs = g * (g + 1) / 2;\n  let x0 = -(1 + gs / c);\n  for(let i = 1; i < n; i++) {\n    x0 = x0 + (1 + gs / c) * xs[i];\n  }\n  return x0;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  findZero finds x such that polY4(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero(["}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const r = [];\n  for (let i = 0; i < l.length; i += 1) {\n    if (l[i] % 3 === 0) {\n      r.push(l[i]);\n    }\n  }\n  return r.sort();\n};\n\n/*This function returns the list that is the result of adding all the elements of the list l to the list l'\n  >>> add(['A', 'B', 'C'], ['X', 'Y', 'Z'])\n  ['A', 'B', 'C', 'X', 'Y', 'Z']\n  >>> add(['A', 'B', 'C'], ['X', 'Y', 'Z'])\n  ['A', 'B', 'C', 'X', 'Y', 'Z']\n  >>> add(['A', 'B', 'C'], ['X', 'Y', 'Z'])\n  ['A', 'B', 'C', 'X', 'Y', 'Z']\n  >>> add([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst add = (l, l2) => {\n  const r = l.concat(l2);\n  return r;\n};\n\n/*This function takes the list l and returns the list that is the result of adding all the elements of the list l to the list l'\n  >>> add(['A', 'B', 'C'], ['X', 'Y', 'Z'])\n  ['A', 'B', 'C', 'X', 'Y', 'Z']\n  >>> add(['A', 'B', 'C'], ['X', 'Y', 'Z'])\n  ['A', 'B', 'C', 'X', 'Y', 'Z']\n  >>> add(['A', 'B', 'C'], ['X', 'Y', 'Z'])\n  ['A', 'B', 'C', 'X', 'Y', 'Z']\n  >>> add([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst add2 = (l, l2) => {\n  const r = l.concat(l2);\n  return r;\n};\n\n/*This function takes a list l and returns a list l' such that each value in l' is the value of its corresponding index of l,\n  with the exception that for each index of l that is divisible by three, its corresponding value in l' is 3.\n  >>> m(['A', 'B', 'C', 'D', 'E'], ['X', 'Y', 'Z', 'W', 'X'])\n  ['A', 'B', 'C', 'D', 'E', 'X', 'Y', 'Z', 'W', 'X']\n  >>> m(['A', 'B', 'C', 'D', 'E'], ['X', 'Y', 'Z', 'W', 'X'])\n  ['A', 'B', 'C', 'D', 'E', 'X', 'Y', 'Z', 'W', 'X']\n  >>> m(['A', 'B', 'C', 'D', 'E'], ['X', 'Y', 'Z', 'W', 'X'])\n  ['A', 'B', 'C', 'D', 'E', 'X', 'Y', 'Z', 'W', 'X']\n  >>> m([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst m = (l, l2) => {\n  const r = [];\n  for (let i = 0; i < l.length; i += 1) {\n    if (l[i] % 3 === 0) {\n      r.push(l2[i]);\n    }\n  }\n  return r;\n};\n\nmodule.exports = {\n  sorTThiRd,\n  add,\n  add2,\n  m\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uniq = [];\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    if (uniq.indexOf(val) === -1) {\n      uniq.push(val);\n    }\n  }\n  return uniq;\n};\n\nmodule.exports = uniQue;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n  * @function\n  * @name sortEnt\n  * @description Sort list of numbers using the given comparator.\n  * @param {List} l - List to sort.\n  * @param {Function} comp - Comparator to use.\n  * @return {List} List sorted by comparator.\n  * @example\n  *\n  * >>> sortEnt([5, 2, -3, 3, 9, -5, 0, 1, -10, -3])\n  * [ -10, -3, -5, 0, 1, 2, 3, 9, 5, 3 ]\n  * >>> sortEnt([-3, -10, -3, -5, 0, 1, 2, 3])\n  * [ -3, -5, 0, 1, 2, 3 ]\n  * >>> sortEnt([-3, -10, -3, -5, 0, 1, 2, 3, 5, 10])\n  * [ -10, -5, -3, 0, 1, 2, 3, 5, 10 ]\n  */\nconst sortEnt = (l, comp) => {\n  l.sort((a, b) => comp(a, b));\n  return l;\n};\n\n/**\n  * @function\n  * @name sortByLength\n  * @description Sort list of strings using length.\n  * @param {List} l - List to sort.\n  * @return {List} List sorted by length.\n  * @example\n  *\n  * >>> sortByLength(['Hello', 'World', 'Hello World'])\n  * ['Hello', 'Hello World', 'World']\n  * >>> sortByLength(['Hello', 'World', 'Hello World'], n => n.length)\n  * ['Hello', 'Hello World', 'World']\n  */\nconst sortByLength = (l) => {\n  return sortEnt(l, (a, b) => a.length - b.length);\n};\n\nmodule.exports = {\n  maxelemEnt,\n  sortEnt,\n  sortByLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let i = 0;\n  const divisors = [11, 13];\n  while (i < divisors.length && n >= divisors[i]) {\n    i += 1;\n  }\n  return i;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  const r = [];\n  for (let i = 0; i < l.length; i += 2) {\n    r.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    r.push(l[i]);\n  }\n  return r;\n};\n\n/**\n  * This function takes a list l and returns a list l' such that\n  * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  * to the values of the even indicies of l, but sorted.\n  * This function takes an array and returns an array with the same elements, but sorted.\n  * The odd indicies are not sorted, but the even indicies are sorted.\n  * The elements in the returned array are the same as the elements in the input array,\n  * except they are sorted.\n  * This function can be used to sort an array.\n  *\n  * @param l The list to sort\n  * @returns l' The sorted list\n  *\n  *\n  * @example\n  *\n  *\n  *\n  *\n  * */\nconst sortEven = (l) => {\n  const r = [];\n  for (let i = 0; i < l.length; i += 2) {\n    r.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    r.push(l[i]);\n  }\n  return r;\n};\n\nconst arr = [1, 3, 2, 4, 5, 6];\n\nconsole.log(sorTEveN(arr));\nconsole.log(sortEven(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  return n + priMeFiB(n - 1);\n};\n\nmodule.exports = priMeFiB;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n    const set = new Set(l);\n    const sum = sumPlessum(l);\n    if (sum === 0) {\n        return true;\n    }\n    return!set.has(sum);\n};\n\nexport default triPlessumTozerO;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n    let collisions = 0;\n    let car1, car2;\n    for (let i = 0; i < n; i++) {\n        car1 = i;\n        car2 = (i + 1) % n;\n        for (let j = 0; j < n; j++) {\n            if (car1 === j) {\n                continue;\n            }\n            if (car2 === j) {\n                continue;\n            }\n            collisions += carracecolli(car1, car2);\n        }\n    }\n    return collisions;\n};\n\nlet n = 9;\nconsole.log(races(n));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  return l.concat(l.slice(1).map(i => i + 1));\n}\n\n/*\n  Returns list of all numbers from 1 to n.\n  >>> range(1, 9)\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> range(1, 9, 2)\n  [1, 3, 5]\n  >>> range(1, 9, -2)\n  [3, 5, 7]\n  >>> range(1, 9, -1)\n  [2, 4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n  [2]\n  >>> range(1, 9, -1)\n  [2]\n  >>> range(1, 9, 2)\n  [3, 5, 7]\n  >>> range(1, 9, -2)\n  [5, 7]\n  >>> range(1, 9, -1)\n  [4, 6]\n  >>> range(1, 9, 0)\n  [1]\n  >>> range(1, 9, 1)\n"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n    const sum = l.reduce((s, i) => s + i, 0);\n    if (sum === 0) {\n        return false;\n    }\n    let diff = 0;\n    for (let i = 0; i < l.length; i++) {\n        diff += l[i];\n        if (diff === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  if (base <= 1 || base > 36) {\n    throw new Error('Invalid base.');\n  }\n  while (x >= base) {\n    res = ((x % base) + base).toString(base) + res;\n    x = (x / base);\n  }\n  return res;\n};\n\nconsole.log(chaNgeBAse(8, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * (h + 1)) / 2;\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triArea(5, 3)\n  7.5\n  */\nconst triArea = (a, h) => {\n  return triAnglEArea(a, h) / 2;\n}\n\n/*Given two triangles, return the area of the larger of the two.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return Math.max(triArea(a, h1), triArea(a, h2));\n}\n\n/*Given a triangle and a height, return the area of the triangle.\n  >>> triangleArea(5, 3, 4)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle.\n  >>> triangleArea(5, 3, 2)\n  7.5\n  */\nconst triangleArea = (a, h1, h2) => {\n  return triangleArea(a, h1, h2);\n}\n\n/*Given a triangle and a side, return the area of the triangle"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const fib4 = (n - 2) + (n - 3) + (n - 4) + (n - 5);\n  return fib4;\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  const len = l.length\n  let x = 0\n  let y = 0\n  let mid = 0\n  let sum = 0\n  let avg = 0\n\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n    x += l[i]\n    y += i\n  }\n  mid = x / y\n  avg = sum / len\n  return avg\n}\n\nexport default medIan\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\nexport { isPAlinDrome };\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  let k = n % p;\n  return (k >= p / 2)? k - p : k;\n};\n\nconst checkValid = (n, p) => {\n  if (n <= 0) {\n    return 'n is not positive.';\n  }\n  if (p <= 1) {\n    return 'p must be > 1.';\n  }\n  if (p % 2 === 0) {\n    return 'p must be odd.';\n  }\n  if (modP(n, p)!== 0) {\n    return 'n is not a multiple of p.';\n  }\n  return '';\n};\n\nconst checkValid1 = (n, p) => {\n  if (n <= 0) {\n    return 'n is not positive.';\n  }\n  if (p <= 1) {\n    return 'p must be > 1.';\n  }\n  if (p % 2 === 0) {\n    return 'p must be odd.';\n  }\n  if (modP(n, p)!== 0) {\n    return 'n is not a multiple of p.';\n  }\n  if (modP(n * p, p * p)!== 0) {\n    return 'n is not a multiple of p^2.';\n  }\n  return '';\n};\n\nconst checkValid2 = (n, p) => {\n  if (n <= 0) {\n    return 'n is not positive.';\n  }\n  if (p <= 1) {\n    return 'p must be > 1.';\n  }\n  if (p % 2 === 0) {\n    return 'p must be odd.';\n  }\n  if (modP(n, p)!== 0) {\n    return 'n is not a multiple of p.';\n  }\n  if (modP(n * p, p * p)!== 0) {\n    return 'n is not a multiple of p^2.';\n  }\n  if (modP(n * p * p, p * p * p)!== 0) {\n    return 'n is not a multiple of p^3.';\n  }\n  return '';\n};\n\nconst checkValid3 = (n, p) => {\n  if (n <= 0) {\n    return 'n is not positive.';\n  }\n  if (p <= 1) {\n    return 'p must be > 1.';\n  }\n  if (p % 2 === 0) {\n    return 'p must be odd.';\n  }\n  if (modP(n, p)!== 0) {\n    return 'n is not a multiple of p.';\n  }\n  if (modP(n * p, p * p)!== 0) {\n    return 'n is not a multiple of p^2.';\n  }\n  if (modP(n * p * p, p * p * p)!== 0) {\n    return 'n is not a multiple of p^3.';\n  }\n  if (modP(n * p * p * p, p * p * p * p)!== 0) {\n    return 'n is not a multiple of p^4.';\n  }\n  return '';\n};\n\nconst checkValid4 = (n, p) => {\n  if (n <= 0) {\n    return 'n is not positive.';\n  }\n  if (p <= 1) {\n    return 'p must be > 1.';\n  }\n  if (p % 2 === 0) {\n    return 'p must be odd.';\n  }\n  if (modP(n, p)!== 0) {\n    return 'n is not a multiple of p.';\n  }\n  if (modP(n * p, p * p)!== 0) {\n    return 'n is not a multiple of p^2.';\n  }\n  if (modP(n * p * p, p * p * p)!== 0) {\n    return 'n is not a multiple of p^3.';\n  }\n  if (modP(n * p * p * p, p * p * p * p)!== 0) {\n    return 'n is not a multiple of p^4.';\n  }\n  return '';\n};\n\nconst checkValid5 = (n, p) => {\n  if (n <= 0) {\n    return 'n is not positive.';\n  }\n  if (p <= 1) {\n    return 'p must be > 1.';\n  }\n  if (p % 2 === 0) {\n    return 'p must be odd.';\n  }\n  if (modP(n, p)!== 0) {\n    return 'n is not a multiple of p.';\n  }\n  if (modP(n * p, p * p)!== 0) {\n    return 'n is not a multiple of p^2.';\n  }\n  if (modP(n * p * p, p * p * p)!== 0) {\n    return 'n is not a multiple of p^3.';\n  }\n  if (modP(n * p * p * p, p * p * p * p)!== 0) {\n    return 'n is not a multiple of p^4.';\n  }\n  if (modP(n * p * p * p * p, p * p * p * p * p)!== 0) {\n    return 'n is not a multiple of p^5.';\n  }\n  return '';\n};\n\n/* Test */\n\nconst test1 = checkValid(2, 3);\nconst test2 = checkValid(4, 3);\nconst test3 = checkValid(2, 3);\nconst test4 = checkValid(2, 3);\nconst test5 = checkValid(2, 3);\n\nconsole.log(`${test1}`);\nconsole.log(`${test2}`);\nconsole.log(`${test3}`);\nconsole.log(`${test4}`);\nconsole.log(`${test5}`);\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0) - 5) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHift function. Returns decoded string.\n  */\nconst decodeOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeOdeSHift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHift2 function. Returns decoded string.\n  */\nconst decodeOdeSHift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeOdeSHift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHift3 function. Returns decoded string.\n  */\nconst decodeOdeSHift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHift function. Returns decoded string.\n  */\nconst decodeOdeSHift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHift function. Returns decoded string.\n  */\nconst decodeOdeSHift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nmodule.exports = {\n  decodeOdeSHift,\n  decodeOdeSHift2,\n  decodeOdeSHift3,\n  decodeOdeSHift4,\n  decodeOdeSHift5,\n  encodeOdeSHift,\n  encodeOdeSHift2,\n  encodeOdeSHift3,\n  encodeOdeSHift4,\n  encodeOdeSHift5,\n  decodeShift,\n  encodeShift,\n  decodeSHift,\n  encodeSHift,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  const textLength = text.length\n  let i\n  let j\n  let currentChar\n  let nextChar\n  let nextNextChar\n  for (i = 0; i < textLength; i++) {\n    currentChar = text[i]\n    nextChar = text[i + 1]\n    nextNextChar = text[i + 2]\n    if (nextNextChar === \" \") {\n      continue\n    }\n    if (nextChar === \"a\" || nextChar === \"e\" || nextChar === \"i\" || nextChar === \"o\" || nextChar === \"u\") {\n      continue\n    }\n    if (currentChar === \" \") {\n      text = text.slice(0, i) + text.slice(i + 1)\n    }\n  }\n  return text\n}\n\nmodule.exports = remOveVOwels\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  belOwThReshoLd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\nconst add2 = (x, y) => {\n  return x + y\n}\n\nconsole.log(add(1, 2))\nconsole.log(add2(1, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n    return s0.split('').every(x => s1.includes(x))\n}\n\n/*\n  Split a string at every character.\n  >>> s = 'abcd'\n  >>> splitEvery(s, 'z')\n  ['abcd', 'z']\n  >>> splitEvery(s, 'd')\n  ['ab', 'cd', 'd']\n  >>> splitEvery(s, 'zz')\n  []\n  >>> splitEvery(s, 'zzz')\n  []\n  >>> splitEvery(s, 'a')\n  ['b', 'c', 'd']\n  */\nconst splitEvery = (s, char) => {\n    return s.split(char).filter(x => x!== '')\n}\n\n/*\n  Takes a string and returns the first word.\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n  >>> getFirstWord('abcd')\n  'abcd'\n"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if(n < 2) return 1;\n  return fib(n-2) + fib(n-1);\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const arr = brackets.split(\"\");\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < len) {\n    if (arr[i] === \"<\") {\n      count++;\n    } else if (arr[i] === \">\") {\n      count--;\n    }\n    i++;\n    j++;\n    if (count === 0) {\n      return false;\n    }\n  }\n  return count === 0;\n};\n\n/*\n  Takes in a string and returns the string with double braces removed.\n  Double braces are created by inserting a double quote (\") between two\n  consecutive double quotes.\n\n  >>> removeDoubleQuotes(\"This is a double quoted string.\")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string. \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  >>> removeDoubleQuotes(\"This is a double quoted string.  \")\n  This is a double quoted string.\n  "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n    const isMono = (a, b) => {\n        return (a + b) === (b + a);\n    };\n    let result = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (!isMono(l[i], l[i + 1])) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\n/* Return true if the input is a square number.\n  >>> square([1, 2, 4, 5, 6])\n  true\n  >>> square([1, 2, 4, 8, 9])\n  false\n  >>> square([1, 2, 4, 9, 10])\n  false\n  >>> square([4, 1, 0, -10])\n  true\n  */\nconst square = (n) => {\n    const isSquare = (a, b) => {\n        return Math.sqrt(a * a + b * b) === Math.abs(a) || Math.sqrt(a * a + b * b) === Math.abs(b);\n    };\n    return monOtonIc(n).every(isSquare);\n};\n\nconst test = () => {\n    console.log('Test');\n    console.log(square([1, 2, 4, 8, 9]));\n    console.log(square([1, 2, 4, 9, 10]));\n    console.log(square([4, 1, 0, -10]));\n    console.log(square([1, 2, 3, 5, 6, 7]));\n};\n\nconst sum = (a, b) => {\n    return a + b;\n};\n\nconst squareSum = (n) => {\n    return sum(square(n));\n};\n\nconst sumSquare = (n) => {\n    return sum(square(n));\n};\n\nconst testSum = () => {\n    console.log('Test');\n    console.log(sumSquare(3));\n};\n\nconst testSumSquare = () => {\n    console.log('Test');\n    console.log(sumSquare(3));\n};\n\nconst main = () => {\n    testSum();\n    testSumSquare();\n    test();\n    testSum();\n    testSumSquare();\n    test();\n    testSum();\n    testSumSquare();\n    test();\n    testSum();\n    testSumSquare();\n    test();\n    testSum();\n    testSumSquare();\n    test();\n    testSum();\n    testSumSquare();\n    test();\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const sortedL1 = sort(l1);\n  const sortedL2 = sort(l2);\n  const arr1 = sortedL1.map(x => x);\n  const arr2 = sortedL2.map(x => x);\n\n  const intersection = intersect(arr1, arr2);\n  const union = union(arr1, arr2);\n\n  const sortedIntersection = sort(intersection);\n  const sortedUnion = sort(union);\n\n  return sortedIntersection.concat(sortedUnion);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  const divisors = {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1,\n                    11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1,\n                    20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1,\n                    29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 1, 37: 1,\n                    38: 1, 39: 1, 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 1, 46: 1,\n                    47: 1, 48: 1, 49: 1, 50: 1, 51: 1, 52: 1, 53: 1, 54: 1, 55: 1,\n                    56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 61: 1, 62: 1, 63: 1, 64: 1,\n                    65: 1, 66: 1, 67: 1, 68: 1, 69: 1, 70: 1, 71: 1, 72: 1, 73: 1,\n                    74: 1, 75: 1, 76: 1, 77: 1, 78: 1, 79: 1, 80: 1, 81: 1, 82: 1,\n                    83: 1, 84: 1, 85: 1, 86: 1, 87: 1, 88: 1, 89: 1, 90: 1, 91: 1,\n                    92: 1, 93: 1, 94: 1, 95: 1, 96: 1, 97: 1, 98: 1, 99: 1, 100: 1,\n                    101: 1, 102: 1, 103: 1, 104: 1, 105: 1, 106: 1, 107: 1, 108: 1,\n                    109: 1, 110: 1, 111: 1, 112: 1, 113: 1, 114: 1, 115: 1, 116: 1,\n                    117: 1, 118: 1, 119: 1, 120: 1, 121: 1, 122: 1, 123: 1, 124: 1,\n                    125: 1, 126: 1, 127: 1, 128: 1, 129: 1, 130: 1, 131: 1, 132: 1,\n                    133: 1, 134: 1, 135: 1, 136: 1, 137: 1, 138: 1, 139: 1, 140: 1,\n                    141: 1, 142: 1, 143: 1, 144: 1, 145: 1, 146: 1, 147: 1, 148: 1,\n                    149: 1, 150: 1, 151: 1, 152: 1, 153: 1, 154: 1, 155: 1, 156: 1,\n                    157: 1, 158: 1, 159: 1, 160: 1, 161: 1, 162: 1, 163: 1, 164: 1,\n                    165: 1, 166: 1, 167: 1, 168: 1, 169: 1, 170: 1, 171: 1, 172: 1,\n                    173: 1, 174: 1, 175: 1, 176: 1, 177: 1, 178: 1, 179: 1, 180: 1,\n                    181: 1, 182: 1, 183: 1, 184: 1, 185: 1, 186: 1, 187: 1, 188: 1,\n                    189: 1, 190: 1, 191: 1, 192: 1, 193: 1, 194: 1, 195: 1, 196: 1,\n                    197: 1, 198: 1, 199: 1, 200: 1, 201: 1, 202: 1, 203: 1, 204: 1,\n                    205: 1, 206: 1, 207: 1, 208: 1, 209: 1, 210: 1, 211: 1, 212: 1,\n                    213: 1, 214: 1, 215: 1, 216: 1, 217: 1, 218: 1, 219: 1, 220: 1,\n                    221: 1, 222: 1, 223: 1, 224: 1, 225: 1, 226: 1, 227: 1, 228: 1,\n                    229: 1, 230: 1, 231: 1, 232: 1, 233: 1, 234: 1, 235: 1, 236: 1,\n                    237: 1, 238: 1, 239: 1, 240: 1, 241: 1, 242: 1, 243: 1, 244: 1,\n                    245: 1, 246: 1, 247: 1, 248: 1, 249: 1, 250: 1, 251: 1, 252: 1,\n                    253: 1, 254: 1, 255: 1, 256: 1, 257: 1, 258: 1, 259: 1, 260: 1,\n                    261: 1, 262: 1, 263: 1, 264: 1, 265: 1, 266: 1, 267: 1, 268: 1,\n                    269: 1, 270: 1, 271: 1, 272: 1, 273: 1, 274: 1, 275: 1, 276: 1,\n                    277: 1, 278: 1, 279: 1, 280: 1, 281: 1, 282: 1, 283: 1, 284: 1,\n                    285: 1, 286: 1, 287: 1, 288: 1, 289: 1, 290: 1, 291: 1, 292: 1,\n                    293: 1, 294: 1, 295: 1, 296: 1, 297: 1, 298: 1, 299: 1, 300: 1,\n                    301: 1, 302: 1, 303: 1, 304: 1, 305: 1, 306: 1, 307: 1, 308: 1,\n                    309: 1, 310: 1, 311: 1, 312: 1, 313: 1, 314: 1, 315: 1, 316: 1,\n                    317: 1, 318: 1, 319: 1, 320: 1, 321: 1, 322: 1, 323: 1, 324: 1,\n                    325: 1, 326: 1, 327: 1, 328: 1, 329: 1, 330: 1, 331: 1, 332: 1,\n                    333: 1, 334: 1, 335: 1, 336: 1, 337: 1, 338: 1, 339: 1, 340: 1,\n                    341: 1, 342: 1, 343: 1, 344: 1, 345"}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n    let sum = 0;\n    while (n > 0) {\n        sum += n--;\n    }\n    return sum;\n};\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @description\n  * Calculate sum of nth fibonacci number.\n  *\n  * @example\n  * fibonacci(30)\n  * // => 3155\n  *\n  * @example\n  * fibonacci(100)\n  * // => 6765613030\n  *\n  * @example\n  * fibonacci(5)\n  * // => 1\n  *\n  * @example\n  * fibonacci(10)\n  * // => 55\n  *\n  * @example\n  * fibonacci(1)\n  * // => 1\n  *\n  */\nconst fibonacci = (n) => {\n    if (n <= 1) {\n        return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @description\n  * Calculate sum of nth fibonacci number.\n  *\n  * @example\n  * fibonacci(30)\n  * // => 3155\n  *\n  * @example\n  * fibonacci(100)\n  * // => 6765613030\n  *\n  * @example\n  * fibonacci(5)\n  * // => 1\n  *\n  * @example\n  * fibonacci(10)\n  * // => 55\n  *\n  * @example\n  * fibonacci(1)\n  * // => 1\n  *\n  */\nconst fibonacci2 = (n) => {\n    if (n <= 1) {\n        return 1;\n    }\n    let prev = 0;\n    let current = 1;\n    while (n > 0) {\n        let next = current + prev;\n        prev = current;\n        current = next;\n        n--;\n    }\n    return current;\n};\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @description\n  * Calculate sum of nth fibonacci number.\n  *\n  * @example\n  * fibonacci(30)\n  * // => 3155\n  *\n  * @example\n  * fibonacci(100)\n  * // => 6765613030\n  *\n  * @example\n  * fibonacci(5)\n  * // => 1\n  *\n  * @example\n  * fibonacci(10)\n  * // => 55\n  *\n  * @example\n  * fibonacci(1)\n  * // => 1\n  *\n  */\nconst fibonacci3 = (n) => {\n    if (n <= 1) {\n        return 1;\n    }\n    let current = 0;\n    let prev = 1;\n    while (n > 0) {\n        let next = current + prev;\n        prev = current;\n        current = next;\n        n--;\n    }\n    return current;\n};\n\nconst a = fibonacci3(1000);\nconst b = fibonacci2(1000);\nconst c = fibonacci(1000);\nconst d = fibonacci(2);\nconst e = fibonacci(10);\nconst f = fibonacci(1);\n\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\nconsole.log(d);\nconsole.log(e);\nconsole.log(f);\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const len = brackets.length\n  for (let i = 0; i < len; i++) {\n    if (brackets[i]!== \"(\" || i >= len - 1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check whether a string contains only the characters in the given string.\n  E.g. `containsOnly( \"abcdef\", \"ace\")` returns true.\n  E.g. `containsOnly( \"abcdef\", \"d\")` returns false.\n\n  >>> containsOnly(\"abcdef\", \"ace\")\n  true\n  >>> containsOnly(\"abcdef\", \"d\")\n  false\n  */\nconst containsOnly = (str, subStr) => {\n  const len = str.length\n  const subLen = subStr.length\n  if (len < subLen) {\n    return false\n  }\n  for (let i = 0; i < subLen; i++) {\n    if (str.indexOf(subStr[i], i) < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check whether a string contains only the characters in the given string.\n  E.g. `containsOnly(\"abcdef\", \"ace\")` returns true.\n  E.g. `containsOnly(\"abcdef\", \"d\")` returns false.\n\n  >>> containsOnly(\"abcdef\", \"ace\")\n  true\n  >>> containsOnly(\"abcdef\", \"d\")\n  false\n  */\nconst containsOnlyAll = (str, subStr) => {\n  const len = str.length\n  const subLen = subStr.length\n  if (len < subLen) {\n    return false\n  }\n  for (let i = 0; i < subLen; i++) {\n    const char = str.charAt(i)\n    if (char === subStr[i] || char === subStr[i].toLowerCase()) {\n      continue\n    }\n    return false\n  }\n  return true\n}\n\n/*\n  Check whether a string contains all the characters in the given string.\n  E.g. `containsAll(\"abcdef\", \"ace\")` returns true.\n  E.g. `containsAll(\"abcdef\", \"b\")` returns false.\n\n  >>> containsAll(\"abcdef\", \"ace\")\n  true\n  >>> containsAll(\"abcdef\", \"b\")\n  false\n  */\nconst containsAll = (str, subStr) => {\n  const len = str.length\n  const subLen = subStr.length\n  if (len < subLen) {\n    return false\n  }\n  for (let i = 0; i < subLen; i++) {\n    const char = str.charAt(i)\n    if (char!== subStr[i] && char!== subStr[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check whether a string contains all the characters in the given string.\n  E.g. `containsAll(\"abcdef\", \"ace\")` returns true.\n  E.g. `containsAll(\"abcdef\", \"b\")` returns false.\n\n  >>> containsAll(\"abcdef\", \"ace\")\n  true\n  >>> containsAll(\"abcdef\", \"b\")\n  false\n  */\nconst containsAllAll = (str, subStr) => {\n  const len = str.length\n  const subLen = subStr.length\n  if (len < subLen) {\n    return false\n  }\n  for (let i = 0; i < subLen; i++) {\n    const char = str.charAt(i)\n    if (char!== subStr[i] && char!== subStr[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  containsOnly,\n  containsOnlyAll,\n  containsAll,\n  containsAllAll,\n  corRectbrackEtiNg,\n  containsOnly,\n  containsOnlyAll,\n  containsAll,\n  containsAllAll,\n  removeElements,\n  removeDuplicates\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  let i = 0;\n  let derivative = [];\n  let xs_i = xs;\n  let xs_i_1 = xs_i[i];\n  let k = 0;\n  let k_1 = 0;\n  do {\n    derivative[k_1] = xs_i_1;\n    k_1 += 1;\n    i += 1;\n    xs_i_1 = xs_i[i];\n    k += 1;\n  } while (i < xs.length);\n  return derivative;\n};\n\n/*\n  findK\n  Return the index of the element of xs that has the largest absolute value.\n  Return -1 if no element of xs has an absolute value larger than 1.\n  Return -2 if no element of xs has an absolute value larger than 2.\n  >>> findK([3, 1, 2, 4, 5])\n  1\n  >>> findK([1, 2, 3])\n  -1\n  >>> findK([3, 1, 2, 4, 5])\n  2\n  >>> findK([-1, 2, 3])\n  -2\n  >>> findK([3, 1, 2, 4, 5, -1])\n  1\n  >>> findK([-1, 2, 3, -1])\n  -1\n  >>> findK([-1, 2, 3, -1, -1])\n  -1\n  >>> findK([-1, 2, 3, -1, -1, -1])\n  -2\n  >>> findK([-1, 2, 3, -1, -1, -1, -1])\n  -2\n  >>> findK([-1, 2, 3, -1, -1, -1, -1, -1])\n  -2\n  */\nconst findK = (xs) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (Math.abs(xs[i]) > max) {\n      max = Math.abs(xs[i]);\n      max_index = i;\n    }\n  }\n  if (max > 1) {\n    return max_index;\n  } else if (max > 2) {\n    return -1;\n  } else if (max > 0) {\n    return -2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  findK_index\n  Return the index of the element of xs that has the largest absolute value.\n  Return -1 if no element of xs has an absolute value larger than 1.\n  Return -2 if no element of xs has an absolute value larger than 2.\n  >>> findK_index([3, 1, 2, 4, 5])\n  1\n  >>> findK_index([1, 2, 3])\n  -1\n  >>> findK_index([3, 1, 2, 4, 5])\n  2\n  >>> findK_index([-1, 2, 3])\n  -2\n  >>> findK_index([3, 1, 2, 4, 5, -1])\n  1\n  >>> findK_index([-1, 2, 3, -1])\n  -1\n  >>> findK_index([-1, 2, 3, -1, -1])\n  -1\n  >>> findK_index([-1, 2, 3, -1, -1, -1])\n  -2\n  >>> findK_index([-1, 2, 3, -1, -1, -1, -1])\n  -2\n  */\nconst findK_index = (xs) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (Math.abs(xs[i]) > max) {\n      max = Math.abs(xs[i]);\n      max_index = i;\n    }\n  }\n  if (max > 1) {\n    return max_index;\n  } else if (max > 2) {\n    return -1;\n  } else if (max > 0) {\n    return -2;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  main\n  Run the program.\n  */\nconst main = () => {\n  console.log('findK(');\n  console.log(derivative);\n  console.log(') = ');\n  console.log(findK(derivative));\n  console.log('\\n');\n  console.log('findK_index(');\n  console.log(derivative);\n  console.log(') = ');\n  console.log(findK_index(derivative));\n  console.log('\\n');\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n    let a = 0, b = 1;\n    return n < 2? a : a + b;\n};\n\nconsole.log(fibFib(5));<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  let count = 0;\n  for(let i = 0; i < s.length; i++) {\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  x = x % 10\n  const y = x << shift\n  const z = x >> shift\n  const a = y + z\n  const b = a % 10\n  const c = a >> shift\n  const d = b << shift\n  const e = d + c\n  const f = e % 10\n  const g = e >> shift\n  const h = f << shift\n  const i = h + g\n  const j = i % 10\n  const k = i >> shift\n  const l = j << shift\n  const m = l + k\n  const n = m % 10\n  const o = m >> shift\n  const p = n << shift\n  const q = p + o\n  const r = q % 10\n  return r.toString()\n}\n\n// console.log(cirCulaRShifT(12, 1))\n// console.log(cirCulaRShifT(12, 2))\n// console.log(cirCulaRShifT(12, 3))\n// console.log(cirCulaRShifT(12, 4))\n// console.log(cirCulaRShifT(12, 5))\n// console.log(cirCulaRShifT(12, 6))\n// console.log(cirCulaRShifT(12, 7))\n// console.log(cirCulaRShifT(12, 8))\n// console.log(cirCulaRShifT(12, 9))\n// console.log(cirCulaRShifT(12, 10))\n// console.log(cirCulaRShifT(12, 11))\n// console.log(cirCulaRShifT(12, 12))\n// console.log(cirCulaRShifT(12, 13))\n// console.log(cirCulaRShifT(12, 14))\n// console.log(cirCulaRShifT(12, 15))\n// console.log(cirCulaRShifT(12, 16))\n// console.log(cirCulaRShifT(12, 17))\n// console.log(cirCulaRShifT(12, 18))\n// console.log(cirCulaRShifT(12, 19))\n// console.log(cirCulaRShifT(12, 20))\n// console.log(cirCulaRShifT(12, 21))\n// console.log(cirCulaRShifT(12, 22))\n// console.log(cirCulaRShifT(12, 23))\n// console.log(cirCulaRShifT(12, 24))\n// console.log(cirCulaRShifT(12, 25))\n// console.log(cirCulaRShifT(12, 26))\n// console.log(cirCulaRShifT(12, 27))\n// console.log(cirCulaRShifT(12, 28))\n// console.log(cirCulaRShifT(12, 29))\n// console.log(cirCulaRShifT(12, 30))\n// console.log(cirCulaRShifT(12, 31))\n// console.log(cirCulaRShifT(12, 32))\n// console.log(cirCulaRShifT(12, 33))\n// console.log(cirCulaRShifT(12, 34))\n// console.log(cirCulaRShifT(12, 35))\n// console.log(cirCulaRShifT(12, 36))\n// console.log(cirCulaRShifT(12, 37))\n// console.log(cirCulaRShifT(12, 38))\n// console.log(cirCulaRShifT(12, 39))\n// console.log(cirCulaRShifT(12, 40))\n// console.log(cirCulaRShifT(12, 41))\n// console.log(cirCulaRShifT(12, 42))\n// console.log(cirCulaRShifT(12, 43))\n// console.log(cirCulaRShifT(12, 44))\n// console.log(cirCulaRShifT(12, 45))\n// console.log(cirCulaRShifT(12, 46))\n// console.log(cirCulaRShifT(12, 47))\n// console.log(cirCulaRShifT(12, 48))\n// console.log(cirCulaRShifT(12, 49))\n// console.log(cirCulaRShifT(12, 50))\n// console.log(cirCulaRShifT(12, 51))\n// console.log(cirCulaRShifT(12, 52))\n// console.log(cirCulaRShifT(12, 53))\n// console.log(cirCulaRShifT(12, 54))\n// console.log(cirCulaRShifT(12, 55))\n// console.log(cirCulaRShifT(12, 56))\n// console.log(cirCulaRShifT(12, 57))\n// console.log(cirCulaRShifT(12, 58))\n// console.log(cirCulaRShifT(12, 59))\n// console.log(cirCulaRShifT(12, 60))\n// console.log(cirCulaRShifT(12, 61))\n// console.log(cirCulaRShifT(12, 62))\n// console.log(cirCulaRShifT(12, 63))\n// console.log(cirCulaRShifT(12, 64))\n// console.log(cirCulaRShifT(12, 65))\n// console.log(cirCulaRShifT(12, 66))\n// console."}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  return s.toUpperCase()\n   .replace(/\\W/g, \"\")\n   .match(/[A-Z]{2}/g)\n   .reduce((a, b) => a + b.toUpperCase(), 0)\n}\n\nconsole.log(digItSuM(\"aAaaaXa\"))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n    let napples = s.split(\" \").reduce((a, b) => parseInt(a) + parseInt(b));\n    let oranges = s.split(\" \").reduce((a, b) => parseInt(a) + parseInt(b));\n    let mango = s.split(\" \").reduce((a, b) => parseInt(a) + parseInt(b));\n    let nfruits = n - napples - oranges;\n    let nmango = n - nfruits;\n    return nmango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the apples and oranges and the total number of the fruits in the basket return the number\n  of the apples in the basket.\n  for example:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) -> 5\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 0\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 2\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 100\n  */\nconst fruItDiStribUtiOn1 = (s, n) => {\n    let napples = s.split(\" \").reduce((a, b) => parseInt(a) + parseInt(b));\n    let oranges = s.split(\" \").reduce((a, b) => parseInt(a) + parseInt(b));\n    let mango = s.split(\" \").reduce((a, b) => parseInt(a) + parseInt(b));\n    let nfruits = n - napples;\n    let nmango = n - oranges - mango;\n    return napples;\n};\n\nmodule.exports = fruItDiStribUtiOn;\nmodule.exports = fruItDiStribUtiOn1;<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  let minValue = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    }\n\n    let value = arr[i];\n\n    if (value % 2 === 0) {\n      if (value < min) {\n        min = value;\n        minIndex = i;\n        minValue = value;\n      }\n    }\n  }\n\n  return [minValue, minIndex];\n};\n\nexport default pluCk;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let last = lst[0];\n  let res = last;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > last) {\n      last = lst[i];\n      res = lst[i];\n    }\n  }\n  return res;\n};\n\nconsole.log(seaRch([4, 1, 2, 2, 3, 1]));\nconsole.log(seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(seaRch([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  return lst.reduce((acc, val) => {\n    if (acc.length === 0) {\n      acc.push(val);\n    } else {\n      acc[acc.length - 1] = Math.max(acc[acc.length - 1], val);\n    }\n    return acc;\n  }, []);\n};\n\nmodule.exports = strAngesortLIst;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b < c || b + c < a || c + a < b) {\n    return -1;\n  } else {\n    return Math.round(((a + b) * (c - b) / 2) * 10) / 10;\n  }\n};\n\nconst getTriangleArea = (a, b, c) => {\n  return triAnglEArea(a, b, c);\n};\n\nconst getMax = (a, b) => {\n  return Math.max(a, b);\n};\n\nconst getMin = (a, b) => {\n  return Math.min(a, b);\n};\n\nconst getMinMax = (a, b, c) => {\n  return [getMin(a, b), getMax(a, b), getMin(a, b), getMax(a, b)];\n};\n\nconst getSum = (a, b, c) => {\n  return getMin(a, b) + getMax(a, b) + getMin(a, b) + getMax(a, b);\n};\n\nconst getArea = (a, b, c) => {\n  return getSum(a, b, c) / 2;\n};\n\nconst getMedian = (a, b) => {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst getMedianValue = (a, b) => {\n  const [a1, b1] = getMedian(a, b);\n  if (a1 > b1) {\n    return b1;\n  } else {\n    return a1;\n  }\n};\n\nconst getMidPoint = (a, b) => {\n  return [getMinMax(a, b, getSum(a, b, a))[0], getMinMax(a, b, getSum(a, b, b))[1]];\n};\n\nconst getDistance = (a, b) => {\n  const [a1, b1] = getMidPoint(a, b);\n  return getDistance(a1, b1);\n};\n\nconst getDistanceFrom = (a, b, c) => {\n  return getDistance(getMidPoint(a, b), getMidPoint(b, c));\n};\n\nconst getPerimeter = (a, b) => {\n  return getDistance(a, b) + getDistance(b, a);\n};\n\nconst getCircumference = (a, b, c) => {\n  return getPerimeter(a, b) + getPerimeter(b, c) + getPerimeter(c, a);\n};\n\nconst getDiameter = (a, b) => {\n  return getCircumference(a, b) / 2;\n};\n\nconst getAverage = (a, b) => {\n  return (a + b) / 2;\n};\n\nconst getLargest = (a, b) => {\n  return getMax(a, b);\n};\n\nconst getSmallest = (a, b) => {\n  return getMin(a, b);\n};\n\nconst getElevation = (a, b, c) => {\n  return getAverage(a, b, c);\n};\n\nconst getAscension = (a, b, c) => {\n  const [a1, b1] = getMedian(a, b);\n  return getDistance(a1, b1) - getElevation(a1, b1, c);\n};\n\nconst getDeclension = (a, b, c) => {\n  const [a1, b1] = getMedian(a, b);\n  return getElevation(a1, b1, c) - getDistance(a1, b1);\n};\n\nconst getDeclination = (a, b, c) => {\n  const [a1, b1] = getMedian(a, b);\n  return getDeclension(a1, b1, c);\n};\n\nconst getAscensionDeclination = (a, b) => {\n  const [a1, b1] = getMedian(a, b);\n  return [getAscension(a1, b1, a), getDeclension(a1, b1, a)];\n};\n\nconst getPolarDiameter = (a, b) => {\n  return getDistance(getMidPoint(a, b), getMidPoint(a, b));\n};\n\nconst getDiameterInRadians = (a, b) => {\n  return getPolarDiameter(a, b) * Math.PI / 180;\n};\n\nconst getDiameterInRadiansFrom = (a, b, c) => {\n  const [a1, b1, c1] = getMidPoint(a, b, c);\n  return getDiameterInRadians(a1, b1) + getDiameterInRadians(b1, c1);\n};\n\nconst getAreaInRadians = (a, b, c) => {\n  return getDiameterInRadiansFrom(a, b, c) * Math.PI;\n};\n\nconst getAreaInRadiansFrom = (a, b, c) => {\n  const [a1, b1, c1] = getMidPoint(a, b, c);\n  return getAreaInRadians(a1, b1, c1);\n};\n\nconst getTriangleAreaInRadians = (a, b, c) => {\n  return getAreaInRadiansFrom(a, b, c);\n};\n\nconst getTriangleAreaInRadiansFrom = (a, b, c) => {\n  const [a1, b1, c1] = getMidPoint(a, b, c);\n  return getTriangleAreaInRadians(a1, b1, c1);\n};\n\nconst getTriangleAreaInDegrees = (a, b, c) => {\n  return getTriangleAreaInRadians(a"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n    let l = q.length;\n    let s = 0;\n    for (let i = 0; i < l; i++) {\n        s += q[i];\n    }\n    return s <= w && l >= 2 && s % l === 0;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy2 = (q, w) => {\n    let l = q.length;\n    let s = 0;\n    for (let i = 0; i < l; i++) {\n        s += q[i];\n    }\n    return l >= 2 && s <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy3 = (q, w) => {\n    let l = q.length;\n    let s = 0;\n    for (let i = 0; i < l; i++) {\n        s += q[i];\n    }\n    return l >= 2 && s <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy4 = (q, w) => {\n    let l = q.length;\n    let s = 0;\n    for (let i = 0; i < l; i++) {\n        s += q[i];\n    }\n    return l >= 2 && s <= w;\n};\n\nexport default {\n    wilLItFLy,\n    wilLItFLy2,\n    wilLItFLy3,\n    wilLItFLy4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n    if(arr.length === 0) return 0;\n    if(arr.length === 1) return 0;\n    let min = arr.length;\n    let middle = arr.length / 2;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i] === arr[middle]){\n                if(i < middle){\n                    min = Math.min(min, middle - i);\n                }else{\n                    min = Math.min(min, middle + i);\n                }\n            }\n        }else{\n            if(arr[i] === arr[middle]){\n                if(i < middle){\n                    min = Math.min(min, middle - i);\n                }else{\n                    min = Math.min(min, middle + i);\n                }\n            }\n        }\n    }\n    return min;\n};\n\nmodule.exports = smaLlesTChanGe;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1!== len2) {\n    return lst1;\n  }\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] < lst2[j]) {\n      result.push(lst1[i]);\n      i++;\n    } else {\n      result.push(lst2[j]);\n      j++;\n    }\n  }\n  if (i === len1) {\n    result.push.apply(result, lst1.slice(i));\n  } else if (j === len2) {\n    result.push.apply(result, lst2.slice(j));\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  let res = false;\n\n  for (let i = 1; i <= 100; i++) {\n    let p1 = prime(i);\n    let p2 = prime(i * 2);\n    let p3 = prime(i * 3);\n    if (p1 * p2 * p3 === a) {\n      res = true;\n      break;\n    }\n  }\n\n  return res;\n}\n\nconsole.log(isMUltiPlyPrIme(30));\nconsole.log(isMUltiPlyPrIme(100));\nconsole.log(isMUltiPlyPrIme(1000));\nconsole.log(isMUltiPlyPrIme(1000));\nconsole.log(isMUltiPlyPrIme(2000));\nconsole.log(isMUltiPlyPrIme(3000));\nconsole.log(isMUltiPlyPrIme(5000));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  const xInt = x - n * Math.floor(x / n);\n  return xInt === x;\n};\n\nexport { isSImplEPoweR };\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  const int = a.toString().replace(/\\D/g, '');\n  if (int === '') {\n    return true;\n  }\n  const n = parseInt(int);\n  if (n < 1) {\n    return false;\n  }\n  let i = n;\n  while (i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default iscUbe;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let sum = 0;\n  let numLength = num.length;\n  let numChars = [];\n  let currentChar = 0;\n  numChars = num.split(\"\");\n\n  for (let i = 0; i < numChars.length; i++) {\n    if (numChars[i] === \"A\" || numChars[i] === \"B\" || numChars[i] === \"C\" || numChars[i] === \"D\" || numChars[i] === \"E\" || numChars[i] === \"F\") {\n      sum += parseInt(numChars[i]);\n    } else if (numChars[i] === \"0\" || numChars[i] === \"1\" || numChars[i] === \"2\" || numChars[i] === \"3\" || numChars[i] === \"4\" || numChars[i] === \"5\" || numChars[i] === \"6\" || numChars[i] === \"7\" || numChars[i] === \"8\" || numChars[i] === \"9\") {\n      sum += parseInt(numChars[i]);\n    }\n  }\n  return sum;\n};\n\nmodule.exports = hexkey;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  return (decimal & 1? '1' : '0') + (decimal >> 1 & 1? '1' : '0') + (decimal >> 2 & 1? '1' : '0') + (decimal >> 3 & 1? '1' : '0') + (decimal >> 4 & 1? '1' : '0') + (decimal >> 5 & 1? '1' : '0') + (decimal >> 6 & 1? '1' : '0') + (decimal >> 7 & 1? '1' : '0') + (decimal >> 8 & 1? '1' : '0') + (decimal >> 9 & 1? '1' : '0') + (decimal >> 10 & 1? '1' : '0') + (decimal >> 11 & 1? '1' : '0') + (decimal >> 12 & 1? '1' : '0') + (decimal >> 13 & 1? '1' : '0') + (decimal >> 14 & 1? '1' : '0') + (decimal >> 15 & 1? '1' : '0') + 'db';\n};\n\nconst binToDec = (bin) => {\n  return parseInt(bin.slice(1, -1), 2);\n};\n\nconst decToBin = (decimal) => {\n  return decImaltoBinAry(decimal) + 'db';\n};\n\nexport {\n  binToDec,\n  decToBin,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  let len = s.length\n  if (len < 3) {\n    return false\n  }\n\n  let last = 0\n  for (let i = 0; i < len - 2; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2]) {\n      return false\n    }\n    if (i === len - 2) {\n      return true\n    }\n    if (s[i]!== s[i + 1] || s[i]!== s[i + 2]) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isHAppy('abc'))\nconsole.log(isHAppy('abcd'))\nconsole.log(isHAppy('adb'))\nconsole.log(isHAppy('aabb'))\nconsole.log(isHAppy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n    let nums = [];\n    let len = grades.length;\n    for (let i = 0; i < len; i++) {\n        let num = parseFloat(grades[i]);\n        let grade = 0;\n        if (num >= 4.0) {\n            grade = 'A+';\n        } else if (num > 3.7) {\n            grade = 'A';\n        } else if (num > 3.3) {\n            grade = 'A-';\n        } else if (num > 3.0) {\n            grade = 'B+';\n        } else if (num > 2.7) {\n            grade = 'B';\n        } else if (num > 2.3) {\n            grade = 'B-';\n        } else if (num > 2.0) {\n            grade = 'C+';\n        } else if (num > 1.7) {\n            grade = 'C';\n        } else if (num > 1.3) {\n            grade = 'C-';\n        } else if (num > 1.0) {\n            grade = 'D+';\n        } else if (num > 0.7) {\n            grade = 'D';\n        } else if (num > 0.0) {\n            grade = 'D-';\n        } else {\n            grade = 'E';\n        }\n        nums.push(grade);\n    }\n    return nums;\n}\n\n/*\n  numEricAlLetTergrade2(grades)\n  \n  Given a list of GPAs, returns a list of letter grades.\n\n  Example:\n  numEricAlLetTergrade2([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade2 = (grades) => {\n    let nums = [];\n    let len = grades.length;\n    for (let i = 0; i < len; i++) {\n        let num = parseFloat(grades[i]);\n        let grade = 0;\n        if (num >= 4.0) {\n            grade = 'A+';\n        } else if (num > 3.7) {\n            grade = 'A';\n        } else if (num > 3.3) {\n            grade = 'A-';\n        } else if (num > 3.0) {\n            grade = 'B+';\n        } else if (num > 2.7) {\n            grade = 'B';\n        } else if (num > 2.3) {\n            grade = 'B-';\n        } else if (num > 2.0) {\n            grade = 'C+';\n        } else if (num > 1.7) {\n            grade = 'C';\n        } else if (num > 1.3) {\n            grade = 'C-';\n        } else if (num > 1.0) {\n            grade = 'D+';\n        } else if (num > 0.7) {\n            grade = 'D';\n        } else if (num > 0.0) {\n            grade = 'D-';\n        } else {\n            grade = 'E';\n        }\n        nums.push(grade);\n    }\n    return nums;\n}\n\n/*\n  numEricAlLetTergrade3(grades)\n  \n  Given a list of GPAs, returns a list of letter grades.\n\n  Example:\n  numEricAlLetTergrade3([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade3 = (grades) => {\n    let nums = [];\n    let len = grades.length;\n    for (let i = 0; i < len; i++) {\n        let num = parseFloat(grades[i]);\n        let grade = 0;\n        if (num >= 4.0) {\n            grade = 'A+';\n        } else if (num > 3.7) {\n            grade = 'A';\n        } else if (num > 3.3) {\n            grade = 'A-';\n        } else if (num > 3.0) {\n            grade = 'B+';\n        } else if (num > 2.7) {\n            grade = 'B';\n        } else if (num > 2.3) {\n            grade = 'B-';\n        } else if (num > 2.0) {\n            grade = 'C+';\n        } else if (num > 1.7) {\n            grade = 'C';\n        } else if (num > 1.3) {\n            grade = 'C-';\n        } else if (num > 1.0) {\n            grade = 'D+';\n        } else if (num > 0.7) {\n            grade = 'D';\n        } else if (num > 0.0) {\n            grade = 'D-';\n        } else {\n            grade = 'E';\n        }\n        nums.push(grade);\n    }\n    return nums;\n}\n\n/*\n  numEricAlLetTergrade4(grades)\n  \n  Given a list of GPAs, returns a list of letter grades.\n\n  Example:\n  numEricAlLetTergrade4([4.0, 3, 1.7, 2, 3.5]) ==> ['"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n    if(!isPrime(string.length)) {\n        return false;\n    }\n    const prime = new Set(primes);\n    for (let i = 2; i < string.length; i++) {\n        if (prime.has(string[i])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconsole.log(priMeLeNgth('Hello'));\nconsole.log(priMeLeNgth('kittens'));\nconsole.log(priMeLeNgth('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let counter = 0;\n  while (n--) {\n    let i = Math.floor(Math.random() * 10) + 1;\n    while (i--) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\nexport default {\n  staRtsONeEndS\n};\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  const n = (N | 0).toString(2);\n  const len = n.length;\n  const sum = n.reduce((a, b, i) => (a + parseInt(b)), 0);\n  return (sum === N)? `1` : `0${len - 1}0${n}`;\n};\n\nexport default solVe;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for(let i = 0; i < lst.length; i+=2) {\n        result += lst[i];\n    }\n    return result;\n}\n\nconst add2 = (lst) => {\n    let result = 0;\n    for(let i = 1; i < lst.length; i+=2) {\n        result += lst[i];\n    }\n    return result;\n}\n\nconsole.log(add([4, 2, 6, 7]));\nconsole.log(add2([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n    let result = s.replace(/\\s+/g,'')\n       .replace(/[^a-zA-Z]+/g, (char) => char.charCodeAt(0) - 32)\n       .replace(/^\\s+/,'')\n       .replace(/\\s+$/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/,'')\n       .replace(/\\s+/g,'')\n       .replace(/^\\s+/, '"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  if (!lst || lst.length === 0) {\n    return [];\n  }\n  let [row, cols] = lst;\n  row.sort(function(a, b) {\n    return a - b;\n  });\n  cols.sort(function(a, b) {\n    return b - a;\n  });\n  const [rows, cols2] = lst;\n  const cols2.sort(function(a, b) {\n    return a - b;\n  });\n  \n  const map = new Map();\n  for (let i = 0; i < rows.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      const [row, col] = [rows[i], cols[j]];\n      const [row2, col2] = [rows[i], cols2[j]];\n      if (row === row2) {\n        const [x1, y1] = [col, row];\n        const [x2, y2] = [col2, row2];\n        const tuple = [x1, y1, x2, y2];\n        if (map.has(tuple)) {\n          continue;\n        }\n        map.set(tuple, true);\n        return tuple;\n      }\n    }\n  }\n  return [];\n}\n\nconst getrow2 = (lst, x) => {\n  if (!lst || lst.length === 0) {\n    return [];\n  }\n  const [row, cols] = lst;\n  const cols.sort(function(a, b) {\n    return a - b;\n  });\n  const map = new Map();\n  for (let i = 0; i < row.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      const [row, col] = [row[i], cols[j]];\n      if (row === row[i]) {\n        const [x1, y1] = [col, row];\n        const [x2, y2] = [col, row];\n        const tuple = [x1, y1, x2, y2];\n        if (map.has(tuple)) {\n          continue;\n        }\n        map.set(tuple, true);\n        return tuple;\n      }\n    }\n  }\n  return [];\n}\n\nconst getrow3 = (lst, x) => {\n  if (!lst || lst.length === 0) {\n    return [];\n  }\n  const [row, cols] = lst;\n  const cols.sort(function(a, b) {\n    return a - b;\n  });\n  const map = new Map();\n  for (let i = 0; i < row.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      const [row, col] = [row[i], cols[j]];\n      if (row === row[i]) {\n        const [x1, y1] = [col, row];\n        const [x2, y2] = [col, row];\n        const tuple = [x1, y1, x2, y2];\n        if (map.has(tuple)) {\n          continue;\n        }\n        map.set(tuple, true);\n        return tuple;\n      }\n    }\n  }\n  return [];\n}\n\nconst getrow4 = (lst, x) => {\n  if (!lst || lst.length === 0) {\n    return [];\n  }\n  const [row, cols] = lst;\n  const cols.sort(function(a, b) {\n    return b - a;\n  });\n  const map = new Map();\n  for (let i = 0; i < row.length; i++) {\n    for (let j = 0; j < cols.length; j++) {\n      const [row, col] = [row[i], cols[j]];\n      if (col === cols[j]) {\n        const [x1, y1] = [col, row];\n        const [x2, y2] = [col, row];\n        const tuple = [x1, y1, x2, y2];\n        if (map.has(tuple)) {\n          continue;\n        }\n        map.set(tuple, true);\n        return tuple;\n      }\n    }\n  }\n  return [];\n}\n\nconst main = () => {\n  const lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n  const x = 3;\n  console.log(getrow(lst, x));\n  console.log(getrow2(lst, x));\n  console.log(getrow3(lst, x));\n  console.log(getrow4(lst, x));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const temp = []\n\n  for (let i = 0; i < array.length; i++) {\n    let sum = 0\n\n    for (let j = i; j < array.length; j++) {\n      sum += array[j]\n    }\n\n    if (sum % 2 === 1) {\n      for (let j = i; j < array.length; j++) {\n        temp.push(array[j])\n      }\n    }\n  }\n\n  return temp.concat(array)\n}\n\nmodule.exports = sorTArrAy\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  const len = s.length;\n  let c;\n  const n = len / 2;\n  let m = 0;\n  let i = 0;\n  let j = 0;\n  let sb = '';\n  while (i < len) {\n    c = s.charCodeAt(i++);\n    if (i == n) {\n      sb += s.charAt(m++);\n      if (m == n) {\n        m = 0;\n      }\n    }\n    else {\n      if (i < n) {\n        sb += s.charAt(i);\n      }\n      else {\n        if (m == 0) {\n          sb += s.charAt(j++);\n        }\n        else {\n          sb += s.charAt(m++);\n        }\n      }\n      i++;\n    }\n  }\n  return sb;\n}\n\n/*\n  Create a function decRypt that takes a string as an argument and\n  returns a string decRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decRypt('lm') returns 'hi'\n  decRypt('ewhjklnop') returns 'asdfghjkl'\n  decRypt('kj') returns 'gf'\n  decRypt('ix') returns 'et'\n  */\nconst decRypt = (s) => {\n  const len = s.length;\n  let c;\n  const n = len / 2;\n  let m = 0;\n  let i = 0;\n  let j = 0;\n  let sb = '';\n  while (i < len) {\n    c = s.charCodeAt(i++);\n    if (i == n) {\n      sb += s.charAt(--m);\n      if (m == -1) {\n        m = len - 1;\n      }\n    }\n    else {\n      if (i < n) {\n        sb += s.charAt(i);\n      }\n      else {\n        if (m == len - 1) {\n          sb += s.charAt(--j);\n        }\n        else {\n          sb += s.charAt(m--);\n        }\n      }\n      i++;\n    }\n  }\n  return sb;\n}\n\n/*\n  Create a function isValid that takes a string as an argument and\n  returns a boolean stating whether the string is valid or not.\n  The string must be a palindrome, and it may not contain any\n  duplicates.\n  For example:\n  isValid('tortoise') returns true\n  isValid('asdf') returns false\n  isValid('lzq') returns false\n  */\nconst isValid = (s) => {\n  const len = s.length;\n  if (len % 2 == 1) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (s.charCodeAt(i++)!= s.charCodeAt(--j)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Create a function rot13 that takes a string as an argument and\n  returns a string with the alphabet shifted.\n  For example:\n  rot13('hi') returns 'hoi'\n  rot13('asdfghjkl') returns 'qybxegknm'\n  rot13('gf') returns 'vhgf'\n  rot13('et') returns 'txyef'\n  */\nconst rot13 = (s) => {\n  const len = s.length;\n  let c;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    c = s.charCodeAt(i++);\n    if (c >= 97 && c <= 122) {\n      c = (c - 97) + 13;\n    }\n    else if (c >= 65 && c <= 90) {\n      c = (c - 65) + 13;\n    }\n    else if (c >= 48 && c <= 57) {\n      c = (c - 48) + 13;\n    }\n    else {\n      c = (c - 32) + 13;\n    }\n    s = s.charAt(j) + String.fromCharCode(c);\n    j++;\n  }\n  return s;\n}\n\n/*\n  Create a function shuffle that takes a string as an argument and\n  returns a string with the letters shuffled.\n  For example:\n  shuffle('tortoise') returns 'togotr'\n  shuffle('qybxegknm') returns 'knmqtog'\n  */\nconst shuffle = (s) => {\n  const len = s.length;\n  let c;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    c = s.charCodeAt(i++);\n    if (Math.random() < 0.5) {\n      j++;\n    }\n    else {\n      j--;\n    }\n    if (j == len) {\n      j = 0;\n    }\n    s = s.charAt(j) + String.fromCharCode(c);\n  }\n  return s;\n}\n\nconst test = (type, s) => {\n  const r = encRypt(s);\n  console.log(type + ':'+ s +'=>'+ r);\n  console.log(type + ':'+ s +'=>'+ decRypt(r));\n  console.log(type + ':'+ s +'=>'+ rot13(r));\n  console.log(type + ':'+ s +'=>'+ shuffle(r));\n  console.log(type + ':'+ s"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  const len = lst.length\n  const last = lst[len - 1]\n  let min = last\n  for (let i = 0; i < len - 1; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  if (min === last) {\n    return null\n  }\n  return min\n}\n\nconst isArray = (val) => {\n  return Object.prototype.toString.call(val) === '[object Array]'\n}\n\nconst isObject = (val) => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nconst isNumber = (val) => {\n  return!isNaN(val) && isFinite(val)\n}\n\nconst isInteger = (val) => {\n  return isNumber(val) && Math.floor(val) === val\n}\n\nconst isFloat = (val) => {\n  return isNumber(val) && val.toString().indexOf('.')!== -1\n}\n\nconst isArrayLike = (val) => {\n  return Array.isArray(val) ||\n    isObject(val) ||\n    isArray(val)\n}\n\nconst flatten = (arr) => {\n  if (isArrayLike(arr)) {\n    return arr.reduce((acc, val) => acc.concat(val), [])\n  } else {\n    return arr\n  }\n}\n\nconst has = (val, key) => {\n  return key in val\n}\n\nconst get = (val, key) => {\n  return val[key]\n}\n\nconst merge = (o1, o2) => {\n  const o3 = {}\n  Object.keys(o1).forEach(key => {\n    o3[key] = o1[key]\n  })\n  Object.keys(o2).forEach(key => {\n    o3[key] = o2[key]\n  })\n  return o3\n}\n\nconst getNumber = (val) => {\n  if (isArray(val)) {\n    return val.reduce((acc, num) => {\n      if (!isNumber(acc)) {\n        return acc\n      }\n      if (!isInteger(acc)) {\n        return acc\n      }\n      if (isInteger(num)) {\n        return acc + num\n      }\n      if (isFloat(num)) {\n        return acc + num.toFixed(2)\n      }\n      return acc\n    }, 0)\n  } else {\n    return isNumber(val)? val : 0\n  }\n}\n\nconst isZero = (val) => {\n  return getNumber(val) === 0\n}\n\nconst isPositive = (val) => {\n  return getNumber(val) >= 0\n}\n\nconst isNegative = (val) => {\n  return getNumber(val) < 0\n}\n\nconst toNumber = (val) => {\n  return getNumber(val)\n}\n\nconst add = (a, b) => {\n  return a + b\n}\n\nconst sub = (a, b) => {\n  return a - b\n}\n\nconst mul = (a, b) => {\n  return a * b\n}\n\nconst div = (a, b) => {\n  return a / b\n}\n\nconst mod = (a, b) => {\n  return a % b\n}\n\nconst pow = (a, b) => {\n  return Math.pow(a, b)\n}\n\nconst isZero = (val) => {\n  return getNumber(val) === 0\n}\n\nconst isPositive = (val) => {\n  return getNumber(val) >= 0\n}\n\nconst isNegative = (val) => {\n  return getNumber(val) < 0\n}\n\nconst toNumber = (val) => {\n  return getNumber(val)\n}\n\nconst add = (a, b) => {\n  return a + b\n}\n\nconst sub = (a, b) => {\n  return a - b\n}\n\nconst mul = (a, b) => {\n  return a * b\n}\n\nconst div = (a, b) => {\n  return a / b\n}\n\nconst mod = (a, b) => {\n  return a % b\n}\n\nconst pow = (a, b) => {\n  return Math.pow(a, b)\n}\n\nconst isZero = (val) => {\n  return getNumber(val) === 0\n}\n\nconst isPositive = (val) => {\n  return getNumber(val) >= 0\n}\n\nconst isNegative = (val) => {\n  return getNumber(val) < 0\n}\n\nconst toNumber = (val) => {\n  return getNumber(val)\n}\n\nconst add = (a, b) => {\n  return a + b\n}\n\nconst sub = (a, b) => {\n  return a - b\n}\n\nconst mul = (a, b) => {\n  return a * b\n}\n\nconst div = (a, b) => {\n  return a / b\n}\n\nconst mod = (a, b) => {\n  return a % b\n}\n\nconst pow = (a, b) => {\n  return Math.pow(a, b)\n}\n\nconst isZero = (val) => {\n  return getNumber(val) === 0\n}\n\nconst isPositive = (val) => {\n  return getNumber(val) >= 0\n}\n\nconst isNegative = (val) => {\n  return getNumber(val) < 0\n}\n\nconst toNumber = (val) => {\n  return getNumber(val)\n}\n\nconst add = (a, b) => {\n  return a + b\n}\n\nconst sub = (a, b) => {"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n    let s = S.split(\".\");\n    let count = 0;\n    s.forEach(word => {\n        if (word.match(/^I/) && count > 0) {\n            count--;\n        } else if (word.match(/^I/) && count === 0) {\n            count++;\n        }\n    });\n    return count;\n}\n\nmodule.exports = isBOred;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  if (!isNumber(x) ||!isNumber(y) ||!isNumber(z)) {\n    return false;\n  }\n  if (Math.abs(x - z) <= 1) {\n    return true;\n  }\n  if (Math.abs(x - y) <= 1) {\n    return true;\n  }\n  if (Math.abs(y - z) <= 1) {\n    return true;\n  }\n  if (x < y && x < z) {\n    return true;\n  }\n  if (y < x && y < z) {\n    return true;\n  }\n  if (z < x && z < y) {\n    return true;\n  }\n  return false;\n};\n\nexport default anyint;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  const msgLength = message.length;\n  let encodedMsg = '';\n  let index = 0;\n  while (index < msgLength) {\n    if (message[index].toUpperCase() === message[index + 1].toUpperCase()) {\n      encodedMsg += message[index].toLowerCase();\n      index += 2;\n    } else {\n      encodedMsg += message[index].toUpperCase();\n      index++;\n    }\n  }\n  return encodedMsg;\n}\n\n/*\n  Write a function that takes a message, and decodes it in such a way \n  that it swaps case of all letters, and replaces all vowels in the \n  message with the letter that appears 2 places behind that vowel in \n  the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('TKS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const msgLength = message.length;\n  let encodedMsg = '';\n  let index = 0;\n  while (index < msgLength) {\n    if (message[index].toUpperCase() === message[index + 2].toUpperCase()) {\n      encodedMsg += message[index + 1].toLowerCase();\n      index += 2;\n    } else {\n      encodedMsg += message[index].toUpperCase();\n      index++;\n    }\n  }\n  return encodedMsg;\n}\n\nmodule.exports = {\n  encOde,\n  decode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  const [maxPrime, largestPrime] = largestPrimeInList(lst);\n  return largestPrime.sum(digit => largestPrime.indexOf(digit));\n};\n\n/*\n  This algorithm will find the largest prime number in the given list.\n  It returns an object with the largest prime number and the sum of its digits.\n  This is a recursive function.\n*/\nconst largestPrimeInList = (lst) => {\n  const [maxPrime, largestPrime] = largestPrimeInList(lst);\n  if (lst.length === 0) {\n    return largestPrime;\n  } else {\n    return largestPrimeInList([...lst, largestPrime.pop()]);\n  }\n};\n\nconst largestPrimeInList = (lst) => {\n  const max = lst.reduce((max, num) => num > max? num : max, 0);\n  const prime = [];\n  const number = 1;\n  const primes = [];\n  const maxPrime = max;\n  const primeValue = max;\n\n  while (number <= maxPrime) {\n    if (number % 2 === 0) {\n      primes.push(number);\n    }\n\n    number += 1;\n  }\n\n  if (primes.length === 0) {\n    return [maxPrime, largestPrime(lst)];\n  }\n\n  for (let i = 0; i < primes.length; i++) {\n    const prime = primes[i];\n    const num = 0;\n    for (let j = 0; j < lst.length; j++) {\n      num += prime;\n      num = num % 10;\n      if (num === 0) {\n        break;\n      }\n    }\n\n    if (num === 0) {\n      primeValue = prime;\n      largestPrime(lst.filter((n, index) => index!== i));\n    }\n  }\n\n  return largestPrime(lst.filter((n, index) => index!== lst.length - 1));\n};\n\nlargestPrime(lst);\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n    const keys = Object.keys(dict);\n    for (let i = 0; i < keys.length; i++) {\n        if (typeof dict[keys[i]] === \"string\") {\n            if (dict[keys[i].toLowerCase()]!== undefined) {\n                if (dict[keys[i].toLowerCase()].length!== 0) {\n                    return false;\n                }\n            }\n            if (dict[keys[i].toUpperCase()]!== undefined) {\n                if (dict[keys[i].toUpperCase()].length!== 0) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n    const keys = Object.keys(dict);\n    for (let i = 0; i < keys.length; i++) {\n        if (typeof dict[keys[i]] === \"string\") {\n            if (dict[keys[i].toLowerCase()]!== undefined) {\n                if (dict[keys[i].toLowerCase()].length!== 0) {\n                    return false;\n                }\n            }\n            if (dict[keys[i].toUpperCase()]!== undefined) {\n                if (dict[keys[i].toUpperCase()].length!== 0) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n};\n\nmodule.exports = {\n    cheCkDiCtCasE\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1957,1961,1967,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2299,2311,2323,2327,2341,2347,2357,2371,2377,2381,2383,2387,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2599,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2809,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  if (b == 0) {\n    return 0\n  }\n  if (a == 0) {\n    return 0\n  }\n  if (b > 0) {\n    return (Math.pow(10, a) * Math.pow(10, b))\n  } else {\n    return (Math.pow(10, -b) * Math.pow(10, a))\n  }\n}\n\n/*\n  Return the sum of all the values in the given array.\n  */\nconst sumOfArray = (array) => {\n  let sum = 0\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n  }\n  return sum\n}\n\n/*\n  Return the sum of all the values in the given array,\n  but then return them as a list of strings.\n  */\nconst sumOfArrayAsStrings = (array) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}`\n  }\n  return [str, sum]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumber = (array, number) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}`\n  }\n  return [str, sum - number]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumberAsStrings = (array, number) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}`\n  }\n  return [str, sum - number]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumberAsStringsWithDecimals = (array, number) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}`\n  }\n  return [str, sum - number]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumberAsStringsWithDecimalsWithSuffix = (array, number, suffix) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}${suffix}`\n  }\n  return [str, sum - number]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumberAsStringsWithDecimalsWithSuffixWithN = (array, number, n) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}${n}`\n  }\n  return [str, sum - number]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumberAsStringsWithDecimalsWithSuffixWithNAsStrings = (array, number, n) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}${n}`\n  }\n  return [str, sum - number]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumberAsStringsWithDecimalsWithSuffixWithNAsStringsWithSuffix = (array, number, n, suffix) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}${n}${suffix}`\n  }\n  return [str, sum - number]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumberAsStringsWithDecimalsWithSuffixWithNAsStringsWithSuffixWithSuffix = (array, number, n, suffix, suffix2) => {\n  let sum = 0\n  let str = ''\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    str += `${array[i]}${n}${suffix}${suffix2}`\n  }\n  return [str, sum - number]\n}\n\n/*\n  Return the difference between the sum of all the values in the\n  given array and the given number, as a list of strings.\n  */\nconst differenceOfSumOfArrayAndNumberAsStringsWithDecimalsWithSuffixWithNAsStringsWithSuffixWithSuffixWithSuffix = ("}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n    return s.split('').reduce((acc, char, index) => {\n        if (index % 2 === 0) {\n            acc += char.toUpperCase() === char? 1 : 0;\n        }\n        return acc;\n    }, 0);\n};\n\nconsole.log(couNtUpPer('aBCdEf'));\nconsole.log(couNtUpPer('abcdefg'));\nconsole.log(couNtUpPer('dBBE'));<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num == floor || num == ceil) return num;\n  if (num > floor && num < ceil) return ceil;\n  if (num > ceil) return floor;\n  if (num < floor) return ceil;\n  if (num == floor + Math.abs(floor - ceil)) return floor;\n  return ceil;\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr2 = (value) => {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num == floor || num == ceil) return num;\n  if (num > floor && num < ceil) return ceil;\n  if (num > ceil) return floor;\n  if (num < floor) return ceil;\n  if (num == floor + Math.abs(floor - ceil)) return floor;\n  return ceil;\n};\n\nmodule.exports = {\n  cloSestintegEr,\n  cloSestintegEr2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  const r = n % 2;\n  return [r, n - r];\n}\n\nconst sum = (a, b) => a + b;\n\nmodule.exports = {\n  sum,\n  makEAPiLe\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  if (!s) return null;\n  const split = s.split(/(?=[^A-Z])/);\n  return split;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return -1;\n};\n\nmodule.exports = {\n  choOseNUm\n};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  let result = n + m;\n  let avg = Math.round(result / 2);\n  return Math.abs(avg - result) < 10? avg.toString(2) : -1;\n};\n\nconsole.log(rouNdedavg(1, 5));\nconsole.log(rouNdedavg(7, 5));\nconsole.log(rouNdedavg(10, 20));\nconsole.log(rouNdedavg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i += 1) {\n    const c = x[i];\n    const isEven = c % 2 === 0;\n    if (!isEven) {\n      res.push(c);\n    }\n  }\n  return res.sort((a, b) => a - b);\n}\n\nconst uniQueDIgitsTest = (x) => {\n  console.log(uniQueDIgits(x));\n}\n\nuniQueDIgitsTest([152, 323, 1422, 10]);\nuniQueDIgitsTest([1, 15, 33]);\nuniQueDIgitsTest([15, 33]);\nuniQueDIgitsTest([15, 33, 1422, 1]);\nuniQueDIgitsTest([1, 15, 33, 1422, 1]);\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \n  \"Eighteen\", \"Nineteen\".\n\n  For example:\n    arr = [1, 3, 5, 8, 9]\n          -> sort arr -> [1, 3, 5, 8, 9]\n          -> reverse arr -> [9, 8, 5, 3, 1]\n    return [\"Nineteen\", \"Eighteen\", \"Seventeen\", \"Sixteen\", \"Fifteen\", \"Fourteen\", \"Thirteen\", \n           \"Twelve\", \"Eleven\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['Ten']\n  */\nconst byLenghtH = (arr) => {\n  arr.sort((a, b) => {\n    return b - a;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArrayLEngtH = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArrayLenghtH = (arr) => {\n  arr.sort((a, b) => {\n    return b - a;\n  });\n  return arr.reverse();\n};\n\nconst byArrayLenghtHReversed = (arr) => {\n  arr.sort((a, b) => {\n    return b - a;\n  });\n  return arr.reverse();\n};\n\nconst byArrayLenghtHReversedReversed = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  return arr.reverse();\n};\n\nconst byArray = (arr) => {\n  arr.sort(("}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const list = []\n  for (let i = 1; i <= n; i++) {\n    const number = factorial(i)\n    list.push(number)\n  }\n  return list\n}\n\nconst factorial = (n) => {\n  let f = 1\n  for (let i = n; i > 1; i--) {\n    f *= i\n  }\n  return f\n}\n\nf(5)\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n    const even = []\n    const odd = []\n    for (let i = 1; i < n; i++) {\n        const x = i\n        if (x % 2 === 0) {\n            even.push(x)\n        } else {\n            odd.push(x)\n        }\n    }\n    return {\n        even: even,\n        odd: odd\n    }\n}\n\nmodule.exports = eveNOddpalinDroMe\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i]\n    while (num) {\n      if (num < 0) {\n        num = num - (num % 10)\n      } else {\n        num = num * 10\n      }\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countLetters which takes a string and returns the\n  number of letters in the string.\n  >>> countLetters('') == 0\n  >>> countLetters('a') == 1\n  >>> countLetters('aa') == 2\n  >>> countLetters('ab') == 1\n  >>> countLetters('abc') == 3\n  >>> countLetters('abcd') == 1\n  */\nconst countLetters = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countLetters which takes a string and returns the\n  number of letters in the string.\n  >>> countLetters('abcd') == 2\n  */\nconst countLetters = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countLetters which takes a string and returns the\n  number of letters in the string.\n  >>> countLetters('abcd') == 2\n  */\nconst countLetters = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function isPalindrome which takes a string and returns true\n  if the string is a palindrome.\n  >>> isPalindrome('a')\n  >>> isPalindrome('ab')\n  >>> isPalindrome('abcd')\n  >>> isPalindrome('dabcd')\n  >>> isPalindrome('abbccd')\n  >>> isPalindrome('a')\n  >>> isPalindrome('')\n  >>> isPalindrome('')\n  */\nconst isPalindrome = (str) => {\n  let tmp = str.split('')\n  return tmp.reverse().join('') === str\n}\n\n/*\n  Write a function isPalindrome which takes a string and returns true\n  if the string is a palindrome.\n  >>> isPalindrome('a')\n  >>> isPalindrome('ab')\n  >>> isPalindrome('abcd')\n  >>> isPalindrome('dabcd')\n  >>> isPalindrome('abbccd')\n  >>> isPalindrome('a')\n  >>> isPalindrome('')\n  >>> isPalindrome('')\n  */\nconst isPalindrome = (str) => {\n  let tmp = str.split('')\n  return tmp.reverse().join('') === str\n}\n\n/*\n  Write a function isPalindrome which takes a string and returns true\n  if the string is a palindrome.\n  >>> isPalindrome('a')\n  >>> isPalindrome('ab')\n  >>> isPalindrome('abcd')\n  >>> isPalindrome('dabcd')\n  >>> isPalindrome('abbccd')\n  >>> isPalindrome('a')\n  >>> isPalindrome('')\n  >>> isPalindrome('')\n  */\nconst isPalindrome = (str) => {\n  let tmp = str.split('')\n  return tmp.reverse().join('') === str\n}\n\n/*\n  Write a function findLargestPalindrome which takes an array of\n  strings and returns the largest palindrome in the array.\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e'])\n  'edcba'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e', 'd'])\n  'edcdcba'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e', 'f'])\n  'f'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'g'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n  'h'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  'i'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  'ij'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  'ijk'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'jl'\n  >>> findLargestPalindrome(['a', 'b', 'c', 'd', 'e"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  if(arr.length === 0) return true;\n  let start = arr[0];\n  let end = arr[arr.length - 1];\n  while(end!== start) {\n    let middle = (end - start) / 2 + start;\n    let check = compare(arr, middle);\n    if(check === 0) return false;\n    if(check === -1) {\n      end = middle;\n    } else {\n      start = middle + 1;\n    }\n  }\n  return true;\n}\n\nconst compare = (arr, val) => {\n  let result = 0;\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] < val) result = -1;\n    if(arr[i] > val) result = 1;\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return false;\n  }\n  const index = Math.max(lst1.length - 1, lst2.length - 1);\n  let i = 1;\n  while (i <= index) {\n    if (lst1[i - 1] % 2 === 0 && lst2[index - i + 1] % 2 === 1) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n    const letter = (x) => (x.toLowerCase() === 'a'? 'a' : 'b');\n    const count = (x) => (x.toLowerCase() === 'a'? 1 : 2);\n    const letterCount = (x) => {\n        const result = {};\n        x.split('').forEach((x) => {\n            result[x] = count(x);\n        });\n        return result;\n    };\n    const result = {};\n    test.split('').forEach((x) => {\n        const letterCounts = letterCount(x);\n        Object.keys(letterCounts).forEach((key) => {\n            const count = letterCounts[key];\n            if (result[key] < count) {\n                result[key] = count;\n            }\n        });\n    });\n    return result;\n};\n\nconst test = hisTogrAm('a b c a b');\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  let result = '', tmp = '';\n  for (let i = 0; i < rev.length; i++) {\n    if (c.includes(rev[i])) {\n      tmp += rev[i];\n    }\n    if (tmp === rev) {\n      result = tmp + result;\n      tmp = '';\n    }\n  }\n  return {result, isPalindrome: s === result};\n};\n\n/*\n  Task\n  Given a string, you are allowed to convert it to camelCase by changing the first letter to upper case.\n  You can do this multiple times and convert more than one character to upper case.\n  However, you can't convert the same character to upper case more than once.\n  Return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"I like to code\", the result should be ('I Like To Code', true)\n  For s = \"i like to code\", the result should be ('I Like To Code', false)\n  */\nconst toCamelCase = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (s[i].toUpperCase()).replace(/\\W/g, '') + s[i].toLowerCase();\n  }\n  return {result, isPalindrome: result.split('').reverse().join('') === result};\n};\n\nmodule.exports = {\n  reverseErsedeletE,\n  toCamelCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  const result = []\n  const count = (i) => {\n    const o = lst[i].match(/\\d/g)\n    if (o) {\n      result.push(`the number of odd elements ${o.length}n the str${i} of the ${o.length}nput.`)\n    }\n  }\n  lst.forEach(count)\n  return result\n}\n\nmodule.exports = oddcounT\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n    let stack = [];\n    let minSum = nums.reduce((prev, curr) => prev + curr, 0);\n\n    nums.forEach((curr) => {\n        let prevSum = stack.reduce((prev, curr) => prev + curr, 0);\n        if (stack.length === 0 || prevSum + curr < minSum) {\n            minSum = prevSum + curr;\n        }\n        stack.push(curr);\n        if (stack.length === nums.length) {\n            stack = stack.slice(0, stack.length - 1);\n        }\n    });\n\n    return minSum;\n};\n\nconsole.log(msaSUm([2, 3, 4, 1, 2, 4]));\nconsole.log(msaSUm([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  let fill = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      fill += grid[i][j] === 1? capacity : 0;\n      if (fill > capacity) return fill;\n    }\n  }\n  return fill;\n};\n\nconst grid = [\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n];\n\nconst capacity = 1;\nconsole.log(maxfill(grid, capacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  let arr = arr.slice()\n\n  // Get the number of ones in the binary representation of each number\n  let numberOfOnesInBinary = arr.map((x) => x.toString(2).split('').map((x) => x.charAt(0)))\n\n  // Sort the array according to number of ones in the binary representation\n  let sortedArr = numberOfOnesInBinary.sort((a, b) => {\n    let a = parseInt(a, 2)\n    let b = parseInt(b, 2)\n\n    if (a < b) {\n      return -1\n    }\n\n    if (a > b) {\n      return 1\n    }\n\n    return 0\n  })\n\n  // Convert the sorted array to an array of numbers\n  let sortedArray = arr.map((x, i) => sortedArr[i])\n\n  return sortedArray\n}\n\n// Test cases\nconst cases = [\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n  [-2, -3, -4, -5, -6],\n  [1, 0, 2, 3, 4],\n  [1, 0, 2, 3, 4, 5],\n  [1, 0, 2, 3, 4, 5, 6],\n  [1, 0, 2, 3, 4, 5, 6, 7],\n  [1, 0, 2, 3, 4, 5, 6, 7, 8],\n  [1, 0, 2, 3, 4, 5, 6, 7, 8, 9]\n]\n\ncases.forEach((x) => {\n  console.log('Test case:', x)\n  console.log('Expected:', x[1])\n  console.log('Result:', sorTArrAy(x[0]))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i; j < s.length; j++) {\n      if (s[j] ==='') {\n        break;\n      }\n      let sublist = s.slice(i, j + 1);\n      if (sublist.length === n) {\n        list.push(sublist);\n      }\n    }\n  }\n  return list;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  let current = word.length\n  let closest = word\n  \n  while (current > 1) {\n    if (consonants.indexOf(word[current]) === -1 && vowels.indexOf(word[current])!== -1) {\n      closest = word.substr(0, current)\n      current = word.lastIndexOf(word[current], current - 1)\n    } else {\n      break\n    }\n  }\n  \n  if (word.length === 1) {\n    return \"\"\n  }\n  return closest\n}\n\n/*\n  Given a string S and a dictionary of words D, return all words that\n  can be formed by replacing a character of S with a character of a\n  word in D.\n\n  Note:\n  If S = \"abc\" and D = [\"abc\", \"bcd\", \"ace\"]:\n  return [\"bcd\", \"acd\", \"bce\", \"abd\", \"ace\"].\n\n  Example:\n  input = \"b\"\n  dict = [\"ab\", \"bc\", \"bd\"]\n  output = [\"ab\", \"bb\", \"cb\"]\n  */\nconst wordReplacement = (s, d) => {\n  return d.reduce((pre, curr) => {\n    return pre.concat(s.split('').map((char) => {\n      if (curr.indexOf(char) === -1) {\n        return char\n      }\n      return curr.slice(0, curr.indexOf(char) + 1)\n    }))\n  }, [])\n}\n\nconst wordCombinations = (word, d) => {\n  let wordCombinations = []\n  \n  for (let i = 0; i < word.length; i++) {\n    let combination = wordReplacement(word.substr(0, i + 1), d)\n    for (let j = 0; j < combination.length; j++) {\n      wordCombinations.push(combination.slice(0, j + 1))\n    }\n  }\n  \n  return wordCombinations\n}\n\n/*\n  Given two words, write a function to determine if one is an anagram of the other.\n  Recall that an anagram of a word is the same word, but in a different order.\n\n  Example:\n  isAnagram(\"anagram\", \"nagaram\") ==> true\n  isAnagram(\"rat\", \"car\") ==> true\n  isAnagram(\"foo\", \"bar\") ==> false\n  isAnagram(\"anagram\", \"nagaram\") ==> true\n  isAnagram(\"anagram\", \"nagaram\") ==> true\n  isAnagram(\"abc\", \"acb\") ==> true\n  isAnagram(\"ad\", \"da\") ==> true\n  isAnagram(\"abcd\", \"acbd\") ==> false\n  */\nconst isAnagram = (s1, s2) => {\n  let s1Letters = s1.split('')\n  let s2Letters = s2.split('')\n  \n  if (s1Letters.length!== s2Letters.length) {\n    return false\n  }\n  \n  for (let i = 0; i < s1Letters.length; i++) {\n    if (s1Letters[i]!== s2Letters[i]) {\n      return false\n    }\n  }\n  \n  return true\n}\n\n/*\n  Given a string s, return a list of all the palindromes in the string.\n  A palindrome is a string that reads the same backwards as forwards.\n  \n  Example:\n  s = \"racecar\"\n  output = [\"racecar\", \"carace\", \"acrace\", \"racce\", \"carce\"]\n  */\nconst isPalindrome = (s) => {\n  let i = 0\n  let j = s.length - 1\n  \n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  \n  return true\n}\n\n/*\n  Given two strings, s1 and s2, return the longest string that is a superstring of both\n  s1 and s2, and also a substring of s1.\n  \n  Note:\n  A superstring means that every character of s1 exists in s2.\n  A substring means that there exists a subset of s2 that is a superstring of s1.\n\n  Example:\n  s1 = \"banana\"\n  s2 = \"anana\"\n  output = \"anana\"\n  \n  s1 = \"banana\"\n  s2 = \"ana\"\n  output = \"ana\"\n  \n  s1 = \"banana\"\n  s2 = \"bana\"\n  output = \"bana\"\n  \n  s1 = \"abacadabra\"\n  s2 = \"bacadabra\"\n  output = \"bacadabra\"\n  \n  s1 = \"abacadabra\"\n  s2 = \"aabacadabra\"\n  output = \"aabacadabra\"\n  \n  s1 = \"abacadabra\"\n  s2 = \"abacadaba\"\n  output = \"abacadaba\"\n  \n  s1 = \"abacadabra\"\n  s2 = \"abacadab\"\n  output"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  if (lst.length === 0) return 'No';\n  let cnt = 0;\n  for (let x of lst) {\n    if (x === '(') cnt++;\n    else if (x === ')') cnt--;\n  }\n  if (cnt!== 0) return 'No';\n  lst.push('');\n  return matChPaRens(lst);\n};\n\n// @exclude\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  let result = arr.slice(0, k);\n  for (let i = k; i < arr.length; i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n    } else if (arr[i] > result[result.length - 1]) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport default maxImum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  return lst.filter(num => num % 2).reduce((sum, num) => sum + num, 0)\n}\n\n/*Given a non-empty list of numbers, return the largest element in the list.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==> 7\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==> 9\n  solUtioN([1, 1, 1, 1, 1, 1]) ==> 1\n  solUtioN([30, 13, 24, 321]) ==>321\n  */\nconst solUtioNMax = (lst) => {\n  return Math.max.apply(Math, lst)\n}\n\n/*Given a non-empty list of numbers, return the smallest element in the list.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==>2\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==>9\n  solUtioN([1, 1, 1, 1, 1, 1]) ==>1\n  solUtioN([30, 13, 24, 321]) ==>30\n  */\nconst solUtioNMin = (lst) => {\n  return Math.min.apply(Math, lst)\n}\n\n/* Given a non-empty list of numbers, return the average of the list.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==> 5.5\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==>9\n  solUtioN([1, 1, 1, 1, 1, 1]) ==>1\n  solUtioN([30, 13, 24, 321]) ==>23.6\n  */\nconst solUtioNAvg = (lst) => {\n  return lst.reduce((sum, num) => sum + num, 0) / lst.length\n}\n\n/*Given a non-empty list of numbers, return the sum of the numbers in the list.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==>21\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==>54\n  solUtioN([1, 1, 1, 1, 1, 1]) ==>1\n  solUtioN([30, 13, 24, 321]) ==>345\n  */\nconst solUtioNSum = (lst) => {\n  return lst.reduce((sum, num) => sum + num, 0)\n}\n\n/*Given a non-empty list of numbers, return the number of numbers in the list that are odd.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==>3\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==>0\n  solUtioN([1, 1, 1, 1, 1, 1]) ==>0\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioNCountOdd = (lst) => {\n  return lst.filter(num => num % 2).length\n}\n\n/*Given a non-empty list of numbers, return the number of numbers in the list that are even.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==>5\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==>3\n  solUtioN([1, 1, 1, 1, 1, 1]) ==>0\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioNCountEven = (lst) => {\n  return lst.filter(num =>!(num % 2)).length\n}\n\n/* Given a non-empty list of numbers, return the number of numbers in the list that are divisible by 7.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==>2\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==>0\n  solUtioN([1, 1, 1, 1, 1, 1]) ==>0\n  solUtioN([30, 13, 24, 321]) ==>1\n  */\nconst solUtioNCountDivisibleBy7 = (lst) => {\n  return lst.filter(num => num % 7 === 0).length\n}\n\n/* Given a non-empty list of numbers, return the number of numbers in the list that are divisible by 3.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==>1\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==>0\n  solUtioN([1, 1, 1, 1, 1, 1]) ==>0\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioNCountDivisibleBy3 = (lst) => {\n  return lst.filter(num => num % 3 === 0).length\n}\n\n/* Given a non-empty list of numbers, return the number of numbers in the list that are divisible by 5.\n  \n\n  Examples\n  solUtioN([3, 6, 5, 7, 4, 2, 8, 4]) ==>0\n  solUtioN([9, 9, 9, 9, 9, 9, 9]) ==>0\n  solUtioN([1, 1, 1, 1, 1, 1]) ==>0\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioNCountDivisibleBy5 = (lst) => {\n  return lst.filter(num => num %"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem2 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem3 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem4 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem5 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem6 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem7 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem8 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem9 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem10 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem11 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem12 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem13 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem14 = (arr, k) => {\n  let count = 0\n  let sum = 0\n  while (k--) {\n    count = arr.pop()\n    sum += count\n    if (count > 9) {\n      sum += count / 10\n      arr.unshift(count % 10)\n    }\n  }\n  arr.unshift(sum)\n  return arr\n}\n\nconst addelem15 = (arr, k)"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  const result = []\n  let i = n\n  while(i) {\n    if (i % 2) {\n      result.push(i)\n    }\n    i = Math.floor(i / 2)\n  }\n  return result\n}\n\n/*\n  Given an integer n, return the number of primes that are less than or equal to n.\n\n  Note: \n      1. primes(2) = 0.\n      2. primes(3) = 1.\n      3. primes(4) = 2.\n      4. primes(5) = 3.\n      5. primes(6) = 4.\n\n  For example:\n  primes(3) = 2.\n  primes(5) = 3.\n  primes(7) = 4.\n  primes(10) = 5.\n  primes(11) = 6.\n  */\nconst primes = (n) => {\n  let result = 0\n  for(let i = 2; i <= n; i++) {\n    let prime = true\n    for(let j = 2; j * i <= n; j++) {\n      if (i % j === 0) {\n        prime = false\n        break\n      }\n    }\n    if (prime) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  Given an array of n positive integers and a positive integer k, return the kth smallest element in the array.\n\n  For example:\n  findkth(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) = 15\n  */\nconst findkth = (arr, k) => {\n  let result = arr[0]\n  for(let i = 1; i < k; i++) {\n    result = Math.min(result, arr[i])\n  }\n  return result\n}\n\n/*\n  Given a positive integer n, return the number of permutations of the digits of n.\n\n  For example:\n  digitPermutation(7) = 6.\n  */\nconst digitPermutation = (n) => {\n  let result = 1\n  let perm = n\n  while(perm > 0) {\n    result *= perm\n    perm -= 1\n  }\n  return result\n}\n\n/*\n  Given two positive integers a and b, return the number of permutations of the digits of a and b.\n\n  For example:\n  digitPermutation(10, 13) = 28.\n  */\nconst digitPermutation2 = (a, b) => {\n  let result = 1\n  let perm = a * b\n  while(perm > 0) {\n    result *= perm\n    perm -= 1\n  }\n  return result\n}\n\n/*\n  Given two numbers a and b, return the sum of the numbers.\n\n  For example:\n  add(1, 2) = 3\n  */\nconst add = (a, b) => a + b\n\n/*\n  Given two numbers a and b, return the difference of the numbers.\n\n  For example:\n  diff(1, 2) = 1\n  */\nconst diff = (a, b) => a - b\n\n/*\n  Given two numbers a and b, return the product of the numbers.\n\n  For example:\n  product(1, 2) = 2\n  */\nconst product = (a, b) => a * b\n\n/*\n  Given two numbers a and b, return the quotient of the numbers.\n\n  For example:\n  quotient(10, 5) = 2\n  */\nconst quotient = (a, b) => a / b\n\n/*\n  Given two numbers a and b, return the remainder of the numbers.\n\n  For example:\n  remainder(10, 5) = 1\n  */\nconst remainder = (a, b) => a % b\n\n/*\n  Given a positive integer n, return the nth fibonacci number.\n\n  For example:\n  fibonacci(2) = 1\n  fibonacci(3) = 1\n  fibonacci(4) = 2\n  fibonacci(5) = 3\n  fibonacci(6) = 5\n  fibonacci(7) = 8\n  fibonacci(8) = 13\n  fibonacci(9) = 21\n  fibonacci(10) = 34\n  fibonacci(11) = 55\n  fibonacci(12) = 89\n  fibonacci(13) = 144\n  fibonacci(14) = 233\n  fibonacci(15) = 377\n  fibonacci(16) = 610\n  fibonacci(17) = 987\n  fibonacci(18) = 1597\n  fibonacci(19) = 2584\n  fibonacci(20) = 4181\n  fibonacci(21) = 6765\n  fibonacci(22) = 10946\n  fibonacci(23) = 17711\n  fibonacci(24) = 28657\n  fibonacci(25) = 41028\n  fibonacci(26) = 59236\n  fibonacci(27) = 88449\n  fibonacci(28) = 126730\n  fibonacci(29) = 187860\n  fibonacci(30) = 266460\n  fibonacci(31) = 393230\n  fibonacci(32) = 524286\n  fibonacci(33) = 745894\n  "}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  if (date === '') {\n    return false\n  }\n  if (isNaN(date)) {\n    return false\n  }\n  const dateArray = date.split('-')\n  const day = parseInt(dateArray[2])\n  const month = parseInt(dateArray[1])\n  const year = parseInt(dateArray[0])\n  if (day < 1 || day > 31 || month < 1 || month > 12) {\n    return false\n  }\n  if (month === 2) {\n    if (day > 29 || day < 1) {\n      return false\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30 || day < 1) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n    txt = txt.toLowerCase();\n    const result = [];\n    const splitter = /\\s/g;\n    let current = \"\";\n    let i = 0;\n    while (i < txt.length) {\n        const c = txt.charAt(i);\n        if (c === \" \") {\n            result.push(current);\n            current = \"\";\n        } else if (c === \",\") {\n            result.push(current);\n            current = \"\";\n        } else {\n            current += c;\n        }\n        i++;\n    }\n    if (current!== \"\") {\n        result.push(current);\n    }\n    return result;\n}\n\nmodule.exports = splItWoRds;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  // sort the list\n  const sorted = lst.slice().sort((a, b) => a - b);\n\n  // check if the list is sorted\n  return lst.every(a => sorted[sorted.indexOf(a)] === a);\n};\n\n// export the function\nexport { isSOrteD };\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1End < interval2Start) {\n    return \"NO\";\n  }\n  const intervalLength = interval1End - interval1Start + 1;\n  if (intervalLength === 1) {\n    return \"YES\";\n  }\n  const factor = getPrimeFactor(intervalLength);\n  return factor? \"YES\" : \"NO\";\n};\n\nconst getPrimeFactor = intervalLength => {\n  let primeFactor = 1;\n  const test = intervalLength;\n  while (test) {\n    if (test === 1) {\n      return primeFactor;\n    }\n    primeFactor++;\n    test = test / 2;\n  }\n};\n\n// console.log(intErseCtion([1, 2], [2, 3]));\n// console.log(intErseCtion([-1, 1], [0, 4]));\n// console.log(intErseCtion([-3, -1], [-5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const product = arr.reduce((a, b) => a * b, 1)\n  const sum = arr.reduce((a, b) => a + b, 0)\n\n  return (product === 0)? null : sum * Math.abs(product)\n}\n\n/*\n  Given an array arr of integers, return a boolean that\n  indicates whether it is possible to sort the elements\n  in ascending order without changing the relative\n  order of their magnitudes.\n\n  Example:\n  >>> sortable([1, -4, 3, 2]) == true\n  >>> sortable([3, -4, -1, 2]) == false\n  >>> sortable([0, 1]) == false\n  >>> sortable([]) == false\n  */\nconst sortable = (arr) => {\n  const product = arr.reduce((a, b) => a * b, 1)\n  const sum = arr.reduce((a, b) => a + b, 0)\n  const magnitude = sum / product\n\n  return (magnitude < 0)? false : (Math.abs(magnitude) < 1)? true : false\n}\n\n/*\n  Given an array arr of non-negative integers, return a boolean that\n  indicates whether it is possible to sort the elements\n  in descending order without changing the relative\n  order of their magnitudes.\n\n  Example:\n  >>> sortable([1, -4, 3, 2]) == false\n  >>> sortable([3, -4, -1, 2]) == true\n  >>> sortable([0, 1]) == true\n  >>> sortable([]) == false\n  */\nconst sortableDesc = (arr) => {\n  const product = arr.reduce((a, b) => a * b, 1)\n  const sum = arr.reduce((a, b) => a + b, 0)\n  const magnitude = sum / product\n\n  return (magnitude < 0)? true : (Math.abs(magnitude) < 1)? false : true\n}\n\nexport {\n  sortable,\n  sortableDesc,\n  proDSigNs,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  if (k === 0) return []\n\n  const len = grid.length\n  if (len === 0) return []\n  if (len === 1) return [grid[0][0]]\n\n  const grid2 = [[...grid[0],...grid[0],...grid[0]].map(row => row.slice(1, len - 1).sort(row => row[0] - row[len - 1]))]\n\n  let path = []\n  let [lst, lst2] = grid2, grid2\n  for (let i = 0; i < k - 1; i++) {\n    lst = lst2\n    lst2 = lst2.slice(1, lst2.length - 1).sort((a, b) => a[0] - b[0])\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst[j] < lst2[j]) {\n        path = [...path,...lst[j]]\n      }\n    }\n  }\n  return path.slice(0, k - 1)\n}\n\nconsole.log(minpath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\nconsole.log(minpath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [1]\n  let ans = [1]\n  for (let i = 1; i <= n; i++) {\n    ans.push(tri(i-1) + tri(i-2) + tri(i+1))\n  }\n  return ans\n}\n\nexport default tri\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    let result = 1;\n    while (n > 0) {\n        if (n & 1) {\n            result *= 2;\n        }\n        n = n >> 1;\n    }\n    return result;\n};\n\nmodule.exports = digIts;<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const re = /[\\[\\]]/g\n  const isInside = (c) => {\n    if (c === '[' || c === ']') return true\n    if (c === '[' && string[string.length - 1] === ']') return true\n    if (c === ']' && string[0] === '[') return true\n    return false\n  }\n  let i = 0\n  while (re.lastIndex <= string.length - 1) {\n    if (re.lastIndex === string.length) break\n    if (re.lastIndex!== i) {\n      if (!isInside(string[re.lastIndex])) return false\n    }\n    i++\n    re.lastIndex++\n  }\n  return true\n}\n\nconsole.log(isNEsteD('[]'))\nconsole.log(isNEsteD('[[]]'))\nconsole.log(isNEsteD('[]]]]]]][[[[[]'))\nconsole.log(isNEsteD('[][]'))\nconsole.log(isNEsteD('[]'))\nconsole.log(isNEsteD('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += Math.pow(curr, 2)\n  })\n  return sum\n}\n\nconst sumsqua = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua2 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua3 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua4 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua5 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua6 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua7 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua8 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua9 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua10 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua11 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua12 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua13 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua14 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua15 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua16 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua17 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua18 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua19 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua20 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua21 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua22 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua23 = (lst) => {\n  let sum = 0\n  lst.forEach(num => {\n    const curr = parseFloat(num)\n    sum += curr\n  })\n  return sum\n}\n\nconst sumsqua24 = (lst) =>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  txt = txt.toLowerCase();\n  return txt.endsWith(/./);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  txt = txt.toLowerCase();\n  return txt.endsWith(/./);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  txt = txt.toLowerCase();\n  return txt.endsWith(/./);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  txt = txt.toLowerCase();\n  return txt.endsWith(/./);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  txt = txt.toLowerCase();\n  return txt.endsWith(/./);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  txt = txt.toLowerCase();\n  return txt.endsWith(/./);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  txt = txt.toLowerCase();\n  return txt.endsWith(/./);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  txt = txt.toLowerCase();\n  return txt.endsWith(/./);\n};\n\n/* Create a function that returns true if"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i - 1] && arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = canarraNge;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const max = (a, b) => (a === null)? b : (a > b? a : b);\n  const min = (a, b) => (a === null)? b : (a < b? a : b);\n\n  const lstIsEmpty = lst.length === 0;\n  const lstLength = lst.length;\n  const lstSmallest = lst.slice(0, 1);\n  const lstLargest = lst.slice(lstLength - 1, lstLength);\n\n  const lstSmallestLength = lstSmallest.length;\n  const lstLargestLength = lstLargest.length;\n\n  const lstLargestMin = max(lstSmallest, lstLargest);\n  const lstSmallestMax = min(lstSmallest, lstLargest);\n\n  if (lstIsEmpty) {\n    return null;\n  }\n\n  if (lstSmallestLength === 0) {\n    return (null, lstLargestMax);\n  }\n\n  if (lstLargestLength === 0) {\n    return (lstSmallestMax, null);\n  }\n\n  if (lstLargestMin === null) {\n    return (null, lstSmallestMax);\n  }\n\n  if (lstSmallestMax === null) {\n    return (lstLargestMin, null);\n  }\n\n  return ([lstSmallestMax, lstLargestMin]);\n};\n\nmodule.exports = larGestsmallestest;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/,/g, '');\n  }\n\n  if (typeof b ==='string') {\n    b = b.replace(/,/g, '');\n  }\n\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (a > b) {\n        return a;\n      } else if (a < b) {\n        return b;\n      } else {\n        return null;\n      }\n    } else {\n      return b;\n    }\n  } else if (typeof b === 'number') {\n    return a;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(comPareone(1, 2.5));\nconsole.log(comPareone(1, '2,3'));\nconsole.log(comPareone('5,1', '6'));\nconsole.log(comPareone('1', 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let res = false\n  if(n >= 0) {\n    let i = 1\n    let sum = 0\n    while(i < n) {\n      sum += i\n      i++\n    }\n    res = sum % 2 === 0\n  }\n  return res\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n  Example\n  isEqualtoOddN(3) == false\n  isEqualtoOddN(4) == true\n  isEqualtoOddN(5) == false\n  isEqualtoOddN(6) == false\n  isEqualtoOddN(8) == false\n  isEqualtoOddN(9) == false\n  */\nconst isEqualtoOddN = (n) => {\n  let res = false\n  if(n >= 1) {\n    let i = 1\n    let sum = 0\n    while(i < n) {\n      sum += i\n      i++\n    }\n    res = sum % 2 === 1\n  }\n  return res\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isEqualtoSumeveN(5) == true\n  isEqualtoSumeveN(6) == false\n  isEqualtoSumeveN(8) == true\n  isEqualtoSumeveN(9) == false\n  isEqualtoSumeveN(10) == false\n  isEqualtoSumeveN(12) == false\n  isEqualtoSumeveN(13) == false\n  isEqualtoSumeveN(14) == false\n  isEqualtoSumeveN(16) == false\n  isEqualtoSumeveN(18) == false\n  isEqualtoSumeveN(19) == false\n  */\nconst isEqualtoSumeveN = (n) => {\n  let res = false\n  if(n >= 0) {\n    let i = 1\n    let sum = 0\n    while(i < n) {\n      sum += i\n      i++\n    }\n    res = sum % 2 === 0\n  }\n  return res\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualtoOddN(4) == true\n  isEqualtoOddN(5) == false\n  isEqualtoOddN(6) == true\n  isEqualtoOddN(8) == true\n  isEqualtoOddN(9) == false\n  isEqualtoOddN(10) == false\n  isEqualtoOddN(12) == false\n  isEqualtoOddN(13) == false\n  isEqualtoOddN(14) == false\n  isEqualtoOddN(16) == false\n  isEqualtoOddN(18) == false\n  isEqualtoOddN(19) == false\n  */\nconst isEqualtoOddN = (n) => {\n  let res = false\n  if(n >= 1) {\n    let i = 1\n    let sum = 0\n    while(i < n) {\n      sum += i\n      i++\n    }\n    res = sum % 2 === 1\n  }\n  return res\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n  Example\n  isEqualtoOddN(3) == true\n  isEqualtoOddN(4) == false\n  isEqualtoOddN(5) == false\n  isEqualtoOddN(6) == false\n  isEqualtoOddN(8) == false\n  isEqualtoOddN(9) == false\n  isEqualtoOddN(10) == false\n  isEqualtoOddN(12) == false\n  isEqualtoOddN(13) == false\n  isEqualtoOddN(14) == false\n  isEqualtoOddN(16) == false\n  isEqualtoOddN(18) == false\n  isEqualtoOddN(19) == false\n  */\nconst isEqualtoOddN = (n) => {\n  let res = false\n  if(n >= 1) {\n    let i = 1\n    let sum = 0\n    while(i < n) {\n      sum += i\n      i++\n    }\n    res = sum % 2 === 1\n  }\n  return res\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isEqualtoSumeveN(5) == true\n  isEqualtoSumeveN(6) == true\n  isEqualtoSumeveN(8) == true\n  isEqualtoSumeveN(9) == true\n  isEqualtoSumeveN(10) == true\n  isEqualtoSumeveN(12) == true\n  isEqualtoSumeveN(13) == true\n  isEqualtoSumeveN(14) == true\n  isEqualtoSumeveN(16) == true\n  isEqualtoSumeveN(18) == true\n  isEqualtoSumeveN(19) == true\n  */\nconst isEqualtoSumeveN = (n) => {\n  let res = false\n  if(n >= 0) {\n    let i = 1\n    let sum = 0\n    while(i < n) {\n      sum += i\n      i++\n    }\n    res = sum % 2 === 0\n  }\n  return res\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualtoOddN(4) == true\n  isEqualtoOddN(5) == false"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  const factorial = (n) => {\n    return n < 2? 1 : n * speCialfactoRiaL(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The Catalan numbers are defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) * (n + 3) / 3...\n  or n * (n - 1) * (n - 2) * (n - 3) *... * 1!\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  64\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  const catalan = (n) => {\n    if (n < 0) return 0;\n    return speCialfactoRiaL(n - 1) * (n + 1);\n  };\n  return catalan(n);\n};\n\n/*\n  The Khinchin-Gattatkhattu numbers are defined as:\n  khinchin_gattatkhattu(n) = (2-n) * (2n) / (n+1) * (4n^2 + n) / 6...\n  or n * (n + 1) / 2 * (4n^2 + n) / 6 * (n + 3) / (2n + 1)...\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  64\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  const khinchin_gattatkhattu = (n) => {\n    if (n < 0) return 0;\n    return speCialfactoRiaL(n - 1) * (2 - n) * (2 * n);\n  };\n  return khinchin_gattatkhattu(n);\n};\n\n// eslint-disable-next-line max-statements\nconst numbers = [\n  speCialfactoRiaL(1),\n  speCialfactoRiaL(2),\n  speCialfactoRiaL(3),\n  speCialfactoRiaL(4),\n  speCialfactoRiaL(5),\n  speCialfactoRiaL(6),\n  speCialfactoRiaL(7),\n  speCialfactoRiaL(8),\n  speCialfactoRiaL(9),\n  speCialfactoRiaL(10),\n  speCialfactoRiaL(11),\n  speCialfactoRiaL(12),\n  speCialfactoRiaL(13),\n  speCialfactoRiaL(14),\n  speCialfactoRiaL(15),\n  speCialfactoRiaL(16),\n  speCialfactoRiaL(17),\n  speCialfactoRiaL(18),\n  speCialfactoRiaL(19),\n  speCialfactoRiaL(20),\n  speCialfactoRiaL(21),\n  speCialfactoRiaL(22),\n  speCialfactoRiaL(23),\n  speCialfactoRiaL(24),\n  speCialfactoRiaL(25),\n  speCialfactoRiaL(26),\n  speCialfactoRiaL(27),\n  speCialfactoRiaL(28),\n  speCialfactoRiaL(29),\n  speCialfactoRiaL(30),\n  speCialfactoRiaL(31),\n  speCialfactoRiaL(32),\n  speCialfactoRiaL(33),\n  speCialfactoRiaL(34),\n  speCialfactoRiaL(35),\n  speCialfactoRiaL(36),\n  speCialfactoRiaL(37),\n  speCialfactoRiaL(38),\n  speCialfactoRiaL(39),\n  speCialfactoRiaL(40),\n  speCialfactoRiaL(41),\n  speCialfactoRiaL(42),\n  speCialfactoRiaL(43),\n  speCialfactoRiaL(44),\n  speCialfactoRiaL(45),\n  speCialfactoRiaL(46),\n  speCialfactoRiaL(47),\n  speCialfactoRiaL(48),\n  speCialfactoRiaL(49),\n  speCialfactoRiaL(50),\n  speCialfactoRiaL(51),\n  speCialfactoRiaL(52),\n  speCialfactoRiaL(53),\n  speCialfactoRiaL(54),\n  speCialfactoRiaL(55),\n  speCialfactoRiaL(56),\n  speCialfactoRiaL(57),\n  speCialfactoRiaL(58),\n  speCialfactoRiaL(59),\n  speCialfactoRiaL(60),\n  speCialfactoRiaL(61),\n  speCialfactoRiaL(62),\n  speCialfactoRiaL(63),\n  speCialfactoRiaL(64),\n  speCialfactoRiaL(65),\n  speCialfactoRiaL(66),\n  speCialfactoRiaL(67),\n  speCialfactoRiaL(68),\n  speCialfactoRiaL(69),\n  speCialfactoRiaL(70),\n  speCialfactoRiaL"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  const fix = (text) => {\n    const len = text.length\n    const chars = Array.from(text)\n    const spaces = chars.filter(e => e ==='')\n    const non_spaces = chars.filter(e => e!=='')\n    if (spaces.length > 2) {\n      non_spaces.splice(0, spaces.length - 1)\n      non_spaces.push('-')\n      return non_spaces.join('_')\n    }\n    return text\n  }\n  return fix(text)\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixunderscEs = (text) => {\n  const fix = (text) => {\n    const len = text.length\n    const chars = Array.from(text)\n    const underscores = chars.filter(e => e === '_')\n    const non_underscores = chars.filter(e => e!== '_')\n    if (underscores.length > 2) {\n      non_underscores.splice(0, underscores.length - 1)\n      non_underscores.push(' ')\n      return non_underscores.join('_')\n    }\n    return text\n  }\n  return fix(text)\n}\n\n// export these functions to the global scope\nexport const fixspacEs = fixspacEs\nexport const fixunderscEs = fixunderscEs\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll', 'bin']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK2 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK3 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK4 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK5 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK6 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK7 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK8 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK9 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK10 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK11 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst filENamEChecK12 = (file_name) => {\n  const regex = /^[a-zA-Z]\\.[0-9]{1,3}\\.[txt|exe|dll|bin]$/;\n  "}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let current = lst[i];\n    if (i % 3 === 0 && i % 4!== 0) {\n      current = current * current;\n    } else if (i % 3!== 0 && i % 4 === 0) {\n      current = current * current * current;\n    }\n    sum += current;\n  }\n  return sum;\n};\n\n// console.log(sumsqaRes([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  // console.log('work')\n  let arr = sentence.split(' ')\n  let res = arr.reduce((a, b) => {\n    let isPrime = isPrime(a.length)\n    let resArr = []\n    for (let i = 0; i < arr.length; i++) {\n      if (isPrime(arr[i].length)) {\n        resArr.push(arr[i])\n      }\n    }\n    return resArr.join(' ')\n  })\n  return res\n}\n\nfunction isPrime(n) {\n  if (n < 2) {\n    return false\n  }\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  const s = x +'' + n;\n  const parts = s.split(' ');\n  const nPart = parts[1];\n  const dPart = parts[0];\n  if (!dPart) return false;\n  if (dPart === '0') return false;\n  const d = parseInt(dPart, 10);\n  const n = parseInt(nPart, 10);\n  if (d === 0) return false;\n  if (d === 1) return true;\n  if (n === 0) return false;\n  if (n === 1) return true;\n  return d % n === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const sum = sumBypointS(nums)\n  const ord = [...nums].sort((a, b) => {\n    const diff = sum[a] - sum[b]\n    if (diff === 0) {\n      return a - b\n    } else {\n      return diff\n    }\n  })\n  return ord\n}\n\nconst sumBypointS = (nums) => {\n  const sum = []\n  for (const num of nums) {\n    sum.push(num.toString().split('.').reduce((a, b) => a + parseInt(b), 0))\n  }\n  return sum\n}\n\nconst test = () => {\n  console.log(ordErBypointS([3, 6, 5, 4, 3, 2, 9, 8, 7]))\n  console.log(ordErBypointS([1, 11, -1, -11, -12]))\n  console.log(ordErBypointS([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n}\n\nif (process.argv.includes('--test')) {\n  test()\n}\n\n/*\n  Write a function which sums the elements of the given list of\n  numbers in ascending order.\n\n  For example:\n  >>> sumBypoint([1, 11, -1, -11, -12]) == -10\n  >>> sumBypoint([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45\n  >>> sumBypoint([]) == 0\n  */\nconst sumBypoint = (nums) => {\n  const sum = 0\n  for (const num of nums) {\n    sum += num\n  }\n  return sum\n}\n\nconst test2 = () => {\n  console.log(sumBypoint([1, 11, -1, -11, -12]))\n  console.log(sumBypoint([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n  console.log(sumBypoint([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n}\n\nif (process.argv.includes('--test')) {\n  test2()\n}\n\n/*\n  Write a function which sums the elements of the given list of\n  numbers in ascending order, skipping the first N elements.\n\n  For example:\n  >>> sumBypointS2([1, 11, -1, -11, -12]) == -10\n  >>> sumBypointS2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45\n  >>> sumBypointS2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 62\n  >>> sumBypointS2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 83\n  >>> sumBypointS2([]) == 0\n  */\nconst sumBypointS2 = (nums) => {\n  const sum = 0\n  for (const num of nums.slice(nums.length - 1)) {\n    sum += num\n  }\n  return sum\n}\n\nconst test3 = () => {\n  console.log(sumBypointS2([1, 11, -1, -11, -12]))\n  console.log(sumBypointS2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n  console.log(sumBypointS2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n  console.log(sumBypointS2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n}\n\nif (process.argv.includes('--test')) {\n  test3()\n}\n\n/*\n  Write a function which sums the elements of the given list of\n  numbers in descending order.\n\n  For example:\n  >>> sumBypointD([1, 11, -1, -11, -12]) == 10\n  >>> sumBypointD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45\n  >>> sumBypointD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 66\n  >>> sumBypointD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 85\n  >>> sumBypointD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 106\n  >>> sumBypointD([]) == 0\n  */\nconst sumBypointD = (nums) => {\n  const sum = 0\n  for (const num of nums.slice().reverse()) {\n    sum += num\n  }\n  return sum\n}\n\nconst test4 = () => {\n  console.log(sumBypointD([1, 11, -1, -11, -12]))\n  console.log(sumBypointD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n  console.log(sumBypointD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n  console.log(sumBypointD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n  console.log(sumBypointD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n}\n\nif (process.argv.includes('--test')) {\n  test4()\n"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  const len = nums.length\n  let i = 0\n  while (i < len) {\n    if (nums[i] > 10 &&\n      (nums[i] % 10 == 1 || nums[i] % 10 == 3 || nums[i] % 10 == 5 || nums[i] % 10 == 7 || nums[i] % 10 == 9)) {\n      return 1\n    }\n    i++\n  }\n  return 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  const trples = []\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === 1 && j === 1 && k === 1) {\n          continue\n        }\n        if (i === 1 && j === 1) {\n          j = n\n        }\n        if (i === 1 && k === 1) {\n          k = n\n        }\n        const triple = (i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1)\n        if (triple % 3 === 0) {\n          trples.push([i, j, k])\n        }\n      }\n    }\n  }\n  return trples.length\n}\n\nconst getmaxTRiple = (n) => {\n  const trples = []\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === 1 && j === 1 && k === 1) {\n          continue\n        }\n        const triple = (i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1)\n        if (triple % 3 === 0) {\n          trples.push([i, j, k])\n        }\n      }\n    }\n  }\n  return trples.length\n}\n\nconst getmaxTRipleArray = (n) => {\n  const trples = []\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === 1 && j === 1 && k === 1) {\n          continue\n        }\n        const triple = (i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1)\n        if (triple % 3 === 0) {\n          trples.push([i, j, k])\n        }\n      }\n    }\n  }\n  return trples\n}\n\nconst test = () => {\n  const result = getmaxTRiple(10)\n  console.log(result)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const result = [];\n  const distance = Math.sqrt(Math.pow(planet2.x - planet1.x, 2) + Math.pow(planet2.y - planet1.y, 2));\n  for (let i = 0; i < planets.length; i++) {\n    if (planets[i].distance <= distance) {\n      result.push(planets[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Earth\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Jupiter\", \"Saturn\"));\nconsole.log(bf(\"Jupiter\", \"Earth\"));\nconsole.log(bf(\"Uranus\", \"Neptune\"));\nconsole.log(bf(\"Saturn\", \"Uranus\"));\nconsole.log(bf(\"Saturn\", \"Neptune\"));\nconsole.log(bf(\"Saturn\", \"Jupiter\"));\nconsole.log(bf(\"Saturn\", \"Earth\"));\nconsole.log(bf(\"Saturn\", \"Mercury\"));\nconsole.log(bf(\"Uranus\", \"Mercury\"));\nconsole.log(bf(\"Uranus\", \"Jupiter\"));\nconsole.log(bf(\"Uranus\", \"Saturn\"));\nconsole.log(bf(\"Uranus\", \"Neptune\"));\nconsole.log(bf(\"Neptune\", \"Jupiter\"));\nconsole.log(bf(\"Neptune\", \"Saturn\"));\nconsole.log(bf(\"Neptune\", \"Earth\"));\nconsole.log(bf(\"Neptune\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\")"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  let res = lst.slice();\n  res.sort((a, b) => {\n    if (a.length!== b.length) {\n      return b.length - a.length;\n    }\n    return a < b? -1 : 1;\n  });\n  res = res.filter((el, index) => index % 2 === 0);\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if(isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry2 = (n, x, y) => {\n  return n === x? x : y;\n};\n\nconst isPrime2 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry3 = (n, x, y) => {\n  if(n === x) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime3 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry4 = (n, x, y) => {\n  if(n === x) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime4 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry5 = (n, x, y) => {\n  return n === x? x : y;\n};\n\nconst isPrime5 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry6 = (n, x, y) => {\n  return n === x? x : y;\n};\n\nconst isPrime6 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry7 = (n, x, y) => {\n  if(n === x) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime7 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry8 = (n, x, y) => {\n  if(n === x) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime8 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry9 = (n, x, y) => {\n  return n === x? x : y;\n};\n\nconst isPrime9 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry10 = (n, x, y) => {\n  if(n === x) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime10 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry11 = (n, x, y) => {\n  if(n === x) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime11 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry12 = (n, x, y) => {\n  return n === x? x : y;\n};\n\nconst isPrime12 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry13 = (n, x, y) => {\n  return n === x? x : y;\n};\n\nconst isPrime13 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry14 = (n, x, y) => {\n  if(n === x) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime14 = n => {\n  let i;\n  for(i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst xOry15 = (n, x, y) => {\n  if(n === x) {"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  const sum = (x, y) => x + y;\n  const evens = (x, y) => x === y? 0 : sum(x, y);\n  return lst.length > 0? lst.reduce((a, b) => evens(a, b), 0) : 0;\n};\n\n// ------------------------------------------------\n\nconst add = (x, y) => x + y;\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\nconst add4 = (x, y) => {\n  return x + y;\n};\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\nconst add29 = (x, y) => {\n  return x + y;\n};\n\nconst add30 = (x, y) => {\n  return x + y;\n};\n\nconst add31 = (x, y) => {\n  return x + y;\n};\n\nconst add32 = (x, y) => {\n  return x + y;\n};\n\nconst add33 = (x, y) => {\n  return x + y;\n};\n\nconst add34 = (x, y) => {\n  return x + y;\n};\n\nconst add35 = (x, y) => {\n  return x + y;\n};\n\nconst add36 = (x, y) => {\n  return x + y;\n};\n\nconst add37 = (x, y) => {\n  return x + y;\n};\n\nconst add38 = (x, y) => {\n  return x + y;\n};\n\nconst add39 = (x, y) => {\n  return x + y;\n};\n\nconst add40 = (x, y) => {\n  return x + y;\n};\n\nconst add41 = (x, y) => {\n  return x + y;\n};\n\nconst add42 = (x, y) => {\n  return x + y;\n};\n\nconst add43 = (x, y) => {\n  return x + y;\n};\n\nconst add44 = (x, y) => {\n  return x + y;\n};\n\nconst add45 = (x, y) => {\n  return x + y;\n};\n\nconst add46 = (x, y) => {\n  return x + y;\n};\n\nconst add47 = (x, y) => {\n  return x + y;\n};\n\nconst add48 = (x, y) => {\n  return x + y;\n};\n\nconst add49 = (x, y) => {\n  return x + y;\n};\n\nconst add50 = (x, y) => {\n  return x + y;\n};\n\nconst add51 = (x, y) => {\n  return x + y;\n};\n\nconst add52 = (x, y) => {\n  return x + y;\n};\n\nconst add53 = (x, y) => {\n  return x + y;\n};\n\nconst add54 = (x, y) => {\n  return x + y;\n};\n\nconst add55 = (x, y) => {\n  return x + y;\n};\n\nconst add56 = (x, y) => {\n  return x + y;\n};\n\nconst add57 = (x, y) => {\n  return x + y;\n};\n\nconst add58 = (x, y) => {\n  return x + y;\n};\n\nconst add59 = (x, y) => {\n  return x + y;\n};\n\nconst add60 = (x,"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const allScores = game;\n  const allGuesses = guess;\n  const allLength = allScores.length;\n  let result = [];\n  for (let i = 0; i < allLength; i++) {\n    result.push(0);\n  }\n\n  for (let i = 0; i < allLength; i++) {\n    let score = allScores[i];\n    let guess = allGuesses[i];\n    let result = score - guess;\n    if (score === 0) {\n      result = 0;\n    } else if (score === guess) {\n      result = 0;\n    } else {\n      result = Math.abs(result);\n    }\n    result[i] = result;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n    const charCount = charCount(class_name);\n    const className = class_name.replace(/[^a-zA-Z0-9]/g, '');\n    const strongestExtension = getStrongestExtension(extensions);\n    const extensionStrength = charCount(strongestExtension) - charCount(className);\n    return `${className}.${strongestExtension}`;\n};\n\nconst charCount = str => str.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0);\n\nconst getStrongestExtension = extensions => {\n    return extensions\n       .sort((a, b) => {\n            const a_length = charCount(a);\n            const b_length = charCount(b);\n            return b_length - a_length;\n        })\n       .pop();\n};\n\nexport default strOngeStExtEnsIon;<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const n = a.length;\n  const m = b.length;\n\n  const aRotation = new Array(n).fill(0);\n  const bRotation = new Array(m).fill(0);\n  for (let i = 0; i < n; i++) {\n    aRotation[i] = a.charCodeAt(n - 1 - i);\n  }\n  for (let j = 0; j < m; j++) {\n    bRotation[j] = b.charCodeAt(m - 1 - j);\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (aRotation[i] === bRotation[j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nconsole.log(cycPattErnChEck(\"abcd\",\"abd\"));\nconsole.log(cycPattErnChEck(\"hello\",\"ell\"));\nconsole.log(cycPattErnChEck(\"whassup\",\"psus\"));\nconsole.log(cycPattErnChEck(\"abab\",\"baa\"));\nconsole.log(cycPattErnChEck(\"efef\",\"eeff\"));\nconsole.log(cycPattErnChEck(\"himenss\",\"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n    var even = 0,\n        odd = 0;\n    for(var i = num; i >= 0; i--){\n        if(i % 2 === 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return {\n        even: even,\n        odd: odd\n    };\n};\n\nmodule.exports = eveNOddcount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  if (number <= 1) return 'I'\n  if (number <= 4) return 'II'\n  if (number <= 9) return 'III'\n  if (number <= 40) return 'IV'\n  if (number <= 90) return 'V'\n  if (number <= 100) return 'VI'\n  if (number <= 400) return 'VII'\n  if (number <= 900) return 'VIII'\n  if (number <= 1000) return 'IX'\n}\n\nexport default inttoMiNiRomAn<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  return ((Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) === 0)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triArea(3, 4, 5) == 2\n  */\nconst triArea = (a, b, c) => {\n  return Math.pow(a, 2) * Math.pow(b, 2) / 2 + Math.pow(c, 2) * Math.pow(a, 2) / 2\n}\n\n/*\n Given the length of a side of a rectangle. Return the area of the rectangle.\n  Example:\n  rectArea(3) == 8\n  */\nconst rectArea = (a) => {\n  return Math.pow(a, 2) * 4\n}\n\n/*\n Given the height of a rectangle. Return the area of the rectangle.\n  Example:\n  rectArea(3) == 8\n  */\nconst rectArea2 = (a) => {\n  return Math.pow(a, 2) * 8\n}\n\n/*\n Given the area of a triangle. Return the perimeter of the triangle.\n  Example:\n  triPerimeter(2) == 3\n  */\nconst triPerimeter = (a) => {\n  return 2 * a + 2 * Math.pow(a, 2)\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter = (a) => {\n  return 4 * a\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter2 = (a) => {\n  return 4 * a\n}\n\n/*\n Given the perimeter of a triangle. Return the area of the triangle.\n  Example:\n  triPerimeter(4) == 12\n  */\nconst triArea2 = (a) => {\n  return Math.pow(a, 2) / 2\n}\n\n/*\n Given the perimeter of a triangle. Return the area of the triangle.\n  Example:\n  triArea(4) == Math.pow(4, 2) / 2\n  */\nconst triArea3 = (a) => {\n  return Math.pow(a, 2) / 2\n}\n\n/*\n Given the perimeter of a triangle. Return the area of the triangle.\n  Example:\n  triArea(4) == Math.pow(4, 2) / 2\n  */\nconst triArea4 = (a) => {\n  return Math.pow(a, 2) / 2\n}\n\n/*\n Given the perimeter of a rectangle. Return the area of the rectangle.\n  Example:\n  rectArea(3) == 8\n  */\nconst rectArea3 = (a) => {\n  return 8\n}\n\n/*\n Given the perimeter of a rectangle. Return the area of the rectangle.\n  Example:\n  rectArea(3) == 8\n  */\nconst rectArea4 = (a) => {\n  return 8\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter3 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter4 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter5 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter6 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter7 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter8 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter9 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter10 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter11 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter12 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter13 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  rectPerimeter(3) == 9\n  */\nconst rectPerimeter14 = (a) => {\n  return 9\n}\n\n/*\n Given the area of a rectangle. Return the perimeter of the rectangle.\n  Example:\n  "}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  if (!words) return null;\n  if (words.length === 1) return words[0];\n  const max = words.reduce((a, b) => {\n    const aLength = a.length;\n    const bLength = b.length;\n    const aFirst = a.charAt(0);\n    const bFirst = b.charAt(0);\n    let counter = 0;\n    if (aFirst === bFirst) {\n      counter += 1;\n      a = a.slice(1);\n      b = b.slice(1);\n    }\n    while (a.length > 0 && b.length > 0) {\n      if (a.charAt(0) === b.charAt(0)) {\n        counter += 1;\n        a = a.slice(1);\n        b = b.slice(1);\n      } else {\n        break;\n      }\n    }\n    return [counter, aLength, bLength];\n  }, [words[0].length, words[0].length, words[1].length]);\n  if (max.length === 0) return null;\n  return words[max[1]][max[2]];\n};\n\nconsole.log(finDMax([\"name\", \"of\", \"string\"]));\nconsole.log(finDMax([\"name\", \"enam\", \"game\"]));\nconsole.log(finDMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number >= need) {\n        return [need, remaining];\n    } else {\n        return [number, remaining];\n    }\n};\n\nconst expected = [11, 4];\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\nconsole.log(eat(1, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  let ops = operator.slice(0, -1);\n  let op = operator.slice(-1);\n  let operand = operand.slice(0, -1);\n  let opr = operand.slice(-1);\n\n  if(typeof(operand[0])!== 'number'){\n    return null;\n  }\n\n  if(typeof(operand[operand.length - 1])!== 'number'){\n    return null;\n  }\n\n  if(typeof(operand[0])!== 'number'){\n    return null;\n  }\n\n  if(typeof(operand[operand.length - 1])!== 'number'){\n    return null;\n  }\n\n  if(operand.length === 1){\n    return null;\n  }\n\n  if(operand.length === 0){\n    return null;\n  }\n\n  if(ops.length === 0){\n    return null;\n  }\n\n  if(operand.length === 0){\n    return null;\n  }\n\n  if(operand.length === 1){\n    return null;\n  }\n\n  if(operand[0] === 0){\n    return null;\n  }\n\n  if(operand[operand.length - 1] === 0){\n    return null;\n  }\n\n  if(opr === 0){\n    return null;\n  }\n\n  if(opr === operand.length){\n    return null;\n  }\n\n  if(opr === 1){\n    return null;\n  }\n\n  for(let i = 0; i < operand.length; i++){\n    result += parseInt(operand[i]);\n  }\n\n  if(op === '+'){\n    result += parseInt(opr);\n  }\n\n  if(op === '-'){\n    result -= parseInt(opr);\n  }\n\n  if(op === '*'){\n    result *= parseInt(opr);\n  }\n\n  if(op === '//'){\n    result /= parseInt(opr);\n  }\n\n  if(op === '**'){\n    result = Math.pow(result, parseInt(opr));\n  }\n\n  return result;\n};\n\nexport default doALgebRa;<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n    const a = s.split('');\n    return a.map(x => x.toUpperCase()).join('');\n};\n\n//#12\n\n//#13\n\n//#14\n\n//#15\n\n//#16\n\n//#17\n\n//#18\n\n//#19\n\n//#20\n\n//#21\n\n//#22\n\n//#23\n\n//#24\n\n//#25\n\n//#26\n\n//#27\n\n//#28\n\n//#29\n\n//#30\n\n//#31\n\n//#32\n\n//#33\n\n//#34\n\n//#35\n\n//#36\n\n//#37\n\n//#38\n\n//#39\n\n//#40\n\n//#41\n\n//#42\n\n//#43\n\n//#44\n\n//#45\n\n//#46\n\n//#47\n\n//#48\n\n//#49\n\n//#50\n\n//#51\n\n//#52\n\n//#53\n\n//#54\n\n//#55\n\n//#56\n\n//#57\n\n//#58\n\n//#59\n\n//#60\n\n//#61\n\n//#62\n\n//#63\n\n//#64\n\n//#65\n\n//#66\n\n//#67\n\n//#68\n\n//#69\n\n//#70\n\n//#71\n\n//#72\n\n//#73\n\n//#74\n\n//#75\n\n//#76\n\n//#77\n\n//#78\n\n//#79\n\n//#80\n\n//#81\n\n//#82\n\n//#83\n\n//#84\n\n//#85\n\n//#86\n\n//#87\n\n//#88\n\n//#89\n\n//#90\n\n//#91\n\n//#92\n\n//#93\n\n//#94\n\n//#95\n\n//#96\n\n//#97\n\n//#98\n\n//#99\n\n//#100\n\n//#101\n\n//#102\n\n//#103\n\n//#104\n\n//#105\n\n//#106\n\n//#107\n\n//#108\n\n//#109\n\n//#110\n\n//#111\n\n//#112\n\n//#113\n\n//#114\n\n//#115\n\n//#116\n\n//#117\n\n//#118\n\n//#119\n\n//#120\n\n//#121\n\n//#122\n\n//#123\n\n//#124\n\n//#125\n\n//#126\n\n//#127\n\n//#128\n\n//#129\n\n//#130\n\n//#131\n\n//#132\n\n//#133\n\n//#134\n\n//#135\n\n//#136\n\n//#137\n\n//#138\n\n//#139\n\n//#140\n\n//#141\n\n//#142\n\n//#143\n\n//#144\n\n//#145\n\n//#146\n\n//#147\n\n//#148\n\n//#149\n\n//#150\n\n//#151\n\n//#152\n\n//#153\n\n//#154\n\n//#155\n\n//#156\n\n//#157\n\n//#158\n\n//#159\n\n//#160\n\n//#161\n\n//#162\n\n//#163\n\n//#164\n\n//#165\n\n//#166\n\n//#167\n\n//#168\n\n//#169\n\n//#170\n\n//#171\n\n//#172\n\n//#173\n\n//#174\n\n//#175\n\n//#176\n\n//#177\n\n//#178\n\n//#179\n\n//#180\n\n//#181\n\n//#182\n\n//#183\n\n//#184\n\n//#185\n\n//#186\n\n//#187\n\n//#188\n\n//#189\n\n//#190\n\n//#191\n\n//#192\n\n//#193\n\n//#194\n\n//#195\n\n//#196\n\n//#197\n\n//#198\n\n//#199\n\n//#200\n\n//#201\n\n//#202\n\n//#203\n\n//#204\n\n//#205\n\n//#206\n\n//#207\n\n//#208\n\n//#209\n\n//#210\n\n//#211\n\n//#212\n\n//#213\n\n//#214\n\n//#215\n\n//#216\n\n//#217\n\n//#218\n\n//#219\n\n//#220\n\n//#221\n\n//#222\n\n//#223\n\n//#224\n\n//#225\n\n//#226\n\n//#227\n\n//#228\n\n//#229\n\n//#230\n\n//#231\n\n//#232\n\n//#233\n\n//#234\n\n//#235\n\n//#236\n\n//#237\n\n//#238\n\n//#239\n\n//#240\n\n//#241\n\n//#242\n\n//#243\n\n//#244\n\n//#245\n\n//#246\n\n//#247\n\n//#248\n\n//#249\n\n//#250\n\n//#251\n\n//#252\n\n//#253\n\n//#254\n\n//#255\n\n//#256\n\n//#257\n\n//#258\n\n//#259\n\n//#260\n\n//#261\n\n//#262\n\n//#263\n\n//#264\n\n//#265\n\n//#266\n\n//#267\n\n//#268\n\n//#269\n\n//#270\n\n//#271\n\n//#272\n\n//#273\n\n//#274\n\n//#275\n\n//#276\n\n//#277\n\n//#278\n\n//#279\n\n//#280\n\n//#281\n\n//#282\n\n//#283\n\n//#284\n\n//#285\n\n//#286\n\n//#287\n"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n    if (text == '') return null;\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha1('Hello world') == '2f9d3a8aa67d8c0a0a8c5c0b0d8b8d8a982d4d8'\n  */\nconst strIngTOSha1 = (text) => {\n    if (text == '') return null;\n    return crypto.createHash('sha1').update(text).digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha256('Hello world') == 'd6c7f8c4c6e3d3a9e00e1c4f082e7c1e7c8b6f6a2b0b8'\n  */\nconst strIngTOSha256 = (text) => {\n    if (text == '') return null;\n    return crypto.createHash('sha256').update(text).digest('hex');\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'd7dda6f8f6a6b4c3d4e9dcc3c0c0d0e1d7e1e2d8b8'\n  */\nconst strIngTOSha512 = (text) => {\n    if (text == '') return null;\n    return crypto.createHash('sha512').update(text).digest('hex');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const e = [];\n  for (let i = a; i < b; i += 2) {\n    e.push(i);\n  }\n  return e;\n};\n\nconst eratEInteGerS = genEratEInteGerS(8, 2);\n\nconsole.log(eratEInteGerS);\n\n/*\n  Given a positive integer, return the index of the\n  first appearance of the given number in the\n  given array.\n\n  For example:\n  indexOf(1, [2, 3, 4, 3, 5, 3, 5, 2, 6])\n  => 2\n  */\nconst indexOf = (n, arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === n) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst indexOf = (n, arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === n) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst indexOf = (n, arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === n) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconsole.log(indexOf(5, [2, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6]));\n\n/*\n  Given two non-empty arrays, write a function to compute their intersection.\n  Example:\n  Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].\n\n  Note:\n  Each element in the result must be unique.\n  The result can be in any order.\n  */\nconst intersect = (nums1, nums2) => {\n  const result = [];\n  for (let i = 0; i < nums1.length; i++) {\n    const index = indexOf(nums1[i], nums2);\n    if (index >= 0) {\n      result.push(nums1[i]);\n    }\n  }\n  return result;\n};\n\nconst intersect = (nums1, nums2) => {\n  const result = [];\n  for (let i = 0; i < nums1.length; i++) {\n    const index = indexOf(nums1[i], nums2);\n    if (index >= 0) {\n      result.push(nums1[i]);\n    }\n  }\n  return result;\n};\n\nconst intersect = (nums1, nums2) => {\n  const result = [];\n  for (let i = 0; i < nums1.length; i++) {\n    const index = indexOf(nums1[i], nums2);\n    if (index >= 0) {\n      result.push(nums1[i]);\n    }\n  }\n  return result;\n};\n\nconsole.log(intersect([1, 2, 2, 1], [2, 2]));\n<|endoftext|>"}
