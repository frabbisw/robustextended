{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const n = numbers.length\n  const closest = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const x = Math.abs(numbers[i] - numbers[j])\n      if (x <= threshold) {\n        closest.push(x)\n      }\n    }\n  }\n  return closest.length === 0\n}\n\n/*\n  Checks whether every element of a given array is a number.\n  >>> isNum([1, 2, 3, 4, 5])\n  true\n  >>> isNum([1, 'two', 3, 4, 5])\n  false\n  >>> isNum(['one', 2, 3, 4, 5])\n  false\n  >>> isNum([1, 'two', 3, 4, 'five'])\n  false\n  */\nconst isNum = (numbers) => {\n  const n = numbers.length\n  for (let i = 0; i < n; i++) {\n    if (typeof numbers[i]!== 'number') {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checks whether every element of a given array is a number.\n  >>> isNum([1, 'two', 3, 4, 5])\n  true\n  >>> isNum([1, 'two', 3, 4, 'five'])\n  false\n  >>> isNum([1, 'two', 3, 'four', 'five'])\n  false\n  */\nconst isNumArr = (numbers) => {\n  const n = numbers.length\n  for (let i = 0; i < n; i++) {\n    if (typeof numbers[i]!== 'number') {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checks whether every element of a given array is a number or string.\n  >>> isStrArr([1, 'two', 3, 4, 'five'])\n  true\n  >>> isStrArr([1, 'two', 3, 4, 5])\n  false\n  >>> isStrArr(['one', 2, 3, 4, 'five'])\n  false\n  >>> isStrArr(['one', 'two', 3, 4, 'five'])\n  false\n  */\nconst isStrArr = (numbers) => {\n  const n = numbers.length\n  for (let i = 0; i < n; i++) {\n    if (typeof numbers[i]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Checks whether every element of a given array is a number or string.\n  >>> isNumArr([1, 'two', 3, 4, 'five'])\n  true\n  >>> isNumArr([1, 'two', 3, 4, 5])\n  false\n  >>> isNumArr(['one', 2, 3, 4, 'five'])\n  false\n  >>> isNumArr(['one', 'two', 3, 4, 'five'])\n  false\n  */\nconst isNumArr = (numbers) => {\n  const n = numbers.length\n  for (let i = 0; i < n; i++) {\n    if (typeof numbers[i]!== 'number') {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Returns the average of a given array.\n  >>> avg([1, 2, 3, 4])\n  2.5\n  >>> avg([1, 'two', 3, 4])\n  2.0\n  >>> avg([1, 'two', 3, 'four'])\n  2.0\n  */\nconst avg = (numbers) => {\n  const n = numbers.length\n  const sum = numbers.reduce((a, b) => a + b, 0)\n  return sum / n\n}\n\n/*\n  Returns the minimum of a given array.\n  >>> min([1, 2, 3, 4])\n  1\n  >>> min([1, 'two', 3, 4])\n  1\n  >>> min([1, 'two', 3, 'four'])\n  1\n  */\nconst min = (numbers) => {\n  const n = numbers.length\n  return numbers[0]\n}\n\n/*\n  Returns the maximum of a given array.\n  >>> max([1, 2, 3, 4])\n  4\n  >>> max([1, 'two', 3, 4])\n  4\n  >>> max([1, 'two', 3, 'four'])\n  4\n  */\nconst max = (numbers) => {\n  const n = numbers.length\n  return numbers[n - 1]\n}\n\n/*\n  Returns the sum of the given array.\n  >>> sum([1, 2, 3, 4])\n  9\n  >>> sum([1, 'two', 3, 4])\n  10\n  >>> sum([1, 'two', 3, 'four'])\n  15\n  */\nconst sum = (numbers) => {\n  const n = numbers.length\n  return numbers.reduce((a, b) => a + b, 0)\n}\n\n/*\n  Returns the product of the given array.\n  >>> prod([1, 2, 3, 4])\n  24\n  >>> prod([1, 'two', 3, 4])\n  12\n  >>> prod([1, 'two', 3, 'four'])\n  24\n  */\nconst prod = (numbers) => {\n  const n = numbers.length\n  return numbers.reduce((a, b) => a * b, 1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  return paren_string.split('')\n   .filter((x) => x === '(')\n   .map((x) => x.replace(/\\(/g, ''))\n   .filter((x) => x.replace(/\\)/g, '') === ')')\n   .map((x) => x.replace(/\\)/g, ''))\n   .filter((x) => x.length > 0)\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups2 = (paren_string) => {\n  return paren_string.split('')\n   .filter((x) => x === '(')\n   .map((x) => x.replace(/\\(/g, ''))\n   .filter((x) => x.replace(/\\)/g, '') === ')')\n   .map((x) => x.replace(/\\)/g, ''))\n   .filter((x) => x.length > 0)\n}\n\n// TEST CODE\ndescribe('Parse Parentheses', () => {\n  it('should return the correct list of groups', () => {\n    expect(sepAratEPareNGrOups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())'])\n  })\n})\ndescribe('Parse Parentheses', () => {\n  it('should return the correct list of groups', () => {\n    expect(sepAratEPareNGrOups2('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())'])\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return decimals\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErDec = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return decimals\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntInt = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDec = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return decimals\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErDecInt = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErDecIntDec = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return decimals\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntIntInt = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntIntDec = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return decimals\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecInt = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecIntDec = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return decimals\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntIntIntInt = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return integer\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an\n  integer part of the decimal part.\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntIntDecInt = (number) => {\n  const integer = Math.floor(number)\n  const decimals = number - integer\n  return decimals\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and an"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  const balance = 0;\n  for (let i = 0; i < operations.length; i += 2) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = belOwZeRo;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  return numbers.reduce((previousValue, currentValue) => {\n    return previousValue + Math.abs(currentValue - (numbers.length / 2));\n  });\n};\n\nexport default meaNAbsOlutedevIatioN;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  let count = 1;\n  let last = numbers[0];\n  let newArr = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === numbers.length - 1) {\n      newArr.push(numbers[i]);\n    } else {\n      newArr.push(numbers[i] + delimeter + last);\n      last = numbers[i + 1];\n      count++;\n    }\n  }\n  return newArr;\n};\n\n/**\n  * Get the first n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], 1)\n  * // => 2\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(n - 1, n + 1).pop();\n};\n\n/**\n  * Get the last n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], 2)\n  * // => 3\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(-n, -(n - 1)).pop();\n};\n\n/**\n  * Get the first n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], 3)\n  * // => 3\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(0, n).pop();\n};\n\n/**\n  * Get the last n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], 0)\n  * // => 1\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(n).pop();\n};\n\n/**\n  * Get the first n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], -1)\n  * // => undefined\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(-(n - 1), -n).pop();\n};\n\n/**\n  * Get the last n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], -2)\n  * // => 2\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice((-n - 1), -n).pop();\n};\n\n/**\n  * Get the first n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], -3)\n  * // => undefined\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(-(n - 1), -n).pop();\n};\n\n/**\n  * Get the first n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], -4)\n  * // => undefined\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(-(n - 1), -n).pop();\n};\n\n/**\n  * Get the last n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], -5)\n  * // => undefined\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(-(n - 1), -n).pop();\n};\n\n/**\n  * Get the first n-th element of a list\n  *\n  * @param {Array} arr - The array to extract the element from\n  * @param {number} n - The index of the element to extract\n  * @returns {number} The extracted element\n  *\n  * @example\n  * intErspErse([1, 2, 3], -6)\n  * // => undefined\n  */\nconst intErspErse = (arr, n) => {\n  return arr.slice(-(n - 1), -n).pop();\n};\n\nexport {"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n    paren_string = paren_string.split(' ');\n    const parStack = [paren_string[0]];\n    const max_level = 0;\n    const max_depth = 0;\n    let depth = 0;\n    let level = 0;\n    for (let i = 1; i < paren_string.length; i++) {\n        if (paren_string[i] === ')') {\n            if (parStack.length === 0) {\n                console.log('stack empty');\n            }\n            const new_parStack = parStack.slice();\n            new_parStack.pop();\n            const new_depth = paren_string.indexOf(paren_string[i + 1]);\n            if (new_depth > max_depth) {\n                max_depth = new_depth;\n                level = parStack.length;\n                max_level = level;\n            }\n            if (new_depth === 0 && level > max_level) {\n                max_level = level;\n            }\n            if (new_depth === 0) {\n                break;\n            }\n            parStack = new_parStack;\n        } else if (paren_string[i] === '(') {\n            parStack.push(paren_string[i]);\n        }\n    }\n    return max_level;\n};\n\n// Test\nconst test = () => {\n    const tester = () => {\n        const test_cases = [\n            '(()())',\n            '(()()(()))',\n            '((())())',\n            '(())()()',\n            '((()()(())))',\n            '(()(()()))',\n            '(((())))',\n            '((()()(())))',\n            '((()()(()))(()))',\n            '((()()(()))(()(())))',\n            '(()(()())(())())',\n            '(()()()(())())',\n            '(()())',\n            '((())()())',\n            '(((())))',\n            '((()()(())))',\n            '((()())())',\n            '((()()(()))())',\n            '((()()(()))())',\n            '((())())',\n            '((())()())',\n            '((())()())',\n            '((())()())',\n            '(((())()()))',\n            '((())()(()))',\n            '((())()(()))',\n            '((())()(()))',\n            '((()()()))',\n            '((())()())',\n            '((())()())',\n            '(((()))())',\n            '((()()(())))',\n            '((()()(()))())',\n            '((()())())',\n            '(((())()()))',\n            '((())())',\n            '((()(())())',\n            '((()(()))())',\n            '((())())',\n            '((()(()))())',\n            '((()()))',\n            '((()(())))',\n            '((())())',\n            '((()(())())',\n            '((())())',\n            '(((())())())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((())())())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '((()()))',\n            '((())())',\n            '((())())',\n            '(((())())())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(((()))())',\n            '(("}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsTriNg2 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'c')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filTerBYSubsTriNg3 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNg4 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'c')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filTerBYSubsTriNg5 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNg6 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'c')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filTerBYSubsTriNg7 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNg8 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'c')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filTerBYSubsTriNg9 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNg10 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'c')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filTerBYSubsTriNg11 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNg12 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'c')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filTerBYSubsTriNg13 = (strings, substring) => {\n  return strings.filter((string) => string.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  const product = (numbers, index) => {\n    const prod = 1\n    for (let i = index; i < numbers.length; i++) {\n      prod *= numbers[i]\n    }\n    return prod\n  }\n  const sum = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += numbers[i]\n    }\n    return sum\n  }\n  const max = (a, b) => {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  }\n  const productProduct = (numbers, index) => {\n    const prod = 1\n    for (let i = index; i < numbers.length; i++) {\n      prod *= product(numbers, i)\n    }\n    return prod\n  }\n  const sumSum = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const maxMax = (a, b) => {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  }\n  const minMin = (a, b) => {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  }\n  const minMax = (a, b) => {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  }\n  const maxSum = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const minSum = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const maxMin = (a, b) => {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  }\n  const minSum = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const minMaxSum = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const maxSumMin = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const maxSumMax = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const minMaxSum = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const maxSumMaxMin = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const maxSumMinMax = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const minMaxMaxSum = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const minMaxSumMaxMin = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const minMaxSumMaxMinMax = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const maxMaxSumMinMax = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const maxSumMaxMinMax = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const minMaxSumMaxMinMax = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  const minMaxSumMaxMinMaxMax = (numbers, index) => {\n    let sum = 0\n    for (let i = index; i < numbers.length; i++) {\n      sum += sum(numbers, i)\n    }\n    return sum\n  }\n  return {\n    max,\n    min,\n    minMax,\n    min"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  let res = [];\n  let max = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    res.push(max);\n  }\n\n  return res;\n}\n\nconst test_rolLingmax = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [1, 2, 3, 3, 3, 4, 4]);\n}\n\n/*\n  From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [2, 2, 2, 3, 3, 4, 4]\n  */\nconst rolLingmin = (numbers) => {\n  let res = [];\n  let min = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    res.push(min);\n  }\n\n  return res;\n}\n\nconst test_rolLingmin = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [2, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_2 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [1, 2, 3, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_2 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [2, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_3 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [2, 2, 3, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_3 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [1, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_4 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [1, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_4 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [2, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_5 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [2, 2, 3, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_5 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [1, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_6 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [2, 2, 3, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_6 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [1, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_7 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [2, 2, 3, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_7 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [1, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_8 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [2, 2, 3, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_8 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [1, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_9 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [2, 2, 3, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_9 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [1, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_10 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [2, 2, 3, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmin_10 = () => {\n  assert.deepEqual(rolLingmin([1, 2, 3, 2, 3, 4, 2]), [1, 2, 2, 3, 3, 4, 4]);\n}\n\nconst test_rolLingmax_11 = () => {\n  assert.deepEqual(rolLingmax([1, 2, 3, 2, 3, 4, 2]), [2, 2"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let end = string.length - 1;\n  let str = '';\n\n  while (i < end) {\n    let j = i + 1;\n    let k = end;\n\n    while (j < k) {\n      if (string[i]!== string[j]) {\n        break;\n      }\n      j++;\n    }\n\n    if (j === k) {\n      str += string[i];\n      i++;\n    } else {\n      str += string.slice(i, k + 1);\n      i = k + 1;\n    }\n  }\n\n  return str;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let end = string.length - 1;\n  let str = '';\n\n  while (i < end) {\n    let j = i + 1;\n    let k = end;\n\n    while (j < k) {\n      if (string[i]!== string[j]) {\n        break;\n      }\n      j++;\n    }\n\n    if (j === k) {\n      str += string[i];\n      i++;\n    } else {\n      str += string.slice(j, k + 1);\n      i = k + 1;\n    }\n  }\n\n  return str;\n}\n\n/*\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('catac')\n  'catac'\n  >>> makePalindrome('cata')\n  'cata'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n    const arr = [...a,...b];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === '1') {\n            arr[i] = '0';\n        } else if (arr[i] === '0') {\n            arr[i] = '1';\n        } else {\n            arr.splice(i, 1);\n        }\n    }\n    return arr.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strXor = (a, b) => {\n    const arr = [...a,...b];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === '1') {\n            arr[i] = '1';\n        } else if (arr[i] === '0') {\n            arr[i] = '0';\n        } else {\n            arr.splice(i, 1);\n        }\n    }\n    return arr.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strXor('010', '110')\n  '100'\n  */\nconst strXor2 = (a, b) => {\n    const arr = [...a,...b];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === '1') {\n            arr[i] = '1';\n        } else if (arr[i] === '0') {\n            arr[i] = '0';\n        } else {\n            arr.splice(i, 1);\n        }\n    }\n    return arr.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strXor('010', '110')\n  '100'\n  */\nconst strXor3 = (a, b) => {\n    const arr = [...a,...b];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === '1') {\n            arr[i] = '1';\n        } else if (arr[i] === '0') {\n            arr[i] = '0';\n        } else {\n            arr.splice(i, 1);\n        }\n    }\n    return arr.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strXor('010', '110')\n  '100'\n  */\nconst strXor4 = (a, b) => {\n    const arr = [...a,...b];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === '1') {\n            arr[i] = '0';\n        } else if (arr[i] === '0') {\n            arr[i] = '1';\n        } else {\n            arr.splice(i, 1);\n        }\n    }\n    return arr.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strXor('010', '110')\n  '100'\n  */\nconst strXor5 = (a, b) => {\n    const arr = [...a,...b];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === '1') {\n            arr[i] = '0';\n        } else if (arr[i] === '0') {\n            arr[i] = '1';\n        } else {\n            arr.splice(i, 1);\n        }\n    }\n    return arr.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strXor('010', '110')\n  '100'\n  */\nconst strXor6 = (a, b) => {\n    const arr = [...a,...b];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === '1') {\n            arr[i] = '0';\n        } else if (arr[i] === '0') {\n            arr[i] = '1';\n        } else {\n            arr.splice(i, 1);\n        }\n    }\n    return arr.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strXor('010', '110')\n  '100'\n  */\nconst strXor7 = (a, b) => {\n    const arr = [...a,...b];\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === '1') {\n            arr[i] = '0';\n        } else if (arr[i] === '0') {\n            arr[i] = '1';\n        } else {\n            arr.splice(i, 1);\n        }\n    }\n    return arr.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> str"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  return (strings.length === 0)? null : strings[0];\n};\n\n// Export\nmodule.exports = lonGest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  let max = Math.max(a, b);\n  let min = Math.min(a, b);\n  let gcd = 1;\n\n  while (min > 0) {\n    let tmp = Math.min(max / min, b / a);\n    max = Math.max(min, max - tmp * min);\n    min = Math.min(max, min - tmp * min);\n    gcd = Math.max(gcd, tmp);\n  }\n  return gcd;\n};\n\nconsole.log(greAtesTCommOnDIvisoR(25, 15));\nconsole.log(greAtesTCommOnDIvisoR(3, 5));\nconsole.log(greAtesTCommOnDIvisoR(10, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return allPrefixes;\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes2 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes3 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes4 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes5 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes6 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes7 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes8 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes9 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf(prefix) === -1) {\n      allPrefixes.push(prefix);\n    }\n    i++;\n  }\n  return new Set(allPrefixes);\n};\n\n// Return list of all prefixes from shortest to longest of the input string\n// The list is a set and does not contain duplicates\nconst allUniquePrefixes10 = (string) => {\n  const allPrefixes = [];\n  let i = 0;\n  const len = string.length;\n  while (i < len) {\n    const prefix = string.substring(i);\n    if (allPrefixes.indexOf"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  return new Array(n+1).join(' ')\n}\n\n/* Return the first non-digit in string str.\n  >>> strFirstNonDigit('')\n  ''\n  >>> strFirstNonDigit('1')\n  '1'\n  >>> strFirstNonDigit('1 2 3')\n  '1 2 3'\n  >>> strFirstNonDigit('1 2 3 4')\n  '1 2 3 4'\n  */\nconst strFirstNonDigit = (str) => {\n  return str.replace(/\\d/,'');\n}\n\n/* Return a string containing the first n characters of str.\n  >>> strFirstNChars('')\n  ''\n  >>> strFirstNChars('12345', 0)\n  ''\n  >>> strFirstNChars('12345', 1)\n  '1'\n  >>> strFirstNChars('12345', 2)\n  '12'\n  >>> strFirstNChars('12345', 3)\n  '123'\n  >>> strFirstNChars('12345', 4)\n  '1234'\n  >>> strFirstNChars('12345', 5)\n  '1234 5'\n  */\nconst strFirstNChars = (str, n) => {\n  return str.substr(0, n);\n}\n\n/* Return a string containing the last n characters of str.\n  >>> strLastNChars('')\n  ''\n  >>> strLastNChars('12345', 0)\n  ''\n  >>> strLastNChars('12345', 1)\n  '5'\n  >>> strLastNChars('12345', 2)\n  '45'\n  >>> strLastNChars('12345', 3)\n  '345'\n  >>> strLastNChars('12345', 4)\n  '2345'\n  >>> strLastNChars('12345', 5)\n  '2345'\n  */\nconst strLastNChars = (str, n) => {\n  return str.substr(str.length-n, n);\n}\n\n/* Return a string with all the spaces replaced by underscores.\n  >>> strReplaceSpaces('Hello world')\n  'Hello_world'\n  >>> strReplaceSpaces('Hello_world')\n  'Hello_world'\n  */\nconst strReplaceSpaces = (str) => {\n  return str.replace(/\\s/g, '_');\n}\n\n/* Return a string with all the spaces and underscores replaced by hyphens.\n  >>> strReplaceHyphens('Hello_world')\n  'Hello-world'\n  */\nconst strReplaceHyphens = (str) => {\n  return str.replace(/[_ ]/g, '-');\n}\n\n/* Return a string with all the spaces and underscores replaced by a single underscore.\n  >>> strReplaceSingleUnderscore('Hello_world')\n  'Hello-world'\n  */\nconst strReplaceSingleUnderscore = (str) => {\n  return str.replace(/[_ ]/g, '_');\n}\n\n/* Return a string with all the digits replaced by hyphens.\n  >>> strReplaceDigits('12345')\n  '12345'\n  >>> strReplaceDigits('12345')\n  '12345'\n  */\nconst strReplaceDigits = (str) => {\n  return str.replace(/\\d/g, '-');\n}\n\n/* Return a string with all the digits replaced by underscores.\n  >>> strReplaceUnderscores('12345')\n  '12345'\n  >>> strReplaceUnderscores('12345')\n  '12345'\n  */\nconst strReplaceUnderscores = (str) => {\n  return str.replace(/\\d/g, '_');\n}\n\n/* Return a string with all the digits and underscores replaced by hyphens.\n  >>> strReplaceHyphens('12345')\n  '12345'\n  >>> strReplaceHyphens('12345')\n  '12345'\n  */\nconst strReplaceHyphens = (str) => {\n  return str.replace(/[_ ]/g, '-');\n}\n\n/* Return a string with all the digits and underscores replaced by a single underscore.\n  >>> strReplaceSingleUnderscore('12345')\n  '12345'\n  >>> strReplaceSingleUnderscore('12345')\n  '12345'\n  */\nconst strReplaceSingleUnderscore = (str) => {\n  return str.replace(/[_ ]/g, '_');\n}\n\n/* Return a string with all the letters replaced by hyphens.\n  >>> strReplaceLetters('Hello world')\n  'Hello-world'\n  >>> strReplaceLetters('Hello world')\n  'Hello-world'\n  */\nconst strReplaceLetters = (str) => {\n  return str.replace(/[a-zA-Z]+/g, '-');\n}\n\n/* Return a string with all the letters replaced by underscores.\n  >>> strReplaceUnderscores('Hello world')\n  'Hello_world'\n  >>> strReplaceUnderscores('Hello world')\n  'Hello_world'\n  */\nconst strReplaceUnderscores = (str) => {\n  return str.replace(/[a-zA-Z]+/g, '_');\n}\n\n/* Return a string with all the letters and underscores replaced by hyphens.\n  >>> strReplaceHyphens('Hello world')\n  'Hello-world'\n  >>> strReplaceHyphens('Hello world')\n  'Hello-world'\n  */\nconst strReplaceHyphens = (str) => {\n  return str.replace(/[a-zA-Z]+/g, '-');\n}\n\n/* Return a string with all the letters and underscores replaced by a single underscore.\n  >>> strReplaceSingleUnderscore('Hello world')\n  'Hello-world'\n  >>> strReplaceSingleUnderscore('Hello world')\n  'Hello-world'\n  */\nconst strReplaceSingleUnderscore = (str) => {\n  return str.replace(/[a-zA-Z]+/g,"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const stringLength = string.length\n  const stringArray = string.split('')\n  const count = stringArray.filter((element, index) => index === 0? stringArray.indexOf(element) === index : element.toLowerCase() === stringArray[index - 1].toLowerCase()).length\n  return count\n}\n\nmodule.exports = couNtDiStincTChAractErs\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n    return music_string.split(\" \").map((elem) => {\n        return elem.replace(/\\d+/g, (match) => {\n            return parseInt(match, 10) * 4;\n        });\n    });\n};\n\nconst convert_to_seconds = (time_string) => {\n    const time = time_string.split(\":\");\n    return parseInt(time[0], 10) * 60 + parseInt(time[1], 10);\n};\n\nconst is_music_string = (music_string) => {\n    return /^[o|.]*$/.test(music_string);\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst get_number_of_beats = (music_string) => {\n    const beats = parSeMuSic(music_string);\n    return beats.reduce((memo, beat) => {\n        memo += beat;\n        return memo;\n    }, 0);\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst get_time_string = (music_string) => {\n    const beats = parSeMuSic(music_string);\n    const beats_string = beats.reduce((memo, beat) => {\n        memo += beat + \"\";\n        return memo;\n    }, \"\");\n    return beats_string;\n};\n\nconst main = () => {\n    const test_string = \"o o|.| o| o|.|.|.|.| o o\";\n    const test_beats = parSeMuSic(test_string);\n    const test_time_string = get_time_string(test_string);\n    console.log(test_beats);\n    console.log(test_time_string);\n    console.log(get_number_of_beats(test_string));\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n\n  while ((index = string.indexOf(substring, index))!== -1) {\n    count++;\n    index++;\n  }\n\n  return count;\n};\n\nmodule.exports = howmanytimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  let newNums = numbers.split(' ');\n  newNums = newNums.map(num => parseInt(num, 10));\n  newNums.sort((a, b) => a - b);\n  let out = newNums.join('');\n  return out;\n};\n\n/*\n  Input is a space-delimited string of letters from 'a' to 'z'.\n  The letters must be in ascending order.\n  Return the string with the letters in alphabetical order.\n  >>> sorTLetters('abg cdef')\n  'abg cdef'\n  */\nconst sorTLetters = (letters) => {\n  let newLetters = letters.split(' ');\n  newLetters.sort();\n  let out = newLetters.join('');\n  return out;\n};\n\n/*\n  Input is a string with capital letters.\n  Return the string with the capital letters in lowercase.\n  >>> sorTUpperCase('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst sorTUpperCase = (text) => {\n  let textArray = text.split('');\n  textArray = textArray.map(char => char.toLowerCase());\n  return textArray.join('');\n};\n\n/*\n  Input is a string with lowercase letters.\n  Return the string with the lowercase letters in upper case.\n  >>> sorTLowerCase('abcdefghijklmnopqrstuvwxyz')\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  */\nconst sorTLowerCase = (text) => {\n  let textArray = text.split('');\n  textArray = textArray.map(char => char.toUpperCase());\n  return textArray.join('');\n};\n\n/*\n  Input is a string with numbers.\n  Return the string with the numbers in alphabetical order.\n  >>> sorTNumber(123)\n  '123'\n  */\nconst sorTNumber = (number) => {\n  let numberArray = number.split('');\n  numberArray.sort();\n  return numberArray.join('');\n};\n\n/*\n  Input is a string of capital letters.\n  Return the string of lowercase letters.\n  >>> sorTLowerCase('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst sorTLowerCaseAll = (text) => {\n  let textArray = text.split('');\n  textArray = textArray.map(char => char.toLowerCase());\n  return textArray.join('');\n};\n\n/*\n  Input is a string of lowercase letters.\n  Return the string of upper case letters.\n  >>> sorTUpperCase('abcdefghijklmnopqrstuvwxyz')\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  */\nconst sorTUpperCaseAll = (text) => {\n  let textArray = text.split('');\n  textArray = textArray.map(char => char.toUpperCase());\n  return textArray.join('');\n};\n\n/*\n  Input is a string with numbers.\n  Return the string of letters in alphabetical order.\n  >>> sorTLetters('123456789')\n  '123456789'\n  */\nconst sorTLettersAll = (text) => {\n  let textArray = text.split('');\n  textArray = textArray.map(char => char.toUpperCase());\n  return textArray.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Return the string of numbers in alphabetical order.\n  >>> sorTNumber('123456789')\n  '123456789'\n  */\nconst sorTNumberAll = (text) => {\n  let textArray = text.split('');\n  textArray = textArray.sort();\n  return textArray.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Return the string of numbers in reverse order.\n  >>> sorTReverse(123456789)\n  '896745321'\n  */\nconst sorTReverse = (numbers) => {\n  let numArray = numbers.split('');\n  numArray.reverse();\n  return numArray.join('');\n};\n\n/*\n  Input is a string of letters.\n  Return the string of letters in reverse order.\n  >>> sorTReverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  */\nconst sorTReverseAll = (text) => {\n  let textArray = text.split('');\n  textArray.reverse();\n  return textArray.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Return the string of the input, reversed, with the numbers sorted in alphabetical order.\n  >>> sorTReverseNumbers('123456789')\n  '896745321'\n  */\nconst sorTReverseNumbers = (numbers) => {\n  let numArray = numbers.split('');\n  numArray.sort();\n  return numArray.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Return the string of the input, reversed, with the numbers sorted in reverse order.\n  >>> sorTReverseNumbers('123456789')\n  '896745321'\n  */\nconst sorTReverseNumbersAll = (numbers) => {\n  let numArray = numbers.split('');\n  numArray.reverse();\n  numArray.sort();\n  return numArray.join('');\n};\n\n/*\n  Input is a string of numbers.\n  Return the string of the input, reversed, with the numbers sorted in reverse alphabetical order.\n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const len = numbers.length;\n  if (len <= 1) {\n    return numbers;\n  }\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const sortedNumbersLength = sortedNumbers.length;\n  if (sortedNumbersLength < 3) {\n    return sortedNumbers;\n  }\n  const closestIndexA = sortedNumbers.indexOf(Math.min(...sortedNumbers));\n  const closestIndexB = sortedNumbers.indexOf(Math.max(...sortedNumbers));\n  return [sortedNumbers[closestIndexA], sortedNumbers[closestIndexB]];\n};\n\n// ## FinDCloSestELemEnts\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// If the supplied list is empty or contains only one number, returns that number.\n// `finDCloSestELemEnts([])` returns an empty list.\n// `finDCloSestELemEnts([1])` returns a list containing the single number 1.\n// `finDCloSestELemEnts([1, 2, 3, 4, 5, 2.2])` returns a list containing 2.2 and 5.\nexport const finDCloSestELemEnts = (numbers) => {\n  const len = numbers.length;\n  if (len <= 1) {\n    return numbers;\n  }\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const sortedNumbersLength = sortedNumbers.length;\n  if (sortedNumbersLength < 3) {\n    return sortedNumbers;\n  }\n  const closestIndexA = sortedNumbers.indexOf(Math.min(...sortedNumbers));\n  const closestIndexB = sortedNumbers.indexOf(Math.max(...sortedNumbers));\n  return [sortedNumbers[closestIndexA], sortedNumbers[closestIndexB]];\n};\n\n// ## finDCloSestELemEnts2\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// If the supplied list is empty or contains only one number, returns that number.\n// `finDCloSestELemEnts2([])` returns an empty list.\n// `finDCloSestELemEnts2([1])` returns a list containing the single number 1.\n// `finDCloSestELemEnts2([1, 2, 3, 4, 5, 2.2])` returns a list containing 2.2 and 5.\nexport const finDCloSestELemEnts2 = (numbers) => {\n  const len = numbers.length;\n  if (len <= 1) {\n    return numbers;\n  }\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const sortedNumbersLength = sortedNumbers.length;\n  if (sortedNumbersLength < 3) {\n    return sortedNumbers;\n  }\n  const closestIndexA = sortedNumbers.indexOf(Math.min(...sortedNumbers));\n  const closestIndexB = sortedNumbers.indexOf(Math.max(...sortedNumbers));\n  const sortedNumbersA = sortedNumbers.slice(0, closestIndexA);\n  const sortedNumbersB = sortedNumbers.slice(closestIndexB + 1);\n  return [sortedNumbersA, sortedNumbersB];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(numbers[i] / (len - 1));\n  }\n  return result;\n};\n\n/**\n * Given list of numbers (of at least two elements), apply a log transform to that\n * list, such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoLogT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 0.5, 0.25, 0.125, 0.0625]\n  */\nconst resCaletoLogT = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(Math.log(numbers[i] / (len - 1)));\n  }\n  return result;\n};\n\n/**\n * Given list of numbers (of at least two elements), apply a square transform to that\n * list, such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoSquareT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 4.0, 8.0, 16.0]\n  */\nconst resCaletoSquareT = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(numbers[i] * numbers[i]);\n  }\n  return result;\n};\n\n/**\n * Given list of numbers (of at least two elements), apply a square root transform to\n * that list, such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoSqrtT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.414, 2.828, 4.0, 5.0]\n  */\nconst resCaletoSqrtT = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(Math.sqrt(numbers[i]));\n  }\n  return result;\n};\n\n/**\n * Given list of numbers (of at least two elements), apply a logarithm transform to\n * that list, such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoLogT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 4.0, 8.0, 16.0]\n  */\nconst resCaletoLogT2 = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(Math.log(numbers[i] + 1) / Math.log(len + 1));\n  }\n  return result;\n};\n\n/**\n * Given list of numbers (of at least two elements), apply a square root transform to\n * that list, such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoSqrtT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.414, 2.828, 4.0, 5.0]\n  */\nconst resCaletoSqrtT2 = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(Math.sqrt(numbers[i] + 1) - 1);\n  }\n  return result;\n};\n\n/**\n * Given list of numbers (of at least two elements), apply a power transform to that\n * list, such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoPowT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 4.0, 8.0, 16.0]\n  */\nconst resCaletoPowT = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(Math.pow(numbers[i], 2));\n  }\n  return result;\n};\n\n/**\n * Given list of numbers (of at least two elements), apply a power transform to that\n * list, such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoPowT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 4.0, 8.0, 16.0]\n  */\nconst resCaletoPowT2 = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(Math.pow(numbers[i], 2) - 1);\n  }\n  return result;\n};\n\n/**\n * Given list of numbers (of at least two elements), apply a power transform to that\n * list, such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoPowT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 4.0, 8.0, 16.0]\n  */\nconst resCaletoPowT3 = (numbers) => {\n  let result = [];\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    result.push(Math.pow(n"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const valuesArr = Array.from(values);\n  return valuesArr.filter((value) => {\n    if (typeof value === 'number') {\n      return value % 1 === 0;\n    } else {\n      return typeof value ==='string' || typeof value === 'number';\n    }\n  });\n};\n\nmodule.exports = filTerINtegeRs;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n    return string.length\n}\n\n/**\n * Return the length of the longest substring in the given string.\n  >>> strLenLongest('abcdefg')\n  5\n  >>> strLenLongest('abcd')\n  4\n  >>> strLenLongest('')\n  0\n  */\nconst strLenLongest = (string) => {\n    let start = 0\n    let end = 0\n    let max = 0\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) === string.charAt(end)) {\n            end++\n        } else if (end > start) {\n            max = Math.max(max, end - start)\n            start = end\n        }\n    }\n    return max\n}\n\n/**\n * Return the number of substring occurrences in the given string.\n  >>> strCount('abcdefg', 'bc')\n  1\n  >>> strCount('abcdefg', 'cd')\n  0\n  >>> strCount('abcdefg', 'bc')\n  1\n  >>> strCount('abcdefg', 'bcde')\n  2\n  >>> strCount('abcdefg', 'efg')\n  1\n  >>> strCount('abcdefg', 'ef')\n  0\n  >>> strCount('abcdefg', 'abc')\n  1\n  */\nconst strCount = (string, sub) => {\n    let count = 0\n    let index = 0\n    while ((index = string.indexOf(sub, index))!== -1) {\n        count++\n        index += sub.length\n    }\n    return count\n}\n\n/**\n * Return the index of the first character in the given string that is not\n  * contained in the given list.\n  >>> strIndexOf('abcdefg', 'bc')\n  0\n  >>> strIndexOf('abcdefg', 'ef')\n  -1\n  >>> strIndexOf('abcdefg', 'ef', [])\n  -1\n  >>> strIndexOf('abcdefg', 'bc', ['abc', 'def'])\n  0\n  */\nconst strIndexOf = (string, sub, list) => {\n    let index = -1\n    let i = 0\n    while ((index = string.indexOf(sub, i))!== -1) {\n        i = index + 1\n        if (list.indexOf(string.slice(index, i))!== -1) {\n            break\n        }\n    }\n    return index\n}\n\n/**\n * Return the index of the last character in the given string that is not\n  * contained in the given list.\n  >>> strLastIndexOf('abcdefg', 'bc')\n  5\n  >>> strLastIndexOf('abcdefg', 'ef')\n  -1\n  >>> strLastIndexOf('abcdefg', 'ef', [])\n  -1\n  >>> strLastIndexOf('abcdefg', 'bc', ['abc', 'def'])\n  3\n  */\nconst strLastIndexOf = (string, sub, list) => {\n    let index = -1\n    let i = string.length\n    while ((index = string.lastIndexOf(sub, i))!== -1) {\n        i = index - 1\n        if (list.indexOf(string.slice(index, i))!== -1) {\n            break\n        }\n    }\n    return index\n}\n\n/**\n * Return the substring of the given string that starts with the given prefix.\n  >>> strPrefix('abcdefg', 'ab')\n  'abcdefg'\n  >>> strPrefix('abcdefg', 'b')\n  'abcdefg'\n  >>> strPrefix('abcdefg', 'abc')\n  'abcdefg'\n  >>> strPrefix('abcdefg', 'bc')\n  'abcdefg'\n  >>> strPrefix('abcdefg', 'abcdef')\n  'abcdefg'\n  >>> strPrefix('abcdefg', 'bcdef')\n  'abcdefg'\n  >>> strPrefix('abcdefg', 'bcdefg')\n  'abcdefg'\n  */\nconst strPrefix = (string, prefix) => {\n    return string.slice(0, strLen(prefix))\n}\n\n/**\n * Return the substring of the given string that ends with the given suffix.\n  >>> strSuffix('abcdefg', 'def')\n  'defg'\n  >>> strSuffix('abcdefg', 'fg')\n  'defg'\n  >>> strSuffix('abcdefg', 'defg')\n  'defg'\n  >>> strSuffix('abcdefg', 'efg')\n  'defg'\n  >>> strSuffix('abcdefg', 'bcdef')\n  'defg'\n  >>> strSuffix('abcdefg', 'b')\n  'defg'\n  >>> strSuffix('abcdefg', 'bc')\n  'defg'\n  */\nconst strSuffix = (string, suffix) => {\n    return string.slice(strLen(string) - strLen(suffix), strLen(string))\n}\n\n/**\n * Return the concatenation of the given strings, with each string separated by\n  * the given delimiter.\n  >>> strConcat('ab', 'c', 'de')\n  'abcde'\n  >>> strConcat('ab', 'c', 'de', 'f')\n  'abcdef'\n  */\nconst strConcat = (...strings) => {\n    return strings.reduce((str, sub) => str + sub)\n}\n\nmodule.exports = {\n    strLen,\n    strLenLongest,\n    strCount,\n    strIndexOf,\n    strLastIndexOf,\n    strPrefix,\n    strSuffix,\n    strConcat\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let arr = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  arr.sort((a, b) => a - b);\n  return arr[arr.length - 1];\n};\n\nmodule.exports = larGestdivisOr;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n    const divisors = [1];\n    const result = [];\n\n    for (let i = 2; i < n; i++) {\n        for (const j of divisors) {\n            const k = n / i;\n            if (k > 0) {\n                if (k % j === 0) {\n                    divisors.push(j);\n                    result.push([j, k]);\n                }\n            }\n        }\n    }\n\n    return result;\n};\n\nexport { facToriZe };\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  let result = []\n  let set = new Set()\n  for (let i = 0; i < numbers.length; i++) {\n    if (set.has(numbers[i])) {\n      continue\n    }\n    result.push(numbers[i])\n    set.add(numbers[i])\n  }\n  return result\n}\n\nconst numbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]\n\nconsole.log(remOveDUplicAteS(numbers))\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.replace(/[a-z]/g, (m) => {\n    if (m.toLowerCase() === m.toUpperCase()) {\n      return m.toLowerCase()\n    }\n    return m.toUpperCase()\n  })\n}\n\n// https://www.hackerrank.com/challenges/string-compression/problem\n/*\n  For a given string, compress the string by replacing the string with the string after compression.\n  Example\n  input = \"aabbccdd\", output = \"a2b1c5d\"\n  >>> compress(input)\n  'a2b1c5d'\n  */\nconst compress = (string) => {\n  const compressed = \"\"\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (count > 0) {\n      compressed += count\n    }\n    count = string[i].charCodeAt(0) - 97\n  }\n  return compressed\n}\n\n/*\n  Given a string, return the number of characters that are upper case in the string.\n  Example\n  input = \"Hello\", output = 5\n  >>> countUppercase('Hello')\n  5\n  */\nconst countUppercase = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      count += 1\n    }\n  }\n  return count\n}\n\n// https://www.hackerrank.com/challenges/search-in-rotated-sorted-array/problem\n/*\n  Given a sorted array, search for a given value in the array. The array is rotated,\n  so that element[0] is the last element.\n\n  Example\n  input = [3, 5, 6], value = 3\n  >>> search(input, value)\n  3\n  */\nconst search = (arr, value) => {\n  const low = 0\n  const high = arr.length - 1\n  const mid = (low + high) / 2\n  while (low <= high) {\n    if (arr[mid] === value) {\n      return mid\n    } else if (arr[mid] < value) {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n    mid = (low + high) / 2\n  }\n  return -1\n}\n\n// https://www.hackerrank.com/challenges/binary-tree-search-i-ii/problem\n/*\n  Given a binary tree, implement a function that, given a value x, returns the index of the smallest element\n  in the subtree rooted at the node that has a value larger than x.\n  Note that values in the subtree are guaranteed to be sorted in ascending order.\n  Example\n  input = [10, 5, 3, 15, 7], value = 7\n  output = 2\n  >>> searchBinaryTree(input, value)\n  2\n  */\nconst searchBinaryTree = (arr, value) => {\n  let index = -1\n  let low = 0\n  let high = arr.length - 1\n  while (low <= high) {\n    const mid = (low + high) / 2\n    if (arr[mid] > value) {\n      high = mid - 1\n    } else if (arr[mid] < value) {\n      low = mid + 1\n    } else {\n      index = mid\n      break\n    }\n  }\n  return index\n}\n\n// https://www.hackerrank.com/challenges/reverse-a-linked-list/problem\n/*\n  Given a singly linked list, reverse the list in place.\n  Example\n  input = [1, 2, 3, 4], output = [4, 3, 2, 1]\n  >>> reverseList(input)\n  [4, 3, 2, 1]\n  */\nconst reverseList = (input) => {\n  let current = input\n  while (current) {\n    let next = current.next\n    current.next = current.prev\n    current.prev = next\n    current = next\n  }\n  return input\n}\n\n/*\n  Given a sorted linked list, remove the nth node from the end of the list.\n  The node is not removed from the list.\n  Example\n  input = [1, 2, 3, 4, 5], n = 2\n  output = [1, 2, 3, 4, 5]\n  >>> removeNthFromEnd(input, n)\n  [1, 2, 3, 4, 5]\n  */\nconst removeNthFromEnd = (input, n) => {\n  const current = input\n  const currentCount = n\n  while (currentCount) {\n    current = current.next\n    currentCount -= 1\n  }\n  const currentPrevious = current.prev\n  const currentNext = current.next\n  current.prev = currentPrevious\n  current.next = currentNext\n  return input\n}\n\n/*\n  Given a singly linked list, remove the nth node from the list.\n  The node is not removed from the list.\n  Example\n  input = [1, 2, 3, 4, 5], n = 3\n  output = [1, 2, 4, 5]\n  >>> removeNthFromList(input, n)\n  [1, 2, 4, 5]\n  */\nconst removeNthFromList = (input, n) => {\n  const current = input\n  const currentCount = n\n  while (currentCount) {\n    current = current.next\n    currentCount -= 1\n  }\n  const currentPrevious = current.prev\n  const currentNext = current.next\n  current.prev = currentPrevious\n  current.next = currentNext\n  return input\n}\n\nmodule.exports = {\n  fliPCasE,\n  compress,\n  countUppercase,\n  search,\n  searchBinaryTree,\n  removeNthFromEnd,\n  removeNthFromList\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.join('');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space after the last element\nconst conCateNateWithSpace = (strings) => {\n  return strings.join(' ');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first element\nconst conCateNateWithSpaceBefore = (strings) => {\n  return strings.join(''+'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before and after each element\nconst conCateNateWithSpaceBeforeAndAfter = (strings) => {\n  return strings.join(''+'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before each element\nconst conCateNateWithSpaceBeforeEach = (strings) => {\n  return strings.join(''+'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space after each element\nconst conCateNateWithSpaceAfterEach = (strings) => {\n  return strings.join(''+'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeAndAfter = (strings) => {\n  return strings.join(''+'' +'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeAndAfterLast = (strings) => {\n  return strings.join(''+'' +'' +'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeAndAfterLastSpace = (strings) => {\n  return strings.join(''+'' +'' +'' +'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeLast = (strings) => {\n  return strings.join(''+'' +'' +'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeLastSpace = (strings) => {\n  return strings.join(''+'' +'' +'' +'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeLastSpaceAfter = (strings) => {\n  return strings.join(''+'' +'' +'' +'' +'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeLastSpaceAfterLast = (strings) => {\n  return strings.join(''+'' +'' +'' +'' +'' +'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeLastSpaceAfterLastSpace = (strings) => {\n  return strings.join(''+'' +'' +'' +'' +'' +'' +'' +'' +'');\n};\n\n// Concatenate list of strings into a single string\n// with an extra space before the first and after the last element\nconst conCateNateWithSpaceBeforeLastSpaceAfterLastSpaceLast = (strings) => {\n  return strings.join(''+'' +'' +'' +'' +'' +'' +'' +'' +'' +'');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// ### listSortedByLen\n// Returns a list of sorted strings by length.\n//\n// - `strings` A list of strings to sort.\n// - `sortBy` A string to sort the list by.\n// - `reverse` Whether to sort in reverse order.\n//\n// - `stringSorter` A function that takes two strings and returns -1, 0, or 1.\n//\n// Returns a list of strings sorted by length in descending order.\nconst listSortedByLen = (strings, sortBy, reverse, stringSorter) => {\n  return strings.sort((a, b) => {\n    const lenA = a.length;\n    const lenB = b.length;\n\n    if (lenA < lenB) {\n      return stringSorter(a, b);\n    }\n\n    if (lenA > lenB) {\n      return stringSorter(b, a);\n    }\n\n    return stringSorter(a, b);\n  }).reverse();\n};\n\n// ### listUnique\n// Returns a list of unique strings.\n//\n// - `strings` A list of strings to sort.\n// - `sortBy` A string to sort the list by.\n//\n// - `stringSorter` A function that takes two strings and returns -1, 0, or 1.\n//\n// Returns a list of strings, sorted and unique.\nconst listUnique = (strings, sortBy, stringSorter) => {\n  return listSortedByLen(listSortedByLen(strings, sortBy, true, stringSorter), sortBy, false, stringSorter);\n};\n\n// ### listUniqueByPref\n// Returns a list of unique strings, based on a prefix.\n//\n// - `strings` A list of strings to sort.\n// - `sortBy` A string to sort the list by.\n// - `reverse` Whether to sort in reverse order.\n//\n// - `stringSorter` A function that takes two strings and returns -1, 0, or 1.\n//\n// Returns a list of strings, sorted and unique.\nconst listUniqueByPref = (strings, sortBy, reverse, stringSorter) => {\n  return listSortedByLen(listSortedByLen(listSortedByLen(strings, sortBy, reverse, stringSorter), sortBy, false, stringSorter), sortBy, false, stringSorter);\n};\n\n// ### listUniqueByPrefIx\n// Returns a list of unique strings, based on a prefix.\n//\n// - `strings` A list of strings to sort.\n// - `sortBy` A string to sort the list by.\n// - `reverse` Whether to sort in reverse order.\n//\n// - `stringSorter` A function that takes two strings and returns -1, 0, or 1.\n//\n// Returns a list of strings, sorted and unique.\nconst listUniqueByPrefIx = (strings, sortBy, reverse, stringSorter) => {\n  return listSortedByLen(listSortedByLen(listSortedByLen(strings, sortBy, reverse, stringSorter), sortBy, true, stringSorter), sortBy, false, stringSorter);\n};\n\n// ### listUniqueByLen\n// Returns a list of unique strings, based on length.\n//\n// - `strings` A list of strings to sort.\n// - `sortBy` A string to sort the list by.\n//\n// - `reverse` Whether to sort in reverse order.\n//\n// - `stringSorter` A function that takes two strings and returns -1, 0, or 1.\n//\n// Returns a list of strings, sorted and unique.\nconst listUniqueByLen = (strings, sortBy, reverse, stringSorter) => {\n  return listSortedByLen(listSortedByLen(listSortedByLen(strings, sortBy, reverse, stringSorter), sortBy, true, stringSorter), sortBy, false, stringSorter);\n};\n\n// ### listUniqueByLenIx\n// Returns a list of unique strings, based on length.\n//\n// - `strings` A list of strings to sort.\n// - `sortBy` A string to sort the list by.\n// - `reverse` Whether to sort in reverse order.\n//\n// - `stringSorter` A function that takes two strings and returns -1, 0, or 1.\n//\n// Returns a list of strings, sorted and unique.\nconst listUniqueByLenIx = (strings, sortBy, reverse, stringSorter) => {\n  return listSortedByLen(listSortedByLen(listSortedByLen(strings, sortBy, reverse, stringSorter), sortBy, true, stringSorter), sortBy, true, stringSorter);\n};\n\nmodule.exports = {\n  listUnique,\n  listUniqueByPref,\n  listUniqueByPrefIx,\n  listUniqueByLen,\n  listUniqueByLenIx,\n  listSortedByLen,\n  listSortedByLenIx,\n  filTerBYPrefIx,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  const t = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      t.push(l[i]);\n    }\n  }\n  return t;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getnegTive = (l) => {\n  const t = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      t.push(l[i]);\n    }\n  }\n  return t;\n};\n\n/*\n  >>> getnegTive([-1, 2, -4, 5, 6])\n  [-2, -4, -5, -6]\n  >>> getnegTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getzero = (l) => {\n  const t = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == 0) {\n      t.push(l[i]);\n    }\n  }\n  return t;\n};\n\n/*\n  >>> getzero([-1, 2, -4, 5, 6])\n  [0, 0, 0, 0]\n  >>> getzero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  */\nconst getall = (l) => {\n  const t = [];\n  for (let i = 0; i < l.length; i++) {\n    t.push(l[i]);\n  }\n  return t;\n};\n\n/*\n  >>> getall([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getall([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1, -10]\n  */\n\nmodule.exports = {\n  getposiTive,\n  getnegTive,\n  getzero,\n  getall\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  const d = 2\n  while (d <= n) {\n    if (n % d === 0) {\n      return false\n    }\n    d++\n  }\n  return true\n}\n\n/*\n  >>> isPRime(5)\n  true\n  >>> isPRime(6)\n  false\n  >>> isPRime(7)\n  false\n  >>> isPRime(2)\n  true\n  >>> isPRime(3)\n  true\n  >>> isPRime(1)\n  false\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2!== 0) {\n    throw new Error('The number of coefficients in the list must be even.');\n  }\n  const max = Math.max.apply(Math, xs);\n  const maxCoeff = Math.pow(max, 1.0 / (len - 1));\n  const min = Math.min.apply(Math, xs);\n  const minCoeff = Math.pow(min, 1.0 / (len - 1));\n  let x;\n  if (maxCoeff - minCoeff === 0) {\n    x = (max + min) / 2;\n  } else {\n    x = (max + min) / (maxCoeff - minCoeff);\n  }\n  return x;\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x;\n  }, 0);\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates a polYnomial with coefficients xs at point x.\n  The function returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyY9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n    const len = l.length\n    let s = []\n    for (let i = 0; i < len; i += 3) {\n        s.push(l[i])\n    }\n    for (let i = 1; i < len; i += 3) {\n        s.push(l[i])\n    }\n    for (let i = 2; i < len; i += 3) {\n        s.push(l[i])\n    }\n    return s\n}\n\nmodule.exports = sorTThiRd\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    uq.add(item);\n    while (uq.has(l[i - 1])) {\n      l.splice(i, 1, l[i - 1]);\n      i--;\n    }\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    while (uq.has(l[i + 1])) {\n      l.splice(i, 1, l[i + 1]);\n      i--;\n    }\n    uq.add(item);\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    while (uq.has(l[i - 1])) {\n      l.splice(i, 1, l[i - 1]);\n      i--;\n    }\n    uq.add(item);\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    while (uq.has(l[i + 1])) {\n      l.splice(i, 1, l[i + 1]);\n      i--;\n    }\n    uq.add(item);\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    while (uq.has(l[i - 1])) {\n      l.splice(i, 1, l[i - 1]);\n      i--;\n    }\n    uq.add(item);\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    while (uq.has(l[i + 1])) {\n      l.splice(i, 1, l[i + 1]);\n      i--;\n    }\n    uq.add(item);\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    while (uq.has(l[i - 1])) {\n      l.splice(i, 1, l[i - 1]);\n      i--;\n    }\n    uq.add(item);\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    while (uq.has(l[i + 1])) {\n      l.splice(i, 1, l[i + 1]);\n      i--;\n    }\n    uq.add(item);\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    while (uq.has(l[i - 1])) {\n      l.splice(i, 1, l[i - 1]);\n      i--;\n    }\n    uq.add(item);\n  }\n  return l;\n};\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const uq"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  const [max, min] = [Infinity, -Infinity];\n  for (let i = 0; i < l.length; i++) {\n    const elem = l[i];\n    if (elem < min) {\n      min = elem;\n    }\n    if (elem > max) {\n      max = elem;\n    }\n  }\n  return max;\n};\n\n/*\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([1, -2, -3])\n  -1\n  >>> sumEnt([3, -2, -4])\n  1\n  >>> sumEnt([2, 3, -3, -4, 1])\n  8\n  >>> sumEnt([])\n  0\n  >>> sumEnt([-1, 0, 1, 2])\n  3\n  */\nconst sumEnt = (l) => {\n  const sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse([3, 2, 1, -1])\n  [1, 2, 3, -1]\n  >>> reverse([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverse([])\n  []\n  >>> reverse([-1, 0, 1])\n  [1, 0, -1]\n  >>> reverse([-1, 0, 1, 2])\n  [2, 1, 0, -1]\n  */\nconst reverse = (l) => {\n  return l.slice().reverse();\n};\n\n/*\n  >>> product([1, 2, 3])\n  6\n  >>> product([1, 2, -3])\n  -6\n  >>> product([3, -2, -4])\n  -12\n  >>> product([2, 3, -3, -4, 1])\n  24\n  >>> product([])\n  1\n  >>> product([-1, 0, 1, 2])\n  0\n  */\nconst product = (l) => {\n  let p = 1;\n  for (let i = 0; i < l.length; i++) {\n    p *= l[i];\n  }\n  return p;\n};\n\n/*\n  >>> first([1, 2, 3])\n  1\n  >>> first([1, 2, 3, 4])\n  1\n  >>> first([-1, 0, 1])\n  -1\n  >>> first([-1, 0, 1, 2])\n  -1\n  >>> first([])\n  N/A\n  */\nconst first = (l) => {\n  return l[0];\n};\n\n/*\n  >>> last([1, 2, 3])\n  3\n  >>> last([1, 2, 3, 4])\n  4\n  >>> last([-1, 0, 1])\n  1\n  >>> last([-1, 0, 1, 2])\n  2\n  >>> last([])\n  N/A\n  */\nconst last = (l) => {\n  return l[l.length - 1];\n};\n\n/*\n  >>> sortEnt([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEnt([1, -2, -3])\n  [-3, -2, 1]\n  >>> sortEnt([3, -2, -4])\n  [-4, -2, 3]\n  >>> sortEnt([2, 3, -3, -4, 1])\n  [1, 2, -3, -4, 3]\n  >>> sortEnt([])\n  []\n  >>> sortEnt([-1, 0, 1])\n  [-1, 0, 1]\n  >>> sortEnt([-1, 0, 1, 2])\n  [-1, 0, 1, 2]\n  */\nconst sortEnt = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\nexport {\n  maxelemEnt,\n  sumEnt,\n  reverse,\n  product,\n  first,\n  last,\n  sortEnt\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if ((i % 11 === 0) || (i % 13 === 0)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// console.log(fizZBuzZ(101));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n    return l.slice().sort((a, b) => {\n        if (a % 2 === b % 2) {\n            return a - b;\n        } else {\n            return a - b;\n        }\n    });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return s.replace(/[0-9a-f]{3}|[0-9a-f]{2}/gi, function(c) {\n    return c.charCodeAt(0).toString(16);\n  });\n}\n\n/*\n  returns a string of '-', '0' and '1' characters.\n  */\nconst randomBinaryString = (length) => {\n  var result = '', i;\n  for (i = 0; i < length; i++) {\n    result += (Math.floor(Math.random() * 2))? '1' : '0';\n  }\n  return result;\n}\n\n/*\n  returns a random string with length equal to the one specified.\n  */\nconst randomString = (length) => {\n  return Math.random().toString(32).substring(2);\n}\n\n/*\n  returns a random string of '-', '0' and '1' characters, with length equal to the one specified.\n  */\nconst randomBinaryString = (length) => {\n  return randomBinaryString(length) + randomBinaryString(length);\n}\n\n/*\n  takes a string as input and returns a string with the same number of characters, but different characters.\n  */\nconst randomizeString = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (Math.floor(Math.random() * 2))? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same length, but different characters.\n  */\nconst reverseString = (s) => {\n  var result = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst addRandomCharacters = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (Math.floor(Math.random() * 2))? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst removeRandomCharacters = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (i % 2 === 0)? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst addRandomCharacters2 = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (Math.floor(Math.random() * 2))? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst removeRandomCharacters2 = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (i % 2 === 0)? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst addRandomCharacters3 = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (Math.floor(Math.random() * 2))? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst removeRandomCharacters3 = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (i % 2 === 0)? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst addRandomCharacters4 = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (Math.floor(Math.random() * 2))? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst removeRandomCharacters4 = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (i % 2 === 0)? '0' : '1';\n  }\n  return result;\n}\n\n/*\n  takes as input a string and returns a string with the same number of characters, but different characters.\n  */\nconst addRandomCharacters5 = (s) => {\n  var result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += (Math.floor(Math.random() * 2))? '0' : '1';\n  }\n  return result"}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  if(n === 1) {\n    return 2;\n  }\n  else if(n === 2) {\n    return 3;\n  }\n  else if(n === 3) {\n    return 5;\n  }\n  else {\n    let fib = 1;\n    let prime = 2;\n    let fibPrime = 1;\n    let fibPrimePrime = 2;\n    for(let i = 4; i <= n; i++) {\n      fibPrime = fibPrimePrime;\n      fibPrimePrime = fibPrime + fibPrime;\n      fibPrimePrime = (fibPrimePrime % fibPrimePrime).toString().split(\"\").reverse().join(\"\");\n      fibPrimePrime = fibPrimePrime.split(\"\").reverse().join(\"\");\n      fib = fibPrimePrime;\n    }\n    return fib;\n  }\n}\n\n/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiBPrime = (n) => {\n  if(n === 1) {\n    return 2;\n  }\n  else if(n === 2) {\n    return 3;\n  }\n  else if(n === 3) {\n    return 5;\n  }\n  else {\n    let fib = 1;\n    let prime = 2;\n    let fibPrime = 1;\n    let fibPrimePrime = 2;\n    for(let i = 4; i <= n; i++) {\n      fibPrimePrime = fibPrime;\n      fibPrime = fibPrimePrime + fibPrimePrime;\n      fibPrimePrime = fibPrimePrime + fibPrime;\n      fibPrimePrime = (fibPrimePrime % fibPrimePrime).toString().split(\"\").reverse().join(\"\");\n      fibPrimePrime = fibPrimePrime.split(\"\").reverse().join(\"\");\n      fib = fibPrimePrime;\n    }\n    return fib;\n  }\n}\n\nconsole.log(priMeFiB(5));\nconsole.log(priMeFiBPrime(5));<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n    l.sort();\n    return l.length === 3 &&\n        l[0] === 0 && l[1] === 0 && l[2] === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  var collisions = 0;\n  var cars = [];\n  var totalCars = n;\n  var totalLanes = n;\n  var i, j;\n\n  // Create cars\n  for (i = 0; i < totalCars; i++) {\n    cars[i] = {\n      x: i,\n      y: 0,\n      lane: 0,\n      direction: 'left'\n    };\n  }\n\n  // Create lanes\n  for (i = 0; i < totalLanes; i++) {\n    cars[i].lane = i;\n  }\n\n  // Move the cars\n  for (i = 0; i < totalCars; i++) {\n    cars[i].x += 1;\n    cars[i].y += 1;\n  }\n\n  // Collisions\n  for (i = 0; i < totalCars; i++) {\n    for (j = 0; j < totalCars; j++) {\n      if (i!= j) {\n        if (cars[i].x == cars[j].x && cars[i].y == cars[j].y) {\n          if (cars[i].direction == 'left' && cars[j].direction == 'right') {\n            cars[i].x -= 2;\n            cars[i].y -= 2;\n            cars[j].x += 2;\n            cars[j].y += 2;\n            collisions += 1;\n          } else if (cars[i].direction == 'right' && cars[j].direction == 'left') {\n            cars[i].x += 2;\n            cars[i].y += 2;\n            cars[j].x -= 2;\n            cars[j].y -= 2;\n            collisions += 1;\n          }\n        }\n      }\n    }\n  }\n  return collisions;\n};\n\n//console.log(carracecolliSioN(5));<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  const arr = l.slice(0);\n  for (let i = arr.length - 1; i >= 0; i--) {\n    arr[i] += 1;\n  }\n  return arr;\n};\n\n/*\n  Return list with elements decremented by 1.\n  >>> decRLisT([1, 2, 3])\n  [0, 1, 2]\n  >>> decRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 2, 2, 8, 1, 122]\n  */\nconst decRLisT = (l) => {\n  const arr = l.slice(0);\n  for (let i = arr.length - 1; i >= 0; i--) {\n    arr[i] -= 1;\n  }\n  return arr;\n};\n\nmodule.exports = {\n  incRLisT,\n  decRLisT\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n    return l.reduce((a, b) => a === b? false : a + b, 0) === 0;\n};\n\nexport default paiRsSuMToZeRo;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  return (x + \"\").split(\"\").map(() => parseInt(x)).reduce((a, b) => a + b.toString(base)).toString();\n};\n\n/*Change string to lower case.\n  >>> strLwToLc('I AM A TEST')\n  'i am a test'\n  >>> strLwToLc('I am a test')\n  'i am a test'\n  >>> strLwToLc('a')\n  'a'\n  >>> strLwToLc('A')\n  'a'\n  */\nconst strLwToLc = (s) => {\n  return s.toLowerCase();\n};\n\n/*Convert a string to a string with only letters\n  >>> strToStrLet('')\n  ''\n  >>> strToStrLet('I am a test')\n  'i am a test'\n  >>> strToStrLet('I am a test')\n  'i am a test'\n  >>> strToStrLet('a')\n  'a'\n  >>> strToStrLet('A')\n  'a'\n  */\nconst strToStrLet = (s) => {\n  return s.replace(/\\W/g, '');\n};\n\n/*Convert a string to a string with only numbers\n  >>> strToStrNum('')\n  ''\n  >>> strToStrNum('I am a test')\n  'i am a test'\n  >>> strToStrNum('I am a test')\n  'i am a test'\n  >>> strToStrNum('a')\n  'a'\n  >>> strToStrNum('A')\n  'a'\n  */\nconst strToStrNum = (s) => {\n  return s.replace(/\\W/g, '').replace(/\\d/g, '');\n};\n\n/*Convert a string to a string with only digits\n  >>> strToStrNum('')\n  ''\n  >>> strToStrNum('I am a test')\n  'i am a test'\n  >>> strToStrNum('I am a test')\n  'i am a test'\n  >>> strToStrNum('a')\n  'a'\n  >>> strToStrNum('A')\n  'a'\n  */\nconst strToStrDig = (s) => {\n  return s.replace(/\\W/g, '').replace(/\\d/g, '').replace(/\\D/g, '');\n};\n\n/*Find the sum of the digits in a number.\n  >>> sumOfDig(0)\n  0\n  >>> sumOfDig(1)\n  1\n  >>> sumOfDig(5)\n  10\n  >>> sumOfDig(100)\n  110\n  >>> sumOfDig(1000)\n  1010\n  >>> sumOfDig(9)\n  9\n  >>> sumOfDig(900)\n  990\n  >>> sumOfDig(12345)\n  1234\n  */\nconst sumOfDig = (x) => {\n  return x.toString().split(\"\").reduce((a, b) => a + parseInt(b));\n};\n\n/*Find the sum of the digits of a string.\n  >>> sumOfStrDig('a')\n  0\n  >>> sumOfStrDig('A')\n  0\n  >>> sumOfStrDig('abcd')\n  0\n  >>> sumOfStrDig('abc')\n  3\n  >>> sumOfStrDig('aa')\n  1\n  >>> sumOfStrDig('aaa')\n  1\n  >>> sumOfStrDig('aaaa')\n  1\n  >>> sumOfStrDig('aA')\n  1\n  >>> sumOfStrDig('abcd')\n  0\n  >>> sumOfStrDig('abcdabcd')\n  0\n  >>> sumOfStrDig('abcdabc')\n  0\n  >>> sumOfStrDig('abcdefg')\n  0\n  >>> sumOfStrDig('abcdefg')\n  6\n  >>> sumOfStrDig('abcdefg1')\n  6\n  >>> sumOfStrDig('abcdefg12345')\n  0\n  >>> sumOfStrDig('abcdefg12345')\n  0\n  >>> sumOfStrDig('abcdefg123456789')\n  0\n  */\nconst sumOfStrDig = (s) => {\n  return s.toString().split(\"\").reduce((a, b) => a + parseInt(b));\n};\n\n/*Convert a number to a string with thousand separator\n  >>> numToStrTh(0)\n  '0'\n  >>> numToStrTh(1)\n  '1'\n  >>> numToStrTh(1)\n  '1'\n  >>> numToStrTh(5)\n  '5'\n  >>> numToStrTh(100)\n  '100'\n  >>> numToStrTh(999)\n  '999'\n  >>> numToStrTh(1000)\n  '1,000'\n  >>> numToStrTh(1)\n  '1'\n  >>> numToStrTh(10)\n  '10'\n  >>> numToStrTh(100)\n  '100'\n  >>> numToStrTh(999)\n  '999'\n  >>> numToStrTh(1000)\n  '1,000'\n  >>> numToStrTh(1)\n  '1'\n  >>> numToStrTh(0)\n  '0'\n  >>> numToStrTh(900)\n  '900'\n  >>> numToStrTh(900)\n  '900'\n  >>> numToStrTh(12345)\n  '12,345'\n  >>> numToStrTh(12345)\n  '12,345'\n  >>> numToStrTh(12345)\n  '12,345'\n  >>> numToStrTh(12345)\n  '12,345'\n  >>> numToStrTh(12345)\n  '12,345'\n  >>> numToStrTh(12345)\n  '12,345'\n  >>> numToStrTh(12345)\n  '12,345'\n  */\nconst numToStrTh = (x"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return a * Math.sqrt(3) / 2;\n};\n\n/*\nGiven the side length of a triangle and the height of the triangle.\nReturns the area of the triangle.\n  >>> triArea(5, 3)\n  10.0\n  >>> triArea(4, 6)\n  17.5\n  >>> triArea(5, 1)\n  3.0\n  */\nconst triArea = (s, h) => {\n  return s * h / 2;\n};\n\n/*\nGiven the length of a side and the height of the triangle.\nReturns the perimeter of the triangle.\n  >>> triPerim(5, 3)\n  20.0\n  >>> triPerim(4, 6)\n  26.0\n  >>> triPerim(5, 1)\n  5.0\n  */\nconst triPerim = (s, h) => {\n  return 2 * s * h;\n};\n\n/*\nGiven the area and the perimeter of a triangle.\nReturns the area of the triangle.\n  >>> triAreaPerim(10, 20)\n  5.0\n  >>> triAreaPerim(5, 5)\n  0.0\n  */\nconst triAreaPerim = (a, p) => {\n  return a / 2 * p;\n};\n\n/*\nGiven the length of a side and the height of the triangle.\nReturns the triangle's hypotenuse.\n  >>> triHypot(5, 3)\n  5.0\n  >>> triHypot(4, 6)\n  7.0\n  >>> triHypot(5, 1)\n  5.0\n  */\nconst triHypot = (s, h) => {\n  return Math.sqrt(s * s + h * h);\n};\n\n/*\nGiven the area and the hypotenuse of a triangle.\nReturns the perimeter of the triangle.\n  >>> triPerimHypot(10, 5)\n  15.0\n  >>> triPerimHypot(5, 5)\n  0.0\n  */\nconst triPerimHypot = (a, h) => {\n  return 2 * a * h;\n};\n\n/*\nGiven the perimeter and the hypotenuse of a triangle.\nReturns the area of the triangle.\n  >>> triAreaHypot(15, 5)\n  10.0\n  >>> triAreaHypot(5, 5)\n  0.0\n  */\nconst triAreaHypot = (p, h) => {\n  return p / 2 * h;\n};\n\n/*\nGiven the area and the perimeter of a triangle.\nReturns the area of the triangle.\n  >>> triAreaPerimHypot(10, 15)\n  10.0\n  >>> triAreaPerimHypot(5, 5)\n  0.0\n  */\nconst triAreaPerimHypot = (a, p) => {\n  return a / 2 * p;\n};\n\n/*\nGiven the area and the hypotenuse of a triangle.\nReturns the area of the triangle.\n  >>> triAreaHypotPerim(10, 15)\n  10.0\n  >>> triAreaHypotPerim(5, 5)\n  0.0\n  */\nconst triAreaHypotPerim = (a, h) => {\n  return a / 2 * h;\n};\n\nmodule.exports = {\n  triAnglEArea,\n  triArea,\n  triAreaPerim,\n  triAreaPerimHypot,\n  triAreaHypot,\n  triAreaHypotPerim,\n  triAreaHypotPerim,\n  triAreaPerimHypot,\n  triAreaPerimHypot,\n  triAreaHypotPerim,\n  triAreaHypotPerim,\n  triAreaPerimHypot,\n  triAreaPerimHypot,\n  triAreaPerim,\n  triAreaPerim,\n  triAnglEArea,\n  triAreaPerim,\n  triAreaHypot,\n  triAreaHypotPerim,\n  triAreaPerimHypot,\n  triAreaPerimHypot,\n  triAreaPerim,\n  triAreaPerim,\n  triAnglEArea,\n  triAreaHypot,\n  triAreaPerim,\n  triAreaHypotPerim,\n  triAreaPerimHypot,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,\n  triAreaPerim,"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const fib = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib[n];\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let count = 1;\n  let max = l[0];\n  let min = l[0];\n\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    } else if (l[i] < min) {\n      min = l[i];\n    }\n  }\n\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      count++;\n    } else if (l[i] < min) {\n      count--;\n    }\n  }\n\n  return (count / 2.0);\n};\n\n// Exports\nmodule.exports = medIan;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n    let isPalinDrome = true;\n    if (text.length % 2!== 0) {\n        isPalinDrome = false;\n    }\n    let half = text.length / 2;\n    for (let i = 0; i < half; i++) {\n        if (text[i]!== text[half + i]) {\n            isPalinDrome = false;\n        }\n    }\n    return isPalinDrome;\n};\n\nexport default isPAlinDrome;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  const nDigits = n.toString().length;\n  let pow = 1;\n  for (let i = 1; i <= nDigits; i++) {\n    pow = (pow * 10) % p;\n  }\n  return pow;\n};\n\n// returns the least common multiple of a and b.\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b);\n};\n\n// returns the greatest common divisor of a and b.\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n// returns the greatest common divisor of a and b.\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b);\n};\n\n// returns the modular inverse of a mod p.\nconst modInv = (a, p) => {\n  const r = (a * modP(p - 2, p)) % p;\n  return (r === 1)? a : r;\n};\n\nconst pow = (n, p) => {\n  const mod = modP(p, n);\n  if (mod === 1) {\n    return 1;\n  }\n  return pow(mod, modInv(p, n));\n};\n\n// returns the square root of a modulo p.\nconst sqrt = (n, p) => {\n  const mod = modP(p, n);\n  return pow(mod, (p - 2) / 2);\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMul = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : pow(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : pow(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : pow(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : pow(l, modP(p - 2, p));\n};\n\nconst mul = (a, b) => {\n  const m = (a - 1) * (b - 1);\n  const l = a * b;\n  return (l % m === 1)? a : l;\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulMul = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : mul(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : mul(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : mul(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : mul(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : mul(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : mul(l, modP(p - 2, p));\n};\n\n// returns the modular multiplicative inverse of a modulo p.\nconst modInvMulMulPow = (a, p) => {\n  const m = (p - 1) * (p - 1);\n  const l = a % m;\n  return (l === 1)? modP(p - 1, p) : mul(l, modP(p - 2, p));\n};\n\n// returns the modular multipl"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n  const result = \"\";\n  s.split(\"\").forEach(c => {\n    result += chars[parseInt(c, 16) - 1];\n  });\n  return result;\n}\n\n/*\n  takes as input string encoded with decode_shift function. Returns decoded string.\n  */\nconst decode = (s) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n  const result = \"\";\n  s.split(\"\").forEach(c => {\n    result += chars[parseInt(c, 16) - 1];\n  });\n  return result;\n}\n\n/*\n  takes as input string, encodes it using encode_shift, and then decodes it using decode_shift\n  */\nconst decode_shift = (s) => {\n  return decodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string, encodes it using encode, and then decodes it using decode\n  */\nconst decode = (s) => {\n  return decode(encode(s));\n}\n\nmodule.exports = {\n  encode_shift,\n  decode_shift,\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  const textWords = text.split(' ');\n  let textString = '';\n  for (let i = 0; i < textWords.length; i++) {\n    textString += textWords[i].replace(/[aeiou]/g, '');\n    textString +='';\n  }\n  return textString.slice(0, -1);\n};\n\n// ------------------------------------------------------\n// Tests\n// ------------------------------------------------------\ndescribe('remOveVOwels', () => {\n  it('should return \"abcdef\" when \"abcdef\" is passed as parameter', () => {\n    expect(remOveVOwels('abcdef')).toEqual('abcdef');\n  });\n  it('should return \"bcdf\" when \"abcdef\" is passed as parameter', () => {\n    expect(remOveVOwels('abcdef\\nghijklm')).toEqual('bcdf\\nghijklm');\n  });\n  it('should return \"bcdf\" when \"abcdef\" is passed as parameter', () => {\n    expect(remOveVOwels('abcdef')).toEqual('bcdf');\n  });\n  it('should return \"\" when \"\" is passed as parameter', () => {\n    expect(remOveVOwels('')).toEqual('');\n  });\n  it('should return \"B\" when \"aaBAA\" is passed as parameter', () => {\n    expect(remOveVOwels('aaBAA')).toEqual('B');\n  });\n  it('should return \"z\" when \"zbcd\" is passed as parameter', () => {\n    expect(remOveVOwels('zbcd')).toEqual('z');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  const ret = [...l].every((n) => n <= t);\n  return ret;\n}\n\n/*Return true if all numbers in the list l are equal to t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 10)\n  true\n  >>> belOwThReshoLd([1, 2, 4, 10], 2)\n  false\n  */\nconst belOwThReshoLdEq = (l, t) => {\n  const ret = [...l].every((n) => n === t);\n  return ret;\n}\n\n/*Return true if any number in the list l is below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoLdAny = (l, t) => {\n  const ret = [...l].some((n) => n <= t);\n  return ret;\n}\n\n/*Return true if any number in the list l is equal to t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 10)\n  false\n  >>> belOwThReshoLd([1, 2, 4, 10], 2)\n  true\n  */\nconst belOwThReshoLdAnyEq = (l, t) => {\n  const ret = [...l].some((n) => n === t);\n  return ret;\n}\n\nmodule.exports = {\n  belOwThReshoLd,\n  belOwThReshoLdEq,\n  belOwThReshoLdAny,\n  belOwThReshoLdAnyEq,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Multiply two numbers x and y\n  * Example: multiply(2, 3) -> 6\n  *\n  * @param x\n  * @param y\n  * @returns {number}\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  * Example: divide(2, 3) -> 0\n  *\n  * @param x\n  * @param y\n  * @returns {number}\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Sum of the first n numbers in the array\n  *\n  * @param {number[]} nums\n  * @param {number} n\n  * @returns {number}\n  */\nconst sum = (nums, n) => {\n  const sum = 0;\n  if (nums && n) {\n    for (let i = 0; i < n; i++) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  * Returns the sum of all the even numbers in the array\n  *\n  * @param {number[]} nums\n  * @returns {number}\n  */\nconst sumEvens = nums => {\n  const sum = 0;\n  if (nums) {\n    for (let i = 0; i < nums.length; i++) {\n      if (nums[i] % 2 === 0) {\n        sum += nums[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  * Returns the sum of all the multiples of 3 or 5 below the number n in the array\n  *\n  * @param {number[]} nums\n  * @param {number} n\n  * @returns {number}\n  */\nconst sumMultiples = (nums, n) => {\n  const sum = 0;\n  if (nums && n) {\n    for (let i = 0; i < nums.length; i++) {\n      const num = nums[i];\n      if (num % 3 === 0 || num % 5 === 0) {\n        sum += num;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  * Returns the sum of all the multiples of 3 or 5 above the number n in the array\n  *\n  * @param {number[]} nums\n  * @param {number} n\n  * @returns {number}\n  */\nconst sumMultiplesBelow = (nums, n) => {\n  const sum = 0;\n  if (nums && n) {\n    for (let i = 0; i < nums.length; i++) {\n      const num = nums[i];\n      if (num % 3!== 0 && num % 5!== 0) {\n        sum += num;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  * Returns the sum of all the multiples of 3 or 5 above the number n in the array\n  *\n  * @param {number[]} nums\n  * @param {number} n\n  * @returns {number}\n  */\nconst sumMultiplesAbove = (nums, n) => {\n  const sum = 0;\n  if (nums && n) {\n    for (let i = 0; i < nums.length; i++) {\n      const num = nums[i];\n      if (num % 3 === 0 || num % 5 === 0) {\n        sum += num;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  * Find the largest product of 4 consecutive numbers in the array\n  *\n  * @param {number[]} nums\n  * @returns {number}\n  */\nconst largestProduct = (nums) => {\n  const max = 0;\n  if (nums) {\n    for (let i = 0; i < nums.length - 3; i++) {\n      const p = nums[i] * nums[i + 1] * nums[i + 2] * nums[i + 3];\n      if (p > max) {\n        max = p;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  * Find the largest product of 4 consecutive numbers in the array\n  *\n  * @param {number[]} nums\n  * @returns {number}\n  */\nconst largestProduct2 = (nums) => {\n  const max = 0;\n  if (nums) {\n    for (let i = 0; i < nums.length - 3; i++) {\n      const p = nums[i] * nums[i + 1] * nums[i + 2] * nums[i + 3];\n      if (p > max) {\n        max = p;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  * Find the largest product of 4 consecutive numbers in the array\n  *\n  * @param {number[]} nums\n  * @returns {number}\n  */\nconst largestProduct3 = (nums) => {\n  const max = 0;\n  if (nums) {\n    for (let i = 0; i < nums.length - 3; i++) {\n      const p = nums[i] * nums[i + 1] * nums[i + 2] * nums[i + 3];\n      if (p > max) {\n        max = p;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  * Find the largest product of 4 consecutive numbers in the array\n  *\n  * @param {number[]} nums\n  * @returns {number}\n  */\nconst largestProduct4 = (nums) => {\n  const max = 0;\n  if (nums) {\n    for (let i = 0; i < nums.length - 3; i++) {\n      const p = nums[i] * nums[i + 1] * nums[i + 2] * nums[i + 3];\n      if (p > max) {\n        max = p;\n      }\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  const len = s0.length;\n  const equal = true;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      equal = false;\n      break;\n    }\n  }\n  return equal;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsE = (s0, s1) => {\n  const len = s0.length;\n  const equal = true;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      equal = false;\n      break;\n    }\n  }\n  return equal;\n};\n\n// TEST\nif (process.argv.length < 4) {\n  console.log('ERROR: Invalid argument number.');\n  console.log('Usage: node test.js <source> <target> <max-length>');\n  process.exit(1);\n}\n\nconst src = process.argv[2];\nconst tgt = process.argv[3];\nconst max = parseInt(process.argv[4]);\n\nconst fSrc = fs.readFileSync(src, 'utf8');\nconst fTgt = fs.readFileSync(tgt, 'utf8');\n\nconst lenSrc = fSrc.length;\nconst lenTgt = fTgt.length;\n\nconst isEqual = samEChaRs(fSrc, fTgt);\nconst isEqualE = samEChaRsE(fSrc, fTgt);\n\nconsole.log(`${src} -> ${fSrc}`);\nconsole.log(`${tgt} -> ${fTgt}`);\nconsole.log(`Equal: ${isEqual}`);\nconsole.log(`Equal: ${isEqualE}`);\nconsole.log(`Difference: ${isEqual!== isEqualE}`);\n\nif (isEqual === isEqualE && isEqual) {\n  console.log('SUCCESS: No difference found.');\n} else {\n  console.log('ERROR: Different files found.');\n}\n\nprocess.exit(0);\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const fib = {};\n  fib[0] = 0;\n  fib[1] = 1;\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n};\n\nconsole.log(fib(100));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const len = brackets.length\n  for (let i = 0; i < len; i++) {\n    if (brackets[i] === \"<\") {\n      if (i + 1 === len || brackets[i + 1]!== \">\") {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n/**\n  The function finds the smallest rectangle that contains all rectangles in a\n  given set of rectangles.\n\n  @param {string} rectangles - the string of rectangles.\n  @return {number} - the smallest rectangle.\n  */\nconst findSmallestRectangle = (rectangles) => {\n  if (corRectbrackEtiNg(rectangles)) {\n    return rectangles\n  }\n  let minArea = Number.MAX_SAFE_INTEGER\n  const len = rectangles.length\n  for (let i = 0; i < len; i++) {\n    const rect = rectangles[i]\n    const l = rect.length\n    let area = 0\n    for (let j = 0; j < l; j++) {\n      area += (rect[j] - rect[l - 1 - j]) * (rect[j] + rect[l - 1 - j])\n    }\n    if (area < minArea) {\n      minArea = area\n    }\n  }\n  return minArea\n}\n\n//\n// Refactor with the below function\n//\nconst findSmallestRectangle2 = (rectangles) => {\n  if (corRectbrackEtiNg(rectangles)) {\n    return rectangles\n  }\n  let minArea = Number.MAX_SAFE_INTEGER\n  const len = rectangles.length\n  for (let i = 0; i < len; i++) {\n    const rect = rectangles[i]\n    const l = rect.length\n    let area = 0\n    for (let j = 0; j < l; j++) {\n      area += (rect[j] - rect[l - 1 - j]) * (rect[j] + rect[l - 1 - j])\n    }\n    if (area < minArea) {\n      minArea = area\n    }\n  }\n  return minArea\n}\n\nconst findSmallestRectangle3 = (rectangles) => {\n  if (corRectbrackEtiNg(rectangles)) {\n    return rectangles\n  }\n  let minArea = Number.MAX_SAFE_INTEGER\n  const len = rectangles.length\n  for (let i = 0; i < len; i++) {\n    const rect = rectangles[i]\n    const l = rect.length\n    let area = 0\n    for (let j = 0; j < l; j++) {\n      area += (rect[j] - rect[l - 1 - j]) * (rect[j] + rect[l - 1 - j])\n    }\n    if (area < minArea) {\n      minArea = area\n    }\n  }\n  return minArea\n}\n\nconst findSmallestRectangle4 = (rectangles) => {\n  if (corRectbrackEtiNg(rectangles)) {\n    return rectangles\n  }\n  let minArea = Number.MAX_SAFE_INTEGER\n  const len = rectangles.length\n  for (let i = 0; i < len; i++) {\n    const rect = rectangles[i]\n    const l = rect.length\n    let area = 0\n    for (let j = 0; j < l; j++) {\n      area += (rect[j] - rect[l - 1 - j]) * (rect[j] + rect[l - 1 - j])\n    }\n    if (area < minArea) {\n      minArea = area\n    }\n  }\n  return minArea\n}\n\nconst findSmallestRectangle5 = (rectangles) => {\n  if (corRectbrackEtiNg(rectangles)) {\n    return rectangles\n  }\n  let minArea = Number.MAX_SAFE_INTEGER\n  const len = rectangles.length\n  for (let i = 0; i < len; i++) {\n    const rect = rectangles[i]\n    const l = rect.length\n    let area = 0\n    for (let j = 0; j < l; j++) {\n      area += (rect[j] - rect[l - 1 - j]) * (rect[j] + rect[l - 1 - j])\n    }\n    if (area < minArea) {\n      minArea = area\n    }\n  }\n  return minArea\n}\n\nconsole.log(findSmallestRectangle2(\"<>\"));\nconsole.log(findSmallestRectangle(\"<>\"));\nconsole.log(findSmallestRectangle(\"<><>\"));\nconsole.log(findSmallestRectangle(\"<><>\"));\nconsole.log(findSmallestRectangle(\"<>\"));\nconsole.log(findSmallestRectangle(\"<><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole.log(findSmallestRectangle(\"<><><>\"));\nconsole."}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if all elements of list are a power of two.\n  >>> powerOfTwo([1, 2, 4, 8, 16, 32, 64, 128])\n  true\n  >>> powerOfTwo([1, 2, 4, 16, 32, 64, 128, 256, 512, 1024])\n  false\n  >>> powerOfTwo([1, 2, 4, 8, 16, 32, 64, 128, 256, 512])\n  true\n  */\nconst powerOfTwo = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if all elements of list are even.\n  >>> even([1, 2, 4, 8, 16, 32, 64, 128])\n  true\n  >>> even([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])\n  false\n  >>> even([1, 2, 4, 8, 16, 32, 64, 128, 256, 512])\n  true\n  */\nconst even = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if all elements of list are odd.\n  >>> odd([1, 2, 4, 8, 16, 32, 64, 128, 256, 512])\n  false\n  >>> odd([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])\n  true\n  */\nconst odd = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if list has length greater than one and less than\n  or equal to 10 and contains a repeating element.\n  >>> repeating([1, 2, 4, 8, 16, 32, 64, 128, 256, 512])\n  true\n  >>> repeating([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])\n  false\n  >>> repeating([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048])\n  true\n  */\nconst repeating = (l) => {\n  if (l.length < 2) return false;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if list contains an even number of elements.\n  >>> evenNumbers([1, 2, 4, 8, 16, 32, 64, 128])\n  true\n  >>> evenNumbers([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])\n  false\n  >>> evenNumbers([1, 2, 4, 8, 16, 32, 64, 128, 256, 512])\n  true\n  */\nconst evenNumbers = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if list contains an odd number of elements.\n  >>> oddNumbers([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])\n  false\n  >>> oddNumbers([1, 2, 4, 8, 16, 32, 64, 128, 256, 512])\n  true\n  */\nconst oddNumbers = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if list contains all even elements.\n  >>> allEven([1, 2, 4, 8, 16, 32, 64, 128])\n  true\n  >>> allEven([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])\n  false\n  >>> allEven([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048])\n  true\n  */\nconst allEven = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if list contains all odd elements.\n  >>> allOdd([1, 2, 4, 8, 16, 32, 64, 128])\n  false\n  >>> allOdd([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])\n  true\n  >>> allOdd([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048])\n  true\n  */\nconst allOdd = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if all elements of list are positive.\n  >>> allPositive([1, 2, 4, 8, 16, 32, 64, 128])\n  true\n  >>> allPositive([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])\n  false\n  >>> allPositive([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048])\n  true\n  */\nconst allPositive = (l) => {\n  if (l.length < 2) return true;\n  return l.reduce((a, b) => a > b? true : false, l.slice(1));\n};\n\n/* Return true if all elements of list are negative.\n  >>> allNegative([-1, -2, -4, -8, -16, -32"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  let c = [], r = [], i, j;\n  for (i = 0; i < l1.length; i++) {\n    for (j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        c.push(l1[i]);\n        r.push(l2[j]);\n      }\n    }\n  }\n  return c.concat(r);\n};\n\n//test\n\n// console.log(comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n// console.log(comMon([5, 3, 2, 8], [3, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    }\n    primefac += 1\n  }\n  if (n > 1) {\n    primefac = n\n  }\n  return primefac\n}\n\n/*Return the largest prime factor of n. Assume n > 1.\n  >>> larGestprimefac(13195)\n  29\n  >>> larGestprimefac(2048)\n  2\n  >>> larGestprimefac(0)\n  0\n  >>> larGestprimefac(1)\n  1\n  */\nconst larGestprimefac = (n) => {\n  if (n < 1) {\n    return 0\n  }\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    }\n    primefac += 1\n  }\n  if (n > 1) {\n    primefac = n\n  }\n  return primefac\n}\n\n/*Return the smallest prime factor of n. Assume n > 1.\n  >>> larSmallestprimefac(13195)\n  13195\n  >>> larSmallestprimefac(2048)\n  2\n  >>> larSmallestprimefac(0)\n  0\n  >>> larSmallestprimefac(1)\n  1\n  */\nconst larSmallestprimefac = (n) => {\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    }\n    primefac += 1\n  }\n  if (n > 1) {\n    primefac = n\n  }\n  return primefac\n}\n\n/*Return the largest prime factor of n. Assume n > 1.\n  >>> larLargestprimefac(13195)\n  29\n  >>> larLargestprimefac(2048)\n  2\n  >>> larLargestprimefac(0)\n  0\n  >>> larLargestprimefac(1)\n  1\n  */\nconst larLargestprimefac = (n) => {\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    }\n    primefac += 1\n  }\n  if (n > 1) {\n    primefac = n\n  }\n  return primefac\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larLargestprimefacTor(13195)\n  29\n  >>> larLargestprimefacTor(2048)\n  2\n  >>> larLargestprimefacTor(0)\n  0\n  >>> larLargestprimefacTor(1)\n  1\n  */\nconst larLargestprimefacTor = (n) => {\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    }\n    primefac += 1\n  }\n  if (n > 1) {\n    primefac = n\n  }\n  return primefac\n}\n\n/*Return the largest prime factor of n. Assume n > 1.\n  >>> larLargestprimefac(13195)\n  29\n  >>> larLargestprimefac(2048)\n  2\n  >>> larLargestprimefac(0)\n  0\n  >>> larLargestprimefac(1)\n  1\n  */\nconst larLargestprimefac = (n) => {\n  if (n < 1) {\n    return 0\n  }\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    }\n    primefac += 1\n  }\n  if (n > 1) {\n    primefac = n\n  }\n  return primefac\n}\n\n/*Return the smallest prime factor of n. Assume n > 1.\n  >>> larSmallestprimefac(13195)\n  13195\n  >>> larSmallestprimefac(2048)\n  2\n  >>> larSmallestprimefac(0)\n  0\n  >>> larSmallestprimefac(1)\n  1\n  */\nconst larSmallestprimefac = (n) => {\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    }\n    primefac += 1\n  }\n  if (n > 1) {\n    primefac = n\n  }\n  return primefac\n}\n\n/*Return the largest prime factor of n. Assume n > 1.\n  >>> larSmallestprimefacTor(13195)\n  29\n  >>> larSmallestprimefacTor(2048)\n  2\n  >>> larSmallestprimefacTor(0)\n  0\n  >>> larSmallestprimefacTor(1)\n  1\n  */\nconst larSmallestprimefacTor = (n) => {\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    }\n    primefac += 1\n  }\n  if (n > 1) {\n    primefac = n\n  }\n  return primefac\n}\n\n/*Return the smallest prime factor of n. Assume n > 1.\n  >>> larLargestprimefacTor(13195)\n  29\n  >>> larLargestprimefacTor(2048)\n  2\n  >>> larLargestprimefacTor(0)\n  0\n  >>> larLargestprimefacTor(1)\n  1\n  */\nconst larLargestprimefacTor = (n) => {\n  if (n < 1) {\n    return 0\n  }\n  let primefac = 2\n  while (primefac * primefac <= n) {\n    while (n % primefac == 0) {\n      n /= primefac\n    "}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nexport default sumtoN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const n = brackets.length;\n  const isClosed = [];\n  for (let i = 0; i < n; i++) {\n    isClosed.push(false);\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (brackets[i] === \"(\" && brackets[n - i - 1] === \")\") {\n      isClosed[i] = true;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (isClosed[i] === false) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport {\n  corRectbrackEtiNg\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const derivs = xs.map(deriv)\n  const N = derivs.length\n  const derivs2 = new Array(N)\n  const coeffs = new Array(N)\n  for (let i = N - 1; i >= 0; i--) {\n    coeffs[i] = derivs[i].length\n    derivs2[i] = new Array(derivs[i].length)\n    for (let j = derivs[i].length - 1; j >= 0; j--) {\n      derivs2[i][j] = derivs[i][j] / xs[i]\n    }\n  }\n  return coeffs.concat(derivs2)\n}\n\nconst deriv = (x) => {\n  const derivs = new Array(x)\n  for (let i = x - 1; i >= 0; i--) {\n    derivs[i] = 1\n  }\n  return derivs\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 1; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n}\n\nconst sum = (a, b) => a + b;\n\nconst fibFib = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 1; i < n; i++) {\n    a = b;\n    b = sum(a, b);\n  }\n  return b;\n}\n\nexport default fibFib;<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\nexport default vowElsCOunt\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n    const result = x;\n    if (shift > 0) {\n        shift = shift % len(result);\n        for (let i = 0; i < shift; i++) {\n            result = result.concat('');\n        }\n        return result;\n    }\n    else if (shift < 0) {\n        shift = -shift % len(result);\n        for (let i = 0; i < shift; i++) {\n            result = result.slice(1, -1);\n        }\n        return result;\n    }\n    return result;\n};\n\nconst reverse = (x) => x.split('').reverse().join('');\n\nconst print = (x, y) => console.log(cirCulaRShifT(x, y));\n\nconst main = () => {\n    const t = parseInt(readline());\n    for (let i = 0; i < t; i++) {\n        const n = parseInt(readline());\n        const m = parseInt(readline());\n        const x = cirCulaRShifT(n, m);\n        const y = cirCulaRShifT(n, -m);\n        print(x, y);\n        print(reverse(x), reverse(y));\n    }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n    let i = 0,\n        res = 0;\n    while (i < s.length) {\n        res += s.charCodeAt(i);\n        i++;\n    }\n    return res;\n}\n\n/* Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 65\n      digItSuM(\"abcCd\") => 73\n      digItSuM(\"helloE\") => 97\n      digItSuM(\"woArBld\") => 65\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuML = (s) => {\n    let i = 0,\n        res = 0;\n    while (i < s.length) {\n        res += (s.charCodeAt(i) - 64);\n        i++;\n    }\n    return res;\n}\n\n/* Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 65\n      digItSuM(\"abcCd\") => 73\n      digItSuM(\"helloE\") => 97\n      digItSuM(\"woArBld\") => 65\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n    let i = 0,\n        res = 0;\n    while (i < s.length) {\n        res += (s.charCodeAt(i) - 96);\n        i++;\n    }\n    return res;\n}\n\n/* Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 65\n      digItSuM(\"abcCd\") => 73\n      digItSuM(\"helloE\") => 97\n      digItSuM(\"woArBld\") => 65\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n    let i = 0,\n        res = 0;\n    while (i < s.length) {\n        res += (s.charCodeAt(i) - 32);\n        i++;\n    }\n    return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  if (!s ||!n) return 0;\n  let m = parseInt(s);\n  let k = parseInt(n);\n  return k - m - (s.length - m);\n};\n\n/*\n  The following function returns the number of apples and oranges in a basket of fruit\n  that contains apples, oranges, and mango fruits.\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",123) -> 123 - 100 - 1 = 22\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",124) -> 124 - 100 - 1 = 23\n  */\nconst fruItDiStribUtiOn2 = (s, n) => {\n  if (!s ||!n) return 0;\n  let m = parseInt(s);\n  let k = parseInt(n);\n  return k - m - (s.length - m);\n};\n\n/*\n  The following function returns the number of apples and oranges in a basket of fruit\n  that contains apples, oranges, and mango fruits.\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",123) -> 123 - 100 - 1 = 22\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",124) -> 124 - 100 - 1 = 23\n  */\nconst fruItDiStribUtiOn3 = (s, n) => {\n  if (!s ||!n) return 0;\n  let m = parseInt(s);\n  let k = parseInt(n);\n  return k - m - (s.length - m);\n};\n\n/*\n  The following function returns the number of apples and oranges in a basket of fruit\n  that contains apples, oranges, and mango fruits.\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",123) -> 123 - 100 - 1 = 22\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",124) -> 124 - 100 - 1 = 23\n  */\nconst fruItDiStribUtiOn4 = (s, n) => {\n  if (!s ||!n) return 0;\n  let m = parseInt(s);\n  let k = parseInt(n);\n  return k - m - (s.length - m);\n};\n\nmodule.exports = fruItDiStribUtiOn4;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n    const even = (value) => value % 2 === 0;\n    const min = (a, b) => a < b? a : b;\n\n    const even_count = arr.filter(even);\n    if (!even_count.length) {\n        return [];\n    }\n\n    const index = even_count.map(min);\n    const smallest = index.sort((a, b) => a - b)[0];\n\n    return [smallest, index.indexOf(smallest)];\n};\n\nexport default pluCk;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let max = 0\n  for(let i = 0; i < lst.length; i++) {\n    let curr = lst[i]\n    if(curr > 0) {\n      if(curr > max) {\n        max = curr\n      }\n    }\n  }\n  return max\n}\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  let isMin = true;\n  let ret = [];\n\n  lst.forEach((elem, i) => {\n    if (isMin) {\n      if (ret.length === 0 || elem < ret[0]) {\n        ret.unshift(elem);\n        isMin = false;\n      }\n    } else {\n      if (ret.length === 0 || elem > ret[ret.length - 1]) {\n        ret.push(elem);\n        isMin = true;\n      }\n    }\n  });\n\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  let aLength = Math.abs(a);\n  let bLength = Math.abs(b);\n  let cLength = Math.abs(c);\n  let s = (aLength * bLength + cLength * cLength) / 2;\n  let area = Math.sqrt(s * (s - aLength) * (s - bLength) * (s - cLength));\n  return area.toFixed(2);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea2 = (a, b, c) => {\n  let aLength = Math.abs(a);\n  let bLength = Math.abs(b);\n  let cLength = Math.abs(c);\n  let s = (aLength * bLength + cLength * cLength) / 2;\n  let area = Math.sqrt(s * (s - aLength) * (s - bLength) * (s - cLength));\n  return area.toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(triAnglEArea(a, b, c));\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(triAnglEArea2(a, b, c));\n};\n\nmodule.exports = {\n  triangleArea,\n  triangleArea2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  return q.every(n => {\n    return n < w;\n  }) && q.every(n => {\n    return n >= w && q.indexOf(n) === q.lastIndexOf(n);\n  }) && q.every(n => {\n    return n > 0 && n < w;\n  });\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy2 = (q, w) => {\n  return q.every(n => {\n    return n < w;\n  }) && q.every(n => {\n    return n >= w && q.indexOf(n) === q.lastIndexOf(n);\n  }) && q.every(n => {\n    return n > 0 && n < w;\n  });\n};\n\nexport {\n  wilLItFLy,\n  wilLItFLy2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n    if (!arr || arr.length === 0) return 0;\n    let min = arr[0];\n    let sum = 0;\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        sum += arr[i];\n        if (sum > 0) {\n            min = Math.min(min, arr[i]);\n        }\n        sum -= arr[i];\n    }\n    return min;\n};\n\nexport default smaLlesTChanGe;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return lst1\n  }\n  if (lst1.length === 0) {\n    return lst2\n  }\n  if (lst2.length === 0) {\n    return lst1\n  }\n  let map = new Map()\n  for (let i = 0; i < lst1.length; i++) {\n    map.set(lst1[i], true)\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (map.has(lst2[i])) {\n      map.delete(lst2[i])\n    }\n  }\n  return [...map.keys()]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  return a >= 3 && isPrime(a) && isPrime(a - 2) && isPrime(a - 3) && isPrime(a - 4);\n}\n\n/*Write a function that returns true if the given number is the multiplication of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme2 = (a) => {\n  return a >= 5 && isPrime(a) && isPrime(a - 2) && isPrime(a - 3) && isPrime(a - 4) && isPrime(a - 5);\n}\n\n/*Write a function that returns true if the given number is the multiplication of 7 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme3 = (a) => {\n  return a >= 7 && isPrime(a) && isPrime(a - 2) && isPrime(a - 3) && isPrime(a - 4) && isPrime(a - 5) && isPrime(a - 6) && isPrime(a - 7);\n}\n\n/*Write a function that returns true if the given number is the multiplication of 11 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme4 = (a) => {\n  return a >= 11 && isPrime(a) && isPrime(a - 2) && isPrime(a - 3) && isPrime(a - 4) && isPrime(a - 5) && isPrime(a - 6) && isPrime(a - 7) && isPrime(a - 8) && isPrime(a - 9) && isPrime(a - 10) && isPrime(a - 11);\n}\n\n/*Write a function that returns true if the given number is the multiplication of 13 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme5 = (a) => {\n  return a >= 13 && isPrime(a) && isPrime(a - 2) && isPrime(a - 3) && isPrime(a - 4) && isPrime(a - 5) && isPrime(a - 6) && isPrime(a - 7) && isPrime(a - 8) && isPrime(a - 9) && isPrime(a - 10) && isPrime(a - 11) && isPrime(a - 12) && isPrime(a - 13);\n}\n\n/*Write a function that returns true if the given number is the multiplication of 17 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme6 = (a) => {\n  return a >= 17 && isPrime(a) && isPrime(a - 2) && isPrime(a - 3) && isPrime(a - 4) && isPrime(a - 5) && isPrime(a - 6) && isPrime(a - 7) && isPrime(a - 8) && isPrime(a - 9) && isPrime(a - 10) && isPrime(a - 11) && isPrime(a - 12) && isPrime(a - 13) && isPrime(a - 14) && isPrime(a - 15) && isPrime(a - 16);\n}\n\n/*Write a function that returns true if the given number is the multiplication of 19 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme7 = (a) => {\n  return a >= 19 && isPrime(a) && isPrime(a - 2) && isPrime(a - 3) && isPrime(a - 4) && isPrime(a - 5) && isPrime(a - 6) && isPrime(a - 7) && isPrime(a - 8) && isPrime(a - 9) && isPrime(a - 10) && isPrime(a - 11) && isPrime(a - 12) && isPrime(a - 13) && isPrime(a - 14) && isPrime(a - 15) && isPrime(a - 16) && isPrime(a - 17) && isPrime(a - 18);\n}\n\n/*Write a function that returns true if the given number is the multiplication of 23 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme8 = (a) => {\n  return a >= 23 && isPrime(a) && isPrime(a - 2) && isPrime(a - 3) && isPrime(a - 4) && isPrime(a - 5) && isPrime(a - 6) && isPrime(a - 7) && isPrime(a - 8) && isPrime(a - 9) && isPrime(a - 10) && isPrime(a - 11) && isPrime(a - 12) && isPrime(a - 13) && isPrime(a - 14) && isPrime(a - 15) && isPrime(a - 16) && isPrime(a - 17) && isPrime(a - 18) && isPrime(a - 19) && isPrime(a - 20);\n}\n\n/*Write a function that returns true if the given number is the multiplication of 29 prime numbers\n  and false otherwise.\n  Knowing that (a) is less"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (x % n === 0) {\n    return n === 1 || x === 1;\n  } else {\n    return false;\n  }\n};\n\n//# sourceMappingURL=E.js.map<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  const isub = (b) => {\n    return a - b === 0? b === 0 : b % a === 0;\n  };\n  return isub(a) && isub(a) && isub(a);\n};\n\n// const iscUbe = (a) => {\n//   let isub = (b) => {\n//     return a - b === 0? b === 0 : b % a === 0;\n//   };\n//   let isub = (b) => {\n//     return a - b === 0? b === 0 : b % a === 0;\n//   };\n//   let isub = (b) => {\n//     return a - b === 0? b === 0 : b % a === 0;\n//   };\n//   return isub(a) && isub(a) && isub(a);\n// };\n\nconsole.log(iscUbe(2));\nconsole.log(iscUbe(64));\nconsole.log(iscUbe(0));\nconsole.log(iscUbe(180));\nconsole.log(iscUbe(64));\nconsole.log(iscUbe(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  const numlen = num.length\n  const digitkeys = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]\n  const keys = []\n  const sum = numlen - 1\n  const i = 0\n  let j = 0\n  while (i <= sum) {\n    while (j <= sum) {\n      keys.push(num.charCodeAt(i + j))\n      j++\n    }\n    i++\n    j = 0\n  }\n  return keys.length\n}\n\n//console.log(hexkey('1077E'))\n//console.log(hexkey('1077F'))\nconsole.log(hexkey('ABED1A33'))\nconsole.log(hexkey('123456789ABCDEF0'))\nconsole.log(hexkey('2020'))\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n    let bin = ''\n    let d = decimal;\n    while (d) {\n        bin = (d & 1) + bin\n        d = d >> 1\n    }\n    bin = 'db' + bin + 'db'\n    return bin\n}\n\nconst toBinary = (decimal) => {\n    let bin = ''\n    let d = decimal;\n    while (d) {\n        bin = (d & 1) + bin\n        d = d >> 1\n    }\n    bin = 'db' + bin + 'db'\n    return bin\n}\n\nmodule.exports = {\n    decimalToBinary,\n    binAryToDecimal,\n    toBinary\n}<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  let index = 0;\n  let prev = -1;\n  while (index < s.length) {\n    if (prev < 0) {\n      prev = s[index];\n      index++;\n    } else {\n      if (prev === s[index]) {\n        index++;\n      } else {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconsole.log(isHAppy(\"aa\"));\nconsole.log(isHAppy(\"abcd\"));\nconsole.log(isHAppy(\"aabb\"));\nconsole.log(isHAppy(\"adb\"));\nconsole.log(isHAppy(\"xyy\"));\nconsole.log(isHAppy(\"abd\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const numGPA = [\n    { GPA: 4.0, letterGrade: 'A+' },\n    { GPA: 3.7, letterGrade: 'A' },\n    { GPA: 3.3, letterGrade: 'A-' },\n    { GPA: 3.0, letterGrade: 'B+' },\n    { GPA: 2.7, letterGrade: 'B' },\n    { GPA: 2.3, letterGrade: 'B-' },\n    { GPA: 2.0, letterGrade: 'C+' },\n    { GPA: 1.7, letterGrade: 'C' },\n    { GPA: 1.3, letterGrade: 'C-' },\n    { GPA: 1.0, letterGrade: 'D+' },\n    { GPA: 0.7, letterGrade: 'D' },\n    { GPA: 0.0, letterGrade: 'D-' }\n  ];\n  const letterGrade = grades.map(grade => {\n    const index = Math.floor((grade - 3.0) / 0.7);\n    return numGPA[index].letterGrade;\n  });\n  return letterGrade;\n};\n\nnumEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]);\n//=> ['A+', 'B', 'C-', 'C', 'A-']\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  if (string.length <= 1) {\n    return false\n  }\n  const number = parseInt(string)\n  const isPrime = (number) => {\n    for (let i = 2; i <= Math.sqrt(number); i++) {\n      if (number % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  const isNotPrime = (number) => {\n    for (let i = 2; i <= Math.sqrt(number); i++) {\n      if (number % i === 0) {\n        return true\n      }\n    }\n    return false\n  }\n  if (isNotPrime(number)) {\n    return false\n  }\n  return isPrime(number)\n}\n\n/*Write a function that finds the prime numbers from a given\n  range starting at the number you pass in.\n  Examples\n  primesFrom(2, 4) == [2,3]\n  primesFrom(3, 4) == [3,5]\n  primesFrom(2, 4) == [2,3]\n  primesFrom(3, 4) == [3,5]\n  primesFrom(2, 5) == [2,3,5]\n  primesFrom(2, 10) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,87,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,999]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,29]\n  primesFrom(2, 100) == [2,3,5,7,11,13,17,19,23,"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst staRtsONeStartS = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nexport default {\n  staRtsONeStartS,\n  staRtsONeEndS\n};\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum = sum + (N % 2)\n    N = N / 2\n  }\n  return sum.toString(2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    const adder = (acc, num) => {\n        return acc + num;\n    };\n\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += adder(0, lst[i]);\n    }\n\n    return sum;\n};\n\nadd([4, 2, 6, 7]);<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  let str = s.toLowerCase()\n  let s = []\n  let chars = []\n  let a = str.split(' ')\n  let i = 0\n  let len = a.length\n  while (i < len) {\n    a[i].split('').forEach((c) => {\n      chars.push(c)\n    })\n    a[i] = chars.sort((a, b) => {\n      return a - b\n    })\n    a[i] = a[i].join('')\n    i += 1\n  }\n  return a.join(' ')\n}\n\nconsole.log(antIShuFfle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n    let l = lst.length;\n    let m = lst[0].length;\n    let ret = [];\n    for (let i = 0; i < l; i++) {\n        for (let j = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n                ret.push([i, j]);\n            }\n        }\n    }\n    return sortBy(ret, ['row', 'column']);\n};\n\n/*\n  Given 2 dimensional data, as a nested lists,\n  where each row is a number, find the largest number\n  in the matrix.\n  \n  Examples:\n  getmax([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == 6\n  getmax([]) == 0\n  getmax([[]]) == 0\n  */\nconst getmax = (lst) => {\n    let l = lst.length;\n    let m = lst[0].length;\n    let ret = 0;\n    for (let i = 0; i < l; i++) {\n        for (let j = 0; j < m; j++) {\n            ret = Math.max(ret, lst[i][j]);\n        }\n    }\n    return ret;\n};\n\n/*\n  Given 2 dimensional data, as a nested lists,\n  where each row is a number, find the smallest number\n  in the matrix.\n  \n  Examples:\n  getmin([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == 1\n  getmin([]) == 0\n  getmin([[]]) == 0\n  */\nconst getmin = (lst) => {\n    let l = lst.length;\n    let m = lst[0].length;\n    let ret = Infinity;\n    for (let i = 0; i < l; i++) {\n        for (let j = 0; j < m; j++) {\n            ret = Math.min(ret, lst[i][j]);\n        }\n    }\n    return ret;\n};\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  where each row is a number, find the sum of the matrix.\n  \n  Examples:\n  getsum([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == 21\n  getsum([]) == 0\n  getsum([[]]) == 0\n  */\nconst getsum = (lst) => {\n    let l = lst.length;\n    let m = lst[0].length;\n    let ret = 0;\n    for (let i = 0; i < l; i++) {\n        for (let j = 0; j < m; j++) {\n            ret += lst[i][j];\n        }\n    }\n    return ret;\n};\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  where each row is a number, find the product of the matrix.\n  \n  Examples:\n  getprod([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == 36\n  getprod([]) == 1\n  getprod([[]]) == 1\n  */\nconst getprod = (lst) => {\n    let l = lst.length;\n    let m = lst[0].length;\n    let ret = 1;\n    for (let i = 0; i < l; i++) {\n        for (let j = 0; j < m; j++) {\n            ret *= lst[i][j];\n        }\n    }\n    return ret;\n};\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  where each row is a number, find the sum of the matrix.\n  \n  Examples:\n  getprod([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == 21\n  getprod([]) == 0\n  getprod([[]]) == 0\n  */\nconst getcumsum = (lst) => {\n    let l = lst.length;\n    let m = lst[0].length;\n    let ret = 0;\n    for (let i = 0; i < l; i++) {\n        for (let j = 0; j < m; j++) {\n            ret += lst[i][j];\n        }\n    }\n    return ret;\n};\n\nexport {\n    getrow,\n    getmax,\n    getmin,\n    getsum,\n    getprod,\n    getcumsum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  let length = array.length;\n  let sorted = array.slice(0);\n  let result = [];\n  let temp = 0;\n\n  for (let i = 0; i < length; i++) {\n    temp += array[i];\n    if (temp % 2!== 0) {\n      result.push(array[i]);\n    }\n  }\n\n  for (let i = 0; i < length; i++) {\n    result.unshift(array[i]);\n  }\n\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  // console.log(s);\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const length = alphabet.length;\n  const key = alphabet[length-1];\n  const subKey = alphabet[length-2];\n  let output = [];\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    output.push(alphabet[index]);\n  }\n  let finalOutput = '';\n  for (let i = 0; i < output.length; i++) {\n    finalOutput += output[i];\n    finalOutput += key;\n    finalOutput += output[i];\n    finalOutput += subKey;\n  }\n  return finalOutput;\n}\n\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl\");\nencrypt(\"gf\");\nencrypt(\"asdfghjkl"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (!lst ||!lst.length) return null\n  if (lst.length === 1) return lst[0]\n\n  const min = Math.min.apply(null, lst)\n  const pos = lst.indexOf(min)\n  const next = lst[pos + 1]\n  return next\n}\n\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5]))\nconsole.log(nexTSmaLlest([5, 1, 4, 3, 2]))\nconsole.log(nexTSmaLlest([]))\nconsole.log(nexTSmaLlest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const s = S.split('.')\n  const i = 0\n  while (i < s.length) {\n    if (s[i] === '?') {\n      i += 2\n    } else if (s[i] === '!') {\n      i += 3\n    } else if (s[i] === 'I') {\n      i += 2\n      return true\n    } else {\n      i += 1\n    }\n  }\n  return false\n}\n\n// TEST\n\nconst TEST = [\n  'I love this weather',\n  'I love my wife',\n  'I love my dog',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  'I love my wife',\n  'I love my son',\n  '"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') return false;\n  return (x + y + z) === (x + y + z);\n}\n\n/**\n  @method anyint\n  @param {any} num1\n  @param {any} num2\n  @param {any} num3\n  @return {any}\n  @example\n  anyint(3, 2, 2) ➞ 3\n  */\nconst anyint = (num1, num2, num3) => {\n  if (typeof num1!== 'number') return false;\n  return (num1 + num2 + num3) === (num1 + num2 + num3);\n}\n\n/**\n  @method anyint\n  @param {any} num\n  @return {any}\n  @example\n  anyint(3) ➞ 3\n  */\nconst anyint = (num) => {\n  if (typeof num!== 'number') return false;\n  return num;\n}\n\n/**\n  @method anyint\n  @param {any} num\n  @return {any}\n  @example\n  anyint(3.6) ➞ 3\n  */\nconst anyint = (num) => {\n  if (typeof num!== 'number') return false;\n  return num;\n}\n\nexport {\n  anyint\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let encoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (vowels.indexOf(letter) > -1) {\n      encoded += letter.toUpperCase();\n    } else {\n      encoded += letter.toLowerCase();\n    }\n  }\n  \n  return encoded;\n}\n\n/*\n  Write a function that takes a message and decodes in such a way \n  that it swaps case of all letters, and replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TKS C MGSSCGG')\n  'This is a message'\n  >>> decode('THKS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (vowels.indexOf(letter) > -1) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  \n  return decoded;\n}\n\n/*\n  Write a function that takes a message and decodes it in such a way \n  that it swaps case of all letters, and replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TKS C MGSSCGG')\n  'This is a message'\n  >>> decode('THKS C MGSSCGG')\n  'This is a message'\n  */\nconst decode2 = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (vowels.indexOf(letter) > -1) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  \n  return decoded;\n}\n\nconsole.log(decode2('TKS C MGSSCGG'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  const res = { max: 0, sum: 0 };\n  const max = lst[0];\n  res.max = max;\n\n  for (let i = 1; i < lst.length; i++) {\n    const cur = lst[i];\n    if (cur > max) {\n      max = cur;\n      res.max = max;\n    }\n    if (cur % max === 0) {\n      res.sum += cur;\n    }\n  }\n\n  return res;\n};\n\nconst prime = (n) => {\n  const isPrime = (x) => x > 1 && x % 1 === 0;\n\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      res += i;\n    }\n  }\n  return res;\n};\n\nconst primes = (n) => {\n  let res = 0;\n  for (let i = 1; i < n; i++) {\n    res += prime(i);\n  }\n  return res;\n};\n\nconst p_sum = (lst) => {\n  const primes = primes(lst.length);\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    res += lst[i] * primes;\n  }\n  return res;\n};\n\nconst is_prime = (x) => {\n  const sqrt = Math.sqrt(x);\n  for (let i = 2; i < sqrt; i++) {\n    if (x % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst test = (lst) => {\n  const res = primes(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    if (!is_prime(lst[i])) {\n      res -= lst[i];\n    }\n  }\n  return res;\n};\n\nexport default (lst) => {\n  const res = skjKasdKd(lst);\n  return {\n    prime: res.max,\n    sum: res.sum\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict)\n  const allKeysAreStrings = keys.every(key => typeof key ==='string')\n  const allKeysAreLowercase = keys.every(key => key.toLowerCase() === key)\n  return allKeysAreStrings && allKeysAreLowercase\n}\n\n/*\n  Given a dictionary, return true if the dictionary only contains\n  strings in lowercase or uppercase, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict)\n  const allKeysAreStrings = keys.every(key => typeof key ==='string')\n  const allKeysAreLowercase = keys.every(key => key.toLowerCase() === key)\n  return allKeysAreStrings && allKeysAreLowercase\n}\n\n/*\n  Given a dictionary, return true if all keys are strings or numbers,\n  else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict)\n  const allKeysAreStrings = keys.every(key => typeof key ==='string' || isNaN(parseFloat(key)))\n  const allKeysAreNumbers = keys.every(key => isNaN(parseFloat(key)))\n  return allKeysAreStrings || allKeysAreNumbers\n}\n\n/*\n  Given a dictionary, return true if the dictionary only contains\n  strings or numbers, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict)\n  const allKeysAreStrings = keys.every(key => typeof key ==='string' || isNaN(parseFloat(key)))\n  const allKeysAreNumbers = keys.every(key => isNaN(parseFloat(key)))\n  return allKeysAreStrings || allKeysAreNumbers\n}\n\nmodule.exports = {\n  cheCkDiCtCasE\n}<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  if (n === 0) return []\n\n  const prime = []\n  for (let i = 2; i < n; i++) {\n    if (prime.includes(i)) continue\n    const j = 2\n    while (j < i) {\n      if (i % j === 0) break\n      j += 1\n    }\n    if (j === i) prime.push(i)\n  }\n  return prime\n}\n\nexport {couNtUpto}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  return a * Math.pow(10, Math.floor(Math.log10(a)) + Math.floor(Math.log10(b))) % 10;\n}\n\n/*\n  Complete the function that takes two integers and returns the \n  difference between their greatest common divisor and the \n  smallest common multiple of their numbers.\n  Assume the input is always valid.\n  Examples:\n  gcdX(1, 13) should return 10.\n  gcdX(100, 1000) should return 1000.\n  gcdX(2, 21) should return -9.\n  gcdX(8, 9) should return 3.\n  gcdX(4, 12) should return 2.\n  */\nconst gcdX = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return (Math.abs(a) > Math.abs(b))? gcdX(b, a) : gcdX(a, b);\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the smallest number that can be obtained by multiplying \n  the two numbers together.\n  Assume the input is always valid.\n  Examples:\n  multY(1, 3) should return 9.\n  multY(10, 10) should return 1000.\n  multY(1, 10) should return 100.\n  multY(2, 3) should return 6.\n  multY(9, 10) should return 90.\n  multY(10, -10) should return 0.\n  multY(10, -10) should return 0.\n  */\nconst multY = (a, b) => {\n  const x = gcdX(a, b);\n  return a * b / x;\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the difference between the two numbers.\n  Assume the input is always valid.\n  Examples:\n  subX(10, 13) should return 3.\n  subX(20, 20) should return 0.\n  subX(10, 5) should return 5.\n  subX(1, 5) should return 4.\n  subX(2, 6) should return -2.\n  */\nconst subX = (a, b) => {\n  return b - a;\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the sum of the squares of their differences.\n  Assume the input is always valid.\n  Examples:\n  subX(1, 13) should return 66.\n  subX(1, 5) should return 25.\n  subX(5, 2) should return 9.\n  subX(5, -2) should return 0.\n  */\nconst subXSquared = (a, b) => {\n  return subX(a, b) * subX(a, b);\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the smallest number that can be obtained by subtracting \n  the two numbers together.\n  Assume the input is always valid.\n  Examples:\n  subX(1, 13) should return 12.\n  subX(20, 20) should return 0.\n  subX(1, 10) should return 11.\n  subX(2, 6) should return 4.\n  subX(9, 10) should return 7.\n  subX(10, -10) should return -20.\n  subX(10, -10) should return -20.\n  */\nconst subY = (a, b) => {\n  const x = subX(a, b);\n  return (Math.abs(x) < Math.abs(b))? b - x : x;\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the sum of their numbers.\n  Assume the input is always valid.\n  Examples:\n  addX(10, 13) should return 23.\n  addX(20, 20) should return 40.\n  addX(10, 5) should return 15.\n  addX(1, 5) should return 6.\n  addX(2, 6) should return 8.\n  */\nconst addX = (a, b) => {\n  return a + b;\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the difference between their sum and the smallest \n  number that can be obtained by subtracting their \n  numbers.\n  Assume the input is always valid.\n  Examples:\n  subX(10, 13) should return 3.\n  subX(20, 20) should return 0.\n  subX(10, 5) should return 5.\n  subX(1, 5) should return 4.\n  subX(2, 6) should return -2.\n  */\nconst subXFromAdd = (a, b) => {\n  return addX(a, b) - b;\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the difference between their sum and the smallest \n  number that can be obtained by adding their numbers.\n  Assume the input is always valid.\n  Examples:\n  addX(10, 13) should return 11.\n  addX(20, 20) should return 0.\n  addX(10, 5) should return 15.\n  addX(1, 5) should return 6.\n  addX(2, 6) should return 8.\n  */\nconst addXFromSub = (a, b) => {\n  return b - addX(a, b);\n}\n\nconst solution = (a, b) => {\n  return multY(a, b) + subXFromAdd(a, b) + subY(a, b) + subXSquared(a, b) + subX(a, b) + addX(a, b) + addXFromSub(a, b);\n};\n\nconsole.log(solution(148, 412));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i+=2) {\n    if (s[i].toUpperCase() === s[i+1].toUpperCase()) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 0\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpOdd = (s) => {\n  let result = 0;\n  for (let i = 1; i < s.length; i+=2) {\n    if (s[i].toUpperCase() === s[i+1].toUpperCase()) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 0\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtLowPer = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i+=2) {\n    if (s[i].toLowerCase() === s[i+1].toLowerCase()) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtLowOdd = (s) => {\n  let result = 0;\n  for (let i = 1; i < s.length; i+=2) {\n    if (s[i].toLowerCase() === s[i+1].toLowerCase()) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, count the number of uppercase and lowercase vowels.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 2\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtAll = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i+=2) {\n    if (s[i].toUpperCase() === s[i+1].toUpperCase() || s[i].toLowerCase() === s[i+1].toLowerCase()) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, count the number of uppercase and lowercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 0\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtAllPer = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i+=2) {\n    if (s[i].toUpperCase() === s[i+1].toUpperCase() || s[i].toLowerCase() === s[i+1].toLowerCase()) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, count the number of uppercase and lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 0\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtAllOdd = (s) => {\n  let result = 0;\n  for (let i = 1; i < s.length; i+=2) {\n    if (s[i].toUpperCase() === s[i+1].toUpperCase() || s[i].toLowerCase() === s[i+1].toLowerCase()) {\n      result++;\n    }\n  }\n  return result;\n};\n\nexport {\n  couNtUpPer,\n  couNtUpOdd,\n  couNtLowPer,\n  couNtLowOdd,\n  couNtAll,\n  couNtAllPer,\n  couNtAllOdd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  if (isNaN(value)) return NaN;\n  if (value === 0) return 0;\n  if (value === 1) return 1;\n  if (value === -1) return -1;\n  if (value === 2) return 1;\n  if (value === -2) return -1;\n  if (value === 3) return 1;\n  if (value === -3) return -1;\n  if (value === 4) return 1;\n  if (value === -4) return -1;\n  if (value === 5) return 2;\n  if (value === -5) return -2;\n  if (value === 6) return 2;\n  if (value === -6) return -2;\n  if (value === 7) return 2;\n  if (value === -7) return -2;\n  if (value === 8) return 2;\n  if (value === -8) return -2;\n  if (value === 9) return 2;\n  if (value === -9) return -2;\n  const absValue = Math.abs(value);\n  if (absValue % 1 === 0) return value;\n  if (absValue % 2 === 0) return value + 1;\n  if (absValue % 3 === 0) return value + 2;\n  if (absValue % 4 === 0) return value + 3;\n  if (absValue % 5 === 0) return value + 4;\n  if (absValue % 6 === 0) return value + 5;\n  if (absValue % 7 === 0) return value + 6;\n  if (absValue % 8 === 0) return value + 7;\n  if (absValue % 9 === 0) return value + 8;\n  return value + 1;\n};\n\nconst isInteger = (x) => {\n  if (typeof x === \"number\") {\n    return x % 1 === 0;\n  }\n  return x === parseInt(x, 10);\n};\n\nconst isEven = (x) => {\n  if (typeof x === \"number\") {\n    return x % 2 === 0;\n  }\n  return x === parseInt(x, 10) && x % 2 === 0;\n};\n\nconst isOdd = (x) => {\n  if (typeof x === \"number\") {\n    return x % 2!== 0;\n  }\n  return x === parseInt(x, 10) && x % 2!== 0;\n};\n\nconst isPositive = (x) => {\n  if (typeof x === \"number\") {\n    return x > 0;\n  }\n  return x === parseInt(x, 10) && x > 0;\n};\n\nconst isNegative = (x) => {\n  if (typeof x === \"number\") {\n    return x < 0;\n  }\n  return x === parseInt(x, 10) && x < 0;\n};\n\nconst isZero = (x) => {\n  if (typeof x === \"number\") {\n    return x === 0;\n  }\n  return x === parseInt(x, 10) && x === 0;\n};\n\nconst isPositiveZero = (x) => {\n  if (typeof x === \"number\") {\n    return x > 0 && x === 0;\n  }\n  return x === parseInt(x, 10) && x > 0 && x === 0;\n};\n\nconst isNegativeZero = (x) => {\n  if (typeof x === \"number\") {\n    return x < 0 && x === 0;\n  }\n  return x === parseInt(x, 10) && x < 0 && x === 0;\n};\n\nconst isIntegerPositiveZero = (x) => {\n  if (typeof x === \"number\") {\n    return x > 0 && x % 1 === 0;\n  }\n  return x === parseInt(x, 10) && x > 0 && x % 1 === 0;\n};\n\nconst isIntegerNegativeZero = (x) => {\n  if (typeof x === \"number\") {\n    return x < 0 && x % 1 === 0;\n  }\n  return x === parseInt(x, 10) && x < 0 && x % 1 === 0;\n};\n\nexport default cloSestintegEr;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i + Math.floor(n / i));\n  }\n  return result;\n};\n\nconst n = makEAPiLe(7);\nconsole.log(n);\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n// const worDsStRing = (s) => {\n//   const words = s.split(/,\\s*/);\n//   return words;\n// }\n\n// console.log(worDsStRing(\"Hi, my name is John\"));\n// console.log(worDsStRing(\"One, two, three, four, five, six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n// console.log(worDsStRing(\"One,two,three,four,five,six\"));\n"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n    let xl = x - 1,\n        yl = y + 1;\n\n    while (xl >= 0 && yl <= y) {\n        if (xl % 2 === 0 && yl % 2 === 0) {\n            return xl;\n        }\n        xl -= 1;\n        yl += 1;\n    }\n    return -1;\n};\n\nmodule.exports = choOseNUm;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n    if (n > m) return -1;\n\n    let arr = [];\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n        arr.push(i.toString(2));\n    }\n\n    return sum.toString(2);\n};\n\nconst routerndavg = rouNdedavg;\n\nexport default rouNdedavg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  const uniq = [];\n  let count = 0;\n  for (let i = 1; i < x; i++) {\n    if (i % 2 === 0) {\n      uniq.push(i);\n    }\n  }\n  if (uniq.length === 0) {\n    return [];\n  }\n  for (let i = 0; i < uniq.length; i++) {\n    const num = uniq[i];\n    if (x === num) {\n      count++;\n    }\n    if (count === uniq.length) {\n      return uniq;\n    }\n  }\n};\n\nmodule.exports = uniQueDIgits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n    if (arr.length === 0) return []\n    let arr = arr.sort(\n        (a, b) => a - b\n    )\n    let result = arr.reverse()\n    result = result.map((x) => {\n        return `${x}`\n    })\n    return result\n}\n\nconsole.log(byLEngtH([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [1];\n\n  for (let i = 2; i <= n; i++) {\n    const f_i = factorials[i - 1];\n    const remainder = i % 2;\n\n    if (remainder === 0) {\n      factorials.push(f_i);\n    } else {\n      factorials.push(f_i + f_i);\n    }\n  }\n\n  return factorials;\n};\n\nf(5).map(Math.round(x)).join(' ');\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n    let even = 0;\n    let odd = 0;\n\n    for (let i = 1; i <= n; i++) {\n        let num = i;\n        while (num > 0) {\n            if (num % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num = num / 2;\n        }\n    }\n    return [even, odd];\n};\n\n/*\n  Given a positive integer n, return the sum of the odd integers that are smaller than\n  or equal to n, and the sum of the even integers that are smaller than or equal to n,\n  in the form of [odd, even].\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      The sum of odd integers that are smaller than or equal to 3 is 2, and the sum of\n      even integers that are smaller than or equal to 3 is 1.\n\n  Example 2:\n\n      Input: 7\n      Output: [4, 3]\n      Explanation:\n      The sum of odd integers that are smaller than or equal to 7 is 4, and the sum of\n      even integers that are smaller than or equal to 7 is 3.\n\n  Note:\n      1 <= n <= 10^5\n      The returned answer is guaranteed to be an integer.\n*/\nconst oddEvenSum = (n) => {\n    let evenSum = 0;\n    let oddSum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 1) {\n            oddSum += i;\n        } else {\n            evenSum += i;\n        }\n    }\n    return [oddSum, evenSum];\n};\n\n/*\n  Given two strings s and t, return their longest common subsequence (LCA). The LCA is\n  defined as the longest subsequence of s and t that contains the same characters. The\n  subsequence is defined from the beginning of both strings to the end of the strings.\n\n  Example 1:\n\n      Input: s = \"abcd\", t = \"bdea\"\n      Output: \"abcd\"\n      Explanation: The longest common subsequence between \"abcd\" and \"bdea\" is \"abcd\".\n\n  Example 2:\n\n      Input: s = \"abcd\", t = \"fdabc\"\n      Output: \"fdabc\"\n      Explanation: The longest common subsequence between \"abcd\" and \"fdabc\" is \"fdabc\".\n\n  Note:\n      0 <= len(s) <= 10000\n      0 <= len(t) <= 10000\n      s and t consist of only lower-case letters.\n*/\nconst lca = (s, t) => {\n    let len = s.length;\n    let len2 = t.length;\n\n    let result = [];\n    let result2 = [];\n    let l = 0;\n    let r = 0;\n    let tmp = 0;\n    while (l < len && r < len2) {\n        if (s[l] === t[r]) {\n            result.push(s[l]);\n            result2.push(t[r]);\n            l++;\n            r++;\n        } else if (s[l] < t[r]) {\n            l++;\n        } else {\n            r++;\n        }\n    }\n    return result.join('');\n};\n\n/*\n  Given two strings s and t, return the longest common subsequence (LCS) of s and t\n  with characters lower-case.\n\n  Example 1:\n\n      Input: s = \"abcd\", t = \"bdea\"\n      Output: \"abcd\"\n      Explanation: The longest common subsequence between \"abcd\" and \"bdea\" is \"abcd\".\n\n  Example 2:\n\n      Input: s = \"abcd\", t = \"fdabc\"\n      Output: \"fdabc\"\n      Explanation: The longest common subsequence between \"abcd\" and \"fdabc\" is \"fdabc\".\n\n  Note:\n      0 <= len(s) <= 10000\n      0 <= len(t) <= 10000\n      s and t consist of only lower-case letters.\n*/\nconst lcs = (s, t) => {\n    let len = s.length;\n    let len2 = t.length;\n\n    let result = [];\n    let result2 = [];\n    let l = 0;\n    let r = 0;\n    let tmp = 0;\n    while (l < len && r < len2) {\n        if (s[l].toLowerCase() === t[r].toLowerCase()) {\n            result.push(s[l].toLowerCase());\n            result2.push(t[r].toLowerCase());\n            l++;\n            r++;\n        } else if (s[l].toLowerCase() < t[r].toLowerCase()) {\n            l++;\n        } else {\n            r++;\n        }\n    }\n    return result.join('');\n};\n\nexport {\n    lca,\n    oddEvenSum,\n    eveNOddpalinDroMe,\n    lcs\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const sum = arr.reduce((sum, num) => num > 0? sum + num : sum, 0)\n  return sum > 0? arr.filter(num => num > 0).length : 0\n}\n\n/*\n  Write a function findNumber that takes an array of numbers and returns the\n  smallest number that is larger than all the elements in the array.\n  >>> findNumber([3, 4, 5, 2])\n  >>> findNumber([3, 4, 5, 6])\n  >>> findNumber([1, 2, 3])\n  >>> findNumber([0])\n  >>> findNumber([-1, -2, -3, -4, -5])\n  >>> findNumber([1, 0, -1, -2, -3])\n  */\nconst findNumber = (arr) => {\n  const nums = arr.filter(num => num > 0)\n  return arr[0] > 0 && arr[arr.length - 1] > 0? Math.min(...nums) : arr[0]\n}\n\n/*\n  Write a function findSmallestThatIsLarger that takes an array of numbers and\n  returns the smallest number that is larger than all the elements in the array.\n  >>> findSmallestThatIsLarger([3, 4, 5, 2])\n  >>> findSmallestThatIsLarger([3, 4, 5, 6])\n  >>> findSmallestThatIsLarger([1, 2, 3])\n  >>> findSmallestThatIsLarger([0])\n  >>> findSmallestThatIsLarger([-1, -2, -3, -4, -5])\n  >>> findSmallestThatIsLarger([1, 0, -1, -2, -3])\n  */\nconst findSmallestThatIsLarger = (arr) => {\n  const nums = arr.filter(num => num > 0)\n  return arr[0] > 0 && arr[arr.length - 1] > 0? Math.max(...nums) : arr[0]\n}\n\n/*\n  Write a function findSmallestThatIsLargerOrEqual that takes an array of numbers\n  and returns the smallest number that is larger than or equal to all the\n  elements in the array.\n  >>> findSmallestThatIsLargerOrEqual([3, 4, 5, 2])\n  >>> findSmallestThatIsLargerOrEqual([3, 4, 5, 6])\n  >>> findSmallestThatIsLargerOrEqual([1, 2, 3])\n  >>> findSmallestThatIsLargerOrEqual([0])\n  >>> findSmallestThatIsLargerOrEqual([-1, -2, -3, -4, -5])\n  >>> findSmallestThatIsLargerOrEqual([1, 0, -1, -2, -3])\n  */\nconst findSmallestThatIsLargerOrEqual = (arr) => {\n  const nums = arr.filter(num => num > 0)\n  return arr[0] > 0 && arr[arr.length - 1] > 0? Math.min(...nums) : arr[0]\n}\n\n/*\n  Write a function findSmallestThatIsLesser that takes an array of numbers and\n  returns the smallest number that is smaller than all the elements in the array.\n  >>> findSmallestThatIsLesser([3, 4, 5, 2])\n  >>> findSmallestThatIsLesser([3, 4, 5, 6])\n  >>> findSmallestThatIsLesser([1, 2, 3])\n  >>> findSmallestThatIsLesser([0])\n  >>> findSmallestThatIsLesser([-1, -2, -3, -4, -5])\n  >>> findSmallestThatIsLesser([1, 0, -1, -2, -3])\n  */\nconst findSmallestThatIsLesser = (arr) => {\n  const nums = arr.filter(num => num > 0)\n  return arr[0] > 0 && arr[arr.length - 1] > 0? Math.max(...nums) : arr[0]\n}\n\n/*\n  Write a function findSmallestThatIsLesserOrEqual that takes an array of numbers\n  and returns the smallest number that is smaller than or equal to all the\n  elements in the array.\n  >>> findSmallestThatIsLesserOrEqual([3, 4, 5, 2])\n  >>> findSmallestThatIsLesserOrEqual([3, 4, 5, 6])\n  >>> findSmallestThatIsLesserOrEqual([1, 2, 3])\n  >>> findSmallestThatIsLesserOrEqual([0])\n  >>> findSmallestThatIsLesserOrEqual([-1, -2, -3, -4, -5])\n  >>> findSmallestThatIsLesserOrEqual([1, 0, -1, -2, -3])\n  */\nconst findSmallestThatIsLesserOrEqual = (arr) => {\n  const nums = arr.filter(num => num > 0)\n  return arr[0] > 0 && arr[arr.length - 1] > 0? Math.min(...nums) : arr[0]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  let l = arr.length\n  if (l === 0) return true\n  let i = l - 1\n  while (i) {\n    if (arr[i] < arr[i + 1]) return false\n    i--\n  }\n  i = l - 1\n  while (i) {\n    if (arr[i] === arr[i - 1]) return false\n    i--\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  const lst1Even = lst1.filter(n => n % 2 === 0);\n  const lst2Even = lst2.filter(n => n % 2 === 0);\n\n  if (lst1Even.length === lst2Even.length) {\n    return \"YES\";\n  }\n\n  return \"NO\";\n};\n\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split('').filter(s => s === s.toLowerCase())\n  let occurences = {}\n  for(let l of letters){\n    if(!(l in occurences)){\n      occurences[l] = 0\n    }\n    occurences[l] += 1\n  }\n  return occurences\n}\n\n/*Given a string representing a space separated lowercase letters, return the\n  sum of the count of each letter.\n  \n  Example:\n  hisTogrAm('a b c') == 3\n  hisTogrAm('a b c a b') == 6\n  hisTogrAm('') == 0\n\n  */\nconst hisSum = (test) => {\n  const letters = test.split('').filter(s => s === s.toLowerCase())\n  let sum = 0\n  for(let l of letters){\n    sum += occurences[l]\n  }\n  return sum\n}\n\n/*Given a string representing a space separated lowercase letters, return the\n  count of each letter.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('') == {}\n\n  */\nconst hisCount = (test) => {\n  const letters = test.split('').filter(s => s === s.toLowerCase())\n  let count = {}\n  for(let l of letters){\n    if(!(l in count)){\n      count[l] = 0\n    }\n    count[l] += 1\n  }\n  return count\n}\n\nconst isPalindrome = (test) => {\n  const letters = test.split('').filter(s => s === s.toLowerCase())\n  let index = 0\n  let start = 0\n  let end = letters.length - 1\n  while(index <= end){\n    if(letters[index]!== letters[end]){\n      return false\n    }\n    index++\n    end--\n  }\n  return true\n}\n\nconst max = (a, b) => {\n  return Math.max(a, b)\n}\n\nconst min = (a, b) => {\n  return Math.min(a, b)\n}\n\nconst string = (str) => {\n  return Array.from(str).join('')\n}\n\nconst repeat = (string, times) => {\n  let res = ''\n  for(let i = 0; i < times; i++){\n    res += string\n  }\n  return res\n}\n\nconst upper = (str) => {\n  return str.toUpperCase()\n}\n\nconst lower = (str) => {\n  return str.toLowerCase()\n}\n\nconst sum = (arr) => {\n  let sum = 0\n  for(let i = 0; i < arr.length; i++){\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst reverse = (str) => {\n  return str.split('').reverse().join('')\n}\n\nconst contains = (str, substr) => {\n  return substr.indexOf(str) > -1\n}\n\nconst containsAll = (str, substr) => {\n  return str.split('').every(s => substr.indexOf(s) > -1)\n}\n\nconst hasSame = (a, b) => {\n  return a === b\n}\n\nconst containsSubstr = (str, substr) => {\n  return str.indexOf(substr) > -1\n}\n\nconst indexOfSubstr = (str, substr) => {\n  return str.indexOf(substr)\n}\n\nconst isEmpty = (str) => {\n  return str.trim().length === 0\n}\n\nconst isNotEmpty = (str) => {\n  return str.trim().length > 0\n}\n\nconst startsWith = (str, substr) => {\n  return str.indexOf(substr) === 0\n}\n\nconst endsWith = (str, substr) => {\n  return str.indexOf(substr) === (str.length - substr.length)\n}\n\nconst remove = (str, substr) => {\n  return str.replace(substr, '')\n}\n\nconst removeAll = (str, substr) => {\n  return str.replace(substr, '')\n}\n\nconst startsWithUpper = (str) => {\n  return str.toUpperCase().indexOf(str.toUpperCase()) === 0\n}\n\nconst endsWithUpper = (str) => {\n  return str.toUpperCase().indexOf(str.toUpperCase()) === (str.length - str.length)\n}\n\nconst isDigits = (str) => {\n  return str.match(/\\d+/)\n}\n\nconst containsDigits = (str) => {\n  return str.match(/\\d+/)\n}\n\nconst containsLetter = (str) => {\n  return str.match(/[a-zA-Z]/)\n}\n\nconst containsLetterOrDigits = (str) => {\n  return str.match(/[a-zA-Z0-9]/)\n}\n\nconst isAlpha = (str) => {\n  return str.match(/[a-zA-Z]/)\n}\n\nconst isAlphaNumeric = (str) => {\n  return str.match(/[a-zA-Z0-9]/)\n}\n\nconst isNumeric = (str) => {\n  "}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n    // console.log(\"s:\",s,\"c:\",c);\n    const isEqual = s.includes(c);\n    if (isEqual) return ([...s.split('').reverse(), isEqual].join(''), isEqual);\n    return [...s.split('').reverse(), isEqual];\n}\n\nconst revErsedeletE2 = (s, c) => {\n    if (s.includes(c)) return [...s.split('').reverse(), false];\n    return [...s.split('').reverse(), false];\n}\n\nconst revErsedeletE3 = (s, c) => {\n    let r = [];\n    let i = s.length - 1;\n    let j = s.length - 1;\n    while (i >= 0 && j >= 0) {\n        if (s.charAt(i) == c.charAt(j)) {\n            r.push(s.charAt(i));\n            i--;\n            j--;\n        } else if (s.charAt(i)!= c.charAt(j)) {\n            break;\n        }\n    }\n    return [r.join(''), false];\n}\n\nconst revErsedeletE4 = (s, c) => {\n    if (s.includes(c)) return [...s.split('').reverse(), false];\n    return [...s.split('').reverse(), false];\n}\n\nconst revErsedeletE5 = (s, c) => {\n    let i = 0;\n    let j = 0;\n    let r = [];\n    while (i < s.length && j < c.length) {\n        if (s.charAt(i) == c.charAt(j)) {\n            r.push(s.charAt(i));\n            i++;\n            j++;\n        } else {\n            break;\n        }\n    }\n    return [r.join(''), false];\n}\n\n// console.log(\"revErsedeletE(abc,ae)\", revErsedeletE(\"abc\", \"ae\"));\n// console.log(\"revErsedeletE(abc,b)\", revErsedeletE(\"abc\", \"b\"));\n// console.log(\"revErsedeletE(abc,ab)\", revErsedeletE(\"abc\", \"ab\"));\n// console.log(\"revErsedeletE(abc,a)\", revErsedeletE(\"abc\", \"a\"));\n// console.log(\"revErsedeletE(abc,a)\", revErsedeletE(\"abc\", \"a\"));\n// console.log(\"revErsedeletE(abc,b)\", revErsedeletE(\"abc\", \"b\"));\n// console.log(\"revErsedeletE(abc,c)\", revErsedeletE(\"abc\", \"c\"));\n// console.log(\"revErsedeletE(abc,d)\", revErsedeletE(\"abc\", \"d\"));\n// console.log(\"revErsedeletE(abc,cd)\", revErsedeletE(\"abc\", \"cd\"));\n// console.log(\"revErsedeletE(abc,cde)\", revErsedeletE(\"abc\", \"cde\"));\n// console.log(\"revErsedeletE(abc,cdef)\", revErsedeletE(\"abc\", \"cdef\"));\n// console.log(\"revErsedeletE(abc,cdefg)\", revErsedeletE(\"abc\", \"cdefg\"));\n// console.log(\"revErsedeletE(abc,abc)\", revErsedeletE(\"abc\", \"abc\"));\n// console.log(\"revErsedeletE(abc,ac)\", revErsedeletE(\"abc\", \"ac\"));\n// console.log(\"revErsedeletE(abc,a)\", revErsedeletE(\"abc\", \"a\"));\n// console.log(\"revErsedeletE(abc,abcd)\", revErsedeletE(\"abc\", \"abcd\"));\n// console.log(\"revErsedeletE(abc,abcd)\", revErsedeletE(\"abc\", \"abcd\"));\n// console.log(\"revErsedeletE(abc,abcde)\", revErsedeletE(\"abc\", \"abcde\"));\n// console.log(\"revErsedeletE(abc,abcdef)\", revErsedeletE(\"abc\", \"abcdef\"));\n// console.log(\"revErsedeletE(abc,abcdefg)\", revErsedeletE(\"abc\", \"abcdefg\"));\n// console.log(\"revErsedeletE(abc,abcdefgh)\", revErsedeletE(\"abc\", \"abcdefgh\"));\n// console.log(\"revErsedeletE(abc,abcdefghi)\", revErsedeletE(\"abc\", \"abcdefghi\"));\n// console.log(\"revErsedeletE(abc,abcdefghi)\", revErsedeletE(\"abc\", \"abcdefghi\"));\n// console.log(\"revErsedeletE(abc,abcdefghij)\", revErsedeletE(\"abc\", \"abcdefghij\"));\n// console.log(\"revErsedeletE(abc,abcdefghijk)\", revErsedeletE(\"abc\", \"abcdefghijk\"));\n// console.log(\"revErsedeletE(abc,abcdefghijkl)\", revErsedeletE(\"abc\", \"abcdefghijkl\"));\n// console.log(\"revErsedeletE(abc,abcdefghijklm)\", revErsedeletE(\"abc\", \"abcdefghijklm\"));\n// console.log(\"revErsede"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  return lst.map(s => {\n    let str = s.toString();\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2) {\n        count += 1;\n      }\n    }\n    return count + \"n the str4ng \" + count + \" of the \" + count + \"put.\";\n  })\n}\n\nmodule.exports = oddcounT;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let sum = 0;\n  let minSum = -1;\n  let minIndex = -1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!= -1) {\n      sum += nums[i];\n      if (minSum == -1 || sum - minSum < minSum) {\n        minSum = sum;\n        minIndex = i;\n      }\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minsubARraySUm([2, 3, 4, 1, 2, 4]));\nconsole.log(minsubARraySUm([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  let max_filled = 0;\n  for(let row of grid) {\n    let total = 0;\n    for(let i=0; i<row.length; i++) {\n      total += row[i];\n      if(total >= capacity) {\n        max_filled++;\n        total -= capacity;\n      }\n    }\n  }\n  return max_filled;\n};\n\nconst [grid, capacity, bucket_capacity] = [\n  [\n    [1,1,1,0,0,0,0,0,0,0],\n    [0,1,1,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [1,0,0,0,0,0,0,0,0,0],\n    [1,1,0,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0]\n  ],\n  3,\n  1\n];\n\nconst maxfill2 = (grid, capacity) => {\n  let max_filled = 0;\n  for(let row of grid) {\n    let total = 0;\n    for(let i=0; i<row.length; i++) {\n      total += row[i];\n      if(total >= capacity) {\n        max_filled++;\n        total -= capacity;\n      }\n    }\n  }\n  return max_filled;\n};\n\nconst [grid, capacity, bucket_capacity] = [\n  [\n    [1,1,1,0,0,0,0,0,0,0],\n    [0,1,1,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [1,0,0,0,0,0,0,0,0,0],\n    [1,1,0,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0]\n  ],\n  3,\n  1\n];\n\nconst [grid, capacity, bucket_capacity] = [\n  [\n    [1,1,1,0,0,0,0,0,0,0],\n    [0,1,1,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [1,0,0,0,0,0,0,0,0,0],\n    [1,1,0,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0]\n  ],\n  3,\n  1\n];\n\nconst [grid, capacity, bucket_capacity] = [\n  [\n    [1,1,1,0,0,0,0,0,0,0],\n    [0,1,1,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [1,0,0,0,0,0,0,0,0,0],\n    [1,1,0,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  let max = Math.max.apply(null, arr);\n  let min = Math.min.apply(null, arr);\n\n  let result = [];\n  for (let i = min; i <= max; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] === i) {\n        count++;\n      }\n    }\n\n    if (count > 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = sorTArrAy;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  const words = []\n  let lastConsonant = -1\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      lastConsonant = -1\n      continue\n    }\n    if (lastConsonant === -1) {\n      lastConsonant = 0\n    }\n    if (lastConsonant === 0 && s[i] ==='') {\n      words.push(s.slice(lastConsonant, i))\n      lastConsonant = -1\n      continue\n    }\n    if (lastConsonant === 0) {\n      lastConsonant = 1\n    }\n    lastConsonant += 1\n  }\n  if (lastConsonant!== -1) {\n    words.push(s.slice(lastConsonant))\n  }\n  if (words.length === 0) {\n    return []\n  }\n  if (words.length === n) {\n    return words\n  }\n  const left = selEctWOrds(s.slice(0, n), n)\n  const right = selEctWOrds(s.slice(n), words.length)\n  return left.concat(words).concat(right)\n}\n\nexport { selEctWOrds }\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n    const len = word.length;\n    let start = len - 1;\n    let end = len;\n    let prev = word[start];\n    while (start > 0) {\n        const curr = word[start];\n        if (isVowel(curr) && isVowel(prev) && isConsonant(prev)) {\n            return word[start];\n        }\n        start--;\n        prev = curr;\n    }\n    return '';\n};\n\nfunction isVowel(char) {\n    return char.toLowerCase() === 'a' || char.toLowerCase() === 'e' || char.toLowerCase() === 'i' || char.toLowerCase() === 'o' || char.toLowerCase() === 'u';\n}\n\nfunction isConsonant(char) {\n    return char.toLowerCase() === 'b' || char.toLowerCase() === 'c' || char.toLowerCase() === 'd' || char.toLowerCase() === 'f' || char.toLowerCase() === 'g' || char.toLowerCase() === 'h' || char.toLowerCase() === 'j' || char.toLowerCase() === 'k' || char.toLowerCase() === 'l' || char.toLowerCase() ==='m' || char.toLowerCase() === 'n' || char.toLowerCase() === 'p' || char.toLowerCase() === 'q' || char.toLowerCase() === 'r' || char.toLowerCase() ==='s' || char.toLowerCase() === 't' || char.toLowerCase() === 'v' || char.toLowerCase() === 'w' || char.toLowerCase() === 'x' || char.toLowerCase() === 'y' || char.toLowerCase() === 'z';\n}\n\nconsole.log(getclosEstVoWel(\"yogurt\"));\nconsole.log(getclosEstVoWel(\"FULL\"));\nconsole.log(getclosEstVoWel(\"quick\"));\nconsole.log(getclosEstVoWel(\"ab\"));\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const len = lst.length;\n  if (len === 1) return 'No';\n\n  const stack = [];\n  const isOpen = (str) => str[0] === '(';\n  const isClosed = (str) => str[0] === ')';\n\n  for (let i = 0; i < len; i++) {\n    if (isClosed(lst[i])) {\n      stack.push(lst[i]);\n      while (stack.length > 0 && isOpen(stack[stack.length - 1])) {\n        stack.pop();\n      }\n    } else if (isOpen(lst[i])) {\n      stack.push(lst[i]);\n    }\n  }\n\n  if (stack.length === 0) return 'Yes';\n  return 'No';\n};\n\nconsole.log(matChPaRens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  let max = -1\n  let cur = 0\n  let maxValue = arr[0]\n  let maxLength = 0\n\n  for (let i = 0; i < k; i++) {\n    let value = arr[i]\n    if (value > max) {\n      max = cur\n      maxValue = value\n      maxLength = i\n    }\n    cur += value\n  }\n\n  return arr.slice(0, maxLength + 1)\n}\n\nexport default maxImum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  const l = lst.length\n  const oddSum = lst.filter(x => x % 2 === 1)\n  return oddSum.reduce((previous, current) => previous + current, 0)\n}\n\nconsole.log(solUtioN([5, 8, 7, 1]))\nconsole.log(solUtioN([3, 3, 3, 3, 3]))\nconsole.log(solUtioN([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const s = arr.slice(0, k).reduce((acc, curr) => acc + curr, 0);\n  const t = arr.slice(k).reduce((acc, curr) => acc + curr, 0);\n  return s + t;\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n  return arr.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst addelem = (arr) => {\n  const n = arr.length;\n"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  const arr = [1];\n  const i = 2;\n  while (n > 1) {\n    if (n % 2 === 0) {\n      arr.push(n / 2);\n      n = n / 2;\n    } else {\n      arr.push(n * 3 + 1);\n      n = n * 3 + 1;\n    }\n    i++;\n  }\n  arr.push(n);\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a list that has the odd numbers in binary\n  collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. BinaryCollatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddBinCollatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddBinCollatZ = (n) => {\n  const arr = [1];\n  const i = 2;\n  while (n > 1) {\n    if (n % 2 === 0) {\n      arr.push(n / 2);\n      n = n / 2;\n    } else {\n      arr.push(n * 3 + 1);\n      n = n * 3 + 1;\n    }\n    i++;\n  }\n  arr.push(n);\n  return arr;\n};\n\n// console.log(getoddCOllatZ(1));\n// console.log(getoddCOllatZ(2));\n// console.log(getoddCOllatZ(3));\n// console.log(getoddCOllatZ(4));\n// console.log(getoddCOllatZ(5));\n// console.log(getoddCOllatZ(6));\n// console.log(getoddCOllatZ(7));\n// console.log(getoddCOllatZ(8));\n// console.log(getoddCOllatZ(9));\n// console.log(getoddCOllatZ(10));\n// console.log(getoddCOllatZ(11));\n// console.log(getoddCOllatZ(12));\n// console.log(getoddCOllatZ(13));\n// console.log(getoddCOllatZ(14));\n// console.log(getoddCOllatZ(15));\n// console.log(getoddCOllatZ(16));\n// console.log(getoddCOllatZ(17));\n// console.log(getoddCOllatZ(18));\n// console.log(getoddCOllatZ(19));\n// console.log(getoddCOllatZ(20));\n// console.log(getoddCOllatZ(21));\n// console.log(getoddCOllatZ(22));\n// console.log(getoddCOllatZ(23));\n// console.log(getoddCOllatZ(24));\n// console.log(getoddCOllatZ(25));\n// console.log(getoddCOllatZ(26));\n// console.log(getoddCOllatZ(27));\n// console.log(getoddCOllatZ(28));\n// console.log(getoddCOllatZ(29));\n// console.log(getoddCOllatZ(30));\n// console.log(getoddCOllatZ(31));\n// console.log(getoddCOllatZ(32));\n// console.log(getoddCOllatZ(33));\n// console.log(getoddCOllatZ(34));\n// console.log(getoddCOllatZ(35));\n// console.log(getoddCOllatZ(36));\n// console.log(getoddCOllatZ(37));\n// console.log(getoddCOllatZ(38));\n// console.log(getoddCOllatZ(39));\n// console.log(getoddCOllatZ(40));\n// console.log(getoddCOllatZ(41));\n// console.log(getoddCOllatZ(42));\n// console.log(getoddCOllatZ(43));\n// console.log(getoddCOllatZ(44));\n// console.log(getoddCOllatZ(45));\n// console.log(getoddCOllatZ(46));\n// console.log(getoddCOllatZ(47));\n// console.log(getoddCOllatZ(48));\n// console.log(getoddCOllatZ(49));\n// console.log(getoddCOllatZ(50));\n// console.log(getoddCOllatZ(51));\n// console.log(getoddCOllatZ(52));\n// console.log(getoddCOllatZ(53));\n// console.log(getoddCOllatZ(54));\n// console.log(getoddCOllatZ(55));\n// console.log(getoddCOllatZ(56));\n// console.log(getoddCOllatZ(57));\n// console.log(getoddCO"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  const days = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31'];\n  const months = ['01','02','03','04','05','06','07','08','09','10','11','12'];\n  const d = date.split('-');\n  const m = d[1].split('-');\n  const y = d[2].split('-');\n  const day = parseInt(d[0]);\n  const month = parseInt(m[1]);\n  const year = parseInt(y[0]);\n  return (day >= 1 && day <= 31 && month >= 1 && month <= 12 && day <= 31 && month <= 12) || (day >= 1 && day <= 30 && month >= 1 && month <= 12 && day <= 31 && month <= 12) || (day >= 1 && day <= 29 && month >= 1 && month <= 12) || (day >= 1 && day <= 31 && month >= 1 && month <= 12) || (day >= 1 && day <= 29 && month >= 1 && month <= 12) || (day >= 1 && day <= 29 && month >= 1 && month <= 12);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n    const words = txt.split(/(\\s*)/g);\n    const result = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst findIndex = (arr, val) => {\n    let i = 0;\n    while (i < arr.length && arr[i]!= val) {\n        i++;\n    }\n    return i;\n};\n\nconst findWords = (arr) => {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByLength = (arr) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst isValidWord = (arr) => {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            const word = arr[i].trim();\n            if (word.length > 1 && word.charAt(0)!= word.charAt(word.length - 1)) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst splitWords = (arr) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst findWord = (arr) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByIndex = (arr) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByFreq = (arr) => {\n    const result = [];\n    const total = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByLength = (arr) => {\n    const result = [];\n    const total = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByFreq = (arr) => {\n    const result = [];\n    const total = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByIndex = (arr) => {\n    const result = [];\n    const total = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByLength = (arr) => {\n    const result = [];\n    const total = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByFreq = (arr) => {\n    const result = [];\n    const total = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByIndex = (arr) => {\n    const result = [];\n    const total = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByLength = (arr) => {\n    const result = [];\n    const total = arr.length;\n    for (let i = 0; i < arr.length; i++) {\n        const word = arr[i].trim();\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n};\n\nconst sortByFreq = (arr) => {\n    const result = [];\n    const total"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const map = new Map()\n  for (let i = 0; i < lst.length; i++) {\n    map.set(lst[i], lst[i])\n  }\n  return lst.every(i => map.has(i) && map.get(i) === i)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7, 8]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD2 = (lst) => {\n  const map = new Map()\n  for (let i = 0; i < lst.length; i++) {\n    map.set(lst[i], lst[i])\n  }\n  return lst.every(i => map.has(i) && map.get(i) === -i)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD3 = (lst) => {\n  const map = new Map()\n  for (let i = 0; i < lst.length; i++) {\n    map.set(lst[i], lst[i])\n  }\n  return lst.every(i => map.has(i) && map.get(i) < 0)\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7, 8]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD4 = (lst) => {\n  const map = new Map()\n  for (let i = 0; i < lst.length; i++) {\n    map.set(lst[i], lst[i])\n  }\n  return lst.every(i => map.has(i) && map.get(i) > 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = interval1[0] < interval2[0]? interval1[0] : interval2[0];\n  const end = interval1[1] < interval2[1]? interval1[1] : interval2[1];\n  const isPrime = (n) => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let prime of primes) {\n      if (n % prime === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (start === end) {\n    return \"YES\";\n  }\n  if (start < end && isPrime(end - start)) {\n    return \"YES\";\n  }\n  if (start > end && isPrime(start - end)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * arr.reduce((a, b) => {\n    if (b > 0) {\n      return a + 1\n    } else if (b < 0) {\n      return a - 1\n    } else {\n      return a\n    }\n  }, 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  product of squares of magnitudes of integers multiplied by all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sqDSigNs([1, 2, 2, -4]) == -32\n  >>> sqDSigNs([0, 1]) == 0\n  >>> sqDSigNs([]) == null\n  */\nconst sqDSigNs = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(Math.abs(arr[i]), 2)\n  }\n  return sum * arr.reduce((a, b) => {\n    if (b > 0) {\n      return a + 1\n    } else if (b < 0) {\n      return a - 1\n    } else {\n      return a\n    }\n  }, 0)\n}\n\nexport {\n  proDSigNs,\n  sqDSigNs\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n    let result = [grid[0][0]];\n    let visited = {\n        grid[0][0]\n    };\n    for (let i = 1; i <= k; i++) {\n        let min = Math.min(...result);\n        let index = result.findIndex(v => v === min);\n        let neighbours = [];\n        for (let j = 1; j < grid.length; j++) {\n            if (grid[j][index]!== visited[grid[j][index]]) {\n                neighbours.push(grid[j][index]);\n            }\n        }\n        result = neighbours;\n        visited = {...visited};\n        visited[grid[i][index]] = true;\n    }\n    return result;\n};\n\nconst test = [\n    [ [5,9,3], [4,1,6], [7,8,2] ],\n    [ [1,2,3], [4,5,6], [7,8,9] ]\n];\n\nconst test2 = [\n    [ [5,9,3], [4,1,6], [7,8,2] ],\n    [ [9,3,1], [5,1,6], [7,2,4] ]\n];\n\nconst test3 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [3,2,1], [6,4,5], [9,7,8] ]\n];\n\nconst test4 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [4,5,6], [9,8,7], [1,2,3] ]\n];\n\nconst test5 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [5,9,3], [4,1,6], [7,8,2] ]\n];\n\nconst test6 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [4,9,3], [5,1,6], [7,2,4] ]\n];\n\nconst test7 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [9,3,1], [5,1,6], [7,2,4] ]\n];\n\nconst test8 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [1,9,3], [5,4,6], [7,2,4] ]\n];\n\nconst test9 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [1,2,4], [5,9,3], [7,8,2] ]\n];\n\nconst test10 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [4,5,6], [9,8,7], [1,2,3] ]\n];\n\nconst test11 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [1,2,3], [4,5,6], [7,8,9] ]\n];\n\nconst test12 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [9,3,1], [5,1,6], [7,2,4] ]\n];\n\nconst test13 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [1,2,3], [4,5,6], [7,8,9] ]\n];\n\nconst test14 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [1,2,3], [4,5,6], [7,8,9] ]\n];\n\nconst test15 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [9,3,1], [5,1,6], [7,2,4] ]\n];\n\nconst test16 = [\n    [ [1,2,3], [4,5,6], [7,8,9] ],\n    [ [1,2,3], ["}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let output = [],\n      i = 1,\n      n = n || 3;\n\n  while(i <= n) {\n    output.push(tri(i));\n    i = i + 1;\n  }\n\n  return output;\n};\n\ntri(3).forEach((n) => console.log(n));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let result = 1\n  for (let i = 1; i < n; i++) {\n    result = (result * 2) % 10\n    if (result % 2 == 0) {\n      return 0\n    }\n  }\n  return result\n}\n\nmodule.exports = digIts\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stringLength = string.length;\n  const openBracketCount = 0;\n  let valid = true;\n  let current;\n  let index;\n  let currentBracket;\n\n  for (index = 0; index < stringLength; index += 1) {\n    current = string.charAt(index);\n    if (current === '[') {\n      openBracketCount += 1;\n    } else if (current === ']') {\n      openBracketCount -= 1;\n    } else if (openBracketCount === 0) {\n      valid = false;\n      break;\n    }\n  }\n\n  if (openBracketCount!== 0) {\n    valid = false;\n  }\n\n  return valid;\n};\n\nexport default isNEsteD;<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  const sum = lst.reduce((sum, elem) => sum + Math.pow(elem, 2), 0);\n  const ceil = Math.ceil(Math.sqrt(sum));\n  return sum.toFixed(ceil);\n};\n\nconst sumsquaTest = [\n  [1,2,3],\n  [1,4,9],\n  [1,3,5,7],\n  [1.4,4.2,0]\n];\n\ntest('sumsquare', () => {\n  const sum = sumsquaRes(sumsquaTest[0]);\n  expect(sum).toEqual('14');\n});\n\ntest('sumsquare', () => {\n  const sum = sumsquaRes(sumsquaTest[1]);\n  expect(sum).toEqual('98');\n});\n\ntest('sumsquare', () => {\n  const sum = sumsquaRes(sumsquaTest[2]);\n  expect(sum).toEqual('84');\n});\n\ntest('sumsquare', () => {\n  const sum = sumsquaRes(sumsquaTest[3]);\n  expect(sum).toEqual('29');\n});\n\ntest('sumsquare', () => {\n  const sum = sumsquaRes(sumsquaTest[4]);\n  expect(sum).toEqual('6');\n});\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsAlpha = isAlpha(lastChar);\n  const lastCharIsAlNum = isAlNum(lastChar);\n  const lastCharIsAlNumAndNotWord = lastCharIsAlNum &&!isWord(txt);\n\n  return lastCharIsAlpha &&!lastCharIsAlNumAndNotWord;\n};\n\nconst isAlNum = (char) => char.match(/^[A-Za-z0-9]+$/);\n\nconst isAlpha = (char) => char.match(/^[A-Za-z]+$/);\n\nconst isWord = (txt) => txt.split(/[\\s]+/).every(cheCkIflastCHarisALeTter);\n\nconst isAlNumOrWord = (txt) => txt.match(/^[A-Za-z0-9]+$/);\n\nconst isAlNumOrWordOrSpace = (txt) => txt.match(/^[A-Za-z0-9\\s]+$/);\n\n/*\n  Create a function that returns true if the given string is a\n  date, and false otherwise.\n  Examples:\n  isDate(\"January 2, 2020\") ➞ false\n  isDate(\"January 20, 2020\") ➞ false\n  isDate(\"March 1, 2020\") ➞ true\n  */\nconst isDate = (txt) => {\n  return isAlNumOrWordOrSpace(txt) && txt.slice(0,3) === \"Jan\" && isNumber(txt.slice(3));\n};\n\nconst isNumber = (txt) => {\n  return txt.match(/^\\d+$/);\n};\n\n/*\n  Create a function that returns true if the given string\n  is an integer, and false otherwise.\n  Examples:\n  isInt(\"1\") ➞ true\n  isInt(\"2\") ➞ false\n  isInt(\"3.14\") ➞ true\n  isInt(\"1.5\") ➞ true\n  */\nconst isInt = (txt) => {\n  return isNumber(txt) && parseInt(txt) === parseInt(txt);\n};\n\n/*\n  Create a function that returns true if the given string\n  is a float, and false otherwise.\n  Examples:\n  isFloat(\"1\") ➞ true\n  isFloat(\"2\") ➞ false\n  isFloat(\"3.14\") ➞ true\n  isFloat(\"1.5\") ➞ true\n  */\nconst isFloat = (txt) => {\n  return isNumber(txt) && parseFloat(txt) === parseFloat(txt);\n};\n\n/*\n  Create a function that returns true if the given string\n  is a letter.\n  Examples:\n  isLetter(\"A\") ➞ true\n  isLetter(\"B\") ➞ true\n  isLetter(\"c\") ➞ true\n  isLetter(\"1\") ➞ false\n  */\nconst isLetter = (txt) => {\n  return isAlpha(txt);\n};\n\n/*\n  Create a function that returns true if the given string\n  is a letter or a number.\n  Examples:\n  isAlphaOrNumb(\"A\") ➞ true\n  isAlphaOrNumb(\"1\") ➞ true\n  isAlphaOrNumb(\"2\") ➞ true\n  isAlphaOrNumb(\"a\") ➞ true\n  isAlphaOrNumb(\"1\") ➞ true\n  */\nconst isAlphaOrNumb = (txt) => {\n  return isAlpha(txt) || isNumb(txt);\n};\n\nconst isNumb = (txt) => {\n  return isInt(txt) || isFloat(txt);\n};\n\n/*\n  Create a function that returns true if the given string\n  is a letter or a number or a period.\n  Examples:\n  isAlNumOrPeriod(\"A\") ➞ true\n  isAlNumOrPeriod(\"1\") ➞ true\n  isAlNumOrPeriod(\"2\") ➞ true\n  isAlNumOrPeriod(\"a\") ➞ true\n  isAlNumOrPeriod(\"1\") ➞ true\n  */\nconst isAlNumOrPeriod = (txt) => {\n  return isAlphaOrNumb(txt) || txt === \".\";\n};\n\nconst isAlNumOrPeriodOrSpace = (txt) => {\n  return isAlNumOrPeriod(txt) || txt === \" \";\n};\n\nconst isWordOrSpace = (txt) => {\n  return isWord(txt) || txt === \" \";\n};\n\nconst isNotWordOrSpace = (txt) => {\n  return!isWordOrSpace(txt);\n};\n\nconst isNotAlNumOrWordOrSpace = (txt) => {\n  return!isAlNumOrWordOrSpace(txt);\n};\n\nconst isNotAlNumOrWord = (txt) => {\n  return!isAlNumOrWord(txt);\n};\n\nconst isNotAlNumOrWordOrSpaceOrPeriod = (txt) => {\n  return!isAlNumOrWordOrSpaceOrPeriod(txt);\n};\n\nconst isNotAlNumOrWordOrSpaceOrPeriodOrSpace = (txt) => {\n  return!isAlNumOrWordOrSpaceOrPeriodOrSpace(txt);\n};\n\nconst isNotAlNumOrWordOrSpaceOrPeriodOrSpaceOrPeriod = (txt) => {\n  return!isAlNumOrWordOrSpaceOrPeriodOrSpaceOrPeriod(txt);\n};\n\n/*\n  Create a function that returns true if the given string\n  is a word, a number, or a period.\n  Examples:\n  isWordOrNumb(\"1\") ➞ true\n  isWordOrNumb(\"2\") ➞ true\n"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  const i = arr.length - 1\n  const j = 0\n\n  while (j < i) {\n    if (arr[j] < arr[i]) {\n      return j\n    } else {\n      j++\n    }\n  }\n\n  return -1\n}\n\n/*\n  Create a function which returns the largest element in the given array.\n\n  Examples:\n  canarraLargest([1,2,3,4,5]) = 5\n  canarraLargest([1,2,3]) = 3\n  canarraLargest([1,2,3,4,5,6,7]) = 7\n  */\nconst canarraLargest = (arr) => {\n  let largest = -1\n\n  for (let i = 0; i < arr.length; i++) {\n    if (largest < arr[i]) {\n      largest = arr[i]\n    }\n  }\n\n  return largest\n}\n\n/*\n  Create a function which returns the smallest element in the given array.\n\n  Examples:\n  canarraSmallest([1,2,3,4,5]) = 1\n  canarraSmallest([1,2,3]) = 1\n  canarraSmallest([1,2,3,4,5,6,7]) = 1\n  */\nconst canarraSmallest = (arr) => {\n  let smallest = arr.length\n  let i = 0\n\n  for (; i < arr.length; i++) {\n    if (smallest > arr[i]) {\n      smallest = arr[i]\n    }\n  }\n\n  return smallest\n}\n\n/*\n  Create a function which returns the smallest index of an element which is\n  not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  canarraNge([1,2,3,4,5,6,7]) = 6\n  */\nconst canarraNge = (arr) => {\n  const i = arr.length - 1\n  const j = 0\n\n  while (j < i) {\n    if (arr[j] < arr[i]) {\n      return j\n    } else {\n      j++\n    }\n  }\n\n  return -1\n}\n\n/*\n  Create a function which returns the smallest element in the given array.\n\n  Examples:\n  canarraLargest([1,2,3,4,5]) = 1\n  canarraLargest([1,2,3]) = 1\n  canarraLargest([1,2,3,4,5,6,7]) = 1\n  */\nconst canarraLargest = (arr) => {\n  let largest = -1\n\n  for (let i = 0; i < arr.length; i++) {\n    if (largest < arr[i]) {\n      largest = arr[i]\n    }\n  }\n\n  return largest\n}\n\n/*\n  Create a function which returns the smallest index of an element which is\n  not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  canarraNge([1,2,3,4,5,6,7]) = 6\n  */\nconst canarraNge = (arr) => {\n  const i = arr.length - 1\n  const j = 0\n\n  while (j < i) {\n    if (arr[j] < arr[i]) {\n      return j\n    } else {\n      j++\n    }\n  }\n\n  return -1\n}\n\n/*\n  Create a function which returns the sum of all elements in the given array.\n\n  Examples:\n  canarraSum([1,2,3,4,5]) = 15\n  canarraSum([1,2,3]) = 6\n  canarraSum([1,2,3,4,5,6,7]) = 21\n  */\nconst canarraSum = (arr) => {\n  let sum = 0\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n\n  return sum\n}\n\n/*\n  Create a function which returns the sum of the elements of the given array\n  that are less than or equal to the element immediately preceding it.\n\n  Examples:\n  canarraSum([1,2,3,4,5]) = 12\n  canarraSum([1,2,3]) = 3\n  canarraSum([1,2,3,4,5,6,7]) = 21\n  */\nconst canarraSum = (arr) => {\n  let sum = 0\n\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      sum += arr[i]\n    }\n  }\n\n  return sum\n}\n\n/*\n  Create a function which returns the sum of the elements of the given array\n  that are less than or equal to the element immediately preceding it.\n\n  Examples:\n  canarraSum([1,2,3,4,5]) = 12\n  canarraSum([1,2,3]) = 3\n  canarraSum([1,2,3,4,5,6,7]) = 21\n  */\nconst canarraSum = (arr) => {\n  let sum = 0\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      sum += arr[i]\n    }\n  }\n\n  return sum\n}\n"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const smallest = Math.min(...lst);\n  const largest = Math.max(...lst);\n  return smallest == largest? null : [largest, smallest];\n};\n\n// Create a function that returns a list of the first 10 elements of a list\nconst tenFirstElements = (lst) => lst.slice(0, 10);\n\n// Create a function that returns the length of a list\nconst lengthOf = (lst) => lst.length;\n\n// Create a function that returns the sum of a list of numbers\nconst sumOf = (lst) => lst.reduce((a, b) => a + b);\n\n// Create a function that returns the product of a list of numbers\nconst productOf = (lst) => lst.reduce((a, b) => a * b);\n\n// Create a function that returns the sum of the squares of a list of numbers\nconst sumOfSquares = (lst) => lst.reduce((a, b) => a + b * b);\n\n// Create a function that returns the sum of the cubes of a list of numbers\nconst sumOfCubes = (lst) => lst.reduce((a, b) => a + b * b * b);\n\n// Create a function that returns the sum of the squares of the first 10 elements of a list\nconst sumOfSquaresFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b * b);\n\n// Create a function that returns the sum of the cubes of the first 10 elements of a list\nconst sumOfCubesFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b * b * b);\n\n// Create a function that returns the product of the first 10 elements of a list\nconst productOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a * b);\n\n// Create a function that returns the product of the first 10 elements of a list\nconst productOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a * b);\n\n// Create a function that returns a string of the first 10 elements of a list\nconst stringOfFirstTen = (lst) => tenFirstElements(lst).join(' ');\n\n// Create a function that returns a string of the first 10 elements of a list\nconst stringOfFirstTen = (lst) => tenFirstElements(lst).join(' ');\n\n// Create a function that returns a list of all the numbers in a list\nconst allNumbers = (lst) => lst.filter(x => x >= 0);\n\n// Create a function that returns a list of all the numbers in a list\nconst allNumbers = (lst) => lst.filter(x => x >= 0);\n\n// Create a function that returns a list of the sum of the first 10 elements of a list\nconst sumOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b);\n\n// Create a function that returns a list of the sum of the first 10 elements of a list\nconst sumOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b);\n\n// Create a function that returns a list of the product of the first 10 elements of a list\nconst productOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a * b);\n\n// Create a function that returns a list of the product of the first 10 elements of a list\nconst productOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a * b);\n\n// Create a function that returns a list of the sum of the squares of the first 10 elements of a list\nconst sumOfSquaresFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b * b);\n\n// Create a function that returns a list of the sum of the cubes of the first 10 elements of a list\nconst sumOfCubesFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b * b * b);\n\n// Create a function that returns a list of the sum of the squares of the first 10 elements of a list\nconst sumOfSquaresFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b * b * b);\n\n// Create a function that returns a list of the sum of the cubes of the first 10 elements of a list\nconst sumOfCubesFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b * b * b * b);\n\n// Create a function that returns a list of the sum of the cubes of the first 10 elements of a list\nconst sumOfCubesFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a + b * b * b * b * b);\n\n// Create a function that returns a list of the product of the first 10 elements of a list\nconst productOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a * b);\n\n// Create a function that returns a list of the product of the first 10 elements of a list\nconst productOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a * b);\n\n// Create a function that returns a list of the product of the first 10 elements of a list\nconst productOfFirstTen = (lst) => tenFirstElements(lst).reduce((a, b) => a * b);\n\n// Create a function that returns a list of the product of the first 10 elements of a list\nconst productOfFirstTen = (lst) => tenFirst"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if(a === b) {\n    return null;\n  }\n  if(typeof a === 'number' && typeof b === 'number') {\n    if(a > b) {\n      return a;\n    }\n    else {\n      return b;\n    }\n  }\n  else {\n    if(typeof a ==='string' && typeof b ==='string') {\n      let aStr = a.toString().split(',');\n      let bStr = b.toString().split(',');\n      for(let i = 0; i < aStr.length; i++) {\n        let aNum = Number(aStr[i]);\n        let bNum = Number(bStr[i]);\n        if(aNum > bNum) {\n          return aNum;\n        }\n        else {\n          return bNum;\n        }\n      }\n    }\n    else {\n      return null;\n    }\n  }\n};\n\nexport { comPareone };\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += 2*Math.floor(Math.random()*n);\n  }\n  return (sum%n === 0);\n}\n\nmodule.exports = {\n  isEqualToSumeveN,\n  isEqualToSumOfDivisors,\n  isEqualToSumOfDivisors2\n}<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n    let a = 1;\n    let b = 1;\n    while (a <= n) {\n        b = b * (n - a + 1);\n        a++;\n    }\n    return b;\n};\n\n/*\n  The function specialfactorial(n) computes the special factorial of n\n  (the product of all the numbers 1, 2,..., n) using the formula:\n  specialfactorial(n) = n!\n  */\nconst specialfactorial = (n) => {\n    return n * speCialfactoRiaL(n);\n};\n\nconst sum = (n) => {\n    let i = 1;\n    let total = 0;\n    while (i <= n) {\n        total += speCialfactoRiaL(i);\n        i++;\n    }\n    return total;\n};\n\nconst gcd = (a, b) => {\n    while (b > 0) {\n        let tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    return a;\n};\n\n/*\n  The function isPrime(n) determines whether n is prime or not\n  The function isPrime uses the Miller-Rabin primality test algorithm\n  (as described in Wikipedia) to determine if n is prime or not.\n  */\nconst isPrime = (n) => {\n    if (n === 2 || n === 3) {\n        return true;\n    }\n\n    if (n < 2) {\n        return false;\n    }\n\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i++;\n    }\n\n    let a = n - 1;\n    let b = 2;\n    while (gcd(a, b)!== 1) {\n        b++;\n    }\n    let j = 0;\n    while (j++ < 1000) {\n        let t = b * (a - 1);\n        let x = 1;\n        let y = 0;\n        let n = 0;\n        while (x!== t) {\n            n++;\n            x = x * 2;\n        }\n        if (n < 2) {\n            return false;\n        }\n        y = n * 2 - 1;\n        if (y === 0) {\n            return false;\n        }\n        while (y!== x) {\n            if (y % 2 === 0) {\n                return false;\n            }\n            y = y / 2;\n        }\n        b = a + b;\n        a = b - a;\n    }\n    return false;\n};\n\nconst primeNumbers = (n) => {\n    let primes = [];\n    for (let i = 2; i <= n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n};\n\nconst findPrimeNumber = (n) => {\n    let maxPrime = 0;\n    for (let i = 0; i < n; i++) {\n        let primes = primeNumbers(i);\n        let nPrime = primes[0];\n        if (nPrime > maxPrime) {\n            maxPrime = nPrime;\n        }\n    }\n    return maxPrime;\n};\n\nexport {\n    primeNumbers,\n    findPrimeNumber,\n    speCialfactoRiaL,\n    specialfactorial,\n    sum,\n    isPrime,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n    if (text === undefined || text === null) {\n        return null;\n    }\n    \n    text = text.trim();\n    \n    return text.replace(/\\s/g, '_').replace(/[ ]{2,}/g, '-');\n};\n\n/*\n  Given a string text, return a string \n  with all non-letter characters removed \n  \n  cleanString(\"Hello World\") == \"Hello World\"\n  cleanString(\"Hello World   \") == \"Hello World\"\n  cleanString(\"Hello World\\n\") == \"Hello World\"\n  */\nconst cleanString = (text) => {\n    if (text === undefined || text === null) {\n        return null;\n    }\n    \n    text = text.trim();\n    \n    return text.replace(/[^\\w]/g, '');\n};\n\n/*\n  Given a string text, return a string \n  where all spaces are replaced by underscores \n  \n  underscoreAll(\"Hello World\") == \"Hello_World\"\n  underscoreAll(\"Hello World   \") == \"Hello_World\"\n  underscoreAll(\"Hello World\\n\") == \"Hello_World\"\n  */\nconst underscoreAll = (text) => {\n    if (text === undefined || text === null) {\n        return null;\n    }\n    \n    text = text.trim();\n    \n    return text.replace(/\\s/g, '_');\n};\n\n/*\n  Given a string text, return a string \n  where all words are made into lowercase \n  \n  lowercaseAll(\"Hello World\") == \"hello world\"\n  lowercaseAll(\"Hello World   \") == \"hello world\"\n  lowercaseAll(\"Hello World\\n\") == \"hello world\"\n  */\nconst lowercaseAll = (text) => {\n    if (text === undefined || text === null) {\n        return null;\n    }\n    \n    text = text.trim();\n    \n    return text.toLowerCase();\n};\n\n/*\n  Given a string text, return a string \n  where all words are made into uppercase \n  \n  uppercaseAll(\"Hello World\") == \"HELLO WORLD\"\n  uppercaseAll(\"Hello World   \") == \"HELLO WORLD\"\n  uppercaseAll(\"Hello World\\n\") == \"HELLO WORLD\"\n  */\nconst uppercaseAll = (text) => {\n    if (text === undefined || text === null) {\n        return null;\n    }\n    \n    text = text.trim();\n    \n    return text.toUpperCase();\n};\n\n/*\n  Given a string text, return a string \n  where all words are made into camelCase \n  \n  camelCaseAll(\"Hello World\") == \"helloWorld\"\n  camelCaseAll(\"Hello World   \") == \"helloWorld\"\n  camelCaseAll(\"Hello World\\n\") == \"helloWorld\"\n  */\nconst camelCaseAll = (text) => {\n    if (text === undefined || text === null) {\n        return null;\n    }\n    \n    text = text.trim();\n    \n    return text.replace(/(\\w+)(\\s*)(\\S+)/g, (match, word, space, after) => {\n        return (word + after.charAt(0).toUpperCase() + after.slice(1));\n    });\n};\n\n/*\n  Given a string text, return a string \n  where all words are made into snakeCase \n  \n  snakeCaseAll(\"Hello World\") == \"hello_world\"\n  snakeCaseAll(\"Hello World   \") == \"hello_world\"\n  snakeCaseAll(\"Hello World\\n\") == \"hello_world\"\n  */\nconst snakeCaseAll = (text) => {\n    if (text === undefined || text === null) {\n        return null;\n    }\n    \n    text = text.trim();\n    \n    return text.replace(/(\\w+)(\\s*)(\\S+)/g, (match, word, space, after) => {\n        return (word + after.charAt(0).toLowerCase() + after.slice(1));\n    });\n};\n\n/*\n  Given a string text, return a string \n  where all words are made into kebabCase \n  \n  kebabCaseAll(\"Hello World\") == \"hello-world\"\n  kebabCaseAll(\"Hello World   \") == \"hello-world\"\n  kebabCaseAll(\"Hello World\\n\") == \"hello-world\"\n  */\nconst kebabCaseAll = (text) => {\n    if (text === undefined || text === null) {\n        return null;\n    }\n    \n    text = text.trim();\n    \n    return text.replace(/(\\w+)(\\s*)(\\S+)/g, (match, word, space, after) => {\n        return (word + after.charAt(0).toLowerCase() + after.slice(1).replace(/[-_]/g, '-'));\n    });\n};\n\nmodule.exports = {\n    fixspacEs,\n    cleanString,\n    underscoreAll,\n    lowercaseAll,\n    uppercaseAll,\n    camelCaseAll,\n    snakeCaseAll,\n    kebabCaseAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n\tif (file_name.match(/[0-9]{3}/)) {\n\t\treturn 'No';\n\t}\n\tif (file_name.match(/[a-zA-Z]{1}\\./)) {\n\t\treturn 'No';\n\t}\n\tif (file_name.match(/[a-zA-Z]{1}[^a-zA-Z]{1}\\./)) {\n\t\treturn 'No';\n\t}\n\treturn 'Yes';\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n\tif (file_name.match(/[0-9]{3}/)) {\n\t\treturn 'No';\n\t}\n\tif (file_name.match(/[a-zA-Z]{1}\\./)) {\n\t\treturn 'No';\n\t}\n\tif (file_name.match(/[a-zA-Z]{1}[^a-zA-Z]{1}\\./)) {\n\t\treturn 'No';\n\t}\n\treturn 'Yes';\n};\n\nconst filENamEChecK = (file_name) => {\n\tif (file_name.match(/[0-9]{3}/)) {\n\t\treturn 'No';\n\t}\n\tif (file_name.match(/[a-zA-Z]{1}\\./)) {\n\t\treturn 'No';\n\t}\n\tif (file_name.match(/[a-zA-Z]{1}[^a-zA-Z]{1}\\./)) {\n\t\treturn 'No';\n\t}\n\treturn 'Yes';\n};\n\nconst filENamEChecK = (file_name) => {\n\tif (file_name.match(/[0-9]{3}/)) {\n\t\treturn 'No';\n\t}\n\tif (file_name.match(/[a-zA-Z]{1}\\./)) {\n\t\treturn 'No';\n\t}\n\tif (file_name.match(/[a-zA-Z]{1}[^a-zA-Z]{1}\\./)) {\n\t\treturn 'No';\n\t}\n\treturn 'Yes';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  if (lst.length === 0) return 0\n  let res = 0\n  lst.forEach((num, index) => {\n    if (index % 3 === 0) {\n      res += num * num\n    } else if (index % 4 === 0) {\n      res += num * num * num\n    }\n  })\n  return res\n}\n\nexport { sumsquaRes }\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  let res = sentence.split('');\n  let res = _.reduce(res, (acc, elem) => {\n    let isPrime = _.isPrime(acc);\n    if (!isPrime) {\n      res = acc;\n      return acc;\n    }\n    return _.reduce(elem, (acc, elem) => {\n      let isPrime = _.isPrime(acc);\n      if (!isPrime) {\n        res = acc;\n        return acc;\n      }\n      return acc + elem;\n    }, acc);\n  }, '');\n  return res;\n};\n\ndescribe('Word Insentence', () => {\n  it('should return \"is\" when input \"This is a test\"', () => {\n    expect(worsDsInsenteNce(\"This is a test\")).toBe(\"is\");\n  });\n\n  it('should return \"go for\" when input \"lets go for swimming\"', () => {\n    expect(worsDsInsenteNce(\"lets go for swimming\")).toBe(\"go for\");\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  const [numerator, denominator] = x.split('/');\n  return numerator === denominator &&\n    parseInt(numerator) >= parseInt(denominator) &&\n    parseInt(numerator) <= parseInt(denominator) &&\n    parseInt(numerator) % parseInt(denominator) === 0;\n};\n\nconsole.log(simPlifY('1/5', '5/1'));\nconsole.log(simPlifY('1/6', '2/1'));\nconsole.log(simPlifY('7/10', '10/2'));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const sorted = Array.from(nums).sort((a, b) => a - b)\n  const list = sorted.map(i => i.toString())\n  const list2 = sorted.map((_, i) => i.toString())\n  return list2.concat(list)\n}\n\n//Ordered list of points in ascending order\nconst ordErBypoint = (points) => {\n  const sorted = Array.from(points).sort((a, b) => a - b)\n  const list = sorted.map(i => i.toString())\n  const list2 = sorted.map((_, i) => i.toString())\n  return list2.concat(list)\n}\n\n/*\n  Write a function which returns a list of points\n  that are in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypoint([1, 11, -1, -11, -12]) == [1, 11, -1, -12, -11]\n  >>> ordErBypoint([]) == []\n  */\nconst ordErBypointAr = (points) => {\n  const sorted = Array.from(points).sort((a, b) => a - b)\n  const list = sorted.map(i => i.toString())\n  const list2 = sorted.map((_, i) => i.toString())\n  return list2.concat(list)\n}\n\n//Ordered list of points in ascending order\nconst ordErBypointBr = (points) => {\n  const sorted = Array.from(points).sort((a, b) => a - b)\n  const list = sorted.map(i => i.toString())\n  const list2 = sorted.map((_, i) => i.toString())\n  return list2.concat(list)\n}\n\n/*\n  Write a function which returns the median of the given list of numbers.\n  The order of the numbers in the list is not important.\n\n  For example:\n  >>> median([1, 2, 3, 4, 5]) == 3\n  >>> median([1, 3]) == 3\n  >>> median([1, 2, 4, 5]) == 3\n  */\nconst median = (nums) => {\n  const sorted = Array.from(nums).sort()\n  const mid = Math.floor(nums.length / 2)\n  if (nums.length % 2 === 0) {\n    return (sorted[mid] + sorted[mid - 1]) / 2\n  } else {\n    return sorted[mid]\n  }\n}\n\n/*\n  Write a function which returns the median of the given list of points.\n  The order of the points in the list is not important.\n\n  For example:\n  >>> median([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2]\n  >>> median([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2]\n  >>> median([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2]\n  >>> median([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2]\n  */\nconst medianAr = (points) => {\n  const sorted = Array.from(points).sort((a, b) => a - b)\n  const mid = Math.floor(points.length / 2)\n  if (points.length % 2 === 0) {\n    return (sorted[mid] + sorted[mid - 1]) / 2\n  } else {\n    return sorted[mid]\n  }\n}\n\n/*\n  Write a function which returns the median of the given list of points.\n  The order of the points in the list is not important.\n\n  For example:\n  >>> median([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2]\n  >>> median([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2]\n  >>> median([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2]\n  >>> median([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2]\n  */\nconst medianBr = (points) => {\n  const sorted = Array.from(points).sort((a, b) => a - b)\n  const mid = Math.floor(points.length / 2)\n  if (points.length % 2 === 0) {\n    return (sorted[mid] + sorted[mid - 1]) / 2\n  } else {\n    return sorted[mid]\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  const odd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return true\n    else return false\n  }\n  const firstOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return true\n    else return false\n  }\n  const lastOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return true\n    else return false\n  }\n  const even = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return true\n    else return false\n  }\n  const evenFirst = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return true\n    else return false\n  }\n  const evenLast = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return true\n    else return false\n  }\n  const oddFirst = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return true\n    else return false\n  }\n  const oddLast = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return true\n    else return false\n  }\n  const evenFirstAndLast = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return true\n    else return false\n  }\n  const evenOnly = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const evenOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const oddOnly = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenAndOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const evenOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const oddOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOnlyOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const evenOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const evenOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const oddOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOnlyOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const evenOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const oddOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const oddOnlyOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const oddOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOnlyOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const evenOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const oddOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOnlyOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const evenOrEven = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }\n  const oddOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 1) return false\n    else return true\n  }\n  const evenOnlyOrOdd = num => {\n    const num2 = num % 10\n    if (num2 % 2 === 0) return false\n    else return true\n  }"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1) * (a[i + 2] * a[i + 2] - a[i + 2] + 1)\n    i = i + 3\n  }\n  return t % 3\n}\n\nconst getmaxTRiple = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1)\n    i = i + 2\n  }\n  return t % 3\n}\n\nconst getmaxTRiple3 = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1) * (a[i + 2] * a[i + 2] - a[i + 2] + 1)\n    i = i + 3\n  }\n  return t % 3\n}\n\nconst getmaxTRiple2 = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1)\n    i = i + 2\n  }\n  return t % 3\n}\n\nconst getmaxTRiple1 = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1)\n    i = i + 2\n  }\n  return t % 3\n}\n\nconst getmaxTRiple0 = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1) * (a[i + 2] * a[i + 2] - a[i + 2] + 1)\n    i = i + 3\n  }\n  return t % 3\n}\n\nconst getmaxTRiple = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1) * (a[i + 2] * a[i + 2] - a[i + 2] + 1) * (a[i + 3] * a[i + 3] - a[i + 3] + 1)\n    i = i + 4\n  }\n  return t % 3\n}\n\nconst getmaxTRiple2 = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1) * (a[i + 2] * a[i + 2] - a[i + 2] + 1) * (a[i + 3] * a[i + 3] - a[i + 3] + 1) * (a[i + 4] * a[i + 4] - a[i + 4] + 1)\n    i = i + 5\n  }\n  return t % 3\n}\n\nconst getmaxTRiple1 = (n) => {\n  const a = [1, 3, 7, 13, 21]\n  const l = a.length\n  let i = 0\n  let t = 0\n  while (i < l) {\n    t = t + (a[i] * a[i] - a[i] + 1) * (a[i + 1] * a[i + 1] - a[i + 1] + 1) * (a[i + 2] * a[i + 2] - a[i + 2] + 1) * (a[i + 3] * a[i + 3] - a[i + 3] + 1) * (a[i + 4] * a[i +"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\",\n    \"Neptune\"\n  ]\n  const planetsInRange = []\n  for (let planet of planets) {\n    const distance = bf(planet1, planet)\n    if (distance && distance <= bf(planet2, planet)) {\n      planetsInRange.push(planet)\n    }\n  }\n  return planetsInRange\n}\n\n// export\n\nif (typeof module!== \"undefined\" && module.exports) {\n  module.exports = bf\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const dups = [];\n  const rst = [];\n  const l = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < l) {\n    if (lst[i].length % 2 === 1) {\n      dups.push(lst[i]);\n    }\n    else {\n      rst.push(lst[i]);\n    }\n    i++;\n  }\n  while (j < dups.length) {\n    lst.splice(rst.indexOf(dups[j]), 1);\n    j++;\n  }\n  return rst;\n}\n\nconst lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconsole.log(sorTedLIstSuM(lst));\n\n/*\nWrite a function that accepts a list of non-empty strings as a parameter,\n  and returns the list of strings with the longest word.\n  The list may contain duplicate words.\n  If there is a tie in length, the first one should be chosen.\n  For example:\n  assert longest_word([\"\", \"\", \"abc\", \"abcd\"]) => [\"abc\"]\n  assert longest_word([\"a\", \"a\", \"ab\", \"abc\"]) => [\"a\", \"ab\"]\n  */\nconst longestWord = (lst) => {\n  const rst = [];\n  const l = lst.length;\n  let i = 0;\n  while (i < l) {\n    if (lst[i].length > rst.length) {\n      rst = lst[i];\n    }\n    i++;\n  }\n  return rst;\n}\n\nconsole.log(longestWord([\"a\", \"a\", \"ab\", \"abc\"]));\n\n/*\nWrite a function that accepts a list of non-empty strings as a parameter,\n  and returns the list of strings with the shortest word.\n  The list may contain duplicate words.\n  If there is a tie in length, the first one should be chosen.\n  For example:\n  assert shortest_word([\"\", \"\", \"abc\", \"abcd\"]) => [\"\", \"\"]\n  assert shortest_word([\"a\", \"a\", \"ab\", \"abc\"]) => [\"a\"]\n  */\nconst shortestWord = (lst) => {\n  const rst = [];\n  const l = lst.length;\n  let i = 0;\n  while (i < l) {\n    if (lst[i].length < rst.length) {\n      rst = lst[i];\n    }\n    i++;\n  }\n  return rst;\n}\n\nconsole.log(shortestWord([\"a\", \"a\", \"ab\", \"abc\"]));\n\n/*\nWrite a function that takes a string as a parameter and returns the string\n  with the first and last letters switched.\n  For example:\n  assert string_swap(\"abc\") => \"cba\"\n  assert string_swap(\"aa\") => \"aa\"\n  assert string_swap(\"a\") => \"a\"\n  */\nconst stringSwap = (str) => {\n  const l = str.length;\n  let rst = \"\";\n  let i = 0;\n  while (i < l) {\n    rst += str[i];\n    i++;\n  }\n  i = l - 1;\n  while (i >= 0) {\n    rst += str[i];\n    i--;\n  }\n  return rst;\n}\n\nconsole.log(stringSwap(\"abc\"));\n\n/*\nWrite a function that takes a string as a parameter and returns a new string\n  with the first and last letters switched,\n  but without the first and last characters if they are the same.\n  For example:\n  assert string_swap_only(\"a\") => \"a\"\n  assert string_swap_only(\"aa\") => \"aa\"\n  assert string_swap_only(\"ab\") => \"ab\"\n  assert string_swap_only(\"aba\") => \"aba\"\n  */\nconst stringSwapOnly = (str) => {\n  const l = str.length;\n  let rst = \"\";\n  let i = 0;\n  while (i < l) {\n    if (str[i] === str[l - 1]) {\n      i++;\n    }\n    else {\n      rst += str[i];\n      i++;\n    }\n  }\n  return rst;\n}\n\nconsole.log(stringSwapOnly(\"a\"));\n\n/*\nWrite a function that takes a string as a parameter and returns a new string\n  with the first and last characters switched,\n  but without the first and last characters if they are the same.\n  For example:\n  assert string_swap_only(\"a\") => \"a\"\n  assert string_swap_only(\"aa\") => \"aa\"\n  assert string_swap_only(\"ab\") => \"ab\"\n  assert string_swap_only(\"aba\") => \"aba\"\n  */\nconst stringSwapOnly2 = (str) => {\n  const l = str.length;\n  let rst = \"\";\n  let i = 0;\n  while (i < l) {\n    if (str[i] === str[0]) {\n      i++;\n    }\n    else {\n      rst += str[i];\n      i++;\n    }\n  }\n  return rst;\n}\n\nconsole.log(stringSwapOnly2(\"a\"));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst sum = (x, y) => {\n  return x + y\n}\n\nconst main = () => {\n  let result = xOry(7, 34, 12)\n  console.log(result)\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  const sum = lst.reduce((a, b) => (a + b), 0)\n  return sum * sum\n}\n\n/*\n  Given a list of numbers, return the average of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 3 + 2 = 6\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 9\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst avgOddNumbers = (lst) => {\n  const sum = lst.reduce((a, b) => (a + b), 0)\n  return sum / lst.length\n}\n\n/*\n  Given a list of numbers, return the product of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 * 3 * 2 = 6\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 9 * -2 = -18\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 1.\n  */\nconst prodOddNumbers = (lst) => {\n  const sum = lst.reduce((a, b) => (a * b), 1)\n  return sum\n}\n\n/*\n  Given a list of numbers, return the median of the numbers\n  in the list. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 9\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst medianOfOddNumbers = (lst) => {\n  const median = Math.floor(lst.length / 2)\n  return lst[median]\n}\n\nconst test = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nconsole.log(douBleTHeDifFerEnce(test))\n\nconsole.log(avgOddNumbers(test))\n\nconsole.log(prodOddNumbers(test))\n\nconsole.log(medianOfOddNumbers(test))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const maxLen = Math.max(game.length, guess.length);\n  let score = 0;\n  let guessLen = 0;\n  let matches = 0;\n  let diffs = 0;\n  for (let i = 0; i < maxLen; i++) {\n    score = game[i];\n    guessLen = guess[i];\n    if (guessLen === 0) {\n      matches++;\n      diffs++;\n    } else if (score === guessLen) {\n      matches++;\n    } else {\n      diffs++;\n    }\n  }\n  return [matches, diffs];\n};\n\nexport default comPare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n    let strength = 0;\n    let ext_counter = 0;\n    extensions.forEach(ext => {\n        let strength_counter = 0;\n        let caps = 0;\n        let lowers = 0;\n        let ext_name = ext.toUpperCase();\n        for (let i = 0; i < ext_name.length; i++) {\n            if (ext_name[i].toUpperCase() === ext_name[i]) {\n                caps++;\n            }\n            if (ext_name[i].toLowerCase() === ext_name[i]) {\n                lowers++;\n            }\n        }\n        strength_counter = caps - lowers;\n        if (strength_counter > strength) {\n            strength = strength_counter;\n            ext_counter = ext_counter + 1;\n        }\n    });\n    if (ext_counter === 0) {\n        return class_name + '.' + 'no_extensions';\n    }\n    return class_name + '.' + extensions[ext_counter - 1];\n}\n\nconst getRandomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomStr = (length) => {\n    return getRandomInt(0, Math.pow(36, length) - 1).toString(36).slice(0, length);\n}\n\nconst getRandomStrOngeStExtEnsIon = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon2 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon3 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon4 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon5 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon6 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon7 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon8 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon9 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon10 = (length) => {\n    return getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length) + '.' + getRandomStr(length);\n}\n\nconst getRandomStrOngeStExtEnsIon11 = (length) => {\n    return getRandomStr(length) + '.' +"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const lenA = a.length;\n  const lenB = b.length;\n  let i = 0;\n  let j = 0;\n  let flag = true;\n  while (i < lenA && j < lenB) {\n    if (a[i] === b[j]) {\n      if (i > 0 && j > 0) {\n        flag = cycPattErnChEck(a.slice(i - 1), b.slice(j - 1));\n        if (!flag) {\n          return false;\n        }\n      }\n      i += 1;\n      j += 1;\n    }\n    else if (a[i] < b[j]) {\n      i += 1;\n    }\n    else {\n      j += 1;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n    let a = num,\n        b = num,\n        odd = 0,\n        even = 0,\n        count = 0,\n        len = num.toString().length;\n    while (b > 0) {\n        if (b % 2 === 0) {\n            count += 1;\n        } else {\n            odd += 1;\n        }\n        b = b / 2;\n    }\n    while (a > 0) {\n        if (a % 2 === 0) {\n            count += 1;\n        } else {\n            even += 1;\n        }\n        a = a / 2;\n    }\n    return { count, even, odd };\n};\n\nmodule.exports = eveNOddcount;<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n    let result = '';\n    if (number <= 3) {\n        result ='m';\n    } else if (number % 10 == 0) {\n        result = 'x';\n        number = number / 10;\n    } else if (number % 5 == 0) {\n        result = 'v';\n        number = number / 5;\n    } else if (number % 3 == 0) {\n        result = 'c';\n        number = number / 3;\n    }\n    while (number > 0) {\n        if (number % 10 == 0) {\n            result = result + 'x';\n            number = number / 10;\n        } else if (number % 5 == 0) {\n            result = result + 'v';\n            number = number / 5;\n        } else if (number % 3 == 0) {\n            result = result + 'c';\n            number = number / 3;\n        } else {\n            result = result + number.toString();\n            number = number / 10;\n        }\n    }\n    return result.toLowerCase();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n    if (a + b > c) {\n        return (a <= c && b <= c) || (a + b <= c && c <= b);\n    } else {\n        return (a <= b && c <= b) || (a + b <= b && b <= c);\n    }\n};\n\nconst rigHtAnGleTrIanGle2 = (a, b, c) => {\n    if (a + b > c) {\n        return (a <= c && b <= c) || (a + b <= c && c <= b);\n    } else {\n        return (a <= b && c <= b) || (a + b <= b && b <= c);\n    }\n};\n\n/*\n Given the length of a side of a rectangle. Return true if the length of the\n  side is greater than the length of the other two sides.\n  Example:\n  lenSidE(3) > lenSidE(5) == true\n  lenSidE(4) > lenSidE(5) == false\n  */\nconst lenSidE = (a, b) => {\n    return a > b;\n};\n\n/*\n Given the length of a side of a rectangle. Return true if the length of the\n  side is less than the length of the other two sides.\n  Example:\n  lenSidE(3) < lenSidE(5) == false\n  lenSidE(4) < lenSidE(5) == true\n  */\nconst lenSidL = (a, b) => {\n    return a < b;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the\n  triangle is a rectangle, false otherwise.\n  A rectangle is a triangle in which one side is right angle or 90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGleR = (a, b, c) => {\n    if (a + b > c && c + a > b) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the\n  triangle is an equilateral rectangle, false otherwise.\n  An equilateral rectangle is a rectangle in which each angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == false\n  rigHtAnGleTrIanGle(1, 2, 3) == true\n  */\nconst rigHtAnGleTrIanGleE = (a, b, c) => {\n    if (a + b == c && c + a == b) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n Given the length of a side of a rectangle. Return true if the length of the\n  side is an integer multiple of the other two sides.\n  Example:\n  lenSidE(3) % lenSidE(5) == false\n  lenSidE(4) % lenSidE(5) == true\n  */\nconst lenSidEInt = (a, b) => {\n    return a % b == 0;\n};\n\n/*\n Given the length of a side of a rectangle. Return true if the length of the\n  side is an integer multiple of the other two sides.\n  Example:\n  lenSidE(3) % lenSidE(5) == true\n  lenSidE(4) % lenSidE(5) == false\n  */\nconst lenSidELInt = (a, b) => {\n    return a % b!= 0;\n};\n\n/*\n Given the length of a side of a rectangle. Return true if the length of the\n  side is an integer multiple of the other two sides.\n  Example:\n  lenSidE(3) % lenSidE(5) == false\n  lenSidE(4) % lenSidE(5) == true\n  */\nconst lenSidELInt = (a, b) => {\n    return a % b!= 0;\n};\n\nconst main = () => {\n    const tests = [\n        [3, 4, 5, true],\n        [1, 2, 3, false],\n        [3, 4, 5, false],\n        [1, 2, 3, true],\n        [1, 2, 4, true],\n        [1, 3, 4, true],\n        [1, 2, 3, true],\n        [2, 3, 4, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [3, 4, 5, false],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [3, 4, 5, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3, true],\n        [1, 2, 3"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  if(words.length === 0) return \"\"\n  return words[0]\n}\n\nexport default finDMax<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if(number >= need) {\n    return [need, remaining]\n  }\n  else {\n    const eaten = number;\n    const left = remaining - eaten;\n    return [eaten, left];\n  }\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAgain = (number, need, remaining) => {\n  if(number >= need) {\n    return [need, remaining]\n  }\n  else {\n    const eaten = number;\n    const left = remaining - eaten;\n    return [eaten, left];\n  }\n}\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAgain2 = (number, need, remaining) => {\n  if(number >= need) {\n    return [need, remaining]\n  }\n  else {\n    const eaten = number;\n    const left = remaining - eaten;\n    return [eaten, left];\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const length = operatorLength - 1\n  let result = 0\n  let currentOperand = 0\n  for (let i = 0; i < length; i++) {\n    const currentOperator = operator[i]\n    const currentOperand = operand[currentOperand]\n    const result = (currentOperator === '+'? result + currentOperand : (currentOperator === '-'? result - currentOperand : (currentOperator === '*'? result * currentOperand : (currentOperator === '/'? result // TODO: floor division\n    : (currentOperator === '**'? Math.pow(result, currentOperand)\n    : (currentOperator === '-'? -result\n    : 0)))))\n  }\n  return result\n}\n\nconst doALgebRaTest = () => {\n  const operator = ['+', '*', '-', '//']\n  const operand = [2, 3, 4, 5]\n  const result = doALgebRa(operator, operand)\n  console.log('Result: ', result)\n}\n\ndoALgebRaTest()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let index = 0\n  while (index < s.length) {\n    if (s[index] === s[index].toUpperCase()) {\n      s = s.replace(s[index], s[index].toUpperCase())\n      index++\n    } else if (s[index] === s[index].toLowerCase()) {\n      s = s.replace(s[index], s[index].toLowerCase())\n      index++\n    } else {\n      index++\n    }\n  }\n  return s\n}\n\nconsole.log(solVe(\"1234\"))\nconsole.log(solVe(\"ab\"))\nconsole.log(solVe(\"#a@C\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (text) {\n    const md5 = crypto.createHash('md5');\n    md5.update(text);\n    return md5.digest('hex');\n  }\n  return null;\n};\n\n/*\n  Given an object, return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5({a: 'Hello world', b: 'Goodbye world'}) == 'a8d0f0eba9b4a0dbf1f0f5b9ae9e7c2'\n  >>> strIngTOMd5({a: 'Hello world', b: 'Goodbye world'}) == 'a8d0f0eba9b4a0dbf1f0f5b9ae9e7c2'\n  */\nconst strIngTOMd5 = (text) => {\n  if (text) {\n    const md5 = crypto.createHash('md5');\n    md5.update(JSON.stringify(text));\n    return md5.digest('hex');\n  }\n  return null;\n};\n\nmodule.exports = {\n  strIngTOMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const res = [];\n  let i = a;\n  let j = b;\n\n  while (i <= j) {\n    res.push(i);\n    i += 2;\n  }\n  return res;\n}\n\nconst genEratEInteGer = (a, b) => {\n  const res = [];\n  let i = a;\n  let j = b;\n\n  while (i <= j) {\n    res.push(i);\n    i++;\n  }\n  return res;\n}\n\nmodule.exports = {\n  genEratEInteGerS,\n  genEratEInteGer,\n};\n<|endoftext|>"}
